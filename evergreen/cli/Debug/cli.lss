
cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012aa0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e0  20000000  00012aa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000061c  200001e0  00012c80  000301e0  2**2
                  ALLOC
  3 .stack        00002004  200007fc  0001329c  000301e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
  6 .debug_info   00089692  00000000  00000000  00030261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000aaf8  00000000  00000000  000b98f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001e6c5  00000000  00000000  000c43eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000012d0  00000000  00000000  000e2ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002298  00000000  00000000  000e3d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00027067  00000000  00000000  000e6018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00027fe4  00000000  00000000  0010d07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097c75  00000000  00000000  00135063  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000477c  00000000  00000000  001cccd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 28 00 20 59 a4 00 00 55 a4 00 00 55 a4 00 00     .(. Y...U...U...
	...
      2c:	55 a4 00 00 00 00 00 00 00 00 00 00 55 a4 00 00     U...........U...
      3c:	55 a4 00 00 55 a4 00 00 55 a4 00 00 55 a4 00 00     U...U...U...U...
      4c:	55 a4 00 00 6d 21 00 00 55 a4 00 00 55 a4 00 00     U...m!..U...U...
      5c:	55 a4 00 00 55 a4 00 00 39 98 00 00 49 98 00 00     U...U...9...I...
      6c:	59 98 00 00 69 98 00 00 79 98 00 00 89 98 00 00     Y...i...y.......
      7c:	95 6f 00 00 a5 6f 00 00 b5 6f 00 00 55 a4 00 00     .o...o...o..U...
      8c:	55 a4 00 00 55 a4 00 00 00 00 00 00 00 00 00 00     U...U...........
      9c:	55 a4 00 00 55 a4 00 00 55 a4 00 00 55 a4 00 00     U...U...U...U...
      ac:	55 a4 00 00 00 00 00 00                             U.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001e0 	.word	0x200001e0
      d4:	00000000 	.word	0x00000000
      d8:	00012aa0 	.word	0x00012aa0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e4 	.word	0x200001e4
     108:	00012aa0 	.word	0x00012aa0
     10c:	00012aa0 	.word	0x00012aa0
     110:	00000000 	.word	0x00000000

00000114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b082      	sub	sp, #8
     118:	0005      	movs	r5, r0
     11a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     11c:	2200      	movs	r2, #0
     11e:	466b      	mov	r3, sp
     120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <usart_serial_getchar+0x28>)
     124:	466b      	mov	r3, sp
     126:	1d99      	adds	r1, r3, #6
     128:	0028      	movs	r0, r5
     12a:	47a0      	blx	r4
     12c:	2800      	cmp	r0, #0
     12e:	d1f9      	bne.n	124 <usart_serial_getchar+0x10>

	*c = temp;
     130:	466b      	mov	r3, sp
     132:	3306      	adds	r3, #6
     134:	881b      	ldrh	r3, [r3, #0]
     136:	7033      	strb	r3, [r6, #0]
}
     138:	b002      	add	sp, #8
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000088a1 	.word	0x000088a1

00000140 <usart_serial_putchar>:
{
     140:	b570      	push	{r4, r5, r6, lr}
     142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     144:	b28c      	uxth	r4, r1
     146:	4e03      	ldr	r6, [pc, #12]	; (154 <usart_serial_putchar+0x14>)
     148:	0021      	movs	r1, r4
     14a:	0028      	movs	r0, r5
     14c:	47b0      	blx	r6
     14e:	2800      	cmp	r0, #0
     150:	d1fa      	bne.n	148 <usart_serial_putchar+0x8>
}
     152:	bd70      	pop	{r4, r5, r6, pc}
     154:	00008875 	.word	0x00008875

00000158 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     15c:	2380      	movs	r3, #128	; 0x80
     15e:	05db      	lsls	r3, r3, #23
     160:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     162:	2300      	movs	r3, #0
     164:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     166:	22ff      	movs	r2, #255	; 0xff
     168:	4669      	mov	r1, sp
     16a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     16c:	2200      	movs	r2, #0
     16e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     170:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     172:	2401      	movs	r4, #1
     174:	2124      	movs	r1, #36	; 0x24
     176:	4668      	mov	r0, sp
     178:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     17a:	3101      	adds	r1, #1
     17c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     17e:	3101      	adds	r1, #1
     180:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     182:	3101      	adds	r1, #1
     184:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     186:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     188:	3105      	adds	r1, #5
     18a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     18c:	3101      	adds	r1, #1
     18e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     190:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     192:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     194:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     196:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     198:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     19a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     19c:	2313      	movs	r3, #19
     19e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     1a0:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200;
     1a2:	23e1      	movs	r3, #225	; 0xe1
     1a4:	025b      	lsls	r3, r3, #9
     1a6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     1a8:	23c4      	movs	r3, #196	; 0xc4
     1aa:	039b      	lsls	r3, r3, #14
     1ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
     1ae:	2301      	movs	r3, #1
     1b0:	425b      	negs	r3, r3
     1b2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
     1b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     1b6:	4b17      	ldr	r3, [pc, #92]	; (214 <configure_usart+0xbc>)
     1b8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
     1ba:	4b17      	ldr	r3, [pc, #92]	; (218 <configure_usart+0xc0>)
     1bc:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     1be:	4d17      	ldr	r5, [pc, #92]	; (21c <configure_usart+0xc4>)
     1c0:	4b17      	ldr	r3, [pc, #92]	; (220 <configure_usart+0xc8>)
     1c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     1c4:	4a17      	ldr	r2, [pc, #92]	; (224 <configure_usart+0xcc>)
     1c6:	4b18      	ldr	r3, [pc, #96]	; (228 <configure_usart+0xd0>)
     1c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     1ca:	4a18      	ldr	r2, [pc, #96]	; (22c <configure_usart+0xd4>)
     1cc:	4b18      	ldr	r3, [pc, #96]	; (230 <configure_usart+0xd8>)
     1ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     1d0:	466a      	mov	r2, sp
     1d2:	4918      	ldr	r1, [pc, #96]	; (234 <configure_usart+0xdc>)
     1d4:	0028      	movs	r0, r5
     1d6:	4b18      	ldr	r3, [pc, #96]	; (238 <configure_usart+0xe0>)
     1d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     1da:	4f18      	ldr	r7, [pc, #96]	; (23c <configure_usart+0xe4>)
     1dc:	683b      	ldr	r3, [r7, #0]
     1de:	6898      	ldr	r0, [r3, #8]
     1e0:	2100      	movs	r1, #0
     1e2:	4e17      	ldr	r6, [pc, #92]	; (240 <configure_usart+0xe8>)
     1e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
     1e6:	683b      	ldr	r3, [r7, #0]
     1e8:	6858      	ldr	r0, [r3, #4]
     1ea:	2100      	movs	r1, #0
     1ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     1ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1f0:	0030      	movs	r0, r6
     1f2:	4b14      	ldr	r3, [pc, #80]	; (244 <configure_usart+0xec>)
     1f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f6:	231f      	movs	r3, #31
     1f8:	4018      	ands	r0, r3
     1fa:	4084      	lsls	r4, r0
     1fc:	4b12      	ldr	r3, [pc, #72]	; (248 <configure_usart+0xf0>)
     1fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     204:	2b00      	cmp	r3, #0
     206:	d1fc      	bne.n	202 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     208:	6833      	ldr	r3, [r6, #0]
     20a:	2202      	movs	r2, #2
     20c:	4313      	orrs	r3, r2
     20e:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);

	usart_enable(&usart_instance);
}
     210:	b011      	add	sp, #68	; 0x44
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
     214:	002a0003 	.word	0x002a0003
     218:	002b0003 	.word	0x002b0003
     21c:	20000758 	.word	0x20000758
     220:	200006cc 	.word	0x200006cc
     224:	00000141 	.word	0x00000141
     228:	200006c8 	.word	0x200006c8
     22c:	00000115 	.word	0x00000115
     230:	200006c4 	.word	0x200006c4
     234:	42001800 	.word	0x42001800
     238:	00008531 	.word	0x00008531
     23c:	20000010 	.word	0x20000010
     240:	0000b48d 	.word	0x0000b48d
     244:	00009809 	.word	0x00009809
     248:	e000e100 	.word	0xe000e100

0000024c <configure_flash>:
#endif
#ifdef AT25DFX_H
void configure_flash()
{
     24c:	b570      	push	{r4, r5, r6, lr}
     24e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     250:	ac02      	add	r4, sp, #8
     252:	2501      	movs	r5, #1
     254:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     256:	2300      	movs	r3, #0
     258:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     25a:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     25c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     25e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     260:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     262:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     264:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     266:	2224      	movs	r2, #36	; 0x24
     268:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     26a:	3a18      	subs	r2, #24
     26c:	2100      	movs	r1, #0
     26e:	a808      	add	r0, sp, #32
     270:	4b23      	ldr	r3, [pc, #140]	; (300 <configure_flash+0xb4>)
     272:	4798      	blx	r3
	struct at25dfx_chip_config at_chip_config;
	struct spi_config at25dfx_spi_config;

	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
     274:	4b23      	ldr	r3, [pc, #140]	; (304 <configure_flash+0xb8>)
     276:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
     278:	2380      	movs	r3, #128	; 0x80
     27a:	025b      	lsls	r3, r3, #9
     27c:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
     27e:	4b22      	ldr	r3, [pc, #136]	; (308 <configure_flash+0xbc>)
     280:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
     282:	2301      	movs	r3, #1
     284:	425b      	negs	r3, r3
     286:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
     288:	4b20      	ldr	r3, [pc, #128]	; (30c <configure_flash+0xc0>)
     28a:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
     28c:	4b20      	ldr	r3, [pc, #128]	; (310 <configure_flash+0xc4>)
     28e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
     290:	4e20      	ldr	r6, [pc, #128]	; (314 <configure_flash+0xc8>)
     292:	0022      	movs	r2, r4
     294:	4920      	ldr	r1, [pc, #128]	; (318 <configure_flash+0xcc>)
     296:	0030      	movs	r0, r6
     298:	4b20      	ldr	r3, [pc, #128]	; (31c <configure_flash+0xd0>)
     29a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     29c:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     29e:	0020      	movs	r0, r4
     2a0:	4b1f      	ldr	r3, [pc, #124]	; (320 <configure_flash+0xd4>)
     2a2:	4798      	blx	r3
     2a4:	231f      	movs	r3, #31
     2a6:	4018      	ands	r0, r3
     2a8:	4085      	lsls	r5, r0
     2aa:	4b1e      	ldr	r3, [pc, #120]	; (324 <configure_flash+0xd8>)
     2ac:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     2ae:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     2b0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     2b2:	2b00      	cmp	r3, #0
     2b4:	d1fc      	bne.n	2b0 <configure_flash+0x64>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2b6:	6823      	ldr	r3, [r4, #0]
     2b8:	2202      	movs	r2, #2
     2ba:	4313      	orrs	r3, r2
     2bc:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
     2be:	4c1a      	ldr	r4, [pc, #104]	; (328 <configure_flash+0xdc>)
     2c0:	2304      	movs	r3, #4
     2c2:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
     2c4:	3303      	adds	r3, #3
     2c6:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
     2c8:	4b12      	ldr	r3, [pc, #72]	; (314 <configure_flash+0xc8>)
     2ca:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2301      	movs	r3, #1
     2d0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     2d2:	2200      	movs	r2, #0
     2d4:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
     2d6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
     2d8:	2007      	movs	r0, #7
     2da:	4b14      	ldr	r3, [pc, #80]	; (32c <configure_flash+0xe0>)
     2dc:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
     2de:	7962      	ldrb	r2, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2e0:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2e4:	2900      	cmp	r1, #0
     2e6:	d104      	bne.n	2f2 <configure_flash+0xa6>
		return &(ports[port_index]->Group[group_index]);
     2e8:	0953      	lsrs	r3, r2, #5
     2ea:	01db      	lsls	r3, r3, #7
     2ec:	4910      	ldr	r1, [pc, #64]	; (330 <configure_flash+0xe4>)
     2ee:	468c      	mov	ip, r1
     2f0:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2f2:	211f      	movs	r1, #31
     2f4:	4011      	ands	r1, r2
     2f6:	2201      	movs	r2, #1
     2f8:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2fa:	619a      	str	r2, [r3, #24]
	spi_enable(&at25dfx_spi);

	at_chip_config.type = AT25DFX_MEM_TYPE;
	at_chip_config.cs_pin = AT25DFX_CS;
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at_chip_config);
}
     2fc:	b010      	add	sp, #64	; 0x40
     2fe:	bd70      	pop	{r4, r5, r6, pc}
     300:	0000a8f7 	.word	0x0000a8f7
     304:	000f4240 	.word	0x000f4240
     308:	00100002 	.word	0x00100002
     30c:	00120002 	.word	0x00120002
     310:	00130002 	.word	0x00130002
     314:	200003f8 	.word	0x200003f8
     318:	42000c00 	.word	0x42000c00
     31c:	00008bfd 	.word	0x00008bfd
     320:	00009809 	.word	0x00009809
     324:	e000e100 	.word	0xe000e100
     328:	200002ac 	.word	0x200002ac
     32c:	00009c21 	.word	0x00009c21
     330:	41004400 	.word	0x41004400

00000334 <configure_nvm>:
#endif

#ifdef NVM_H_INCLUDED
void configure_nvm()
{
     334:	b500      	push	{lr}
     336:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
     338:	2200      	movs	r2, #0
     33a:	466b      	mov	r3, sp
     33c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
     33e:	4b07      	ldr	r3, [pc, #28]	; (35c <configure_nvm+0x28>)
     340:	685b      	ldr	r3, [r3, #4]
     342:	06db      	lsls	r3, r3, #27
     344:	0f1b      	lsrs	r3, r3, #28
     346:	4669      	mov	r1, sp
     348:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
     34a:	70ca      	strb	r2, [r1, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
     34c:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;

	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
     34e:	704a      	strb	r2, [r1, #1]

	nvm_set_config(&config_nvm);
     350:	4668      	mov	r0, sp
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <configure_nvm+0x2c>)
     354:	4798      	blx	r3
}
     356:	b003      	add	sp, #12
     358:	bd00      	pop	{pc}
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	41004000 	.word	0x41004000
     360:	00009931 	.word	0x00009931

00000364 <configure_i2c_hdc>:
 **/

#include "hdc_1080.h"

void configure_i2c_hdc()
{
     364:	b510      	push	{r4, lr}
     366:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     368:	aa01      	add	r2, sp, #4
     36a:	2364      	movs	r3, #100	; 0x64
     36c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     36e:	4b1f      	ldr	r3, [pc, #124]	; (3ec <configure_i2c_hdc+0x88>)
     370:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     372:	2300      	movs	r3, #0
     374:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     376:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     378:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     37a:	2180      	movs	r1, #128	; 0x80
     37c:	0389      	lsls	r1, r1, #14
     37e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
     380:	2101      	movs	r1, #1
     382:	4249      	negs	r1, r1
     384:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
     386:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     388:	3125      	adds	r1, #37	; 0x25
     38a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     38c:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     38e:	3108      	adds	r1, #8
     390:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     392:	3101      	adds	r1, #1
     394:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     396:	3101      	adds	r1, #1
     398:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     39a:	33d7      	adds	r3, #215	; 0xd7
     39c:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     39e:	4b14      	ldr	r3, [pc, #80]	; (3f0 <configure_i2c_hdc+0x8c>)
     3a0:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     3a2:	4b14      	ldr	r3, [pc, #80]	; (3f4 <configure_i2c_hdc+0x90>)
     3a4:	6213      	str	r3, [r2, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	enum status_code init_status = i2c_master_init(&i2c_hdc, SERCOM3, &config_i2c_master);
     3a6:	4914      	ldr	r1, [pc, #80]	; (3f8 <configure_i2c_hdc+0x94>)
     3a8:	4814      	ldr	r0, [pc, #80]	; (3fc <configure_i2c_hdc+0x98>)
     3aa:	4b15      	ldr	r3, [pc, #84]	; (400 <configure_i2c_hdc+0x9c>)
     3ac:	4798      	blx	r3
	if (STATUS_OK != init_status) {
     3ae:	2800      	cmp	r0, #0
     3b0:	d116      	bne.n	3e0 <configure_i2c_hdc+0x7c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3b2:	4b12      	ldr	r3, [pc, #72]	; (3fc <configure_i2c_hdc+0x98>)
     3b4:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     3b6:	2107      	movs	r1, #7
     3b8:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
     3ba:	4219      	tst	r1, r3
     3bc:	d1fc      	bne.n	3b8 <configure_i2c_hdc+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     3be:	6813      	ldr	r3, [r2, #0]
     3c0:	2102      	movs	r1, #2
     3c2:	430b      	orrs	r3, r1
     3c4:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     3c6:	4b0d      	ldr	r3, [pc, #52]	; (3fc <configure_i2c_hdc+0x98>)
     3c8:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
     3ca:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     3cc:	2010      	movs	r0, #16
     3ce:	8b51      	ldrh	r1, [r2, #26]
     3d0:	4201      	tst	r1, r0
     3d2:	d108      	bne.n	3e6 <configure_i2c_hdc+0x82>
		timeout_counter++;
     3d4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     3d6:	42a3      	cmp	r3, r4
     3d8:	d3f9      	bcc.n	3ce <configure_i2c_hdc+0x6a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     3da:	2310      	movs	r3, #16
     3dc:	8353      	strh	r3, [r2, #26]
     3de:	e002      	b.n	3e6 <configure_i2c_hdc+0x82>
		printf("failed to initialize HDC1080 driver.\r\n");
     3e0:	4808      	ldr	r0, [pc, #32]	; (404 <configure_i2c_hdc+0xa0>)
     3e2:	4b09      	ldr	r3, [pc, #36]	; (408 <configure_i2c_hdc+0xa4>)
     3e4:	4798      	blx	r3
		return;
	}
	i2c_master_enable(&i2c_hdc);
}
     3e6:	b00e      	add	sp, #56	; 0x38
     3e8:	bd10      	pop	{r4, pc}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	00000d48 	.word	0x00000d48
     3f0:	00160002 	.word	0x00160002
     3f4:	00170002 	.word	0x00170002
     3f8:	42001400 	.word	0x42001400
     3fc:	2000029c 	.word	0x2000029c
     400:	00006fd1 	.word	0x00006fd1
     404:	0000ff88 	.word	0x0000ff88
     408:	0000b455 	.word	0x0000b455

0000040c <set_resolution>:
//NOTE: bit[10] = 1 for 11 bit temp
//NOTE: bit[9:8] = 00 for 14 bit humidity
//NOTE: bit[9:8] = 01 for 11 bit humidity
//NOTE: bit[9:8] = 10 for 8 bit humidity
void set_resolution(hdc_resolution temp_resolution, hdc_resolution humidity_resolution)
{
     40c:	b570      	push	{r4, r5, r6, lr}
     40e:	b084      	sub	sp, #16
	int8_t data_packet[3];

	data_packet[0] = HDC_SET_RES;
     410:	2202      	movs	r2, #2
     412:	ab03      	add	r3, sp, #12
     414:	701a      	strb	r2, [r3, #0]
	uint8_t write_byte = 0;
	switch (temp_resolution) {
     416:	2801      	cmp	r0, #1
     418:	d003      	beq.n	422 <set_resolution+0x16>
     41a:	2802      	cmp	r0, #2
     41c:	d027      	beq.n	46e <set_resolution+0x62>
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
	if (STATUS_OK != i2c_status)
		printf("error trying to set resolution!\r\n");

	return;
}
     41e:	b004      	add	sp, #16
     420:	bd70      	pop	{r4, r5, r6, pc}
		write_byte = (1 << 2);
     422:	2204      	movs	r2, #4
	switch (humidity_resolution) {
     424:	2901      	cmp	r1, #1
     426:	d024      	beq.n	472 <set_resolution+0x66>
     428:	2900      	cmp	r1, #0
     42a:	d025      	beq.n	478 <set_resolution+0x6c>
     42c:	2902      	cmp	r1, #2
     42e:	d1f6      	bne.n	41e <set_resolution+0x12>
	write_byte |= (1 << 4);
     430:	2310      	movs	r3, #16
     432:	431a      	orrs	r2, r3
	data_packet[1] = write_byte;
     434:	b252      	sxtb	r2, r2
     436:	ad03      	add	r5, sp, #12
     438:	706a      	strb	r2, [r5, #1]
	data_packet[2] = 0x00;
     43a:	2400      	movs	r4, #0
     43c:	70ac      	strb	r4, [r5, #2]
	printf("data packet: 0x%02x 0x%02x 0x%02x\r\n", data_packet[0], data_packet[1], data_packet[2]);
     43e:	2300      	movs	r3, #0
     440:	2102      	movs	r1, #2
     442:	480f      	ldr	r0, [pc, #60]	; (480 <set_resolution+0x74>)
     444:	4e0f      	ldr	r6, [pc, #60]	; (484 <set_resolution+0x78>)
     446:	47b0      	blx	r6
	struct i2c_master_packet packet = {
     448:	2340      	movs	r3, #64	; 0x40
     44a:	466a      	mov	r2, sp
     44c:	8013      	strh	r3, [r2, #0]
     44e:	3b3d      	subs	r3, #61	; 0x3d
     450:	8053      	strh	r3, [r2, #2]
     452:	9501      	str	r5, [sp, #4]
     454:	7214      	strb	r4, [r2, #8]
     456:	7254      	strb	r4, [r2, #9]
     458:	7294      	strb	r4, [r2, #10]
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
     45a:	4669      	mov	r1, sp
     45c:	480a      	ldr	r0, [pc, #40]	; (488 <set_resolution+0x7c>)
     45e:	4b0b      	ldr	r3, [pc, #44]	; (48c <set_resolution+0x80>)
     460:	4798      	blx	r3
	if (STATUS_OK != i2c_status)
     462:	2800      	cmp	r0, #0
     464:	d0db      	beq.n	41e <set_resolution+0x12>
		printf("error trying to set resolution!\r\n");
     466:	480a      	ldr	r0, [pc, #40]	; (490 <set_resolution+0x84>)
     468:	4b0a      	ldr	r3, [pc, #40]	; (494 <set_resolution+0x88>)
     46a:	4798      	blx	r3
     46c:	e7d7      	b.n	41e <set_resolution+0x12>
		write_byte = 0;
     46e:	2200      	movs	r2, #0
     470:	e7d8      	b.n	424 <set_resolution+0x18>
		write_byte |= 1;
     472:	2301      	movs	r3, #1
     474:	431a      	orrs	r2, r3
		break;
     476:	e7db      	b.n	430 <set_resolution+0x24>
		write_byte |= 2;
     478:	2302      	movs	r3, #2
     47a:	431a      	orrs	r2, r3
		break;
     47c:	e7d8      	b.n	430 <set_resolution+0x24>
     47e:	46c0      	nop			; (mov r8, r8)
     480:	00010020 	.word	0x00010020
     484:	0000b339 	.word	0x0000b339
     488:	2000029c 	.word	0x2000029c
     48c:	000075bd 	.word	0x000075bd
     490:	00010044 	.word	0x00010044
     494:	0000b455 	.word	0x0000b455

00000498 <request_data>:

uint16_t request_data(hdc_request command)
{
     498:	b530      	push	{r4, r5, lr}
     49a:	b087      	sub	sp, #28
     49c:	0004      	movs	r4, r0
	uint8_t received_data[2];
	uint8_t write_buffer = command;
     49e:	2313      	movs	r3, #19
     4a0:	446b      	add	r3, sp
     4a2:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
     4a4:	a901      	add	r1, sp, #4
     4a6:	2240      	movs	r2, #64	; 0x40
     4a8:	800a      	strh	r2, [r1, #0]
     4aa:	3a3f      	subs	r2, #63	; 0x3f
     4ac:	804a      	strh	r2, [r1, #2]
     4ae:	604b      	str	r3, [r1, #4]
     4b0:	2300      	movs	r3, #0
     4b2:	720b      	strb	r3, [r1, #8]
     4b4:	724b      	strb	r3, [r1, #9]
     4b6:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &packet);
     4b8:	4812      	ldr	r0, [pc, #72]	; (504 <request_data+0x6c>)
     4ba:	4b13      	ldr	r3, [pc, #76]	; (508 <request_data+0x70>)
     4bc:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
     4be:	2800      	cmp	r0, #0
     4c0:	d006      	beq.n	4d0 <request_data+0x38>
		printf("failed to send register potato request for command 0x%02x!\r\n", command);
     4c2:	0021      	movs	r1, r4
     4c4:	4811      	ldr	r0, [pc, #68]	; (50c <request_data+0x74>)
     4c6:	4b12      	ldr	r3, [pc, #72]	; (510 <request_data+0x78>)
     4c8:	4798      	blx	r3
		return -1;
     4ca:	4812      	ldr	r0, [pc, #72]	; (514 <request_data+0x7c>)
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
		return -1;
	}
	return (received_data[0] << 8) | received_data[1];
}
     4cc:	b007      	add	sp, #28
     4ce:	bd30      	pop	{r4, r5, pc}
	packet.data = received_data;
     4d0:	ad01      	add	r5, sp, #4
     4d2:	ab05      	add	r3, sp, #20
     4d4:	9302      	str	r3, [sp, #8]
	packet.data_length = 2;
     4d6:	2302      	movs	r3, #2
     4d8:	806b      	strh	r3, [r5, #2]
	delay_ms(35);
     4da:	2023      	movs	r0, #35	; 0x23
     4dc:	4b0e      	ldr	r3, [pc, #56]	; (518 <request_data+0x80>)
     4de:	4798      	blx	r3
	i2c_code = i2c_master_read_packet_wait(&i2c_hdc, &packet);
     4e0:	0029      	movs	r1, r5
     4e2:	4808      	ldr	r0, [pc, #32]	; (504 <request_data+0x6c>)
     4e4:	4b0d      	ldr	r3, [pc, #52]	; (51c <request_data+0x84>)
     4e6:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
     4e8:	2800      	cmp	r0, #0
     4ea:	d105      	bne.n	4f8 <request_data+0x60>
	return (received_data[0] << 8) | received_data[1];
     4ec:	aa05      	add	r2, sp, #20
     4ee:	7813      	ldrb	r3, [r2, #0]
     4f0:	021b      	lsls	r3, r3, #8
     4f2:	7850      	ldrb	r0, [r2, #1]
     4f4:	4318      	orrs	r0, r3
     4f6:	e7e9      	b.n	4cc <request_data+0x34>
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
     4f8:	0021      	movs	r1, r4
     4fa:	4809      	ldr	r0, [pc, #36]	; (520 <request_data+0x88>)
     4fc:	4b04      	ldr	r3, [pc, #16]	; (510 <request_data+0x78>)
     4fe:	4798      	blx	r3
		return -1;
     500:	4804      	ldr	r0, [pc, #16]	; (514 <request_data+0x7c>)
     502:	e7e3      	b.n	4cc <request_data+0x34>
     504:	2000029c 	.word	0x2000029c
     508:	000075d1 	.word	0x000075d1
     50c:	0000ffb0 	.word	0x0000ffb0
     510:	0000b339 	.word	0x0000b339
     514:	0000ffff 	.word	0x0000ffff
     518:	00009905 	.word	0x00009905
     51c:	000075a9 	.word	0x000075a9
     520:	0000fff0 	.word	0x0000fff0

00000524 <get_hdc_manufacturer_id>:

uint16_t get_hdc_manufacturer_id()
{
     524:	b510      	push	{r4, lr}
	return request_data(HDC_MANUFACTURER_ID);
     526:	20fe      	movs	r0, #254	; 0xfe
     528:	4b01      	ldr	r3, [pc, #4]	; (530 <get_hdc_manufacturer_id+0xc>)
     52a:	4798      	blx	r3
}
     52c:	bd10      	pop	{r4, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	00000499 	.word	0x00000499

00000534 <get_hdc_device_id>:
uint16_t get_hdc_device_id()
{
     534:	b510      	push	{r4, lr}
	return request_data(HDC_DEVICE_ID);
     536:	20ff      	movs	r0, #255	; 0xff
     538:	4b01      	ldr	r3, [pc, #4]	; (540 <get_hdc_device_id+0xc>)
     53a:	4798      	blx	r3
}
     53c:	bd10      	pop	{r4, pc}
     53e:	46c0      	nop			; (mov r8, r8)
     540:	00000499 	.word	0x00000499

00000544 <get_humidity>:
double get_humidity()
{
     544:	b510      	push	{r4, lr}
	double raw_data = request_data(HDC_HUMIDITY);
     546:	2001      	movs	r0, #1
     548:	4b05      	ldr	r3, [pc, #20]	; (560 <get_humidity+0x1c>)
     54a:	4798      	blx	r3
     54c:	4b05      	ldr	r3, [pc, #20]	; (564 <get_humidity+0x20>)
     54e:	4798      	blx	r3

	raw_data /= 65536.0;
     550:	4c05      	ldr	r4, [pc, #20]	; (568 <get_humidity+0x24>)
     552:	2200      	movs	r2, #0
     554:	4b05      	ldr	r3, [pc, #20]	; (56c <get_humidity+0x28>)
     556:	47a0      	blx	r4
	raw_data *= 100.0;
     558:	2200      	movs	r2, #0
     55a:	4b05      	ldr	r3, [pc, #20]	; (570 <get_humidity+0x2c>)
     55c:	47a0      	blx	r4
	return raw_data;
}
     55e:	bd10      	pop	{r4, pc}
     560:	00000499 	.word	0x00000499
     564:	0000fd25 	.word	0x0000fd25
     568:	0000f0cd 	.word	0x0000f0cd
     56c:	3ef00000 	.word	0x3ef00000
     570:	40590000 	.word	0x40590000

00000574 <get_temp>:

double get_temp()
{
     574:	b510      	push	{r4, lr}
	double raw_data = request_data(HDC_TEMP);
     576:	2000      	movs	r0, #0
     578:	4b07      	ldr	r3, [pc, #28]	; (598 <get_temp+0x24>)
     57a:	4798      	blx	r3
     57c:	4b07      	ldr	r3, [pc, #28]	; (59c <get_temp+0x28>)
     57e:	4798      	blx	r3

	raw_data /= 65536.0;
     580:	4c07      	ldr	r4, [pc, #28]	; (5a0 <get_temp+0x2c>)
     582:	2200      	movs	r2, #0
     584:	4b07      	ldr	r3, [pc, #28]	; (5a4 <get_temp+0x30>)
     586:	47a0      	blx	r4
	raw_data *= 165.0;
     588:	2200      	movs	r2, #0
     58a:	4b07      	ldr	r3, [pc, #28]	; (5a8 <get_temp+0x34>)
     58c:	47a0      	blx	r4
	raw_data -= 40.0;
     58e:	2200      	movs	r2, #0
     590:	4b06      	ldr	r3, [pc, #24]	; (5ac <get_temp+0x38>)
     592:	4c07      	ldr	r4, [pc, #28]	; (5b0 <get_temp+0x3c>)
     594:	47a0      	blx	r4
	return raw_data;
}
     596:	bd10      	pop	{r4, pc}
     598:	00000499 	.word	0x00000499
     59c:	0000fd25 	.word	0x0000fd25
     5a0:	0000f0cd 	.word	0x0000f0cd
     5a4:	3ef00000 	.word	0x3ef00000
     5a8:	4064a000 	.word	0x4064a000
     5ac:	40440000 	.word	0x40440000
     5b0:	0000f5cd 	.word	0x0000f5cd

000005b4 <clear_state>:
 *
 */
//TODO: check and see if it will only clear on mask
static void clear_state(download_state mask)
{
	down_state &= ~mask;
     5b4:	4a02      	ldr	r2, [pc, #8]	; (5c0 <clear_state+0xc>)
     5b6:	8813      	ldrh	r3, [r2, #0]
     5b8:	4383      	bics	r3, r0
     5ba:	8013      	strh	r3, [r2, #0]
}
     5bc:	4770      	bx	lr
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	200002b4 	.word	0x200002b4

000005c4 <add_state>:
/**
 * add a given state to the global download_state @ref down_state
 * @param mask add given state
 */
static void add_state(download_state mask)
{
     5c4:	b510      	push	{r4, lr}
	down_state |= mask;
     5c6:	4a0a      	ldr	r2, [pc, #40]	; (5f0 <add_state+0x2c>)
     5c8:	8813      	ldrh	r3, [r2, #0]
     5ca:	4303      	orrs	r3, r0
     5cc:	8013      	strh	r3, [r2, #0]
	if (mask == CANCELED || mask == COMPLETED)
     5ce:	0002      	movs	r2, r0
     5d0:	3a10      	subs	r2, #16
     5d2:	4b08      	ldr	r3, [pc, #32]	; (5f4 <add_state+0x30>)
     5d4:	421a      	tst	r2, r3
     5d6:	d002      	beq.n	5de <add_state+0x1a>
		at25dfx_chip_sleep(&at25dfx_chip);
	else if (mask == DOWNLOADING)
     5d8:	2808      	cmp	r0, #8
     5da:	d004      	beq.n	5e6 <add_state+0x22>
		at25dfx_chip_wake(&at25dfx_chip);
}
     5dc:	bd10      	pop	{r4, pc}
		at25dfx_chip_sleep(&at25dfx_chip);
     5de:	4806      	ldr	r0, [pc, #24]	; (5f8 <add_state+0x34>)
     5e0:	4b06      	ldr	r3, [pc, #24]	; (5fc <add_state+0x38>)
     5e2:	4798      	blx	r3
     5e4:	e7fa      	b.n	5dc <add_state+0x18>
		at25dfx_chip_wake(&at25dfx_chip);
     5e6:	4804      	ldr	r0, [pc, #16]	; (5f8 <add_state+0x34>)
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <add_state+0x3c>)
     5ea:	4798      	blx	r3
}
     5ec:	e7f6      	b.n	5dc <add_state+0x18>
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	200002b4 	.word	0x200002b4
     5f4:	0000ffef 	.word	0x0000ffef
     5f8:	200002ac 	.word	0x200002ac
     5fc:	00001e01 	.word	0x00001e01
     600:	00001e8d 	.word	0x00001e8d

00000604 <write_firmware_metadata>:
		return;
	}
}

static void write_firmware_metadata(uint32_t firmware_address, uint16_t firmware_version, uint32_t firmware_checksum, uint32_t fw_size)
{
     604:	b570      	push	{r4, r5, r6, lr}
     606:	b0c4      	sub	sp, #272	; 0x110
	if (FW1_ADDR == firmware_address)
     608:	2480      	movs	r4, #128	; 0x80
     60a:	01a4      	lsls	r4, r4, #6
     60c:	42a0      	cmp	r0, r4
     60e:	d01b      	beq.n	648 <write_firmware_metadata+0x44>
		firmware_address = FW1_HEADER_ADDR;
	else if (FW2_ADDR == firmware_address)
     610:	2482      	movs	r4, #130	; 0x82
     612:	02e4      	lsls	r4, r4, #11
     614:	42a0      	cmp	r0, r4
     616:	d001      	beq.n	61c <write_firmware_metadata+0x18>
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
	if (STATUS_OK != write_code) {
		printf("write_firmware_metadata: could not write to flash!\r\n");
		return;
	}
}
     618:	b044      	add	sp, #272	; 0x110
     61a:	bd70      	pop	{r4, r5, r6, pc}
		firmware_address = FW2_HEADER_ADDR;
     61c:	2480      	movs	r4, #128	; 0x80
     61e:	02e4      	lsls	r4, r4, #11
	fw_header_t new_firmware_header = { .fw_version = firmware_version, .checksum = firmware_checksum, .size = fw_size };
     620:	a841      	add	r0, sp, #260	; 0x104
     622:	8001      	strh	r1, [r0, #0]
     624:	9242      	str	r2, [sp, #264]	; 0x108
     626:	9343      	str	r3, [sp, #268]	; 0x10c
	memcpy(write_buffer, &new_firmware_header, sizeof(fw_header_t));
     628:	aa01      	add	r2, sp, #4
     62a:	0013      	movs	r3, r2
     62c:	c862      	ldmia	r0!, {r1, r5, r6}
     62e:	c362      	stmia	r3!, {r1, r5, r6}
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
     630:	2380      	movs	r3, #128	; 0x80
     632:	005b      	lsls	r3, r3, #1
     634:	0021      	movs	r1, r4
     636:	4806      	ldr	r0, [pc, #24]	; (650 <write_firmware_metadata+0x4c>)
     638:	4c06      	ldr	r4, [pc, #24]	; (654 <write_firmware_metadata+0x50>)
     63a:	47a0      	blx	r4
	if (STATUS_OK != write_code) {
     63c:	2800      	cmp	r0, #0
     63e:	d0eb      	beq.n	618 <write_firmware_metadata+0x14>
		printf("write_firmware_metadata: could not write to flash!\r\n");
     640:	4805      	ldr	r0, [pc, #20]	; (658 <write_firmware_metadata+0x54>)
     642:	4b06      	ldr	r3, [pc, #24]	; (65c <write_firmware_metadata+0x58>)
     644:	4798      	blx	r3
		return;
     646:	e7e7      	b.n	618 <write_firmware_metadata+0x14>
		firmware_address = FW1_HEADER_ADDR;
     648:	2480      	movs	r4, #128	; 0x80
     64a:	0164      	lsls	r4, r4, #5
     64c:	e7e8      	b.n	620 <write_firmware_metadata+0x1c>
     64e:	46c0      	nop			; (mov r8, r8)
     650:	200002ac 	.word	0x200002ac
     654:	000016bd 	.word	0x000016bd
     658:	000109c4 	.word	0x000109c4
     65c:	0000b455 	.word	0x0000b455

00000660 <update_boot_status>:

/**
 * update the boot status struct in internal memory
 */
static void update_boot_status()
{
     660:	b5f0      	push	{r4, r5, r6, r7, lr}
     662:	b0c7      	sub	sp, #284	; 0x11c
	struct nvm_parameters nvm_information;

	nvm_get_parameters(&nvm_information);
     664:	a843      	add	r0, sp, #268	; 0x10c
     666:	4b2b      	ldr	r3, [pc, #172]	; (714 <update_boot_status+0xb4>)
     668:	4798      	blx	r3
	uint16_t num_pages = nvm_information.nvm_number_of_pages;
	int page_to_write = BOOT_STATUS_ADDR / NVMCTRL_PAGE_SIZE;
	int row_to_erase = page_to_write / NVMCTRL_ROW_PAGES;
	printf("update_boot_status: row_to_erase: %d\r\n", row_to_erase);
     66a:	213f      	movs	r1, #63	; 0x3f
     66c:	482a      	ldr	r0, [pc, #168]	; (718 <update_boot_status+0xb8>)
     66e:	4d2b      	ldr	r5, [pc, #172]	; (71c <update_boot_status+0xbc>)
     670:	47a8      	blx	r5
	printf("update_boot_status: page_to_write: %d\r\n", page_to_write);
     672:	21ff      	movs	r1, #255	; 0xff
     674:	482a      	ldr	r0, [pc, #168]	; (720 <update_boot_status+0xc0>)
     676:	47a8      	blx	r5
	uint8_t page_offset = page_to_write - (row_to_erase * NVMCTRL_ROW_PAGES);
	int row_address = row_to_erase * NVMCTRL_ROW_SIZE;
	printf("update_boot_status: row_address: %d\r\n", row_address);
     678:	24fc      	movs	r4, #252	; 0xfc
     67a:	01a4      	lsls	r4, r4, #6
     67c:	0021      	movs	r1, r4
     67e:	4829      	ldr	r0, [pc, #164]	; (724 <update_boot_status+0xc4>)
     680:	47a8      	blx	r5
	printf("update_boot_status: page_offset: %d\r\n", page_offset);
     682:	2103      	movs	r1, #3
     684:	4828      	ldr	r0, [pc, #160]	; (728 <update_boot_status+0xc8>)
     686:	47a8      	blx	r5
	uint8_t row_buffer[NVMCTRL_ROW_SIZE];
	enum status_code read_nvm_code;
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		int offset = i * NVMCTRL_PAGE_SIZE;
		do
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
     688:	4e28      	ldr	r6, [pc, #160]	; (72c <update_boot_status+0xcc>)
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     68a:	2780      	movs	r7, #128	; 0x80
     68c:	01ff      	lsls	r7, r7, #7
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
     68e:	4b28      	ldr	r3, [pc, #160]	; (730 <update_boot_status+0xd0>)
     690:	18e5      	adds	r5, r4, r3
     692:	ab03      	add	r3, sp, #12
     694:	469c      	mov	ip, r3
     696:	4465      	add	r5, ip
     698:	2240      	movs	r2, #64	; 0x40
     69a:	0029      	movs	r1, r5
     69c:	0020      	movs	r0, r4
     69e:	47b0      	blx	r6
		while (STATUS_OK != read_nvm_code);
     6a0:	2800      	cmp	r0, #0
     6a2:	d1f9      	bne.n	698 <update_boot_status+0x38>
     6a4:	3440      	adds	r4, #64	; 0x40
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     6a6:	42bc      	cmp	r4, r7
     6a8:	d1f1      	bne.n	68e <update_boot_status+0x2e>
	}
	printf("row: %04x\r\n", row_buffer);
     6aa:	a903      	add	r1, sp, #12
     6ac:	4821      	ldr	r0, [pc, #132]	; (734 <update_boot_status+0xd4>)
     6ae:	4b1b      	ldr	r3, [pc, #108]	; (71c <update_boot_status+0xbc>)
     6b0:	4798      	blx	r3
	do
		read_nvm_code = nvm_erase_row(row_address);
     6b2:	25fc      	movs	r5, #252	; 0xfc
     6b4:	01ad      	lsls	r5, r5, #6
     6b6:	4c20      	ldr	r4, [pc, #128]	; (738 <update_boot_status+0xd8>)
     6b8:	0028      	movs	r0, r5
     6ba:	47a0      	blx	r4
	while (STATUS_OK != read_nvm_code);
     6bc:	2800      	cmp	r0, #0
     6be:	d1fb      	bne.n	6b8 <update_boot_status+0x58>

	fw_status_t write_boot;
	memcpy(&write_boot, row_buffer + page_offset * NVMCTRL_PAGE_SIZE, sizeof(fw_status_t));
     6c0:	ac01      	add	r4, sp, #4
     6c2:	ad33      	add	r5, sp, #204	; 0xcc
     6c4:	0023      	movs	r3, r4
     6c6:	002a      	movs	r2, r5
     6c8:	ca03      	ldmia	r2!, {r0, r1}
     6ca:	c303      	stmia	r3!, {r0, r1}
	write_boot.new_image_ready = 1;
     6cc:	2301      	movs	r3, #1
     6ce:	70e3      	strb	r3, [r4, #3]
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[0]);
     6d0:	7821      	ldrb	r1, [r4, #0]
     6d2:	481a      	ldr	r0, [pc, #104]	; (73c <update_boot_status+0xdc>)
     6d4:	4f11      	ldr	r7, [pc, #68]	; (71c <update_boot_status+0xbc>)
     6d6:	47b8      	blx	r7
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[1]);
     6d8:	7861      	ldrb	r1, [r4, #1]
     6da:	4818      	ldr	r0, [pc, #96]	; (73c <update_boot_status+0xdc>)
     6dc:	47b8      	blx	r7
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[2]);
     6de:	78a1      	ldrb	r1, [r4, #2]
     6e0:	4816      	ldr	r0, [pc, #88]	; (73c <update_boot_status+0xdc>)
     6e2:	47b8      	blx	r7
	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));

	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));
     6e4:	cc0c      	ldmia	r4!, {r2, r3}
     6e6:	c50c      	stmia	r5!, {r2, r3}
     6e8:	24fc      	movs	r4, #252	; 0xfc
     6ea:	01a4      	lsls	r4, r4, #6
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		int offset = i * NVMCTRL_PAGE_SIZE;
		do
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
     6ec:	4e14      	ldr	r6, [pc, #80]	; (740 <update_boot_status+0xe0>)
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     6ee:	2780      	movs	r7, #128	; 0x80
     6f0:	01ff      	lsls	r7, r7, #7
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
     6f2:	4b0f      	ldr	r3, [pc, #60]	; (730 <update_boot_status+0xd0>)
     6f4:	18e5      	adds	r5, r4, r3
     6f6:	ab03      	add	r3, sp, #12
     6f8:	469c      	mov	ip, r3
     6fa:	4465      	add	r5, ip
     6fc:	2240      	movs	r2, #64	; 0x40
     6fe:	0029      	movs	r1, r5
     700:	0020      	movs	r0, r4
     702:	47b0      	blx	r6
		while (STATUS_OK != read_nvm_code);
     704:	2800      	cmp	r0, #0
     706:	d1f9      	bne.n	6fc <update_boot_status+0x9c>
     708:	3440      	adds	r4, #64	; 0x40
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     70a:	42bc      	cmp	r4, r7
     70c:	d1f1      	bne.n	6f2 <update_boot_status+0x92>
	}
}
     70e:	b047      	add	sp, #284	; 0x11c
     710:	bdf0      	pop	{r4, r5, r6, r7, pc}
     712:	46c0      	nop			; (mov r8, r8)
     714:	00009bc9 	.word	0x00009bc9
     718:	0001073c 	.word	0x0001073c
     71c:	0000b339 	.word	0x0000b339
     720:	00010764 	.word	0x00010764
     724:	0001078c 	.word	0x0001078c
     728:	000107b4 	.word	0x000107b4
     72c:	00009b01 	.word	0x00009b01
     730:	ffffc100 	.word	0xffffc100
     734:	000107dc 	.word	0x000107dc
     738:	00009b6d 	.word	0x00009b6d
     73c:	000107e8 	.word	0x000107e8
     740:	00009a59 	.word	0x00009a59

00000744 <socket_callback>:
 * @param sock    open socket
 * @param evt     event change that pulled callback
 * @param evt_msg event data
 */
void socket_callback(SOCKET sock, uint8_t evt, void *evt_msg)
{
     744:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, evt, evt_msg);
     746:	4b01      	ldr	r3, [pc, #4]	; (74c <socket_callback+0x8>)
     748:	4798      	blx	r3
}
     74a:	bd10      	pop	{r4, pc}
     74c:	00006585 	.word	0x00006585

00000750 <resolve_cb>:
 * callback to resolve http address to an IP address
 * @param pu8DomainName unknown??
 * @param u32ServerIP   unknown??
 */
void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
     750:	b570      	push	{r4, r5, r6, lr}
     752:	b082      	sub	sp, #8
     754:	0005      	movs	r5, r0
     756:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	       (int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
     758:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
     75a:	21ff      	movs	r1, #255	; 0xff
     75c:	400b      	ands	r3, r1
     75e:	000a      	movs	r2, r1
     760:	4022      	ands	r2, r4
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
     762:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
     764:	9001      	str	r0, [sp, #4]
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
     766:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
     768:	4001      	ands	r1, r0
     76a:	9100      	str	r1, [sp, #0]
     76c:	0029      	movs	r1, r5
     76e:	4804      	ldr	r0, [pc, #16]	; (780 <resolve_cb+0x30>)
     770:	4e04      	ldr	r6, [pc, #16]	; (784 <resolve_cb+0x34>)
     772:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
     774:	0021      	movs	r1, r4
     776:	0028      	movs	r0, r5
     778:	4b03      	ldr	r3, [pc, #12]	; (788 <resolve_cb+0x38>)
     77a:	4798      	blx	r3
}
     77c:	b002      	add	sp, #8
     77e:	bd70      	pop	{r4, r5, r6, pc}
     780:	000102c0 	.word	0x000102c0
     784:	0000b339 	.word	0x0000b339
     788:	00005959 	.word	0x00005959

0000078c <start_download>:
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	return (down_state & mask) != 0;
     790:	4b20      	ldr	r3, [pc, #128]	; (814 <start_download+0x88>)
     792:	881b      	ldrh	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
     794:	07da      	lsls	r2, r3, #31
     796:	d512      	bpl.n	7be <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
     798:	079a      	lsls	r2, r3, #30
     79a:	d515      	bpl.n	7c8 <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
     79c:	075a      	lsls	r2, r3, #29
     79e:	d417      	bmi.n	7d0 <start_download+0x44>
	if (is_state_set(DOWNLOADING)) {
     7a0:	071a      	lsls	r2, r3, #28
     7a2:	d419      	bmi.n	7d8 <start_download+0x4c>
	if (is_state_set(NOT_CHECKED)) {
     7a4:	065a      	lsls	r2, r3, #25
     7a6:	d41b      	bmi.n	7e0 <start_download+0x54>
	if (is_state_set(UPDATE_AVAILABLE)) {
     7a8:	061a      	lsls	r2, r3, #24
     7aa:	d426      	bmi.n	7fa <start_download+0x6e>
	if (is_state_set(UPDATE_NOT_AVAILABLE)) {
     7ac:	05db      	lsls	r3, r3, #23
     7ae:	d509      	bpl.n	7c4 <start_download+0x38>
		printf("start_download: no update available\r\n");
     7b0:	4819      	ldr	r0, [pc, #100]	; (818 <start_download+0x8c>)
     7b2:	4b1a      	ldr	r3, [pc, #104]	; (81c <start_download+0x90>)
     7b4:	4798      	blx	r3
		add_state(COMPLETED);
     7b6:	2010      	movs	r0, #16
     7b8:	4b19      	ldr	r3, [pc, #100]	; (820 <start_download+0x94>)
     7ba:	4798      	blx	r3
		return;
     7bc:	e002      	b.n	7c4 <start_download+0x38>
		printf("start_download: MMC storage not ready.\r\n");
     7be:	4819      	ldr	r0, [pc, #100]	; (824 <start_download+0x98>)
     7c0:	4b16      	ldr	r3, [pc, #88]	; (81c <start_download+0x90>)
     7c2:	4798      	blx	r3
}
     7c4:	b002      	add	sp, #8
     7c6:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
     7c8:	4817      	ldr	r0, [pc, #92]	; (828 <start_download+0x9c>)
     7ca:	4b14      	ldr	r3, [pc, #80]	; (81c <start_download+0x90>)
     7cc:	4798      	blx	r3
		return;
     7ce:	e7f9      	b.n	7c4 <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
     7d0:	4816      	ldr	r0, [pc, #88]	; (82c <start_download+0xa0>)
     7d2:	4b12      	ldr	r3, [pc, #72]	; (81c <start_download+0x90>)
     7d4:	4798      	blx	r3
		return;
     7d6:	e7f5      	b.n	7c4 <start_download+0x38>
		printf("start_download: running download already.\r\n");
     7d8:	4815      	ldr	r0, [pc, #84]	; (830 <start_download+0xa4>)
     7da:	4b10      	ldr	r3, [pc, #64]	; (81c <start_download+0x90>)
     7dc:	4798      	blx	r3
		return;
     7de:	e7f1      	b.n	7c4 <start_download+0x38>
		printf("start_download [NOT_CHECKED]: sending HTTP request for header\r\n");
     7e0:	4814      	ldr	r0, [pc, #80]	; (834 <start_download+0xa8>)
     7e2:	4b0e      	ldr	r3, [pc, #56]	; (81c <start_download+0x90>)
     7e4:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_header_http_address, HTTP_METHOD_GET, NULL, NULL);
     7e6:	4b14      	ldr	r3, [pc, #80]	; (838 <start_download+0xac>)
     7e8:	681b      	ldr	r3, [r3, #0]
     7ea:	68d9      	ldr	r1, [r3, #12]
     7ec:	2300      	movs	r3, #0
     7ee:	9300      	str	r3, [sp, #0]
     7f0:	2201      	movs	r2, #1
     7f2:	4812      	ldr	r0, [pc, #72]	; (83c <start_download+0xb0>)
     7f4:	4c12      	ldr	r4, [pc, #72]	; (840 <start_download+0xb4>)
     7f6:	47a0      	blx	r4
		return;
     7f8:	e7e4      	b.n	7c4 <start_download+0x38>
		printf("start_download [UPDATE_AVAILABLE]: sending HTTP request for firmware\r\n");
     7fa:	4812      	ldr	r0, [pc, #72]	; (844 <start_download+0xb8>)
     7fc:	4b07      	ldr	r3, [pc, #28]	; (81c <start_download+0x90>)
     7fe:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_http_address, HTTP_METHOD_GET, NULL, NULL);
     800:	4b0d      	ldr	r3, [pc, #52]	; (838 <start_download+0xac>)
     802:	681b      	ldr	r3, [r3, #0]
     804:	6919      	ldr	r1, [r3, #16]
     806:	2300      	movs	r3, #0
     808:	9300      	str	r3, [sp, #0]
     80a:	2201      	movs	r2, #1
     80c:	480b      	ldr	r0, [pc, #44]	; (83c <start_download+0xb0>)
     80e:	4c0c      	ldr	r4, [pc, #48]	; (840 <start_download+0xb4>)
     810:	47a0      	blx	r4
		return;
     812:	e7d7      	b.n	7c4 <start_download+0x38>
     814:	200002b4 	.word	0x200002b4
     818:	00010424 	.word	0x00010424
     81c:	0000b455 	.word	0x0000b455
     820:	000005c5 	.word	0x000005c5
     824:	000102f0 	.word	0x000102f0
     828:	00010318 	.word	0x00010318
     82c:	00010344 	.word	0x00010344
     830:	00010370 	.word	0x00010370
     834:	0001039c 	.word	0x0001039c
     838:	2000043c 	.word	0x2000043c
     83c:	20000310 	.word	0x20000310
     840:	00005e89 	.word	0x00005e89
     844:	000103dc 	.word	0x000103dc

00000848 <wifi_callback>:
 * Callback for wifi state changes
 * @param evt     event change
 * @param evt_msg information about wifi state change
 */
void wifi_callback(uint8_t evt, void *evt_msg)
{
     848:	b530      	push	{r4, r5, lr}
     84a:	b083      	sub	sp, #12
	switch (evt) {
     84c:	282c      	cmp	r0, #44	; 0x2c
     84e:	d006      	beq.n	85e <wifi_callback+0x16>
     850:	2832      	cmp	r0, #50	; 0x32
     852:	d034      	beq.n	8be <wifi_callback+0x76>
		add_state(WIFI_CONNECTED);
		start_download();
		break;
	}
	default:
		printf("wifi_callback [default]: ERROR evt %d\r\n", evt);
     854:	0001      	movs	r1, r0
     856:	4822      	ldr	r0, [pc, #136]	; (8e0 <wifi_callback+0x98>)
     858:	4b22      	ldr	r3, [pc, #136]	; (8e4 <wifi_callback+0x9c>)
     85a:	4798      	blx	r3
	}
}
     85c:	e03d      	b.n	8da <wifi_callback+0x92>
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     85e:	780b      	ldrb	r3, [r1, #0]
     860:	2b01      	cmp	r3, #1
     862:	d01e      	beq.n	8a2 <wifi_callback+0x5a>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     864:	2b00      	cmp	r3, #0
     866:	d138      	bne.n	8da <wifi_callback+0x92>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED] disconnected.\r\n");
     868:	481f      	ldr	r0, [pc, #124]	; (8e8 <wifi_callback+0xa0>)
     86a:	4b20      	ldr	r3, [pc, #128]	; (8ec <wifi_callback+0xa4>)
     86c:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
     86e:	2002      	movs	r0, #2
     870:	4b1f      	ldr	r3, [pc, #124]	; (8f0 <wifi_callback+0xa8>)
     872:	4798      	blx	r3
	return (down_state & mask) != 0;
     874:	4b1f      	ldr	r3, [pc, #124]	; (8f4 <wifi_callback+0xac>)
     876:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(DOWNLOADING))
     878:	071b      	lsls	r3, r3, #28
     87a:	d418      	bmi.n	8ae <wifi_callback+0x66>
	return (down_state & mask) != 0;
     87c:	4b1d      	ldr	r3, [pc, #116]	; (8f4 <wifi_callback+0xac>)
     87e:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED))
     880:	075b      	lsls	r3, r3, #29
     882:	d418      	bmi.n	8b6 <wifi_callback+0x6e>
			m2m_wifi_connect(current_wifi_config->ssid, strlen(current_wifi_config->ssid), current_wifi_config->auth_type, current_wifi_config->password, M2M_WIFI_CH_ALL);
     884:	4b1c      	ldr	r3, [pc, #112]	; (8f8 <wifi_callback+0xb0>)
     886:	681c      	ldr	r4, [r3, #0]
     888:	6825      	ldr	r5, [r4, #0]
     88a:	0028      	movs	r0, r5
     88c:	4b1b      	ldr	r3, [pc, #108]	; (8fc <wifi_callback+0xb4>)
     88e:	4798      	blx	r3
     890:	68a3      	ldr	r3, [r4, #8]
     892:	7922      	ldrb	r2, [r4, #4]
     894:	b2c1      	uxtb	r1, r0
     896:	20ff      	movs	r0, #255	; 0xff
     898:	9000      	str	r0, [sp, #0]
     89a:	0028      	movs	r0, r5
     89c:	4c18      	ldr	r4, [pc, #96]	; (900 <wifi_callback+0xb8>)
     89e:	47a0      	blx	r4
     8a0:	e01b      	b.n	8da <wifi_callback+0x92>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED]: connected.\r\n");
     8a2:	4818      	ldr	r0, [pc, #96]	; (904 <wifi_callback+0xbc>)
     8a4:	4b11      	ldr	r3, [pc, #68]	; (8ec <wifi_callback+0xa4>)
     8a6:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
     8a8:	4b17      	ldr	r3, [pc, #92]	; (908 <wifi_callback+0xc0>)
     8aa:	4798      	blx	r3
     8ac:	e015      	b.n	8da <wifi_callback+0x92>
				clear_state(DOWNLOADING);
     8ae:	2008      	movs	r0, #8
     8b0:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <wifi_callback+0xa8>)
     8b2:	4798      	blx	r3
     8b4:	e7e2      	b.n	87c <wifi_callback+0x34>
				clear_state(GET_REQUESTED);
     8b6:	2004      	movs	r0, #4
     8b8:	4b0d      	ldr	r3, [pc, #52]	; (8f0 <wifi_callback+0xa8>)
     8ba:	4798      	blx	r3
     8bc:	e7e2      	b.n	884 <wifi_callback+0x3c>
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
     8be:	788b      	ldrb	r3, [r1, #2]
     8c0:	784a      	ldrb	r2, [r1, #1]
     8c2:	7808      	ldrb	r0, [r1, #0]
     8c4:	78c9      	ldrb	r1, [r1, #3]
     8c6:	9100      	str	r1, [sp, #0]
     8c8:	0001      	movs	r1, r0
     8ca:	4810      	ldr	r0, [pc, #64]	; (90c <wifi_callback+0xc4>)
     8cc:	4c05      	ldr	r4, [pc, #20]	; (8e4 <wifi_callback+0x9c>)
     8ce:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
     8d0:	2002      	movs	r0, #2
     8d2:	4b0f      	ldr	r3, [pc, #60]	; (910 <wifi_callback+0xc8>)
     8d4:	4798      	blx	r3
		start_download();
     8d6:	4b0f      	ldr	r3, [pc, #60]	; (914 <wifi_callback+0xcc>)
     8d8:	4798      	blx	r3
}
     8da:	b003      	add	sp, #12
     8dc:	bd30      	pop	{r4, r5, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	0001099c 	.word	0x0001099c
     8e4:	0000b339 	.word	0x0000b339
     8e8:	00010918 	.word	0x00010918
     8ec:	0000b455 	.word	0x0000b455
     8f0:	000005b5 	.word	0x000005b5
     8f4:	200002b4 	.word	0x200002b4
     8f8:	2000043c 	.word	0x2000043c
     8fc:	0000b69b 	.word	0x0000b69b
     900:	00003521 	.word	0x00003521
     904:	000108d8 	.word	0x000108d8
     908:	0000353d 	.word	0x0000353d
     90c:	00010958 	.word	0x00010958
     910:	000005c5 	.word	0x000005c5
     914:	0000078d 	.word	0x0000078d

00000918 <verify_flash>:
{
     918:	b5f0      	push	{r4, r5, r6, r7, lr}
     91a:	46c6      	mov	lr, r8
     91c:	b500      	push	{lr}
     91e:	b084      	sub	sp, #16
     920:	9001      	str	r0, [sp, #4]
	crc32_t flash_checksum = 0;
     922:	2300      	movs	r3, #0
     924:	9303      	str	r3, [sp, #12]
	printf("starting seed: %04x\r\n", flash_checksum);
     926:	2100      	movs	r1, #0
     928:	482e      	ldr	r0, [pc, #184]	; (9e4 <verify_flash+0xcc>)
     92a:	4b2f      	ldr	r3, [pc, #188]	; (9e8 <verify_flash+0xd0>)
     92c:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
     92e:	4b2f      	ldr	r3, [pc, #188]	; (9ec <verify_flash+0xd4>)
     930:	681b      	ldr	r3, [r3, #0]
     932:	2bff      	cmp	r3, #255	; 0xff
     934:	d930      	bls.n	998 <verify_flash+0x80>
     936:	2480      	movs	r4, #128	; 0x80
     938:	01a4      	lsls	r4, r4, #6
     93a:	2700      	movs	r7, #0
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
     93c:	4d2c      	ldr	r5, [pc, #176]	; (9f0 <verify_flash+0xd8>)
     93e:	4e2d      	ldr	r6, [pc, #180]	; (9f4 <verify_flash+0xdc>)
     940:	e018      	b.n	974 <verify_flash+0x5c>
			printf("verify_flash: error trying to read external flash. %d", read_status);
     942:	0001      	movs	r1, r0
     944:	482c      	ldr	r0, [pc, #176]	; (9f8 <verify_flash+0xe0>)
     946:	4b28      	ldr	r3, [pc, #160]	; (9e8 <verify_flash+0xd0>)
     948:	4798      	blx	r3
			return false;
     94a:	2000      	movs	r0, #0
     94c:	e045      	b.n	9da <verify_flash+0xc2>
			crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &flash_checksum);
     94e:	aa03      	add	r2, sp, #12
     950:	2180      	movs	r1, #128	; 0x80
     952:	0049      	lsls	r1, r1, #1
     954:	4826      	ldr	r0, [pc, #152]	; (9f0 <verify_flash+0xd8>)
     956:	4b29      	ldr	r3, [pc, #164]	; (9fc <verify_flash+0xe4>)
     958:	4798      	blx	r3
		printf("%d. verify_flash: crc_val: %d\r\n", i, flash_checksum);
     95a:	9a03      	ldr	r2, [sp, #12]
     95c:	0039      	movs	r1, r7
     95e:	4828      	ldr	r0, [pc, #160]	; (a00 <verify_flash+0xe8>)
     960:	4b21      	ldr	r3, [pc, #132]	; (9e8 <verify_flash+0xd0>)
     962:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
     964:	3701      	adds	r7, #1
     966:	4b21      	ldr	r3, [pc, #132]	; (9ec <verify_flash+0xd4>)
     968:	681b      	ldr	r3, [r3, #0]
     96a:	3401      	adds	r4, #1
     96c:	34ff      	adds	r4, #255	; 0xff
     96e:	0a1a      	lsrs	r2, r3, #8
     970:	42ba      	cmp	r2, r7
     972:	d911      	bls.n	998 <verify_flash+0x80>
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
     974:	2380      	movs	r3, #128	; 0x80
     976:	005b      	lsls	r3, r3, #1
     978:	002a      	movs	r2, r5
     97a:	0021      	movs	r1, r4
     97c:	4821      	ldr	r0, [pc, #132]	; (a04 <verify_flash+0xec>)
     97e:	47b0      	blx	r6
		if (STATUS_OK != read_status) {
     980:	2800      	cmp	r0, #0
     982:	d1de      	bne.n	942 <verify_flash+0x2a>
		if (!flash_checksum)
     984:	9b03      	ldr	r3, [sp, #12]
     986:	2b00      	cmp	r3, #0
     988:	d1e1      	bne.n	94e <verify_flash+0x36>
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;

	return crc32_recalculate(data, length, crc);
     98a:	aa03      	add	r2, sp, #12
     98c:	2180      	movs	r1, #128	; 0x80
     98e:	0049      	lsls	r1, r1, #1
     990:	4817      	ldr	r0, [pc, #92]	; (9f0 <verify_flash+0xd8>)
     992:	4b1a      	ldr	r3, [pc, #104]	; (9fc <verify_flash+0xe4>)
     994:	4798      	blx	r3
     996:	e7e0      	b.n	95a <verify_flash+0x42>
	int remaining_bytes = total_bytes_written % FLASH_ROW_SIZE;
     998:	24ff      	movs	r4, #255	; 0xff
     99a:	401c      	ands	r4, r3
	printf("verify_flash: remaining bytes %d\r\n", remaining_bytes);
     99c:	0021      	movs	r1, r4
     99e:	481a      	ldr	r0, [pc, #104]	; (a08 <verify_flash+0xf0>)
     9a0:	4f11      	ldr	r7, [pc, #68]	; (9e8 <verify_flash+0xd0>)
     9a2:	47b8      	blx	r7
	read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (total_bytes_written - remaining_bytes), write_row_buffer, remaining_bytes);
     9a4:	b2a3      	uxth	r3, r4
     9a6:	4d12      	ldr	r5, [pc, #72]	; (9f0 <verify_flash+0xd8>)
     9a8:	4a10      	ldr	r2, [pc, #64]	; (9ec <verify_flash+0xd4>)
     9aa:	6811      	ldr	r1, [r2, #0]
     9ac:	2280      	movs	r2, #128	; 0x80
     9ae:	0192      	lsls	r2, r2, #6
     9b0:	4694      	mov	ip, r2
     9b2:	4461      	add	r1, ip
     9b4:	1b09      	subs	r1, r1, r4
     9b6:	002a      	movs	r2, r5
     9b8:	4812      	ldr	r0, [pc, #72]	; (a04 <verify_flash+0xec>)
     9ba:	4e0e      	ldr	r6, [pc, #56]	; (9f4 <verify_flash+0xdc>)
     9bc:	47b0      	blx	r6
	crc32_recalculate(write_row_buffer, remaining_bytes, &flash_checksum);
     9be:	aa03      	add	r2, sp, #12
     9c0:	0021      	movs	r1, r4
     9c2:	0028      	movs	r0, r5
     9c4:	4b0d      	ldr	r3, [pc, #52]	; (9fc <verify_flash+0xe4>)
     9c6:	4798      	blx	r3
	printf("verify_flash: calculated crc32 val: %d\r\n", flash_checksum);
     9c8:	9903      	ldr	r1, [sp, #12]
     9ca:	4810      	ldr	r0, [pc, #64]	; (a0c <verify_flash+0xf4>)
     9cc:	47b8      	blx	r7
	return flash_checksum == known_checksum;
     9ce:	9b03      	ldr	r3, [sp, #12]
     9d0:	9a01      	ldr	r2, [sp, #4]
     9d2:	1a9e      	subs	r6, r3, r2
     9d4:	4270      	negs	r0, r6
     9d6:	4170      	adcs	r0, r6
     9d8:	b2c0      	uxtb	r0, r0
}
     9da:	b004      	add	sp, #16
     9dc:	bc04      	pop	{r2}
     9de:	4690      	mov	r8, r2
     9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	00010818 	.word	0x00010818
     9e8:	0000b339 	.word	0x0000b339
     9ec:	200002a8 	.word	0x200002a8
     9f0:	20000440 	.word	0x20000440
     9f4:	000015c5 	.word	0x000015c5
     9f8:	00010830 	.word	0x00010830
     9fc:	00001f19 	.word	0x00001f19
     a00:	00010868 	.word	0x00010868
     a04:	200002ac 	.word	0x200002ac
     a08:	00010888 	.word	0x00010888
     a0c:	000108ac 	.word	0x000108ac

00000a10 <store_file_packet>:
{
     a10:	b5f0      	push	{r4, r5, r6, r7, lr}
     a12:	46de      	mov	lr, fp
     a14:	4657      	mov	r7, sl
     a16:	464e      	mov	r6, r9
     a18:	4645      	mov	r5, r8
     a1a:	b5e0      	push	{r5, r6, r7, lr}
     a1c:	b085      	sub	sp, #20
     a1e:	4680      	mov	r8, r0
     a20:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
     a22:	2800      	cmp	r0, #0
     a24:	d00c      	beq.n	a40 <store_file_packet+0x30>
     a26:	2900      	cmp	r1, #0
     a28:	d00a      	beq.n	a40 <store_file_packet+0x30>
	return (down_state & mask) != 0;
     a2a:	4bbb      	ldr	r3, [pc, #748]	; (d18 <store_file_packet+0x308>)
     a2c:	881b      	ldrh	r3, [r3, #0]
	if (is_state_set(NOT_CHECKED)) {
     a2e:	065a      	lsls	r2, r3, #25
     a30:	d53d      	bpl.n	aae <store_file_packet+0x9e>
		if (6 != length) {
     a32:	2906      	cmp	r1, #6
     a34:	d00e      	beq.n	a54 <store_file_packet+0x44>
			printf("store_file_packet [UPDATE_CHECK]: file [%d bytes] does not match header [%d bytes] size\r\n", length, sizeof(fw_header_t));
     a36:	220c      	movs	r2, #12
     a38:	48b8      	ldr	r0, [pc, #736]	; (d1c <store_file_packet+0x30c>)
     a3a:	4bb9      	ldr	r3, [pc, #740]	; (d20 <store_file_packet+0x310>)
     a3c:	4798      	blx	r3
			return;
     a3e:	e002      	b.n	a46 <store_file_packet+0x36>
		printf("store_file_packet: empty data.\r\n");
     a40:	48b8      	ldr	r0, [pc, #736]	; (d24 <store_file_packet+0x314>)
     a42:	4bb9      	ldr	r3, [pc, #740]	; (d28 <store_file_packet+0x318>)
     a44:	4798      	blx	r3
}
     a46:	b005      	add	sp, #20
     a48:	bc3c      	pop	{r2, r3, r4, r5}
     a4a:	4690      	mov	r8, r2
     a4c:	4699      	mov	r9, r3
     a4e:	46a2      	mov	sl, r4
     a50:	46ab      	mov	fp, r5
     a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&firmware_header.fw_version, data, 2);
     a54:	ac01      	add	r4, sp, #4
     a56:	2202      	movs	r2, #2
     a58:	0001      	movs	r1, r0
     a5a:	0020      	movs	r0, r4
     a5c:	4db3      	ldr	r5, [pc, #716]	; (d2c <store_file_packet+0x31c>)
     a5e:	47a8      	blx	r5
		memcpy(&firmware_header.checksum, data + 2, 4);
     a60:	4641      	mov	r1, r8
     a62:	3102      	adds	r1, #2
     a64:	2204      	movs	r2, #4
     a66:	a802      	add	r0, sp, #8
     a68:	47a8      	blx	r5
     a6a:	8824      	ldrh	r4, [r4, #0]
     a6c:	9e02      	ldr	r6, [sp, #8]
	printf("new firmware version: %d\r\n", firmware_header.fw_version);
     a6e:	0021      	movs	r1, r4
     a70:	48af      	ldr	r0, [pc, #700]	; (d30 <store_file_packet+0x320>)
     a72:	4dab      	ldr	r5, [pc, #684]	; (d20 <store_file_packet+0x310>)
     a74:	47a8      	blx	r5
	printf("new firmware checksum: %04x\r\n", firmware_header.checksum);
     a76:	0031      	movs	r1, r6
     a78:	48ae      	ldr	r0, [pc, #696]	; (d34 <store_file_packet+0x324>)
     a7a:	47a8      	blx	r5
	if (firmware_header.fw_version > FW_VERSION) {
     a7c:	2c00      	cmp	r4, #0
     a7e:	d109      	bne.n	a94 <store_file_packet+0x84>
		clear_state(NOT_CHECKED & GET_REQUESTED);
     a80:	2000      	movs	r0, #0
     a82:	4bad      	ldr	r3, [pc, #692]	; (d38 <store_file_packet+0x328>)
     a84:	4798      	blx	r3
		add_state(UPDATE_NOT_AVAILABLE & COMPLETED);
     a86:	2000      	movs	r0, #0
     a88:	4bac      	ldr	r3, [pc, #688]	; (d3c <store_file_packet+0x32c>)
     a8a:	4798      	blx	r3
		add_state(COMPLETED);
     a8c:	2010      	movs	r0, #16
     a8e:	4bab      	ldr	r3, [pc, #684]	; (d3c <store_file_packet+0x32c>)
     a90:	4798      	blx	r3
		return;
     a92:	e7d8      	b.n	a46 <store_file_packet+0x36>
		clear_state(GET_REQUESTED);
     a94:	2004      	movs	r0, #4
     a96:	4da8      	ldr	r5, [pc, #672]	; (d38 <store_file_packet+0x328>)
     a98:	47a8      	blx	r5
		clear_state(NOT_CHECKED);
     a9a:	2040      	movs	r0, #64	; 0x40
     a9c:	47a8      	blx	r5
		add_state(UPDATE_AVAILABLE);
     a9e:	2080      	movs	r0, #128	; 0x80
     aa0:	4ba6      	ldr	r3, [pc, #664]	; (d3c <store_file_packet+0x32c>)
     aa2:	4798      	blx	r3
		new_firmware_checksum = firmware_header.checksum;
     aa4:	4ba6      	ldr	r3, [pc, #664]	; (d40 <store_file_packet+0x330>)
     aa6:	601e      	str	r6, [r3, #0]
		new_firmware_version = firmware_header.fw_version;
     aa8:	4ba6      	ldr	r3, [pc, #664]	; (d44 <store_file_packet+0x334>)
     aaa:	801c      	strh	r4, [r3, #0]
     aac:	e7ee      	b.n	a8c <store_file_packet+0x7c>
	} else if (is_state_set(UPDATE_AVAILABLE)) {
     aae:	061a      	lsls	r2, r3, #24
     ab0:	d5c9      	bpl.n	a46 <store_file_packet+0x36>
		if (!is_state_set(DOWNLOADING)) {
     ab2:	071b      	lsls	r3, r3, #28
     ab4:	d506      	bpl.n	ac4 <store_file_packet+0xb4>
{
     ab6:	2500      	movs	r5, #0
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
     ab8:	4ba3      	ldr	r3, [pc, #652]	; (d48 <store_file_packet+0x338>)
     aba:	469a      	mov	sl, r3
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
     abc:	469b      	mov	fp, r3
     abe:	4ba3      	ldr	r3, [pc, #652]	; (d4c <store_file_packet+0x33c>)
     ac0:	4699      	mov	r9, r3
     ac2:	e0dc      	b.n	c7e <store_file_packet+0x26e>
	printf("FW1_ERASE_ADDR: %d\r\n", firmware_starter_address);
     ac4:	49a2      	ldr	r1, [pc, #648]	; (d50 <store_file_packet+0x340>)
     ac6:	48a3      	ldr	r0, [pc, #652]	; (d54 <store_file_packet+0x344>)
     ac8:	4b95      	ldr	r3, [pc, #596]	; (d20 <store_file_packet+0x310>)
     aca:	4798      	blx	r3
	at25dfx_chip_wake(&at25dfx_chip);
     acc:	4ca2      	ldr	r4, [pc, #648]	; (d58 <store_file_packet+0x348>)
     ace:	0020      	movs	r0, r4
     ad0:	4ba2      	ldr	r3, [pc, #648]	; (d5c <store_file_packet+0x34c>)
     ad2:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
     ad4:	0020      	movs	r0, r4
     ad6:	4ba2      	ldr	r3, [pc, #648]	; (d60 <store_file_packet+0x350>)
     ad8:	4798      	blx	r3
     ada:	2800      	cmp	r0, #0
     adc:	d145      	bne.n	b6a <store_file_packet+0x15a>
	status_val = at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
     ade:	2100      	movs	r1, #0
     ae0:	489d      	ldr	r0, [pc, #628]	; (d58 <store_file_packet+0x348>)
     ae2:	4ba0      	ldr	r3, [pc, #640]	; (d64 <store_file_packet+0x354>)
     ae4:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     ae6:	2800      	cmp	r0, #0
     ae8:	d156      	bne.n	b98 <store_file_packet+0x188>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address, AT25DFX_BLOCK_SIZE_64KB);
     aea:	2202      	movs	r2, #2
     aec:	4998      	ldr	r1, [pc, #608]	; (d50 <store_file_packet+0x340>)
     aee:	489a      	ldr	r0, [pc, #616]	; (d58 <store_file_packet+0x348>)
     af0:	4b9d      	ldr	r3, [pc, #628]	; (d68 <store_file_packet+0x358>)
     af2:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     af4:	2800      	cmp	r0, #0
     af6:	d157      	bne.n	ba8 <store_file_packet+0x198>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 1), AT25DFX_BLOCK_SIZE_64KB);
     af8:	2202      	movs	r2, #2
     afa:	499c      	ldr	r1, [pc, #624]	; (d6c <store_file_packet+0x35c>)
     afc:	4896      	ldr	r0, [pc, #600]	; (d58 <store_file_packet+0x348>)
     afe:	4b9a      	ldr	r3, [pc, #616]	; (d68 <store_file_packet+0x358>)
     b00:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     b02:	2800      	cmp	r0, #0
     b04:	d158      	bne.n	bb8 <store_file_packet+0x1a8>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2), AT25DFX_BLOCK_SIZE_64KB);
     b06:	2202      	movs	r2, #2
     b08:	4999      	ldr	r1, [pc, #612]	; (d70 <store_file_packet+0x360>)
     b0a:	4893      	ldr	r0, [pc, #588]	; (d58 <store_file_packet+0x348>)
     b0c:	4b96      	ldr	r3, [pc, #600]	; (d68 <store_file_packet+0x358>)
     b0e:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     b10:	2800      	cmp	r0, #0
     b12:	d156      	bne.n	bc2 <store_file_packet+0x1b2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0), AT25DFX_BLOCK_SIZE_32KB);
     b14:	2201      	movs	r2, #1
     b16:	4997      	ldr	r1, [pc, #604]	; (d74 <store_file_packet+0x364>)
     b18:	488f      	ldr	r0, [pc, #572]	; (d58 <store_file_packet+0x348>)
     b1a:	4b93      	ldr	r3, [pc, #588]	; (d68 <store_file_packet+0x358>)
     b1c:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     b1e:	2800      	cmp	r0, #0
     b20:	d157      	bne.n	bd2 <store_file_packet+0x1c2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0), AT25DFX_BLOCK_SIZE_4KB);
     b22:	2200      	movs	r2, #0
     b24:	4994      	ldr	r1, [pc, #592]	; (d78 <store_file_packet+0x368>)
     b26:	488c      	ldr	r0, [pc, #560]	; (d58 <store_file_packet+0x348>)
     b28:	4b8f      	ldr	r3, [pc, #572]	; (d68 <store_file_packet+0x358>)
     b2a:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     b2c:	2800      	cmp	r0, #0
     b2e:	d158      	bne.n	be2 <store_file_packet+0x1d2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1), AT25DFX_BLOCK_SIZE_4KB);
     b30:	2200      	movs	r2, #0
     b32:	4992      	ldr	r1, [pc, #584]	; (d7c <store_file_packet+0x36c>)
     b34:	4888      	ldr	r0, [pc, #544]	; (d58 <store_file_packet+0x348>)
     b36:	4b8c      	ldr	r3, [pc, #560]	; (d68 <store_file_packet+0x358>)
     b38:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     b3a:	2800      	cmp	r0, #0
     b3c:	d159      	bne.n	bf2 <store_file_packet+0x1e2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2), AT25DFX_BLOCK_SIZE_4KB);
     b3e:	2200      	movs	r2, #0
     b40:	498f      	ldr	r1, [pc, #572]	; (d80 <store_file_packet+0x370>)
     b42:	4885      	ldr	r0, [pc, #532]	; (d58 <store_file_packet+0x348>)
     b44:	4b88      	ldr	r3, [pc, #544]	; (d68 <store_file_packet+0x358>)
     b46:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     b48:	2800      	cmp	r0, #0
     b4a:	d15a      	bne.n	c02 <store_file_packet+0x1f2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3), AT25DFX_BLOCK_SIZE_4KB);
     b4c:	2200      	movs	r2, #0
     b4e:	498d      	ldr	r1, [pc, #564]	; (d84 <store_file_packet+0x374>)
     b50:	4881      	ldr	r0, [pc, #516]	; (d58 <store_file_packet+0x348>)
     b52:	4b85      	ldr	r3, [pc, #532]	; (d68 <store_file_packet+0x358>)
     b54:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     b56:	2800      	cmp	r0, #0
     b58:	d05b      	beq.n	c12 <store_file_packet+0x202>
		add_state(CANCELED);
     b5a:	2020      	movs	r0, #32
     b5c:	4b77      	ldr	r3, [pc, #476]	; (d3c <store_file_packet+0x32c>)
     b5e:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
     b60:	4988      	ldr	r1, [pc, #544]	; (d84 <store_file_packet+0x374>)
     b62:	4889      	ldr	r0, [pc, #548]	; (d88 <store_file_packet+0x378>)
     b64:	4b6e      	ldr	r3, [pc, #440]	; (d20 <store_file_packet+0x310>)
     b66:	4798      	blx	r3
     b68:	e002      	b.n	b70 <store_file_packet+0x160>
		printf("store_file_packet: No flash chip.\r\n");
     b6a:	4888      	ldr	r0, [pc, #544]	; (d8c <store_file_packet+0x37c>)
     b6c:	4b6e      	ldr	r3, [pc, #440]	; (d28 <store_file_packet+0x318>)
     b6e:	4798      	blx	r3
			received_file_size = 0;
     b70:	2300      	movs	r3, #0
     b72:	4a87      	ldr	r2, [pc, #540]	; (d90 <store_file_packet+0x380>)
     b74:	6013      	str	r3, [r2, #0]
			write_address = FW2_ADDR; //TODO: MAKE GENERIC SO CAN OTA CLI
     b76:	2182      	movs	r1, #130	; 0x82
     b78:	02c9      	lsls	r1, r1, #11
     b7a:	4a86      	ldr	r2, [pc, #536]	; (d94 <store_file_packet+0x384>)
     b7c:	6011      	str	r1, [r2, #0]
			buffer_cursor = 0;
     b7e:	4a72      	ldr	r2, [pc, #456]	; (d48 <store_file_packet+0x338>)
     b80:	7013      	strb	r3, [r2, #0]
			total_bytes_written = 0;
     b82:	4a85      	ldr	r2, [pc, #532]	; (d98 <store_file_packet+0x388>)
     b84:	6013      	str	r3, [r2, #0]
			printf("starting val: ", crc_val);
     b86:	4b85      	ldr	r3, [pc, #532]	; (d9c <store_file_packet+0x38c>)
     b88:	6819      	ldr	r1, [r3, #0]
     b8a:	4885      	ldr	r0, [pc, #532]	; (da0 <store_file_packet+0x390>)
     b8c:	4b64      	ldr	r3, [pc, #400]	; (d20 <store_file_packet+0x310>)
     b8e:	4798      	blx	r3
			add_state(DOWNLOADING);
     b90:	2008      	movs	r0, #8
     b92:	4b6a      	ldr	r3, [pc, #424]	; (d3c <store_file_packet+0x32c>)
     b94:	4798      	blx	r3
     b96:	e78e      	b.n	ab6 <store_file_packet+0xa6>
		add_state(CANCELED);
     b98:	2020      	movs	r0, #32
     b9a:	4b68      	ldr	r3, [pc, #416]	; (d3c <store_file_packet+0x32c>)
     b9c:	4798      	blx	r3
		printf("store_file_packet: error clearing sector protect at address %d \r\n", SIXTY_FOUR_KB);
     b9e:	4981      	ldr	r1, [pc, #516]	; (da4 <store_file_packet+0x394>)
     ba0:	4881      	ldr	r0, [pc, #516]	; (da8 <store_file_packet+0x398>)
     ba2:	4b5f      	ldr	r3, [pc, #380]	; (d20 <store_file_packet+0x310>)
     ba4:	4798      	blx	r3
     ba6:	e7e3      	b.n	b70 <store_file_packet+0x160>
		add_state(CANCELED);
     ba8:	2020      	movs	r0, #32
     baa:	4b64      	ldr	r3, [pc, #400]	; (d3c <store_file_packet+0x32c>)
     bac:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address);
     bae:	4968      	ldr	r1, [pc, #416]	; (d50 <store_file_packet+0x340>)
     bb0:	4875      	ldr	r0, [pc, #468]	; (d88 <store_file_packet+0x378>)
     bb2:	4b5b      	ldr	r3, [pc, #364]	; (d20 <store_file_packet+0x310>)
     bb4:	4798      	blx	r3
     bb6:	e7db      	b.n	b70 <store_file_packet+0x160>
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 1));
     bb8:	496c      	ldr	r1, [pc, #432]	; (d6c <store_file_packet+0x35c>)
     bba:	4873      	ldr	r0, [pc, #460]	; (d88 <store_file_packet+0x378>)
     bbc:	4b58      	ldr	r3, [pc, #352]	; (d20 <store_file_packet+0x310>)
     bbe:	4798      	blx	r3
     bc0:	e7d6      	b.n	b70 <store_file_packet+0x160>
		add_state(CANCELED);
     bc2:	2020      	movs	r0, #32
     bc4:	4b5d      	ldr	r3, [pc, #372]	; (d3c <store_file_packet+0x32c>)
     bc6:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2));
     bc8:	4969      	ldr	r1, [pc, #420]	; (d70 <store_file_packet+0x360>)
     bca:	486f      	ldr	r0, [pc, #444]	; (d88 <store_file_packet+0x378>)
     bcc:	4b54      	ldr	r3, [pc, #336]	; (d20 <store_file_packet+0x310>)
     bce:	4798      	blx	r3
     bd0:	e7ce      	b.n	b70 <store_file_packet+0x160>
		add_state(CANCELED);
     bd2:	2020      	movs	r0, #32
     bd4:	4b59      	ldr	r3, [pc, #356]	; (d3c <store_file_packet+0x32c>)
     bd6:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0));
     bd8:	4966      	ldr	r1, [pc, #408]	; (d74 <store_file_packet+0x364>)
     bda:	486b      	ldr	r0, [pc, #428]	; (d88 <store_file_packet+0x378>)
     bdc:	4b50      	ldr	r3, [pc, #320]	; (d20 <store_file_packet+0x310>)
     bde:	4798      	blx	r3
     be0:	e7c6      	b.n	b70 <store_file_packet+0x160>
		add_state(CANCELED);
     be2:	2020      	movs	r0, #32
     be4:	4b55      	ldr	r3, [pc, #340]	; (d3c <store_file_packet+0x32c>)
     be6:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0));
     be8:	4963      	ldr	r1, [pc, #396]	; (d78 <store_file_packet+0x368>)
     bea:	4867      	ldr	r0, [pc, #412]	; (d88 <store_file_packet+0x378>)
     bec:	4b4c      	ldr	r3, [pc, #304]	; (d20 <store_file_packet+0x310>)
     bee:	4798      	blx	r3
     bf0:	e7be      	b.n	b70 <store_file_packet+0x160>
		add_state(CANCELED);
     bf2:	2020      	movs	r0, #32
     bf4:	4b51      	ldr	r3, [pc, #324]	; (d3c <store_file_packet+0x32c>)
     bf6:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1));
     bf8:	4960      	ldr	r1, [pc, #384]	; (d7c <store_file_packet+0x36c>)
     bfa:	4863      	ldr	r0, [pc, #396]	; (d88 <store_file_packet+0x378>)
     bfc:	4b48      	ldr	r3, [pc, #288]	; (d20 <store_file_packet+0x310>)
     bfe:	4798      	blx	r3
     c00:	e7b6      	b.n	b70 <store_file_packet+0x160>
		add_state(CANCELED);
     c02:	2020      	movs	r0, #32
     c04:	4b4d      	ldr	r3, [pc, #308]	; (d3c <store_file_packet+0x32c>)
     c06:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2));
     c08:	495d      	ldr	r1, [pc, #372]	; (d80 <store_file_packet+0x370>)
     c0a:	485f      	ldr	r0, [pc, #380]	; (d88 <store_file_packet+0x378>)
     c0c:	4b44      	ldr	r3, [pc, #272]	; (d20 <store_file_packet+0x310>)
     c0e:	4798      	blx	r3
     c10:	e7ae      	b.n	b70 <store_file_packet+0x160>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4), AT25DFX_BLOCK_SIZE_4KB);
     c12:	2200      	movs	r2, #0
     c14:	4965      	ldr	r1, [pc, #404]	; (dac <store_file_packet+0x39c>)
     c16:	4850      	ldr	r0, [pc, #320]	; (d58 <store_file_packet+0x348>)
     c18:	4b53      	ldr	r3, [pc, #332]	; (d68 <store_file_packet+0x358>)
     c1a:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     c1c:	2800      	cmp	r0, #0
     c1e:	d115      	bne.n	c4c <store_file_packet+0x23c>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5), AT25DFX_BLOCK_SIZE_4KB);
     c20:	2200      	movs	r2, #0
     c22:	4963      	ldr	r1, [pc, #396]	; (db0 <store_file_packet+0x3a0>)
     c24:	484c      	ldr	r0, [pc, #304]	; (d58 <store_file_packet+0x348>)
     c26:	4b50      	ldr	r3, [pc, #320]	; (d68 <store_file_packet+0x358>)
     c28:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     c2a:	2800      	cmp	r0, #0
     c2c:	d116      	bne.n	c5c <store_file_packet+0x24c>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 6), AT25DFX_BLOCK_SIZE_4KB);
     c2e:	2200      	movs	r2, #0
     c30:	4960      	ldr	r1, [pc, #384]	; (db4 <store_file_packet+0x3a4>)
     c32:	4849      	ldr	r0, [pc, #292]	; (d58 <store_file_packet+0x348>)
     c34:	4b4c      	ldr	r3, [pc, #304]	; (d68 <store_file_packet+0x358>)
     c36:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     c38:	2800      	cmp	r0, #0
     c3a:	d017      	beq.n	c6c <store_file_packet+0x25c>
		add_state(CANCELED);
     c3c:	2020      	movs	r0, #32
     c3e:	4b3f      	ldr	r3, [pc, #252]	; (d3c <store_file_packet+0x32c>)
     c40:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
     c42:	4950      	ldr	r1, [pc, #320]	; (d84 <store_file_packet+0x374>)
     c44:	4850      	ldr	r0, [pc, #320]	; (d88 <store_file_packet+0x378>)
     c46:	4b36      	ldr	r3, [pc, #216]	; (d20 <store_file_packet+0x310>)
     c48:	4798      	blx	r3
     c4a:	e791      	b.n	b70 <store_file_packet+0x160>
		add_state(CANCELED);
     c4c:	2020      	movs	r0, #32
     c4e:	4b3b      	ldr	r3, [pc, #236]	; (d3c <store_file_packet+0x32c>)
     c50:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4));
     c52:	4956      	ldr	r1, [pc, #344]	; (dac <store_file_packet+0x39c>)
     c54:	484c      	ldr	r0, [pc, #304]	; (d88 <store_file_packet+0x378>)
     c56:	4b32      	ldr	r3, [pc, #200]	; (d20 <store_file_packet+0x310>)
     c58:	4798      	blx	r3
     c5a:	e789      	b.n	b70 <store_file_packet+0x160>
		add_state(CANCELED);
     c5c:	2020      	movs	r0, #32
     c5e:	4b37      	ldr	r3, [pc, #220]	; (d3c <store_file_packet+0x32c>)
     c60:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5));
     c62:	4953      	ldr	r1, [pc, #332]	; (db0 <store_file_packet+0x3a0>)
     c64:	4848      	ldr	r0, [pc, #288]	; (d88 <store_file_packet+0x378>)
     c66:	4b2e      	ldr	r3, [pc, #184]	; (d20 <store_file_packet+0x310>)
     c68:	4798      	blx	r3
     c6a:	e781      	b.n	b70 <store_file_packet+0x160>
	at25dfx_chip_sleep(&at25dfx_chip);
     c6c:	483a      	ldr	r0, [pc, #232]	; (d58 <store_file_packet+0x348>)
     c6e:	4b52      	ldr	r3, [pc, #328]	; (db8 <store_file_packet+0x3a8>)
     c70:	4798      	blx	r3
     c72:	e77d      	b.n	b70 <store_file_packet+0x160>
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
     c74:	1b77      	subs	r7, r6, r5
     c76:	b2bf      	uxth	r7, r7
     c78:	e00f      	b.n	c9a <store_file_packet+0x28a>
				if (buffer_cursor == (FLASH_ROW_SIZE - 1)) {
     c7a:	2cff      	cmp	r4, #255	; 0xff
     c7c:	d01f      	beq.n	cbe <store_file_packet+0x2ae>
			while (bytes_written < length) {
     c7e:	0029      	movs	r1, r5
     c80:	42ae      	cmp	r6, r5
     c82:	d800      	bhi.n	c86 <store_file_packet+0x276>
     c84:	e0a0      	b.n	dc8 <store_file_packet+0x3b8>
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
     c86:	002b      	movs	r3, r5
     c88:	33ff      	adds	r3, #255	; 0xff
     c8a:	429e      	cmp	r6, r3
     c8c:	d9f2      	bls.n	c74 <store_file_packet+0x264>
     c8e:	4653      	mov	r3, sl
     c90:	781a      	ldrb	r2, [r3, #0]
     c92:	2480      	movs	r4, #128	; 0x80
     c94:	0064      	lsls	r4, r4, #1
     c96:	1aa4      	subs	r4, r4, r2
     c98:	b2a7      	uxth	r7, r4
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
     c9a:	465b      	mov	r3, fp
     c9c:	781c      	ldrb	r4, [r3, #0]
     c9e:	464b      	mov	r3, r9
     ca0:	18e0      	adds	r0, r4, r3
				unsigned int data_cursor = data + bytes_written;
     ca2:	4441      	add	r1, r8
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
     ca4:	003a      	movs	r2, r7
     ca6:	4b21      	ldr	r3, [pc, #132]	; (d2c <store_file_packet+0x31c>)
     ca8:	4798      	blx	r3
				bytes_written += num_bytes_to_buffer;
     caa:	19ed      	adds	r5, r5, r7
				buffer_cursor = buffer_cursor + num_bytes_to_buffer;
     cac:	19e4      	adds	r4, r4, r7
     cae:	b2e4      	uxtb	r4, r4
     cb0:	465b      	mov	r3, fp
     cb2:	701c      	strb	r4, [r3, #0]
				if (buffer_cursor == 0)
     cb4:	2c00      	cmp	r4, #0
     cb6:	d1e0      	bne.n	c7a <store_file_packet+0x26a>
					buffer_cursor = (FLASH_ROW_SIZE - 1);
     cb8:	22ff      	movs	r2, #255	; 0xff
     cba:	4b23      	ldr	r3, [pc, #140]	; (d48 <store_file_packet+0x338>)
     cbc:	701a      	strb	r2, [r3, #0]
					status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, FLASH_ROW_SIZE);
     cbe:	4b35      	ldr	r3, [pc, #212]	; (d94 <store_file_packet+0x384>)
     cc0:	6819      	ldr	r1, [r3, #0]
     cc2:	2380      	movs	r3, #128	; 0x80
     cc4:	005b      	lsls	r3, r3, #1
     cc6:	4a21      	ldr	r2, [pc, #132]	; (d4c <store_file_packet+0x33c>)
     cc8:	4823      	ldr	r0, [pc, #140]	; (d58 <store_file_packet+0x348>)
     cca:	4c3c      	ldr	r4, [pc, #240]	; (dbc <store_file_packet+0x3ac>)
     ccc:	47a0      	blx	r4
					if (STATUS_OK != status_val) {
     cce:	2800      	cmp	r0, #0
     cd0:	d112      	bne.n	cf8 <store_file_packet+0x2e8>
					buffer_cursor = 0;
     cd2:	2200      	movs	r2, #0
     cd4:	4b1c      	ldr	r3, [pc, #112]	; (d48 <store_file_packet+0x338>)
     cd6:	701a      	strb	r2, [r3, #0]
					write_address += FLASH_ROW_SIZE;
     cd8:	4a2e      	ldr	r2, [pc, #184]	; (d94 <store_file_packet+0x384>)
     cda:	6813      	ldr	r3, [r2, #0]
     cdc:	3301      	adds	r3, #1
     cde:	33ff      	adds	r3, #255	; 0xff
     ce0:	6013      	str	r3, [r2, #0]
					if (!crc_val)
     ce2:	4b2e      	ldr	r3, [pc, #184]	; (d9c <store_file_packet+0x38c>)
     ce4:	681b      	ldr	r3, [r3, #0]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d10f      	bne.n	d0a <store_file_packet+0x2fa>
     cea:	4a2c      	ldr	r2, [pc, #176]	; (d9c <store_file_packet+0x38c>)
     cec:	2180      	movs	r1, #128	; 0x80
     cee:	0049      	lsls	r1, r1, #1
     cf0:	4816      	ldr	r0, [pc, #88]	; (d4c <store_file_packet+0x33c>)
     cf2:	4b33      	ldr	r3, [pc, #204]	; (dc0 <store_file_packet+0x3b0>)
     cf4:	4798      	blx	r3
     cf6:	e7c2      	b.n	c7e <store_file_packet+0x26e>
						add_state(CANCELED);
     cf8:	2020      	movs	r0, #32
     cfa:	4b10      	ldr	r3, [pc, #64]	; (d3c <store_file_packet+0x32c>)
     cfc:	4798      	blx	r3
						printf("store_file_packet: error writing row at address %d \r\n", write_address);
     cfe:	4b25      	ldr	r3, [pc, #148]	; (d94 <store_file_packet+0x384>)
     d00:	6819      	ldr	r1, [r3, #0]
     d02:	4830      	ldr	r0, [pc, #192]	; (dc4 <store_file_packet+0x3b4>)
     d04:	4b06      	ldr	r3, [pc, #24]	; (d20 <store_file_packet+0x310>)
     d06:	4798      	blx	r3
						return;
     d08:	e69d      	b.n	a46 <store_file_packet+0x36>
						crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &crc_val);
     d0a:	4a24      	ldr	r2, [pc, #144]	; (d9c <store_file_packet+0x38c>)
     d0c:	2180      	movs	r1, #128	; 0x80
     d0e:	0049      	lsls	r1, r1, #1
     d10:	480e      	ldr	r0, [pc, #56]	; (d4c <store_file_packet+0x33c>)
     d12:	4b2b      	ldr	r3, [pc, #172]	; (dc0 <store_file_packet+0x3b0>)
     d14:	4798      	blx	r3
     d16:	e7b2      	b.n	c7e <store_file_packet+0x26e>
     d18:	200002b4 	.word	0x200002b4
     d1c:	0001046c 	.word	0x0001046c
     d20:	0000b339 	.word	0x0000b339
     d24:	0001044c 	.word	0x0001044c
     d28:	0000b455 	.word	0x0000b455
     d2c:	0000a8c1 	.word	0x0000a8c1
     d30:	000104c8 	.word	0x000104c8
     d34:	000104e4 	.word	0x000104e4
     d38:	000005b5 	.word	0x000005b5
     d3c:	000005c5 	.word	0x000005c5
     d40:	20000204 	.word	0x20000204
     d44:	20000208 	.word	0x20000208
     d48:	20000438 	.word	0x20000438
     d4c:	20000440 	.word	0x20000440
     d50:	0003fffc 	.word	0x0003fffc
     d54:	00010504 	.word	0x00010504
     d58:	200002ac 	.word	0x200002ac
     d5c:	00001e8d 	.word	0x00001e8d
     d60:	000014b9 	.word	0x000014b9
     d64:	00001d11 	.word	0x00001d11
     d68:	00001af9 	.word	0x00001af9
     d6c:	0004fffb 	.word	0x0004fffb
     d70:	0005fffa 	.word	0x0005fffa
     d74:	0006fff9 	.word	0x0006fff9
     d78:	00067ff9 	.word	0x00067ff9
     d7c:	00068ff8 	.word	0x00068ff8
     d80:	00069ff7 	.word	0x00069ff7
     d84:	0006aff6 	.word	0x0006aff6
     d88:	00010584 	.word	0x00010584
     d8c:	0001051c 	.word	0x0001051c
     d90:	2000020c 	.word	0x2000020c
     d94:	20000434 	.word	0x20000434
     d98:	200002a8 	.word	0x200002a8
     d9c:	200001fc 	.word	0x200001fc
     da0:	000105c0 	.word	0x000105c0
     da4:	0000ffff 	.word	0x0000ffff
     da8:	00010540 	.word	0x00010540
     dac:	0006bff5 	.word	0x0006bff5
     db0:	0006cff4 	.word	0x0006cff4
     db4:	0006dff3 	.word	0x0006dff3
     db8:	00001e01 	.word	0x00001e01
     dbc:	000016bd 	.word	0x000016bd
     dc0:	00001f19 	.word	0x00001f19
     dc4:	000105d0 	.word	0x000105d0
			total_bytes_written += bytes_written;
     dc8:	4b2d      	ldr	r3, [pc, #180]	; (e80 <store_file_packet+0x470>)
     dca:	681a      	ldr	r2, [r3, #0]
     dcc:	4694      	mov	ip, r2
     dce:	4461      	add	r1, ip
     dd0:	6019      	str	r1, [r3, #0]
			received_file_size += length;
     dd2:	4c2c      	ldr	r4, [pc, #176]	; (e84 <store_file_packet+0x474>)
     dd4:	6823      	ldr	r3, [r4, #0]
     dd6:	18f1      	adds	r1, r6, r3
     dd8:	6021      	str	r1, [r4, #0]
			printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
     dda:	4d2b      	ldr	r5, [pc, #172]	; (e88 <store_file_packet+0x478>)
     ddc:	682a      	ldr	r2, [r5, #0]
     dde:	482b      	ldr	r0, [pc, #172]	; (e8c <store_file_packet+0x47c>)
     de0:	4b2b      	ldr	r3, [pc, #172]	; (e90 <store_file_packet+0x480>)
     de2:	4798      	blx	r3
			if (received_file_size >= http_file_size) {
     de4:	6822      	ldr	r2, [r4, #0]
     de6:	682b      	ldr	r3, [r5, #0]
     de8:	429a      	cmp	r2, r3
     dea:	d200      	bcs.n	dee <store_file_packet+0x3de>
     dec:	e62b      	b.n	a46 <store_file_packet+0x36>
				status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, buffer_cursor);
     dee:	4b29      	ldr	r3, [pc, #164]	; (e94 <store_file_packet+0x484>)
     df0:	781b      	ldrb	r3, [r3, #0]
     df2:	4a29      	ldr	r2, [pc, #164]	; (e98 <store_file_packet+0x488>)
     df4:	6811      	ldr	r1, [r2, #0]
     df6:	4a29      	ldr	r2, [pc, #164]	; (e9c <store_file_packet+0x48c>)
     df8:	4829      	ldr	r0, [pc, #164]	; (ea0 <store_file_packet+0x490>)
     dfa:	4c2a      	ldr	r4, [pc, #168]	; (ea4 <store_file_packet+0x494>)
     dfc:	47a0      	blx	r4
				if (STATUS_OK != status_val) {
     dfe:	2800      	cmp	r0, #0
     e00:	d11e      	bne.n	e40 <store_file_packet+0x430>
				crc32_recalculate(write_row_buffer, buffer_cursor, &crc_val);
     e02:	4c29      	ldr	r4, [pc, #164]	; (ea8 <store_file_packet+0x498>)
     e04:	4b23      	ldr	r3, [pc, #140]	; (e94 <store_file_packet+0x484>)
     e06:	7819      	ldrb	r1, [r3, #0]
     e08:	0022      	movs	r2, r4
     e0a:	4824      	ldr	r0, [pc, #144]	; (e9c <store_file_packet+0x48c>)
     e0c:	4b27      	ldr	r3, [pc, #156]	; (eac <store_file_packet+0x49c>)
     e0e:	4798      	blx	r3
				printf("store_file_packet: file downloaded successfully.\r\n");
     e10:	4827      	ldr	r0, [pc, #156]	; (eb0 <store_file_packet+0x4a0>)
     e12:	4b28      	ldr	r3, [pc, #160]	; (eb4 <store_file_packet+0x4a4>)
     e14:	4798      	blx	r3
				if (verify_flash(crc_val)) {
     e16:	6820      	ldr	r0, [r4, #0]
     e18:	4b27      	ldr	r3, [pc, #156]	; (eb8 <store_file_packet+0x4a8>)
     e1a:	4798      	blx	r3
     e1c:	2800      	cmp	r0, #0
     e1e:	d018      	beq.n	e52 <store_file_packet+0x442>
					printf("store_file_packet: flash successfully written with no errors\r\n");
     e20:	4826      	ldr	r0, [pc, #152]	; (ebc <store_file_packet+0x4ac>)
     e22:	4b24      	ldr	r3, [pc, #144]	; (eb4 <store_file_packet+0x4a4>)
     e24:	4798      	blx	r3
				if (crc_val != new_firmware_checksum) {
     e26:	4b20      	ldr	r3, [pc, #128]	; (ea8 <store_file_packet+0x498>)
     e28:	681a      	ldr	r2, [r3, #0]
     e2a:	4b25      	ldr	r3, [pc, #148]	; (ec0 <store_file_packet+0x4b0>)
     e2c:	6819      	ldr	r1, [r3, #0]
     e2e:	428a      	cmp	r2, r1
     e30:	d016      	beq.n	e60 <store_file_packet+0x450>
					printf("store_file_packet: file checksums don't match.\r\n Expected checksum %04x\r\n Received checksum %04x\r\n", new_firmware_checksum, crc_val);
     e32:	4824      	ldr	r0, [pc, #144]	; (ec4 <store_file_packet+0x4b4>)
     e34:	4b16      	ldr	r3, [pc, #88]	; (e90 <store_file_packet+0x480>)
     e36:	4798      	blx	r3
					add_state(CANCELED);
     e38:	2020      	movs	r0, #32
     e3a:	4b23      	ldr	r3, [pc, #140]	; (ec8 <store_file_packet+0x4b8>)
     e3c:	4798      	blx	r3
					return;
     e3e:	e602      	b.n	a46 <store_file_packet+0x36>
					add_state(CANCELED);
     e40:	2020      	movs	r0, #32
     e42:	4b21      	ldr	r3, [pc, #132]	; (ec8 <store_file_packet+0x4b8>)
     e44:	4798      	blx	r3
					printf("store_file_packet: error writing row at address %d \r\n", write_address);
     e46:	4b14      	ldr	r3, [pc, #80]	; (e98 <store_file_packet+0x488>)
     e48:	6819      	ldr	r1, [r3, #0]
     e4a:	4820      	ldr	r0, [pc, #128]	; (ecc <store_file_packet+0x4bc>)
     e4c:	4b10      	ldr	r3, [pc, #64]	; (e90 <store_file_packet+0x480>)
     e4e:	4798      	blx	r3
					return;
     e50:	e5f9      	b.n	a46 <store_file_packet+0x36>
					printf("store_file_packet: flash corrupted.\r\n");
     e52:	481f      	ldr	r0, [pc, #124]	; (ed0 <store_file_packet+0x4c0>)
     e54:	4b17      	ldr	r3, [pc, #92]	; (eb4 <store_file_packet+0x4a4>)
     e56:	4798      	blx	r3
					add_state(CANCELED);
     e58:	2020      	movs	r0, #32
     e5a:	4b1b      	ldr	r3, [pc, #108]	; (ec8 <store_file_packet+0x4b8>)
     e5c:	4798      	blx	r3
					return;
     e5e:	e5f2      	b.n	a46 <store_file_packet+0x36>
					update_boot_status();
     e60:	4b1c      	ldr	r3, [pc, #112]	; (ed4 <store_file_packet+0x4c4>)
     e62:	4798      	blx	r3
					write_firmware_metadata(FW1_ADDR, new_firmware_version, new_firmware_checksum, received_file_size);
     e64:	4b07      	ldr	r3, [pc, #28]	; (e84 <store_file_packet+0x474>)
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	4a15      	ldr	r2, [pc, #84]	; (ec0 <store_file_packet+0x4b0>)
     e6a:	6812      	ldr	r2, [r2, #0]
     e6c:	491a      	ldr	r1, [pc, #104]	; (ed8 <store_file_packet+0x4c8>)
     e6e:	8809      	ldrh	r1, [r1, #0]
     e70:	2080      	movs	r0, #128	; 0x80
     e72:	0180      	lsls	r0, r0, #6
     e74:	4c19      	ldr	r4, [pc, #100]	; (edc <store_file_packet+0x4cc>)
     e76:	47a0      	blx	r4
					add_state(COMPLETED);
     e78:	2010      	movs	r0, #16
     e7a:	4b13      	ldr	r3, [pc, #76]	; (ec8 <store_file_packet+0x4b8>)
     e7c:	4798      	blx	r3
				return;
     e7e:	e5e2      	b.n	a46 <store_file_packet+0x36>
     e80:	200002a8 	.word	0x200002a8
     e84:	2000020c 	.word	0x2000020c
     e88:	20000200 	.word	0x20000200
     e8c:	00010608 	.word	0x00010608
     e90:	0000b339 	.word	0x0000b339
     e94:	20000438 	.word	0x20000438
     e98:	20000434 	.word	0x20000434
     e9c:	20000440 	.word	0x20000440
     ea0:	200002ac 	.word	0x200002ac
     ea4:	000016bd 	.word	0x000016bd
     ea8:	200001fc 	.word	0x200001fc
     eac:	00001f19 	.word	0x00001f19
     eb0:	0001063c 	.word	0x0001063c
     eb4:	0000b455 	.word	0x0000b455
     eb8:	00000919 	.word	0x00000919
     ebc:	00010670 	.word	0x00010670
     ec0:	20000204 	.word	0x20000204
     ec4:	000106d8 	.word	0x000106d8
     ec8:	000005c5 	.word	0x000005c5
     ecc:	000105d0 	.word	0x000105d0
     ed0:	000106b0 	.word	0x000106b0
     ed4:	00000661 	.word	0x00000661
     ed8:	20000208 	.word	0x20000208
     edc:	00000605 	.word	0x00000605

00000ee0 <http_client_callback>:
{
     ee0:	b510      	push	{r4, lr}
     ee2:	0014      	movs	r4, r2
	switch (evt) {
     ee4:	2904      	cmp	r1, #4
     ee6:	d806      	bhi.n	ef6 <http_client_callback+0x16>
     ee8:	0089      	lsls	r1, r1, #2
     eea:	4b21      	ldr	r3, [pc, #132]	; (f70 <http_client_callback+0x90>)
     eec:	585b      	ldr	r3, [r3, r1]
     eee:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
     ef0:	4820      	ldr	r0, [pc, #128]	; (f74 <http_client_callback+0x94>)
     ef2:	4b21      	ldr	r3, [pc, #132]	; (f78 <http_client_callback+0x98>)
     ef4:	4798      	blx	r3
}
     ef6:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
     ef8:	4820      	ldr	r0, [pc, #128]	; (f7c <http_client_callback+0x9c>)
     efa:	4b1f      	ldr	r3, [pc, #124]	; (f78 <http_client_callback+0x98>)
     efc:	4798      	blx	r3
		add_state(GET_REQUESTED);
     efe:	2004      	movs	r0, #4
     f00:	4b1f      	ldr	r3, [pc, #124]	; (f80 <http_client_callback+0xa0>)
     f02:	4798      	blx	r3
		break;
     f04:	e7f7      	b.n	ef6 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
     f06:	8811      	ldrh	r1, [r2, #0]
     f08:	6852      	ldr	r2, [r2, #4]
     f0a:	481e      	ldr	r0, [pc, #120]	; (f84 <http_client_callback+0xa4>)
     f0c:	4b1e      	ldr	r3, [pc, #120]	; (f88 <http_client_callback+0xa8>)
     f0e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
     f10:	8823      	ldrh	r3, [r4, #0]
     f12:	2bc8      	cmp	r3, #200	; 0xc8
     f14:	d10c      	bne.n	f30 <http_client_callback+0x50>
			http_file_size = data->recv_response.content_length;
     f16:	6861      	ldr	r1, [r4, #4]
     f18:	4b1c      	ldr	r3, [pc, #112]	; (f8c <http_client_callback+0xac>)
     f1a:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
     f1c:	2200      	movs	r2, #0
     f1e:	4b1c      	ldr	r3, [pc, #112]	; (f90 <http_client_callback+0xb0>)
     f20:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MTU_HTTP)
     f22:	4b1c      	ldr	r3, [pc, #112]	; (f94 <http_client_callback+0xb4>)
     f24:	4299      	cmp	r1, r3
     f26:	d8e6      	bhi.n	ef6 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
     f28:	68a0      	ldr	r0, [r4, #8]
     f2a:	4b1b      	ldr	r3, [pc, #108]	; (f98 <http_client_callback+0xb8>)
     f2c:	4798      	blx	r3
     f2e:	e7e2      	b.n	ef6 <http_client_callback+0x16>
			add_state(CANCELED);
     f30:	2020      	movs	r0, #32
     f32:	4b13      	ldr	r3, [pc, #76]	; (f80 <http_client_callback+0xa0>)
     f34:	4798      	blx	r3
			return;
     f36:	e7de      	b.n	ef6 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
     f38:	6811      	ldr	r1, [r2, #0]
     f3a:	6850      	ldr	r0, [r2, #4]
     f3c:	4b16      	ldr	r3, [pc, #88]	; (f98 <http_client_callback+0xb8>)
     f3e:	4798      	blx	r3
		break;
     f40:	e7d9      	b.n	ef6 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
     f42:	6811      	ldr	r1, [r2, #0]
     f44:	4815      	ldr	r0, [pc, #84]	; (f9c <http_client_callback+0xbc>)
     f46:	4b10      	ldr	r3, [pc, #64]	; (f88 <http_client_callback+0xa8>)
     f48:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
     f4a:	6823      	ldr	r3, [r4, #0]
     f4c:	330b      	adds	r3, #11
     f4e:	d1d2      	bne.n	ef6 <http_client_callback+0x16>
	return (down_state & mask) != 0;
     f50:	4b13      	ldr	r3, [pc, #76]	; (fa0 <http_client_callback+0xc0>)
     f52:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(DOWNLOADING))
     f54:	071b      	lsls	r3, r3, #28
     f56:	d407      	bmi.n	f68 <http_client_callback+0x88>
	return (down_state & mask) != 0;
     f58:	4b11      	ldr	r3, [pc, #68]	; (fa0 <http_client_callback+0xc0>)
     f5a:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED))
     f5c:	075b      	lsls	r3, r3, #29
     f5e:	d5ca      	bpl.n	ef6 <http_client_callback+0x16>
				clear_state(GET_REQUESTED);
     f60:	2004      	movs	r0, #4
     f62:	4b10      	ldr	r3, [pc, #64]	; (fa4 <http_client_callback+0xc4>)
     f64:	4798      	blx	r3
     f66:	e7c6      	b.n	ef6 <http_client_callback+0x16>
				clear_state(DOWNLOADING);
     f68:	2008      	movs	r0, #8
     f6a:	4b0e      	ldr	r3, [pc, #56]	; (fa4 <http_client_callback+0xc4>)
     f6c:	4798      	blx	r3
     f6e:	e7f3      	b.n	f58 <http_client_callback+0x78>
     f70:	00010068 	.word	0x00010068
     f74:	000101f0 	.word	0x000101f0
     f78:	0000b455 	.word	0x0000b455
     f7c:	00010228 	.word	0x00010228
     f80:	000005c5 	.word	0x000005c5
     f84:	00010254 	.word	0x00010254
     f88:	0000b339 	.word	0x0000b339
     f8c:	20000200 	.word	0x20000200
     f90:	2000020c 	.word	0x2000020c
     f94:	000005dc 	.word	0x000005dc
     f98:	00000a11 	.word	0x00000a11
     f9c:	00010290 	.word	0x00010290
     fa0:	200002b4 	.word	0x200002b4
     fa4:	000005b5 	.word	0x000005b5

00000fa8 <configure_http_client>:
{
     fa8:	b500      	push	{lr}
     faa:	b089      	sub	sp, #36	; 0x24
	http_client_get_config_defaults(&httpc_conf);
     fac:	a801      	add	r0, sp, #4
     fae:	4b0b      	ldr	r3, [pc, #44]	; (fdc <configure_http_client+0x34>)
     fb0:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MTU_HTTP;
     fb2:	4b0b      	ldr	r3, [pc, #44]	; (fe0 <configure_http_client+0x38>)
     fb4:	9305      	str	r3, [sp, #20]
	httpc_conf.timer_inst = &swt_module_inst;
     fb6:	4b0b      	ldr	r3, [pc, #44]	; (fe4 <configure_http_client+0x3c>)
     fb8:	9302      	str	r3, [sp, #8]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
     fba:	a901      	add	r1, sp, #4
     fbc:	480a      	ldr	r0, [pc, #40]	; (fe8 <configure_http_client+0x40>)
     fbe:	4b0b      	ldr	r3, [pc, #44]	; (fec <configure_http_client+0x44>)
     fc0:	4798      	blx	r3
     fc2:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
     fc4:	db05      	blt.n	fd2 <configure_http_client+0x2a>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
     fc6:	490a      	ldr	r1, [pc, #40]	; (ff0 <configure_http_client+0x48>)
     fc8:	4807      	ldr	r0, [pc, #28]	; (fe8 <configure_http_client+0x40>)
     fca:	4b0a      	ldr	r3, [pc, #40]	; (ff4 <configure_http_client+0x4c>)
     fcc:	4798      	blx	r3
}
     fce:	b009      	add	sp, #36	; 0x24
     fd0:	bd00      	pop	{pc}
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
     fd2:	4809      	ldr	r0, [pc, #36]	; (ff8 <configure_http_client+0x50>)
     fd4:	4b09      	ldr	r3, [pc, #36]	; (ffc <configure_http_client+0x54>)
     fd6:	4798      	blx	r3
     fd8:	e7fe      	b.n	fd8 <configure_http_client+0x30>
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	000057e5 	.word	0x000057e5
     fe0:	000005dc 	.word	0x000005dc
     fe4:	200002b8 	.word	0x200002b8
     fe8:	20000310 	.word	0x20000310
     fec:	0000580d 	.word	0x0000580d
     ff0:	00000ee1 	.word	0x00000ee1
     ff4:	000058c1 	.word	0x000058c1
     ff8:	0001007c 	.word	0x0001007c
     ffc:	0000b339 	.word	0x0000b339

00001000 <get_default_wifi_config>:
	sw_timer_enable(&swt_module_inst);
}

void get_default_wifi_config(wifi_config *wifi_configuration)
{
	wifi_configuration->ssid = "AirPennNet-Device";
    1000:	4b05      	ldr	r3, [pc, #20]	; (1018 <get_default_wifi_config+0x18>)
    1002:	6003      	str	r3, [r0, #0]
	wifi_configuration->auth_type = M2M_WIFI_SEC_WPA_PSK;
    1004:	2302      	movs	r3, #2
    1006:	6043      	str	r3, [r0, #4]
	wifi_configuration->password = "penn1740wifi";
    1008:	4b04      	ldr	r3, [pc, #16]	; (101c <get_default_wifi_config+0x1c>)
    100a:	6083      	str	r3, [r0, #8]
	wifi_configuration->firmware_header_http_address = "http://www.seas.upenn.edu/~warcher/ese516/metadata.bin";
    100c:	4b04      	ldr	r3, [pc, #16]	; (1020 <get_default_wifi_config+0x20>)
    100e:	60c3      	str	r3, [r0, #12]
	wifi_configuration->firmware_http_address = "http://www.seas.upenn.edu/~warcher/ese516/test-firmware.bin";
    1010:	4b04      	ldr	r3, [pc, #16]	; (1024 <get_default_wifi_config+0x24>)
    1012:	6103      	str	r3, [r0, #16]
}
    1014:	4770      	bx	lr
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	00010158 	.word	0x00010158
    101c:	0001016c 	.word	0x0001016c
    1020:	0001017c 	.word	0x0001017c
    1024:	000101b4 	.word	0x000101b4

00001028 <configure_wifi_module>:
void configure_wifi_module(wifi_config *wifi_configuration)
{
    1028:	b530      	push	{r4, r5, lr}
    102a:	b08b      	sub	sp, #44	; 0x2c
    102c:	0004      	movs	r4, r0
	down_state = NOT_READY;
    102e:	2200      	movs	r2, #0
    1030:	4b24      	ldr	r3, [pc, #144]	; (10c4 <configure_wifi_module+0x9c>)
    1032:	801a      	strh	r2, [r3, #0]
	add_state(NOT_CHECKED);
    1034:	2040      	movs	r0, #64	; 0x40
    1036:	4d24      	ldr	r5, [pc, #144]	; (10c8 <configure_wifi_module+0xa0>)
    1038:	47a8      	blx	r5
	init_state();
	add_state(STORAGE_READY);
    103a:	2001      	movs	r0, #1
    103c:	47a8      	blx	r5
	sw_timer_get_config_defaults(&swt_conf);
    103e:	a803      	add	r0, sp, #12
    1040:	4b22      	ldr	r3, [pc, #136]	; (10cc <configure_wifi_module+0xa4>)
    1042:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    1044:	4d22      	ldr	r5, [pc, #136]	; (10d0 <configure_wifi_module+0xa8>)
    1046:	a903      	add	r1, sp, #12
    1048:	0028      	movs	r0, r5
    104a:	4b22      	ldr	r3, [pc, #136]	; (10d4 <configure_wifi_module+0xac>)
    104c:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    104e:	0028      	movs	r0, r5
    1050:	4b21      	ldr	r3, [pc, #132]	; (10d8 <configure_wifi_module+0xb0>)
    1052:	4798      	blx	r3
	configure_timer();
	configure_http_client();
    1054:	4b21      	ldr	r3, [pc, #132]	; (10dc <configure_wifi_module+0xb4>)
    1056:	4798      	blx	r3
	nm_bsp_init();
    1058:	4b21      	ldr	r3, [pc, #132]	; (10e0 <configure_wifi_module+0xb8>)
    105a:	4798      	blx	r3

	tstrWifiInitParam wifi_params;
	memset((uint8_t *)&wifi_params, 0, sizeof(tstrWifiInitParam));
    105c:	2218      	movs	r2, #24
    105e:	2100      	movs	r1, #0
    1060:	a804      	add	r0, sp, #16
    1062:	4b20      	ldr	r3, [pc, #128]	; (10e4 <configure_wifi_module+0xbc>)
    1064:	4798      	blx	r3
	wifi_params.pfAppWifiCb = wifi_callback;
    1066:	4b20      	ldr	r3, [pc, #128]	; (10e8 <configure_wifi_module+0xc0>)
    1068:	9304      	str	r3, [sp, #16]
	int8_t ret = m2m_wifi_init(&wifi_params); // NOTE: m2m = machine to machine
    106a:	a804      	add	r0, sp, #16
    106c:	4b1f      	ldr	r3, [pc, #124]	; (10ec <configure_wifi_module+0xc4>)
    106e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1070:	2800      	cmp	r0, #0
    1072:	d11c      	bne.n	10ae <configure_wifi_module+0x86>
		printf("failed to initialize wifi parameters\r\n");
		return 0;
	}

	socketInit();
    1074:	4b1e      	ldr	r3, [pc, #120]	; (10f0 <configure_wifi_module+0xc8>)
    1076:	4798      	blx	r3
	registerSocketCallback(socket_callback, resolve_cb);
    1078:	491e      	ldr	r1, [pc, #120]	; (10f4 <configure_wifi_module+0xcc>)
    107a:	481f      	ldr	r0, [pc, #124]	; (10f8 <configure_wifi_module+0xd0>)
    107c:	4b1f      	ldr	r3, [pc, #124]	; (10fc <configure_wifi_module+0xd4>)
    107e:	4798      	blx	r3
	printf("--- Welcome to ATWINC 1500 Connection Test ---\r\n");
    1080:	481f      	ldr	r0, [pc, #124]	; (1100 <configure_wifi_module+0xd8>)
    1082:	4b20      	ldr	r3, [pc, #128]	; (1104 <configure_wifi_module+0xdc>)
    1084:	4798      	blx	r3
	printf("main: connecting to WiFi AP %s...\r\n", wifi_configuration->ssid);
    1086:	6821      	ldr	r1, [r4, #0]
    1088:	481f      	ldr	r0, [pc, #124]	; (1108 <configure_wifi_module+0xe0>)
    108a:	4b20      	ldr	r3, [pc, #128]	; (110c <configure_wifi_module+0xe4>)
    108c:	4798      	blx	r3
	ret = m2m_wifi_connect(wifi_configuration->ssid, strlen(wifi_configuration->ssid), wifi_configuration->auth_type, wifi_configuration->password, M2M_WIFI_CH_ALL);
    108e:	6825      	ldr	r5, [r4, #0]
    1090:	0028      	movs	r0, r5
    1092:	4b1f      	ldr	r3, [pc, #124]	; (1110 <configure_wifi_module+0xe8>)
    1094:	4798      	blx	r3
    1096:	7922      	ldrb	r2, [r4, #4]
    1098:	b2c1      	uxtb	r1, r0
    109a:	23ff      	movs	r3, #255	; 0xff
    109c:	9300      	str	r3, [sp, #0]
    109e:	68a3      	ldr	r3, [r4, #8]
    10a0:	0028      	movs	r0, r5
    10a2:	4d1c      	ldr	r5, [pc, #112]	; (1114 <configure_wifi_module+0xec>)
    10a4:	47a8      	blx	r5
	if (M2M_SUCCESS == ret) {
    10a6:	2800      	cmp	r0, #0
    10a8:	d005      	beq.n	10b6 <configure_wifi_module+0x8e>
		printf("successfully connected\r\n");
		current_wifi_config = wifi_configuration;
	}
}
    10aa:	b00b      	add	sp, #44	; 0x2c
    10ac:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize wifi parameters\r\n");
    10ae:	481a      	ldr	r0, [pc, #104]	; (1118 <configure_wifi_module+0xf0>)
    10b0:	4b14      	ldr	r3, [pc, #80]	; (1104 <configure_wifi_module+0xdc>)
    10b2:	4798      	blx	r3
    10b4:	e7f9      	b.n	10aa <configure_wifi_module+0x82>
		printf("successfully connected\r\n");
    10b6:	4819      	ldr	r0, [pc, #100]	; (111c <configure_wifi_module+0xf4>)
    10b8:	4b12      	ldr	r3, [pc, #72]	; (1104 <configure_wifi_module+0xdc>)
    10ba:	4798      	blx	r3
		current_wifi_config = wifi_configuration;
    10bc:	4b18      	ldr	r3, [pc, #96]	; (1120 <configure_wifi_module+0xf8>)
    10be:	601c      	str	r4, [r3, #0]
    10c0:	e7f3      	b.n	10aa <configure_wifi_module+0x82>
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	200002b4 	.word	0x200002b4
    10c8:	000005c5 	.word	0x000005c5
    10cc:	000067cd 	.word	0x000067cd
    10d0:	200002b8 	.word	0x200002b8
    10d4:	000067d9 	.word	0x000067d9
    10d8:	00006885 	.word	0x00006885
    10dc:	00000fa9 	.word	0x00000fa9
    10e0:	00002215 	.word	0x00002215
    10e4:	0000a8f7 	.word	0x0000a8f7
    10e8:	00000849 	.word	0x00000849
    10ec:	00003151 	.word	0x00003151
    10f0:	00004d7d 	.word	0x00004d7d
    10f4:	00000751 	.word	0x00000751
    10f8:	00000745 	.word	0x00000745
    10fc:	00004dc1 	.word	0x00004dc1
    1100:	000100ec 	.word	0x000100ec
    1104:	0000b455 	.word	0x0000b455
    1108:	0001011c 	.word	0x0001011c
    110c:	0000b339 	.word	0x0000b339
    1110:	0000b69b 	.word	0x0000b69b
    1114:	00003521 	.word	0x00003521
    1118:	000100c4 	.word	0x000100c4
    111c:	00010140 	.word	0x00010140
    1120:	2000043c 	.word	0x2000043c

00001124 <check_for_update>:
	m2m_wifi_deinit(0);
	nm_bsp_deinit();
}

bool check_for_update()
{
    1124:	b570      	push	{r4, r5, r6, lr}
	m2m_wifi_request_dhcp_client();
    1126:	4b0e      	ldr	r3, [pc, #56]	; (1160 <check_for_update+0x3c>)
    1128:	4798      	blx	r3
	return (down_state & mask) != 0;
    112a:	4b0e      	ldr	r3, [pc, #56]	; (1164 <check_for_update+0x40>)
    112c:	881b      	ldrh	r3, [r3, #0]
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    112e:	2230      	movs	r2, #48	; 0x30
    1130:	421a      	tst	r2, r3
    1132:	d10b      	bne.n	114c <check_for_update+0x28>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    1134:	4e0c      	ldr	r6, [pc, #48]	; (1168 <check_for_update+0x44>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    1136:	4c0d      	ldr	r4, [pc, #52]	; (116c <check_for_update+0x48>)
    1138:	4d0d      	ldr	r5, [pc, #52]	; (1170 <check_for_update+0x4c>)
		m2m_wifi_handle_events(NULL);
    113a:	2000      	movs	r0, #0
    113c:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    113e:	0020      	movs	r0, r4
    1140:	47a8      	blx	r5
	return (down_state & mask) != 0;
    1142:	4b08      	ldr	r3, [pc, #32]	; (1164 <check_for_update+0x40>)
    1144:	881b      	ldrh	r3, [r3, #0]
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    1146:	2230      	movs	r2, #48	; 0x30
    1148:	421a      	tst	r2, r3
    114a:	d0f6      	beq.n	113a <check_for_update+0x16>
	}
	if (is_state_set(UPDATE_AVAILABLE)) {
		clear_state(COMPLETED);
		return true;
	} else {
		return false;
    114c:	2000      	movs	r0, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    114e:	061b      	lsls	r3, r3, #24
    1150:	d400      	bmi.n	1154 <check_for_update+0x30>
	}
}
    1152:	bd70      	pop	{r4, r5, r6, pc}
		clear_state(COMPLETED);
    1154:	3010      	adds	r0, #16
    1156:	4b07      	ldr	r3, [pc, #28]	; (1174 <check_for_update+0x50>)
    1158:	4798      	blx	r3
		return true;
    115a:	2001      	movs	r0, #1
    115c:	e7f9      	b.n	1152 <check_for_update+0x2e>
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	0000353d 	.word	0x0000353d
    1164:	200002b4 	.word	0x200002b4
    1168:	00003285 	.word	0x00003285
    116c:	200002b8 	.word	0x200002b8
    1170:	0000690d 	.word	0x0000690d
    1174:	000005b5 	.word	0x000005b5

00001178 <download_firmware>:
bool download_firmware()
{
    1178:	b570      	push	{r4, r5, r6, lr}
	return (down_state & mask) != 0;
    117a:	4b11      	ldr	r3, [pc, #68]	; (11c0 <download_firmware+0x48>)
    117c:	881b      	ldrh	r3, [r3, #0]
		if (is_state_set(COMPLETED))
			return true;
		else
			return false;
	} else {
		return false;
    117e:	2000      	movs	r0, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    1180:	061b      	lsls	r3, r3, #24
    1182:	d400      	bmi.n	1186 <download_firmware+0xe>
	}
}
    1184:	bd70      	pop	{r4, r5, r6, pc}
		start_download();
    1186:	4b0f      	ldr	r3, [pc, #60]	; (11c4 <download_firmware+0x4c>)
    1188:	4798      	blx	r3
	return (down_state & mask) != 0;
    118a:	4b0d      	ldr	r3, [pc, #52]	; (11c0 <download_firmware+0x48>)
    118c:	881b      	ldrh	r3, [r3, #0]
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    118e:	2230      	movs	r2, #48	; 0x30
    1190:	421a      	tst	r2, r3
    1192:	d111      	bne.n	11b8 <download_firmware+0x40>
			m2m_wifi_handle_events(NULL);
    1194:	4e0c      	ldr	r6, [pc, #48]	; (11c8 <download_firmware+0x50>)
			sw_timer_task(&swt_module_inst);
    1196:	4c0d      	ldr	r4, [pc, #52]	; (11cc <download_firmware+0x54>)
    1198:	4d0d      	ldr	r5, [pc, #52]	; (11d0 <download_firmware+0x58>)
			m2m_wifi_handle_events(NULL);
    119a:	2000      	movs	r0, #0
    119c:	47b0      	blx	r6
			sw_timer_task(&swt_module_inst);
    119e:	0020      	movs	r0, r4
    11a0:	47a8      	blx	r5
	return (down_state & mask) != 0;
    11a2:	4b07      	ldr	r3, [pc, #28]	; (11c0 <download_firmware+0x48>)
    11a4:	8818      	ldrh	r0, [r3, #0]
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    11a6:	2330      	movs	r3, #48	; 0x30
    11a8:	4203      	tst	r3, r0
    11aa:	d0f6      	beq.n	119a <download_firmware+0x22>
	return (down_state & mask) != 0;
    11ac:	3b20      	subs	r3, #32
    11ae:	4018      	ands	r0, r3
		if (is_state_set(COMPLETED))
    11b0:	1e43      	subs	r3, r0, #1
    11b2:	4198      	sbcs	r0, r3
    11b4:	b2c0      	uxtb	r0, r0
    11b6:	e7e5      	b.n	1184 <download_firmware+0xc>
	return (down_state & mask) != 0;
    11b8:	2010      	movs	r0, #16
    11ba:	4018      	ands	r0, r3
    11bc:	e7f8      	b.n	11b0 <download_firmware+0x38>
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	200002b4 	.word	0x200002b4
    11c4:	0000078d 	.word	0x0000078d
    11c8:	00003285 	.word	0x00003285
    11cc:	200002b8 	.word	0x200002b8
    11d0:	0000690d 	.word	0x0000690d

000011d4 <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
    11d4:	b530      	push	{r4, r5, lr}
    11d6:	b08f      	sub	sp, #60	; 0x3c
    11d8:	0004      	movs	r4, r0
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    11da:	aa01      	add	r2, sp, #4
    11dc:	2364      	movs	r3, #100	; 0x64
    11de:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    11e0:	4b1f      	ldr	r3, [pc, #124]	; (1260 <configure_i2c_tsl2561+0x8c>)
    11e2:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    11e4:	2300      	movs	r3, #0
    11e6:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    11e8:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    11ea:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    11ec:	2180      	movs	r1, #128	; 0x80
    11ee:	0389      	lsls	r1, r1, #14
    11f0:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    11f2:	2101      	movs	r1, #1
    11f4:	4249      	negs	r1, r1
    11f6:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    11f8:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    11fa:	3125      	adds	r1, #37	; 0x25
    11fc:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    11fe:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    1200:	3108      	adds	r1, #8
    1202:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    1204:	3101      	adds	r1, #1
    1206:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    1208:	3101      	adds	r1, #1
    120a:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    120c:	33d7      	adds	r3, #215	; 0xd7
    120e:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    1210:	4b14      	ldr	r3, [pc, #80]	; (1264 <configure_i2c_tsl2561+0x90>)
    1212:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    1214:	4b14      	ldr	r3, [pc, #80]	; (1268 <configure_i2c_tsl2561+0x94>)
    1216:	6213      	str	r3, [r2, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
    1218:	4914      	ldr	r1, [pc, #80]	; (126c <configure_i2c_tsl2561+0x98>)
    121a:	4815      	ldr	r0, [pc, #84]	; (1270 <configure_i2c_tsl2561+0x9c>)
    121c:	4b15      	ldr	r3, [pc, #84]	; (1274 <configure_i2c_tsl2561+0xa0>)
    121e:	4798      	blx	r3
	if (STATUS_OK != init_status) {
    1220:	2800      	cmp	r0, #0
    1222:	d119      	bne.n	1258 <configure_i2c_tsl2561+0x84>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1224:	4b12      	ldr	r3, [pc, #72]	; (1270 <configure_i2c_tsl2561+0x9c>)
    1226:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1228:	2107      	movs	r1, #7
    122a:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    122c:	4219      	tst	r1, r3
    122e:	d1fc      	bne.n	122a <configure_i2c_tsl2561+0x56>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1230:	6813      	ldr	r3, [r2, #0]
    1232:	2102      	movs	r1, #2
    1234:	430b      	orrs	r3, r1
    1236:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1238:	4b0d      	ldr	r3, [pc, #52]	; (1270 <configure_i2c_tsl2561+0x9c>)
    123a:	88dd      	ldrh	r5, [r3, #6]
	uint32_t timeout_counter = 0;
    123c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    123e:	2010      	movs	r0, #16
    1240:	8b51      	ldrh	r1, [r2, #26]
    1242:	4201      	tst	r1, r0
    1244:	d104      	bne.n	1250 <configure_i2c_tsl2561+0x7c>
		timeout_counter++;
    1246:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1248:	42ab      	cmp	r3, r5
    124a:	d3f9      	bcc.n	1240 <configure_i2c_tsl2561+0x6c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    124c:	2310      	movs	r3, #16
    124e:	8353      	strh	r3, [r2, #26]
		printf("failed to initialize TSL2561 driver.\r\n");
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
	tsl2561_addr = addr;
    1250:	4b09      	ldr	r3, [pc, #36]	; (1278 <configure_i2c_tsl2561+0xa4>)
    1252:	701c      	strb	r4, [r3, #0]
}
    1254:	b00f      	add	sp, #60	; 0x3c
    1256:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize TSL2561 driver.\r\n");
    1258:	4808      	ldr	r0, [pc, #32]	; (127c <configure_i2c_tsl2561+0xa8>)
    125a:	4b09      	ldr	r3, [pc, #36]	; (1280 <configure_i2c_tsl2561+0xac>)
    125c:	4798      	blx	r3
    125e:	e7f9      	b.n	1254 <configure_i2c_tsl2561+0x80>
    1260:	00000d48 	.word	0x00000d48
    1264:	00080002 	.word	0x00080002
    1268:	00090002 	.word	0x00090002
    126c:	42000800 	.word	0x42000800
    1270:	20000540 	.word	0x20000540
    1274:	00006fd1 	.word	0x00006fd1
    1278:	20000210 	.word	0x20000210
    127c:	000109f8 	.word	0x000109f8
    1280:	0000b455 	.word	0x0000b455

00001284 <read_byte>:


uint8_t read_byte(tsl2561_registers reg)
{
    1284:	b500      	push	{lr}
    1286:	b085      	sub	sp, #20
	uint8_t received_data;
	uint8_t write_buffer = reg;
    1288:	230e      	movs	r3, #14
    128a:	446b      	add	r3, sp
    128c:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
    128e:	4a18      	ldr	r2, [pc, #96]	; (12f0 <read_byte+0x6c>)
    1290:	7812      	ldrb	r2, [r2, #0]
    1292:	4669      	mov	r1, sp
    1294:	800a      	strh	r2, [r1, #0]
    1296:	2201      	movs	r2, #1
    1298:	804a      	strh	r2, [r1, #2]
    129a:	9301      	str	r3, [sp, #4]
    129c:	2300      	movs	r3, #0
    129e:	720b      	strb	r3, [r1, #8]
    12a0:	724b      	strb	r3, [r1, #9]
    12a2:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait(&i2c_tsl2561, &packet);
    12a4:	4813      	ldr	r0, [pc, #76]	; (12f4 <read_byte+0x70>)
    12a6:	4b14      	ldr	r3, [pc, #80]	; (12f8 <read_byte+0x74>)
    12a8:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
    12aa:	2800      	cmp	r0, #0
    12ac:	d008      	beq.n	12c0 <read_byte+0x3c>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
    12ae:	230e      	movs	r3, #14
    12b0:	446b      	add	r3, sp
    12b2:	7819      	ldrb	r1, [r3, #0]
    12b4:	4811      	ldr	r0, [pc, #68]	; (12fc <read_byte+0x78>)
    12b6:	4b12      	ldr	r3, [pc, #72]	; (1300 <read_byte+0x7c>)
    12b8:	4798      	blx	r3
		return -1;
    12ba:	20ff      	movs	r0, #255	; 0xff
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
		return -1;
	}
	return received_data;
}
    12bc:	b005      	add	sp, #20
    12be:	bd00      	pop	{pc}
	packet.data = &received_data;
    12c0:	230f      	movs	r3, #15
    12c2:	446b      	add	r3, sp
    12c4:	9301      	str	r3, [sp, #4]
	packet.data_length = 1;
    12c6:	2301      	movs	r3, #1
    12c8:	466a      	mov	r2, sp
    12ca:	8053      	strh	r3, [r2, #2]
	i2c_code = i2c_master_read_packet_wait(&i2c_tsl2561, &packet);
    12cc:	4669      	mov	r1, sp
    12ce:	4809      	ldr	r0, [pc, #36]	; (12f4 <read_byte+0x70>)
    12d0:	4b0c      	ldr	r3, [pc, #48]	; (1304 <read_byte+0x80>)
    12d2:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
    12d4:	2800      	cmp	r0, #0
    12d6:	d103      	bne.n	12e0 <read_byte+0x5c>
	return received_data;
    12d8:	230f      	movs	r3, #15
    12da:	446b      	add	r3, sp
    12dc:	7818      	ldrb	r0, [r3, #0]
    12de:	e7ed      	b.n	12bc <read_byte+0x38>
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
    12e0:	230e      	movs	r3, #14
    12e2:	446b      	add	r3, sp
    12e4:	7819      	ldrb	r1, [r3, #0]
    12e6:	4808      	ldr	r0, [pc, #32]	; (1308 <read_byte+0x84>)
    12e8:	4b05      	ldr	r3, [pc, #20]	; (1300 <read_byte+0x7c>)
    12ea:	4798      	blx	r3
		return -1;
    12ec:	20ff      	movs	r0, #255	; 0xff
    12ee:	e7e5      	b.n	12bc <read_byte+0x38>
    12f0:	20000210 	.word	0x20000210
    12f4:	20000540 	.word	0x20000540
    12f8:	000075bd 	.word	0x000075bd
    12fc:	00010a20 	.word	0x00010a20
    1300:	0000b339 	.word	0x0000b339
    1304:	000075a9 	.word	0x000075a9
    1308:	0000fff0 	.word	0x0000fff0

0000130c <write_byte>:

void write_byte(tsl2561_registers reg, uint8_t data_byte)
{
    130c:	b500      	push	{lr}
    130e:	b085      	sub	sp, #20
	uint8_t write_buffer[2] = { reg, data_byte };
    1310:	ab03      	add	r3, sp, #12
    1312:	7018      	strb	r0, [r3, #0]
    1314:	7059      	strb	r1, [r3, #1]
	struct i2c_master_packet packet = {
    1316:	4a0c      	ldr	r2, [pc, #48]	; (1348 <write_byte+0x3c>)
    1318:	7812      	ldrb	r2, [r2, #0]
    131a:	4669      	mov	r1, sp
    131c:	800a      	strh	r2, [r1, #0]
    131e:	2202      	movs	r2, #2
    1320:	804a      	strh	r2, [r1, #2]
    1322:	9301      	str	r3, [sp, #4]
    1324:	2300      	movs	r3, #0
    1326:	720b      	strb	r3, [r1, #8]
    1328:	724b      	strb	r3, [r1, #9]
    132a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &packet);
    132c:	4807      	ldr	r0, [pc, #28]	; (134c <write_byte+0x40>)
    132e:	4b08      	ldr	r3, [pc, #32]	; (1350 <write_byte+0x44>)
    1330:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
    1332:	2800      	cmp	r0, #0
    1334:	d101      	bne.n	133a <write_byte+0x2e>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer[1]);
		return;
	}
}
    1336:	b005      	add	sp, #20
    1338:	bd00      	pop	{pc}
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer[1]);
    133a:	ab03      	add	r3, sp, #12
    133c:	7859      	ldrb	r1, [r3, #1]
    133e:	4805      	ldr	r0, [pc, #20]	; (1354 <write_byte+0x48>)
    1340:	4b05      	ldr	r3, [pc, #20]	; (1358 <write_byte+0x4c>)
    1342:	4798      	blx	r3
    1344:	e7f7      	b.n	1336 <write_byte+0x2a>
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	20000210 	.word	0x20000210
    134c:	20000540 	.word	0x20000540
    1350:	000075d1 	.word	0x000075d1
    1354:	00010a20 	.word	0x00010a20
    1358:	0000b339 	.word	0x0000b339

0000135c <set_gain>:
 * For now the integration time will always be 402ms. Will update once decide
 * if we need faster readings
 * @param new_gain new gain multiplier
 */
void set_gain(tsl2561_gains new_gain)
{
    135c:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | TIMING_REG, (INTEGRATE_402MS | new_gain));
    135e:	2102      	movs	r1, #2
    1360:	4301      	orrs	r1, r0
    1362:	2081      	movs	r0, #129	; 0x81
    1364:	4b01      	ldr	r3, [pc, #4]	; (136c <set_gain+0x10>)
    1366:	4798      	blx	r3
}
    1368:	bd10      	pop	{r4, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	0000130d 	.word	0x0000130d

00001370 <power_on_tsl2561>:

void power_on_tsl2561()
{
    1370:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x03);
    1372:	2103      	movs	r1, #3
    1374:	2080      	movs	r0, #128	; 0x80
    1376:	4b03      	ldr	r3, [pc, #12]	; (1384 <power_on_tsl2561+0x14>)
    1378:	4798      	blx	r3
	set_gain(GAIN_16X);
    137a:	2010      	movs	r0, #16
    137c:	4b02      	ldr	r3, [pc, #8]	; (1388 <power_on_tsl2561+0x18>)
    137e:	4798      	blx	r3
}
    1380:	bd10      	pop	{r4, pc}
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	0000130d 	.word	0x0000130d
    1388:	0000135d 	.word	0x0000135d

0000138c <power_off_tsl2561>:

void power_off_tsl2561()
{
    138c:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x0);
    138e:	2100      	movs	r1, #0
    1390:	2080      	movs	r0, #128	; 0x80
    1392:	4b01      	ldr	r3, [pc, #4]	; (1398 <power_off_tsl2561+0xc>)
    1394:	4798      	blx	r3
}
    1396:	bd10      	pop	{r4, pc}
    1398:	0000130d 	.word	0x0000130d

0000139c <get_tsl2561_device_id>:

//SHOULD RETURN 0x50
uint8_t get_tsl2561_device_id()
{
    139c:	b510      	push	{r4, lr}
	return read_byte(CMD_BIT | ID_REG);
    139e:	208a      	movs	r0, #138	; 0x8a
    13a0:	4b01      	ldr	r3, [pc, #4]	; (13a8 <get_tsl2561_device_id+0xc>)
    13a2:	4798      	blx	r3
}
    13a4:	bd10      	pop	{r4, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	00001285 	.word	0x00001285

000013ac <get_chan0>:

uint16_t get_chan0()
{
    13ac:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(403);
    13ae:	2094      	movs	r0, #148	; 0x94
    13b0:	30ff      	adds	r0, #255	; 0xff
    13b2:	4b06      	ldr	r3, [pc, #24]	; (13cc <get_chan0+0x20>)
    13b4:	4798      	blx	r3
	//HAVE TO READ LOW REGISTER BEFORE HIGH REG PER DATASHEET
	return read_byte(CMD_BIT | CHAN0_LOW_REG) | (read_byte(CMD_BIT | CHAN0_HIGH_REG) << 8);
    13b6:	208c      	movs	r0, #140	; 0x8c
    13b8:	4c05      	ldr	r4, [pc, #20]	; (13d0 <get_chan0+0x24>)
    13ba:	47a0      	blx	r4
    13bc:	0005      	movs	r5, r0
    13be:	208d      	movs	r0, #141	; 0x8d
    13c0:	47a0      	blx	r4
    13c2:	0200      	lsls	r0, r0, #8
    13c4:	4328      	orrs	r0, r5
    13c6:	b280      	uxth	r0, r0
}
    13c8:	bd70      	pop	{r4, r5, r6, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	00009905 	.word	0x00009905
    13d0:	00001285 	.word	0x00001285

000013d4 <get_chan1>:

uint16_t get_chan1()
{
    13d4:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(403);
    13d6:	2094      	movs	r0, #148	; 0x94
    13d8:	30ff      	adds	r0, #255	; 0xff
    13da:	4b06      	ldr	r3, [pc, #24]	; (13f4 <get_chan1+0x20>)
    13dc:	4798      	blx	r3
	return read_byte(CMD_BIT | CHAN1_LOW_REG) | (read_byte(CMD_BIT | CHAN1_HIGH_REG) << 8);
    13de:	208e      	movs	r0, #142	; 0x8e
    13e0:	4c05      	ldr	r4, [pc, #20]	; (13f8 <get_chan1+0x24>)
    13e2:	47a0      	blx	r4
    13e4:	0005      	movs	r5, r0
    13e6:	208f      	movs	r0, #143	; 0x8f
    13e8:	47a0      	blx	r4
    13ea:	0200      	lsls	r0, r0, #8
    13ec:	4328      	orrs	r0, r5
    13ee:	b280      	uxth	r0, r0
}
    13f0:	bd70      	pop	{r4, r5, r6, pc}
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	00009905 	.word	0x00009905
    13f8:	00001285 	.word	0x00001285

000013fc <get_lux>:

uint32_t get_lux()
{
    13fc:	b570      	push	{r4, r5, r6, lr}
	uint16_t chan0 = get_chan0();
    13fe:	4b26      	ldr	r3, [pc, #152]	; (1498 <get_lux+0x9c>)
    1400:	4798      	blx	r3
    1402:	0004      	movs	r4, r0
	uint16_t chan1 = get_chan1();
    1404:	4b25      	ldr	r3, [pc, #148]	; (149c <get_lux+0xa0>)
    1406:	4798      	blx	r3
    1408:	0005      	movs	r5, r0
		printf("get_lux: TSL2561 light is saturated");
		return -1;
	}

	unsigned long ratio10 = 0;
	if(chan0 != 0) {
    140a:	2c00      	cmp	r4, #0
    140c:	d01b      	beq.n	1446 <get_lux+0x4a>
		 ratio10 = (chan1 << (TSL2561_LUX_RATIOSCALE + 1)) / chan0;
    140e:	0280      	lsls	r0, r0, #10
    1410:	0021      	movs	r1, r4
    1412:	4b23      	ldr	r3, [pc, #140]	; (14a0 <get_lux+0xa4>)
    1414:	4798      	blx	r3
	}
	ratio10 = (ratio10 + 1) >> 1;
    1416:	3001      	adds	r0, #1
    1418:	0840      	lsrs	r0, r0, #1
	unsigned int b, m;

	if ((ratio10 >= 0) && (ratio10 <= TSL2561_LUX_K1T)) {
    141a:	2840      	cmp	r0, #64	; 0x40
    141c:	d920      	bls.n	1460 <get_lux+0x64>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
	} else if (ratio10 <= TSL2561_LUX_K2T) {
    141e:	2880      	cmp	r0, #128	; 0x80
    1420:	d923      	bls.n	146a <get_lux+0x6e>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
	} else if (ratio10 <= TSL2561_LUX_K3T) {
    1422:	28c0      	cmp	r0, #192	; 0xc0
    1424:	d925      	bls.n	1472 <get_lux+0x76>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
	} else if (ratio10 <= TSL2561_LUX_K4T) {
    1426:	2380      	movs	r3, #128	; 0x80
    1428:	005b      	lsls	r3, r3, #1
    142a:	4298      	cmp	r0, r3
    142c:	d924      	bls.n	1478 <get_lux+0x7c>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
	} else if (ratio10 <= TSL2561_LUX_K5T) {
    142e:	3338      	adds	r3, #56	; 0x38
    1430:	4298      	cmp	r0, r3
    1432:	d925      	bls.n	1480 <get_lux+0x84>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
	} else if (ratio10 <= TSL2561_LUX_K6T) {
    1434:	3362      	adds	r3, #98	; 0x62
    1436:	4298      	cmp	r0, r3
    1438:	d927      	bls.n	148a <get_lux+0x8e>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
	} else if (ratio10 <= TSL2561_LUX_K7T) {
    143a:	4b1a      	ldr	r3, [pc, #104]	; (14a4 <get_lux+0xa8>)
    143c:	4298      	cmp	r0, r3
    143e:	d927      	bls.n	1490 <get_lux+0x94>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
	} else if (ratio10 > TSL2561_LUX_K8T) {
		b = TSL2561_LUX_B8T; m = TSL2561_LUX_M8T;
    1440:	2300      	movs	r3, #0
    1442:	2000      	movs	r0, #0
    1444:	e003      	b.n	144e <get_lux+0x52>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
    1446:	23df      	movs	r3, #223	; 0xdf
    1448:	005b      	lsls	r3, r3, #1
    144a:	20f9      	movs	r0, #249	; 0xf9
    144c:	0040      	lsls	r0, r0, #1
	}
	
	
	unsigned long temp = ((chan0 * b) - (chan1 * m));
    144e:	4360      	muls	r0, r4
	temp = (temp) ? temp : 0; // no negative lux
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
    1450:	2280      	movs	r2, #128	; 0x80
    1452:	0192      	lsls	r2, r2, #6
    1454:	4694      	mov	ip, r2
    1456:	4460      	add	r0, ip
	unsigned long temp = ((chan0 * b) - (chan1 * m));
    1458:	435d      	muls	r5, r3
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
    145a:	1b40      	subs	r0, r0, r5
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
    145c:	0b80      	lsrs	r0, r0, #14
	return lux;
}
    145e:	bd70      	pop	{r4, r5, r6, pc}
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
    1460:	23df      	movs	r3, #223	; 0xdf
    1462:	005b      	lsls	r3, r3, #1
    1464:	20f9      	movs	r0, #249	; 0xf9
    1466:	0040      	lsls	r0, r0, #1
    1468:	e7f1      	b.n	144e <get_lux+0x52>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
    146a:	4b0f      	ldr	r3, [pc, #60]	; (14a8 <get_lux+0xac>)
    146c:	2085      	movs	r0, #133	; 0x85
    146e:	0080      	lsls	r0, r0, #2
    1470:	e7ed      	b.n	144e <get_lux+0x52>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
    1472:	4b0e      	ldr	r3, [pc, #56]	; (14ac <get_lux+0xb0>)
    1474:	480e      	ldr	r0, [pc, #56]	; (14b0 <get_lux+0xb4>)
    1476:	e7ea      	b.n	144e <get_lux+0x52>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
    1478:	4b0e      	ldr	r3, [pc, #56]	; (14b4 <get_lux+0xb8>)
    147a:	209c      	movs	r0, #156	; 0x9c
    147c:	0080      	lsls	r0, r0, #2
    147e:	e7e6      	b.n	144e <get_lux+0x52>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
    1480:	23fe      	movs	r3, #254	; 0xfe
    1482:	005b      	lsls	r3, r3, #1
    1484:	2070      	movs	r0, #112	; 0x70
    1486:	30ff      	adds	r0, #255	; 0xff
    1488:	e7e1      	b.n	144e <get_lux+0x52>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
    148a:	23fb      	movs	r3, #251	; 0xfb
    148c:	20d2      	movs	r0, #210	; 0xd2
    148e:	e7de      	b.n	144e <get_lux+0x52>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
    1490:	2312      	movs	r3, #18
    1492:	2018      	movs	r0, #24
    1494:	e7db      	b.n	144e <get_lux+0x52>
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	000013ad 	.word	0x000013ad
    149c:	000013d5 	.word	0x000013d5
    14a0:	0000da2d 	.word	0x0000da2d
    14a4:	0000029a 	.word	0x0000029a
    14a8:	000002d1 	.word	0x000002d1
    14ac:	0000037b 	.word	0x0000037b
    14b0:	0000023f 	.word	0x0000023f
    14b4:	000003fe 	.word	0x000003fe

000014b8 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    14b8:	b530      	push	{r4, r5, lr}
    14ba:	b085      	sub	sp, #20
    14bc:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    14be:	2300      	movs	r3, #0
    14c0:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    14c2:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    14c4:	4b2f      	ldr	r3, [pc, #188]	; (1584 <at25dfx_chip_check_presence+0xcc>)
    14c6:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    14c8:	792b      	ldrb	r3, [r5, #4]
    14ca:	2b00      	cmp	r3, #0
    14cc:	d156      	bne.n	157c <at25dfx_chip_check_presence+0xc4>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    14ce:	3301      	adds	r3, #1
    14d0:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    14d2:	4b2d      	ldr	r3, [pc, #180]	; (1588 <at25dfx_chip_check_presence+0xd0>)
    14d4:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    14d6:	229f      	movs	r2, #159	; 0x9f
    14d8:	ab01      	add	r3, sp, #4
    14da:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    14dc:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    14de:	09d1      	lsrs	r1, r2, #7
		return NULL;
    14e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14e2:	2900      	cmp	r1, #0
    14e4:	d104      	bne.n	14f0 <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    14e6:	0953      	lsrs	r3, r2, #5
    14e8:	01db      	lsls	r3, r3, #7
    14ea:	4928      	ldr	r1, [pc, #160]	; (158c <at25dfx_chip_check_presence+0xd4>)
    14ec:	468c      	mov	ip, r1
    14ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14f0:	211f      	movs	r1, #31
    14f2:	4011      	ands	r1, r2
    14f4:	2201      	movs	r2, #1
    14f6:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14f8:	615a      	str	r2, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    14fa:	2201      	movs	r2, #1
    14fc:	a901      	add	r1, sp, #4
    14fe:	6820      	ldr	r0, [r4, #0]
    1500:	4b23      	ldr	r3, [pc, #140]	; (1590 <at25dfx_chip_check_presence+0xd8>)
    1502:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    1504:	2300      	movs	r3, #0
    1506:	2203      	movs	r2, #3
    1508:	a903      	add	r1, sp, #12
    150a:	6820      	ldr	r0, [r4, #0]
    150c:	4d21      	ldr	r5, [pc, #132]	; (1594 <at25dfx_chip_check_presence+0xdc>)
    150e:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    1510:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1512:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1514:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1516:	2900      	cmp	r1, #0
    1518:	d104      	bne.n	1524 <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    151a:	0953      	lsrs	r3, r2, #5
    151c:	01db      	lsls	r3, r3, #7
    151e:	491b      	ldr	r1, [pc, #108]	; (158c <at25dfx_chip_check_presence+0xd4>)
    1520:	468c      	mov	ip, r1
    1522:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1524:	211f      	movs	r1, #31
    1526:	4011      	ands	r1, r2
    1528:	2201      	movs	r2, #1
    152a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    152c:	619a      	str	r2, [r3, #24]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    152e:	2300      	movs	r3, #0
    1530:	6822      	ldr	r2, [r4, #0]
    1532:	7113      	strb	r3, [r2, #4]
	switch (type) {
    1534:	7923      	ldrb	r3, [r4, #4]
    1536:	2b09      	cmp	r3, #9
    1538:	d815      	bhi.n	1566 <at25dfx_chip_check_presence+0xae>
    153a:	009b      	lsls	r3, r3, #2
    153c:	4a16      	ldr	r2, [pc, #88]	; (1598 <at25dfx_chip_check_presence+0xe0>)
    153e:	58d3      	ldr	r3, [r2, r3]
    1540:	469f      	mov	pc, r3
		return 0x00431f;
    1542:	4b16      	ldr	r3, [pc, #88]	; (159c <at25dfx_chip_check_presence+0xe4>)
    1544:	e012      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x01441f;
    1546:	4b16      	ldr	r3, [pc, #88]	; (15a0 <at25dfx_chip_check_presence+0xe8>)
    1548:	e010      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x02451f;
    154a:	4b16      	ldr	r3, [pc, #88]	; (15a4 <at25dfx_chip_check_presence+0xec>)
    154c:	e00e      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x01451f;
    154e:	4b16      	ldr	r3, [pc, #88]	; (15a8 <at25dfx_chip_check_presence+0xf0>)
    1550:	e00c      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
    1552:	4b16      	ldr	r3, [pc, #88]	; (15ac <at25dfx_chip_check_presence+0xf4>)
    1554:	e00a      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
    1556:	4b16      	ldr	r3, [pc, #88]	; (15b0 <at25dfx_chip_check_presence+0xf8>)
    1558:	e008      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
    155a:	4b16      	ldr	r3, [pc, #88]	; (15b4 <at25dfx_chip_check_presence+0xfc>)
    155c:	e006      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
    155e:	4b16      	ldr	r3, [pc, #88]	; (15b8 <at25dfx_chip_check_presence+0x100>)
    1560:	e004      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
    1562:	4b16      	ldr	r3, [pc, #88]	; (15bc <at25dfx_chip_check_presence+0x104>)
    1564:	e002      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0;
    1566:	2300      	movs	r3, #0
    1568:	e000      	b.n	156c <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
    156a:	4b15      	ldr	r3, [pc, #84]	; (15c0 <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    156c:	9a03      	ldr	r2, [sp, #12]
    156e:	429a      	cmp	r2, r3
    1570:	d002      	beq.n	1578 <at25dfx_chip_check_presence+0xc0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    1572:	2014      	movs	r0, #20
	}
}
    1574:	b005      	add	sp, #20
    1576:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    1578:	2000      	movs	r0, #0
    157a:	e7fb      	b.n	1574 <at25dfx_chip_check_presence+0xbc>
    157c:	4b02      	ldr	r3, [pc, #8]	; (1588 <at25dfx_chip_check_presence+0xd0>)
    157e:	4798      	blx	r3
		return status;
    1580:	2005      	movs	r0, #5
    1582:	e7f7      	b.n	1574 <at25dfx_chip_check_presence+0xbc>
    1584:	00009c49 	.word	0x00009c49
    1588:	00009c89 	.word	0x00009c89
    158c:	41004400 	.word	0x41004400
    1590:	00009021 	.word	0x00009021
    1594:	00008e11 	.word	0x00008e11
    1598:	00010a58 	.word	0x00010a58
    159c:	0000431f 	.word	0x0000431f
    15a0:	0001441f 	.word	0x0001441f
    15a4:	0002451f 	.word	0x0002451f
    15a8:	0001451f 	.word	0x0001451f
    15ac:	0002461f 	.word	0x0002461f
    15b0:	0003461f 	.word	0x0003461f
    15b4:	0000861f 	.word	0x0000861f
    15b8:	0001471f 	.word	0x0001471f
    15bc:	0000481f 	.word	0x0000481f
    15c0:	0000651f 	.word	0x0000651f

000015c4 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    15c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15c6:	b085      	sub	sp, #20
    15c8:	0004      	movs	r4, r0
    15ca:	000e      	movs	r6, r1
    15cc:	9201      	str	r2, [sp, #4]
    15ce:	001f      	movs	r7, r3
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    15d0:	185a      	adds	r2, r3, r1
	switch (type) {
    15d2:	7903      	ldrb	r3, [r0, #4]
    15d4:	2b09      	cmp	r3, #9
    15d6:	d815      	bhi.n	1604 <at25dfx_chip_read_buffer+0x40>
    15d8:	009b      	lsls	r3, r3, #2
    15da:	4932      	ldr	r1, [pc, #200]	; (16a4 <at25dfx_chip_read_buffer+0xe0>)
    15dc:	58cb      	ldr	r3, [r1, r3]
    15de:	469f      	mov	pc, r3
		return 256 * 1024UL;
    15e0:	2380      	movs	r3, #128	; 0x80
    15e2:	02db      	lsls	r3, r3, #11
    15e4:	e012      	b.n	160c <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
    15e6:	2380      	movs	r3, #128	; 0x80
    15e8:	031b      	lsls	r3, r3, #12
    15ea:	e00f      	b.n	160c <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
    15ec:	2380      	movs	r3, #128	; 0x80
    15ee:	035b      	lsls	r3, r3, #13
    15f0:	e00c      	b.n	160c <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
    15f2:	2380      	movs	r3, #128	; 0x80
    15f4:	039b      	lsls	r3, r3, #14
    15f6:	e009      	b.n	160c <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
    15f8:	2380      	movs	r3, #128	; 0x80
    15fa:	03db      	lsls	r3, r3, #15
    15fc:	e006      	b.n	160c <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
    15fe:	2380      	movs	r3, #128	; 0x80
    1600:	041b      	lsls	r3, r3, #16
    1602:	e003      	b.n	160c <at25dfx_chip_read_buffer+0x48>
		return 0;
    1604:	2300      	movs	r3, #0
    1606:	e001      	b.n	160c <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
    1608:	2380      	movs	r3, #128	; 0x80
    160a:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    160c:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    160e:	429a      	cmp	r2, r3
    1610:	d901      	bls.n	1616 <at25dfx_chip_read_buffer+0x52>
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
    1612:	b005      	add	sp, #20
    1614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    1616:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    1618:	4b23      	ldr	r3, [pc, #140]	; (16a8 <at25dfx_chip_read_buffer+0xe4>)
    161a:	4798      	blx	r3
	if (module->locked) {
    161c:	792b      	ldrb	r3, [r5, #4]
    161e:	2b00      	cmp	r3, #0
    1620:	d13c      	bne.n	169c <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
    1622:	3301      	adds	r3, #1
    1624:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    1626:	4b21      	ldr	r3, [pc, #132]	; (16ac <at25dfx_chip_read_buffer+0xe8>)
    1628:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    162a:	230b      	movs	r3, #11
    162c:	aa02      	add	r2, sp, #8
    162e:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    1630:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1632:	0a33      	lsrs	r3, r6, #8
    1634:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1636:	0c36      	lsrs	r6, r6, #16
    1638:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    163a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    163c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    163e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1640:	2900      	cmp	r1, #0
    1642:	d104      	bne.n	164e <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
    1644:	0953      	lsrs	r3, r2, #5
    1646:	01db      	lsls	r3, r3, #7
    1648:	4919      	ldr	r1, [pc, #100]	; (16b0 <at25dfx_chip_read_buffer+0xec>)
    164a:	468c      	mov	ip, r1
    164c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    164e:	211f      	movs	r1, #31
    1650:	4011      	ands	r1, r2
    1652:	2201      	movs	r2, #1
    1654:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1656:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1658:	2205      	movs	r2, #5
    165a:	a902      	add	r1, sp, #8
    165c:	6820      	ldr	r0, [r4, #0]
    165e:	4b15      	ldr	r3, [pc, #84]	; (16b4 <at25dfx_chip_read_buffer+0xf0>)
    1660:	4798      	blx	r3
	if (cmd.length) {
    1662:	2f00      	cmp	r7, #0
    1664:	d113      	bne.n	168e <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
    1666:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1668:	09d1      	lsrs	r1, r2, #7
		return NULL;
    166a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    166c:	2900      	cmp	r1, #0
    166e:	d104      	bne.n	167a <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
    1670:	0953      	lsrs	r3, r2, #5
    1672:	01db      	lsls	r3, r3, #7
    1674:	490e      	ldr	r1, [pc, #56]	; (16b0 <at25dfx_chip_read_buffer+0xec>)
    1676:	468c      	mov	ip, r1
    1678:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    167a:	211f      	movs	r1, #31
    167c:	4011      	ands	r1, r2
    167e:	2201      	movs	r2, #1
    1680:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1682:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
    1684:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    1686:	2200      	movs	r2, #0
    1688:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
    168a:	2000      	movs	r0, #0
    168c:	e7c1      	b.n	1612 <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    168e:	2300      	movs	r3, #0
    1690:	003a      	movs	r2, r7
    1692:	9901      	ldr	r1, [sp, #4]
    1694:	6820      	ldr	r0, [r4, #0]
    1696:	4d08      	ldr	r5, [pc, #32]	; (16b8 <at25dfx_chip_read_buffer+0xf4>)
    1698:	47a8      	blx	r5
    169a:	e7e4      	b.n	1666 <at25dfx_chip_read_buffer+0xa2>
    169c:	4b03      	ldr	r3, [pc, #12]	; (16ac <at25dfx_chip_read_buffer+0xe8>)
    169e:	4798      	blx	r3
		return status;
    16a0:	2005      	movs	r0, #5
    16a2:	e7b6      	b.n	1612 <at25dfx_chip_read_buffer+0x4e>
    16a4:	00010a80 	.word	0x00010a80
    16a8:	00009c49 	.word	0x00009c49
    16ac:	00009c89 	.word	0x00009c89
    16b0:	41004400 	.word	0x41004400
    16b4:	00009021 	.word	0x00009021
    16b8:	00008e11 	.word	0x00008e11

000016bc <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    16bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16be:	46de      	mov	lr, fp
    16c0:	4657      	mov	r7, sl
    16c2:	464e      	mov	r6, r9
    16c4:	4645      	mov	r5, r8
    16c6:	b5e0      	push	{r5, r6, r7, lr}
    16c8:	b085      	sub	sp, #20
    16ca:	0005      	movs	r5, r0
    16cc:	000e      	movs	r6, r1
    16ce:	9201      	str	r2, [sp, #4]
    16d0:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    16d2:	185a      	adds	r2, r3, r1
	switch (type) {
    16d4:	7903      	ldrb	r3, [r0, #4]
    16d6:	2b09      	cmp	r3, #9
    16d8:	d815      	bhi.n	1706 <at25dfx_chip_write_buffer+0x4a>
    16da:	009b      	lsls	r3, r3, #2
    16dc:	49ae      	ldr	r1, [pc, #696]	; (1998 <at25dfx_chip_write_buffer+0x2dc>)
    16de:	58cb      	ldr	r3, [r1, r3]
    16e0:	469f      	mov	pc, r3
		return 256 * 1024UL;
    16e2:	2380      	movs	r3, #128	; 0x80
    16e4:	02db      	lsls	r3, r3, #11
    16e6:	e012      	b.n	170e <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    16e8:	2380      	movs	r3, #128	; 0x80
    16ea:	031b      	lsls	r3, r3, #12
    16ec:	e00f      	b.n	170e <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    16ee:	2380      	movs	r3, #128	; 0x80
    16f0:	035b      	lsls	r3, r3, #13
    16f2:	e00c      	b.n	170e <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    16f4:	2380      	movs	r3, #128	; 0x80
    16f6:	039b      	lsls	r3, r3, #14
    16f8:	e009      	b.n	170e <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    16fa:	2380      	movs	r3, #128	; 0x80
    16fc:	03db      	lsls	r3, r3, #15
    16fe:	e006      	b.n	170e <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    1700:	2380      	movs	r3, #128	; 0x80
    1702:	041b      	lsls	r3, r3, #16
    1704:	e003      	b.n	170e <at25dfx_chip_write_buffer+0x52>
		return 0;
    1706:	2300      	movs	r3, #0
    1708:	e001      	b.n	170e <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    170a:	2380      	movs	r3, #128	; 0x80
    170c:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    170e:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1710:	429a      	cmp	r2, r3
    1712:	d906      	bls.n	1722 <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    1714:	b005      	add	sp, #20
    1716:	bc3c      	pop	{r2, r3, r4, r5}
    1718:	4690      	mov	r8, r2
    171a:	4699      	mov	r9, r3
    171c:	46a2      	mov	sl, r4
    171e:	46ab      	mov	fp, r5
    1720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    1722:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
    1724:	4b9d      	ldr	r3, [pc, #628]	; (199c <at25dfx_chip_write_buffer+0x2e0>)
    1726:	4798      	blx	r3
	if (module->locked) {
    1728:	7923      	ldrb	r3, [r4, #4]
    172a:	2b00      	cmp	r3, #0
    172c:	d000      	beq.n	1730 <at25dfx_chip_write_buffer+0x74>
    172e:	e12e      	b.n	198e <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
    1730:	3301      	adds	r3, #1
    1732:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
    1734:	4b9a      	ldr	r3, [pc, #616]	; (19a0 <at25dfx_chip_write_buffer+0x2e4>)
    1736:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    1738:	2306      	movs	r3, #6
    173a:	aa02      	add	r2, sp, #8
    173c:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    173e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1740:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1742:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1744:	2900      	cmp	r1, #0
    1746:	d104      	bne.n	1752 <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    1748:	0953      	lsrs	r3, r2, #5
    174a:	01db      	lsls	r3, r3, #7
    174c:	4995      	ldr	r1, [pc, #596]	; (19a4 <at25dfx_chip_write_buffer+0x2e8>)
    174e:	468c      	mov	ip, r1
    1750:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1752:	211f      	movs	r1, #31
    1754:	4011      	ands	r1, r2
    1756:	2201      	movs	r2, #1
    1758:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    175a:	615a      	str	r2, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    175c:	2201      	movs	r2, #1
    175e:	a902      	add	r1, sp, #8
    1760:	6828      	ldr	r0, [r5, #0]
    1762:	4b91      	ldr	r3, [pc, #580]	; (19a8 <at25dfx_chip_write_buffer+0x2ec>)
    1764:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    1766:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1768:	09d1      	lsrs	r1, r2, #7
		return NULL;
    176a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    176c:	2900      	cmp	r1, #0
    176e:	d104      	bne.n	177a <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1770:	0953      	lsrs	r3, r2, #5
    1772:	01db      	lsls	r3, r3, #7
    1774:	498b      	ldr	r1, [pc, #556]	; (19a4 <at25dfx_chip_write_buffer+0x2e8>)
    1776:	468c      	mov	ip, r1
    1778:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    177a:	211f      	movs	r1, #31
    177c:	4011      	ands	r1, r2
    177e:	2201      	movs	r2, #1
    1780:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1782:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    1784:	22ff      	movs	r2, #255	; 0xff
    1786:	4032      	ands	r2, r6
    1788:	2380      	movs	r3, #128	; 0x80
    178a:	005b      	lsls	r3, r3, #1
    178c:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    178e:	1c1a      	adds	r2, r3, #0
    1790:	b29b      	uxth	r3, r3
    1792:	42bb      	cmp	r3, r7
    1794:	d900      	bls.n	1798 <at25dfx_chip_write_buffer+0xdc>
    1796:	1c3a      	adds	r2, r7, #0
    1798:	b293      	uxth	r3, r2
    179a:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    179c:	2302      	movs	r3, #2
    179e:	aa02      	add	r2, sp, #8
    17a0:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    17a2:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    17a4:	0a33      	lsrs	r3, r6, #8
    17a6:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    17a8:	0c33      	lsrs	r3, r6, #16
    17aa:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    17ac:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    17ae:	09d1      	lsrs	r1, r2, #7
		return NULL;
    17b0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17b2:	2900      	cmp	r1, #0
    17b4:	d104      	bne.n	17c0 <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
    17b6:	0953      	lsrs	r3, r2, #5
    17b8:	01db      	lsls	r3, r3, #7
    17ba:	497a      	ldr	r1, [pc, #488]	; (19a4 <at25dfx_chip_write_buffer+0x2e8>)
    17bc:	468c      	mov	ip, r1
    17be:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17c0:	211f      	movs	r1, #31
    17c2:	4011      	ands	r1, r2
    17c4:	2201      	movs	r2, #1
    17c6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    17c8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    17ca:	2204      	movs	r2, #4
    17cc:	a902      	add	r1, sp, #8
    17ce:	6828      	ldr	r0, [r5, #0]
    17d0:	4b75      	ldr	r3, [pc, #468]	; (19a8 <at25dfx_chip_write_buffer+0x2ec>)
    17d2:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    17d4:	4653      	mov	r3, sl
    17d6:	2b00      	cmp	r3, #0
    17d8:	d145      	bne.n	1866 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    17da:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    17dc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    17de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17e0:	2900      	cmp	r1, #0
    17e2:	d104      	bne.n	17ee <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    17e4:	0953      	lsrs	r3, r2, #5
    17e6:	01db      	lsls	r3, r3, #7
    17e8:	496e      	ldr	r1, [pc, #440]	; (19a4 <at25dfx_chip_write_buffer+0x2e8>)
    17ea:	468c      	mov	ip, r1
    17ec:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17ee:	211f      	movs	r1, #31
    17f0:	4011      	ands	r1, r2
    17f2:	2201      	movs	r2, #1
    17f4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    17f6:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    17f8:	682b      	ldr	r3, [r5, #0]
    17fa:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    17fc:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17fe:	7e0b      	ldrb	r3, [r1, #24]
    1800:	4213      	tst	r3, r2
    1802:	d0fc      	beq.n	17fe <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
    1804:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1806:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1808:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    180a:	2900      	cmp	r1, #0
    180c:	d104      	bne.n	1818 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    180e:	0953      	lsrs	r3, r2, #5
    1810:	01db      	lsls	r3, r3, #7
    1812:	4964      	ldr	r1, [pc, #400]	; (19a4 <at25dfx_chip_write_buffer+0x2e8>)
    1814:	468c      	mov	ip, r1
    1816:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1818:	211f      	movs	r1, #31
    181a:	4011      	ands	r1, r2
    181c:	2201      	movs	r2, #1
    181e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1820:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1822:	682b      	ldr	r3, [r5, #0]
    1824:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1826:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1828:	07d2      	lsls	r2, r2, #31
    182a:	d501      	bpl.n	1830 <at25dfx_chip_write_buffer+0x174>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    182c:	2205      	movs	r2, #5
    182e:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    1830:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1832:	6802      	ldr	r2, [r0, #0]
    1834:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1836:	7e13      	ldrb	r3, [r2, #24]
    1838:	420b      	tst	r3, r1
    183a:	d0fc      	beq.n	1836 <at25dfx_chip_write_buffer+0x17a>
    183c:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    183e:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1840:	075b      	lsls	r3, r3, #29
    1842:	d509      	bpl.n	1858 <at25dfx_chip_write_buffer+0x19c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1844:	8b53      	ldrh	r3, [r2, #26]
    1846:	075b      	lsls	r3, r3, #29
    1848:	d501      	bpl.n	184e <at25dfx_chip_write_buffer+0x192>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    184a:	2304      	movs	r3, #4
    184c:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    184e:	7983      	ldrb	r3, [r0, #6]
    1850:	2b01      	cmp	r3, #1
    1852:	d00e      	beq.n	1872 <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1854:	6a94      	ldr	r4, [r2, #40]	; 0x28
    1856:	b2e4      	uxtb	r4, r4

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    1858:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    185a:	2300      	movs	r3, #0
    185c:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    185e:	2004      	movs	r0, #4
    1860:	46b4      	mov	ip, r6
    1862:	002e      	movs	r6, r5
    1864:	e010      	b.n	1888 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    1866:	4652      	mov	r2, sl
    1868:	9901      	ldr	r1, [sp, #4]
    186a:	6828      	ldr	r0, [r5, #0]
    186c:	4b4e      	ldr	r3, [pc, #312]	; (19a8 <at25dfx_chip_write_buffer+0x2ec>)
    186e:	4798      	blx	r3
    1870:	e7b3      	b.n	17da <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1872:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1874:	05db      	lsls	r3, r3, #23
    1876:	0ddc      	lsrs	r4, r3, #23
    1878:	e7ee      	b.n	1858 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    187a:	79ab      	ldrb	r3, [r5, #6]
    187c:	2b01      	cmp	r3, #1
    187e:	d01a      	beq.n	18b6 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1880:	6a94      	ldr	r4, [r2, #40]	; 0x28
    1882:	b2e4      	uxtb	r4, r4
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    1884:	4221      	tst	r1, r4
    1886:	d01a      	beq.n	18be <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1888:	6833      	ldr	r3, [r6, #0]
    188a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    188c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    188e:	420b      	tst	r3, r1
    1890:	d0fc      	beq.n	188c <at25dfx_chip_write_buffer+0x1d0>
    1892:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1894:	420b      	tst	r3, r1
    1896:	d001      	beq.n	189c <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1898:	4643      	mov	r3, r8
    189a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    189c:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    189e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    18a0:	7e13      	ldrb	r3, [r2, #24]
    18a2:	4203      	tst	r3, r0
    18a4:	d0fc      	beq.n	18a0 <at25dfx_chip_write_buffer+0x1e4>
    18a6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    18a8:	4203      	tst	r3, r0
    18aa:	d0eb      	beq.n	1884 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    18ac:	8b53      	ldrh	r3, [r2, #26]
    18ae:	4203      	tst	r3, r0
    18b0:	d0e3      	beq.n	187a <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    18b2:	8350      	strh	r0, [r2, #26]
    18b4:	e7e1      	b.n	187a <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    18b6:	6a94      	ldr	r4, [r2, #40]	; 0x28
    18b8:	05e4      	lsls	r4, r4, #23
    18ba:	0de4      	lsrs	r4, r4, #23
    18bc:	e7e2      	b.n	1884 <at25dfx_chip_write_buffer+0x1c8>
    18be:	0035      	movs	r5, r6
    18c0:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
    18c2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    18c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    18c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    18c8:	2900      	cmp	r1, #0
    18ca:	d104      	bne.n	18d6 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
    18cc:	0953      	lsrs	r3, r2, #5
    18ce:	01db      	lsls	r3, r3, #7
    18d0:	4934      	ldr	r1, [pc, #208]	; (19a4 <at25dfx_chip_write_buffer+0x2e8>)
    18d2:	468c      	mov	ip, r1
    18d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    18d6:	211f      	movs	r1, #31
    18d8:	4011      	ands	r1, r2
    18da:	2201      	movs	r2, #1
    18dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    18de:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    18e0:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
    18e2:	06a3      	lsls	r3, r4, #26
    18e4:	d44f      	bmi.n	1986 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
    18e6:	4653      	mov	r3, sl
    18e8:	1aff      	subs	r7, r7, r3
    18ea:	b2bb      	uxth	r3, r7
    18ec:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
    18ee:	9a01      	ldr	r2, [sp, #4]
    18f0:	4691      	mov	r9, r2
	}
	return STATUS_OK;
    18f2:	2000      	movs	r0, #0
    18f4:	2b00      	cmp	r3, #0
    18f6:	d046      	beq.n	1986 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    18f8:	231f      	movs	r3, #31
    18fa:	469b      	mov	fp, r3
    18fc:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    18fe:	4b2a      	ldr	r3, [pc, #168]	; (19a8 <at25dfx_chip_write_buffer+0x2ec>)
    1900:	4698      	mov	r8, r3
    1902:	4653      	mov	r3, sl
    1904:	9301      	str	r3, [sp, #4]
    1906:	468a      	mov	sl, r1
    1908:	e058      	b.n	19bc <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    190a:	001a      	movs	r2, r3
    190c:	4649      	mov	r1, r9
    190e:	6828      	ldr	r0, [r5, #0]
    1910:	4b25      	ldr	r3, [pc, #148]	; (19a8 <at25dfx_chip_write_buffer+0x2ec>)
    1912:	4798      	blx	r3
    1914:	e0a4      	b.n	1a60 <at25dfx_chip_write_buffer+0x3a4>
    1916:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1918:	05c0      	lsls	r0, r0, #23
    191a:	0dc0      	lsrs	r0, r0, #23
    191c:	e0e1      	b.n	1ae2 <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    191e:	79bb      	ldrb	r3, [r7, #6]
    1920:	2b01      	cmp	r3, #1
    1922:	d01a      	beq.n	195a <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1924:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1926:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
    1928:	4204      	tst	r4, r0
    192a:	d01a      	beq.n	1962 <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    192c:	682b      	ldr	r3, [r5, #0]
    192e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1930:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    1932:	4223      	tst	r3, r4
    1934:	d0fc      	beq.n	1930 <at25dfx_chip_write_buffer+0x274>
    1936:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1938:	4223      	tst	r3, r4
    193a:	d001      	beq.n	1940 <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    193c:	2300      	movs	r3, #0
    193e:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    1940:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1942:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1944:	7e13      	ldrb	r3, [r2, #24]
    1946:	420b      	tst	r3, r1
    1948:	d0fc      	beq.n	1944 <at25dfx_chip_write_buffer+0x288>
    194a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    194c:	420b      	tst	r3, r1
    194e:	d0eb      	beq.n	1928 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1950:	8b53      	ldrh	r3, [r2, #26]
    1952:	420b      	tst	r3, r1
    1954:	d0e3      	beq.n	191e <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1956:	8351      	strh	r1, [r2, #26]
    1958:	e7e1      	b.n	191e <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    195a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    195c:	05c0      	lsls	r0, r0, #23
    195e:	0dc0      	lsrs	r0, r0, #23
    1960:	e7e2      	b.n	1928 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
    1962:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1964:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1966:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1968:	2900      	cmp	r1, #0
    196a:	d104      	bne.n	1976 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
    196c:	095a      	lsrs	r2, r3, #5
    196e:	01d2      	lsls	r2, r2, #7
    1970:	490c      	ldr	r1, [pc, #48]	; (19a4 <at25dfx_chip_write_buffer+0x2e8>)
    1972:	468c      	mov	ip, r1
    1974:	4462      	add	r2, ip
    1976:	4659      	mov	r1, fp
    1978:	400b      	ands	r3, r1
    197a:	0021      	movs	r1, r4
    197c:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    197e:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    1980:	0683      	lsls	r3, r0, #26
    1982:	d513      	bpl.n	19ac <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
    1984:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    1986:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
    1988:	2200      	movs	r2, #0
    198a:	711a      	strb	r2, [r3, #4]
	return status;
    198c:	e6c2      	b.n	1714 <at25dfx_chip_write_buffer+0x58>
    198e:	4b04      	ldr	r3, [pc, #16]	; (19a0 <at25dfx_chip_write_buffer+0x2e4>)
    1990:	4798      	blx	r3
		return status;
    1992:	2005      	movs	r0, #5
    1994:	e6be      	b.n	1714 <at25dfx_chip_write_buffer+0x58>
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	00010aac 	.word	0x00010aac
    199c:	00009c49 	.word	0x00009c49
    19a0:	00009c89 	.word	0x00009c89
    19a4:	41004400 	.word	0x41004400
    19a8:	00009021 	.word	0x00009021
		length -= cmd.length;
    19ac:	4653      	mov	r3, sl
    19ae:	9a01      	ldr	r2, [sp, #4]
    19b0:	1a9b      	subs	r3, r3, r2
    19b2:	b29b      	uxth	r3, r3
    19b4:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
    19b6:	2b00      	cmp	r3, #0
    19b8:	d100      	bne.n	19bc <at25dfx_chip_write_buffer+0x300>
    19ba:	e094      	b.n	1ae6 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
    19bc:	ab02      	add	r3, sp, #8
    19be:	2206      	movs	r2, #6
    19c0:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    19c2:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    19c4:	09d9      	lsrs	r1, r3, #7
		return NULL;
    19c6:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    19c8:	2900      	cmp	r1, #0
    19ca:	d104      	bne.n	19d6 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    19cc:	095a      	lsrs	r2, r3, #5
    19ce:	01d2      	lsls	r2, r2, #7
    19d0:	4946      	ldr	r1, [pc, #280]	; (1aec <at25dfx_chip_write_buffer+0x430>)
    19d2:	468c      	mov	ip, r1
    19d4:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    19d6:	4659      	mov	r1, fp
    19d8:	400b      	ands	r3, r1
    19da:	0021      	movs	r1, r4
    19dc:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    19de:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    19e0:	0022      	movs	r2, r4
    19e2:	a902      	add	r1, sp, #8
    19e4:	6828      	ldr	r0, [r5, #0]
    19e6:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
    19e8:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    19ea:	09d9      	lsrs	r1, r3, #7
		return NULL;
    19ec:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    19ee:	2900      	cmp	r1, #0
    19f0:	d104      	bne.n	19fc <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
    19f2:	095a      	lsrs	r2, r3, #5
    19f4:	01d2      	lsls	r2, r2, #7
    19f6:	493d      	ldr	r1, [pc, #244]	; (1aec <at25dfx_chip_write_buffer+0x430>)
    19f8:	468c      	mov	ip, r1
    19fa:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    19fc:	4659      	mov	r1, fp
    19fe:	400b      	ands	r3, r1
    1a00:	0021      	movs	r1, r4
    1a02:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1a04:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    1a06:	9a01      	ldr	r2, [sp, #4]
    1a08:	4694      	mov	ip, r2
    1a0a:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
    1a0c:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    1a0e:	4657      	mov	r7, sl
    1a10:	2380      	movs	r3, #128	; 0x80
    1a12:	005b      	lsls	r3, r3, #1
    1a14:	459a      	cmp	sl, r3
    1a16:	d901      	bls.n	1a1c <at25dfx_chip_write_buffer+0x360>
    1a18:	4b35      	ldr	r3, [pc, #212]	; (1af0 <at25dfx_chip_write_buffer+0x434>)
    1a1a:	881f      	ldrh	r7, [r3, #0]
    1a1c:	b2bb      	uxth	r3, r7
    1a1e:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    1a20:	2302      	movs	r3, #2
    1a22:	aa02      	add	r2, sp, #8
    1a24:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    1a26:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1a28:	0a33      	lsrs	r3, r6, #8
    1a2a:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1a2c:	0c33      	lsrs	r3, r6, #16
    1a2e:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    1a30:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1a32:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1a34:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1a36:	2900      	cmp	r1, #0
    1a38:	d104      	bne.n	1a44 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
    1a3a:	095a      	lsrs	r2, r3, #5
    1a3c:	01d2      	lsls	r2, r2, #7
    1a3e:	492b      	ldr	r1, [pc, #172]	; (1aec <at25dfx_chip_write_buffer+0x430>)
    1a40:	468c      	mov	ip, r1
    1a42:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a44:	4659      	mov	r1, fp
    1a46:	400b      	ands	r3, r1
    1a48:	0021      	movs	r1, r4
    1a4a:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    1a4c:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1a4e:	2204      	movs	r2, #4
    1a50:	a902      	add	r1, sp, #8
    1a52:	6828      	ldr	r0, [r5, #0]
    1a54:	4b27      	ldr	r3, [pc, #156]	; (1af4 <at25dfx_chip_write_buffer+0x438>)
    1a56:	4798      	blx	r3
	if (cmd.length) {
    1a58:	9b01      	ldr	r3, [sp, #4]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d000      	beq.n	1a60 <at25dfx_chip_write_buffer+0x3a4>
    1a5e:	e754      	b.n	190a <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
    1a60:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1a62:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1a64:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1a66:	2900      	cmp	r1, #0
    1a68:	d104      	bne.n	1a74 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
    1a6a:	095a      	lsrs	r2, r3, #5
    1a6c:	01d2      	lsls	r2, r2, #7
    1a6e:	491f      	ldr	r1, [pc, #124]	; (1aec <at25dfx_chip_write_buffer+0x430>)
    1a70:	468c      	mov	ip, r1
    1a72:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a74:	4659      	mov	r1, fp
    1a76:	400b      	ands	r3, r1
    1a78:	0021      	movs	r1, r4
    1a7a:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1a7c:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a7e:	682b      	ldr	r3, [r5, #0]
    1a80:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1a82:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    1a84:	4223      	tst	r3, r4
    1a86:	d0fc      	beq.n	1a82 <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
    1a88:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1a8a:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1a8c:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1a8e:	2900      	cmp	r1, #0
    1a90:	d104      	bne.n	1a9c <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
    1a92:	095a      	lsrs	r2, r3, #5
    1a94:	01d2      	lsls	r2, r2, #7
    1a96:	4915      	ldr	r1, [pc, #84]	; (1aec <at25dfx_chip_write_buffer+0x430>)
    1a98:	468c      	mov	ip, r1
    1a9a:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a9c:	4659      	mov	r1, fp
    1a9e:	400b      	ands	r3, r1
    1aa0:	0021      	movs	r1, r4
    1aa2:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    1aa4:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1aa6:	682b      	ldr	r3, [r5, #0]
    1aa8:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1aaa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1aac:	4222      	tst	r2, r4
    1aae:	d001      	beq.n	1ab4 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1ab0:	2205      	movs	r2, #5
    1ab2:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    1ab4:	682b      	ldr	r3, [r5, #0]
    1ab6:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1ab8:	681a      	ldr	r2, [r3, #0]
    1aba:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1abc:	7e13      	ldrb	r3, [r2, #24]
    1abe:	420b      	tst	r3, r1
    1ac0:	d0fc      	beq.n	1abc <at25dfx_chip_write_buffer+0x400>
    1ac2:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    1ac4:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    1ac6:	075b      	lsls	r3, r3, #29
    1ac8:	d50b      	bpl.n	1ae2 <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1aca:	8b53      	ldrh	r3, [r2, #26]
    1acc:	075b      	lsls	r3, r3, #29
    1ace:	d501      	bpl.n	1ad4 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1ad0:	2304      	movs	r3, #4
    1ad2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1ad4:	4663      	mov	r3, ip
    1ad6:	799b      	ldrb	r3, [r3, #6]
    1ad8:	2b01      	cmp	r3, #1
    1ada:	d100      	bne.n	1ade <at25dfx_chip_write_buffer+0x422>
    1adc:	e71b      	b.n	1916 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1ade:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1ae0:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
    1ae2:	2104      	movs	r1, #4
    1ae4:	e722      	b.n	192c <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
    1ae6:	2000      	movs	r0, #0
    1ae8:	e74d      	b.n	1986 <at25dfx_chip_write_buffer+0x2ca>
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	41004400 	.word	0x41004400
    1af0:	00010aa8 	.word	0x00010aa8
    1af4:	00009021 	.word	0x00009021

00001af8 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    1af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afa:	b083      	sub	sp, #12
    1afc:	0004      	movs	r4, r0
    1afe:	000e      	movs	r6, r1
    1b00:	0015      	movs	r5, r2
	switch (type) {
    1b02:	7903      	ldrb	r3, [r0, #4]
    1b04:	2b09      	cmp	r3, #9
    1b06:	d900      	bls.n	1b0a <at25dfx_chip_erase_block+0x12>
    1b08:	e0f2      	b.n	1cf0 <at25dfx_chip_erase_block+0x1f8>
    1b0a:	009b      	lsls	r3, r3, #2
    1b0c:	4a7b      	ldr	r2, [pc, #492]	; (1cfc <at25dfx_chip_erase_block+0x204>)
    1b0e:	58d3      	ldr	r3, [r2, r3]
    1b10:	469f      	mov	pc, r3
		return 256 * 1024UL;
    1b12:	2380      	movs	r3, #128	; 0x80
    1b14:	02db      	lsls	r3, r3, #11
    1b16:	e010      	b.n	1b3a <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
    1b18:	2380      	movs	r3, #128	; 0x80
    1b1a:	031b      	lsls	r3, r3, #12
    1b1c:	e00d      	b.n	1b3a <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
    1b1e:	2380      	movs	r3, #128	; 0x80
    1b20:	035b      	lsls	r3, r3, #13
    1b22:	e00a      	b.n	1b3a <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
    1b24:	2380      	movs	r3, #128	; 0x80
    1b26:	039b      	lsls	r3, r3, #14
    1b28:	e007      	b.n	1b3a <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
    1b2a:	2380      	movs	r3, #128	; 0x80
    1b2c:	03db      	lsls	r3, r3, #15
    1b2e:	e004      	b.n	1b3a <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
    1b30:	2380      	movs	r3, #128	; 0x80
    1b32:	041b      	lsls	r3, r3, #16
    1b34:	e001      	b.n	1b3a <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
    1b36:	2380      	movs	r3, #128	; 0x80
    1b38:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    1b3a:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    1b3c:	42b3      	cmp	r3, r6
    1b3e:	d801      	bhi.n	1b44 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    1b40:	b003      	add	sp, #12
    1b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    1b44:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    1b46:	4b6e      	ldr	r3, [pc, #440]	; (1d00 <at25dfx_chip_erase_block+0x208>)
    1b48:	4798      	blx	r3
	if (module->locked) {
    1b4a:	793b      	ldrb	r3, [r7, #4]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d000      	beq.n	1b52 <at25dfx_chip_erase_block+0x5a>
    1b50:	e0d0      	b.n	1cf4 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
    1b52:	3301      	adds	r3, #1
    1b54:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    1b56:	4b6b      	ldr	r3, [pc, #428]	; (1d04 <at25dfx_chip_erase_block+0x20c>)
    1b58:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    1b5a:	2306      	movs	r3, #6
    1b5c:	466a      	mov	r2, sp
    1b5e:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    1b60:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1b62:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1b64:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b66:	2900      	cmp	r1, #0
    1b68:	d104      	bne.n	1b74 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
    1b6a:	0953      	lsrs	r3, r2, #5
    1b6c:	01db      	lsls	r3, r3, #7
    1b6e:	4966      	ldr	r1, [pc, #408]	; (1d08 <at25dfx_chip_erase_block+0x210>)
    1b70:	468c      	mov	ip, r1
    1b72:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b74:	211f      	movs	r1, #31
    1b76:	4011      	ands	r1, r2
    1b78:	2201      	movs	r2, #1
    1b7a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1b7c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1b7e:	2201      	movs	r2, #1
    1b80:	4669      	mov	r1, sp
    1b82:	6820      	ldr	r0, [r4, #0]
    1b84:	4b61      	ldr	r3, [pc, #388]	; (1d0c <at25dfx_chip_erase_block+0x214>)
    1b86:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    1b88:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1b8a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1b8c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b8e:	2900      	cmp	r1, #0
    1b90:	d104      	bne.n	1b9c <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
    1b92:	0953      	lsrs	r3, r2, #5
    1b94:	01db      	lsls	r3, r3, #7
    1b96:	495c      	ldr	r1, [pc, #368]	; (1d08 <at25dfx_chip_erase_block+0x210>)
    1b98:	468c      	mov	ip, r1
    1b9a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b9c:	211f      	movs	r1, #31
    1b9e:	4011      	ands	r1, r2
    1ba0:	2201      	movs	r2, #1
    1ba2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1ba4:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    1ba6:	2d01      	cmp	r5, #1
    1ba8:	d006      	beq.n	1bb8 <at25dfx_chip_erase_block+0xc0>
    1baa:	2d00      	cmp	r5, #0
    1bac:	d063      	beq.n	1c76 <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    1bae:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    1bb0:	2d02      	cmp	r5, #2
    1bb2:	d002      	beq.n	1bba <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    1bb4:	2300      	movs	r3, #0
    1bb6:	e000      	b.n	1bba <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    1bb8:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    1bba:	466a      	mov	r2, sp
    1bbc:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    1bbe:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1bc0:	0a33      	lsrs	r3, r6, #8
    1bc2:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1bc4:	0c36      	lsrs	r6, r6, #16
    1bc6:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    1bc8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1bca:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1bcc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1bce:	2900      	cmp	r1, #0
    1bd0:	d104      	bne.n	1bdc <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
    1bd2:	0953      	lsrs	r3, r2, #5
    1bd4:	01db      	lsls	r3, r3, #7
    1bd6:	494c      	ldr	r1, [pc, #304]	; (1d08 <at25dfx_chip_erase_block+0x210>)
    1bd8:	468c      	mov	ip, r1
    1bda:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1bdc:	211f      	movs	r1, #31
    1bde:	4011      	ands	r1, r2
    1be0:	2201      	movs	r2, #1
    1be2:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1be4:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1be6:	2204      	movs	r2, #4
    1be8:	4669      	mov	r1, sp
    1bea:	6820      	ldr	r0, [r4, #0]
    1bec:	4b47      	ldr	r3, [pc, #284]	; (1d0c <at25dfx_chip_erase_block+0x214>)
    1bee:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    1bf0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1bf2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1bf4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1bf6:	2900      	cmp	r1, #0
    1bf8:	d104      	bne.n	1c04 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
    1bfa:	0953      	lsrs	r3, r2, #5
    1bfc:	01db      	lsls	r3, r3, #7
    1bfe:	4942      	ldr	r1, [pc, #264]	; (1d08 <at25dfx_chip_erase_block+0x210>)
    1c00:	468c      	mov	ip, r1
    1c02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c04:	211f      	movs	r1, #31
    1c06:	4011      	ands	r1, r2
    1c08:	2201      	movs	r2, #1
    1c0a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1c0c:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c0e:	6823      	ldr	r3, [r4, #0]
    1c10:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
    1c12:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c14:	7e0b      	ldrb	r3, [r1, #24]
    1c16:	4213      	tst	r3, r2
    1c18:	d0fc      	beq.n	1c14 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
    1c1a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1c1c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1c1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c20:	2900      	cmp	r1, #0
    1c22:	d104      	bne.n	1c2e <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
    1c24:	0953      	lsrs	r3, r2, #5
    1c26:	01db      	lsls	r3, r3, #7
    1c28:	4937      	ldr	r1, [pc, #220]	; (1d08 <at25dfx_chip_erase_block+0x210>)
    1c2a:	468c      	mov	ip, r1
    1c2c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c2e:	211f      	movs	r1, #31
    1c30:	4011      	ands	r1, r2
    1c32:	2201      	movs	r2, #1
    1c34:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1c36:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c38:	6823      	ldr	r3, [r4, #0]
    1c3a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c3c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1c3e:	07d2      	lsls	r2, r2, #31
    1c40:	d501      	bpl.n	1c46 <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1c42:	2205      	movs	r2, #5
    1c44:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    1c46:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c48:	6802      	ldr	r2, [r0, #0]
    1c4a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1c4c:	7e13      	ldrb	r3, [r2, #24]
    1c4e:	420b      	tst	r3, r1
    1c50:	d0fc      	beq.n	1c4c <at25dfx_chip_erase_block+0x154>
    1c52:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    1c54:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    1c56:	075b      	lsls	r3, r3, #29
    1c58:	d509      	bpl.n	1c6e <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1c5a:	8b53      	ldrh	r3, [r2, #26]
    1c5c:	075b      	lsls	r3, r3, #29
    1c5e:	d501      	bpl.n	1c64 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1c60:	2304      	movs	r3, #4
    1c62:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c64:	7983      	ldrb	r3, [r0, #6]
    1c66:	2b01      	cmp	r3, #1
    1c68:	d007      	beq.n	1c7a <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1c6a:	6a95      	ldr	r5, [r2, #40]	; 0x28
    1c6c:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
    1c6e:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1c70:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
    1c72:	2004      	movs	r0, #4
    1c74:	e00c      	b.n	1c90 <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    1c76:	2320      	movs	r3, #32
    1c78:	e79f      	b.n	1bba <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1c7a:	6a95      	ldr	r5, [r2, #40]	; 0x28
    1c7c:	05ed      	lsls	r5, r5, #23
    1c7e:	0ded      	lsrs	r5, r5, #23
    1c80:	e7f5      	b.n	1c6e <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c82:	79b3      	ldrb	r3, [r6, #6]
    1c84:	2b01      	cmp	r3, #1
    1c86:	d019      	beq.n	1cbc <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1c88:	6a95      	ldr	r5, [r2, #40]	; 0x28
    1c8a:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
    1c8c:	4229      	tst	r1, r5
    1c8e:	d019      	beq.n	1cc4 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c90:	6823      	ldr	r3, [r4, #0]
    1c92:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c94:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    1c96:	420b      	tst	r3, r1
    1c98:	d0fc      	beq.n	1c94 <at25dfx_chip_erase_block+0x19c>
    1c9a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1c9c:	420b      	tst	r3, r1
    1c9e:	d000      	beq.n	1ca2 <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1ca0:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    1ca2:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1ca4:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1ca6:	7e13      	ldrb	r3, [r2, #24]
    1ca8:	4203      	tst	r3, r0
    1caa:	d0fc      	beq.n	1ca6 <at25dfx_chip_erase_block+0x1ae>
    1cac:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    1cae:	4203      	tst	r3, r0
    1cb0:	d0ec      	beq.n	1c8c <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1cb2:	8b53      	ldrh	r3, [r2, #26]
    1cb4:	4203      	tst	r3, r0
    1cb6:	d0e4      	beq.n	1c82 <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1cb8:	8350      	strh	r0, [r2, #26]
    1cba:	e7e2      	b.n	1c82 <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1cbc:	6a95      	ldr	r5, [r2, #40]	; 0x28
    1cbe:	05ed      	lsls	r5, r5, #23
    1cc0:	0ded      	lsrs	r5, r5, #23
    1cc2:	e7e3      	b.n	1c8c <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
    1cc4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1cc6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1cc8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1cca:	2900      	cmp	r1, #0
    1ccc:	d104      	bne.n	1cd8 <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    1cce:	0953      	lsrs	r3, r2, #5
    1cd0:	01db      	lsls	r3, r3, #7
    1cd2:	490d      	ldr	r1, [pc, #52]	; (1d08 <at25dfx_chip_erase_block+0x210>)
    1cd4:	468c      	mov	ip, r1
    1cd6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1cd8:	211f      	movs	r1, #31
    1cda:	4011      	ands	r1, r2
    1cdc:	2201      	movs	r2, #1
    1cde:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1ce0:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    1ce2:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
    1ce4:	0fc0      	lsrs	r0, r0, #31
    1ce6:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    1ce8:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    1cea:	2200      	movs	r2, #0
    1cec:	711a      	strb	r2, [r3, #4]
	return status;
    1cee:	e727      	b.n	1b40 <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
    1cf0:	2017      	movs	r0, #23
    1cf2:	e725      	b.n	1b40 <at25dfx_chip_erase_block+0x48>
    1cf4:	4b03      	ldr	r3, [pc, #12]	; (1d04 <at25dfx_chip_erase_block+0x20c>)
    1cf6:	4798      	blx	r3
		return status;
    1cf8:	2005      	movs	r0, #5
    1cfa:	e721      	b.n	1b40 <at25dfx_chip_erase_block+0x48>
    1cfc:	00010ad4 	.word	0x00010ad4
    1d00:	00009c49 	.word	0x00009c49
    1d04:	00009c89 	.word	0x00009c89
    1d08:	41004400 	.word	0x41004400
    1d0c:	00009021 	.word	0x00009021

00001d10 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    1d10:	b570      	push	{r4, r5, r6, lr}
    1d12:	b082      	sub	sp, #8
    1d14:	0004      	movs	r4, r0
    1d16:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    1d18:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
    1d1a:	4b35      	ldr	r3, [pc, #212]	; (1df0 <at25dfx_chip_set_global_sector_protect+0xe0>)
    1d1c:	4798      	blx	r3
	if (module->locked) {
    1d1e:	7933      	ldrb	r3, [r6, #4]
    1d20:	2b00      	cmp	r3, #0
    1d22:	d160      	bne.n	1de6 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
    1d24:	3301      	adds	r3, #1
    1d26:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
    1d28:	4b32      	ldr	r3, [pc, #200]	; (1df4 <at25dfx_chip_set_global_sector_protect+0xe4>)
    1d2a:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    1d2c:	2306      	movs	r3, #6
    1d2e:	466a      	mov	r2, sp
    1d30:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    1d32:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1d34:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1d36:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d38:	2900      	cmp	r1, #0
    1d3a:	d104      	bne.n	1d46 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    1d3c:	0953      	lsrs	r3, r2, #5
    1d3e:	01db      	lsls	r3, r3, #7
    1d40:	492d      	ldr	r1, [pc, #180]	; (1df8 <at25dfx_chip_set_global_sector_protect+0xe8>)
    1d42:	468c      	mov	ip, r1
    1d44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d46:	211f      	movs	r1, #31
    1d48:	4011      	ands	r1, r2
    1d4a:	2201      	movs	r2, #1
    1d4c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1d4e:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1d50:	2201      	movs	r2, #1
    1d52:	4669      	mov	r1, sp
    1d54:	6820      	ldr	r0, [r4, #0]
    1d56:	4b29      	ldr	r3, [pc, #164]	; (1dfc <at25dfx_chip_set_global_sector_protect+0xec>)
    1d58:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    1d5a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1d5c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1d5e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d60:	2900      	cmp	r1, #0
    1d62:	d104      	bne.n	1d6e <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1d64:	0953      	lsrs	r3, r2, #5
    1d66:	01db      	lsls	r3, r3, #7
    1d68:	4923      	ldr	r1, [pc, #140]	; (1df8 <at25dfx_chip_set_global_sector_protect+0xe8>)
    1d6a:	468c      	mov	ip, r1
    1d6c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d6e:	211f      	movs	r1, #31
    1d70:	4011      	ands	r1, r2
    1d72:	2201      	movs	r2, #1
    1d74:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1d76:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    1d78:	233c      	movs	r3, #60	; 0x3c
    1d7a:	1e6a      	subs	r2, r5, #1
    1d7c:	4195      	sbcs	r5, r2
    1d7e:	426d      	negs	r5, r5
    1d80:	402b      	ands	r3, r5
    1d82:	466a      	mov	r2, sp
    1d84:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
    1d86:	2301      	movs	r3, #1
    1d88:	466a      	mov	r2, sp
    1d8a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    1d8c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1d8e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1d90:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d92:	2900      	cmp	r1, #0
    1d94:	d104      	bne.n	1da0 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    1d96:	0953      	lsrs	r3, r2, #5
    1d98:	01db      	lsls	r3, r3, #7
    1d9a:	4917      	ldr	r1, [pc, #92]	; (1df8 <at25dfx_chip_set_global_sector_protect+0xe8>)
    1d9c:	468c      	mov	ip, r1
    1d9e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1da0:	211f      	movs	r1, #31
    1da2:	4011      	ands	r1, r2
    1da4:	2201      	movs	r2, #1
    1da6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1da8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1daa:	2201      	movs	r2, #1
    1dac:	4669      	mov	r1, sp
    1dae:	6820      	ldr	r0, [r4, #0]
    1db0:	4d12      	ldr	r5, [pc, #72]	; (1dfc <at25dfx_chip_set_global_sector_protect+0xec>)
    1db2:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    1db4:	2201      	movs	r2, #1
    1db6:	466b      	mov	r3, sp
    1db8:	1dd9      	adds	r1, r3, #7
    1dba:	6820      	ldr	r0, [r4, #0]
    1dbc:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    1dbe:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1dc0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1dc2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1dc4:	2900      	cmp	r1, #0
    1dc6:	d104      	bne.n	1dd2 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    1dc8:	0953      	lsrs	r3, r2, #5
    1dca:	01db      	lsls	r3, r3, #7
    1dcc:	490a      	ldr	r1, [pc, #40]	; (1df8 <at25dfx_chip_set_global_sector_protect+0xe8>)
    1dce:	468c      	mov	ip, r1
    1dd0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1dd2:	211f      	movs	r1, #31
    1dd4:	4011      	ands	r1, r2
    1dd6:	2201      	movs	r2, #1
    1dd8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1dda:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    1ddc:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    1dde:	2200      	movs	r2, #0
    1de0:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    1de2:	2000      	movs	r0, #0
    1de4:	e002      	b.n	1dec <at25dfx_chip_set_global_sector_protect+0xdc>
    1de6:	4b03      	ldr	r3, [pc, #12]	; (1df4 <at25dfx_chip_set_global_sector_protect+0xe4>)
    1de8:	4798      	blx	r3
		return status;
    1dea:	2005      	movs	r0, #5
}
    1dec:	b002      	add	sp, #8
    1dee:	bd70      	pop	{r4, r5, r6, pc}
    1df0:	00009c49 	.word	0x00009c49
    1df4:	00009c89 	.word	0x00009c89
    1df8:	41004400 	.word	0x41004400
    1dfc:	00009021 	.word	0x00009021

00001e00 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    1e00:	b530      	push	{r4, r5, lr}
    1e02:	b083      	sub	sp, #12
    1e04:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    1e06:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    1e08:	4b1c      	ldr	r3, [pc, #112]	; (1e7c <at25dfx_chip_sleep+0x7c>)
    1e0a:	4798      	blx	r3
	if (module->locked) {
    1e0c:	792b      	ldrb	r3, [r5, #4]
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d12e      	bne.n	1e70 <at25dfx_chip_sleep+0x70>
		module->locked = true;
    1e12:	3301      	adds	r3, #1
    1e14:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    1e16:	4b1a      	ldr	r3, [pc, #104]	; (1e80 <at25dfx_chip_sleep+0x80>)
    1e18:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    1e1a:	23b9      	movs	r3, #185	; 0xb9
    1e1c:	466a      	mov	r2, sp
    1e1e:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    1e20:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1e22:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1e24:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1e26:	2900      	cmp	r1, #0
    1e28:	d104      	bne.n	1e34 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    1e2a:	0953      	lsrs	r3, r2, #5
    1e2c:	01db      	lsls	r3, r3, #7
    1e2e:	4915      	ldr	r1, [pc, #84]	; (1e84 <at25dfx_chip_sleep+0x84>)
    1e30:	468c      	mov	ip, r1
    1e32:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1e34:	211f      	movs	r1, #31
    1e36:	4011      	ands	r1, r2
    1e38:	2201      	movs	r2, #1
    1e3a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1e3c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1e3e:	2201      	movs	r2, #1
    1e40:	4669      	mov	r1, sp
    1e42:	6820      	ldr	r0, [r4, #0]
    1e44:	4b10      	ldr	r3, [pc, #64]	; (1e88 <at25dfx_chip_sleep+0x88>)
    1e46:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    1e48:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1e4a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1e4c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1e4e:	2900      	cmp	r1, #0
    1e50:	d104      	bne.n	1e5c <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    1e52:	0953      	lsrs	r3, r2, #5
    1e54:	01db      	lsls	r3, r3, #7
    1e56:	490b      	ldr	r1, [pc, #44]	; (1e84 <at25dfx_chip_sleep+0x84>)
    1e58:	468c      	mov	ip, r1
    1e5a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1e5c:	211f      	movs	r1, #31
    1e5e:	4011      	ands	r1, r2
    1e60:	2201      	movs	r2, #1
    1e62:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1e64:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    1e66:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    1e68:	2200      	movs	r2, #0
    1e6a:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    1e6c:	2000      	movs	r0, #0
    1e6e:	e002      	b.n	1e76 <at25dfx_chip_sleep+0x76>
    1e70:	4b03      	ldr	r3, [pc, #12]	; (1e80 <at25dfx_chip_sleep+0x80>)
    1e72:	4798      	blx	r3
		return status;
    1e74:	2005      	movs	r0, #5
}
    1e76:	b003      	add	sp, #12
    1e78:	bd30      	pop	{r4, r5, pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	00009c49 	.word	0x00009c49
    1e80:	00009c89 	.word	0x00009c89
    1e84:	41004400 	.word	0x41004400
    1e88:	00009021 	.word	0x00009021

00001e8c <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    1e8c:	b530      	push	{r4, r5, lr}
    1e8e:	b083      	sub	sp, #12
    1e90:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    1e92:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    1e94:	4b1c      	ldr	r3, [pc, #112]	; (1f08 <at25dfx_chip_wake+0x7c>)
    1e96:	4798      	blx	r3
	if (module->locked) {
    1e98:	792b      	ldrb	r3, [r5, #4]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d12e      	bne.n	1efc <at25dfx_chip_wake+0x70>
		module->locked = true;
    1e9e:	3301      	adds	r3, #1
    1ea0:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    1ea2:	4b1a      	ldr	r3, [pc, #104]	; (1f0c <at25dfx_chip_wake+0x80>)
    1ea4:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    1ea6:	23ab      	movs	r3, #171	; 0xab
    1ea8:	466a      	mov	r2, sp
    1eaa:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    1eac:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1eae:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1eb0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1eb2:	2900      	cmp	r1, #0
    1eb4:	d104      	bne.n	1ec0 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    1eb6:	0953      	lsrs	r3, r2, #5
    1eb8:	01db      	lsls	r3, r3, #7
    1eba:	4915      	ldr	r1, [pc, #84]	; (1f10 <at25dfx_chip_wake+0x84>)
    1ebc:	468c      	mov	ip, r1
    1ebe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ec0:	211f      	movs	r1, #31
    1ec2:	4011      	ands	r1, r2
    1ec4:	2201      	movs	r2, #1
    1ec6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1ec8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1eca:	2201      	movs	r2, #1
    1ecc:	4669      	mov	r1, sp
    1ece:	6820      	ldr	r0, [r4, #0]
    1ed0:	4b10      	ldr	r3, [pc, #64]	; (1f14 <at25dfx_chip_wake+0x88>)
    1ed2:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    1ed4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1ed6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1ed8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1eda:	2900      	cmp	r1, #0
    1edc:	d104      	bne.n	1ee8 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    1ede:	0953      	lsrs	r3, r2, #5
    1ee0:	01db      	lsls	r3, r3, #7
    1ee2:	490b      	ldr	r1, [pc, #44]	; (1f10 <at25dfx_chip_wake+0x84>)
    1ee4:	468c      	mov	ip, r1
    1ee6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ee8:	211f      	movs	r1, #31
    1eea:	4011      	ands	r1, r2
    1eec:	2201      	movs	r2, #1
    1eee:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1ef0:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    1ef2:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    1ef4:	2200      	movs	r2, #0
    1ef6:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    1ef8:	2000      	movs	r0, #0
    1efa:	e002      	b.n	1f02 <at25dfx_chip_wake+0x76>
    1efc:	4b03      	ldr	r3, [pc, #12]	; (1f0c <at25dfx_chip_wake+0x80>)
    1efe:	4798      	blx	r3
		return status;
    1f00:	2005      	movs	r0, #5
    1f02:	b003      	add	sp, #12
    1f04:	bd30      	pop	{r4, r5, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	00009c49 	.word	0x00009c49
    1f0c:	00009c89 	.word	0x00009c89
    1f10:	41004400 	.word	0x41004400
    1f14:	00009021 	.word	0x00009021

00001f18 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    1f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f1a:	46c6      	mov	lr, r8
    1f1c:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    1f1e:	2303      	movs	r3, #3
    1f20:	0007      	movs	r7, r0
    1f22:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    1f24:	6813      	ldr	r3, [r2, #0]
    1f26:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    1f28:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    1f2a:	2903      	cmp	r1, #3
    1f2c:	d902      	bls.n	1f34 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    1f2e:	4244      	negs	r4, r0
    1f30:	2003      	movs	r0, #3
    1f32:	4004      	ands	r4, r0
	}

	if (temp_length) {
    1f34:	2c00      	cmp	r4, #0
    1f36:	d016      	beq.n	1f66 <crc32_recalculate+0x4e>
		length -= temp_length;
    1f38:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    1f3a:	1d3e      	adds	r6, r7, #4
    1f3c:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    1f3e:	00e0      	lsls	r0, r4, #3
    1f40:	4240      	negs	r0, r0
    1f42:	3020      	adds	r0, #32
    1f44:	40c5      	lsrs	r5, r0
	crc ^= data;
    1f46:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    1f48:	00e0      	lsls	r0, r4, #3
    1f4a:	d019      	beq.n	1f80 <crc32_recalculate+0x68>
		if (crc & 1) {
    1f4c:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    1f4e:	4d27      	ldr	r5, [pc, #156]	; (1fec <crc32_recalculate+0xd4>)
    1f50:	e003      	b.n	1f5a <crc32_recalculate+0x42>
			crc >>= 1;
    1f52:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    1f54:	3801      	subs	r0, #1
    1f56:	2800      	cmp	r0, #0
    1f58:	d004      	beq.n	1f64 <crc32_recalculate+0x4c>
		if (crc & 1) {
    1f5a:	421c      	tst	r4, r3
    1f5c:	d0f9      	beq.n	1f52 <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    1f5e:	085b      	lsrs	r3, r3, #1
    1f60:	406b      	eors	r3, r5
    1f62:	e7f7      	b.n	1f54 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    1f64:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    1f66:	2003      	movs	r0, #3
    1f68:	000c      	movs	r4, r1
    1f6a:	4384      	bics	r4, r0

	if (temp_length) {
    1f6c:	d01e      	beq.n	1fac <crc32_recalculate+0x94>
		length -= temp_length;
    1f6e:	1b08      	subs	r0, r1, r4
    1f70:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    1f72:	0889      	lsrs	r1, r1, #2
    1f74:	4688      	mov	r8, r1
    1f76:	003e      	movs	r6, r7
    1f78:	000d      	movs	r5, r1
		if (crc & 1) {
    1f7a:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    1f7c:	4c1b      	ldr	r4, [pc, #108]	; (1fec <crc32_recalculate+0xd4>)

		while (temp_length--) {
    1f7e:	e00b      	b.n	1f98 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    1f80:	0037      	movs	r7, r6
    1f82:	e7f0      	b.n	1f66 <crc32_recalculate+0x4e>
			crc >>= 1;
    1f84:	085b      	lsrs	r3, r3, #1
    1f86:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    1f88:	2900      	cmp	r1, #0
    1f8a:	d004      	beq.n	1f96 <crc32_recalculate+0x7e>
		if (crc & 1) {
    1f8c:	4218      	tst	r0, r3
    1f8e:	d0f9      	beq.n	1f84 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    1f90:	085b      	lsrs	r3, r3, #1
    1f92:	4063      	eors	r3, r4
    1f94:	e7f7      	b.n	1f86 <crc32_recalculate+0x6e>
    1f96:	3604      	adds	r6, #4
		while (temp_length--) {
    1f98:	3d01      	subs	r5, #1
    1f9a:	d303      	bcc.n	1fa4 <crc32_recalculate+0x8c>
	crc ^= data;
    1f9c:	6831      	ldr	r1, [r6, #0]
    1f9e:	404b      	eors	r3, r1
    1fa0:	2120      	movs	r1, #32
    1fa2:	e7f3      	b.n	1f8c <crc32_recalculate+0x74>
    1fa4:	4641      	mov	r1, r8
    1fa6:	0089      	lsls	r1, r1, #2
    1fa8:	187f      	adds	r7, r7, r1
		length -= temp_length;
    1faa:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    1fac:	2900      	cmp	r1, #0
    1fae:	d017      	beq.n	1fe0 <crc32_recalculate+0xc8>
		word = *word_ptr;
    1fb0:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    1fb2:	00c8      	lsls	r0, r1, #3
    1fb4:	4240      	negs	r0, r0
    1fb6:	3020      	adds	r0, #32
    1fb8:	2501      	movs	r5, #1
    1fba:	426d      	negs	r5, r5
    1fbc:	40c5      	lsrs	r5, r0
    1fbe:	0028      	movs	r0, r5
    1fc0:	4020      	ands	r0, r4
	crc ^= data;
    1fc2:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    1fc4:	00c9      	lsls	r1, r1, #3
    1fc6:	d00b      	beq.n	1fe0 <crc32_recalculate+0xc8>
		if (crc & 1) {
    1fc8:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    1fca:	4c08      	ldr	r4, [pc, #32]	; (1fec <crc32_recalculate+0xd4>)
    1fcc:	e003      	b.n	1fd6 <crc32_recalculate+0xbe>
			crc >>= 1;
    1fce:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    1fd0:	3901      	subs	r1, #1
    1fd2:	2900      	cmp	r1, #0
    1fd4:	d004      	beq.n	1fe0 <crc32_recalculate+0xc8>
		if (crc & 1) {
    1fd6:	4218      	tst	r0, r3
    1fd8:	d0f9      	beq.n	1fce <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    1fda:	085b      	lsrs	r3, r3, #1
    1fdc:	4063      	eors	r3, r4
    1fde:	e7f7      	b.n	1fd0 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    1fe0:	43db      	mvns	r3, r3
    1fe2:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    1fe4:	2000      	movs	r0, #0
    1fe6:	bc04      	pop	{r2}
    1fe8:	4690      	mov	r8, r2
    1fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fec:	edb88320 	.word	0xedb88320

00001ff0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1ff0:	4a04      	ldr	r2, [pc, #16]	; (2004 <STACK_SIZE+0x4>)
    1ff2:	7813      	ldrb	r3, [r2, #0]
    1ff4:	2102      	movs	r1, #2
    1ff6:	430b      	orrs	r3, r1
    1ff8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1ffa:	7853      	ldrb	r3, [r2, #1]
    1ffc:	b25b      	sxtb	r3, r3
    1ffe:	2b00      	cmp	r3, #0
    2000:	dbfb      	blt.n	1ffa <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2002:	4770      	bx	lr
    2004:	40001800 	.word	0x40001800

00002008 <_system_extint_init>:
{
    2008:	b500      	push	{lr}
    200a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    200c:	4a12      	ldr	r2, [pc, #72]	; (2058 <_system_extint_init+0x50>)
    200e:	6993      	ldr	r3, [r2, #24]
    2010:	2140      	movs	r1, #64	; 0x40
    2012:	430b      	orrs	r3, r1
    2014:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2016:	a901      	add	r1, sp, #4
    2018:	2300      	movs	r3, #0
    201a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    201c:	2005      	movs	r0, #5
    201e:	4b0f      	ldr	r3, [pc, #60]	; (205c <_system_extint_init+0x54>)
    2020:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2022:	2005      	movs	r0, #5
    2024:	4b0e      	ldr	r3, [pc, #56]	; (2060 <_system_extint_init+0x58>)
    2026:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2028:	4a0e      	ldr	r2, [pc, #56]	; (2064 <_system_extint_init+0x5c>)
    202a:	7813      	ldrb	r3, [r2, #0]
    202c:	2101      	movs	r1, #1
    202e:	430b      	orrs	r3, r1
    2030:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2032:	7853      	ldrb	r3, [r2, #1]
    2034:	b25b      	sxtb	r3, r3
    2036:	2b00      	cmp	r3, #0
    2038:	dbfb      	blt.n	2032 <_system_extint_init+0x2a>
    203a:	4b0b      	ldr	r3, [pc, #44]	; (2068 <_system_extint_init+0x60>)
    203c:	0019      	movs	r1, r3
    203e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2040:	2200      	movs	r2, #0
    2042:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2044:	4299      	cmp	r1, r3
    2046:	d1fc      	bne.n	2042 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2048:	2210      	movs	r2, #16
    204a:	4b08      	ldr	r3, [pc, #32]	; (206c <_system_extint_init+0x64>)
    204c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    204e:	4b08      	ldr	r3, [pc, #32]	; (2070 <_system_extint_init+0x68>)
    2050:	4798      	blx	r3
}
    2052:	b003      	add	sp, #12
    2054:	bd00      	pop	{pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	40000400 	.word	0x40000400
    205c:	0000a2fd 	.word	0x0000a2fd
    2060:	0000a271 	.word	0x0000a271
    2064:	40001800 	.word	0x40001800
    2068:	2000054c 	.word	0x2000054c
    206c:	e000e100 	.word	0xe000e100
    2070:	00001ff1 	.word	0x00001ff1

00002074 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2074:	2300      	movs	r3, #0
    2076:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2078:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    207a:	2201      	movs	r2, #1
    207c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    207e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    2080:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    2082:	3302      	adds	r3, #2
    2084:	72c3      	strb	r3, [r0, #11]
}
    2086:	4770      	bx	lr

00002088 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2088:	b5f0      	push	{r4, r5, r6, r7, lr}
    208a:	b083      	sub	sp, #12
    208c:	0005      	movs	r5, r0
    208e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2090:	a901      	add	r1, sp, #4
    2092:	2300      	movs	r3, #0
    2094:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2096:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2098:	7923      	ldrb	r3, [r4, #4]
    209a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    209c:	7a23      	ldrb	r3, [r4, #8]
    209e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    20a0:	7820      	ldrb	r0, [r4, #0]
    20a2:	4b15      	ldr	r3, [pc, #84]	; (20f8 <extint_chan_set_config+0x70>)
    20a4:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    20a6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    20a8:	2d1f      	cmp	r5, #31
    20aa:	d800      	bhi.n	20ae <extint_chan_set_config+0x26>
		return eics[eic_index];
    20ac:	4813      	ldr	r0, [pc, #76]	; (20fc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    20ae:	2207      	movs	r2, #7
    20b0:	402a      	ands	r2, r5
    20b2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    20b4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    20b6:	7aa3      	ldrb	r3, [r4, #10]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d001      	beq.n	20c0 <extint_chan_set_config+0x38>
    20bc:	2308      	movs	r3, #8
    20be:	431f      	orrs	r7, r3
    20c0:	08eb      	lsrs	r3, r5, #3
    20c2:	009b      	lsls	r3, r3, #2
    20c4:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    20c6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    20c8:	260f      	movs	r6, #15
    20ca:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    20cc:	43b1      	bics	r1, r6
			(new_config << config_pos);
    20ce:	4097      	lsls	r7, r2
    20d0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    20d2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    20d4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    20d6:	7a63      	ldrb	r3, [r4, #9]
    20d8:	2b00      	cmp	r3, #0
    20da:	d106      	bne.n	20ea <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    20dc:	6943      	ldr	r3, [r0, #20]
    20de:	2201      	movs	r2, #1
    20e0:	40aa      	lsls	r2, r5
    20e2:	4393      	bics	r3, r2
    20e4:	6143      	str	r3, [r0, #20]
	}
}
    20e6:	b003      	add	sp, #12
    20e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    20ea:	6942      	ldr	r2, [r0, #20]
    20ec:	2301      	movs	r3, #1
    20ee:	40ab      	lsls	r3, r5
    20f0:	4313      	orrs	r3, r2
    20f2:	6143      	str	r3, [r0, #20]
    20f4:	e7f7      	b.n	20e6 <extint_chan_set_config+0x5e>
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	0000a3f5 	.word	0x0000a3f5
    20fc:	40001800 	.word	0x40001800

00002100 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2100:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    2102:	2a00      	cmp	r2, #0
    2104:	d001      	beq.n	210a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2106:	0018      	movs	r0, r3
    2108:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    210a:	008b      	lsls	r3, r1, #2
    210c:	4a06      	ldr	r2, [pc, #24]	; (2128 <extint_register_callback+0x28>)
    210e:	589b      	ldr	r3, [r3, r2]
    2110:	2b00      	cmp	r3, #0
    2112:	d003      	beq.n	211c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    2114:	4283      	cmp	r3, r0
    2116:	d005      	beq.n	2124 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    2118:	231d      	movs	r3, #29
    211a:	e7f4      	b.n	2106 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    211c:	0089      	lsls	r1, r1, #2
    211e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    2120:	2300      	movs	r3, #0
    2122:	e7f0      	b.n	2106 <extint_register_callback+0x6>
		return STATUS_OK;
    2124:	2300      	movs	r3, #0
    2126:	e7ee      	b.n	2106 <extint_register_callback+0x6>
    2128:	2000054c 	.word	0x2000054c

0000212c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    212c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    212e:	2900      	cmp	r1, #0
    2130:	d001      	beq.n	2136 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    2132:	0018      	movs	r0, r3
    2134:	4770      	bx	lr
		return NULL;
    2136:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    2138:	281f      	cmp	r0, #31
    213a:	d800      	bhi.n	213e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    213c:	4a02      	ldr	r2, [pc, #8]	; (2148 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    213e:	2301      	movs	r3, #1
    2140:	4083      	lsls	r3, r0
    2142:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    2144:	2300      	movs	r3, #0
    2146:	e7f4      	b.n	2132 <extint_chan_enable_callback+0x6>
    2148:	40001800 	.word	0x40001800

0000214c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    214c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    214e:	2900      	cmp	r1, #0
    2150:	d001      	beq.n	2156 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    2152:	0018      	movs	r0, r3
    2154:	4770      	bx	lr
		return NULL;
    2156:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    2158:	281f      	cmp	r0, #31
    215a:	d800      	bhi.n	215e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    215c:	4a02      	ldr	r2, [pc, #8]	; (2168 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    215e:	2301      	movs	r3, #1
    2160:	4083      	lsls	r3, r0
    2162:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    2164:	2300      	movs	r3, #0
    2166:	e7f4      	b.n	2152 <extint_chan_disable_callback+0x6>
    2168:	40001800 	.word	0x40001800

0000216c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    216c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    216e:	2200      	movs	r2, #0
    2170:	4b10      	ldr	r3, [pc, #64]	; (21b4 <EIC_Handler+0x48>)
    2172:	701a      	strb	r2, [r3, #0]
    2174:	2300      	movs	r3, #0
    2176:	4910      	ldr	r1, [pc, #64]	; (21b8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2178:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    217a:	4e10      	ldr	r6, [pc, #64]	; (21bc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    217c:	4c0d      	ldr	r4, [pc, #52]	; (21b4 <EIC_Handler+0x48>)
    217e:	e00a      	b.n	2196 <EIC_Handler+0x2a>
		return eics[eic_index];
    2180:	490d      	ldr	r1, [pc, #52]	; (21b8 <EIC_Handler+0x4c>)
    2182:	e008      	b.n	2196 <EIC_Handler+0x2a>
    2184:	7823      	ldrb	r3, [r4, #0]
    2186:	3301      	adds	r3, #1
    2188:	b2db      	uxtb	r3, r3
    218a:	7023      	strb	r3, [r4, #0]
    218c:	2b0f      	cmp	r3, #15
    218e:	d810      	bhi.n	21b2 <EIC_Handler+0x46>
		return NULL;
    2190:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2192:	2b1f      	cmp	r3, #31
    2194:	d9f4      	bls.n	2180 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    2196:	0028      	movs	r0, r5
    2198:	4018      	ands	r0, r3
    219a:	2201      	movs	r2, #1
    219c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    219e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    21a0:	4210      	tst	r0, r2
    21a2:	d0ef      	beq.n	2184 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    21a4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    21a6:	009b      	lsls	r3, r3, #2
    21a8:	599b      	ldr	r3, [r3, r6]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d0ea      	beq.n	2184 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    21ae:	4798      	blx	r3
    21b0:	e7e8      	b.n	2184 <EIC_Handler+0x18>
			}
		}
	}
}
    21b2:	bd70      	pop	{r4, r5, r6, pc}
    21b4:	2000058c 	.word	0x2000058c
    21b8:	40001800 	.word	0x40001800
    21bc:	2000054c 	.word	0x2000054c

000021c0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    21c0:	b510      	push	{r4, lr}
	if (gpfIsr) {
    21c2:	4b03      	ldr	r3, [pc, #12]	; (21d0 <chip_isr+0x10>)
    21c4:	681b      	ldr	r3, [r3, #0]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d000      	beq.n	21cc <chip_isr+0xc>
		gpfIsr();
    21ca:	4798      	blx	r3
	}
}
    21cc:	bd10      	pop	{r4, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	20000214 	.word	0x20000214

000021d4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    21d4:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    21d6:	1e44      	subs	r4, r0, #1
    21d8:	2800      	cmp	r0, #0
    21da:	d004      	beq.n	21e6 <nm_bsp_sleep+0x12>
		delay_ms(1);
    21dc:	4d02      	ldr	r5, [pc, #8]	; (21e8 <nm_bsp_sleep+0x14>)
    21de:	2001      	movs	r0, #1
    21e0:	47a8      	blx	r5
	while (u32TimeMsec--) {
    21e2:	3c01      	subs	r4, #1
    21e4:	d2fb      	bcs.n	21de <nm_bsp_sleep+0xa>
	}
}
    21e6:	bd70      	pop	{r4, r5, r6, pc}
    21e8:	00009905 	.word	0x00009905

000021ec <nm_bsp_reset>:
{
    21ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		port_base->OUTCLR.reg = pin_mask;
    21ee:	4c07      	ldr	r4, [pc, #28]	; (220c <nm_bsp_reset+0x20>)
    21f0:	2780      	movs	r7, #128	; 0x80
    21f2:	057f      	lsls	r7, r7, #21
    21f4:	6167      	str	r7, [r4, #20]
    21f6:	2580      	movs	r5, #128	; 0x80
    21f8:	052d      	lsls	r5, r5, #20
    21fa:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    21fc:	2001      	movs	r0, #1
    21fe:	4e04      	ldr	r6, [pc, #16]	; (2210 <nm_bsp_reset+0x24>)
    2200:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    2202:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    2204:	200a      	movs	r0, #10
    2206:	47b0      	blx	r6
    2208:	61a5      	str	r5, [r4, #24]
}
    220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    220c:	41004400 	.word	0x41004400
    2210:	000021d5 	.word	0x000021d5

00002214 <nm_bsp_init>:
{
    2214:	b570      	push	{r4, r5, r6, lr}
    2216:	b082      	sub	sp, #8
	gpfIsr = NULL;
    2218:	2300      	movs	r3, #0
    221a:	4a16      	ldr	r2, [pc, #88]	; (2274 <nm_bsp_init+0x60>)
    221c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    221e:	ac01      	add	r4, sp, #4
    2220:	2501      	movs	r5, #1
    2222:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2224:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2226:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    2228:	0021      	movs	r1, r4
    222a:	201b      	movs	r0, #27
    222c:	4e12      	ldr	r6, [pc, #72]	; (2278 <nm_bsp_init+0x64>)
    222e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    2230:	0021      	movs	r1, r4
    2232:	201c      	movs	r0, #28
    2234:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    2236:	0021      	movs	r1, r4
    2238:	2028      	movs	r0, #40	; 0x28
    223a:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    223c:	4b0f      	ldr	r3, [pc, #60]	; (227c <nm_bsp_init+0x68>)
    223e:	2280      	movs	r2, #128	; 0x80
    2240:	0552      	lsls	r2, r2, #21
    2242:	615a      	str	r2, [r3, #20]
    2244:	2280      	movs	r2, #128	; 0x80
    2246:	0512      	lsls	r2, r2, #20
    2248:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    224a:	4b0d      	ldr	r3, [pc, #52]	; (2280 <nm_bsp_init+0x6c>)
    224c:	681b      	ldr	r3, [r3, #0]
    224e:	421d      	tst	r5, r3
    2250:	d003      	beq.n	225a <nm_bsp_init+0x46>
    2252:	4b0b      	ldr	r3, [pc, #44]	; (2280 <nm_bsp_init+0x6c>)
    2254:	681b      	ldr	r3, [r3, #0]
    2256:	079b      	lsls	r3, r3, #30
    2258:	d401      	bmi.n	225e <nm_bsp_init+0x4a>
	    delay_init();
    225a:	4b0a      	ldr	r3, [pc, #40]	; (2284 <nm_bsp_init+0x70>)
    225c:	4798      	blx	r3
	nm_bsp_reset();
    225e:	4b0a      	ldr	r3, [pc, #40]	; (2288 <nm_bsp_init+0x74>)
    2260:	4798      	blx	r3
	cpu_irq_enable();
    2262:	2201      	movs	r2, #1
    2264:	4b09      	ldr	r3, [pc, #36]	; (228c <nm_bsp_init+0x78>)
    2266:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2268:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    226c:	b662      	cpsie	i
}
    226e:	2000      	movs	r0, #0
    2270:	b002      	add	sp, #8
    2272:	bd70      	pop	{r4, r5, r6, pc}
    2274:	20000214 	.word	0x20000214
    2278:	00009c21 	.word	0x00009c21
    227c:	41004400 	.word	0x41004400
    2280:	e000e010 	.word	0xe000e010
    2284:	00009899 	.word	0x00009899
    2288:	000021ed 	.word	0x000021ed
    228c:	2000000c 	.word	0x2000000c

00002290 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    2290:	b510      	push	{r4, lr}
    2292:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    2294:	4b0e      	ldr	r3, [pc, #56]	; (22d0 <nm_bsp_register_isr+0x40>)
    2296:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    2298:	ac01      	add	r4, sp, #4
    229a:	0020      	movs	r0, r4
    229c:	4b0d      	ldr	r3, [pc, #52]	; (22d4 <nm_bsp_register_isr+0x44>)
    229e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    22a0:	2329      	movs	r3, #41	; 0x29
    22a2:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    22a4:	2300      	movs	r3, #0
    22a6:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    22a8:	3301      	adds	r3, #1
    22aa:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    22ac:	3301      	adds	r3, #1
    22ae:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    22b0:	0021      	movs	r1, r4
    22b2:	2009      	movs	r0, #9
    22b4:	4b08      	ldr	r3, [pc, #32]	; (22d8 <nm_bsp_register_isr+0x48>)
    22b6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    22b8:	2200      	movs	r2, #0
    22ba:	2109      	movs	r1, #9
    22bc:	4807      	ldr	r0, [pc, #28]	; (22dc <nm_bsp_register_isr+0x4c>)
    22be:	4b08      	ldr	r3, [pc, #32]	; (22e0 <nm_bsp_register_isr+0x50>)
    22c0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    22c2:	2100      	movs	r1, #0
    22c4:	2009      	movs	r0, #9
    22c6:	4b07      	ldr	r3, [pc, #28]	; (22e4 <nm_bsp_register_isr+0x54>)
    22c8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    22ca:	b004      	add	sp, #16
    22cc:	bd10      	pop	{r4, pc}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	20000214 	.word	0x20000214
    22d4:	00002075 	.word	0x00002075
    22d8:	00002089 	.word	0x00002089
    22dc:	000021c1 	.word	0x000021c1
    22e0:	00002101 	.word	0x00002101
    22e4:	0000212d 	.word	0x0000212d

000022e8 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    22e8:	b510      	push	{r4, lr}
	if (u8Enable) {
    22ea:	2800      	cmp	r0, #0
    22ec:	d104      	bne.n	22f8 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    22ee:	2100      	movs	r1, #0
    22f0:	2009      	movs	r0, #9
    22f2:	4b04      	ldr	r3, [pc, #16]	; (2304 <nm_bsp_interrupt_ctrl+0x1c>)
    22f4:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    22f6:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    22f8:	2100      	movs	r1, #0
    22fa:	2009      	movs	r0, #9
    22fc:	4b02      	ldr	r3, [pc, #8]	; (2308 <nm_bsp_interrupt_ctrl+0x20>)
    22fe:	4798      	blx	r3
    2300:	e7f9      	b.n	22f6 <nm_bsp_interrupt_ctrl+0xe>
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	0000214d 	.word	0x0000214d
    2308:	0000212d 	.word	0x0000212d

0000230c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    230c:	b530      	push	{r4, r5, lr}
    230e:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    2310:	4c30      	ldr	r4, [pc, #192]	; (23d4 <nm_bus_init+0xc8>)
    2312:	230e      	movs	r3, #14
    2314:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2316:	2300      	movs	r3, #0
    2318:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    231a:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    231c:	a901      	add	r1, sp, #4
    231e:	2201      	movs	r2, #1
    2320:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2322:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2324:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2326:	200e      	movs	r0, #14
    2328:	4b2b      	ldr	r3, [pc, #172]	; (23d8 <nm_bus_init+0xcc>)
    232a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    232c:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    232e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2330:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2332:	2900      	cmp	r1, #0
    2334:	d104      	bne.n	2340 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    2336:	0953      	lsrs	r3, r2, #5
    2338:	01db      	lsls	r3, r3, #7
    233a:	4928      	ldr	r1, [pc, #160]	; (23dc <nm_bus_init+0xd0>)
    233c:	468c      	mov	ip, r1
    233e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2340:	211f      	movs	r1, #31
    2342:	4011      	ands	r1, r2
    2344:	2201      	movs	r2, #1
    2346:	0010      	movs	r0, r2
    2348:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    234a:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    234c:	ac02      	add	r4, sp, #8
    234e:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2350:	2300      	movs	r3, #0
    2352:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2354:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2356:	21c0      	movs	r1, #192	; 0xc0
    2358:	0389      	lsls	r1, r1, #14
    235a:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    235c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    235e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2360:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2362:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    2364:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2366:	3223      	adds	r2, #35	; 0x23
    2368:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    236a:	3a18      	subs	r2, #24
    236c:	2100      	movs	r1, #0
    236e:	a808      	add	r0, sp, #32
    2370:	4b1b      	ldr	r3, [pc, #108]	; (23e0 <nm_bus_init+0xd4>)
    2372:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    2374:	4b1b      	ldr	r3, [pc, #108]	; (23e4 <nm_bus_init+0xd8>)
    2376:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    2378:	4b1b      	ldr	r3, [pc, #108]	; (23e8 <nm_bus_init+0xdc>)
    237a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    237c:	2301      	movs	r3, #1
    237e:	425b      	negs	r3, r3
    2380:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    2382:	4b1a      	ldr	r3, [pc, #104]	; (23ec <nm_bus_init+0xe0>)
    2384:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    2386:	4b1a      	ldr	r3, [pc, #104]	; (23f0 <nm_bus_init+0xe4>)
    2388:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    238a:	0022      	movs	r2, r4
    238c:	4919      	ldr	r1, [pc, #100]	; (23f4 <nm_bus_init+0xe8>)
    238e:	481a      	ldr	r0, [pc, #104]	; (23f8 <nm_bus_init+0xec>)
    2390:	4b1a      	ldr	r3, [pc, #104]	; (23fc <nm_bus_init+0xf0>)
    2392:	4798      	blx	r3
    2394:	2800      	cmp	r0, #0
    2396:	d11a      	bne.n	23ce <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2398:	4d17      	ldr	r5, [pc, #92]	; (23f8 <nm_bus_init+0xec>)
    239a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    239c:	0020      	movs	r0, r4
    239e:	4b18      	ldr	r3, [pc, #96]	; (2400 <nm_bus_init+0xf4>)
    23a0:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    23a2:	231f      	movs	r3, #31
    23a4:	4018      	ands	r0, r3
    23a6:	3b1e      	subs	r3, #30
    23a8:	4083      	lsls	r3, r0
    23aa:	4a16      	ldr	r2, [pc, #88]	; (2404 <nm_bus_init+0xf8>)
    23ac:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    23ae:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    23b0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    23b2:	2b00      	cmp	r3, #0
    23b4:	d1fc      	bne.n	23b0 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    23b6:	6823      	ldr	r3, [r4, #0]
    23b8:	2202      	movs	r2, #2
    23ba:	4313      	orrs	r3, r2
    23bc:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    23be:	4b12      	ldr	r3, [pc, #72]	; (2408 <nm_bus_init+0xfc>)
    23c0:	4798      	blx	r3
	nm_bsp_sleep(1);
    23c2:	2001      	movs	r0, #1
    23c4:	4b11      	ldr	r3, [pc, #68]	; (240c <nm_bus_init+0x100>)
    23c6:	4798      	blx	r3
#endif
	return result;
    23c8:	2000      	movs	r0, #0
}
    23ca:	b011      	add	sp, #68	; 0x44
    23cc:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    23ce:	2006      	movs	r0, #6
    23d0:	4240      	negs	r0, r0
    23d2:	e7fa      	b.n	23ca <nm_bus_init+0xbe>
    23d4:	20000590 	.word	0x20000590
    23d8:	00009c21 	.word	0x00009c21
    23dc:	41004400 	.word	0x41004400
    23e0:	0000a8f7 	.word	0x0000a8f7
    23e4:	000c0002 	.word	0x000c0002
    23e8:	000d0002 	.word	0x000d0002
    23ec:	000f0002 	.word	0x000f0002
    23f0:	00b71b00 	.word	0x00b71b00
    23f4:	42001000 	.word	0x42001000
    23f8:	20000594 	.word	0x20000594
    23fc:	00008bfd 	.word	0x00008bfd
    2400:	00009809 	.word	0x00009809
    2404:	e000e100 	.word	0xe000e100
    2408:	000021ed 	.word	0x000021ed
    240c:	000021d5 	.word	0x000021d5

00002410 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    2410:	b5f0      	push	{r4, r5, r6, r7, lr}
    2412:	46de      	mov	lr, fp
    2414:	4657      	mov	r7, sl
    2416:	464e      	mov	r6, r9
    2418:	4645      	mov	r5, r8
    241a:	b5e0      	push	{r5, r6, r7, lr}
    241c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    241e:	2803      	cmp	r0, #3
    2420:	d000      	beq.n	2424 <nm_bus_ioctl+0x14>
    2422:	e075      	b.n	2510 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    2424:	680e      	ldr	r6, [r1, #0]
    2426:	684d      	ldr	r5, [r1, #4]
    2428:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    242a:	2200      	movs	r2, #0
    242c:	466b      	mov	r3, sp
    242e:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    2430:	2d00      	cmp	r5, #0
    2432:	d027      	beq.n	2484 <nm_bus_ioctl+0x74>
    2434:	2c00      	cmp	r4, #0
    2436:	d065      	beq.n	2504 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    2438:	2e00      	cmp	r6, #0
    243a:	d100      	bne.n	243e <nm_bus_ioctl+0x2e>
    243c:	e077      	b.n	252e <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    243e:	2300      	movs	r3, #0
    2440:	4698      	mov	r8, r3
    2442:	2300      	movs	r3, #0
    2444:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    2446:	2201      	movs	r2, #1
    2448:	493b      	ldr	r1, [pc, #236]	; (2538 <nm_bus_ioctl+0x128>)
    244a:	483c      	ldr	r0, [pc, #240]	; (253c <nm_bus_ioctl+0x12c>)
    244c:	4b3c      	ldr	r3, [pc, #240]	; (2540 <nm_bus_ioctl+0x130>)
    244e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2450:	4b3a      	ldr	r3, [pc, #232]	; (253c <nm_bus_ioctl+0x12c>)
    2452:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    2454:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    2456:	2204      	movs	r2, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2458:	4699      	mov	r9, r3
			pu8Miso++;
    245a:	4659      	mov	r1, fp
    245c:	424b      	negs	r3, r1
    245e:	4159      	adcs	r1, r3
    2460:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    2462:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2464:	4653      	mov	r3, sl
    2466:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2468:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    246a:	4239      	tst	r1, r7
    246c:	d0fc      	beq.n	2468 <nm_bus_ioctl+0x58>
    246e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2470:	4239      	tst	r1, r7
    2472:	d0fc      	beq.n	246e <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2474:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2476:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    2478:	4211      	tst	r1, r2
    247a:	d0fc      	beq.n	2476 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    247c:	4649      	mov	r1, r9
    247e:	7989      	ldrb	r1, [r1, #6]
    2480:	468c      	mov	ip, r1
    2482:	e011      	b.n	24a8 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    2484:	2e00      	cmp	r6, #0
    2486:	d03a      	beq.n	24fe <nm_bus_ioctl+0xee>
    2488:	2c00      	cmp	r4, #0
    248a:	d03e      	beq.n	250a <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    248c:	2300      	movs	r3, #0
    248e:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    2490:	3301      	adds	r3, #1
    2492:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    2494:	466b      	mov	r3, sp
    2496:	1ddd      	adds	r5, r3, #7
    2498:	e7d5      	b.n	2446 <nm_bus_ioctl+0x36>
    249a:	4660      	mov	r0, ip
    249c:	2801      	cmp	r0, #1
    249e:	d00d      	beq.n	24bc <nm_bus_ioctl+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    24a2:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    24a4:	2900      	cmp	r1, #0
    24a6:	d00d      	beq.n	24c4 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    24a8:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    24aa:	4211      	tst	r1, r2
    24ac:	d0fc      	beq.n	24a8 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    24ae:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    24b0:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    24b2:	4210      	tst	r0, r2
    24b4:	d0f1      	beq.n	249a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    24b6:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    24b8:	311e      	adds	r1, #30
    24ba:	e7ee      	b.n	249a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    24bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    24be:	05c0      	lsls	r0, r0, #23
    24c0:	0dc0      	lsrs	r0, r0, #23
    24c2:	e7ef      	b.n	24a4 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    24c4:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    24c6:	3c01      	subs	r4, #1
    24c8:	b2a4      	uxth	r4, r4
			pu8Miso++;
    24ca:	445d      	add	r5, fp
			pu8Mosi++;
    24cc:	4643      	mov	r3, r8
    24ce:	4259      	negs	r1, r3
    24d0:	414b      	adcs	r3, r1
    24d2:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    24d4:	2c00      	cmp	r4, #0
    24d6:	d1c4      	bne.n	2462 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    24d8:	4b18      	ldr	r3, [pc, #96]	; (253c <nm_bus_ioctl+0x12c>)
    24da:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    24dc:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    24de:	7e0b      	ldrb	r3, [r1, #24]
    24e0:	4213      	tst	r3, r2
    24e2:	d0fc      	beq.n	24de <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    24e4:	2200      	movs	r2, #0
    24e6:	4914      	ldr	r1, [pc, #80]	; (2538 <nm_bus_ioctl+0x128>)
    24e8:	4814      	ldr	r0, [pc, #80]	; (253c <nm_bus_ioctl+0x12c>)
    24ea:	4b15      	ldr	r3, [pc, #84]	; (2540 <nm_bus_ioctl+0x130>)
    24ec:	4798      	blx	r3
	return M2M_SUCCESS;
    24ee:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    24f0:	b003      	add	sp, #12
    24f2:	bc3c      	pop	{r2, r3, r4, r5}
    24f4:	4690      	mov	r8, r2
    24f6:	4699      	mov	r9, r3
    24f8:	46a2      	mov	sl, r4
    24fa:	46ab      	mov	fp, r5
    24fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    24fe:	200f      	movs	r0, #15
    2500:	4240      	negs	r0, r0
    2502:	e7f5      	b.n	24f0 <nm_bus_ioctl+0xe0>
    2504:	200f      	movs	r0, #15
    2506:	4240      	negs	r0, r0
    2508:	e7f2      	b.n	24f0 <nm_bus_ioctl+0xe0>
    250a:	200f      	movs	r0, #15
    250c:	4240      	negs	r0, r0
		break;
    250e:	e7ef      	b.n	24f0 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    2510:	220e      	movs	r2, #14
    2512:	32ff      	adds	r2, #255	; 0xff
    2514:	490b      	ldr	r1, [pc, #44]	; (2544 <nm_bus_ioctl+0x134>)
    2516:	480c      	ldr	r0, [pc, #48]	; (2548 <nm_bus_ioctl+0x138>)
    2518:	4b0c      	ldr	r3, [pc, #48]	; (254c <nm_bus_ioctl+0x13c>)
    251a:	4798      	blx	r3
    251c:	480c      	ldr	r0, [pc, #48]	; (2550 <nm_bus_ioctl+0x140>)
    251e:	4b0d      	ldr	r3, [pc, #52]	; (2554 <nm_bus_ioctl+0x144>)
    2520:	4798      	blx	r3
    2522:	200d      	movs	r0, #13
    2524:	4b0c      	ldr	r3, [pc, #48]	; (2558 <nm_bus_ioctl+0x148>)
    2526:	4798      	blx	r3
			s8Ret = -1;
    2528:	2001      	movs	r0, #1
    252a:	4240      	negs	r0, r0
	return s8Ret;
    252c:	e7e0      	b.n	24f0 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    252e:	2301      	movs	r3, #1
    2530:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    2532:	466b      	mov	r3, sp
    2534:	1dde      	adds	r6, r3, #7
    2536:	e784      	b.n	2442 <nm_bus_ioctl+0x32>
    2538:	20000590 	.word	0x20000590
    253c:	20000594 	.word	0x20000594
    2540:	00008f2d 	.word	0x00008f2d
    2544:	00010afc 	.word	0x00010afc
    2548:	00010b0c 	.word	0x00010b0c
    254c:	0000b339 	.word	0x0000b339
    2550:	00010b20 	.word	0x00010b20
    2554:	0000b455 	.word	0x0000b455
    2558:	0000b36d 	.word	0x0000b36d

0000255c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    255c:	b530      	push	{r4, r5, lr}
    255e:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    2560:	ab01      	add	r3, sp, #4
    2562:	2200      	movs	r2, #0
    2564:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    2566:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    2568:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    256a:	4d13      	ldr	r5, [pc, #76]	; (25b8 <nm_bus_deinit+0x5c>)
    256c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    256e:	0020      	movs	r0, r4
    2570:	4b12      	ldr	r3, [pc, #72]	; (25bc <nm_bus_deinit+0x60>)
    2572:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2574:	231f      	movs	r3, #31
    2576:	4018      	ands	r0, r3
    2578:	3b1e      	subs	r3, #30
    257a:	4083      	lsls	r3, r0
    257c:	2280      	movs	r2, #128	; 0x80
    257e:	4910      	ldr	r1, [pc, #64]	; (25c0 <nm_bus_deinit+0x64>)
    2580:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2582:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2584:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2586:	2b00      	cmp	r3, #0
    2588:	d1fc      	bne.n	2584 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    258a:	338f      	adds	r3, #143	; 0x8f
    258c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    258e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2590:	6823      	ldr	r3, [r4, #0]
    2592:	2202      	movs	r2, #2
    2594:	4393      	bics	r3, r2
    2596:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    2598:	a901      	add	r1, sp, #4
    259a:	200c      	movs	r0, #12
    259c:	4c09      	ldr	r4, [pc, #36]	; (25c4 <nm_bus_deinit+0x68>)
    259e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    25a0:	a901      	add	r1, sp, #4
    25a2:	200f      	movs	r0, #15
    25a4:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    25a6:	a901      	add	r1, sp, #4
    25a8:	200d      	movs	r0, #13
    25aa:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    25ac:	a901      	add	r1, sp, #4
    25ae:	200e      	movs	r0, #14
    25b0:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    25b2:	2000      	movs	r0, #0
    25b4:	b003      	add	sp, #12
    25b6:	bd30      	pop	{r4, r5, pc}
    25b8:	20000594 	.word	0x20000594
    25bc:	00009809 	.word	0x00009809
    25c0:	e000e100 	.word	0xe000e100
    25c4:	00009c21 	.word	0x00009c21

000025c8 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    25c8:	2a00      	cmp	r2, #0
    25ca:	d006      	beq.n	25da <m2m_memcpy+0x12>
    25cc:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    25ce:	780b      	ldrb	r3, [r1, #0]
    25d0:	7003      	strb	r3, [r0, #0]
		pDst++;
    25d2:	3001      	adds	r0, #1
		pSrc++;
    25d4:	3101      	adds	r1, #1
	}while(--sz);
    25d6:	4290      	cmp	r0, r2
    25d8:	d1f9      	bne.n	25ce <m2m_memcpy+0x6>
}
    25da:	4770      	bx	lr

000025dc <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    25dc:	2a00      	cmp	r2, #0
    25de:	d004      	beq.n	25ea <m2m_memset+0xe>
    25e0:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    25e2:	7001      	strb	r1, [r0, #0]
		pBuf++;
    25e4:	3001      	adds	r0, #1
	}while(--sz);
    25e6:	4290      	cmp	r0, r2
    25e8:	d1fb      	bne.n	25e2 <m2m_memset+0x6>
}
    25ea:	4770      	bx	lr

000025ec <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    25ec:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    25ee:	7802      	ldrb	r2, [r0, #0]
    25f0:	2a00      	cmp	r2, #0
    25f2:	d007      	beq.n	2604 <m2m_strlen+0x18>
    25f4:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    25f6:	3001      	adds	r0, #1
    25f8:	b280      	uxth	r0, r0
		pcStr++;
    25fa:	3301      	adds	r3, #1
	while(*pcStr)
    25fc:	781a      	ldrb	r2, [r3, #0]
    25fe:	2a00      	cmp	r2, #0
    2600:	d1f9      	bne.n	25f6 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    2602:	4770      	bx	lr
	uint16	u16StrLen = 0;
    2604:	2000      	movs	r0, #0
    2606:	e7fc      	b.n	2602 <m2m_strlen+0x16>

00002608 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    2608:	4a02      	ldr	r2, [pc, #8]	; (2614 <isr+0xc>)
    260a:	78d3      	ldrb	r3, [r2, #3]
    260c:	3301      	adds	r3, #1
    260e:	b2db      	uxtb	r3, r3
    2610:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    2612:	4770      	bx	lr
    2614:	200005d0 	.word	0x200005d0

00002618 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    2618:	4770      	bx	lr
	...

0000261c <hif_set_rx_done>:
{
    261c:	b500      	push	{lr}
    261e:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    2620:	2200      	movs	r2, #0
    2622:	4b0a      	ldr	r3, [pc, #40]	; (264c <hif_set_rx_done+0x30>)
    2624:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    2626:	2001      	movs	r0, #1
    2628:	4b09      	ldr	r3, [pc, #36]	; (2650 <hif_set_rx_done+0x34>)
    262a:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    262c:	a901      	add	r1, sp, #4
    262e:	4809      	ldr	r0, [pc, #36]	; (2654 <hif_set_rx_done+0x38>)
    2630:	4b09      	ldr	r3, [pc, #36]	; (2658 <hif_set_rx_done+0x3c>)
    2632:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2634:	2800      	cmp	r0, #0
    2636:	d001      	beq.n	263c <hif_set_rx_done+0x20>
}
    2638:	b003      	add	sp, #12
    263a:	bd00      	pop	{pc}
	reg |= NBIT1;
    263c:	2102      	movs	r1, #2
    263e:	9b01      	ldr	r3, [sp, #4]
    2640:	4319      	orrs	r1, r3
    2642:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    2644:	4803      	ldr	r0, [pc, #12]	; (2654 <hif_set_rx_done+0x38>)
    2646:	4b05      	ldr	r3, [pc, #20]	; (265c <hif_set_rx_done+0x40>)
    2648:	4798      	blx	r3
    264a:	e7f5      	b.n	2638 <hif_set_rx_done+0x1c>
    264c:	200005d0 	.word	0x200005d0
    2650:	000022e9 	.word	0x000022e9
    2654:	00001070 	.word	0x00001070
    2658:	00003a25 	.word	0x00003a25
    265c:	00003a31 	.word	0x00003a31

00002660 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    2660:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    2662:	4b0c      	ldr	r3, [pc, #48]	; (2694 <hif_chip_wake+0x34>)
    2664:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    2666:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    2668:	2b00      	cmp	r3, #0
    266a:	d10d      	bne.n	2688 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    266c:	4b09      	ldr	r3, [pc, #36]	; (2694 <hif_chip_wake+0x34>)
    266e:	785b      	ldrb	r3, [r3, #1]
    2670:	2b00      	cmp	r3, #0
    2672:	d103      	bne.n	267c <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    2674:	4b07      	ldr	r3, [pc, #28]	; (2694 <hif_chip_wake+0x34>)
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	2b00      	cmp	r3, #0
    267a:	d106      	bne.n	268a <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    267c:	4a05      	ldr	r2, [pc, #20]	; (2694 <hif_chip_wake+0x34>)
    267e:	7853      	ldrb	r3, [r2, #1]
    2680:	3301      	adds	r3, #1
    2682:	b2db      	uxtb	r3, r3
    2684:	7053      	strb	r3, [r2, #1]
    2686:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    2688:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    268a:	4b03      	ldr	r3, [pc, #12]	; (2698 <hif_chip_wake+0x38>)
    268c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    268e:	2800      	cmp	r0, #0
    2690:	d0f4      	beq.n	267c <hif_chip_wake+0x1c>
    2692:	e7f9      	b.n	2688 <hif_chip_wake+0x28>
    2694:	200005d0 	.word	0x200005d0
    2698:	0000370d 	.word	0x0000370d

0000269c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    269c:	4b05      	ldr	r3, [pc, #20]	; (26b4 <hif_chip_sleep_sc+0x18>)
    269e:	785b      	ldrb	r3, [r3, #1]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d004      	beq.n	26ae <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    26a4:	4a03      	ldr	r2, [pc, #12]	; (26b4 <hif_chip_sleep_sc+0x18>)
    26a6:	7853      	ldrb	r3, [r2, #1]
    26a8:	3b01      	subs	r3, #1
    26aa:	b2db      	uxtb	r3, r3
    26ac:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    26ae:	2000      	movs	r0, #0
    26b0:	4770      	bx	lr
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	200005d0 	.word	0x200005d0

000026b8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    26b8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    26ba:	4b0b      	ldr	r3, [pc, #44]	; (26e8 <hif_chip_sleep+0x30>)
    26bc:	785b      	ldrb	r3, [r3, #1]
    26be:	2b00      	cmp	r3, #0
    26c0:	d004      	beq.n	26cc <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    26c2:	4a09      	ldr	r2, [pc, #36]	; (26e8 <hif_chip_sleep+0x30>)
    26c4:	7853      	ldrb	r3, [r2, #1]
    26c6:	3b01      	subs	r3, #1
    26c8:	b2db      	uxtb	r3, r3
    26ca:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    26cc:	4b06      	ldr	r3, [pc, #24]	; (26e8 <hif_chip_sleep+0x30>)
    26ce:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    26d0:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    26d2:	2b00      	cmp	r3, #0
    26d4:	d103      	bne.n	26de <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    26d6:	4b04      	ldr	r3, [pc, #16]	; (26e8 <hif_chip_sleep+0x30>)
    26d8:	781b      	ldrb	r3, [r3, #0]
    26da:	2b00      	cmp	r3, #0
    26dc:	d100      	bne.n	26e0 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    26de:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    26e0:	4b02      	ldr	r3, [pc, #8]	; (26ec <hif_chip_sleep+0x34>)
    26e2:	4798      	blx	r3
    26e4:	e7fb      	b.n	26de <hif_chip_sleep+0x26>
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	200005d0 	.word	0x200005d0
    26ec:	000036a5 	.word	0x000036a5

000026f0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    26f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26f2:	46de      	mov	lr, fp
    26f4:	4657      	mov	r7, sl
    26f6:	b580      	push	{r7, lr}
    26f8:	b089      	sub	sp, #36	; 0x24
    26fa:	4683      	mov	fp, r0
    26fc:	468a      	mov	sl, r1
    26fe:	9201      	str	r2, [sp, #4]
    2700:	9300      	str	r3, [sp, #0]
    2702:	ab10      	add	r3, sp, #64	; 0x40
    2704:	cb80      	ldmia	r3!, {r7}
    2706:	881e      	ldrh	r6, [r3, #0]
    2708:	ab12      	add	r3, sp, #72	; 0x48
    270a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    270c:	227f      	movs	r2, #127	; 0x7f
    270e:	400a      	ands	r2, r1
    2710:	ab07      	add	r3, sp, #28
    2712:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    2714:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    2716:	2208      	movs	r2, #8
    2718:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    271a:	2f00      	cmp	r7, #0
    271c:	d03d      	beq.n	279a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    271e:	885a      	ldrh	r2, [r3, #2]
    2720:	1992      	adds	r2, r2, r6
    2722:	18aa      	adds	r2, r5, r2
    2724:	b292      	uxth	r2, r2
    2726:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    2728:	4b69      	ldr	r3, [pc, #420]	; (28d0 <hif_send+0x1e0>)
    272a:	4798      	blx	r3
    272c:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    272e:	d000      	beq.n	2732 <hif_send+0x42>
    2730:	e0c1      	b.n	28b6 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    2732:	2300      	movs	r3, #0
    2734:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    2736:	aa02      	add	r2, sp, #8
    2738:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    273a:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    273c:	9b04      	ldr	r3, [sp, #16]
    273e:	465a      	mov	r2, fp
    2740:	431a      	orrs	r2, r3
    2742:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    2744:	9a04      	ldr	r2, [sp, #16]
    2746:	4653      	mov	r3, sl
    2748:	021b      	lsls	r3, r3, #8
    274a:	4313      	orrs	r3, r2
    274c:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    274e:	ab07      	add	r3, sp, #28
    2750:	885b      	ldrh	r3, [r3, #2]
    2752:	9a04      	ldr	r2, [sp, #16]
    2754:	041b      	lsls	r3, r3, #16
    2756:	4313      	orrs	r3, r2
    2758:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    275a:	9904      	ldr	r1, [sp, #16]
    275c:	485d      	ldr	r0, [pc, #372]	; (28d4 <hif_send+0x1e4>)
    275e:	4b5e      	ldr	r3, [pc, #376]	; (28d8 <hif_send+0x1e8>)
    2760:	4798      	blx	r3
    2762:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    2764:	d157      	bne.n	2816 <hif_send+0x126>

		reg = 0UL;
    2766:	2300      	movs	r3, #0
    2768:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    276a:	9b04      	ldr	r3, [sp, #16]
    276c:	2202      	movs	r2, #2
    276e:	4313      	orrs	r3, r2
    2770:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    2772:	9904      	ldr	r1, [sp, #16]
    2774:	4859      	ldr	r0, [pc, #356]	; (28dc <hif_send+0x1ec>)
    2776:	4b58      	ldr	r3, [pc, #352]	; (28d8 <hif_send+0x1e8>)
    2778:	4798      	blx	r3
    277a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    277c:	d14b      	bne.n	2816 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    277e:	2200      	movs	r2, #0
    2780:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    2782:	ab02      	add	r3, sp, #8
    2784:	80da      	strh	r2, [r3, #6]
    2786:	3306      	adds	r3, #6
    2788:	881b      	ldrh	r3, [r3, #0]
    278a:	b29b      	uxth	r3, r3
    278c:	4a54      	ldr	r2, [pc, #336]	; (28e0 <hif_send+0x1f0>)
    278e:	4293      	cmp	r3, r2
    2790:	d849      	bhi.n	2826 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    2792:	4c54      	ldr	r4, [pc, #336]	; (28e4 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    2794:	4b54      	ldr	r3, [pc, #336]	; (28e8 <hif_send+0x1f8>)
    2796:	469a      	mov	sl, r3
    2798:	e017      	b.n	27ca <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    279a:	ab07      	add	r3, sp, #28
    279c:	885a      	ldrh	r2, [r3, #2]
    279e:	9900      	ldr	r1, [sp, #0]
    27a0:	468c      	mov	ip, r1
    27a2:	4462      	add	r2, ip
    27a4:	b292      	uxth	r2, r2
    27a6:	805a      	strh	r2, [r3, #2]
    27a8:	e7be      	b.n	2728 <hif_send+0x38>
				nm_bsp_sleep(1);
    27aa:	2001      	movs	r0, #1
    27ac:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    27ae:	9b04      	ldr	r3, [sp, #16]
    27b0:	079b      	lsls	r3, r3, #30
    27b2:	d528      	bpl.n	2806 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    27b4:	ab02      	add	r3, sp, #8
    27b6:	88da      	ldrh	r2, [r3, #6]
    27b8:	3201      	adds	r2, #1
    27ba:	b292      	uxth	r2, r2
    27bc:	80da      	strh	r2, [r3, #6]
    27be:	3306      	adds	r3, #6
    27c0:	881b      	ldrh	r3, [r3, #0]
    27c2:	b29b      	uxth	r3, r3
    27c4:	4a46      	ldr	r2, [pc, #280]	; (28e0 <hif_send+0x1f0>)
    27c6:	4293      	cmp	r3, r2
    27c8:	d82d      	bhi.n	2826 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    27ca:	a904      	add	r1, sp, #16
    27cc:	4843      	ldr	r0, [pc, #268]	; (28dc <hif_send+0x1ec>)
    27ce:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    27d0:	2800      	cmp	r0, #0
    27d2:	d128      	bne.n	2826 <hif_send+0x136>
			if(cnt >= 500) {
    27d4:	ab02      	add	r3, sp, #8
    27d6:	3306      	adds	r3, #6
    27d8:	881b      	ldrh	r3, [r3, #0]
    27da:	b29b      	uxth	r3, r3
    27dc:	22f4      	movs	r2, #244	; 0xf4
    27de:	32ff      	adds	r2, #255	; 0xff
    27e0:	4293      	cmp	r3, r2
    27e2:	d9e4      	bls.n	27ae <hif_send+0xbe>
				if(cnt < 501) {
    27e4:	ab02      	add	r3, sp, #8
    27e6:	3306      	adds	r3, #6
    27e8:	881b      	ldrh	r3, [r3, #0]
    27ea:	b29b      	uxth	r3, r3
    27ec:	3201      	adds	r2, #1
    27ee:	4293      	cmp	r3, r2
    27f0:	d8db      	bhi.n	27aa <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    27f2:	483e      	ldr	r0, [pc, #248]	; (28ec <hif_send+0x1fc>)
    27f4:	4b3e      	ldr	r3, [pc, #248]	; (28f0 <hif_send+0x200>)
    27f6:	4798      	blx	r3
    27f8:	483e      	ldr	r0, [pc, #248]	; (28f4 <hif_send+0x204>)
    27fa:	4b3f      	ldr	r3, [pc, #252]	; (28f8 <hif_send+0x208>)
    27fc:	4798      	blx	r3
    27fe:	200d      	movs	r0, #13
    2800:	4b3e      	ldr	r3, [pc, #248]	; (28fc <hif_send+0x20c>)
    2802:	4798      	blx	r3
    2804:	e7d1      	b.n	27aa <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    2806:	a905      	add	r1, sp, #20
    2808:	483d      	ldr	r0, [pc, #244]	; (2900 <hif_send+0x210>)
    280a:	4b36      	ldr	r3, [pc, #216]	; (28e4 <hif_send+0x1f4>)
    280c:	4798      	blx	r3
    280e:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    2810:	d009      	beq.n	2826 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    2812:	2300      	movs	r3, #0
    2814:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    2816:	4b3b      	ldr	r3, [pc, #236]	; (2904 <hif_send+0x214>)
    2818:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    281a:	0020      	movs	r0, r4
    281c:	b009      	add	sp, #36	; 0x24
    281e:	bc0c      	pop	{r2, r3}
    2820:	4692      	mov	sl, r2
    2822:	469b      	mov	fp, r3
    2824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    2826:	9b05      	ldr	r3, [sp, #20]
    2828:	2b00      	cmp	r3, #0
    282a:	d03f      	beq.n	28ac <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    282c:	9b05      	ldr	r3, [sp, #20]
    282e:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    2830:	a907      	add	r1, sp, #28
    2832:	884b      	ldrh	r3, [r1, #2]
    2834:	b29b      	uxth	r3, r3
    2836:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    2838:	9806      	ldr	r0, [sp, #24]
    283a:	2208      	movs	r2, #8
    283c:	4b32      	ldr	r3, [pc, #200]	; (2908 <hif_send+0x218>)
    283e:	4798      	blx	r3
    2840:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    2842:	d1e8      	bne.n	2816 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    2844:	9b06      	ldr	r3, [sp, #24]
    2846:	3308      	adds	r3, #8
    2848:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    284a:	9b01      	ldr	r3, [sp, #4]
    284c:	2b00      	cmp	r3, #0
    284e:	d00b      	beq.n	2868 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2850:	9806      	ldr	r0, [sp, #24]
    2852:	9a00      	ldr	r2, [sp, #0]
    2854:	0019      	movs	r1, r3
    2856:	4b2c      	ldr	r3, [pc, #176]	; (2908 <hif_send+0x218>)
    2858:	4798      	blx	r3
    285a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    285c:	d1db      	bne.n	2816 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    285e:	9b06      	ldr	r3, [sp, #24]
    2860:	9a00      	ldr	r2, [sp, #0]
    2862:	4694      	mov	ip, r2
    2864:	4463      	add	r3, ip
    2866:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    2868:	2f00      	cmp	r7, #0
    286a:	d00e      	beq.n	288a <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    286c:	9b06      	ldr	r3, [sp, #24]
    286e:	9a00      	ldr	r2, [sp, #0]
    2870:	1aad      	subs	r5, r5, r2
    2872:	18ed      	adds	r5, r5, r3
    2874:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    2876:	9806      	ldr	r0, [sp, #24]
    2878:	0032      	movs	r2, r6
    287a:	0039      	movs	r1, r7
    287c:	4b22      	ldr	r3, [pc, #136]	; (2908 <hif_send+0x218>)
    287e:	4798      	blx	r3
    2880:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    2882:	d1c8      	bne.n	2816 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    2884:	9b06      	ldr	r3, [sp, #24]
    2886:	18f3      	adds	r3, r6, r3
    2888:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    288a:	9b05      	ldr	r3, [sp, #20]
    288c:	009b      	lsls	r3, r3, #2
    288e:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    2890:	9b04      	ldr	r3, [sp, #16]
    2892:	2202      	movs	r2, #2
    2894:	4313      	orrs	r3, r2
    2896:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    2898:	9904      	ldr	r1, [sp, #16]
    289a:	481c      	ldr	r0, [pc, #112]	; (290c <hif_send+0x21c>)
    289c:	4b0e      	ldr	r3, [pc, #56]	; (28d8 <hif_send+0x1e8>)
    289e:	4798      	blx	r3
    28a0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    28a2:	d1b8      	bne.n	2816 <hif_send+0x126>
 	ret = hif_chip_sleep();
    28a4:	4b1a      	ldr	r3, [pc, #104]	; (2910 <hif_send+0x220>)
    28a6:	4798      	blx	r3
    28a8:	0004      	movs	r4, r0
	return ret;
    28aa:	e7b6      	b.n	281a <hif_send+0x12a>
			ret = hif_chip_sleep();
    28ac:	4b18      	ldr	r3, [pc, #96]	; (2910 <hif_send+0x220>)
    28ae:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    28b0:	2403      	movs	r4, #3
    28b2:	4264      	negs	r4, r4
			goto ERR2;
    28b4:	e7b1      	b.n	281a <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    28b6:	22cb      	movs	r2, #203	; 0xcb
    28b8:	0052      	lsls	r2, r2, #1
    28ba:	4916      	ldr	r1, [pc, #88]	; (2914 <hif_send+0x224>)
    28bc:	4816      	ldr	r0, [pc, #88]	; (2918 <hif_send+0x228>)
    28be:	4b0c      	ldr	r3, [pc, #48]	; (28f0 <hif_send+0x200>)
    28c0:	4798      	blx	r3
    28c2:	4816      	ldr	r0, [pc, #88]	; (291c <hif_send+0x22c>)
    28c4:	4b0c      	ldr	r3, [pc, #48]	; (28f8 <hif_send+0x208>)
    28c6:	4798      	blx	r3
    28c8:	200d      	movs	r0, #13
    28ca:	4b0c      	ldr	r3, [pc, #48]	; (28fc <hif_send+0x20c>)
    28cc:	4798      	blx	r3
		goto ERR2;
    28ce:	e7a4      	b.n	281a <hif_send+0x12a>
    28d0:	00002661 	.word	0x00002661
    28d4:	0000108c 	.word	0x0000108c
    28d8:	00003a31 	.word	0x00003a31
    28dc:	00001078 	.word	0x00001078
    28e0:	000003e7 	.word	0x000003e7
    28e4:	00003a25 	.word	0x00003a25
    28e8:	000021d5 	.word	0x000021d5
    28ec:	00010e3c 	.word	0x00010e3c
    28f0:	0000b339 	.word	0x0000b339
    28f4:	00010e48 	.word	0x00010e48
    28f8:	0000b455 	.word	0x0000b455
    28fc:	0000b36d 	.word	0x0000b36d
    2900:	00150400 	.word	0x00150400
    2904:	0000269d 	.word	0x0000269d
    2908:	00003aa5 	.word	0x00003aa5
    290c:	0000106c 	.word	0x0000106c
    2910:	000026b9 	.word	0x000026b9
    2914:	00010b54 	.word	0x00010b54
    2918:	00010b0c 	.word	0x00010b0c
    291c:	00010e58 	.word	0x00010e58

00002920 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    2920:	b5f0      	push	{r4, r5, r6, r7, lr}
    2922:	46ce      	mov	lr, r9
    2924:	4647      	mov	r7, r8
    2926:	b580      	push	{r7, lr}
    2928:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    292a:	4bcf      	ldr	r3, [pc, #828]	; (2c68 <hif_handle_isr+0x348>)
    292c:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    292e:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    2930:	e080      	b.n	2a34 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    2932:	4bcd      	ldr	r3, [pc, #820]	; (2c68 <hif_handle_isr+0x348>)
    2934:	9a05      	ldr	r2, [sp, #20]
    2936:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    2938:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    293a:	af04      	add	r7, sp, #16
    293c:	2204      	movs	r2, #4
    293e:	0039      	movs	r1, r7
    2940:	9805      	ldr	r0, [sp, #20]
    2942:	4bca      	ldr	r3, [pc, #808]	; (2c6c <hif_handle_isr+0x34c>)
    2944:	4798      	blx	r3
    2946:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    2948:	887b      	ldrh	r3, [r7, #2]
    294a:	b29b      	uxth	r3, r3
    294c:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    294e:	2800      	cmp	r0, #0
    2950:	d133      	bne.n	29ba <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    2952:	ab04      	add	r3, sp, #16
    2954:	885b      	ldrh	r3, [r3, #2]
    2956:	b29b      	uxth	r3, r3
    2958:	429d      	cmp	r5, r3
    295a:	d004      	beq.n	2966 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    295c:	ab04      	add	r3, sp, #16
    295e:	885b      	ldrh	r3, [r3, #2]
    2960:	1aeb      	subs	r3, r5, r3
    2962:	2b04      	cmp	r3, #4
    2964:	dc39      	bgt.n	29da <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    2966:	ab04      	add	r3, sp, #16
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	2b01      	cmp	r3, #1
    296c:	d04e      	beq.n	2a0c <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    296e:	ab04      	add	r3, sp, #16
    2970:	781b      	ldrb	r3, [r3, #0]
    2972:	2b02      	cmp	r3, #2
    2974:	d078      	beq.n	2a68 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    2976:	ab04      	add	r3, sp, #16
    2978:	781b      	ldrb	r3, [r3, #0]
    297a:	2b04      	cmp	r3, #4
    297c:	d100      	bne.n	2980 <hif_handle_isr+0x60>
    297e:	e090      	b.n	2aa2 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    2980:	ab04      	add	r3, sp, #16
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	2b06      	cmp	r3, #6
    2986:	d100      	bne.n	298a <hif_handle_isr+0x6a>
    2988:	e0a8      	b.n	2adc <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    298a:	ab04      	add	r3, sp, #16
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	2b07      	cmp	r3, #7
    2990:	d100      	bne.n	2994 <hif_handle_isr+0x74>
    2992:	e0bf      	b.n	2b14 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    2994:	ab04      	add	r3, sp, #16
    2996:	781b      	ldrb	r3, [r3, #0]
    2998:	2b05      	cmp	r3, #5
    299a:	d100      	bne.n	299e <hif_handle_isr+0x7e>
    299c:	e0d6      	b.n	2b4c <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    299e:	4ab4      	ldr	r2, [pc, #720]	; (2c70 <hif_handle_isr+0x350>)
    29a0:	49b4      	ldr	r1, [pc, #720]	; (2c74 <hif_handle_isr+0x354>)
    29a2:	48b5      	ldr	r0, [pc, #724]	; (2c78 <hif_handle_isr+0x358>)
    29a4:	4bb5      	ldr	r3, [pc, #724]	; (2c7c <hif_handle_isr+0x35c>)
    29a6:	4798      	blx	r3
    29a8:	48b5      	ldr	r0, [pc, #724]	; (2c80 <hif_handle_isr+0x360>)
    29aa:	4bb6      	ldr	r3, [pc, #728]	; (2c84 <hif_handle_isr+0x364>)
    29ac:	4798      	blx	r3
    29ae:	200d      	movs	r0, #13
    29b0:	4bb5      	ldr	r3, [pc, #724]	; (2c88 <hif_handle_isr+0x368>)
    29b2:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    29b4:	2406      	movs	r4, #6
    29b6:	4264      	negs	r4, r4
    29b8:	e116      	b.n	2be8 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    29ba:	22d2      	movs	r2, #210	; 0xd2
    29bc:	32ff      	adds	r2, #255	; 0xff
    29be:	49ad      	ldr	r1, [pc, #692]	; (2c74 <hif_handle_isr+0x354>)
    29c0:	48ad      	ldr	r0, [pc, #692]	; (2c78 <hif_handle_isr+0x358>)
    29c2:	4bae      	ldr	r3, [pc, #696]	; (2c7c <hif_handle_isr+0x35c>)
    29c4:	4798      	blx	r3
    29c6:	48b1      	ldr	r0, [pc, #708]	; (2c8c <hif_handle_isr+0x36c>)
    29c8:	4bae      	ldr	r3, [pc, #696]	; (2c84 <hif_handle_isr+0x364>)
    29ca:	4798      	blx	r3
    29cc:	200d      	movs	r0, #13
    29ce:	4bae      	ldr	r3, [pc, #696]	; (2c88 <hif_handle_isr+0x368>)
    29d0:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    29d2:	2001      	movs	r0, #1
    29d4:	4bae      	ldr	r3, [pc, #696]	; (2c90 <hif_handle_isr+0x370>)
    29d6:	4798      	blx	r3
    29d8:	e106      	b.n	2be8 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    29da:	22ed      	movs	r2, #237	; 0xed
    29dc:	0052      	lsls	r2, r2, #1
    29de:	49a5      	ldr	r1, [pc, #660]	; (2c74 <hif_handle_isr+0x354>)
    29e0:	48a5      	ldr	r0, [pc, #660]	; (2c78 <hif_handle_isr+0x358>)
    29e2:	4ca6      	ldr	r4, [pc, #664]	; (2c7c <hif_handle_isr+0x35c>)
    29e4:	47a0      	blx	r4
    29e6:	a904      	add	r1, sp, #16
    29e8:	884a      	ldrh	r2, [r1, #2]
    29ea:	b292      	uxth	r2, r2
    29ec:	780b      	ldrb	r3, [r1, #0]
    29ee:	b2db      	uxtb	r3, r3
    29f0:	7849      	ldrb	r1, [r1, #1]
    29f2:	9100      	str	r1, [sp, #0]
    29f4:	0029      	movs	r1, r5
    29f6:	48a7      	ldr	r0, [pc, #668]	; (2c94 <hif_handle_isr+0x374>)
    29f8:	47a0      	blx	r4
    29fa:	200d      	movs	r0, #13
    29fc:	4ba2      	ldr	r3, [pc, #648]	; (2c88 <hif_handle_isr+0x368>)
    29fe:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    2a00:	2001      	movs	r0, #1
    2a02:	4ba3      	ldr	r3, [pc, #652]	; (2c90 <hif_handle_isr+0x370>)
    2a04:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    2a06:	2406      	movs	r4, #6
    2a08:	4264      	negs	r4, r4
    2a0a:	e0ed      	b.n	2be8 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    2a0c:	4b96      	ldr	r3, [pc, #600]	; (2c68 <hif_handle_isr+0x348>)
    2a0e:	68db      	ldr	r3, [r3, #12]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d01c      	beq.n	2a4e <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2a14:	4b94      	ldr	r3, [pc, #592]	; (2c68 <hif_handle_isr+0x348>)
    2a16:	68db      	ldr	r3, [r3, #12]
    2a18:	aa04      	add	r2, sp, #16
    2a1a:	7850      	ldrb	r0, [r2, #1]
    2a1c:	b2c0      	uxtb	r0, r0
    2a1e:	8851      	ldrh	r1, [r2, #2]
    2a20:	9a05      	ldr	r2, [sp, #20]
    2a22:	3208      	adds	r2, #8
    2a24:	3908      	subs	r1, #8
    2a26:	b289      	uxth	r1, r1
    2a28:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    2a2a:	4b8f      	ldr	r3, [pc, #572]	; (2c68 <hif_handle_isr+0x348>)
    2a2c:	789b      	ldrb	r3, [r3, #2]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d000      	beq.n	2a34 <hif_handle_isr+0x114>
    2a32:	e09c      	b.n	2b6e <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    2a34:	4643      	mov	r3, r8
    2a36:	78db      	ldrb	r3, [r3, #3]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d100      	bne.n	2a3e <hif_handle_isr+0x11e>
    2a3c:	e158      	b.n	2cf0 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    2a3e:	464b      	mov	r3, r9
    2a40:	78db      	ldrb	r3, [r3, #3]
    2a42:	3b01      	subs	r3, #1
    2a44:	b2db      	uxtb	r3, r3
    2a46:	464a      	mov	r2, r9
    2a48:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    2a4a:	4e93      	ldr	r6, [pc, #588]	; (2c98 <hif_handle_isr+0x378>)
    2a4c:	e0d7      	b.n	2bfe <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    2a4e:	22f3      	movs	r2, #243	; 0xf3
    2a50:	0052      	lsls	r2, r2, #1
    2a52:	4988      	ldr	r1, [pc, #544]	; (2c74 <hif_handle_isr+0x354>)
    2a54:	4888      	ldr	r0, [pc, #544]	; (2c78 <hif_handle_isr+0x358>)
    2a56:	4b89      	ldr	r3, [pc, #548]	; (2c7c <hif_handle_isr+0x35c>)
    2a58:	4798      	blx	r3
    2a5a:	4890      	ldr	r0, [pc, #576]	; (2c9c <hif_handle_isr+0x37c>)
    2a5c:	4b89      	ldr	r3, [pc, #548]	; (2c84 <hif_handle_isr+0x364>)
    2a5e:	4798      	blx	r3
    2a60:	200d      	movs	r0, #13
    2a62:	4b89      	ldr	r3, [pc, #548]	; (2c88 <hif_handle_isr+0x368>)
    2a64:	4798      	blx	r3
    2a66:	e7e0      	b.n	2a2a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    2a68:	4b7f      	ldr	r3, [pc, #508]	; (2c68 <hif_handle_isr+0x348>)
    2a6a:	691b      	ldr	r3, [r3, #16]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d00b      	beq.n	2a88 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2a70:	4b7d      	ldr	r3, [pc, #500]	; (2c68 <hif_handle_isr+0x348>)
    2a72:	691b      	ldr	r3, [r3, #16]
    2a74:	aa04      	add	r2, sp, #16
    2a76:	7850      	ldrb	r0, [r2, #1]
    2a78:	b2c0      	uxtb	r0, r0
    2a7a:	8851      	ldrh	r1, [r2, #2]
    2a7c:	9a05      	ldr	r2, [sp, #20]
    2a7e:	3208      	adds	r2, #8
    2a80:	3908      	subs	r1, #8
    2a82:	b289      	uxth	r1, r1
    2a84:	4798      	blx	r3
    2a86:	e7d0      	b.n	2a2a <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    2a88:	22f7      	movs	r2, #247	; 0xf7
    2a8a:	0052      	lsls	r2, r2, #1
    2a8c:	4979      	ldr	r1, [pc, #484]	; (2c74 <hif_handle_isr+0x354>)
    2a8e:	487a      	ldr	r0, [pc, #488]	; (2c78 <hif_handle_isr+0x358>)
    2a90:	4b7a      	ldr	r3, [pc, #488]	; (2c7c <hif_handle_isr+0x35c>)
    2a92:	4798      	blx	r3
    2a94:	4882      	ldr	r0, [pc, #520]	; (2ca0 <hif_handle_isr+0x380>)
    2a96:	4b7b      	ldr	r3, [pc, #492]	; (2c84 <hif_handle_isr+0x364>)
    2a98:	4798      	blx	r3
    2a9a:	200d      	movs	r0, #13
    2a9c:	4b7a      	ldr	r3, [pc, #488]	; (2c88 <hif_handle_isr+0x368>)
    2a9e:	4798      	blx	r3
    2aa0:	e7c3      	b.n	2a2a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    2aa2:	4b71      	ldr	r3, [pc, #452]	; (2c68 <hif_handle_isr+0x348>)
    2aa4:	695b      	ldr	r3, [r3, #20]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d00b      	beq.n	2ac2 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2aaa:	4b6f      	ldr	r3, [pc, #444]	; (2c68 <hif_handle_isr+0x348>)
    2aac:	695b      	ldr	r3, [r3, #20]
    2aae:	aa04      	add	r2, sp, #16
    2ab0:	7850      	ldrb	r0, [r2, #1]
    2ab2:	b2c0      	uxtb	r0, r0
    2ab4:	8851      	ldrh	r1, [r2, #2]
    2ab6:	9a05      	ldr	r2, [sp, #20]
    2ab8:	3208      	adds	r2, #8
    2aba:	3908      	subs	r1, #8
    2abc:	b289      	uxth	r1, r1
    2abe:	4798      	blx	r3
    2ac0:	e7b3      	b.n	2a2a <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    2ac2:	22fb      	movs	r2, #251	; 0xfb
    2ac4:	0052      	lsls	r2, r2, #1
    2ac6:	496b      	ldr	r1, [pc, #428]	; (2c74 <hif_handle_isr+0x354>)
    2ac8:	486b      	ldr	r0, [pc, #428]	; (2c78 <hif_handle_isr+0x358>)
    2aca:	4b6c      	ldr	r3, [pc, #432]	; (2c7c <hif_handle_isr+0x35c>)
    2acc:	4798      	blx	r3
    2ace:	4875      	ldr	r0, [pc, #468]	; (2ca4 <hif_handle_isr+0x384>)
    2ad0:	4b6c      	ldr	r3, [pc, #432]	; (2c84 <hif_handle_isr+0x364>)
    2ad2:	4798      	blx	r3
    2ad4:	200d      	movs	r0, #13
    2ad6:	4b6c      	ldr	r3, [pc, #432]	; (2c88 <hif_handle_isr+0x368>)
    2ad8:	4798      	blx	r3
    2ada:	e7a6      	b.n	2a2a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    2adc:	4b62      	ldr	r3, [pc, #392]	; (2c68 <hif_handle_isr+0x348>)
    2ade:	6a1b      	ldr	r3, [r3, #32]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d00b      	beq.n	2afc <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2ae4:	4b60      	ldr	r3, [pc, #384]	; (2c68 <hif_handle_isr+0x348>)
    2ae6:	6a1b      	ldr	r3, [r3, #32]
    2ae8:	aa04      	add	r2, sp, #16
    2aea:	7850      	ldrb	r0, [r2, #1]
    2aec:	b2c0      	uxtb	r0, r0
    2aee:	8851      	ldrh	r1, [r2, #2]
    2af0:	9a05      	ldr	r2, [sp, #20]
    2af2:	3208      	adds	r2, #8
    2af4:	3908      	subs	r1, #8
    2af6:	b289      	uxth	r1, r1
    2af8:	4798      	blx	r3
    2afa:	e796      	b.n	2a2a <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    2afc:	4a6a      	ldr	r2, [pc, #424]	; (2ca8 <hif_handle_isr+0x388>)
    2afe:	495d      	ldr	r1, [pc, #372]	; (2c74 <hif_handle_isr+0x354>)
    2b00:	485d      	ldr	r0, [pc, #372]	; (2c78 <hif_handle_isr+0x358>)
    2b02:	4b5e      	ldr	r3, [pc, #376]	; (2c7c <hif_handle_isr+0x35c>)
    2b04:	4798      	blx	r3
    2b06:	4869      	ldr	r0, [pc, #420]	; (2cac <hif_handle_isr+0x38c>)
    2b08:	4b5e      	ldr	r3, [pc, #376]	; (2c84 <hif_handle_isr+0x364>)
    2b0a:	4798      	blx	r3
    2b0c:	200d      	movs	r0, #13
    2b0e:	4b5e      	ldr	r3, [pc, #376]	; (2c88 <hif_handle_isr+0x368>)
    2b10:	4798      	blx	r3
    2b12:	e78a      	b.n	2a2a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    2b14:	4b54      	ldr	r3, [pc, #336]	; (2c68 <hif_handle_isr+0x348>)
    2b16:	699b      	ldr	r3, [r3, #24]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d00b      	beq.n	2b34 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2b1c:	4b52      	ldr	r3, [pc, #328]	; (2c68 <hif_handle_isr+0x348>)
    2b1e:	699b      	ldr	r3, [r3, #24]
    2b20:	aa04      	add	r2, sp, #16
    2b22:	7850      	ldrb	r0, [r2, #1]
    2b24:	b2c0      	uxtb	r0, r0
    2b26:	8851      	ldrh	r1, [r2, #2]
    2b28:	9a05      	ldr	r2, [sp, #20]
    2b2a:	3208      	adds	r2, #8
    2b2c:	3908      	subs	r1, #8
    2b2e:	b289      	uxth	r1, r1
    2b30:	4798      	blx	r3
    2b32:	e77a      	b.n	2a2a <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    2b34:	4a5e      	ldr	r2, [pc, #376]	; (2cb0 <hif_handle_isr+0x390>)
    2b36:	494f      	ldr	r1, [pc, #316]	; (2c74 <hif_handle_isr+0x354>)
    2b38:	484f      	ldr	r0, [pc, #316]	; (2c78 <hif_handle_isr+0x358>)
    2b3a:	4b50      	ldr	r3, [pc, #320]	; (2c7c <hif_handle_isr+0x35c>)
    2b3c:	4798      	blx	r3
    2b3e:	485d      	ldr	r0, [pc, #372]	; (2cb4 <hif_handle_isr+0x394>)
    2b40:	4b50      	ldr	r3, [pc, #320]	; (2c84 <hif_handle_isr+0x364>)
    2b42:	4798      	blx	r3
    2b44:	200d      	movs	r0, #13
    2b46:	4b50      	ldr	r3, [pc, #320]	; (2c88 <hif_handle_isr+0x368>)
    2b48:	4798      	blx	r3
    2b4a:	e76e      	b.n	2a2a <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    2b4c:	4b46      	ldr	r3, [pc, #280]	; (2c68 <hif_handle_isr+0x348>)
    2b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b50:	2b00      	cmp	r3, #0
    2b52:	d100      	bne.n	2b56 <hif_handle_isr+0x236>
    2b54:	e769      	b.n	2a2a <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2b56:	4b44      	ldr	r3, [pc, #272]	; (2c68 <hif_handle_isr+0x348>)
    2b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b5a:	aa04      	add	r2, sp, #16
    2b5c:	7850      	ldrb	r0, [r2, #1]
    2b5e:	b2c0      	uxtb	r0, r0
    2b60:	8851      	ldrh	r1, [r2, #2]
    2b62:	9a05      	ldr	r2, [sp, #20]
    2b64:	3208      	adds	r2, #8
    2b66:	3908      	subs	r1, #8
    2b68:	b289      	uxth	r1, r1
    2b6a:	4798      	blx	r3
    2b6c:	e75d      	b.n	2a2a <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    2b6e:	4a52      	ldr	r2, [pc, #328]	; (2cb8 <hif_handle_isr+0x398>)
    2b70:	4940      	ldr	r1, [pc, #256]	; (2c74 <hif_handle_isr+0x354>)
    2b72:	4841      	ldr	r0, [pc, #260]	; (2c78 <hif_handle_isr+0x358>)
    2b74:	4c41      	ldr	r4, [pc, #260]	; (2c7c <hif_handle_isr+0x35c>)
    2b76:	47a0      	blx	r4
    2b78:	ab04      	add	r3, sp, #16
    2b7a:	7819      	ldrb	r1, [r3, #0]
    2b7c:	b2c9      	uxtb	r1, r1
    2b7e:	785a      	ldrb	r2, [r3, #1]
    2b80:	b2d2      	uxtb	r2, r2
    2b82:	484e      	ldr	r0, [pc, #312]	; (2cbc <hif_handle_isr+0x39c>)
    2b84:	47a0      	blx	r4
    2b86:	200d      	movs	r0, #13
    2b88:	4b3f      	ldr	r3, [pc, #252]	; (2c88 <hif_handle_isr+0x368>)
    2b8a:	4798      	blx	r3
					ret = hif_set_rx_done();
    2b8c:	4b4c      	ldr	r3, [pc, #304]	; (2cc0 <hif_handle_isr+0x3a0>)
    2b8e:	4798      	blx	r3
    2b90:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    2b92:	d129      	bne.n	2be8 <hif_handle_isr+0x2c8>
    2b94:	e74e      	b.n	2a34 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    2b96:	2287      	movs	r2, #135	; 0x87
    2b98:	0092      	lsls	r2, r2, #2
    2b9a:	4936      	ldr	r1, [pc, #216]	; (2c74 <hif_handle_isr+0x354>)
    2b9c:	4836      	ldr	r0, [pc, #216]	; (2c78 <hif_handle_isr+0x358>)
    2b9e:	4b37      	ldr	r3, [pc, #220]	; (2c7c <hif_handle_isr+0x35c>)
    2ba0:	4798      	blx	r3
    2ba2:	4848      	ldr	r0, [pc, #288]	; (2cc4 <hif_handle_isr+0x3a4>)
    2ba4:	4b37      	ldr	r3, [pc, #220]	; (2c84 <hif_handle_isr+0x364>)
    2ba6:	4798      	blx	r3
    2ba8:	200d      	movs	r0, #13
    2baa:	4b37      	ldr	r3, [pc, #220]	; (2c88 <hif_handle_isr+0x368>)
    2bac:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    2bae:	2402      	movs	r4, #2
    2bb0:	4264      	negs	r4, r4
    2bb2:	e019      	b.n	2be8 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    2bb4:	2289      	movs	r2, #137	; 0x89
    2bb6:	0092      	lsls	r2, r2, #2
    2bb8:	492e      	ldr	r1, [pc, #184]	; (2c74 <hif_handle_isr+0x354>)
    2bba:	482f      	ldr	r0, [pc, #188]	; (2c78 <hif_handle_isr+0x358>)
    2bbc:	4c2f      	ldr	r4, [pc, #188]	; (2c7c <hif_handle_isr+0x35c>)
    2bbe:	47a0      	blx	r4
    2bc0:	9903      	ldr	r1, [sp, #12]
    2bc2:	4841      	ldr	r0, [pc, #260]	; (2cc8 <hif_handle_isr+0x3a8>)
    2bc4:	47a0      	blx	r4
    2bc6:	200d      	movs	r0, #13
    2bc8:	4b2f      	ldr	r3, [pc, #188]	; (2c88 <hif_handle_isr+0x368>)
    2bca:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2bcc:	240c      	movs	r4, #12
    2bce:	4264      	negs	r4, r4
    2bd0:	e00a      	b.n	2be8 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    2bd2:	4a3e      	ldr	r2, [pc, #248]	; (2ccc <hif_handle_isr+0x3ac>)
    2bd4:	4927      	ldr	r1, [pc, #156]	; (2c74 <hif_handle_isr+0x354>)
    2bd6:	4828      	ldr	r0, [pc, #160]	; (2c78 <hif_handle_isr+0x358>)
    2bd8:	4b28      	ldr	r3, [pc, #160]	; (2c7c <hif_handle_isr+0x35c>)
    2bda:	4798      	blx	r3
    2bdc:	483c      	ldr	r0, [pc, #240]	; (2cd0 <hif_handle_isr+0x3b0>)
    2bde:	4b29      	ldr	r3, [pc, #164]	; (2c84 <hif_handle_isr+0x364>)
    2be0:	4798      	blx	r3
    2be2:	200d      	movs	r0, #13
    2be4:	4b28      	ldr	r3, [pc, #160]	; (2c88 <hif_handle_isr+0x368>)
    2be6:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    2be8:	4a3a      	ldr	r2, [pc, #232]	; (2cd4 <hif_handle_isr+0x3b4>)
    2bea:	493b      	ldr	r1, [pc, #236]	; (2cd8 <hif_handle_isr+0x3b8>)
    2bec:	4822      	ldr	r0, [pc, #136]	; (2c78 <hif_handle_isr+0x358>)
    2bee:	4f23      	ldr	r7, [pc, #140]	; (2c7c <hif_handle_isr+0x35c>)
    2bf0:	47b8      	blx	r7
    2bf2:	0021      	movs	r1, r4
    2bf4:	4839      	ldr	r0, [pc, #228]	; (2cdc <hif_handle_isr+0x3bc>)
    2bf6:	47b8      	blx	r7
    2bf8:	200d      	movs	r0, #13
    2bfa:	4b23      	ldr	r3, [pc, #140]	; (2c88 <hif_handle_isr+0x368>)
    2bfc:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    2bfe:	a903      	add	r1, sp, #12
    2c00:	4837      	ldr	r0, [pc, #220]	; (2ce0 <hif_handle_isr+0x3c0>)
    2c02:	47b0      	blx	r6
    2c04:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    2c06:	d1e4      	bne.n	2bd2 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    2c08:	9b03      	ldr	r3, [sp, #12]
    2c0a:	07db      	lsls	r3, r3, #31
    2c0c:	d5d2      	bpl.n	2bb4 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    2c0e:	2000      	movs	r0, #0
    2c10:	4b1f      	ldr	r3, [pc, #124]	; (2c90 <hif_handle_isr+0x370>)
    2c12:	4798      	blx	r3
			reg &= ~NBIT0;
    2c14:	2301      	movs	r3, #1
    2c16:	9903      	ldr	r1, [sp, #12]
    2c18:	4399      	bics	r1, r3
    2c1a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    2c1c:	4830      	ldr	r0, [pc, #192]	; (2ce0 <hif_handle_isr+0x3c0>)
    2c1e:	4b31      	ldr	r3, [pc, #196]	; (2ce4 <hif_handle_isr+0x3c4>)
    2c20:	4798      	blx	r3
    2c22:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    2c24:	d1e0      	bne.n	2be8 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    2c26:	2201      	movs	r2, #1
    2c28:	4b0f      	ldr	r3, [pc, #60]	; (2c68 <hif_handle_isr+0x348>)
    2c2a:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    2c2c:	9b03      	ldr	r3, [sp, #12]
    2c2e:	049d      	lsls	r5, r3, #18
    2c30:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    2c32:	d0b0      	beq.n	2b96 <hif_handle_isr+0x276>
				uint32 address = 0;
    2c34:	2300      	movs	r3, #0
    2c36:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    2c38:	a905      	add	r1, sp, #20
    2c3a:	482b      	ldr	r0, [pc, #172]	; (2ce8 <hif_handle_isr+0x3c8>)
    2c3c:	4b16      	ldr	r3, [pc, #88]	; (2c98 <hif_handle_isr+0x378>)
    2c3e:	4798      	blx	r3
    2c40:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    2c42:	d100      	bne.n	2c46 <hif_handle_isr+0x326>
    2c44:	e675      	b.n	2932 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    2c46:	22c8      	movs	r2, #200	; 0xc8
    2c48:	32ff      	adds	r2, #255	; 0xff
    2c4a:	490a      	ldr	r1, [pc, #40]	; (2c74 <hif_handle_isr+0x354>)
    2c4c:	480a      	ldr	r0, [pc, #40]	; (2c78 <hif_handle_isr+0x358>)
    2c4e:	4b0b      	ldr	r3, [pc, #44]	; (2c7c <hif_handle_isr+0x35c>)
    2c50:	4798      	blx	r3
    2c52:	4826      	ldr	r0, [pc, #152]	; (2cec <hif_handle_isr+0x3cc>)
    2c54:	4b0b      	ldr	r3, [pc, #44]	; (2c84 <hif_handle_isr+0x364>)
    2c56:	4798      	blx	r3
    2c58:	200d      	movs	r0, #13
    2c5a:	4b0b      	ldr	r3, [pc, #44]	; (2c88 <hif_handle_isr+0x368>)
    2c5c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    2c5e:	2001      	movs	r0, #1
    2c60:	4b0b      	ldr	r3, [pc, #44]	; (2c90 <hif_handle_isr+0x370>)
    2c62:	4798      	blx	r3
    2c64:	e7c0      	b.n	2be8 <hif_handle_isr+0x2c8>
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	200005d0 	.word	0x200005d0
    2c6c:	00003a3d 	.word	0x00003a3d
    2c70:	0000020f 	.word	0x0000020f
    2c74:	00010b60 	.word	0x00010b60
    2c78:	00010b0c 	.word	0x00010b0c
    2c7c:	0000b339 	.word	0x0000b339
    2c80:	00010cbc 	.word	0x00010cbc
    2c84:	0000b455 	.word	0x0000b455
    2c88:	0000b36d 	.word	0x0000b36d
    2c8c:	00010bb8 	.word	0x00010bb8
    2c90:	000022e9 	.word	0x000022e9
    2c94:	00010bd0 	.word	0x00010bd0
    2c98:	00003a25 	.word	0x00003a25
    2c9c:	00010c10 	.word	0x00010c10
    2ca0:	00010c30 	.word	0x00010c30
    2ca4:	00010c54 	.word	0x00010c54
    2ca8:	000001ff 	.word	0x000001ff
    2cac:	00010c74 	.word	0x00010c74
    2cb0:	00000206 	.word	0x00000206
    2cb4:	00010c98 	.word	0x00010c98
    2cb8:	00000215 	.word	0x00000215
    2cbc:	00010cd4 	.word	0x00010cd4
    2cc0:	0000261d 	.word	0x0000261d
    2cc4:	00010d00 	.word	0x00010d00
    2cc8:	00010d14 	.word	0x00010d14
    2ccc:	0000022d 	.word	0x0000022d
    2cd0:	00010d30 	.word	0x00010d30
    2cd4:	0000024a 	.word	0x0000024a
    2cd8:	00010b68 	.word	0x00010b68
    2cdc:	00010d54 	.word	0x00010d54
    2ce0:	00001070 	.word	0x00001070
    2ce4:	00003a31 	.word	0x00003a31
    2ce8:	00001084 	.word	0x00001084
    2cec:	00010b94 	.word	0x00010b94
			}
		}
	}

	return ret;
}
    2cf0:	2000      	movs	r0, #0
    2cf2:	b007      	add	sp, #28
    2cf4:	bc0c      	pop	{r2, r3}
    2cf6:	4690      	mov	r8, r2
    2cf8:	4699      	mov	r9, r3
    2cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002cfc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    2cfc:	b570      	push	{r4, r5, r6, lr}
    2cfe:	0014      	movs	r4, r2
    2d00:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    2d02:	2800      	cmp	r0, #0
    2d04:	d003      	beq.n	2d0e <hif_receive+0x12>
    2d06:	2900      	cmp	r1, #0
    2d08:	d001      	beq.n	2d0e <hif_receive+0x12>
    2d0a:	2a00      	cmp	r2, #0
    2d0c:	d112      	bne.n	2d34 <hif_receive+0x38>
	{
		if(isDone)
    2d0e:	2d00      	cmp	r5, #0
    2d10:	d002      	beq.n	2d18 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    2d12:	4b27      	ldr	r3, [pc, #156]	; (2db0 <hif_receive+0xb4>)
    2d14:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    2d16:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    2d18:	4a26      	ldr	r2, [pc, #152]	; (2db4 <hif_receive+0xb8>)
    2d1a:	4927      	ldr	r1, [pc, #156]	; (2db8 <hif_receive+0xbc>)
    2d1c:	4827      	ldr	r0, [pc, #156]	; (2dbc <hif_receive+0xc0>)
    2d1e:	4b28      	ldr	r3, [pc, #160]	; (2dc0 <hif_receive+0xc4>)
    2d20:	4798      	blx	r3
    2d22:	4828      	ldr	r0, [pc, #160]	; (2dc4 <hif_receive+0xc8>)
    2d24:	4b28      	ldr	r3, [pc, #160]	; (2dc8 <hif_receive+0xcc>)
    2d26:	4798      	blx	r3
    2d28:	200d      	movs	r0, #13
    2d2a:	4b28      	ldr	r3, [pc, #160]	; (2dcc <hif_receive+0xd0>)
    2d2c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2d2e:	200c      	movs	r0, #12
    2d30:	4240      	negs	r0, r0
    2d32:	e7f0      	b.n	2d16 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    2d34:	4b26      	ldr	r3, [pc, #152]	; (2dd0 <hif_receive+0xd4>)
    2d36:	689b      	ldr	r3, [r3, #8]
    2d38:	429a      	cmp	r2, r3
    2d3a:	d81a      	bhi.n	2d72 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    2d3c:	4b24      	ldr	r3, [pc, #144]	; (2dd0 <hif_receive+0xd4>)
    2d3e:	685b      	ldr	r3, [r3, #4]
    2d40:	4298      	cmp	r0, r3
    2d42:	d326      	bcc.n	2d92 <hif_receive+0x96>
    2d44:	1886      	adds	r6, r0, r2
    2d46:	4a22      	ldr	r2, [pc, #136]	; (2dd0 <hif_receive+0xd4>)
    2d48:	6853      	ldr	r3, [r2, #4]
    2d4a:	6892      	ldr	r2, [r2, #8]
    2d4c:	189b      	adds	r3, r3, r2
    2d4e:	429e      	cmp	r6, r3
    2d50:	d81f      	bhi.n	2d92 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    2d52:	0022      	movs	r2, r4
    2d54:	4b1f      	ldr	r3, [pc, #124]	; (2dd4 <hif_receive+0xd8>)
    2d56:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2d58:	2800      	cmp	r0, #0
    2d5a:	d1dc      	bne.n	2d16 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    2d5c:	4a1c      	ldr	r2, [pc, #112]	; (2dd0 <hif_receive+0xd4>)
    2d5e:	6853      	ldr	r3, [r2, #4]
    2d60:	6892      	ldr	r2, [r2, #8]
    2d62:	189b      	adds	r3, r3, r2
    2d64:	429e      	cmp	r6, r3
    2d66:	d001      	beq.n	2d6c <hif_receive+0x70>
    2d68:	2d00      	cmp	r5, #0
    2d6a:	d0d4      	beq.n	2d16 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    2d6c:	4b10      	ldr	r3, [pc, #64]	; (2db0 <hif_receive+0xb4>)
    2d6e:	4798      	blx	r3
    2d70:	e7d1      	b.n	2d16 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    2d72:	4a19      	ldr	r2, [pc, #100]	; (2dd8 <hif_receive+0xdc>)
    2d74:	4910      	ldr	r1, [pc, #64]	; (2db8 <hif_receive+0xbc>)
    2d76:	4811      	ldr	r0, [pc, #68]	; (2dbc <hif_receive+0xc0>)
    2d78:	4d11      	ldr	r5, [pc, #68]	; (2dc0 <hif_receive+0xc4>)
    2d7a:	47a8      	blx	r5
    2d7c:	4b14      	ldr	r3, [pc, #80]	; (2dd0 <hif_receive+0xd4>)
    2d7e:	689a      	ldr	r2, [r3, #8]
    2d80:	0021      	movs	r1, r4
    2d82:	4816      	ldr	r0, [pc, #88]	; (2ddc <hif_receive+0xe0>)
    2d84:	47a8      	blx	r5
    2d86:	200d      	movs	r0, #13
    2d88:	4b10      	ldr	r3, [pc, #64]	; (2dcc <hif_receive+0xd0>)
    2d8a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2d8c:	200c      	movs	r0, #12
    2d8e:	4240      	negs	r0, r0
		goto ERR1;
    2d90:	e7c1      	b.n	2d16 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    2d92:	4a13      	ldr	r2, [pc, #76]	; (2de0 <hif_receive+0xe4>)
    2d94:	4908      	ldr	r1, [pc, #32]	; (2db8 <hif_receive+0xbc>)
    2d96:	4809      	ldr	r0, [pc, #36]	; (2dbc <hif_receive+0xc0>)
    2d98:	4b09      	ldr	r3, [pc, #36]	; (2dc0 <hif_receive+0xc4>)
    2d9a:	4798      	blx	r3
    2d9c:	4811      	ldr	r0, [pc, #68]	; (2de4 <hif_receive+0xe8>)
    2d9e:	4b0a      	ldr	r3, [pc, #40]	; (2dc8 <hif_receive+0xcc>)
    2da0:	4798      	blx	r3
    2da2:	200d      	movs	r0, #13
    2da4:	4b09      	ldr	r3, [pc, #36]	; (2dcc <hif_receive+0xd0>)
    2da6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2da8:	200c      	movs	r0, #12
    2daa:	4240      	negs	r0, r0
		goto ERR1;
    2dac:	e7b3      	b.n	2d16 <hif_receive+0x1a>
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	0000261d 	.word	0x0000261d
    2db4:	0000026b 	.word	0x0000026b
    2db8:	00010b78 	.word	0x00010b78
    2dbc:	00010b0c 	.word	0x00010b0c
    2dc0:	0000b339 	.word	0x0000b339
    2dc4:	00010d84 	.word	0x00010d84
    2dc8:	0000b455 	.word	0x0000b455
    2dcc:	0000b36d 	.word	0x0000b36d
    2dd0:	200005d0 	.word	0x200005d0
    2dd4:	00003a3d 	.word	0x00003a3d
    2dd8:	00000273 	.word	0x00000273
    2ddc:	00010da4 	.word	0x00010da4
    2de0:	00000279 	.word	0x00000279
    2de4:	00010dec 	.word	0x00010dec

00002de8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    2de8:	b570      	push	{r4, r5, r6, lr}
    2dea:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    2dec:	2807      	cmp	r0, #7
    2dee:	d81f      	bhi.n	2e30 <hif_register_cb+0x48>
    2df0:	0083      	lsls	r3, r0, #2
    2df2:	4a16      	ldr	r2, [pc, #88]	; (2e4c <hif_register_cb+0x64>)
    2df4:	58d3      	ldr	r3, [r2, r3]
    2df6:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    2df8:	4b15      	ldr	r3, [pc, #84]	; (2e50 <hif_register_cb+0x68>)
    2dfa:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    2dfc:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    2dfe:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    2e00:	4b13      	ldr	r3, [pc, #76]	; (2e50 <hif_register_cb+0x68>)
    2e02:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    2e04:	2000      	movs	r0, #0
			break;
    2e06:	e7fa      	b.n	2dfe <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    2e08:	4b11      	ldr	r3, [pc, #68]	; (2e50 <hif_register_cb+0x68>)
    2e0a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    2e0c:	2000      	movs	r0, #0
			break;
    2e0e:	e7f6      	b.n	2dfe <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    2e10:	4b0f      	ldr	r3, [pc, #60]	; (2e50 <hif_register_cb+0x68>)
    2e12:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    2e14:	2000      	movs	r0, #0
			break;
    2e16:	e7f2      	b.n	2dfe <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    2e18:	4b0d      	ldr	r3, [pc, #52]	; (2e50 <hif_register_cb+0x68>)
    2e1a:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    2e1c:	2000      	movs	r0, #0
			break;
    2e1e:	e7ee      	b.n	2dfe <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    2e20:	4b0b      	ldr	r3, [pc, #44]	; (2e50 <hif_register_cb+0x68>)
    2e22:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    2e24:	2000      	movs	r0, #0
			break;
    2e26:	e7ea      	b.n	2dfe <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    2e28:	4b09      	ldr	r3, [pc, #36]	; (2e50 <hif_register_cb+0x68>)
    2e2a:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    2e2c:	2000      	movs	r0, #0
			break;
    2e2e:	e7e6      	b.n	2dfe <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    2e30:	4a08      	ldr	r2, [pc, #32]	; (2e54 <hif_register_cb+0x6c>)
    2e32:	4909      	ldr	r1, [pc, #36]	; (2e58 <hif_register_cb+0x70>)
    2e34:	4809      	ldr	r0, [pc, #36]	; (2e5c <hif_register_cb+0x74>)
    2e36:	4d0a      	ldr	r5, [pc, #40]	; (2e60 <hif_register_cb+0x78>)
    2e38:	47a8      	blx	r5
    2e3a:	0021      	movs	r1, r4
    2e3c:	4809      	ldr	r0, [pc, #36]	; (2e64 <hif_register_cb+0x7c>)
    2e3e:	47a8      	blx	r5
    2e40:	200d      	movs	r0, #13
    2e42:	4b09      	ldr	r3, [pc, #36]	; (2e68 <hif_register_cb+0x80>)
    2e44:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2e46:	200c      	movs	r0, #12
    2e48:	4240      	negs	r0, r0
			break;
    2e4a:	e7d8      	b.n	2dfe <hif_register_cb+0x16>
    2e4c:	00010b34 	.word	0x00010b34
    2e50:	200005d0 	.word	0x200005d0
    2e54:	000002b1 	.word	0x000002b1
    2e58:	00010b84 	.word	0x00010b84
    2e5c:	00010b0c 	.word	0x00010b0c
    2e60:	0000b339 	.word	0x0000b339
    2e64:	00010e30 	.word	0x00010e30
    2e68:	0000b36d 	.word	0x0000b36d

00002e6c <hif_init>:
{
    2e6c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    2e6e:	2228      	movs	r2, #40	; 0x28
    2e70:	2100      	movs	r1, #0
    2e72:	4806      	ldr	r0, [pc, #24]	; (2e8c <hif_init+0x20>)
    2e74:	4b06      	ldr	r3, [pc, #24]	; (2e90 <hif_init+0x24>)
    2e76:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    2e78:	4806      	ldr	r0, [pc, #24]	; (2e94 <hif_init+0x28>)
    2e7a:	4b07      	ldr	r3, [pc, #28]	; (2e98 <hif_init+0x2c>)
    2e7c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    2e7e:	4907      	ldr	r1, [pc, #28]	; (2e9c <hif_init+0x30>)
    2e80:	2003      	movs	r0, #3
    2e82:	4b07      	ldr	r3, [pc, #28]	; (2ea0 <hif_init+0x34>)
    2e84:	4798      	blx	r3
}
    2e86:	2000      	movs	r0, #0
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	200005d0 	.word	0x200005d0
    2e90:	000025dd 	.word	0x000025dd
    2e94:	00002609 	.word	0x00002609
    2e98:	00002291 	.word	0x00002291
    2e9c:	00002619 	.word	0x00002619
    2ea0:	00002de9 	.word	0x00002de9

00002ea4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    2ea4:	b530      	push	{r4, r5, lr}
    2ea6:	b09f      	sub	sp, #124	; 0x7c
    2ea8:	0004      	movs	r4, r0
    2eaa:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    2eac:	282c      	cmp	r0, #44	; 0x2c
    2eae:	d02f      	beq.n	2f10 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    2eb0:	281b      	cmp	r0, #27
    2eb2:	d03d      	beq.n	2f30 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    2eb4:	2806      	cmp	r0, #6
    2eb6:	d04b      	beq.n	2f50 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    2eb8:	280e      	cmp	r0, #14
    2eba:	d027      	beq.n	2f0c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    2ebc:	2832      	cmp	r0, #50	; 0x32
    2ebe:	d057      	beq.n	2f70 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    2ec0:	282f      	cmp	r0, #47	; 0x2f
    2ec2:	d065      	beq.n	2f90 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    2ec4:	2834      	cmp	r0, #52	; 0x34
    2ec6:	d100      	bne.n	2eca <m2m_wifi_cb+0x26>
    2ec8:	e077      	b.n	2fba <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    2eca:	2811      	cmp	r0, #17
    2ecc:	d100      	bne.n	2ed0 <m2m_wifi_cb+0x2c>
    2ece:	e096      	b.n	2ffe <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    2ed0:	2813      	cmp	r0, #19
    2ed2:	d100      	bne.n	2ed6 <m2m_wifi_cb+0x32>
    2ed4:	e0ac      	b.n	3030 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    2ed6:	2804      	cmp	r0, #4
    2ed8:	d100      	bne.n	2edc <m2m_wifi_cb+0x38>
    2eda:	e0bb      	b.n	3054 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    2edc:	2865      	cmp	r0, #101	; 0x65
    2ede:	d100      	bne.n	2ee2 <m2m_wifi_cb+0x3e>
    2ee0:	e0ca      	b.n	3078 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    2ee2:	2809      	cmp	r0, #9
    2ee4:	d100      	bne.n	2ee8 <m2m_wifi_cb+0x44>
    2ee6:	e0d9      	b.n	309c <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    2ee8:	282a      	cmp	r0, #42	; 0x2a
    2eea:	d100      	bne.n	2eee <m2m_wifi_cb+0x4a>
    2eec:	e0e8      	b.n	30c0 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    2eee:	2820      	cmp	r0, #32
    2ef0:	d100      	bne.n	2ef4 <m2m_wifi_cb+0x50>
    2ef2:	e0f7      	b.n	30e4 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    2ef4:	2295      	movs	r2, #149	; 0x95
    2ef6:	0052      	lsls	r2, r2, #1
    2ef8:	4989      	ldr	r1, [pc, #548]	; (3120 <m2m_wifi_cb+0x27c>)
    2efa:	488a      	ldr	r0, [pc, #552]	; (3124 <m2m_wifi_cb+0x280>)
    2efc:	4d8a      	ldr	r5, [pc, #552]	; (3128 <m2m_wifi_cb+0x284>)
    2efe:	47a8      	blx	r5
    2f00:	0021      	movs	r1, r4
    2f02:	488a      	ldr	r0, [pc, #552]	; (312c <m2m_wifi_cb+0x288>)
    2f04:	47a8      	blx	r5
    2f06:	200d      	movs	r0, #13
    2f08:	4b89      	ldr	r3, [pc, #548]	; (3130 <m2m_wifi_cb+0x28c>)
    2f0a:	4798      	blx	r3
	}
}
    2f0c:	b01f      	add	sp, #124	; 0x7c
    2f0e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    2f10:	2300      	movs	r3, #0
    2f12:	2204      	movs	r2, #4
    2f14:	a903      	add	r1, sp, #12
    2f16:	0028      	movs	r0, r5
    2f18:	4c86      	ldr	r4, [pc, #536]	; (3134 <m2m_wifi_cb+0x290>)
    2f1a:	47a0      	blx	r4
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d1f5      	bne.n	2f0c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2f20:	4b85      	ldr	r3, [pc, #532]	; (3138 <m2m_wifi_cb+0x294>)
    2f22:	681b      	ldr	r3, [r3, #0]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d0f1      	beq.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    2f28:	a903      	add	r1, sp, #12
    2f2a:	302c      	adds	r0, #44	; 0x2c
    2f2c:	4798      	blx	r3
    2f2e:	e7ed      	b.n	2f0c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    2f30:	2300      	movs	r3, #0
    2f32:	2208      	movs	r2, #8
    2f34:	a903      	add	r1, sp, #12
    2f36:	0028      	movs	r0, r5
    2f38:	4c7e      	ldr	r4, [pc, #504]	; (3134 <m2m_wifi_cb+0x290>)
    2f3a:	47a0      	blx	r4
    2f3c:	2800      	cmp	r0, #0
    2f3e:	d1e5      	bne.n	2f0c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2f40:	4b7d      	ldr	r3, [pc, #500]	; (3138 <m2m_wifi_cb+0x294>)
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	2b00      	cmp	r3, #0
    2f46:	d0e1      	beq.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    2f48:	a903      	add	r1, sp, #12
    2f4a:	301b      	adds	r0, #27
    2f4c:	4798      	blx	r3
    2f4e:	e7dd      	b.n	2f0c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    2f50:	2301      	movs	r3, #1
    2f52:	2230      	movs	r2, #48	; 0x30
    2f54:	a903      	add	r1, sp, #12
    2f56:	0028      	movs	r0, r5
    2f58:	4c76      	ldr	r4, [pc, #472]	; (3134 <m2m_wifi_cb+0x290>)
    2f5a:	47a0      	blx	r4
    2f5c:	2800      	cmp	r0, #0
    2f5e:	d1d5      	bne.n	2f0c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    2f60:	4b75      	ldr	r3, [pc, #468]	; (3138 <m2m_wifi_cb+0x294>)
    2f62:	681b      	ldr	r3, [r3, #0]
    2f64:	2b00      	cmp	r3, #0
    2f66:	d0d1      	beq.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    2f68:	a903      	add	r1, sp, #12
    2f6a:	3006      	adds	r0, #6
    2f6c:	4798      	blx	r3
    2f6e:	e7cd      	b.n	2f0c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    2f70:	2300      	movs	r3, #0
    2f72:	2214      	movs	r2, #20
    2f74:	a903      	add	r1, sp, #12
    2f76:	0028      	movs	r0, r5
    2f78:	4c6e      	ldr	r4, [pc, #440]	; (3134 <m2m_wifi_cb+0x290>)
    2f7a:	47a0      	blx	r4
    2f7c:	2800      	cmp	r0, #0
    2f7e:	d1c5      	bne.n	2f0c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2f80:	4b6d      	ldr	r3, [pc, #436]	; (3138 <m2m_wifi_cb+0x294>)
    2f82:	681b      	ldr	r3, [r3, #0]
    2f84:	2b00      	cmp	r3, #0
    2f86:	d0c1      	beq.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    2f88:	a903      	add	r1, sp, #12
    2f8a:	3032      	adds	r0, #50	; 0x32
    2f8c:	4798      	blx	r3
    2f8e:	e7bd      	b.n	2f0c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    2f90:	2264      	movs	r2, #100	; 0x64
    2f92:	2100      	movs	r1, #0
    2f94:	a803      	add	r0, sp, #12
    2f96:	4b69      	ldr	r3, [pc, #420]	; (313c <m2m_wifi_cb+0x298>)
    2f98:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    2f9a:	2300      	movs	r3, #0
    2f9c:	2264      	movs	r2, #100	; 0x64
    2f9e:	a903      	add	r1, sp, #12
    2fa0:	0028      	movs	r0, r5
    2fa2:	4c64      	ldr	r4, [pc, #400]	; (3134 <m2m_wifi_cb+0x290>)
    2fa4:	47a0      	blx	r4
    2fa6:	2800      	cmp	r0, #0
    2fa8:	d1b0      	bne.n	2f0c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2faa:	4b63      	ldr	r3, [pc, #396]	; (3138 <m2m_wifi_cb+0x294>)
    2fac:	681b      	ldr	r3, [r3, #0]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d0ac      	beq.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    2fb2:	a903      	add	r1, sp, #12
    2fb4:	302f      	adds	r0, #47	; 0x2f
    2fb6:	4798      	blx	r3
    2fb8:	e7a8      	b.n	2f0c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    2fba:	2300      	movs	r3, #0
    2fbc:	2204      	movs	r2, #4
    2fbe:	a903      	add	r1, sp, #12
    2fc0:	0028      	movs	r0, r5
    2fc2:	4c5c      	ldr	r4, [pc, #368]	; (3134 <m2m_wifi_cb+0x290>)
    2fc4:	47a0      	blx	r4
    2fc6:	2800      	cmp	r0, #0
    2fc8:	d1a0      	bne.n	2f0c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    2fca:	485d      	ldr	r0, [pc, #372]	; (3140 <m2m_wifi_cb+0x29c>)
    2fcc:	4d56      	ldr	r5, [pc, #344]	; (3128 <m2m_wifi_cb+0x284>)
    2fce:	47a8      	blx	r5
    2fd0:	9c03      	ldr	r4, [sp, #12]
    2fd2:	0a23      	lsrs	r3, r4, #8
    2fd4:	20ff      	movs	r0, #255	; 0xff
    2fd6:	4003      	ands	r3, r0
    2fd8:	0c22      	lsrs	r2, r4, #16
    2fda:	4002      	ands	r2, r0
    2fdc:	0e21      	lsrs	r1, r4, #24
    2fde:	4020      	ands	r0, r4
    2fe0:	9000      	str	r0, [sp, #0]
    2fe2:	4858      	ldr	r0, [pc, #352]	; (3144 <m2m_wifi_cb+0x2a0>)
    2fe4:	47a8      	blx	r5
    2fe6:	200d      	movs	r0, #13
    2fe8:	4b51      	ldr	r3, [pc, #324]	; (3130 <m2m_wifi_cb+0x28c>)
    2fea:	4798      	blx	r3
			if (gpfAppWifiCb)
    2fec:	4b52      	ldr	r3, [pc, #328]	; (3138 <m2m_wifi_cb+0x294>)
    2fee:	681b      	ldr	r3, [r3, #0]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d100      	bne.n	2ff6 <m2m_wifi_cb+0x152>
    2ff4:	e78a      	b.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    2ff6:	2100      	movs	r1, #0
    2ff8:	2034      	movs	r0, #52	; 0x34
    2ffa:	4798      	blx	r3
    2ffc:	e786      	b.n	2f0c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    2ffe:	2200      	movs	r2, #0
    3000:	4b51      	ldr	r3, [pc, #324]	; (3148 <m2m_wifi_cb+0x2a4>)
    3002:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    3004:	2300      	movs	r3, #0
    3006:	3204      	adds	r2, #4
    3008:	a903      	add	r1, sp, #12
    300a:	0028      	movs	r0, r5
    300c:	4c49      	ldr	r4, [pc, #292]	; (3134 <m2m_wifi_cb+0x290>)
    300e:	47a0      	blx	r4
    3010:	2800      	cmp	r0, #0
    3012:	d000      	beq.n	3016 <m2m_wifi_cb+0x172>
    3014:	e77a      	b.n	2f0c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    3016:	ab03      	add	r3, sp, #12
    3018:	781a      	ldrb	r2, [r3, #0]
    301a:	4b4c      	ldr	r3, [pc, #304]	; (314c <m2m_wifi_cb+0x2a8>)
    301c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    301e:	4b46      	ldr	r3, [pc, #280]	; (3138 <m2m_wifi_cb+0x294>)
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	2b00      	cmp	r3, #0
    3024:	d100      	bne.n	3028 <m2m_wifi_cb+0x184>
    3026:	e771      	b.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    3028:	a903      	add	r1, sp, #12
    302a:	3011      	adds	r0, #17
    302c:	4798      	blx	r3
    302e:	e76d      	b.n	2f0c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    3030:	2300      	movs	r3, #0
    3032:	222c      	movs	r2, #44	; 0x2c
    3034:	a903      	add	r1, sp, #12
    3036:	0028      	movs	r0, r5
    3038:	4c3e      	ldr	r4, [pc, #248]	; (3134 <m2m_wifi_cb+0x290>)
    303a:	47a0      	blx	r4
    303c:	2800      	cmp	r0, #0
    303e:	d000      	beq.n	3042 <m2m_wifi_cb+0x19e>
    3040:	e764      	b.n	2f0c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    3042:	4b3d      	ldr	r3, [pc, #244]	; (3138 <m2m_wifi_cb+0x294>)
    3044:	681b      	ldr	r3, [r3, #0]
    3046:	2b00      	cmp	r3, #0
    3048:	d100      	bne.n	304c <m2m_wifi_cb+0x1a8>
    304a:	e75f      	b.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    304c:	a903      	add	r1, sp, #12
    304e:	3013      	adds	r0, #19
    3050:	4798      	blx	r3
    3052:	e75b      	b.n	2f0c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    3054:	2300      	movs	r3, #0
    3056:	2204      	movs	r2, #4
    3058:	a91c      	add	r1, sp, #112	; 0x70
    305a:	0028      	movs	r0, r5
    305c:	4c35      	ldr	r4, [pc, #212]	; (3134 <m2m_wifi_cb+0x290>)
    305e:	47a0      	blx	r4
    3060:	2800      	cmp	r0, #0
    3062:	d000      	beq.n	3066 <m2m_wifi_cb+0x1c2>
    3064:	e752      	b.n	2f0c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    3066:	4b34      	ldr	r3, [pc, #208]	; (3138 <m2m_wifi_cb+0x294>)
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	2b00      	cmp	r3, #0
    306c:	d100      	bne.n	3070 <m2m_wifi_cb+0x1cc>
    306e:	e74d      	b.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    3070:	a91c      	add	r1, sp, #112	; 0x70
    3072:	3004      	adds	r0, #4
    3074:	4798      	blx	r3
    3076:	e749      	b.n	2f0c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    3078:	2300      	movs	r3, #0
    307a:	2204      	movs	r2, #4
    307c:	a91c      	add	r1, sp, #112	; 0x70
    307e:	0028      	movs	r0, r5
    3080:	4c2c      	ldr	r4, [pc, #176]	; (3134 <m2m_wifi_cb+0x290>)
    3082:	47a0      	blx	r4
    3084:	2800      	cmp	r0, #0
    3086:	d000      	beq.n	308a <m2m_wifi_cb+0x1e6>
    3088:	e740      	b.n	2f0c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    308a:	4b2b      	ldr	r3, [pc, #172]	; (3138 <m2m_wifi_cb+0x294>)
    308c:	681b      	ldr	r3, [r3, #0]
    308e:	2b00      	cmp	r3, #0
    3090:	d100      	bne.n	3094 <m2m_wifi_cb+0x1f0>
    3092:	e73b      	b.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    3094:	a91c      	add	r1, sp, #112	; 0x70
    3096:	3065      	adds	r0, #101	; 0x65
    3098:	4798      	blx	r3
    309a:	e737      	b.n	2f0c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    309c:	2301      	movs	r3, #1
    309e:	2264      	movs	r2, #100	; 0x64
    30a0:	a903      	add	r1, sp, #12
    30a2:	0028      	movs	r0, r5
    30a4:	4c23      	ldr	r4, [pc, #140]	; (3134 <m2m_wifi_cb+0x290>)
    30a6:	47a0      	blx	r4
    30a8:	2800      	cmp	r0, #0
    30aa:	d000      	beq.n	30ae <m2m_wifi_cb+0x20a>
    30ac:	e72e      	b.n	2f0c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    30ae:	4b22      	ldr	r3, [pc, #136]	; (3138 <m2m_wifi_cb+0x294>)
    30b0:	681b      	ldr	r3, [r3, #0]
    30b2:	2b00      	cmp	r3, #0
    30b4:	d100      	bne.n	30b8 <m2m_wifi_cb+0x214>
    30b6:	e729      	b.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    30b8:	a903      	add	r1, sp, #12
    30ba:	3009      	adds	r0, #9
    30bc:	4798      	blx	r3
    30be:	e725      	b.n	2f0c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    30c0:	2301      	movs	r3, #1
    30c2:	2204      	movs	r2, #4
    30c4:	a903      	add	r1, sp, #12
    30c6:	0028      	movs	r0, r5
    30c8:	4c1a      	ldr	r4, [pc, #104]	; (3134 <m2m_wifi_cb+0x290>)
    30ca:	47a0      	blx	r4
    30cc:	2800      	cmp	r0, #0
    30ce:	d000      	beq.n	30d2 <m2m_wifi_cb+0x22e>
    30d0:	e71c      	b.n	2f0c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    30d2:	4b19      	ldr	r3, [pc, #100]	; (3138 <m2m_wifi_cb+0x294>)
    30d4:	681b      	ldr	r3, [r3, #0]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d100      	bne.n	30dc <m2m_wifi_cb+0x238>
    30da:	e717      	b.n	2f0c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    30dc:	a903      	add	r1, sp, #12
    30de:	302a      	adds	r0, #42	; 0x2a
    30e0:	4798      	blx	r3
    30e2:	e713      	b.n	2f0c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    30e4:	2300      	movs	r3, #0
    30e6:	2208      	movs	r2, #8
    30e8:	a903      	add	r1, sp, #12
    30ea:	0028      	movs	r0, r5
    30ec:	4c11      	ldr	r4, [pc, #68]	; (3134 <m2m_wifi_cb+0x290>)
    30ee:	47a0      	blx	r4
    30f0:	2800      	cmp	r0, #0
    30f2:	d000      	beq.n	30f6 <m2m_wifi_cb+0x252>
    30f4:	e70a      	b.n	2f0c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    30f6:	ab03      	add	r3, sp, #12
    30f8:	889a      	ldrh	r2, [r3, #4]
    30fa:	0028      	movs	r0, r5
    30fc:	3008      	adds	r0, #8
    30fe:	2301      	movs	r3, #1
    3100:	9903      	ldr	r1, [sp, #12]
    3102:	4c0c      	ldr	r4, [pc, #48]	; (3134 <m2m_wifi_cb+0x290>)
    3104:	47a0      	blx	r4
    3106:	2800      	cmp	r0, #0
    3108:	d000      	beq.n	310c <m2m_wifi_cb+0x268>
    310a:	e6ff      	b.n	2f0c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    310c:	4b0a      	ldr	r3, [pc, #40]	; (3138 <m2m_wifi_cb+0x294>)
    310e:	681b      	ldr	r3, [r3, #0]
    3110:	2b00      	cmp	r3, #0
    3112:	d100      	bne.n	3116 <m2m_wifi_cb+0x272>
    3114:	e6fa      	b.n	2f0c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    3116:	a903      	add	r1, sp, #12
    3118:	3020      	adds	r0, #32
    311a:	4798      	blx	r3
    311c:	e6f6      	b.n	2f0c <m2m_wifi_cb+0x68>
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	00010e74 	.word	0x00010e74
    3124:	00010b0c 	.word	0x00010b0c
    3128:	0000b339 	.word	0x0000b339
    312c:	00010ec4 	.word	0x00010ec4
    3130:	0000b36d 	.word	0x0000b36d
    3134:	00002cfd 	.word	0x00002cfd
    3138:	20000218 	.word	0x20000218
    313c:	000025dd 	.word	0x000025dd
    3140:	00010e3c 	.word	0x00010e3c
    3144:	00010ea4 	.word	0x00010ea4
    3148:	2000021d 	.word	0x2000021d
    314c:	2000021c 	.word	0x2000021c

00003150 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    3150:	b5f0      	push	{r4, r5, r6, r7, lr}
    3152:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    3154:	2201      	movs	r2, #1
    3156:	230f      	movs	r3, #15
    3158:	446b      	add	r3, sp
    315a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    315c:	2800      	cmp	r0, #0
    315e:	d061      	beq.n	3224 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    3160:	6802      	ldr	r2, [r0, #0]
    3162:	4b32      	ldr	r3, [pc, #200]	; (322c <m2m_wifi_init+0xdc>)
    3164:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    3166:	2200      	movs	r2, #0
    3168:	4b31      	ldr	r3, [pc, #196]	; (3230 <m2m_wifi_init+0xe0>)
    316a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    316c:	200f      	movs	r0, #15
    316e:	4468      	add	r0, sp
    3170:	4b30      	ldr	r3, [pc, #192]	; (3234 <m2m_wifi_init+0xe4>)
    3172:	4798      	blx	r3
    3174:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    3176:	d002      	beq.n	317e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    3178:	0020      	movs	r0, r4
    317a:	b00f      	add	sp, #60	; 0x3c
    317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    317e:	2000      	movs	r0, #0
    3180:	4b2d      	ldr	r3, [pc, #180]	; (3238 <m2m_wifi_init+0xe8>)
    3182:	4798      	blx	r3
    3184:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    3186:	d149      	bne.n	321c <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    3188:	492c      	ldr	r1, [pc, #176]	; (323c <m2m_wifi_init+0xec>)
    318a:	2001      	movs	r0, #1
    318c:	4b2c      	ldr	r3, [pc, #176]	; (3240 <m2m_wifi_init+0xf0>)
    318e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    3190:	ae04      	add	r6, sp, #16
    3192:	0030      	movs	r0, r6
    3194:	4b2b      	ldr	r3, [pc, #172]	; (3244 <m2m_wifi_init+0xf4>)
    3196:	4798      	blx	r3
    3198:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    319a:	482b      	ldr	r0, [pc, #172]	; (3248 <m2m_wifi_init+0xf8>)
    319c:	4d2b      	ldr	r5, [pc, #172]	; (324c <m2m_wifi_init+0xfc>)
    319e:	47a8      	blx	r5
    31a0:	79b3      	ldrb	r3, [r6, #6]
    31a2:	7972      	ldrb	r2, [r6, #5]
    31a4:	7931      	ldrb	r1, [r6, #4]
    31a6:	8c30      	ldrh	r0, [r6, #32]
    31a8:	9000      	str	r0, [sp, #0]
    31aa:	4829      	ldr	r0, [pc, #164]	; (3250 <m2m_wifi_init+0x100>)
    31ac:	47a8      	blx	r5
    31ae:	200d      	movs	r0, #13
    31b0:	4f28      	ldr	r7, [pc, #160]	; (3254 <m2m_wifi_init+0x104>)
    31b2:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    31b4:	4824      	ldr	r0, [pc, #144]	; (3248 <m2m_wifi_init+0xf8>)
    31b6:	47a8      	blx	r5
    31b8:	2226      	movs	r2, #38	; 0x26
    31ba:	446a      	add	r2, sp
    31bc:	211a      	movs	r1, #26
    31be:	4469      	add	r1, sp
    31c0:	4825      	ldr	r0, [pc, #148]	; (3258 <m2m_wifi_init+0x108>)
    31c2:	47a8      	blx	r5
    31c4:	200d      	movs	r0, #13
    31c6:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    31c8:	481f      	ldr	r0, [pc, #124]	; (3248 <m2m_wifi_init+0xf8>)
    31ca:	47a8      	blx	r5
    31cc:	7a73      	ldrb	r3, [r6, #9]
    31ce:	7a32      	ldrb	r2, [r6, #8]
    31d0:	79f1      	ldrb	r1, [r6, #7]
    31d2:	4822      	ldr	r0, [pc, #136]	; (325c <m2m_wifi_init+0x10c>)
    31d4:	47a8      	blx	r5
    31d6:	200d      	movs	r0, #13
    31d8:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    31da:	481b      	ldr	r0, [pc, #108]	; (3248 <m2m_wifi_init+0xf8>)
    31dc:	47a8      	blx	r5
    31de:	2302      	movs	r3, #2
    31e0:	2205      	movs	r2, #5
    31e2:	2113      	movs	r1, #19
    31e4:	481e      	ldr	r0, [pc, #120]	; (3260 <m2m_wifi_init+0x110>)
    31e6:	47a8      	blx	r5
    31e8:	200d      	movs	r0, #13
    31ea:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    31ec:	4816      	ldr	r0, [pc, #88]	; (3248 <m2m_wifi_init+0xf8>)
    31ee:	47a8      	blx	r5
    31f0:	4a1c      	ldr	r2, [pc, #112]	; (3264 <m2m_wifi_init+0x114>)
    31f2:	491d      	ldr	r1, [pc, #116]	; (3268 <m2m_wifi_init+0x118>)
    31f4:	481d      	ldr	r0, [pc, #116]	; (326c <m2m_wifi_init+0x11c>)
    31f6:	47a8      	blx	r5
    31f8:	200d      	movs	r0, #13
    31fa:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    31fc:	0023      	movs	r3, r4
    31fe:	330d      	adds	r3, #13
    3200:	d1ba      	bne.n	3178 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    3202:	22ee      	movs	r2, #238	; 0xee
    3204:	32ff      	adds	r2, #255	; 0xff
    3206:	491a      	ldr	r1, [pc, #104]	; (3270 <m2m_wifi_init+0x120>)
    3208:	481a      	ldr	r0, [pc, #104]	; (3274 <m2m_wifi_init+0x124>)
    320a:	4b10      	ldr	r3, [pc, #64]	; (324c <m2m_wifi_init+0xfc>)
    320c:	4798      	blx	r3
    320e:	481a      	ldr	r0, [pc, #104]	; (3278 <m2m_wifi_init+0x128>)
    3210:	4b1a      	ldr	r3, [pc, #104]	; (327c <m2m_wifi_init+0x12c>)
    3212:	4798      	blx	r3
    3214:	200d      	movs	r0, #13
    3216:	4b0f      	ldr	r3, [pc, #60]	; (3254 <m2m_wifi_init+0x104>)
    3218:	4798      	blx	r3
    321a:	e7ad      	b.n	3178 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    321c:	2000      	movs	r0, #0
    321e:	4b18      	ldr	r3, [pc, #96]	; (3280 <m2m_wifi_init+0x130>)
    3220:	4798      	blx	r3
    3222:	e7a9      	b.n	3178 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    3224:	240c      	movs	r4, #12
    3226:	4264      	negs	r4, r4
    3228:	e7a6      	b.n	3178 <m2m_wifi_init+0x28>
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	20000218 	.word	0x20000218
    3230:	2000021d 	.word	0x2000021d
    3234:	00003bf1 	.word	0x00003bf1
    3238:	00002e6d 	.word	0x00002e6d
    323c:	00002ea5 	.word	0x00002ea5
    3240:	00002de9 	.word	0x00002de9
    3244:	00003b0d 	.word	0x00003b0d
    3248:	00010e3c 	.word	0x00010e3c
    324c:	0000b339 	.word	0x0000b339
    3250:	00010f80 	.word	0x00010f80
    3254:	0000b36d 	.word	0x0000b36d
    3258:	00010fa8 	.word	0x00010fa8
    325c:	00010fc4 	.word	0x00010fc4
    3260:	00010fe8 	.word	0x00010fe8
    3264:	00011000 	.word	0x00011000
    3268:	0001100c 	.word	0x0001100c
    326c:	00011018 	.word	0x00011018
    3270:	00010e80 	.word	0x00010e80
    3274:	00010b0c 	.word	0x00010b0c
    3278:	00011030 	.word	0x00011030
    327c:	0000b455 	.word	0x0000b455
    3280:	00003cc5 	.word	0x00003cc5

00003284 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    3284:	b510      	push	{r4, lr}
	return hif_handle_isr();
    3286:	4b01      	ldr	r3, [pc, #4]	; (328c <m2m_wifi_handle_events+0x8>)
    3288:	4798      	blx	r3
}
    328a:	bd10      	pop	{r4, pc}
    328c:	00002921 	.word	0x00002921

00003290 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    3290:	b5f0      	push	{r4, r5, r6, r7, lr}
    3292:	46ce      	mov	lr, r9
    3294:	4647      	mov	r7, r8
    3296:	b580      	push	{r7, lr}
    3298:	b0a3      	sub	sp, #140	; 0x8c
    329a:	9005      	str	r0, [sp, #20]
    329c:	000c      	movs	r4, r1
    329e:	0015      	movs	r5, r2
    32a0:	001f      	movs	r7, r3
    32a2:	ab2a      	add	r3, sp, #168	; 0xa8
    32a4:	881b      	ldrh	r3, [r3, #0]
    32a6:	4699      	mov	r9, r3
    32a8:	ab2b      	add	r3, sp, #172	; 0xac
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    32ae:	2a01      	cmp	r2, #1
    32b0:	d003      	beq.n	32ba <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    32b2:	2f00      	cmp	r7, #0
    32b4:	d040      	beq.n	3338 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    32b6:	2a02      	cmp	r2, #2
    32b8:	d04c      	beq.n	3354 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    32ba:	1e63      	subs	r3, r4, #1
    32bc:	2b1f      	cmp	r3, #31
    32be:	d900      	bls.n	32c2 <m2m_wifi_connect_sc+0x32>
    32c0:	e078      	b.n	33b4 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    32c2:	464b      	mov	r3, r9
    32c4:	3b01      	subs	r3, #1
    32c6:	b29b      	uxth	r3, r3
    32c8:	2b0d      	cmp	r3, #13
    32ca:	d903      	bls.n	32d4 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    32cc:	464b      	mov	r3, r9
    32ce:	2bff      	cmp	r3, #255	; 0xff
    32d0:	d000      	beq.n	32d4 <m2m_wifi_connect_sc+0x44>
    32d2:	e07d      	b.n	33d0 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    32d4:	ae07      	add	r6, sp, #28
    32d6:	0022      	movs	r2, r4
    32d8:	9905      	ldr	r1, [sp, #20]
    32da:	205a      	movs	r0, #90	; 0x5a
    32dc:	ab02      	add	r3, sp, #8
    32de:	469c      	mov	ip, r3
    32e0:	4460      	add	r0, ip
    32e2:	4b78      	ldr	r3, [pc, #480]	; (34c4 <m2m_wifi_connect_sc+0x234>)
    32e4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    32e6:	1934      	adds	r4, r6, r4
    32e8:	3446      	adds	r4, #70	; 0x46
    32ea:	2300      	movs	r3, #0
    32ec:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    32ee:	3344      	adds	r3, #68	; 0x44
    32f0:	464a      	mov	r2, r9
    32f2:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    32f4:	4643      	mov	r3, r8
    32f6:	1e5a      	subs	r2, r3, #1
    32f8:	4193      	sbcs	r3, r2
    32fa:	2267      	movs	r2, #103	; 0x67
    32fc:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    32fe:	2341      	movs	r3, #65	; 0x41
    3300:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    3302:	2d03      	cmp	r5, #3
    3304:	d100      	bne.n	3308 <m2m_wifi_connect_sc+0x78>
    3306:	e071      	b.n	33ec <m2m_wifi_connect_sc+0x15c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    3308:	2d02      	cmp	r5, #2
    330a:	d100      	bne.n	330e <m2m_wifi_connect_sc+0x7e>
    330c:	e0ab      	b.n	3466 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    330e:	2d04      	cmp	r5, #4
    3310:	d100      	bne.n	3314 <m2m_wifi_connect_sc+0x84>
    3312:	e0c3      	b.n	349c <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    3314:	2d01      	cmp	r5, #1
    3316:	d000      	beq.n	331a <m2m_wifi_connect_sc+0x8a>
    3318:	e0c6      	b.n	34a8 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    331a:	2300      	movs	r3, #0
    331c:	9302      	str	r3, [sp, #8]
    331e:	9301      	str	r3, [sp, #4]
    3320:	9300      	str	r3, [sp, #0]
    3322:	336c      	adds	r3, #108	; 0x6c
    3324:	aa07      	add	r2, sp, #28
    3326:	2128      	movs	r1, #40	; 0x28
    3328:	2001      	movs	r0, #1
    332a:	4c67      	ldr	r4, [pc, #412]	; (34c8 <m2m_wifi_connect_sc+0x238>)
    332c:	47a0      	blx	r4

ERR1:
	return ret;
}
    332e:	b023      	add	sp, #140	; 0x8c
    3330:	bc0c      	pop	{r2, r3}
    3332:	4690      	mov	r8, r2
    3334:	4699      	mov	r9, r3
    3336:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    3338:	4a64      	ldr	r2, [pc, #400]	; (34cc <m2m_wifi_connect_sc+0x23c>)
    333a:	4965      	ldr	r1, [pc, #404]	; (34d0 <m2m_wifi_connect_sc+0x240>)
    333c:	4865      	ldr	r0, [pc, #404]	; (34d4 <m2m_wifi_connect_sc+0x244>)
    333e:	4b66      	ldr	r3, [pc, #408]	; (34d8 <m2m_wifi_connect_sc+0x248>)
    3340:	4798      	blx	r3
    3342:	4866      	ldr	r0, [pc, #408]	; (34dc <m2m_wifi_connect_sc+0x24c>)
    3344:	4b66      	ldr	r3, [pc, #408]	; (34e0 <m2m_wifi_connect_sc+0x250>)
    3346:	4798      	blx	r3
    3348:	200d      	movs	r0, #13
    334a:	4b66      	ldr	r3, [pc, #408]	; (34e4 <m2m_wifi_connect_sc+0x254>)
    334c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    334e:	200c      	movs	r0, #12
    3350:	4240      	negs	r0, r0
			goto ERR1;
    3352:	e7ec      	b.n	332e <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    3354:	0038      	movs	r0, r7
    3356:	4b64      	ldr	r3, [pc, #400]	; (34e8 <m2m_wifi_connect_sc+0x258>)
    3358:	4798      	blx	r3
    335a:	2840      	cmp	r0, #64	; 0x40
    335c:	d1ad      	bne.n	32ba <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    335e:	783b      	ldrb	r3, [r7, #0]
    3360:	001a      	movs	r2, r3
    3362:	3a30      	subs	r2, #48	; 0x30
    3364:	2a36      	cmp	r2, #54	; 0x36
    3366:	d817      	bhi.n	3398 <m2m_wifi_connect_sc+0x108>
    3368:	3a0a      	subs	r2, #10
    336a:	2a06      	cmp	r2, #6
    336c:	d914      	bls.n	3398 <m2m_wifi_connect_sc+0x108>
    336e:	3b47      	subs	r3, #71	; 0x47
    3370:	2b19      	cmp	r3, #25
    3372:	d911      	bls.n	3398 <m2m_wifi_connect_sc+0x108>
    3374:	1c7a      	adds	r2, r7, #1
    3376:	0038      	movs	r0, r7
    3378:	3040      	adds	r0, #64	; 0x40
    337a:	7813      	ldrb	r3, [r2, #0]
    337c:	0019      	movs	r1, r3
    337e:	3930      	subs	r1, #48	; 0x30
    3380:	2936      	cmp	r1, #54	; 0x36
    3382:	d809      	bhi.n	3398 <m2m_wifi_connect_sc+0x108>
    3384:	390a      	subs	r1, #10
    3386:	2906      	cmp	r1, #6
    3388:	d906      	bls.n	3398 <m2m_wifi_connect_sc+0x108>
    338a:	3b47      	subs	r3, #71	; 0x47
    338c:	2b19      	cmp	r3, #25
    338e:	d903      	bls.n	3398 <m2m_wifi_connect_sc+0x108>
    3390:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    3392:	4282      	cmp	r2, r0
    3394:	d1f1      	bne.n	337a <m2m_wifi_connect_sc+0xea>
    3396:	e790      	b.n	32ba <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    3398:	4a54      	ldr	r2, [pc, #336]	; (34ec <m2m_wifi_connect_sc+0x25c>)
    339a:	494d      	ldr	r1, [pc, #308]	; (34d0 <m2m_wifi_connect_sc+0x240>)
    339c:	484d      	ldr	r0, [pc, #308]	; (34d4 <m2m_wifi_connect_sc+0x244>)
    339e:	4b4e      	ldr	r3, [pc, #312]	; (34d8 <m2m_wifi_connect_sc+0x248>)
    33a0:	4798      	blx	r3
    33a2:	4853      	ldr	r0, [pc, #332]	; (34f0 <m2m_wifi_connect_sc+0x260>)
    33a4:	4b4e      	ldr	r3, [pc, #312]	; (34e0 <m2m_wifi_connect_sc+0x250>)
    33a6:	4798      	blx	r3
    33a8:	200d      	movs	r0, #13
    33aa:	4b4e      	ldr	r3, [pc, #312]	; (34e4 <m2m_wifi_connect_sc+0x254>)
    33ac:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    33ae:	200c      	movs	r0, #12
    33b0:	4240      	negs	r0, r0
					goto ERR1;
    33b2:	e7bc      	b.n	332e <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    33b4:	4a4f      	ldr	r2, [pc, #316]	; (34f4 <m2m_wifi_connect_sc+0x264>)
    33b6:	4946      	ldr	r1, [pc, #280]	; (34d0 <m2m_wifi_connect_sc+0x240>)
    33b8:	4846      	ldr	r0, [pc, #280]	; (34d4 <m2m_wifi_connect_sc+0x244>)
    33ba:	4b47      	ldr	r3, [pc, #284]	; (34d8 <m2m_wifi_connect_sc+0x248>)
    33bc:	4798      	blx	r3
    33be:	484e      	ldr	r0, [pc, #312]	; (34f8 <m2m_wifi_connect_sc+0x268>)
    33c0:	4b47      	ldr	r3, [pc, #284]	; (34e0 <m2m_wifi_connect_sc+0x250>)
    33c2:	4798      	blx	r3
    33c4:	200d      	movs	r0, #13
    33c6:	4b47      	ldr	r3, [pc, #284]	; (34e4 <m2m_wifi_connect_sc+0x254>)
    33c8:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    33ca:	200c      	movs	r0, #12
    33cc:	4240      	negs	r0, r0
		goto ERR1;
    33ce:	e7ae      	b.n	332e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    33d0:	4a4a      	ldr	r2, [pc, #296]	; (34fc <m2m_wifi_connect_sc+0x26c>)
    33d2:	493f      	ldr	r1, [pc, #252]	; (34d0 <m2m_wifi_connect_sc+0x240>)
    33d4:	483f      	ldr	r0, [pc, #252]	; (34d4 <m2m_wifi_connect_sc+0x244>)
    33d6:	4b40      	ldr	r3, [pc, #256]	; (34d8 <m2m_wifi_connect_sc+0x248>)
    33d8:	4798      	blx	r3
    33da:	4849      	ldr	r0, [pc, #292]	; (3500 <m2m_wifi_connect_sc+0x270>)
    33dc:	4b40      	ldr	r3, [pc, #256]	; (34e0 <m2m_wifi_connect_sc+0x250>)
    33de:	4798      	blx	r3
    33e0:	200d      	movs	r0, #13
    33e2:	4b40      	ldr	r3, [pc, #256]	; (34e4 <m2m_wifi_connect_sc+0x254>)
    33e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    33e6:	200c      	movs	r0, #12
    33e8:	4240      	negs	r0, r0
			goto ERR1;
    33ea:	e7a0      	b.n	332e <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    33ec:	783b      	ldrb	r3, [r7, #0]
    33ee:	3b01      	subs	r3, #1
    33f0:	b2db      	uxtb	r3, r3
    33f2:	aa07      	add	r2, sp, #28
    33f4:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    33f6:	2b03      	cmp	r3, #3
    33f8:	d818      	bhi.n	342c <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    33fa:	787a      	ldrb	r2, [r7, #1]
    33fc:	1e51      	subs	r1, r2, #1
    33fe:	ab07      	add	r3, sp, #28
    3400:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    3402:	2310      	movs	r3, #16
    3404:	0011      	movs	r1, r2
    3406:	4399      	bics	r1, r3
    3408:	290b      	cmp	r1, #11
    340a:	d01e      	beq.n	344a <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    340c:	2296      	movs	r2, #150	; 0x96
    340e:	0092      	lsls	r2, r2, #2
    3410:	492f      	ldr	r1, [pc, #188]	; (34d0 <m2m_wifi_connect_sc+0x240>)
    3412:	4830      	ldr	r0, [pc, #192]	; (34d4 <m2m_wifi_connect_sc+0x244>)
    3414:	4c30      	ldr	r4, [pc, #192]	; (34d8 <m2m_wifi_connect_sc+0x248>)
    3416:	47a0      	blx	r4
    3418:	ab07      	add	r3, sp, #28
    341a:	7859      	ldrb	r1, [r3, #1]
    341c:	4839      	ldr	r0, [pc, #228]	; (3504 <m2m_wifi_connect_sc+0x274>)
    341e:	47a0      	blx	r4
    3420:	200d      	movs	r0, #13
    3422:	4b30      	ldr	r3, [pc, #192]	; (34e4 <m2m_wifi_connect_sc+0x254>)
    3424:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3426:	200c      	movs	r0, #12
    3428:	4240      	negs	r0, r0
			goto ERR1;
    342a:	e780      	b.n	332e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    342c:	4a36      	ldr	r2, [pc, #216]	; (3508 <m2m_wifi_connect_sc+0x278>)
    342e:	4928      	ldr	r1, [pc, #160]	; (34d0 <m2m_wifi_connect_sc+0x240>)
    3430:	4828      	ldr	r0, [pc, #160]	; (34d4 <m2m_wifi_connect_sc+0x244>)
    3432:	4c29      	ldr	r4, [pc, #164]	; (34d8 <m2m_wifi_connect_sc+0x248>)
    3434:	47a0      	blx	r4
    3436:	ab07      	add	r3, sp, #28
    3438:	7819      	ldrb	r1, [r3, #0]
    343a:	4834      	ldr	r0, [pc, #208]	; (350c <m2m_wifi_connect_sc+0x27c>)
    343c:	47a0      	blx	r4
    343e:	200d      	movs	r0, #13
    3440:	4b28      	ldr	r3, [pc, #160]	; (34e4 <m2m_wifi_connect_sc+0x254>)
    3442:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3444:	200c      	movs	r0, #12
    3446:	4240      	negs	r0, r0
			goto ERR1;
    3448:	e771      	b.n	332e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    344a:	1cb9      	adds	r1, r7, #2
    344c:	2016      	movs	r0, #22
    344e:	ab02      	add	r3, sp, #8
    3450:	469c      	mov	ip, r3
    3452:	4460      	add	r0, ip
    3454:	4b1b      	ldr	r3, [pc, #108]	; (34c4 <m2m_wifi_connect_sc+0x234>)
    3456:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    3458:	787b      	ldrb	r3, [r7, #1]
    345a:	aa07      	add	r2, sp, #28
    345c:	4694      	mov	ip, r2
    345e:	4463      	add	r3, ip
    3460:	2200      	movs	r2, #0
    3462:	709a      	strb	r2, [r3, #2]
    3464:	e759      	b.n	331a <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    3466:	0038      	movs	r0, r7
    3468:	4b1f      	ldr	r3, [pc, #124]	; (34e8 <m2m_wifi_connect_sc+0x258>)
    346a:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    346c:	1e43      	subs	r3, r0, #1
    346e:	b29b      	uxth	r3, r3
    3470:	2b3f      	cmp	r3, #63	; 0x3f
    3472:	d805      	bhi.n	3480 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    3474:	1c42      	adds	r2, r0, #1
    3476:	0039      	movs	r1, r7
    3478:	a807      	add	r0, sp, #28
    347a:	4b12      	ldr	r3, [pc, #72]	; (34c4 <m2m_wifi_connect_sc+0x234>)
    347c:	4798      	blx	r3
    347e:	e74c      	b.n	331a <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    3480:	4a23      	ldr	r2, [pc, #140]	; (3510 <m2m_wifi_connect_sc+0x280>)
    3482:	4913      	ldr	r1, [pc, #76]	; (34d0 <m2m_wifi_connect_sc+0x240>)
    3484:	4813      	ldr	r0, [pc, #76]	; (34d4 <m2m_wifi_connect_sc+0x244>)
    3486:	4b14      	ldr	r3, [pc, #80]	; (34d8 <m2m_wifi_connect_sc+0x248>)
    3488:	4798      	blx	r3
    348a:	4822      	ldr	r0, [pc, #136]	; (3514 <m2m_wifi_connect_sc+0x284>)
    348c:	4b14      	ldr	r3, [pc, #80]	; (34e0 <m2m_wifi_connect_sc+0x250>)
    348e:	4798      	blx	r3
    3490:	200d      	movs	r0, #13
    3492:	4b14      	ldr	r3, [pc, #80]	; (34e4 <m2m_wifi_connect_sc+0x254>)
    3494:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3496:	200c      	movs	r0, #12
    3498:	4240      	negs	r0, r0
			goto ERR1;
    349a:	e748      	b.n	332e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    349c:	223e      	movs	r2, #62	; 0x3e
    349e:	0039      	movs	r1, r7
    34a0:	a807      	add	r0, sp, #28
    34a2:	4b08      	ldr	r3, [pc, #32]	; (34c4 <m2m_wifi_connect_sc+0x234>)
    34a4:	4798      	blx	r3
    34a6:	e738      	b.n	331a <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    34a8:	4a1b      	ldr	r2, [pc, #108]	; (3518 <m2m_wifi_connect_sc+0x288>)
    34aa:	4909      	ldr	r1, [pc, #36]	; (34d0 <m2m_wifi_connect_sc+0x240>)
    34ac:	4809      	ldr	r0, [pc, #36]	; (34d4 <m2m_wifi_connect_sc+0x244>)
    34ae:	4b0a      	ldr	r3, [pc, #40]	; (34d8 <m2m_wifi_connect_sc+0x248>)
    34b0:	4798      	blx	r3
    34b2:	481a      	ldr	r0, [pc, #104]	; (351c <m2m_wifi_connect_sc+0x28c>)
    34b4:	4b0a      	ldr	r3, [pc, #40]	; (34e0 <m2m_wifi_connect_sc+0x250>)
    34b6:	4798      	blx	r3
    34b8:	200d      	movs	r0, #13
    34ba:	4b0a      	ldr	r3, [pc, #40]	; (34e4 <m2m_wifi_connect_sc+0x254>)
    34bc:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    34be:	200c      	movs	r0, #12
    34c0:	4240      	negs	r0, r0
		goto ERR1;
    34c2:	e734      	b.n	332e <m2m_wifi_connect_sc+0x9e>
    34c4:	000025c9 	.word	0x000025c9
    34c8:	000026f1 	.word	0x000026f1
    34cc:	0000021b 	.word	0x0000021b
    34d0:	00010e90 	.word	0x00010e90
    34d4:	00010b0c 	.word	0x00010b0c
    34d8:	0000b339 	.word	0x0000b339
    34dc:	00010ed8 	.word	0x00010ed8
    34e0:	0000b455 	.word	0x0000b455
    34e4:	0000b36d 	.word	0x0000b36d
    34e8:	000025ed 	.word	0x000025ed
    34ec:	00000227 	.word	0x00000227
    34f0:	00010eec 	.word	0x00010eec
    34f4:	00000231 	.word	0x00000231
    34f8:	00010ef8 	.word	0x00010ef8
    34fc:	0000023a 	.word	0x0000023a
    3500:	00010f0c 	.word	0x00010f0c
    3504:	00010f34 	.word	0x00010f34
    3508:	00000251 	.word	0x00000251
    350c:	00010f18 	.word	0x00010f18
    3510:	00000267 	.word	0x00000267
    3514:	00010f50 	.word	0x00010f50
    3518:	00000277 	.word	0x00000277
    351c:	00010f6c 	.word	0x00010f6c

00003520 <m2m_wifi_connect>:
{
    3520:	b530      	push	{r4, r5, lr}
    3522:	b083      	sub	sp, #12
    3524:	ac06      	add	r4, sp, #24
    3526:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    3528:	2500      	movs	r5, #0
    352a:	9501      	str	r5, [sp, #4]
    352c:	9400      	str	r4, [sp, #0]
    352e:	4c02      	ldr	r4, [pc, #8]	; (3538 <m2m_wifi_connect+0x18>)
    3530:	47a0      	blx	r4
}
    3532:	b003      	add	sp, #12
    3534:	bd30      	pop	{r4, r5, pc}
    3536:	46c0      	nop			; (mov r8, r8)
    3538:	00003291 	.word	0x00003291

0000353c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    353c:	2000      	movs	r0, #0
    353e:	4770      	bx	lr

00003540 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    3540:	b5f0      	push	{r4, r5, r6, r7, lr}
    3542:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    3544:	2580      	movs	r5, #128	; 0x80
    3546:	006d      	lsls	r5, r5, #1
    3548:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    354a:	24a5      	movs	r4, #165	; 0xa5
    354c:	0164      	lsls	r4, r4, #5
    354e:	4f08      	ldr	r7, [pc, #32]	; (3570 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    3550:	4e08      	ldr	r6, [pc, #32]	; (3574 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    3552:	0029      	movs	r1, r5
    3554:	0020      	movs	r0, r4
    3556:	47b8      	blx	r7
			uint32 reg = 0;
    3558:	2300      	movs	r3, #0
    355a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    355c:	a901      	add	r1, sp, #4
    355e:	0020      	movs	r0, r4
    3560:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    3562:	2800      	cmp	r0, #0
    3564:	d1f5      	bne.n	3552 <chip_apply_conf+0x12>
				if(reg == val32)
    3566:	9b01      	ldr	r3, [sp, #4]
    3568:	429d      	cmp	r5, r3
    356a:	d1f2      	bne.n	3552 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    356c:	b003      	add	sp, #12
    356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3570:	00003a31 	.word	0x00003a31
    3574:	00003a25 	.word	0x00003a25

00003578 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    3578:	b500      	push	{lr}
    357a:	b083      	sub	sp, #12
	uint32 reg = 0;
    357c:	2300      	movs	r3, #0
    357e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    3580:	a901      	add	r1, sp, #4
    3582:	4811      	ldr	r0, [pc, #68]	; (35c8 <enable_interrupts+0x50>)
    3584:	4b11      	ldr	r3, [pc, #68]	; (35cc <enable_interrupts+0x54>)
    3586:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    3588:	2800      	cmp	r0, #0
    358a:	d001      	beq.n	3590 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    358c:	b003      	add	sp, #12
    358e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    3590:	2180      	movs	r1, #128	; 0x80
    3592:	0049      	lsls	r1, r1, #1
    3594:	9b01      	ldr	r3, [sp, #4]
    3596:	4319      	orrs	r1, r3
    3598:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    359a:	480b      	ldr	r0, [pc, #44]	; (35c8 <enable_interrupts+0x50>)
    359c:	4b0c      	ldr	r3, [pc, #48]	; (35d0 <enable_interrupts+0x58>)
    359e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    35a0:	2800      	cmp	r0, #0
    35a2:	d1f3      	bne.n	358c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    35a4:	a901      	add	r1, sp, #4
    35a6:	20d0      	movs	r0, #208	; 0xd0
    35a8:	0140      	lsls	r0, r0, #5
    35aa:	4b08      	ldr	r3, [pc, #32]	; (35cc <enable_interrupts+0x54>)
    35ac:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    35ae:	2800      	cmp	r0, #0
    35b0:	d1ec      	bne.n	358c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    35b2:	2180      	movs	r1, #128	; 0x80
    35b4:	0249      	lsls	r1, r1, #9
    35b6:	9b01      	ldr	r3, [sp, #4]
    35b8:	4319      	orrs	r1, r3
    35ba:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    35bc:	20d0      	movs	r0, #208	; 0xd0
    35be:	0140      	lsls	r0, r0, #5
    35c0:	4b03      	ldr	r3, [pc, #12]	; (35d0 <enable_interrupts+0x58>)
    35c2:	4798      	blx	r3
    35c4:	e7e2      	b.n	358c <enable_interrupts+0x14>
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	00001408 	.word	0x00001408
    35cc:	00003a25 	.word	0x00003a25
    35d0:	00003a31 	.word	0x00003a31

000035d4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    35d4:	b510      	push	{r4, lr}
    35d6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    35d8:	4b28      	ldr	r3, [pc, #160]	; (367c <nmi_get_chipid+0xa8>)
    35da:	681c      	ldr	r4, [r3, #0]
    35dc:	2c00      	cmp	r4, #0
    35de:	d004      	beq.n	35ea <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    35e0:	4b26      	ldr	r3, [pc, #152]	; (367c <nmi_get_chipid+0xa8>)
    35e2:	681c      	ldr	r4, [r3, #0]
}
    35e4:	0020      	movs	r0, r4
    35e6:	b002      	add	sp, #8
    35e8:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    35ea:	0019      	movs	r1, r3
    35ec:	2080      	movs	r0, #128	; 0x80
    35ee:	0140      	lsls	r0, r0, #5
    35f0:	4b23      	ldr	r3, [pc, #140]	; (3680 <nmi_get_chipid+0xac>)
    35f2:	4798      	blx	r3
    35f4:	2800      	cmp	r0, #0
    35f6:	d003      	beq.n	3600 <nmi_get_chipid+0x2c>
			chipid = 0;
    35f8:	2200      	movs	r2, #0
    35fa:	4b20      	ldr	r3, [pc, #128]	; (367c <nmi_get_chipid+0xa8>)
    35fc:	601a      	str	r2, [r3, #0]
			return 0;
    35fe:	e7f1      	b.n	35e4 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    3600:	a901      	add	r1, sp, #4
    3602:	4820      	ldr	r0, [pc, #128]	; (3684 <nmi_get_chipid+0xb0>)
    3604:	4b1e      	ldr	r3, [pc, #120]	; (3680 <nmi_get_chipid+0xac>)
    3606:	4798      	blx	r3
    3608:	2800      	cmp	r0, #0
    360a:	d003      	beq.n	3614 <nmi_get_chipid+0x40>
			chipid = 0;
    360c:	2200      	movs	r2, #0
    360e:	4b1b      	ldr	r3, [pc, #108]	; (367c <nmi_get_chipid+0xa8>)
    3610:	601a      	str	r2, [r3, #0]
			return 0;
    3612:	e7e7      	b.n	35e4 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    3614:	4b19      	ldr	r3, [pc, #100]	; (367c <nmi_get_chipid+0xa8>)
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	4a1b      	ldr	r2, [pc, #108]	; (3688 <nmi_get_chipid+0xb4>)
    361a:	4293      	cmp	r3, r2
    361c:	d00e      	beq.n	363c <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    361e:	4a1b      	ldr	r2, [pc, #108]	; (368c <nmi_get_chipid+0xb8>)
    3620:	4293      	cmp	r3, r2
    3622:	d012      	beq.n	364a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    3624:	4a1a      	ldr	r2, [pc, #104]	; (3690 <nmi_get_chipid+0xbc>)
    3626:	4293      	cmp	r3, r2
    3628:	d01c      	beq.n	3664 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    362a:	4914      	ldr	r1, [pc, #80]	; (367c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    362c:	4a19      	ldr	r2, [pc, #100]	; (3694 <nmi_get_chipid+0xc0>)
    362e:	680b      	ldr	r3, [r1, #0]
    3630:	401a      	ands	r2, r3
		chipid |= 0x050000;
    3632:	23a0      	movs	r3, #160	; 0xa0
    3634:	02db      	lsls	r3, r3, #11
    3636:	4313      	orrs	r3, r2
    3638:	600b      	str	r3, [r1, #0]
    363a:	e7d1      	b.n	35e0 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    363c:	9b01      	ldr	r3, [sp, #4]
    363e:	2b01      	cmp	r3, #1
    3640:	d0f3      	beq.n	362a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    3642:	4a15      	ldr	r2, [pc, #84]	; (3698 <nmi_get_chipid+0xc4>)
    3644:	4b0d      	ldr	r3, [pc, #52]	; (367c <nmi_get_chipid+0xa8>)
    3646:	601a      	str	r2, [r3, #0]
    3648:	e7ef      	b.n	362a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    364a:	9b01      	ldr	r3, [sp, #4]
    364c:	2b03      	cmp	r3, #3
    364e:	d0ec      	beq.n	362a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    3650:	2b04      	cmp	r3, #4
    3652:	d003      	beq.n	365c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    3654:	4a11      	ldr	r2, [pc, #68]	; (369c <nmi_get_chipid+0xc8>)
    3656:	4b09      	ldr	r3, [pc, #36]	; (367c <nmi_get_chipid+0xa8>)
    3658:	601a      	str	r2, [r3, #0]
    365a:	e7e6      	b.n	362a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    365c:	4a10      	ldr	r2, [pc, #64]	; (36a0 <nmi_get_chipid+0xcc>)
    365e:	4b07      	ldr	r3, [pc, #28]	; (367c <nmi_get_chipid+0xa8>)
    3660:	601a      	str	r2, [r3, #0]
    3662:	e7e2      	b.n	362a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    3664:	4905      	ldr	r1, [pc, #20]	; (367c <nmi_get_chipid+0xa8>)
    3666:	20ec      	movs	r0, #236	; 0xec
    3668:	0380      	lsls	r0, r0, #14
    366a:	4b05      	ldr	r3, [pc, #20]	; (3680 <nmi_get_chipid+0xac>)
    366c:	4798      	blx	r3
    366e:	2800      	cmp	r0, #0
    3670:	d0db      	beq.n	362a <nmi_get_chipid+0x56>
			chipid = 0;
    3672:	2200      	movs	r2, #0
    3674:	4b01      	ldr	r3, [pc, #4]	; (367c <nmi_get_chipid+0xa8>)
    3676:	601a      	str	r2, [r3, #0]
			return 0;
    3678:	e7b4      	b.n	35e4 <nmi_get_chipid+0x10>
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	20000220 	.word	0x20000220
    3680:	00003a25 	.word	0x00003a25
    3684:	000013f4 	.word	0x000013f4
    3688:	001002a0 	.word	0x001002a0
    368c:	001002b0 	.word	0x001002b0
    3690:	001000f0 	.word	0x001000f0
    3694:	fff0ffff 	.word	0xfff0ffff
    3698:	001002a1 	.word	0x001002a1
    369c:	001002b2 	.word	0x001002b2
    36a0:	001002b1 	.word	0x001002b1

000036a4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    36a4:	b530      	push	{r4, r5, lr}
    36a6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    36a8:	4c16      	ldr	r4, [pc, #88]	; (3704 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    36aa:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    36ac:	a901      	add	r1, sp, #4
    36ae:	2010      	movs	r0, #16
    36b0:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    36b2:	2800      	cmp	r0, #0
    36b4:	d11c      	bne.n	36f0 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    36b6:	9b01      	ldr	r3, [sp, #4]
    36b8:	422b      	tst	r3, r5
    36ba:	d1f7      	bne.n	36ac <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    36bc:	a901      	add	r1, sp, #4
    36be:	3001      	adds	r0, #1
    36c0:	4b10      	ldr	r3, [pc, #64]	; (3704 <chip_sleep+0x60>)
    36c2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    36c4:	2800      	cmp	r0, #0
    36c6:	d113      	bne.n	36f0 <chip_sleep+0x4c>
	if(reg & NBIT1)
    36c8:	9901      	ldr	r1, [sp, #4]
    36ca:	078b      	lsls	r3, r1, #30
    36cc:	d507      	bpl.n	36de <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    36ce:	2302      	movs	r3, #2
    36d0:	4399      	bics	r1, r3
    36d2:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    36d4:	3001      	adds	r0, #1
    36d6:	4b0c      	ldr	r3, [pc, #48]	; (3708 <chip_sleep+0x64>)
    36d8:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    36da:	2800      	cmp	r0, #0
    36dc:	d108      	bne.n	36f0 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    36de:	a901      	add	r1, sp, #4
    36e0:	200b      	movs	r0, #11
    36e2:	4b08      	ldr	r3, [pc, #32]	; (3704 <chip_sleep+0x60>)
    36e4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    36e6:	2800      	cmp	r0, #0
    36e8:	d102      	bne.n	36f0 <chip_sleep+0x4c>
	if(reg & NBIT0)
    36ea:	9901      	ldr	r1, [sp, #4]
    36ec:	07cb      	lsls	r3, r1, #31
    36ee:	d401      	bmi.n	36f4 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    36f0:	b003      	add	sp, #12
    36f2:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    36f4:	2301      	movs	r3, #1
    36f6:	4399      	bics	r1, r3
    36f8:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    36fa:	300b      	adds	r0, #11
    36fc:	4b02      	ldr	r3, [pc, #8]	; (3708 <chip_sleep+0x64>)
    36fe:	4798      	blx	r3
    3700:	e7f6      	b.n	36f0 <chip_sleep+0x4c>
    3702:	46c0      	nop			; (mov r8, r8)
    3704:	00003a25 	.word	0x00003a25
    3708:	00003a31 	.word	0x00003a31

0000370c <chip_wake>:
sint8 chip_wake(void)
{
    370c:	b5f0      	push	{r4, r5, r6, r7, lr}
    370e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    3710:	2300      	movs	r3, #0
    3712:	9301      	str	r3, [sp, #4]
    3714:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    3716:	a901      	add	r1, sp, #4
    3718:	200b      	movs	r0, #11
    371a:	4b28      	ldr	r3, [pc, #160]	; (37bc <chip_wake+0xb0>)
    371c:	4798      	blx	r3
    371e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    3720:	d130      	bne.n	3784 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    3722:	9901      	ldr	r1, [sp, #4]
    3724:	07cb      	lsls	r3, r1, #31
    3726:	d406      	bmi.n	3736 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    3728:	2301      	movs	r3, #1
    372a:	4319      	orrs	r1, r3
    372c:	200b      	movs	r0, #11
    372e:	4b24      	ldr	r3, [pc, #144]	; (37c0 <chip_wake+0xb4>)
    3730:	4798      	blx	r3
    3732:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    3734:	d126      	bne.n	3784 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    3736:	a901      	add	r1, sp, #4
    3738:	2001      	movs	r0, #1
    373a:	4b20      	ldr	r3, [pc, #128]	; (37bc <chip_wake+0xb0>)
    373c:	4798      	blx	r3
    373e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    3740:	d120      	bne.n	3784 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    3742:	9901      	ldr	r1, [sp, #4]
    3744:	078b      	lsls	r3, r1, #30
    3746:	d520      	bpl.n	378a <chip_wake+0x7e>
{
    3748:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    374a:	4f1c      	ldr	r7, [pc, #112]	; (37bc <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    374c:	4e1d      	ldr	r6, [pc, #116]	; (37c4 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    374e:	4669      	mov	r1, sp
    3750:	200f      	movs	r0, #15
    3752:	47b8      	blx	r7
    3754:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    3756:	d120      	bne.n	379a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    3758:	9b00      	ldr	r3, [sp, #0]
    375a:	075b      	lsls	r3, r3, #29
    375c:	d42b      	bmi.n	37b6 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    375e:	2002      	movs	r0, #2
    3760:	47b0      	blx	r6
    3762:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    3764:	2d00      	cmp	r5, #0
    3766:	d1f2      	bne.n	374e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    3768:	22af      	movs	r2, #175	; 0xaf
    376a:	0052      	lsls	r2, r2, #1
    376c:	4916      	ldr	r1, [pc, #88]	; (37c8 <chip_wake+0xbc>)
    376e:	4817      	ldr	r0, [pc, #92]	; (37cc <chip_wake+0xc0>)
    3770:	4b17      	ldr	r3, [pc, #92]	; (37d0 <chip_wake+0xc4>)
    3772:	4798      	blx	r3
    3774:	4817      	ldr	r0, [pc, #92]	; (37d4 <chip_wake+0xc8>)
    3776:	4b18      	ldr	r3, [pc, #96]	; (37d8 <chip_wake+0xcc>)
    3778:	4798      	blx	r3
    377a:	200d      	movs	r0, #13
    377c:	4b17      	ldr	r3, [pc, #92]	; (37dc <chip_wake+0xd0>)
    377e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    3780:	2404      	movs	r4, #4
    3782:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    3784:	0020      	movs	r0, r4
    3786:	b003      	add	sp, #12
    3788:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    378a:	2302      	movs	r3, #2
    378c:	4319      	orrs	r1, r3
    378e:	2001      	movs	r0, #1
    3790:	4b0b      	ldr	r3, [pc, #44]	; (37c0 <chip_wake+0xb4>)
    3792:	4798      	blx	r3
    3794:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    3796:	d0d7      	beq.n	3748 <chip_wake+0x3c>
    3798:	e7f4      	b.n	3784 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    379a:	22aa      	movs	r2, #170	; 0xaa
    379c:	0052      	lsls	r2, r2, #1
    379e:	490a      	ldr	r1, [pc, #40]	; (37c8 <chip_wake+0xbc>)
    37a0:	480a      	ldr	r0, [pc, #40]	; (37cc <chip_wake+0xc0>)
    37a2:	4d0b      	ldr	r5, [pc, #44]	; (37d0 <chip_wake+0xc4>)
    37a4:	47a8      	blx	r5
    37a6:	9a00      	ldr	r2, [sp, #0]
    37a8:	0021      	movs	r1, r4
    37aa:	480d      	ldr	r0, [pc, #52]	; (37e0 <chip_wake+0xd4>)
    37ac:	47a8      	blx	r5
    37ae:	200d      	movs	r0, #13
    37b0:	4b0a      	ldr	r3, [pc, #40]	; (37dc <chip_wake+0xd0>)
    37b2:	4798      	blx	r3
			goto _WAKE_EXIT;
    37b4:	e7e6      	b.n	3784 <chip_wake+0x78>
	nm_bus_reset();
    37b6:	4b0b      	ldr	r3, [pc, #44]	; (37e4 <chip_wake+0xd8>)
    37b8:	4798      	blx	r3
    37ba:	e7e3      	b.n	3784 <chip_wake+0x78>
    37bc:	00003a25 	.word	0x00003a25
    37c0:	00003a31 	.word	0x00003a31
    37c4:	000021d5 	.word	0x000021d5
    37c8:	0001104c 	.word	0x0001104c
    37cc:	00010b0c 	.word	0x00010b0c
    37d0:	0000b339 	.word	0x0000b339
    37d4:	00011094 	.word	0x00011094
    37d8:	0000b455 	.word	0x0000b455
    37dc:	0000b36d 	.word	0x0000b36d
    37e0:	0001107c 	.word	0x0001107c
    37e4:	00003a0d 	.word	0x00003a0d

000037e8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    37e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37ea:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    37ec:	4d2d      	ldr	r5, [pc, #180]	; (38a4 <wait_for_bootrom+0xbc>)
    37ee:	4c2e      	ldr	r4, [pc, #184]	; (38a8 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    37f0:	4e2e      	ldr	r6, [pc, #184]	; (38ac <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    37f2:	0028      	movs	r0, r5
    37f4:	47a0      	blx	r4
		if (reg & 0x80000000) {
    37f6:	2800      	cmp	r0, #0
    37f8:	db02      	blt.n	3800 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    37fa:	2001      	movs	r0, #1
    37fc:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    37fe:	e7f8      	b.n	37f2 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    3800:	482b      	ldr	r0, [pc, #172]	; (38b0 <wait_for_bootrom+0xc8>)
    3802:	4b29      	ldr	r3, [pc, #164]	; (38a8 <wait_for_bootrom+0xc0>)
    3804:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    3806:	07c3      	lsls	r3, r0, #31
    3808:	d409      	bmi.n	381e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    380a:	4e28      	ldr	r6, [pc, #160]	; (38ac <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    380c:	4c29      	ldr	r4, [pc, #164]	; (38b4 <wait_for_bootrom+0xcc>)
    380e:	4d26      	ldr	r5, [pc, #152]	; (38a8 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    3810:	2001      	movs	r0, #1
    3812:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    3814:	0020      	movs	r0, r4
    3816:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    3818:	4b27      	ldr	r3, [pc, #156]	; (38b8 <wait_for_bootrom+0xd0>)
    381a:	4298      	cmp	r0, r3
    381c:	d1f8      	bne.n	3810 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    381e:	2f02      	cmp	r7, #2
    3820:	d021      	beq.n	3866 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    3822:	2f03      	cmp	r7, #3
    3824:	d029      	beq.n	387a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    3826:	2f04      	cmp	r7, #4
    3828:	d030      	beq.n	388c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    382a:	4924      	ldr	r1, [pc, #144]	; (38bc <wait_for_bootrom+0xd4>)
    382c:	4824      	ldr	r0, [pc, #144]	; (38c0 <wait_for_bootrom+0xd8>)
    382e:	4b25      	ldr	r3, [pc, #148]	; (38c4 <wait_for_bootrom+0xdc>)
    3830:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    3832:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    3834:	4b24      	ldr	r3, [pc, #144]	; (38c8 <wait_for_bootrom+0xe0>)
    3836:	4798      	blx	r3
    3838:	0500      	lsls	r0, r0, #20
    383a:	0d00      	lsrs	r0, r0, #20
    383c:	4b23      	ldr	r3, [pc, #140]	; (38cc <wait_for_bootrom+0xe4>)
    383e:	4298      	cmp	r0, r3
    3840:	d82a      	bhi.n	3898 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    3842:	0020      	movs	r0, r4
    3844:	4b22      	ldr	r3, [pc, #136]	; (38d0 <wait_for_bootrom+0xe8>)
    3846:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    3848:	4822      	ldr	r0, [pc, #136]	; (38d4 <wait_for_bootrom+0xec>)
    384a:	4c23      	ldr	r4, [pc, #140]	; (38d8 <wait_for_bootrom+0xf0>)
    384c:	47a0      	blx	r4
    384e:	491b      	ldr	r1, [pc, #108]	; (38bc <wait_for_bootrom+0xd4>)
    3850:	4822      	ldr	r0, [pc, #136]	; (38dc <wait_for_bootrom+0xf4>)
    3852:	47a0      	blx	r4
    3854:	200d      	movs	r0, #13
    3856:	4b22      	ldr	r3, [pc, #136]	; (38e0 <wait_for_bootrom+0xf8>)
    3858:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    385a:	4922      	ldr	r1, [pc, #136]	; (38e4 <wait_for_bootrom+0xfc>)
    385c:	4815      	ldr	r0, [pc, #84]	; (38b4 <wait_for_bootrom+0xcc>)
    385e:	4b19      	ldr	r3, [pc, #100]	; (38c4 <wait_for_bootrom+0xdc>)
    3860:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    3862:	2000      	movs	r0, #0
    3864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    3866:	4920      	ldr	r1, [pc, #128]	; (38e8 <wait_for_bootrom+0x100>)
    3868:	4820      	ldr	r0, [pc, #128]	; (38ec <wait_for_bootrom+0x104>)
    386a:	4c16      	ldr	r4, [pc, #88]	; (38c4 <wait_for_bootrom+0xdc>)
    386c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    386e:	2180      	movs	r1, #128	; 0x80
    3870:	0349      	lsls	r1, r1, #13
    3872:	4813      	ldr	r0, [pc, #76]	; (38c0 <wait_for_bootrom+0xd8>)
    3874:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    3876:	2400      	movs	r4, #0
    3878:	e7dc      	b.n	3834 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    387a:	491b      	ldr	r1, [pc, #108]	; (38e8 <wait_for_bootrom+0x100>)
    387c:	481b      	ldr	r0, [pc, #108]	; (38ec <wait_for_bootrom+0x104>)
    387e:	4c11      	ldr	r4, [pc, #68]	; (38c4 <wait_for_bootrom+0xdc>)
    3880:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    3882:	2100      	movs	r1, #0
    3884:	480e      	ldr	r0, [pc, #56]	; (38c0 <wait_for_bootrom+0xd8>)
    3886:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    3888:	2400      	movs	r4, #0
    388a:	e7d3      	b.n	3834 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    388c:	490b      	ldr	r1, [pc, #44]	; (38bc <wait_for_bootrom+0xd4>)
    388e:	480c      	ldr	r0, [pc, #48]	; (38c0 <wait_for_bootrom+0xd8>)
    3890:	4b0c      	ldr	r3, [pc, #48]	; (38c4 <wait_for_bootrom+0xdc>)
    3892:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    3894:	2480      	movs	r4, #128	; 0x80
    3896:	e7cd      	b.n	3834 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    3898:	2002      	movs	r0, #2
    389a:	4320      	orrs	r0, r4
    389c:	4b0c      	ldr	r3, [pc, #48]	; (38d0 <wait_for_bootrom+0xe8>)
    389e:	4798      	blx	r3
    38a0:	e7d2      	b.n	3848 <wait_for_bootrom+0x60>
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	00001014 	.word	0x00001014
    38a8:	00003a19 	.word	0x00003a19
    38ac:	000021d5 	.word	0x000021d5
    38b0:	000207bc 	.word	0x000207bc
    38b4:	000c000c 	.word	0x000c000c
    38b8:	10add09e 	.word	0x10add09e
    38bc:	13521352 	.word	0x13521352
    38c0:	0000108c 	.word	0x0000108c
    38c4:	00003a31 	.word	0x00003a31
    38c8:	000035d5 	.word	0x000035d5
    38cc:	0000039f 	.word	0x0000039f
    38d0:	00003541 	.word	0x00003541
    38d4:	00010e3c 	.word	0x00010e3c
    38d8:	0000b339 	.word	0x0000b339
    38dc:	000110b0 	.word	0x000110b0
    38e0:	0000b36d 	.word	0x0000b36d
    38e4:	ef522f61 	.word	0xef522f61
    38e8:	3c1cd57d 	.word	0x3c1cd57d
    38ec:	000207ac 	.word	0x000207ac

000038f0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    38f0:	b570      	push	{r4, r5, r6, lr}
    38f2:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    38f4:	4b15      	ldr	r3, [pc, #84]	; (394c <wait_for_firmware_start+0x5c>)
    38f6:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    38f8:	4b15      	ldr	r3, [pc, #84]	; (3950 <wait_for_firmware_start+0x60>)
    38fa:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    38fc:	3802      	subs	r0, #2
    38fe:	2801      	cmp	r0, #1
    3900:	d911      	bls.n	3926 <wait_for_firmware_start+0x36>
{
    3902:	2401      	movs	r4, #1
    3904:	4264      	negs	r4, r4
    3906:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    3908:	4e12      	ldr	r6, [pc, #72]	; (3954 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    390a:	4d13      	ldr	r5, [pc, #76]	; (3958 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    390c:	9b00      	ldr	r3, [sp, #0]
    390e:	4298      	cmp	r0, r3
    3910:	d00e      	beq.n	3930 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    3912:	2002      	movs	r0, #2
    3914:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    3916:	9801      	ldr	r0, [sp, #4]
    3918:	47a8      	blx	r5
    391a:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    391c:	2c00      	cmp	r4, #0
    391e:	d1f5      	bne.n	390c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    3920:	2005      	movs	r0, #5
    3922:	4240      	negs	r0, r0
    3924:	e009      	b.n	393a <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    3926:	4b0d      	ldr	r3, [pc, #52]	; (395c <wait_for_firmware_start+0x6c>)
    3928:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    392a:	4b0d      	ldr	r3, [pc, #52]	; (3960 <wait_for_firmware_start+0x70>)
    392c:	9300      	str	r3, [sp, #0]
    392e:	e7e8      	b.n	3902 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    3930:	9a00      	ldr	r2, [sp, #0]
    3932:	4b07      	ldr	r3, [pc, #28]	; (3950 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    3934:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    3936:	429a      	cmp	r2, r3
    3938:	d001      	beq.n	393e <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    393a:	b002      	add	sp, #8
    393c:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    393e:	2100      	movs	r1, #0
    3940:	4802      	ldr	r0, [pc, #8]	; (394c <wait_for_firmware_start+0x5c>)
    3942:	4b08      	ldr	r3, [pc, #32]	; (3964 <wait_for_firmware_start+0x74>)
    3944:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    3946:	2000      	movs	r0, #0
    3948:	e7f7      	b.n	393a <wait_for_firmware_start+0x4a>
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	0000108c 	.word	0x0000108c
    3950:	02532636 	.word	0x02532636
    3954:	000021d5 	.word	0x000021d5
    3958:	00003a19 	.word	0x00003a19
    395c:	000207ac 	.word	0x000207ac
    3960:	d75dc1c3 	.word	0xd75dc1c3
    3964:	00003a31 	.word	0x00003a31

00003968 <chip_deinit>:

sint8 chip_deinit(void)
{
    3968:	b510      	push	{r4, lr}
    396a:	b082      	sub	sp, #8
	uint32 reg = 0;
    396c:	2300      	movs	r3, #0
    396e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    3970:	a901      	add	r1, sp, #4
    3972:	20a0      	movs	r0, #160	; 0xa0
    3974:	0140      	lsls	r0, r0, #5
    3976:	4b14      	ldr	r3, [pc, #80]	; (39c8 <chip_deinit+0x60>)
    3978:	4798      	blx	r3
    397a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    397c:	d115      	bne.n	39aa <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    397e:	4913      	ldr	r1, [pc, #76]	; (39cc <chip_deinit+0x64>)
    3980:	9b01      	ldr	r3, [sp, #4]
    3982:	4019      	ands	r1, r3
    3984:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    3986:	20a0      	movs	r0, #160	; 0xa0
    3988:	0140      	lsls	r0, r0, #5
    398a:	4b11      	ldr	r3, [pc, #68]	; (39d0 <chip_deinit+0x68>)
    398c:	4798      	blx	r3
    398e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    3990:	d016      	beq.n	39c0 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    3992:	4a10      	ldr	r2, [pc, #64]	; (39d4 <chip_deinit+0x6c>)
    3994:	4910      	ldr	r1, [pc, #64]	; (39d8 <chip_deinit+0x70>)
    3996:	4811      	ldr	r0, [pc, #68]	; (39dc <chip_deinit+0x74>)
    3998:	4b11      	ldr	r3, [pc, #68]	; (39e0 <chip_deinit+0x78>)
    399a:	4798      	blx	r3
    399c:	4811      	ldr	r0, [pc, #68]	; (39e4 <chip_deinit+0x7c>)
    399e:	4b12      	ldr	r3, [pc, #72]	; (39e8 <chip_deinit+0x80>)
    39a0:	4798      	blx	r3
    39a2:	200d      	movs	r0, #13
    39a4:	4b11      	ldr	r3, [pc, #68]	; (39ec <chip_deinit+0x84>)
    39a6:	4798      	blx	r3
		goto ERR1;
    39a8:	e00a      	b.n	39c0 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    39aa:	4a11      	ldr	r2, [pc, #68]	; (39f0 <chip_deinit+0x88>)
    39ac:	490a      	ldr	r1, [pc, #40]	; (39d8 <chip_deinit+0x70>)
    39ae:	480b      	ldr	r0, [pc, #44]	; (39dc <chip_deinit+0x74>)
    39b0:	4b0b      	ldr	r3, [pc, #44]	; (39e0 <chip_deinit+0x78>)
    39b2:	4798      	blx	r3
    39b4:	480b      	ldr	r0, [pc, #44]	; (39e4 <chip_deinit+0x7c>)
    39b6:	4b0c      	ldr	r3, [pc, #48]	; (39e8 <chip_deinit+0x80>)
    39b8:	4798      	blx	r3
    39ba:	200d      	movs	r0, #13
    39bc:	4b0b      	ldr	r3, [pc, #44]	; (39ec <chip_deinit+0x84>)
    39be:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    39c0:	0020      	movs	r0, r4
    39c2:	b002      	add	sp, #8
    39c4:	bd10      	pop	{r4, pc}
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	00003a25 	.word	0x00003a25
    39cc:	fffffbff 	.word	0xfffffbff
    39d0:	00003a31 	.word	0x00003a31
    39d4:	0000020b 	.word	0x0000020b
    39d8:	00011058 	.word	0x00011058
    39dc:	00010b0c 	.word	0x00010b0c
    39e0:	0000b339 	.word	0x0000b339
    39e4:	00011064 	.word	0x00011064
    39e8:	0000b455 	.word	0x0000b455
    39ec:	0000b36d 	.word	0x0000b36d
    39f0:	00000205 	.word	0x00000205

000039f4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    39f4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    39f6:	4b01      	ldr	r3, [pc, #4]	; (39fc <nm_bus_iface_init+0x8>)
    39f8:	4798      	blx	r3
	return ret;
}
    39fa:	bd10      	pop	{r4, pc}
    39fc:	0000230d 	.word	0x0000230d

00003a00 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    3a00:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    3a02:	4b01      	ldr	r3, [pc, #4]	; (3a08 <nm_bus_iface_deinit+0x8>)
    3a04:	4798      	blx	r3

	return ret;
}
    3a06:	bd10      	pop	{r4, pc}
    3a08:	0000255d 	.word	0x0000255d

00003a0c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    3a0c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    3a0e:	4b01      	ldr	r3, [pc, #4]	; (3a14 <nm_bus_reset+0x8>)
    3a10:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    3a12:	bd10      	pop	{r4, pc}
    3a14:	000043bd 	.word	0x000043bd

00003a18 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    3a18:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    3a1a:	4b01      	ldr	r3, [pc, #4]	; (3a20 <nm_read_reg+0x8>)
    3a1c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    3a1e:	bd10      	pop	{r4, pc}
    3a20:	000043f5 	.word	0x000043f5

00003a24 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3a24:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    3a26:	4b01      	ldr	r3, [pc, #4]	; (3a2c <nm_read_reg_with_ret+0x8>)
    3a28:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    3a2a:	bd10      	pop	{r4, pc}
    3a2c:	00004409 	.word	0x00004409

00003a30 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    3a30:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    3a32:	4b01      	ldr	r3, [pc, #4]	; (3a38 <nm_write_reg+0x8>)
    3a34:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    3a36:	bd10      	pop	{r4, pc}
    3a38:	00004421 	.word	0x00004421

00003a3c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    3a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a3e:	46d6      	mov	lr, sl
    3a40:	464f      	mov	r7, r9
    3a42:	4646      	mov	r6, r8
    3a44:	b5c0      	push	{r6, r7, lr}
    3a46:	b082      	sub	sp, #8
    3a48:	4680      	mov	r8, r0
    3a4a:	4689      	mov	r9, r1
    3a4c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    3a4e:	4b13      	ldr	r3, [pc, #76]	; (3a9c <nm_read_block+0x60>)
    3a50:	881f      	ldrh	r7, [r3, #0]
    3a52:	3f08      	subs	r7, #8
    3a54:	b2bb      	uxth	r3, r7
    3a56:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    3a58:	001e      	movs	r6, r3
    3a5a:	0004      	movs	r4, r0
    3a5c:	429a      	cmp	r2, r3
    3a5e:	d91a      	bls.n	3a96 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    3a60:	4b0f      	ldr	r3, [pc, #60]	; (3aa0 <nm_read_block+0x64>)
    3a62:	469a      	mov	sl, r3
    3a64:	1a37      	subs	r7, r6, r0
    3a66:	4643      	mov	r3, r8
    3a68:	1ae1      	subs	r1, r4, r3
    3a6a:	4449      	add	r1, r9
    3a6c:	9a01      	ldr	r2, [sp, #4]
    3a6e:	0020      	movs	r0, r4
    3a70:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    3a72:	2800      	cmp	r0, #0
    3a74:	d109      	bne.n	3a8a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    3a76:	1bad      	subs	r5, r5, r6
    3a78:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    3a7a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    3a7c:	42b5      	cmp	r5, r6
    3a7e:	d8f2      	bhi.n	3a66 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    3a80:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    3a82:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    3a84:	0020      	movs	r0, r4
    3a86:	4b06      	ldr	r3, [pc, #24]	; (3aa0 <nm_read_block+0x64>)
    3a88:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    3a8a:	b002      	add	sp, #8
    3a8c:	bc1c      	pop	{r2, r3, r4}
    3a8e:	4690      	mov	r8, r2
    3a90:	4699      	mov	r9, r3
    3a92:	46a2      	mov	sl, r4
    3a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    3a96:	2100      	movs	r1, #0
    3a98:	e7f2      	b.n	3a80 <nm_read_block+0x44>
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	20000000 	.word	0x20000000
    3aa0:	00004565 	.word	0x00004565

00003aa4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    3aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aa6:	46d6      	mov	lr, sl
    3aa8:	464f      	mov	r7, r9
    3aaa:	4646      	mov	r6, r8
    3aac:	b5c0      	push	{r6, r7, lr}
    3aae:	b082      	sub	sp, #8
    3ab0:	4680      	mov	r8, r0
    3ab2:	4689      	mov	r9, r1
    3ab4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    3ab6:	4b13      	ldr	r3, [pc, #76]	; (3b04 <nm_write_block+0x60>)
    3ab8:	881f      	ldrh	r7, [r3, #0]
    3aba:	3f08      	subs	r7, #8
    3abc:	b2bb      	uxth	r3, r7
    3abe:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    3ac0:	001e      	movs	r6, r3
    3ac2:	0004      	movs	r4, r0
    3ac4:	429a      	cmp	r2, r3
    3ac6:	d91a      	bls.n	3afe <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    3ac8:	4b0f      	ldr	r3, [pc, #60]	; (3b08 <nm_write_block+0x64>)
    3aca:	469a      	mov	sl, r3
    3acc:	1a37      	subs	r7, r6, r0
    3ace:	4643      	mov	r3, r8
    3ad0:	1ae1      	subs	r1, r4, r3
    3ad2:	4449      	add	r1, r9
    3ad4:	9a01      	ldr	r2, [sp, #4]
    3ad6:	0020      	movs	r0, r4
    3ad8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    3ada:	2800      	cmp	r0, #0
    3adc:	d109      	bne.n	3af2 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    3ade:	1bad      	subs	r5, r5, r6
    3ae0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    3ae2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    3ae4:	42b5      	cmp	r5, r6
    3ae6:	d8f2      	bhi.n	3ace <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    3ae8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    3aea:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    3aec:	0020      	movs	r0, r4
    3aee:	4b06      	ldr	r3, [pc, #24]	; (3b08 <nm_write_block+0x64>)
    3af0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    3af2:	b002      	add	sp, #8
    3af4:	bc1c      	pop	{r2, r3, r4}
    3af6:	4690      	mov	r8, r2
    3af8:	4699      	mov	r9, r3
    3afa:	46a2      	mov	sl, r4
    3afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    3afe:	2100      	movs	r1, #0
    3b00:	e7f2      	b.n	3ae8 <nm_write_block+0x44>
    3b02:	46c0      	nop			; (mov r8, r8)
    3b04:	20000000 	.word	0x20000000
    3b08:	000046c1 	.word	0x000046c1

00003b0c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    3b0c:	b570      	push	{r4, r5, r6, lr}
    3b0e:	b084      	sub	sp, #16
    3b10:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    3b12:	2300      	movs	r3, #0
    3b14:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    3b16:	2208      	movs	r2, #8
    3b18:	2100      	movs	r1, #0
    3b1a:	a801      	add	r0, sp, #4
    3b1c:	4b2d      	ldr	r3, [pc, #180]	; (3bd4 <nm_get_firmware_full_info+0xc8>)
    3b1e:	4798      	blx	r3
	if (pstrRev != NULL)
    3b20:	2c00      	cmp	r4, #0
    3b22:	d044      	beq.n	3bae <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    3b24:	2228      	movs	r2, #40	; 0x28
    3b26:	2100      	movs	r1, #0
    3b28:	0020      	movs	r0, r4
    3b2a:	4b2b      	ldr	r3, [pc, #172]	; (3bd8 <nm_get_firmware_full_info+0xcc>)
    3b2c:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    3b2e:	a903      	add	r1, sp, #12
    3b30:	482a      	ldr	r0, [pc, #168]	; (3bdc <nm_get_firmware_full_info+0xd0>)
    3b32:	4b2b      	ldr	r3, [pc, #172]	; (3be0 <nm_get_firmware_full_info+0xd4>)
    3b34:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    3b36:	2800      	cmp	r0, #0
    3b38:	d13a      	bne.n	3bb0 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    3b3a:	9b03      	ldr	r3, [sp, #12]
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d039      	beq.n	3bb4 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    3b40:	20c0      	movs	r0, #192	; 0xc0
    3b42:	0280      	lsls	r0, r0, #10
    3b44:	4318      	orrs	r0, r3
    3b46:	2208      	movs	r2, #8
    3b48:	a901      	add	r1, sp, #4
    3b4a:	4b26      	ldr	r3, [pc, #152]	; (3be4 <nm_get_firmware_full_info+0xd8>)
    3b4c:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    3b4e:	2800      	cmp	r0, #0
    3b50:	d12e      	bne.n	3bb0 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    3b52:	9b02      	ldr	r3, [sp, #8]
    3b54:	0418      	lsls	r0, r3, #16
    3b56:	0c00      	lsrs	r0, r0, #16
    3b58:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    3b5a:	d02e      	beq.n	3bba <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    3b5c:	23c0      	movs	r3, #192	; 0xc0
    3b5e:	029b      	lsls	r3, r3, #10
    3b60:	4318      	orrs	r0, r3
    3b62:	2228      	movs	r2, #40	; 0x28
    3b64:	0021      	movs	r1, r4
    3b66:	4b1f      	ldr	r3, [pc, #124]	; (3be4 <nm_get_firmware_full_info+0xd8>)
    3b68:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    3b6a:	2800      	cmp	r0, #0
    3b6c:	d120      	bne.n	3bb0 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    3b6e:	7921      	ldrb	r1, [r4, #4]
    3b70:	0209      	lsls	r1, r1, #8
    3b72:	79a2      	ldrb	r2, [r4, #6]
    3b74:	230f      	movs	r3, #15
    3b76:	401a      	ands	r2, r3
    3b78:	430a      	orrs	r2, r1
    3b7a:	7961      	ldrb	r1, [r4, #5]
    3b7c:	0109      	lsls	r1, r1, #4
    3b7e:	25ff      	movs	r5, #255	; 0xff
    3b80:	4029      	ands	r1, r5
    3b82:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    3b84:	79e1      	ldrb	r1, [r4, #7]
    3b86:	0209      	lsls	r1, r1, #8
    3b88:	7a66      	ldrb	r6, [r4, #9]
    3b8a:	4033      	ands	r3, r6
    3b8c:	430b      	orrs	r3, r1
    3b8e:	7a21      	ldrb	r1, [r4, #8]
    3b90:	0109      	lsls	r1, r1, #4
    3b92:	400d      	ands	r5, r1
    3b94:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    3b96:	2a00      	cmp	r2, #0
    3b98:	d012      	beq.n	3bc0 <nm_get_firmware_full_info+0xb4>
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d013      	beq.n	3bc6 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    3b9e:	4912      	ldr	r1, [pc, #72]	; (3be8 <nm_get_firmware_full_info+0xdc>)
    3ba0:	428b      	cmp	r3, r1
    3ba2:	d813      	bhi.n	3bcc <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    3ba4:	4b11      	ldr	r3, [pc, #68]	; (3bec <nm_get_firmware_full_info+0xe0>)
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d802      	bhi.n	3bb0 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    3baa:	380d      	subs	r0, #13
    3bac:	e000      	b.n	3bb0 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    3bae:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    3bb0:	b004      	add	sp, #16
    3bb2:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    3bb4:	200c      	movs	r0, #12
    3bb6:	4240      	negs	r0, r0
    3bb8:	e7fa      	b.n	3bb0 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    3bba:	200c      	movs	r0, #12
    3bbc:	4240      	negs	r0, r0
    3bbe:	e7f7      	b.n	3bb0 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    3bc0:	200c      	movs	r0, #12
    3bc2:	4240      	negs	r0, r0
    3bc4:	e7f4      	b.n	3bb0 <nm_get_firmware_full_info+0xa4>
    3bc6:	200c      	movs	r0, #12
    3bc8:	4240      	negs	r0, r0
    3bca:	e7f1      	b.n	3bb0 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    3bcc:	200d      	movs	r0, #13
    3bce:	4240      	negs	r0, r0
    3bd0:	e7ee      	b.n	3bb0 <nm_get_firmware_full_info+0xa4>
    3bd2:	46c0      	nop			; (mov r8, r8)
    3bd4:	0000a8f7 	.word	0x0000a8f7
    3bd8:	000025dd 	.word	0x000025dd
    3bdc:	000c0008 	.word	0x000c0008
    3be0:	00003a25 	.word	0x00003a25
    3be4:	00003a3d 	.word	0x00003a3d
    3be8:	00001352 	.word	0x00001352
    3bec:	00001351 	.word	0x00001351

00003bf0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3bf0:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    3bf2:	2800      	cmp	r0, #0
    3bf4:	d037      	beq.n	3c66 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    3bf6:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3bf8:	1e6b      	subs	r3, r5, #1
    3bfa:	2b03      	cmp	r3, #3
    3bfc:	d900      	bls.n	3c00 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    3bfe:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    3c00:	2000      	movs	r0, #0
    3c02:	4b20      	ldr	r3, [pc, #128]	; (3c84 <nm_drv_init+0x94>)
    3c04:	4798      	blx	r3
    3c06:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3c08:	d12f      	bne.n	3c6a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    3c0a:	481f      	ldr	r0, [pc, #124]	; (3c88 <nm_drv_init+0x98>)
    3c0c:	4c1f      	ldr	r4, [pc, #124]	; (3c8c <nm_drv_init+0x9c>)
    3c0e:	47a0      	blx	r4
    3c10:	4b1f      	ldr	r3, [pc, #124]	; (3c90 <nm_drv_init+0xa0>)
    3c12:	4798      	blx	r3
    3c14:	0001      	movs	r1, r0
    3c16:	481f      	ldr	r0, [pc, #124]	; (3c94 <nm_drv_init+0xa4>)
    3c18:	47a0      	blx	r4
    3c1a:	200d      	movs	r0, #13
    3c1c:	4b1e      	ldr	r3, [pc, #120]	; (3c98 <nm_drv_init+0xa8>)
    3c1e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    3c20:	4b1e      	ldr	r3, [pc, #120]	; (3c9c <nm_drv_init+0xac>)
    3c22:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    3c24:	0028      	movs	r0, r5
    3c26:	4b1e      	ldr	r3, [pc, #120]	; (3ca0 <nm_drv_init+0xb0>)
    3c28:	4798      	blx	r3
    3c2a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3c2c:	d117      	bne.n	3c5e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    3c2e:	0028      	movs	r0, r5
    3c30:	4b1c      	ldr	r3, [pc, #112]	; (3ca4 <nm_drv_init+0xb4>)
    3c32:	4798      	blx	r3
    3c34:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3c36:	d112      	bne.n	3c5e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    3c38:	3d02      	subs	r5, #2
    3c3a:	2d01      	cmp	r5, #1
    3c3c:	d911      	bls.n	3c62 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    3c3e:	4b1a      	ldr	r3, [pc, #104]	; (3ca8 <nm_drv_init+0xb8>)
    3c40:	4798      	blx	r3
    3c42:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3c44:	d00d      	beq.n	3c62 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    3c46:	2256      	movs	r2, #86	; 0x56
    3c48:	32ff      	adds	r2, #255	; 0xff
    3c4a:	4918      	ldr	r1, [pc, #96]	; (3cac <nm_drv_init+0xbc>)
    3c4c:	4818      	ldr	r0, [pc, #96]	; (3cb0 <nm_drv_init+0xc0>)
    3c4e:	4b0f      	ldr	r3, [pc, #60]	; (3c8c <nm_drv_init+0x9c>)
    3c50:	4798      	blx	r3
    3c52:	4818      	ldr	r0, [pc, #96]	; (3cb4 <nm_drv_init+0xc4>)
    3c54:	4b18      	ldr	r3, [pc, #96]	; (3cb8 <nm_drv_init+0xc8>)
    3c56:	4798      	blx	r3
    3c58:	200d      	movs	r0, #13
    3c5a:	4b0f      	ldr	r3, [pc, #60]	; (3c98 <nm_drv_init+0xa8>)
    3c5c:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    3c5e:	4b17      	ldr	r3, [pc, #92]	; (3cbc <nm_drv_init+0xcc>)
    3c60:	4798      	blx	r3
ERR1:
	return ret;
}
    3c62:	0020      	movs	r0, r4
    3c64:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    3c66:	2501      	movs	r5, #1
    3c68:	e7ca      	b.n	3c00 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    3c6a:	2228      	movs	r2, #40	; 0x28
    3c6c:	32ff      	adds	r2, #255	; 0xff
    3c6e:	490f      	ldr	r1, [pc, #60]	; (3cac <nm_drv_init+0xbc>)
    3c70:	480f      	ldr	r0, [pc, #60]	; (3cb0 <nm_drv_init+0xc0>)
    3c72:	4b06      	ldr	r3, [pc, #24]	; (3c8c <nm_drv_init+0x9c>)
    3c74:	4798      	blx	r3
    3c76:	4812      	ldr	r0, [pc, #72]	; (3cc0 <nm_drv_init+0xd0>)
    3c78:	4b0f      	ldr	r3, [pc, #60]	; (3cb8 <nm_drv_init+0xc8>)
    3c7a:	4798      	blx	r3
    3c7c:	200d      	movs	r0, #13
    3c7e:	4b06      	ldr	r3, [pc, #24]	; (3c98 <nm_drv_init+0xa8>)
    3c80:	4798      	blx	r3
		goto ERR1;
    3c82:	e7ee      	b.n	3c62 <nm_drv_init+0x72>
    3c84:	000039f5 	.word	0x000039f5
    3c88:	00010e3c 	.word	0x00010e3c
    3c8c:	0000b339 	.word	0x0000b339
    3c90:	000035d5 	.word	0x000035d5
    3c94:	00011180 	.word	0x00011180
    3c98:	0000b36d 	.word	0x0000b36d
    3c9c:	00004439 	.word	0x00004439
    3ca0:	000037e9 	.word	0x000037e9
    3ca4:	000038f1 	.word	0x000038f1
    3ca8:	00003579 	.word	0x00003579
    3cac:	000110c8 	.word	0x000110c8
    3cb0:	00010b0c 	.word	0x00010b0c
    3cb4:	00011144 	.word	0x00011144
    3cb8:	0000b455 	.word	0x0000b455
    3cbc:	00003a01 	.word	0x00003a01
    3cc0:	00011164 	.word	0x00011164

00003cc4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    3cc4:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    3cc6:	4b1c      	ldr	r3, [pc, #112]	; (3d38 <nm_drv_deinit+0x74>)
    3cc8:	4798      	blx	r3
    3cca:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3ccc:	d10b      	bne.n	3ce6 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    3cce:	2000      	movs	r0, #0
    3cd0:	4b1a      	ldr	r3, [pc, #104]	; (3d3c <nm_drv_deinit+0x78>)
    3cd2:	4798      	blx	r3
    3cd4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3cd6:	d114      	bne.n	3d02 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    3cd8:	4b19      	ldr	r3, [pc, #100]	; (3d40 <nm_drv_deinit+0x7c>)
    3cda:	4798      	blx	r3
    3cdc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3cde:	d11d      	bne.n	3d1c <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    3ce0:	4b18      	ldr	r3, [pc, #96]	; (3d44 <nm_drv_deinit+0x80>)
    3ce2:	4798      	blx	r3
    3ce4:	e00b      	b.n	3cfe <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    3ce6:	22b6      	movs	r2, #182	; 0xb6
    3ce8:	0052      	lsls	r2, r2, #1
    3cea:	4917      	ldr	r1, [pc, #92]	; (3d48 <nm_drv_deinit+0x84>)
    3cec:	4817      	ldr	r0, [pc, #92]	; (3d4c <nm_drv_deinit+0x88>)
    3cee:	4b18      	ldr	r3, [pc, #96]	; (3d50 <nm_drv_deinit+0x8c>)
    3cf0:	4798      	blx	r3
    3cf2:	4818      	ldr	r0, [pc, #96]	; (3d54 <nm_drv_deinit+0x90>)
    3cf4:	4b18      	ldr	r3, [pc, #96]	; (3d58 <nm_drv_deinit+0x94>)
    3cf6:	4798      	blx	r3
    3cf8:	200d      	movs	r0, #13
    3cfa:	4b18      	ldr	r3, [pc, #96]	; (3d5c <nm_drv_deinit+0x98>)
    3cfc:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    3cfe:	0020      	movs	r0, r4
    3d00:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3d02:	2274      	movs	r2, #116	; 0x74
    3d04:	32ff      	adds	r2, #255	; 0xff
    3d06:	4910      	ldr	r1, [pc, #64]	; (3d48 <nm_drv_deinit+0x84>)
    3d08:	4810      	ldr	r0, [pc, #64]	; (3d4c <nm_drv_deinit+0x88>)
    3d0a:	4b11      	ldr	r3, [pc, #68]	; (3d50 <nm_drv_deinit+0x8c>)
    3d0c:	4798      	blx	r3
    3d0e:	4814      	ldr	r0, [pc, #80]	; (3d60 <nm_drv_deinit+0x9c>)
    3d10:	4b11      	ldr	r3, [pc, #68]	; (3d58 <nm_drv_deinit+0x94>)
    3d12:	4798      	blx	r3
    3d14:	200d      	movs	r0, #13
    3d16:	4b11      	ldr	r3, [pc, #68]	; (3d5c <nm_drv_deinit+0x98>)
    3d18:	4798      	blx	r3
		goto ERR1;
    3d1a:	e7f0      	b.n	3cfe <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3d1c:	227a      	movs	r2, #122	; 0x7a
    3d1e:	32ff      	adds	r2, #255	; 0xff
    3d20:	4909      	ldr	r1, [pc, #36]	; (3d48 <nm_drv_deinit+0x84>)
    3d22:	480a      	ldr	r0, [pc, #40]	; (3d4c <nm_drv_deinit+0x88>)
    3d24:	4b0a      	ldr	r3, [pc, #40]	; (3d50 <nm_drv_deinit+0x8c>)
    3d26:	4798      	blx	r3
    3d28:	480e      	ldr	r0, [pc, #56]	; (3d64 <nm_drv_deinit+0xa0>)
    3d2a:	4b0b      	ldr	r3, [pc, #44]	; (3d58 <nm_drv_deinit+0x94>)
    3d2c:	4798      	blx	r3
    3d2e:	200d      	movs	r0, #13
    3d30:	4b0a      	ldr	r3, [pc, #40]	; (3d5c <nm_drv_deinit+0x98>)
    3d32:	4798      	blx	r3
		goto ERR1;
    3d34:	e7e3      	b.n	3cfe <nm_drv_deinit+0x3a>
    3d36:	46c0      	nop			; (mov r8, r8)
    3d38:	00003969 	.word	0x00003969
    3d3c:	00005259 	.word	0x00005259
    3d40:	00003a01 	.word	0x00003a01
    3d44:	000043e5 	.word	0x000043e5
    3d48:	000110d4 	.word	0x000110d4
    3d4c:	00010b0c 	.word	0x00010b0c
    3d50:	0000b339 	.word	0x0000b339
    3d54:	000110e4 	.word	0x000110e4
    3d58:	0000b455 	.word	0x0000b455
    3d5c:	0000b36d 	.word	0x0000b36d
    3d60:	00011104 	.word	0x00011104
    3d64:	00011128 	.word	0x00011128

00003d68 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    3d68:	b500      	push	{lr}
    3d6a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    3d6c:	ab01      	add	r3, sp, #4
    3d6e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    3d70:	2200      	movs	r2, #0
    3d72:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    3d74:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3d76:	0019      	movs	r1, r3
    3d78:	2003      	movs	r0, #3
    3d7a:	4b02      	ldr	r3, [pc, #8]	; (3d84 <nmi_spi_write+0x1c>)
    3d7c:	4798      	blx	r3
}
    3d7e:	b005      	add	sp, #20
    3d80:	bd00      	pop	{pc}
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	00002411 	.word	0x00002411

00003d88 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    3d88:	b570      	push	{r4, r5, r6, lr}
    3d8a:	b084      	sub	sp, #16
    3d8c:	ac08      	add	r4, sp, #32
    3d8e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    3d90:	ac01      	add	r4, sp, #4
    3d92:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    3d94:	303f      	adds	r0, #63	; 0x3f
    3d96:	b2c4      	uxtb	r4, r0
    3d98:	2c0e      	cmp	r4, #14
    3d9a:	d900      	bls.n	3d9e <spi_cmd+0x16>
    3d9c:	e084      	b.n	3ea8 <spi_cmd+0x120>
    3d9e:	00a0      	lsls	r0, r4, #2
    3da0:	4c4f      	ldr	r4, [pc, #316]	; (3ee0 <spi_cmd+0x158>)
    3da2:	5820      	ldr	r0, [r4, r0]
    3da4:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    3da6:	ab01      	add	r3, sp, #4
    3da8:	0c0a      	lsrs	r2, r1, #16
    3daa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3dac:	0a0a      	lsrs	r2, r1, #8
    3dae:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3db0:	70d9      	strb	r1, [r3, #3]
		len = 5;
    3db2:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    3db4:	4b4b      	ldr	r3, [pc, #300]	; (3ee4 <spi_cmd+0x15c>)
    3db6:	781b      	ldrb	r3, [r3, #0]
    3db8:	2b00      	cmp	r3, #0
    3dba:	d077      	beq.n	3eac <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    3dbc:	3901      	subs	r1, #1
    3dbe:	b2c9      	uxtb	r1, r1
    3dc0:	e083      	b.n	3eca <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    3dc2:	0a0b      	lsrs	r3, r1, #8
    3dc4:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    3dc6:	2d00      	cmp	r5, #0
    3dc8:	d107      	bne.n	3dda <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    3dca:	aa01      	add	r2, sp, #4
    3dcc:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    3dce:	ab01      	add	r3, sp, #4
    3dd0:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    3dd2:	2200      	movs	r2, #0
    3dd4:	70da      	strb	r2, [r3, #3]
		len = 5;
    3dd6:	2105      	movs	r1, #5
		break;
    3dd8:	e7ec      	b.n	3db4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    3dda:	2280      	movs	r2, #128	; 0x80
    3ddc:	4252      	negs	r2, r2
    3dde:	4313      	orrs	r3, r2
    3de0:	aa01      	add	r2, sp, #4
    3de2:	7053      	strb	r3, [r2, #1]
    3de4:	e7f3      	b.n	3dce <spi_cmd+0x46>
		bc[1] = 0x00;
    3de6:	ab01      	add	r3, sp, #4
    3de8:	2200      	movs	r2, #0
    3dea:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3dec:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3dee:	70da      	strb	r2, [r3, #3]
		len = 5;
    3df0:	2105      	movs	r1, #5
		break;
    3df2:	e7df      	b.n	3db4 <spi_cmd+0x2c>
		bc[1] = 0x00;
    3df4:	ab01      	add	r3, sp, #4
    3df6:	2200      	movs	r2, #0
    3df8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3dfa:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3dfc:	70da      	strb	r2, [r3, #3]
		len = 5;
    3dfe:	2105      	movs	r1, #5
		break;
    3e00:	e7d8      	b.n	3db4 <spi_cmd+0x2c>
		bc[1] = 0xff;
    3e02:	ab01      	add	r3, sp, #4
    3e04:	22ff      	movs	r2, #255	; 0xff
    3e06:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    3e08:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    3e0a:	70da      	strb	r2, [r3, #3]
		len = 5;
    3e0c:	2105      	movs	r1, #5
		break;
    3e0e:	e7d1      	b.n	3db4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    3e10:	aa01      	add	r2, sp, #4
    3e12:	0c08      	lsrs	r0, r1, #16
    3e14:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    3e16:	0a08      	lsrs	r0, r1, #8
    3e18:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    3e1a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    3e1c:	0a19      	lsrs	r1, r3, #8
    3e1e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    3e20:	7153      	strb	r3, [r2, #5]
		len = 7;
    3e22:	2107      	movs	r1, #7
		break;
    3e24:	e7c6      	b.n	3db4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    3e26:	aa01      	add	r2, sp, #4
    3e28:	0c08      	lsrs	r0, r1, #16
    3e2a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    3e2c:	0a08      	lsrs	r0, r1, #8
    3e2e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    3e30:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    3e32:	0c19      	lsrs	r1, r3, #16
    3e34:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    3e36:	0a19      	lsrs	r1, r3, #8
    3e38:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    3e3a:	7193      	strb	r3, [r2, #6]
		len = 8;
    3e3c:	2108      	movs	r1, #8
		break;
    3e3e:	e7b9      	b.n	3db4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    3e40:	0a0b      	lsrs	r3, r1, #8
    3e42:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    3e44:	2d00      	cmp	r5, #0
    3e46:	d10c      	bne.n	3e62 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    3e48:	a801      	add	r0, sp, #4
    3e4a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    3e4c:	ab01      	add	r3, sp, #4
    3e4e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3e50:	0e11      	lsrs	r1, r2, #24
    3e52:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    3e54:	0c11      	lsrs	r1, r2, #16
    3e56:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    3e58:	0a11      	lsrs	r1, r2, #8
    3e5a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    3e5c:	719a      	strb	r2, [r3, #6]
		len = 8;
    3e5e:	2108      	movs	r1, #8
		break;
    3e60:	e7a8      	b.n	3db4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    3e62:	2080      	movs	r0, #128	; 0x80
    3e64:	4240      	negs	r0, r0
    3e66:	4303      	orrs	r3, r0
    3e68:	a801      	add	r0, sp, #4
    3e6a:	7043      	strb	r3, [r0, #1]
    3e6c:	e7ee      	b.n	3e4c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    3e6e:	ab01      	add	r3, sp, #4
    3e70:	0c08      	lsrs	r0, r1, #16
    3e72:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3e74:	0a08      	lsrs	r0, r1, #8
    3e76:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    3e78:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    3e7a:	0e11      	lsrs	r1, r2, #24
    3e7c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    3e7e:	0c11      	lsrs	r1, r2, #16
    3e80:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3e82:	0a11      	lsrs	r1, r2, #8
    3e84:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    3e86:	71da      	strb	r2, [r3, #7]
		len = 9;
    3e88:	2109      	movs	r1, #9
		break;
    3e8a:	e793      	b.n	3db4 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    3e8c:	2228      	movs	r2, #40	; 0x28
    3e8e:	32ff      	adds	r2, #255	; 0xff
    3e90:	4915      	ldr	r1, [pc, #84]	; (3ee8 <spi_cmd+0x160>)
    3e92:	4816      	ldr	r0, [pc, #88]	; (3eec <spi_cmd+0x164>)
    3e94:	4b16      	ldr	r3, [pc, #88]	; (3ef0 <spi_cmd+0x168>)
    3e96:	4798      	blx	r3
    3e98:	4816      	ldr	r0, [pc, #88]	; (3ef4 <spi_cmd+0x16c>)
    3e9a:	4b17      	ldr	r3, [pc, #92]	; (3ef8 <spi_cmd+0x170>)
    3e9c:	4798      	blx	r3
    3e9e:	200d      	movs	r0, #13
    3ea0:	4b16      	ldr	r3, [pc, #88]	; (3efc <spi_cmd+0x174>)
    3ea2:	4798      	blx	r3
			result = N_FAIL;
    3ea4:	2300      	movs	r3, #0
    3ea6:	e017      	b.n	3ed8 <spi_cmd+0x150>
	switch (cmd) {
    3ea8:	2300      	movs	r3, #0
    3eaa:	e015      	b.n	3ed8 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3eac:	1e4e      	subs	r6, r1, #1
    3eae:	aa01      	add	r2, sp, #4
    3eb0:	1995      	adds	r5, r2, r6
    3eb2:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    3eb4:	4c12      	ldr	r4, [pc, #72]	; (3f00 <spi_cmd+0x178>)
    3eb6:	005b      	lsls	r3, r3, #1
    3eb8:	7810      	ldrb	r0, [r2, #0]
    3eba:	4043      	eors	r3, r0
    3ebc:	5ce3      	ldrb	r3, [r4, r3]
    3ebe:	3201      	adds	r2, #1
	while (len--)
    3ec0:	42aa      	cmp	r2, r5
    3ec2:	d1f8      	bne.n	3eb6 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3ec4:	005b      	lsls	r3, r3, #1
    3ec6:	aa01      	add	r2, sp, #4
    3ec8:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    3eca:	b289      	uxth	r1, r1
    3ecc:	a801      	add	r0, sp, #4
    3ece:	4b0d      	ldr	r3, [pc, #52]	; (3f04 <spi_cmd+0x17c>)
    3ed0:	4798      	blx	r3
    3ed2:	2301      	movs	r3, #1
    3ed4:	2800      	cmp	r0, #0
    3ed6:	d1d9      	bne.n	3e8c <spi_cmd+0x104>
		}
	}

	return result;
}
    3ed8:	0018      	movs	r0, r3
    3eda:	b004      	add	sp, #16
    3edc:	bd70      	pop	{r4, r5, r6, pc}
    3ede:	46c0      	nop			; (mov r8, r8)
    3ee0:	00011190 	.word	0x00011190
    3ee4:	20000224 	.word	0x20000224
    3ee8:	000111d0 	.word	0x000111d0
    3eec:	00010b0c 	.word	0x00010b0c
    3ef0:	0000b339 	.word	0x0000b339
    3ef4:	00011660 	.word	0x00011660
    3ef8:	0000b455 	.word	0x0000b455
    3efc:	0000b36d 	.word	0x0000b36d
    3f00:	0001125c 	.word	0x0001125c
    3f04:	00003d69 	.word	0x00003d69

00003f08 <nmi_spi_read>:
{
    3f08:	b500      	push	{lr}
    3f0a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    3f0c:	ab01      	add	r3, sp, #4
    3f0e:	2200      	movs	r2, #0
    3f10:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    3f12:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    3f14:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3f16:	0019      	movs	r1, r3
    3f18:	2003      	movs	r0, #3
    3f1a:	4b02      	ldr	r3, [pc, #8]	; (3f24 <nmi_spi_read+0x1c>)
    3f1c:	4798      	blx	r3
}
    3f1e:	b005      	add	sp, #20
    3f20:	bd00      	pop	{pc}
    3f22:	46c0      	nop			; (mov r8, r8)
    3f24:	00002411 	.word	0x00002411

00003f28 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    3f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f2a:	46c6      	mov	lr, r8
    3f2c:	b500      	push	{lr}
    3f2e:	b082      	sub	sp, #8
    3f30:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3f32:	28cf      	cmp	r0, #207	; 0xcf
    3f34:	d02b      	beq.n	3f8e <spi_cmd_rsp+0x66>
    3f36:	0003      	movs	r3, r0
    3f38:	333b      	adds	r3, #59	; 0x3b
    3f3a:	b2db      	uxtb	r3, r3
    3f3c:	2b01      	cmp	r3, #1
    3f3e:	d926      	bls.n	3f8e <spi_cmd_rsp+0x66>
{
    3f40:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3f42:	466b      	mov	r3, sp
    3f44:	1dde      	adds	r6, r3, #7
    3f46:	4b26      	ldr	r3, [pc, #152]	; (3fe0 <spi_cmd_rsp+0xb8>)
    3f48:	4698      	mov	r8, r3
    3f4a:	2101      	movs	r1, #1
    3f4c:	0030      	movs	r0, r6
    3f4e:	47c0      	blx	r8
    3f50:	1e05      	subs	r5, r0, #0
    3f52:	d125      	bne.n	3fa0 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    3f54:	7833      	ldrb	r3, [r6, #0]
    3f56:	42bb      	cmp	r3, r7
    3f58:	d030      	beq.n	3fbc <spi_cmd_rsp+0x94>
    3f5a:	3c01      	subs	r4, #1
    3f5c:	b2e4      	uxtb	r4, r4
    3f5e:	2c00      	cmp	r4, #0
    3f60:	d1f3      	bne.n	3f4a <spi_cmd_rsp+0x22>
    3f62:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3f64:	466b      	mov	r3, sp
    3f66:	1dde      	adds	r6, r3, #7
    3f68:	4f1d      	ldr	r7, [pc, #116]	; (3fe0 <spi_cmd_rsp+0xb8>)
    3f6a:	2101      	movs	r1, #1
    3f6c:	0030      	movs	r0, r6
    3f6e:	47b8      	blx	r7
    3f70:	2800      	cmp	r0, #0
    3f72:	d125      	bne.n	3fc0 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    3f74:	7833      	ldrb	r3, [r6, #0]
    3f76:	2b00      	cmp	r3, #0
    3f78:	d02f      	beq.n	3fda <spi_cmd_rsp+0xb2>
    3f7a:	3c01      	subs	r4, #1
    3f7c:	b2e4      	uxtb	r4, r4
    3f7e:	2c00      	cmp	r4, #0
    3f80:	d1f3      	bne.n	3f6a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    3f82:	2501      	movs	r5, #1

_fail_:

	return result;
}
    3f84:	0028      	movs	r0, r5
    3f86:	b002      	add	sp, #8
    3f88:	bc04      	pop	{r2}
    3f8a:	4690      	mov	r8, r2
    3f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3f8e:	2101      	movs	r1, #1
    3f90:	466b      	mov	r3, sp
    3f92:	1dd8      	adds	r0, r3, #7
    3f94:	4b12      	ldr	r3, [pc, #72]	; (3fe0 <spi_cmd_rsp+0xb8>)
    3f96:	4798      	blx	r3
			result = N_FAIL;
    3f98:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3f9a:	2800      	cmp	r0, #0
    3f9c:	d0d0      	beq.n	3f40 <spi_cmd_rsp+0x18>
    3f9e:	e7f1      	b.n	3f84 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3fa0:	22b1      	movs	r2, #177	; 0xb1
    3fa2:	0052      	lsls	r2, r2, #1
    3fa4:	490f      	ldr	r1, [pc, #60]	; (3fe4 <spi_cmd_rsp+0xbc>)
    3fa6:	4810      	ldr	r0, [pc, #64]	; (3fe8 <spi_cmd_rsp+0xc0>)
    3fa8:	4b10      	ldr	r3, [pc, #64]	; (3fec <spi_cmd_rsp+0xc4>)
    3faa:	4798      	blx	r3
    3fac:	4810      	ldr	r0, [pc, #64]	; (3ff0 <spi_cmd_rsp+0xc8>)
    3fae:	4b11      	ldr	r3, [pc, #68]	; (3ff4 <spi_cmd_rsp+0xcc>)
    3fb0:	4798      	blx	r3
    3fb2:	200d      	movs	r0, #13
    3fb4:	4b10      	ldr	r3, [pc, #64]	; (3ff8 <spi_cmd_rsp+0xd0>)
    3fb6:	4798      	blx	r3
			result = N_FAIL;
    3fb8:	2500      	movs	r5, #0
			goto _fail_;
    3fba:	e7e3      	b.n	3f84 <spi_cmd_rsp+0x5c>
    3fbc:	240b      	movs	r4, #11
    3fbe:	e7d1      	b.n	3f64 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3fc0:	22b8      	movs	r2, #184	; 0xb8
    3fc2:	0052      	lsls	r2, r2, #1
    3fc4:	4907      	ldr	r1, [pc, #28]	; (3fe4 <spi_cmd_rsp+0xbc>)
    3fc6:	4808      	ldr	r0, [pc, #32]	; (3fe8 <spi_cmd_rsp+0xc0>)
    3fc8:	4b08      	ldr	r3, [pc, #32]	; (3fec <spi_cmd_rsp+0xc4>)
    3fca:	4798      	blx	r3
    3fcc:	4808      	ldr	r0, [pc, #32]	; (3ff0 <spi_cmd_rsp+0xc8>)
    3fce:	4b09      	ldr	r3, [pc, #36]	; (3ff4 <spi_cmd_rsp+0xcc>)
    3fd0:	4798      	blx	r3
    3fd2:	200d      	movs	r0, #13
    3fd4:	4b08      	ldr	r3, [pc, #32]	; (3ff8 <spi_cmd_rsp+0xd0>)
    3fd6:	4798      	blx	r3
			goto _fail_;
    3fd8:	e7d4      	b.n	3f84 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    3fda:	2501      	movs	r5, #1
    3fdc:	e7d2      	b.n	3f84 <spi_cmd_rsp+0x5c>
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	00003f09 	.word	0x00003f09
    3fe4:	000111e8 	.word	0x000111e8
    3fe8:	00010b0c 	.word	0x00010b0c
    3fec:	0000b339 	.word	0x0000b339
    3ff0:	0001168c 	.word	0x0001168c
    3ff4:	0000b455 	.word	0x0000b455
    3ff8:	0000b36d 	.word	0x0000b36d

00003ffc <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ffe:	46de      	mov	lr, fp
    4000:	4657      	mov	r7, sl
    4002:	464e      	mov	r6, r9
    4004:	4645      	mov	r5, r8
    4006:	b5e0      	push	{r5, r6, r7, lr}
    4008:	b087      	sub	sp, #28
    400a:	9001      	str	r0, [sp, #4]
    400c:	4689      	mov	r9, r1
    400e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    4010:	2300      	movs	r3, #0
    4012:	469a      	mov	sl, r3
    4014:	2380      	movs	r3, #128	; 0x80
    4016:	019b      	lsls	r3, r3, #6
    4018:	469b      	mov	fp, r3
    401a:	466a      	mov	r2, sp
    401c:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    401e:	4b3b      	ldr	r3, [pc, #236]	; (410c <spi_data_read+0x110>)
    4020:	4698      	mov	r8, r3
    4022:	e02e      	b.n	4082 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    4024:	4a3a      	ldr	r2, [pc, #232]	; (4110 <spi_data_read+0x114>)
    4026:	493b      	ldr	r1, [pc, #236]	; (4114 <spi_data_read+0x118>)
    4028:	483b      	ldr	r0, [pc, #236]	; (4118 <spi_data_read+0x11c>)
    402a:	4b3c      	ldr	r3, [pc, #240]	; (411c <spi_data_read+0x120>)
    402c:	4798      	blx	r3
    402e:	483c      	ldr	r0, [pc, #240]	; (4120 <spi_data_read+0x124>)
    4030:	4b3c      	ldr	r3, [pc, #240]	; (4124 <spi_data_read+0x128>)
    4032:	4798      	blx	r3
    4034:	200d      	movs	r0, #13
    4036:	4b3c      	ldr	r3, [pc, #240]	; (4128 <spi_data_read+0x12c>)
    4038:	4798      	blx	r3
    403a:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    403c:	0028      	movs	r0, r5
    403e:	b007      	add	sp, #28
    4040:	bc3c      	pop	{r2, r3, r4, r5}
    4042:	4690      	mov	r8, r2
    4044:	4699      	mov	r9, r3
    4046:	46a2      	mov	sl, r4
    4048:	46ab      	mov	fp, r5
    404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    404c:	2c00      	cmp	r4, #0
    404e:	dd2e      	ble.n	40ae <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    4050:	9b01      	ldr	r3, [sp, #4]
    4052:	4453      	add	r3, sl
    4054:	0018      	movs	r0, r3
    4056:	0039      	movs	r1, r7
    4058:	4b2c      	ldr	r3, [pc, #176]	; (410c <spi_data_read+0x110>)
    405a:	4798      	blx	r3
    405c:	1e04      	subs	r4, r0, #0
    405e:	d133      	bne.n	40c8 <spi_data_read+0xcc>
		if(!clockless)
    4060:	9b02      	ldr	r3, [sp, #8]
    4062:	2b00      	cmp	r3, #0
    4064:	d103      	bne.n	406e <spi_data_read+0x72>
			if (!gu8Crc_off) {
    4066:	4b31      	ldr	r3, [pc, #196]	; (412c <spi_data_read+0x130>)
    4068:	781b      	ldrb	r3, [r3, #0]
    406a:	2b00      	cmp	r3, #0
    406c:	d039      	beq.n	40e2 <spi_data_read+0xe6>
		ix += nbytes;
    406e:	4653      	mov	r3, sl
    4070:	18fb      	adds	r3, r7, r3
    4072:	b21b      	sxth	r3, r3
    4074:	469a      	mov	sl, r3
		sz -= nbytes;
    4076:	464b      	mov	r3, r9
    4078:	1bdf      	subs	r7, r3, r7
    407a:	b2bb      	uxth	r3, r7
    407c:	4699      	mov	r9, r3
	} while (sz);
    407e:	2b00      	cmp	r3, #0
    4080:	d042      	beq.n	4108 <spi_data_read+0x10c>
    4082:	464f      	mov	r7, r9
    4084:	45d9      	cmp	r9, fp
    4086:	d901      	bls.n	408c <spi_data_read+0x90>
    4088:	466b      	mov	r3, sp
    408a:	89df      	ldrh	r7, [r3, #14]
    408c:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    408e:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4090:	ab04      	add	r3, sp, #16
    4092:	1cde      	adds	r6, r3, #3
    4094:	2101      	movs	r1, #1
    4096:	0030      	movs	r0, r6
    4098:	47c0      	blx	r8
    409a:	1e05      	subs	r5, r0, #0
    409c:	d1c2      	bne.n	4024 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    409e:	7833      	ldrb	r3, [r6, #0]
    40a0:	091b      	lsrs	r3, r3, #4
    40a2:	2b0f      	cmp	r3, #15
    40a4:	d0d2      	beq.n	404c <spi_data_read+0x50>
    40a6:	3c01      	subs	r4, #1
    40a8:	b224      	sxth	r4, r4
		} while (retry--);
    40aa:	1c63      	adds	r3, r4, #1
    40ac:	d1f2      	bne.n	4094 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    40ae:	4a20      	ldr	r2, [pc, #128]	; (4130 <spi_data_read+0x134>)
    40b0:	4918      	ldr	r1, [pc, #96]	; (4114 <spi_data_read+0x118>)
    40b2:	4819      	ldr	r0, [pc, #100]	; (4118 <spi_data_read+0x11c>)
    40b4:	4c19      	ldr	r4, [pc, #100]	; (411c <spi_data_read+0x120>)
    40b6:	47a0      	blx	r4
    40b8:	ab04      	add	r3, sp, #16
    40ba:	78d9      	ldrb	r1, [r3, #3]
    40bc:	481d      	ldr	r0, [pc, #116]	; (4134 <spi_data_read+0x138>)
    40be:	47a0      	blx	r4
    40c0:	200d      	movs	r0, #13
    40c2:	4b19      	ldr	r3, [pc, #100]	; (4128 <spi_data_read+0x12c>)
    40c4:	4798      	blx	r3
			break;
    40c6:	e7b9      	b.n	403c <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    40c8:	22c5      	movs	r2, #197	; 0xc5
    40ca:	0092      	lsls	r2, r2, #2
    40cc:	4911      	ldr	r1, [pc, #68]	; (4114 <spi_data_read+0x118>)
    40ce:	4812      	ldr	r0, [pc, #72]	; (4118 <spi_data_read+0x11c>)
    40d0:	4b12      	ldr	r3, [pc, #72]	; (411c <spi_data_read+0x120>)
    40d2:	4798      	blx	r3
    40d4:	4818      	ldr	r0, [pc, #96]	; (4138 <spi_data_read+0x13c>)
    40d6:	4b13      	ldr	r3, [pc, #76]	; (4124 <spi_data_read+0x128>)
    40d8:	4798      	blx	r3
    40da:	200d      	movs	r0, #13
    40dc:	4b12      	ldr	r3, [pc, #72]	; (4128 <spi_data_read+0x12c>)
    40de:	4798      	blx	r3
			break;
    40e0:	e7ac      	b.n	403c <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    40e2:	2102      	movs	r1, #2
    40e4:	a805      	add	r0, sp, #20
    40e6:	4b09      	ldr	r3, [pc, #36]	; (410c <spi_data_read+0x110>)
    40e8:	4798      	blx	r3
    40ea:	2800      	cmp	r0, #0
    40ec:	d0bf      	beq.n	406e <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    40ee:	4a13      	ldr	r2, [pc, #76]	; (413c <spi_data_read+0x140>)
    40f0:	4908      	ldr	r1, [pc, #32]	; (4114 <spi_data_read+0x118>)
    40f2:	4809      	ldr	r0, [pc, #36]	; (4118 <spi_data_read+0x11c>)
    40f4:	4b09      	ldr	r3, [pc, #36]	; (411c <spi_data_read+0x120>)
    40f6:	4798      	blx	r3
    40f8:	4811      	ldr	r0, [pc, #68]	; (4140 <spi_data_read+0x144>)
    40fa:	4b0a      	ldr	r3, [pc, #40]	; (4124 <spi_data_read+0x128>)
    40fc:	4798      	blx	r3
    40fe:	200d      	movs	r0, #13
    4100:	4b09      	ldr	r3, [pc, #36]	; (4128 <spi_data_read+0x12c>)
    4102:	4798      	blx	r3
					result = N_FAIL;
    4104:	0025      	movs	r5, r4
					break;
    4106:	e799      	b.n	403c <spi_data_read+0x40>
    4108:	2501      	movs	r5, #1
    410a:	e797      	b.n	403c <spi_data_read+0x40>
    410c:	00003f09 	.word	0x00003f09
    4110:	000002ff 	.word	0x000002ff
    4114:	000111f4 	.word	0x000111f4
    4118:	00010b0c 	.word	0x00010b0c
    411c:	0000b339 	.word	0x0000b339
    4120:	000116c0 	.word	0x000116c0
    4124:	0000b455 	.word	0x0000b455
    4128:	0000b36d 	.word	0x0000b36d
    412c:	20000224 	.word	0x20000224
    4130:	0000030b 	.word	0x0000030b
    4134:	000116f4 	.word	0x000116f4
    4138:	00011724 	.word	0x00011724
    413c:	0000031f 	.word	0x0000031f
    4140:	00011754 	.word	0x00011754

00004144 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    4144:	b5f0      	push	{r4, r5, r6, r7, lr}
    4146:	46d6      	mov	lr, sl
    4148:	464f      	mov	r7, r9
    414a:	4646      	mov	r6, r8
    414c:	b5c0      	push	{r6, r7, lr}
    414e:	b086      	sub	sp, #24
    4150:	9003      	str	r0, [sp, #12]
    4152:	9104      	str	r1, [sp, #16]
    4154:	2830      	cmp	r0, #48	; 0x30
    4156:	d80f      	bhi.n	4178 <spi_write_reg+0x34>
    4158:	4b30      	ldr	r3, [pc, #192]	; (421c <spi_write_reg+0xd8>)
    415a:	781f      	ldrb	r7, [r3, #0]
    415c:	b2fb      	uxtb	r3, r7
    415e:	9305      	str	r3, [sp, #20]
    4160:	2300      	movs	r3, #0
    4162:	2230      	movs	r2, #48	; 0x30
    4164:	9903      	ldr	r1, [sp, #12]
    4166:	428a      	cmp	r2, r1
    4168:	415b      	adcs	r3, r3
    416a:	b2db      	uxtb	r3, r3
    416c:	469a      	mov	sl, r3
    416e:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    4170:	4b2b      	ldr	r3, [pc, #172]	; (4220 <spi_write_reg+0xdc>)
    4172:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    4174:	46d1      	mov	r9, sl
    4176:	e033      	b.n	41e0 <spi_write_reg+0x9c>
    4178:	4b2a      	ldr	r3, [pc, #168]	; (4224 <spi_write_reg+0xe0>)
    417a:	781f      	ldrb	r7, [r3, #0]
    417c:	e7ee      	b.n	415c <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    417e:	9805      	ldr	r0, [sp, #20]
    4180:	4b29      	ldr	r3, [pc, #164]	; (4228 <spi_write_reg+0xe4>)
    4182:	4798      	blx	r3
    4184:	0004      	movs	r4, r0
	if (result != N_OK) {
    4186:	2801      	cmp	r0, #1
    4188:	d041      	beq.n	420e <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    418a:	22e7      	movs	r2, #231	; 0xe7
    418c:	0092      	lsls	r2, r2, #2
    418e:	4927      	ldr	r1, [pc, #156]	; (422c <spi_write_reg+0xe8>)
    4190:	4827      	ldr	r0, [pc, #156]	; (4230 <spi_write_reg+0xec>)
    4192:	4e28      	ldr	r6, [pc, #160]	; (4234 <spi_write_reg+0xf0>)
    4194:	47b0      	blx	r6
    4196:	9903      	ldr	r1, [sp, #12]
    4198:	4827      	ldr	r0, [pc, #156]	; (4238 <spi_write_reg+0xf4>)
    419a:	47b0      	blx	r6
    419c:	200d      	movs	r0, #13
    419e:	4b27      	ldr	r3, [pc, #156]	; (423c <spi_write_reg+0xf8>)
    41a0:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    41a2:	2001      	movs	r0, #1
    41a4:	4e26      	ldr	r6, [pc, #152]	; (4240 <spi_write_reg+0xfc>)
    41a6:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    41a8:	2300      	movs	r3, #0
    41aa:	9300      	str	r3, [sp, #0]
    41ac:	2200      	movs	r2, #0
    41ae:	2100      	movs	r1, #0
    41b0:	20cf      	movs	r0, #207	; 0xcf
    41b2:	4f1b      	ldr	r7, [pc, #108]	; (4220 <spi_write_reg+0xdc>)
    41b4:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    41b6:	20cf      	movs	r0, #207	; 0xcf
    41b8:	4b1b      	ldr	r3, [pc, #108]	; (4228 <spi_write_reg+0xe4>)
    41ba:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    41bc:	4a21      	ldr	r2, [pc, #132]	; (4244 <spi_write_reg+0x100>)
    41be:	491b      	ldr	r1, [pc, #108]	; (422c <spi_write_reg+0xe8>)
    41c0:	481b      	ldr	r0, [pc, #108]	; (4230 <spi_write_reg+0xec>)
    41c2:	4f1c      	ldr	r7, [pc, #112]	; (4234 <spi_write_reg+0xf0>)
    41c4:	47b8      	blx	r7
    41c6:	9b04      	ldr	r3, [sp, #16]
    41c8:	9a03      	ldr	r2, [sp, #12]
    41ca:	0029      	movs	r1, r5
    41cc:	481e      	ldr	r0, [pc, #120]	; (4248 <spi_write_reg+0x104>)
    41ce:	47b8      	blx	r7
    41d0:	200d      	movs	r0, #13
    41d2:	4b1a      	ldr	r3, [pc, #104]	; (423c <spi_write_reg+0xf8>)
    41d4:	4798      	blx	r3
		nm_bsp_sleep(1);
    41d6:	2001      	movs	r0, #1
    41d8:	47b0      	blx	r6
    41da:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    41dc:	2d00      	cmp	r5, #0
    41de:	d016      	beq.n	420e <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    41e0:	464b      	mov	r3, r9
    41e2:	9300      	str	r3, [sp, #0]
    41e4:	2304      	movs	r3, #4
    41e6:	9a04      	ldr	r2, [sp, #16]
    41e8:	9f03      	ldr	r7, [sp, #12]
    41ea:	0039      	movs	r1, r7
    41ec:	9805      	ldr	r0, [sp, #20]
    41ee:	47c0      	blx	r8
    41f0:	0004      	movs	r4, r0
	if (result != N_OK) {
    41f2:	2801      	cmp	r0, #1
    41f4:	d0c3      	beq.n	417e <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    41f6:	4a15      	ldr	r2, [pc, #84]	; (424c <spi_write_reg+0x108>)
    41f8:	490c      	ldr	r1, [pc, #48]	; (422c <spi_write_reg+0xe8>)
    41fa:	480d      	ldr	r0, [pc, #52]	; (4230 <spi_write_reg+0xec>)
    41fc:	4e0d      	ldr	r6, [pc, #52]	; (4234 <spi_write_reg+0xf0>)
    41fe:	47b0      	blx	r6
    4200:	0039      	movs	r1, r7
    4202:	4813      	ldr	r0, [pc, #76]	; (4250 <spi_write_reg+0x10c>)
    4204:	47b0      	blx	r6
    4206:	200d      	movs	r0, #13
    4208:	4b0c      	ldr	r3, [pc, #48]	; (423c <spi_write_reg+0xf8>)
    420a:	4798      	blx	r3
		goto _FAIL_;
    420c:	e7c9      	b.n	41a2 <spi_write_reg+0x5e>
	}

	return result;
}
    420e:	0020      	movs	r0, r4
    4210:	b006      	add	sp, #24
    4212:	bc1c      	pop	{r2, r3, r4}
    4214:	4690      	mov	r8, r2
    4216:	4699      	mov	r9, r3
    4218:	46a2      	mov	sl, r4
    421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    421c:	000111cc 	.word	0x000111cc
    4220:	00003d89 	.word	0x00003d89
    4224:	000111cd 	.word	0x000111cd
    4228:	00003f29 	.word	0x00003f29
    422c:	00011214 	.word	0x00011214
    4230:	00010b0c 	.word	0x00010b0c
    4234:	0000b339 	.word	0x0000b339
    4238:	0001184c 	.word	0x0001184c
    423c:	0000b36d 	.word	0x0000b36d
    4240:	000021d5 	.word	0x000021d5
    4244:	000003af 	.word	0x000003af
    4248:	00011884 	.word	0x00011884
    424c:	00000396 	.word	0x00000396
    4250:	00011820 	.word	0x00011820

00004254 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    4254:	b5f0      	push	{r4, r5, r6, r7, lr}
    4256:	46de      	mov	lr, fp
    4258:	4657      	mov	r7, sl
    425a:	464e      	mov	r6, r9
    425c:	4645      	mov	r5, r8
    425e:	b5e0      	push	{r5, r6, r7, lr}
    4260:	b087      	sub	sp, #28
    4262:	9002      	str	r0, [sp, #8]
    4264:	468b      	mov	fp, r1
    4266:	28ff      	cmp	r0, #255	; 0xff
    4268:	d80f      	bhi.n	428a <spi_read_reg+0x36>
    426a:	4b41      	ldr	r3, [pc, #260]	; (4370 <spi_read_reg+0x11c>)
    426c:	781f      	ldrb	r7, [r3, #0]
    426e:	b2fb      	uxtb	r3, r7
    4270:	9303      	str	r3, [sp, #12]
    4272:	2300      	movs	r3, #0
    4274:	22ff      	movs	r2, #255	; 0xff
    4276:	9902      	ldr	r1, [sp, #8]
    4278:	428a      	cmp	r2, r1
    427a:	415b      	adcs	r3, r3
    427c:	b2db      	uxtb	r3, r3
    427e:	469a      	mov	sl, r3
    4280:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    4282:	4b3c      	ldr	r3, [pc, #240]	; (4374 <spi_read_reg+0x120>)
    4284:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    4286:	46d1      	mov	r9, sl
    4288:	e031      	b.n	42ee <spi_read_reg+0x9a>
    428a:	4b3b      	ldr	r3, [pc, #236]	; (4378 <spi_read_reg+0x124>)
    428c:	781f      	ldrb	r7, [r3, #0]
    428e:	e7ee      	b.n	426e <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    4290:	9803      	ldr	r0, [sp, #12]
    4292:	4b3a      	ldr	r3, [pc, #232]	; (437c <spi_read_reg+0x128>)
    4294:	4798      	blx	r3
    4296:	0004      	movs	r4, r0
	if (result != N_OK) {
    4298:	2801      	cmp	r0, #1
    429a:	d03f      	beq.n	431c <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    429c:	4a38      	ldr	r2, [pc, #224]	; (4380 <spi_read_reg+0x12c>)
    429e:	4939      	ldr	r1, [pc, #228]	; (4384 <spi_read_reg+0x130>)
    42a0:	4839      	ldr	r0, [pc, #228]	; (4388 <spi_read_reg+0x134>)
    42a2:	4e3a      	ldr	r6, [pc, #232]	; (438c <spi_read_reg+0x138>)
    42a4:	47b0      	blx	r6
    42a6:	9902      	ldr	r1, [sp, #8]
    42a8:	4839      	ldr	r0, [pc, #228]	; (4390 <spi_read_reg+0x13c>)
    42aa:	47b0      	blx	r6
    42ac:	200d      	movs	r0, #13
    42ae:	4b39      	ldr	r3, [pc, #228]	; (4394 <spi_read_reg+0x140>)
    42b0:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    42b2:	2001      	movs	r0, #1
    42b4:	4e38      	ldr	r6, [pc, #224]	; (4398 <spi_read_reg+0x144>)
    42b6:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    42b8:	2300      	movs	r3, #0
    42ba:	9300      	str	r3, [sp, #0]
    42bc:	2200      	movs	r2, #0
    42be:	2100      	movs	r1, #0
    42c0:	20cf      	movs	r0, #207	; 0xcf
    42c2:	4f2c      	ldr	r7, [pc, #176]	; (4374 <spi_read_reg+0x120>)
    42c4:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    42c6:	20cf      	movs	r0, #207	; 0xcf
    42c8:	4b2c      	ldr	r3, [pc, #176]	; (437c <spi_read_reg+0x128>)
    42ca:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    42cc:	4a33      	ldr	r2, [pc, #204]	; (439c <spi_read_reg+0x148>)
    42ce:	492d      	ldr	r1, [pc, #180]	; (4384 <spi_read_reg+0x130>)
    42d0:	482d      	ldr	r0, [pc, #180]	; (4388 <spi_read_reg+0x134>)
    42d2:	4f2e      	ldr	r7, [pc, #184]	; (438c <spi_read_reg+0x138>)
    42d4:	47b8      	blx	r7
    42d6:	9a02      	ldr	r2, [sp, #8]
    42d8:	0029      	movs	r1, r5
    42da:	4831      	ldr	r0, [pc, #196]	; (43a0 <spi_read_reg+0x14c>)
    42dc:	47b8      	blx	r7
    42de:	200d      	movs	r0, #13
    42e0:	4b2c      	ldr	r3, [pc, #176]	; (4394 <spi_read_reg+0x140>)
    42e2:	4798      	blx	r3
		nm_bsp_sleep(1);
    42e4:	2001      	movs	r0, #1
    42e6:	47b0      	blx	r6
    42e8:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    42ea:	2d00      	cmp	r5, #0
    42ec:	d037      	beq.n	435e <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    42ee:	464b      	mov	r3, r9
    42f0:	9300      	str	r3, [sp, #0]
    42f2:	2304      	movs	r3, #4
    42f4:	2200      	movs	r2, #0
    42f6:	9f02      	ldr	r7, [sp, #8]
    42f8:	0039      	movs	r1, r7
    42fa:	9803      	ldr	r0, [sp, #12]
    42fc:	47c0      	blx	r8
    42fe:	0004      	movs	r4, r0
	if (result != N_OK) {
    4300:	2801      	cmp	r0, #1
    4302:	d0c5      	beq.n	4290 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    4304:	4a27      	ldr	r2, [pc, #156]	; (43a4 <spi_read_reg+0x150>)
    4306:	491f      	ldr	r1, [pc, #124]	; (4384 <spi_read_reg+0x130>)
    4308:	481f      	ldr	r0, [pc, #124]	; (4388 <spi_read_reg+0x134>)
    430a:	4e20      	ldr	r6, [pc, #128]	; (438c <spi_read_reg+0x138>)
    430c:	47b0      	blx	r6
    430e:	0039      	movs	r1, r7
    4310:	4825      	ldr	r0, [pc, #148]	; (43a8 <spi_read_reg+0x154>)
    4312:	47b0      	blx	r6
    4314:	200d      	movs	r0, #13
    4316:	4b1f      	ldr	r3, [pc, #124]	; (4394 <spi_read_reg+0x140>)
    4318:	4798      	blx	r3
		goto _FAIL_;
    431a:	e7ca      	b.n	42b2 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    431c:	464a      	mov	r2, r9
    431e:	2104      	movs	r1, #4
    4320:	a805      	add	r0, sp, #20
    4322:	4b22      	ldr	r3, [pc, #136]	; (43ac <spi_read_reg+0x158>)
    4324:	4798      	blx	r3
    4326:	0004      	movs	r4, r0
	if (result != N_OK) {
    4328:	2801      	cmp	r0, #1
    432a:	d00b      	beq.n	4344 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    432c:	4a20      	ldr	r2, [pc, #128]	; (43b0 <spi_read_reg+0x15c>)
    432e:	4915      	ldr	r1, [pc, #84]	; (4384 <spi_read_reg+0x130>)
    4330:	4815      	ldr	r0, [pc, #84]	; (4388 <spi_read_reg+0x134>)
    4332:	4b16      	ldr	r3, [pc, #88]	; (438c <spi_read_reg+0x138>)
    4334:	4798      	blx	r3
    4336:	481f      	ldr	r0, [pc, #124]	; (43b4 <spi_read_reg+0x160>)
    4338:	4b1f      	ldr	r3, [pc, #124]	; (43b8 <spi_read_reg+0x164>)
    433a:	4798      	blx	r3
    433c:	200d      	movs	r0, #13
    433e:	4b15      	ldr	r3, [pc, #84]	; (4394 <spi_read_reg+0x140>)
    4340:	4798      	blx	r3
		goto _FAIL_;
    4342:	e7b6      	b.n	42b2 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    4344:	aa05      	add	r2, sp, #20
    4346:	7853      	ldrb	r3, [r2, #1]
    4348:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    434a:	7891      	ldrb	r1, [r2, #2]
    434c:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    434e:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    4350:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    4352:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    4354:	78d2      	ldrb	r2, [r2, #3]
    4356:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    4358:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    435a:	465a      	mov	r2, fp
    435c:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    435e:	0020      	movs	r0, r4
    4360:	b007      	add	sp, #28
    4362:	bc3c      	pop	{r2, r3, r4, r5}
    4364:	4690      	mov	r8, r2
    4366:	4699      	mov	r9, r3
    4368:	46a2      	mov	sl, r4
    436a:	46ab      	mov	fp, r5
    436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	000111ce 	.word	0x000111ce
    4374:	00003d89 	.word	0x00003d89
    4378:	000111cf 	.word	0x000111cf
    437c:	00003f29 	.word	0x00003f29
    4380:	0000041d 	.word	0x0000041d
    4384:	00011234 	.word	0x00011234
    4388:	00010b0c 	.word	0x00010b0c
    438c:	0000b339 	.word	0x0000b339
    4390:	000117b4 	.word	0x000117b4
    4394:	0000b36d 	.word	0x0000b36d
    4398:	000021d5 	.word	0x000021d5
    439c:	0000043c 	.word	0x0000043c
    43a0:	00011808 	.word	0x00011808
    43a4:	00000417 	.word	0x00000417
    43a8:	00011788 	.word	0x00011788
    43ac:	00003ffd 	.word	0x00003ffd
    43b0:	00000424 	.word	0x00000424
    43b4:	000117e8 	.word	0x000117e8
    43b8:	0000b455 	.word	0x0000b455

000043bc <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    43bc:	b510      	push	{r4, lr}
    43be:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    43c0:	2300      	movs	r3, #0
    43c2:	9300      	str	r3, [sp, #0]
    43c4:	2200      	movs	r2, #0
    43c6:	2100      	movs	r1, #0
    43c8:	20cf      	movs	r0, #207	; 0xcf
    43ca:	4c04      	ldr	r4, [pc, #16]	; (43dc <nm_spi_reset+0x20>)
    43cc:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    43ce:	20cf      	movs	r0, #207	; 0xcf
    43d0:	4b03      	ldr	r3, [pc, #12]	; (43e0 <nm_spi_reset+0x24>)
    43d2:	4798      	blx	r3
	return M2M_SUCCESS;
}
    43d4:	2000      	movs	r0, #0
    43d6:	b002      	add	sp, #8
    43d8:	bd10      	pop	{r4, pc}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	00003d89 	.word	0x00003d89
    43e0:	00003f29 	.word	0x00003f29

000043e4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    43e4:	2200      	movs	r2, #0
    43e6:	4b02      	ldr	r3, [pc, #8]	; (43f0 <nm_spi_deinit+0xc>)
    43e8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    43ea:	2000      	movs	r0, #0
    43ec:	4770      	bx	lr
    43ee:	46c0      	nop			; (mov r8, r8)
    43f0:	20000224 	.word	0x20000224

000043f4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    43f4:	b500      	push	{lr}
    43f6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    43f8:	a901      	add	r1, sp, #4
    43fa:	4b02      	ldr	r3, [pc, #8]	; (4404 <nm_spi_read_reg+0x10>)
    43fc:	4798      	blx	r3

	return u32Val;
}
    43fe:	9801      	ldr	r0, [sp, #4]
    4400:	b003      	add	sp, #12
    4402:	bd00      	pop	{pc}
    4404:	00004255 	.word	0x00004255

00004408 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4408:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    440a:	4b04      	ldr	r3, [pc, #16]	; (441c <nm_spi_read_reg_with_ret+0x14>)
    440c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    440e:	2300      	movs	r3, #0
    4410:	2801      	cmp	r0, #1
    4412:	d101      	bne.n	4418 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    4414:	0018      	movs	r0, r3
    4416:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    4418:	3b06      	subs	r3, #6
    441a:	e7fb      	b.n	4414 <nm_spi_read_reg_with_ret+0xc>
    441c:	00004255 	.word	0x00004255

00004420 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4420:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    4422:	4b04      	ldr	r3, [pc, #16]	; (4434 <nm_spi_write_reg+0x14>)
    4424:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4426:	2300      	movs	r3, #0
    4428:	2801      	cmp	r0, #1
    442a:	d101      	bne.n	4430 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    442c:	0018      	movs	r0, r3
    442e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    4430:	3b06      	subs	r3, #6
    4432:	e7fb      	b.n	442c <nm_spi_write_reg+0xc>
    4434:	00004145 	.word	0x00004145

00004438 <nm_spi_init>:
{
    4438:	b510      	push	{r4, lr}
    443a:	b082      	sub	sp, #8
	uint32 reg = 0;
    443c:	2300      	movs	r3, #0
    443e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    4440:	4a35      	ldr	r2, [pc, #212]	; (4518 <nm_spi_init+0xe0>)
    4442:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4444:	4669      	mov	r1, sp
    4446:	4835      	ldr	r0, [pc, #212]	; (451c <nm_spi_init+0xe4>)
    4448:	4b35      	ldr	r3, [pc, #212]	; (4520 <nm_spi_init+0xe8>)
    444a:	4798      	blx	r3
    444c:	2800      	cmp	r0, #0
    444e:	d028      	beq.n	44a2 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    4450:	4b31      	ldr	r3, [pc, #196]	; (4518 <nm_spi_init+0xe0>)
    4452:	781b      	ldrb	r3, [r3, #0]
    4454:	2b00      	cmp	r3, #0
    4456:	d10d      	bne.n	4474 <nm_spi_init+0x3c>
		reg &= ~0x70;
    4458:	337c      	adds	r3, #124	; 0x7c
    445a:	9900      	ldr	r1, [sp, #0]
    445c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    445e:	3b2c      	subs	r3, #44	; 0x2c
    4460:	4319      	orrs	r1, r3
    4462:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    4464:	482d      	ldr	r0, [pc, #180]	; (451c <nm_spi_init+0xe4>)
    4466:	4b2f      	ldr	r3, [pc, #188]	; (4524 <nm_spi_init+0xec>)
    4468:	4798      	blx	r3
    446a:	1e04      	subs	r4, r0, #0
    446c:	d039      	beq.n	44e2 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    446e:	2201      	movs	r2, #1
    4470:	4b29      	ldr	r3, [pc, #164]	; (4518 <nm_spi_init+0xe0>)
    4472:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    4474:	a901      	add	r1, sp, #4
    4476:	2080      	movs	r0, #128	; 0x80
    4478:	0140      	lsls	r0, r0, #5
    447a:	4b29      	ldr	r3, [pc, #164]	; (4520 <nm_spi_init+0xe8>)
    447c:	4798      	blx	r3
    447e:	2800      	cmp	r0, #0
    4480:	d03b      	beq.n	44fa <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    4482:	4c26      	ldr	r4, [pc, #152]	; (451c <nm_spi_init+0xe4>)
    4484:	0020      	movs	r0, r4
    4486:	4b28      	ldr	r3, [pc, #160]	; (4528 <nm_spi_init+0xf0>)
    4488:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    448a:	2370      	movs	r3, #112	; 0x70
    448c:	0001      	movs	r1, r0
    448e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    4490:	2050      	movs	r0, #80	; 0x50
    4492:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    4494:	0020      	movs	r0, r4
    4496:	4b25      	ldr	r3, [pc, #148]	; (452c <nm_spi_init+0xf4>)
    4498:	4798      	blx	r3
	return M2M_SUCCESS;
    449a:	2400      	movs	r4, #0
}
    449c:	0020      	movs	r0, r4
    449e:	b002      	add	sp, #8
    44a0:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    44a2:	2201      	movs	r2, #1
    44a4:	4b1c      	ldr	r3, [pc, #112]	; (4518 <nm_spi_init+0xe0>)
    44a6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    44a8:	4a21      	ldr	r2, [pc, #132]	; (4530 <nm_spi_init+0xf8>)
    44aa:	4922      	ldr	r1, [pc, #136]	; (4534 <nm_spi_init+0xfc>)
    44ac:	4822      	ldr	r0, [pc, #136]	; (4538 <nm_spi_init+0x100>)
    44ae:	4b23      	ldr	r3, [pc, #140]	; (453c <nm_spi_init+0x104>)
    44b0:	4798      	blx	r3
    44b2:	4823      	ldr	r0, [pc, #140]	; (4540 <nm_spi_init+0x108>)
    44b4:	4b23      	ldr	r3, [pc, #140]	; (4544 <nm_spi_init+0x10c>)
    44b6:	4798      	blx	r3
    44b8:	200d      	movs	r0, #13
    44ba:	4b23      	ldr	r3, [pc, #140]	; (4548 <nm_spi_init+0x110>)
    44bc:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    44be:	4669      	mov	r1, sp
    44c0:	4816      	ldr	r0, [pc, #88]	; (451c <nm_spi_init+0xe4>)
    44c2:	4b17      	ldr	r3, [pc, #92]	; (4520 <nm_spi_init+0xe8>)
    44c4:	4798      	blx	r3
    44c6:	1e04      	subs	r4, r0, #0
    44c8:	d1c2      	bne.n	4450 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    44ca:	4a20      	ldr	r2, [pc, #128]	; (454c <nm_spi_init+0x114>)
    44cc:	4919      	ldr	r1, [pc, #100]	; (4534 <nm_spi_init+0xfc>)
    44ce:	481a      	ldr	r0, [pc, #104]	; (4538 <nm_spi_init+0x100>)
    44d0:	4b1a      	ldr	r3, [pc, #104]	; (453c <nm_spi_init+0x104>)
    44d2:	4798      	blx	r3
    44d4:	481e      	ldr	r0, [pc, #120]	; (4550 <nm_spi_init+0x118>)
    44d6:	4b1b      	ldr	r3, [pc, #108]	; (4544 <nm_spi_init+0x10c>)
    44d8:	4798      	blx	r3
    44da:	200d      	movs	r0, #13
    44dc:	4b1a      	ldr	r3, [pc, #104]	; (4548 <nm_spi_init+0x110>)
    44de:	4798      	blx	r3
			return 0;
    44e0:	e7dc      	b.n	449c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    44e2:	4a1c      	ldr	r2, [pc, #112]	; (4554 <nm_spi_init+0x11c>)
    44e4:	4913      	ldr	r1, [pc, #76]	; (4534 <nm_spi_init+0xfc>)
    44e6:	4814      	ldr	r0, [pc, #80]	; (4538 <nm_spi_init+0x100>)
    44e8:	4b14      	ldr	r3, [pc, #80]	; (453c <nm_spi_init+0x104>)
    44ea:	4798      	blx	r3
    44ec:	481a      	ldr	r0, [pc, #104]	; (4558 <nm_spi_init+0x120>)
    44ee:	4b15      	ldr	r3, [pc, #84]	; (4544 <nm_spi_init+0x10c>)
    44f0:	4798      	blx	r3
    44f2:	200d      	movs	r0, #13
    44f4:	4b14      	ldr	r3, [pc, #80]	; (4548 <nm_spi_init+0x110>)
    44f6:	4798      	blx	r3
			return 0;
    44f8:	e7d0      	b.n	449c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    44fa:	4a18      	ldr	r2, [pc, #96]	; (455c <nm_spi_init+0x124>)
    44fc:	490d      	ldr	r1, [pc, #52]	; (4534 <nm_spi_init+0xfc>)
    44fe:	480e      	ldr	r0, [pc, #56]	; (4538 <nm_spi_init+0x100>)
    4500:	4b0e      	ldr	r3, [pc, #56]	; (453c <nm_spi_init+0x104>)
    4502:	4798      	blx	r3
    4504:	4816      	ldr	r0, [pc, #88]	; (4560 <nm_spi_init+0x128>)
    4506:	4b0f      	ldr	r3, [pc, #60]	; (4544 <nm_spi_init+0x10c>)
    4508:	4798      	blx	r3
    450a:	200d      	movs	r0, #13
    450c:	4b0e      	ldr	r3, [pc, #56]	; (4548 <nm_spi_init+0x110>)
    450e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    4510:	2406      	movs	r4, #6
    4512:	4264      	negs	r4, r4
    4514:	e7c2      	b.n	449c <nm_spi_init+0x64>
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	20000224 	.word	0x20000224
    451c:	0000e824 	.word	0x0000e824
    4520:	00004255 	.word	0x00004255
    4524:	00004145 	.word	0x00004145
    4528:	000043f5 	.word	0x000043f5
    452c:	00004421 	.word	0x00004421
    4530:	000004c7 	.word	0x000004c7
    4534:	00011250 	.word	0x00011250
    4538:	00010b0c 	.word	0x00010b0c
    453c:	0000b339 	.word	0x0000b339
    4540:	0001135c 	.word	0x0001135c
    4544:	0000b455 	.word	0x0000b455
    4548:	0000b36d 	.word	0x0000b36d
    454c:	000004ca 	.word	0x000004ca
    4550:	000113ac 	.word	0x000113ac
    4554:	000004d4 	.word	0x000004d4
    4558:	000113d8 	.word	0x000113d8
    455c:	000004de 	.word	0x000004de
    4560:	0001140c 	.word	0x0001140c

00004564 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4564:	b5f0      	push	{r4, r5, r6, r7, lr}
    4566:	46de      	mov	lr, fp
    4568:	4657      	mov	r7, sl
    456a:	464e      	mov	r6, r9
    456c:	4645      	mov	r5, r8
    456e:	b5e0      	push	{r5, r6, r7, lr}
    4570:	b087      	sub	sp, #28
    4572:	9002      	str	r0, [sp, #8]
    4574:	9103      	str	r1, [sp, #12]
    4576:	0016      	movs	r6, r2
    4578:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    457a:	2300      	movs	r3, #0
    457c:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    457e:	2400      	movs	r4, #0
    4580:	4b3e      	ldr	r3, [pc, #248]	; (467c <nm_spi_read_block+0x118>)
    4582:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    4584:	46a9      	mov	r9, r5
    4586:	e037      	b.n	45f8 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    4588:	2301      	movs	r3, #1
    458a:	469b      	mov	fp, r3
		size = 2;
    458c:	3601      	adds	r6, #1
    458e:	e035      	b.n	45fc <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    4590:	20c8      	movs	r0, #200	; 0xc8
    4592:	4b3b      	ldr	r3, [pc, #236]	; (4680 <nm_spi_read_block+0x11c>)
    4594:	4798      	blx	r3
	if (result != N_OK) {
    4596:	2801      	cmp	r0, #1
    4598:	d045      	beq.n	4626 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    459a:	4a3a      	ldr	r2, [pc, #232]	; (4684 <nm_spi_read_block+0x120>)
    459c:	493a      	ldr	r1, [pc, #232]	; (4688 <nm_spi_read_block+0x124>)
    459e:	483b      	ldr	r0, [pc, #236]	; (468c <nm_spi_read_block+0x128>)
    45a0:	4f3b      	ldr	r7, [pc, #236]	; (4690 <nm_spi_read_block+0x12c>)
    45a2:	47b8      	blx	r7
    45a4:	9902      	ldr	r1, [sp, #8]
    45a6:	483b      	ldr	r0, [pc, #236]	; (4694 <nm_spi_read_block+0x130>)
    45a8:	47b8      	blx	r7
    45aa:	200d      	movs	r0, #13
    45ac:	4b3a      	ldr	r3, [pc, #232]	; (4698 <nm_spi_read_block+0x134>)
    45ae:	4798      	blx	r3
		nm_bsp_sleep(1);
    45b0:	2001      	movs	r0, #1
    45b2:	4f3a      	ldr	r7, [pc, #232]	; (469c <nm_spi_read_block+0x138>)
    45b4:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    45b6:	9400      	str	r4, [sp, #0]
    45b8:	0023      	movs	r3, r4
    45ba:	0022      	movs	r2, r4
    45bc:	0021      	movs	r1, r4
    45be:	20cf      	movs	r0, #207	; 0xcf
    45c0:	4d2e      	ldr	r5, [pc, #184]	; (467c <nm_spi_read_block+0x118>)
    45c2:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    45c4:	20cf      	movs	r0, #207	; 0xcf
    45c6:	4b2e      	ldr	r3, [pc, #184]	; (4680 <nm_spi_read_block+0x11c>)
    45c8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    45ca:	4a35      	ldr	r2, [pc, #212]	; (46a0 <nm_spi_read_block+0x13c>)
    45cc:	492e      	ldr	r1, [pc, #184]	; (4688 <nm_spi_read_block+0x124>)
    45ce:	482f      	ldr	r0, [pc, #188]	; (468c <nm_spi_read_block+0x128>)
    45d0:	4b2f      	ldr	r3, [pc, #188]	; (4690 <nm_spi_read_block+0x12c>)
    45d2:	469a      	mov	sl, r3
    45d4:	4798      	blx	r3
    45d6:	0033      	movs	r3, r6
    45d8:	9a02      	ldr	r2, [sp, #8]
    45da:	4649      	mov	r1, r9
    45dc:	4831      	ldr	r0, [pc, #196]	; (46a4 <nm_spi_read_block+0x140>)
    45de:	47d0      	blx	sl
    45e0:	200d      	movs	r0, #13
    45e2:	4b2d      	ldr	r3, [pc, #180]	; (4698 <nm_spi_read_block+0x134>)
    45e4:	4798      	blx	r3
		nm_bsp_sleep(1);
    45e6:	2001      	movs	r0, #1
    45e8:	47b8      	blx	r7
    45ea:	2301      	movs	r3, #1
    45ec:	425b      	negs	r3, r3
    45ee:	469c      	mov	ip, r3
    45f0:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    45f2:	464b      	mov	r3, r9
    45f4:	2b00      	cmp	r3, #0
    45f6:	d038      	beq.n	466a <nm_spi_read_block+0x106>
	if (size == 1)
    45f8:	2e01      	cmp	r6, #1
    45fa:	d0c5      	beq.n	4588 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    45fc:	9400      	str	r4, [sp, #0]
    45fe:	0033      	movs	r3, r6
    4600:	0022      	movs	r2, r4
    4602:	9d02      	ldr	r5, [sp, #8]
    4604:	0029      	movs	r1, r5
    4606:	20c8      	movs	r0, #200	; 0xc8
    4608:	47c0      	blx	r8
	if (result != N_OK) {
    460a:	2801      	cmp	r0, #1
    460c:	d0c0      	beq.n	4590 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    460e:	4a26      	ldr	r2, [pc, #152]	; (46a8 <nm_spi_read_block+0x144>)
    4610:	491d      	ldr	r1, [pc, #116]	; (4688 <nm_spi_read_block+0x124>)
    4612:	481e      	ldr	r0, [pc, #120]	; (468c <nm_spi_read_block+0x128>)
    4614:	4f1e      	ldr	r7, [pc, #120]	; (4690 <nm_spi_read_block+0x12c>)
    4616:	47b8      	blx	r7
    4618:	0029      	movs	r1, r5
    461a:	4824      	ldr	r0, [pc, #144]	; (46ac <nm_spi_read_block+0x148>)
    461c:	47b8      	blx	r7
    461e:	200d      	movs	r0, #13
    4620:	4b1d      	ldr	r3, [pc, #116]	; (4698 <nm_spi_read_block+0x134>)
    4622:	4798      	blx	r3
    4624:	e7c4      	b.n	45b0 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    4626:	465b      	mov	r3, fp
    4628:	2b00      	cmp	r3, #0
    462a:	d016      	beq.n	465a <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    462c:	af05      	add	r7, sp, #20
    462e:	0022      	movs	r2, r4
    4630:	0031      	movs	r1, r6
    4632:	0038      	movs	r0, r7
    4634:	4b1e      	ldr	r3, [pc, #120]	; (46b0 <nm_spi_read_block+0x14c>)
    4636:	4798      	blx	r3
		buf[0] = tmp[0];
    4638:	783b      	ldrb	r3, [r7, #0]
    463a:	9a03      	ldr	r2, [sp, #12]
    463c:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    463e:	2801      	cmp	r0, #1
    4640:	d011      	beq.n	4666 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    4642:	4a1c      	ldr	r2, [pc, #112]	; (46b4 <nm_spi_read_block+0x150>)
    4644:	4910      	ldr	r1, [pc, #64]	; (4688 <nm_spi_read_block+0x124>)
    4646:	4811      	ldr	r0, [pc, #68]	; (468c <nm_spi_read_block+0x128>)
    4648:	4b11      	ldr	r3, [pc, #68]	; (4690 <nm_spi_read_block+0x12c>)
    464a:	4798      	blx	r3
    464c:	481a      	ldr	r0, [pc, #104]	; (46b8 <nm_spi_read_block+0x154>)
    464e:	4b1b      	ldr	r3, [pc, #108]	; (46bc <nm_spi_read_block+0x158>)
    4650:	4798      	blx	r3
    4652:	200d      	movs	r0, #13
    4654:	4b10      	ldr	r3, [pc, #64]	; (4698 <nm_spi_read_block+0x134>)
    4656:	4798      	blx	r3
    4658:	e7aa      	b.n	45b0 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    465a:	0022      	movs	r2, r4
    465c:	0031      	movs	r1, r6
    465e:	9803      	ldr	r0, [sp, #12]
    4660:	4b13      	ldr	r3, [pc, #76]	; (46b0 <nm_spi_read_block+0x14c>)
    4662:	4798      	blx	r3
    4664:	e7eb      	b.n	463e <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4666:	2000      	movs	r0, #0
    4668:	e001      	b.n	466e <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    466a:	2006      	movs	r0, #6
    466c:	4240      	negs	r0, r0

	return s8Ret;
}
    466e:	b007      	add	sp, #28
    4670:	bc3c      	pop	{r2, r3, r4, r5}
    4672:	4690      	mov	r8, r2
    4674:	4699      	mov	r9, r3
    4676:	46a2      	mov	sl, r4
    4678:	46ab      	mov	fp, r5
    467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    467c:	00003d89 	.word	0x00003d89
    4680:	00003f29 	.word	0x00003f29
    4684:	00000463 	.word	0x00000463
    4688:	00011244 	.word	0x00011244
    468c:	00010b0c 	.word	0x00010b0c
    4690:	0000b339 	.word	0x0000b339
    4694:	00011460 	.word	0x00011460
    4698:	0000b36d 	.word	0x0000b36d
    469c:	000021d5 	.word	0x000021d5
    46a0:	00000484 	.word	0x00000484
    46a4:	000114c0 	.word	0x000114c0
    46a8:	0000045d 	.word	0x0000045d
    46ac:	00011430 	.word	0x00011430
    46b0:	00003ffd 	.word	0x00003ffd
    46b4:	00000473 	.word	0x00000473
    46b8:	00011498 	.word	0x00011498
    46bc:	0000b455 	.word	0x0000b455

000046c0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    46c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46c2:	46de      	mov	lr, fp
    46c4:	4647      	mov	r7, r8
    46c6:	b580      	push	{r7, lr}
    46c8:	b089      	sub	sp, #36	; 0x24
    46ca:	9004      	str	r0, [sp, #16]
    46cc:	468b      	mov	fp, r1
    46ce:	9203      	str	r2, [sp, #12]
    46d0:	260a      	movs	r6, #10
    46d2:	2780      	movs	r7, #128	; 0x80
    46d4:	01bf      	lsls	r7, r7, #6
    46d6:	466b      	mov	r3, sp
    46d8:	82df      	strh	r7, [r3, #22]
    46da:	0035      	movs	r5, r6
    46dc:	e02d      	b.n	473a <nm_spi_write_block+0x7a>
		size = 2;
    46de:	3301      	adds	r3, #1
    46e0:	9303      	str	r3, [sp, #12]
    46e2:	e02d      	b.n	4740 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    46e4:	4a83      	ldr	r2, [pc, #524]	; (48f4 <nm_spi_write_block+0x234>)
    46e6:	4984      	ldr	r1, [pc, #528]	; (48f8 <nm_spi_write_block+0x238>)
    46e8:	4884      	ldr	r0, [pc, #528]	; (48fc <nm_spi_write_block+0x23c>)
    46ea:	4c85      	ldr	r4, [pc, #532]	; (4900 <nm_spi_write_block+0x240>)
    46ec:	47a0      	blx	r4
    46ee:	0031      	movs	r1, r6
    46f0:	4884      	ldr	r0, [pc, #528]	; (4904 <nm_spi_write_block+0x244>)
    46f2:	47a0      	blx	r4
    46f4:	200d      	movs	r0, #13
    46f6:	4b84      	ldr	r3, [pc, #528]	; (4908 <nm_spi_write_block+0x248>)
    46f8:	4798      	blx	r3
		nm_bsp_sleep(1);
    46fa:	2001      	movs	r0, #1
    46fc:	4c83      	ldr	r4, [pc, #524]	; (490c <nm_spi_write_block+0x24c>)
    46fe:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4700:	2300      	movs	r3, #0
    4702:	9300      	str	r3, [sp, #0]
    4704:	2200      	movs	r2, #0
    4706:	2100      	movs	r1, #0
    4708:	20cf      	movs	r0, #207	; 0xcf
    470a:	4e81      	ldr	r6, [pc, #516]	; (4910 <nm_spi_write_block+0x250>)
    470c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    470e:	20cf      	movs	r0, #207	; 0xcf
    4710:	4b80      	ldr	r3, [pc, #512]	; (4914 <nm_spi_write_block+0x254>)
    4712:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4714:	4a80      	ldr	r2, [pc, #512]	; (4918 <nm_spi_write_block+0x258>)
    4716:	4978      	ldr	r1, [pc, #480]	; (48f8 <nm_spi_write_block+0x238>)
    4718:	4878      	ldr	r0, [pc, #480]	; (48fc <nm_spi_write_block+0x23c>)
    471a:	4e79      	ldr	r6, [pc, #484]	; (4900 <nm_spi_write_block+0x240>)
    471c:	47b0      	blx	r6
    471e:	9b03      	ldr	r3, [sp, #12]
    4720:	9a04      	ldr	r2, [sp, #16]
    4722:	0029      	movs	r1, r5
    4724:	487d      	ldr	r0, [pc, #500]	; (491c <nm_spi_write_block+0x25c>)
    4726:	47b0      	blx	r6
    4728:	200d      	movs	r0, #13
    472a:	4b77      	ldr	r3, [pc, #476]	; (4908 <nm_spi_write_block+0x248>)
    472c:	4798      	blx	r3
		nm_bsp_sleep(1);
    472e:	2001      	movs	r0, #1
    4730:	47a0      	blx	r4
    4732:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    4734:	2d00      	cmp	r5, #0
    4736:	d100      	bne.n	473a <nm_spi_write_block+0x7a>
    4738:	e0d5      	b.n	48e6 <nm_spi_write_block+0x226>
	if (size == 1)
    473a:	9b03      	ldr	r3, [sp, #12]
    473c:	2b01      	cmp	r3, #1
    473e:	d0ce      	beq.n	46de <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    4740:	2300      	movs	r3, #0
    4742:	9300      	str	r3, [sp, #0]
    4744:	9b03      	ldr	r3, [sp, #12]
    4746:	2200      	movs	r2, #0
    4748:	9e04      	ldr	r6, [sp, #16]
    474a:	0031      	movs	r1, r6
    474c:	20c7      	movs	r0, #199	; 0xc7
    474e:	4c70      	ldr	r4, [pc, #448]	; (4910 <nm_spi_write_block+0x250>)
    4750:	47a0      	blx	r4
	if (result != N_OK) {
    4752:	2801      	cmp	r0, #1
    4754:	d1c6      	bne.n	46e4 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    4756:	20c7      	movs	r0, #199	; 0xc7
    4758:	4b6e      	ldr	r3, [pc, #440]	; (4914 <nm_spi_write_block+0x254>)
    475a:	4798      	blx	r3
	if (result != N_OK) {
    475c:	2801      	cmp	r0, #1
    475e:	d00c      	beq.n	477a <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    4760:	22f4      	movs	r2, #244	; 0xf4
    4762:	0092      	lsls	r2, r2, #2
    4764:	4964      	ldr	r1, [pc, #400]	; (48f8 <nm_spi_write_block+0x238>)
    4766:	4865      	ldr	r0, [pc, #404]	; (48fc <nm_spi_write_block+0x23c>)
    4768:	4c65      	ldr	r4, [pc, #404]	; (4900 <nm_spi_write_block+0x240>)
    476a:	47a0      	blx	r4
    476c:	9904      	ldr	r1, [sp, #16]
    476e:	486c      	ldr	r0, [pc, #432]	; (4920 <nm_spi_write_block+0x260>)
    4770:	47a0      	blx	r4
    4772:	200d      	movs	r0, #13
    4774:	4b64      	ldr	r3, [pc, #400]	; (4908 <nm_spi_write_block+0x248>)
    4776:	4798      	blx	r3
    4778:	e7bf      	b.n	46fa <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    477a:	2200      	movs	r2, #0
    477c:	ab07      	add	r3, sp, #28
    477e:	801a      	strh	r2, [r3, #0]
    4780:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    4782:	2600      	movs	r6, #0
				order = 0x1;
    4784:	46a8      	mov	r8, r5
    4786:	0035      	movs	r5, r6
    4788:	0026      	movs	r6, r4
    478a:	e021      	b.n	47d0 <nm_spi_write_block+0x110>
				order = 0x2;
    478c:	2300      	movs	r3, #0
    478e:	42b7      	cmp	r7, r6
    4790:	415b      	adcs	r3, r3
    4792:	3302      	adds	r3, #2
		cmd |= order;
    4794:	200b      	movs	r0, #11
    4796:	aa04      	add	r2, sp, #16
    4798:	4694      	mov	ip, r2
    479a:	4460      	add	r0, ip
    479c:	2210      	movs	r2, #16
    479e:	4252      	negs	r2, r2
    47a0:	4313      	orrs	r3, r2
    47a2:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    47a4:	2101      	movs	r1, #1
    47a6:	4b5f      	ldr	r3, [pc, #380]	; (4924 <nm_spi_write_block+0x264>)
    47a8:	4798      	blx	r3
    47aa:	2800      	cmp	r0, #0
    47ac:	d11d      	bne.n	47ea <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    47ae:	465b      	mov	r3, fp
    47b0:	1958      	adds	r0, r3, r5
    47b2:	0021      	movs	r1, r4
    47b4:	4b5b      	ldr	r3, [pc, #364]	; (4924 <nm_spi_write_block+0x264>)
    47b6:	4798      	blx	r3
    47b8:	2800      	cmp	r0, #0
    47ba:	d130      	bne.n	481e <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    47bc:	4b5a      	ldr	r3, [pc, #360]	; (4928 <nm_spi_write_block+0x268>)
    47be:	781b      	ldrb	r3, [r3, #0]
    47c0:	2b00      	cmp	r3, #0
    47c2:	d039      	beq.n	4838 <nm_spi_write_block+0x178>
		ix += nbytes;
    47c4:	1965      	adds	r5, r4, r5
    47c6:	b22d      	sxth	r5, r5
		sz -= nbytes;
    47c8:	1b36      	subs	r6, r6, r4
    47ca:	b2b6      	uxth	r6, r6
	} while (sz);
    47cc:	2e00      	cmp	r6, #0
    47ce:	d053      	beq.n	4878 <nm_spi_write_block+0x1b8>
    47d0:	1c34      	adds	r4, r6, #0
    47d2:	42be      	cmp	r6, r7
    47d4:	d901      	bls.n	47da <nm_spi_write_block+0x11a>
    47d6:	466b      	mov	r3, sp
    47d8:	8adc      	ldrh	r4, [r3, #22]
    47da:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    47dc:	2d00      	cmp	r5, #0
    47de:	d1d5      	bne.n	478c <nm_spi_write_block+0xcc>
				order = 0x3;
    47e0:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    47e2:	42be      	cmp	r6, r7
    47e4:	d9d6      	bls.n	4794 <nm_spi_write_block+0xd4>
				order = 0x1;
    47e6:	3b02      	subs	r3, #2
    47e8:	e7d4      	b.n	4794 <nm_spi_write_block+0xd4>
    47ea:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    47ec:	22d4      	movs	r2, #212	; 0xd4
    47ee:	0092      	lsls	r2, r2, #2
    47f0:	494e      	ldr	r1, [pc, #312]	; (492c <nm_spi_write_block+0x26c>)
    47f2:	4842      	ldr	r0, [pc, #264]	; (48fc <nm_spi_write_block+0x23c>)
    47f4:	4b42      	ldr	r3, [pc, #264]	; (4900 <nm_spi_write_block+0x240>)
    47f6:	4798      	blx	r3
    47f8:	484d      	ldr	r0, [pc, #308]	; (4930 <nm_spi_write_block+0x270>)
    47fa:	4b4e      	ldr	r3, [pc, #312]	; (4934 <nm_spi_write_block+0x274>)
    47fc:	4798      	blx	r3
    47fe:	200d      	movs	r0, #13
    4800:	4b41      	ldr	r3, [pc, #260]	; (4908 <nm_spi_write_block+0x248>)
    4802:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    4804:	22f8      	movs	r2, #248	; 0xf8
    4806:	0092      	lsls	r2, r2, #2
    4808:	493b      	ldr	r1, [pc, #236]	; (48f8 <nm_spi_write_block+0x238>)
    480a:	483c      	ldr	r0, [pc, #240]	; (48fc <nm_spi_write_block+0x23c>)
    480c:	4b3c      	ldr	r3, [pc, #240]	; (4900 <nm_spi_write_block+0x240>)
    480e:	4798      	blx	r3
    4810:	4849      	ldr	r0, [pc, #292]	; (4938 <nm_spi_write_block+0x278>)
    4812:	4b48      	ldr	r3, [pc, #288]	; (4934 <nm_spi_write_block+0x274>)
    4814:	4798      	blx	r3
    4816:	200d      	movs	r0, #13
    4818:	4b3b      	ldr	r3, [pc, #236]	; (4908 <nm_spi_write_block+0x248>)
    481a:	4798      	blx	r3
    481c:	e76d      	b.n	46fa <nm_spi_write_block+0x3a>
    481e:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    4820:	4a46      	ldr	r2, [pc, #280]	; (493c <nm_spi_write_block+0x27c>)
    4822:	4942      	ldr	r1, [pc, #264]	; (492c <nm_spi_write_block+0x26c>)
    4824:	4835      	ldr	r0, [pc, #212]	; (48fc <nm_spi_write_block+0x23c>)
    4826:	4b36      	ldr	r3, [pc, #216]	; (4900 <nm_spi_write_block+0x240>)
    4828:	4798      	blx	r3
    482a:	4845      	ldr	r0, [pc, #276]	; (4940 <nm_spi_write_block+0x280>)
    482c:	4b41      	ldr	r3, [pc, #260]	; (4934 <nm_spi_write_block+0x274>)
    482e:	4798      	blx	r3
    4830:	200d      	movs	r0, #13
    4832:	4b35      	ldr	r3, [pc, #212]	; (4908 <nm_spi_write_block+0x248>)
    4834:	4798      	blx	r3
    4836:	e7e5      	b.n	4804 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    4838:	2102      	movs	r1, #2
    483a:	a807      	add	r0, sp, #28
    483c:	4b39      	ldr	r3, [pc, #228]	; (4924 <nm_spi_write_block+0x264>)
    483e:	4798      	blx	r3
    4840:	2800      	cmp	r0, #0
    4842:	d0bf      	beq.n	47c4 <nm_spi_write_block+0x104>
    4844:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    4846:	4a3f      	ldr	r2, [pc, #252]	; (4944 <nm_spi_write_block+0x284>)
    4848:	4938      	ldr	r1, [pc, #224]	; (492c <nm_spi_write_block+0x26c>)
    484a:	482c      	ldr	r0, [pc, #176]	; (48fc <nm_spi_write_block+0x23c>)
    484c:	4b2c      	ldr	r3, [pc, #176]	; (4900 <nm_spi_write_block+0x240>)
    484e:	4798      	blx	r3
    4850:	483d      	ldr	r0, [pc, #244]	; (4948 <nm_spi_write_block+0x288>)
    4852:	4b38      	ldr	r3, [pc, #224]	; (4934 <nm_spi_write_block+0x274>)
    4854:	4798      	blx	r3
    4856:	200d      	movs	r0, #13
    4858:	4b2b      	ldr	r3, [pc, #172]	; (4908 <nm_spi_write_block+0x248>)
    485a:	4798      	blx	r3
    485c:	e7d2      	b.n	4804 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    485e:	223c      	movs	r2, #60	; 0x3c
    4860:	32ff      	adds	r2, #255	; 0xff
    4862:	493a      	ldr	r1, [pc, #232]	; (494c <nm_spi_write_block+0x28c>)
    4864:	4825      	ldr	r0, [pc, #148]	; (48fc <nm_spi_write_block+0x23c>)
    4866:	4b26      	ldr	r3, [pc, #152]	; (4900 <nm_spi_write_block+0x240>)
    4868:	4798      	blx	r3
    486a:	4839      	ldr	r0, [pc, #228]	; (4950 <nm_spi_write_block+0x290>)
    486c:	4b31      	ldr	r3, [pc, #196]	; (4934 <nm_spi_write_block+0x274>)
    486e:	4798      	blx	r3
    4870:	200d      	movs	r0, #13
    4872:	4b25      	ldr	r3, [pc, #148]	; (4908 <nm_spi_write_block+0x248>)
    4874:	4798      	blx	r3
    4876:	e027      	b.n	48c8 <nm_spi_write_block+0x208>
    4878:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    487a:	4b2b      	ldr	r3, [pc, #172]	; (4928 <nm_spi_write_block+0x268>)
    487c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    487e:	1e63      	subs	r3, r4, #1
    4880:	419c      	sbcs	r4, r3
    4882:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    4884:	b2a1      	uxth	r1, r4
    4886:	a807      	add	r0, sp, #28
    4888:	4b32      	ldr	r3, [pc, #200]	; (4954 <nm_spi_write_block+0x294>)
    488a:	4798      	blx	r3
    488c:	2800      	cmp	r0, #0
    488e:	d1e6      	bne.n	485e <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    4890:	ab08      	add	r3, sp, #32
    4892:	191b      	adds	r3, r3, r4
    4894:	3b05      	subs	r3, #5
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	2b00      	cmp	r3, #0
    489a:	d106      	bne.n	48aa <nm_spi_write_block+0x1ea>
    489c:	ab08      	add	r3, sp, #32
    489e:	469c      	mov	ip, r3
    48a0:	4464      	add	r4, ip
    48a2:	3c06      	subs	r4, #6
    48a4:	7823      	ldrb	r3, [r4, #0]
    48a6:	2bc3      	cmp	r3, #195	; 0xc3
    48a8:	d01b      	beq.n	48e2 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    48aa:	22a1      	movs	r2, #161	; 0xa1
    48ac:	0052      	lsls	r2, r2, #1
    48ae:	4927      	ldr	r1, [pc, #156]	; (494c <nm_spi_write_block+0x28c>)
    48b0:	4812      	ldr	r0, [pc, #72]	; (48fc <nm_spi_write_block+0x23c>)
    48b2:	4c13      	ldr	r4, [pc, #76]	; (4900 <nm_spi_write_block+0x240>)
    48b4:	47a0      	blx	r4
    48b6:	a907      	add	r1, sp, #28
    48b8:	788b      	ldrb	r3, [r1, #2]
    48ba:	784a      	ldrb	r2, [r1, #1]
    48bc:	7809      	ldrb	r1, [r1, #0]
    48be:	4826      	ldr	r0, [pc, #152]	; (4958 <nm_spi_write_block+0x298>)
    48c0:	47a0      	blx	r4
    48c2:	200d      	movs	r0, #13
    48c4:	4b10      	ldr	r3, [pc, #64]	; (4908 <nm_spi_write_block+0x248>)
    48c6:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    48c8:	22fa      	movs	r2, #250	; 0xfa
    48ca:	0092      	lsls	r2, r2, #2
    48cc:	490a      	ldr	r1, [pc, #40]	; (48f8 <nm_spi_write_block+0x238>)
    48ce:	480b      	ldr	r0, [pc, #44]	; (48fc <nm_spi_write_block+0x23c>)
    48d0:	4b0b      	ldr	r3, [pc, #44]	; (4900 <nm_spi_write_block+0x240>)
    48d2:	4798      	blx	r3
    48d4:	4818      	ldr	r0, [pc, #96]	; (4938 <nm_spi_write_block+0x278>)
    48d6:	4b17      	ldr	r3, [pc, #92]	; (4934 <nm_spi_write_block+0x274>)
    48d8:	4798      	blx	r3
    48da:	200d      	movs	r0, #13
    48dc:	4b0a      	ldr	r3, [pc, #40]	; (4908 <nm_spi_write_block+0x248>)
    48de:	4798      	blx	r3
    48e0:	e70b      	b.n	46fa <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    48e2:	2000      	movs	r0, #0
    48e4:	e001      	b.n	48ea <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    48e6:	2006      	movs	r0, #6
    48e8:	4240      	negs	r0, r0

	return s8Ret;
}
    48ea:	b009      	add	sp, #36	; 0x24
    48ec:	bc0c      	pop	{r2, r3}
    48ee:	4690      	mov	r8, r2
    48f0:	469b      	mov	fp, r3
    48f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48f4:	000003ca 	.word	0x000003ca
    48f8:	00011224 	.word	0x00011224
    48fc:	00010b0c 	.word	0x00010b0c
    4900:	0000b339 	.word	0x0000b339
    4904:	000114dc 	.word	0x000114dc
    4908:	0000b36d 	.word	0x0000b36d
    490c:	000021d5 	.word	0x000021d5
    4910:	00003d89 	.word	0x00003d89
    4914:	00003f29 	.word	0x00003f29
    4918:	000003f2 	.word	0x000003f2
    491c:	000114c0 	.word	0x000114c0
    4920:	0001150c 	.word	0x0001150c
    4924:	00003d69 	.word	0x00003d69
    4928:	20000224 	.word	0x20000224
    492c:	00011204 	.word	0x00011204
    4930:	00011544 	.word	0x00011544
    4934:	0000b455 	.word	0x0000b455
    4938:	00011638 	.word	0x00011638
    493c:	00000359 	.word	0x00000359
    4940:	0001157c 	.word	0x0001157c
    4944:	00000363 	.word	0x00000363
    4948:	000115b0 	.word	0x000115b0
    494c:	000111d8 	.word	0x000111d8
    4950:	000115e8 	.word	0x000115e8
    4954:	00003f09 	.word	0x00003f09
    4958:	00011608 	.word	0x00011608

0000495c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    495c:	b5f0      	push	{r4, r5, r6, r7, lr}
    495e:	46de      	mov	lr, fp
    4960:	4657      	mov	r7, sl
    4962:	464e      	mov	r6, r9
    4964:	4645      	mov	r5, r8
    4966:	b5e0      	push	{r5, r6, r7, lr}
    4968:	b085      	sub	sp, #20
    496a:	9001      	str	r0, [sp, #4]
    496c:	000e      	movs	r6, r1
    496e:	9202      	str	r2, [sp, #8]
    4970:	001d      	movs	r5, r3
    4972:	ab0e      	add	r3, sp, #56	; 0x38
    4974:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    4976:	2c00      	cmp	r4, #0
    4978:	d064      	beq.n	4a44 <Socket_ReadSocketData+0xe8>
    497a:	0103      	lsls	r3, r0, #4
    497c:	4935      	ldr	r1, [pc, #212]	; (4a54 <Socket_ReadSocketData+0xf8>)
    497e:	585b      	ldr	r3, [r3, r1]
    4980:	2b00      	cmp	r3, #0
    4982:	d05f      	beq.n	4a44 <Socket_ReadSocketData+0xe8>
    4984:	0101      	lsls	r1, r0, #4
    4986:	4b33      	ldr	r3, [pc, #204]	; (4a54 <Socket_ReadSocketData+0xf8>)
    4988:	185b      	adds	r3, r3, r1
    498a:	889b      	ldrh	r3, [r3, #4]
    498c:	b29b      	uxth	r3, r3
    498e:	2b00      	cmp	r3, #0
    4990:	d058      	beq.n	4a44 <Socket_ReadSocketData+0xe8>
    4992:	4b30      	ldr	r3, [pc, #192]	; (4a54 <Socket_ReadSocketData+0xf8>)
    4994:	185b      	adds	r3, r3, r1
    4996:	7a9b      	ldrb	r3, [r3, #10]
    4998:	2b01      	cmp	r3, #1
    499a:	d153      	bne.n	4a44 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    499c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    499e:	4b2d      	ldr	r3, [pc, #180]	; (4a54 <Socket_ReadSocketData+0xf8>)
    49a0:	469b      	mov	fp, r3
    49a2:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    49a4:	465b      	mov	r3, fp
    49a6:	220a      	movs	r2, #10
    49a8:	4690      	mov	r8, r2
    49aa:	44d8      	add	r8, fp
    49ac:	468a      	mov	sl, r1
    49ae:	9500      	str	r5, [sp, #0]
    49b0:	9303      	str	r3, [sp, #12]
    49b2:	e015      	b.n	49e0 <Socket_ReadSocketData+0x84>
    49b4:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    49b6:	2301      	movs	r3, #1
    49b8:	e01c      	b.n	49f4 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    49ba:	3301      	adds	r3, #1
    49bc:	2200      	movs	r2, #0
    49be:	2100      	movs	r1, #0
    49c0:	2000      	movs	r0, #0
    49c2:	4c25      	ldr	r4, [pc, #148]	; (4a58 <Socket_ReadSocketData+0xfc>)
    49c4:	47a0      	blx	r4
    49c6:	e03d      	b.n	4a44 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    49c8:	4824      	ldr	r0, [pc, #144]	; (4a5c <Socket_ReadSocketData+0x100>)
    49ca:	4d25      	ldr	r5, [pc, #148]	; (4a60 <Socket_ReadSocketData+0x104>)
    49cc:	47a8      	blx	r5
    49ce:	0021      	movs	r1, r4
    49d0:	4824      	ldr	r0, [pc, #144]	; (4a64 <Socket_ReadSocketData+0x108>)
    49d2:	47a8      	blx	r5
    49d4:	200d      	movs	r0, #13
    49d6:	4b24      	ldr	r3, [pc, #144]	; (4a68 <Socket_ReadSocketData+0x10c>)
    49d8:	4798      	blx	r3
				break;
    49da:	e033      	b.n	4a44 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    49dc:	2c00      	cmp	r4, #0
    49de:	d031      	beq.n	4a44 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    49e0:	465b      	mov	r3, fp
    49e2:	889b      	ldrh	r3, [r3, #4]
    49e4:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    49e6:	b21b      	sxth	r3, r3
    49e8:	2b00      	cmp	r3, #0
    49ea:	dde3      	ble.n	49b4 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    49ec:	9b03      	ldr	r3, [sp, #12]
    49ee:	889d      	ldrh	r5, [r3, #4]
    49f0:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    49f2:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    49f4:	4a17      	ldr	r2, [pc, #92]	; (4a54 <Socket_ReadSocketData+0xf8>)
    49f6:	4651      	mov	r1, sl
    49f8:	5889      	ldr	r1, [r1, r2]
    49fa:	002a      	movs	r2, r5
    49fc:	9800      	ldr	r0, [sp, #0]
    49fe:	4f16      	ldr	r7, [pc, #88]	; (4a58 <Socket_ReadSocketData+0xfc>)
    4a00:	47b8      	blx	r7
    4a02:	2800      	cmp	r0, #0
    4a04:	d1e0      	bne.n	49c8 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    4a06:	4b13      	ldr	r3, [pc, #76]	; (4a54 <Socket_ReadSocketData+0xf8>)
    4a08:	4652      	mov	r2, sl
    4a0a:	58d3      	ldr	r3, [r2, r3]
    4a0c:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    4a0e:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    4a10:	88f3      	ldrh	r3, [r6, #6]
    4a12:	1b5b      	subs	r3, r3, r5
    4a14:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    4a16:	4b15      	ldr	r3, [pc, #84]	; (4a6c <Socket_ReadSocketData+0x110>)
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d005      	beq.n	4a2a <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    4a1e:	4b13      	ldr	r3, [pc, #76]	; (4a6c <Socket_ReadSocketData+0x110>)
    4a20:	681b      	ldr	r3, [r3, #0]
    4a22:	0032      	movs	r2, r6
    4a24:	9902      	ldr	r1, [sp, #8]
    4a26:	9801      	ldr	r0, [sp, #4]
    4a28:	4798      	blx	r3
				u16ReadCount -= u16Read;
    4a2a:	1b64      	subs	r4, r4, r5
    4a2c:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    4a2e:	9b00      	ldr	r3, [sp, #0]
    4a30:	469c      	mov	ip, r3
    4a32:	44ac      	add	ip, r5
    4a34:	4663      	mov	r3, ip
    4a36:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    4a38:	4643      	mov	r3, r8
    4a3a:	781b      	ldrb	r3, [r3, #0]
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d1cd      	bne.n	49dc <Socket_ReadSocketData+0x80>
    4a40:	2c00      	cmp	r4, #0
    4a42:	d1ba      	bne.n	49ba <Socket_ReadSocketData+0x5e>
	}
}
    4a44:	b005      	add	sp, #20
    4a46:	bc3c      	pop	{r2, r3, r4, r5}
    4a48:	4690      	mov	r8, r2
    4a4a:	4699      	mov	r9, r3
    4a4c:	46a2      	mov	sl, r4
    4a4e:	46ab      	mov	fp, r5
    4a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a52:	46c0      	nop			; (mov r8, r8)
    4a54:	200005fc 	.word	0x200005fc
    4a58:	00002cfd 	.word	0x00002cfd
    4a5c:	00010e3c 	.word	0x00010e3c
    4a60:	0000b339 	.word	0x0000b339
    4a64:	000118a0 	.word	0x000118a0
    4a68:	0000b36d 	.word	0x0000b36d
    4a6c:	200006ac 	.word	0x200006ac

00004a70 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    4a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a72:	46d6      	mov	lr, sl
    4a74:	464f      	mov	r7, r9
    4a76:	4646      	mov	r6, r8
    4a78:	b5c0      	push	{r6, r7, lr}
    4a7a:	b09a      	sub	sp, #104	; 0x68
    4a7c:	000d      	movs	r5, r1
    4a7e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    4a80:	2841      	cmp	r0, #65	; 0x41
    4a82:	d039      	beq.n	4af8 <m2m_ip_cb+0x88>
    4a84:	2854      	cmp	r0, #84	; 0x54
    4a86:	d037      	beq.n	4af8 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    4a88:	2842      	cmp	r0, #66	; 0x42
    4a8a:	d053      	beq.n	4b34 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4a8c:	2843      	cmp	r0, #67	; 0x43
    4a8e:	d06a      	beq.n	4b66 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    4a90:	2844      	cmp	r0, #68	; 0x44
    4a92:	d100      	bne.n	4a96 <m2m_ip_cb+0x26>
    4a94:	e0af      	b.n	4bf6 <m2m_ip_cb+0x186>
    4a96:	284b      	cmp	r0, #75	; 0x4b
    4a98:	d100      	bne.n	4a9c <m2m_ip_cb+0x2c>
    4a9a:	e0ac      	b.n	4bf6 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    4a9c:	284a      	cmp	r0, #74	; 0x4a
    4a9e:	d100      	bne.n	4aa2 <m2m_ip_cb+0x32>
    4aa0:	e0cf      	b.n	4c42 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    4aa2:	2846      	cmp	r0, #70	; 0x46
    4aa4:	d100      	bne.n	4aa8 <m2m_ip_cb+0x38>
    4aa6:	e0e5      	b.n	4c74 <m2m_ip_cb+0x204>
    4aa8:	2848      	cmp	r0, #72	; 0x48
    4aaa:	d100      	bne.n	4aae <m2m_ip_cb+0x3e>
    4aac:	e10e      	b.n	4ccc <m2m_ip_cb+0x25c>
    4aae:	284d      	cmp	r0, #77	; 0x4d
    4ab0:	d100      	bne.n	4ab4 <m2m_ip_cb+0x44>
    4ab2:	e0dc      	b.n	4c6e <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4ab4:	2845      	cmp	r0, #69	; 0x45
    4ab6:	d100      	bne.n	4aba <m2m_ip_cb+0x4a>
    4ab8:	e12c      	b.n	4d14 <m2m_ip_cb+0x2a4>
    4aba:	2847      	cmp	r0, #71	; 0x47
    4abc:	d100      	bne.n	4ac0 <m2m_ip_cb+0x50>
    4abe:	e14d      	b.n	4d5c <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4ac0:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4ac2:	284c      	cmp	r0, #76	; 0x4c
    4ac4:	d100      	bne.n	4ac8 <m2m_ip_cb+0x58>
    4ac6:	e126      	b.n	4d16 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    4ac8:	2852      	cmp	r0, #82	; 0x52
    4aca:	d12d      	bne.n	4b28 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    4acc:	2301      	movs	r3, #1
    4ace:	2214      	movs	r2, #20
    4ad0:	a909      	add	r1, sp, #36	; 0x24
    4ad2:	0020      	movs	r0, r4
    4ad4:	4ca2      	ldr	r4, [pc, #648]	; (4d60 <m2m_ip_cb+0x2f0>)
    4ad6:	47a0      	blx	r4
    4ad8:	2800      	cmp	r0, #0
    4ada:	d125      	bne.n	4b28 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    4adc:	4ba1      	ldr	r3, [pc, #644]	; (4d64 <m2m_ip_cb+0x2f4>)
    4ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4ae0:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d01f      	beq.n	4b28 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    4ae8:	4b9e      	ldr	r3, [pc, #632]	; (4d64 <m2m_ip_cb+0x2f4>)
    4aea:	681c      	ldr	r4, [r3, #0]
    4aec:	ab09      	add	r3, sp, #36	; 0x24
    4aee:	7c1a      	ldrb	r2, [r3, #16]
    4af0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4af2:	9809      	ldr	r0, [sp, #36]	; 0x24
    4af4:	47a0      	blx	r4
			}
		}
	}
}
    4af6:	e017      	b.n	4b28 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    4af8:	2300      	movs	r3, #0
    4afa:	2204      	movs	r2, #4
    4afc:	a909      	add	r1, sp, #36	; 0x24
    4afe:	0020      	movs	r0, r4
    4b00:	4c97      	ldr	r4, [pc, #604]	; (4d60 <m2m_ip_cb+0x2f0>)
    4b02:	47a0      	blx	r4
    4b04:	2800      	cmp	r0, #0
    4b06:	d10f      	bne.n	4b28 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    4b08:	ab09      	add	r3, sp, #36	; 0x24
    4b0a:	785a      	ldrb	r2, [r3, #1]
    4b0c:	ab05      	add	r3, sp, #20
    4b0e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4b10:	4b95      	ldr	r3, [pc, #596]	; (4d68 <m2m_ip_cb+0x2f8>)
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d007      	beq.n	4b28 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    4b18:	4b93      	ldr	r3, [pc, #588]	; (4d68 <m2m_ip_cb+0x2f8>)
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	aa09      	add	r2, sp, #36	; 0x24
    4b1e:	2000      	movs	r0, #0
    4b20:	5610      	ldrsb	r0, [r2, r0]
    4b22:	aa05      	add	r2, sp, #20
    4b24:	2101      	movs	r1, #1
    4b26:	4798      	blx	r3
}
    4b28:	b01a      	add	sp, #104	; 0x68
    4b2a:	bc1c      	pop	{r2, r3, r4}
    4b2c:	4690      	mov	r8, r2
    4b2e:	4699      	mov	r9, r3
    4b30:	46a2      	mov	sl, r4
    4b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4b34:	2300      	movs	r3, #0
    4b36:	2204      	movs	r2, #4
    4b38:	a909      	add	r1, sp, #36	; 0x24
    4b3a:	0020      	movs	r0, r4
    4b3c:	4c88      	ldr	r4, [pc, #544]	; (4d60 <m2m_ip_cb+0x2f0>)
    4b3e:	47a0      	blx	r4
    4b40:	2800      	cmp	r0, #0
    4b42:	d1f1      	bne.n	4b28 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    4b44:	ab09      	add	r3, sp, #36	; 0x24
    4b46:	785a      	ldrb	r2, [r3, #1]
    4b48:	ab05      	add	r3, sp, #20
    4b4a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4b4c:	4b86      	ldr	r3, [pc, #536]	; (4d68 <m2m_ip_cb+0x2f8>)
    4b4e:	681b      	ldr	r3, [r3, #0]
    4b50:	2b00      	cmp	r3, #0
    4b52:	d0e9      	beq.n	4b28 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4b54:	4b84      	ldr	r3, [pc, #528]	; (4d68 <m2m_ip_cb+0x2f8>)
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	aa09      	add	r2, sp, #36	; 0x24
    4b5a:	2000      	movs	r0, #0
    4b5c:	5610      	ldrsb	r0, [r2, r0]
    4b5e:	aa05      	add	r2, sp, #20
    4b60:	2102      	movs	r1, #2
    4b62:	4798      	blx	r3
    4b64:	e7e0      	b.n	4b28 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4b66:	2300      	movs	r3, #0
    4b68:	220c      	movs	r2, #12
    4b6a:	a905      	add	r1, sp, #20
    4b6c:	0020      	movs	r0, r4
    4b6e:	4c7c      	ldr	r4, [pc, #496]	; (4d60 <m2m_ip_cb+0x2f0>)
    4b70:	47a0      	blx	r4
    4b72:	2800      	cmp	r0, #0
    4b74:	d1d8      	bne.n	4b28 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    4b76:	ab05      	add	r3, sp, #20
    4b78:	2209      	movs	r2, #9
    4b7a:	569a      	ldrsb	r2, [r3, r2]
    4b7c:	2a00      	cmp	r2, #0
    4b7e:	db24      	blt.n	4bca <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    4b80:	0018      	movs	r0, r3
    4b82:	2108      	movs	r1, #8
    4b84:	5659      	ldrsb	r1, [r3, r1]
    4b86:	4b79      	ldr	r3, [pc, #484]	; (4d6c <m2m_ip_cb+0x2fc>)
    4b88:	0109      	lsls	r1, r1, #4
    4b8a:	1859      	adds	r1, r3, r1
    4b8c:	7ac9      	ldrb	r1, [r1, #11]
    4b8e:	b2c9      	uxtb	r1, r1
    4b90:	0114      	lsls	r4, r2, #4
    4b92:	191b      	adds	r3, r3, r4
    4b94:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    4b96:	2101      	movs	r1, #1
    4b98:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4b9a:	8941      	ldrh	r1, [r0, #10]
    4b9c:	3908      	subs	r1, #8
    4b9e:	b289      	uxth	r1, r1
    4ba0:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    4ba2:	4973      	ldr	r1, [pc, #460]	; (4d70 <m2m_ip_cb+0x300>)
    4ba4:	880b      	ldrh	r3, [r1, #0]
    4ba6:	3301      	adds	r3, #1
    4ba8:	b29b      	uxth	r3, r3
    4baa:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    4bac:	880b      	ldrh	r3, [r1, #0]
    4bae:	b29b      	uxth	r3, r3
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d103      	bne.n	4bbc <m2m_ip_cb+0x14c>
					++gu16SessionID;
    4bb4:	880b      	ldrh	r3, [r1, #0]
    4bb6:	3301      	adds	r3, #1
    4bb8:	b29b      	uxth	r3, r3
    4bba:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    4bbc:	4b6c      	ldr	r3, [pc, #432]	; (4d70 <m2m_ip_cb+0x300>)
    4bbe:	8819      	ldrh	r1, [r3, #0]
    4bc0:	b289      	uxth	r1, r1
    4bc2:	0110      	lsls	r0, r2, #4
    4bc4:	4b69      	ldr	r3, [pc, #420]	; (4d6c <m2m_ip_cb+0x2fc>)
    4bc6:	181b      	adds	r3, r3, r0
    4bc8:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    4bca:	ab09      	add	r3, sp, #36	; 0x24
    4bcc:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    4bce:	2202      	movs	r2, #2
    4bd0:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    4bd2:	aa05      	add	r2, sp, #20
    4bd4:	8851      	ldrh	r1, [r2, #2]
    4bd6:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    4bd8:	9a06      	ldr	r2, [sp, #24]
    4bda:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    4bdc:	4b62      	ldr	r3, [pc, #392]	; (4d68 <m2m_ip_cb+0x2f8>)
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	2b00      	cmp	r3, #0
    4be2:	d0a1      	beq.n	4b28 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4be4:	4b60      	ldr	r3, [pc, #384]	; (4d68 <m2m_ip_cb+0x2f8>)
    4be6:	681b      	ldr	r3, [r3, #0]
    4be8:	aa05      	add	r2, sp, #20
    4bea:	2008      	movs	r0, #8
    4bec:	5610      	ldrsb	r0, [r2, r0]
    4bee:	aa09      	add	r2, sp, #36	; 0x24
    4bf0:	2104      	movs	r1, #4
    4bf2:	4798      	blx	r3
    4bf4:	e798      	b.n	4b28 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    4bf6:	2300      	movs	r3, #0
    4bf8:	2204      	movs	r2, #4
    4bfa:	a909      	add	r1, sp, #36	; 0x24
    4bfc:	0020      	movs	r0, r4
    4bfe:	4c58      	ldr	r4, [pc, #352]	; (4d60 <m2m_ip_cb+0x2f0>)
    4c00:	47a0      	blx	r4
    4c02:	2800      	cmp	r0, #0
    4c04:	d000      	beq.n	4c08 <m2m_ip_cb+0x198>
    4c06:	e78f      	b.n	4b28 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    4c08:	ab09      	add	r3, sp, #36	; 0x24
    4c0a:	2000      	movs	r0, #0
    4c0c:	5618      	ldrsb	r0, [r3, r0]
    4c0e:	aa05      	add	r2, sp, #20
    4c10:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    4c12:	785b      	ldrb	r3, [r3, #1]
    4c14:	b25b      	sxtb	r3, r3
    4c16:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d107      	bne.n	4c2c <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4c1c:	ab09      	add	r3, sp, #36	; 0x24
    4c1e:	885b      	ldrh	r3, [r3, #2]
    4c20:	3b08      	subs	r3, #8
    4c22:	b29b      	uxth	r3, r3
    4c24:	0101      	lsls	r1, r0, #4
    4c26:	4a51      	ldr	r2, [pc, #324]	; (4d6c <m2m_ip_cb+0x2fc>)
    4c28:	1852      	adds	r2, r2, r1
    4c2a:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    4c2c:	4b4e      	ldr	r3, [pc, #312]	; (4d68 <m2m_ip_cb+0x2f8>)
    4c2e:	681b      	ldr	r3, [r3, #0]
    4c30:	2b00      	cmp	r3, #0
    4c32:	d100      	bne.n	4c36 <m2m_ip_cb+0x1c6>
    4c34:	e778      	b.n	4b28 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    4c36:	4b4c      	ldr	r3, [pc, #304]	; (4d68 <m2m_ip_cb+0x2f8>)
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	aa05      	add	r2, sp, #20
    4c3c:	2105      	movs	r1, #5
    4c3e:	4798      	blx	r3
	{
    4c40:	e772      	b.n	4b28 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    4c42:	2300      	movs	r3, #0
    4c44:	2244      	movs	r2, #68	; 0x44
    4c46:	a909      	add	r1, sp, #36	; 0x24
    4c48:	0020      	movs	r0, r4
    4c4a:	4c45      	ldr	r4, [pc, #276]	; (4d60 <m2m_ip_cb+0x2f0>)
    4c4c:	47a0      	blx	r4
    4c4e:	2800      	cmp	r0, #0
    4c50:	d000      	beq.n	4c54 <m2m_ip_cb+0x1e4>
    4c52:	e769      	b.n	4b28 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    4c54:	4b47      	ldr	r3, [pc, #284]	; (4d74 <m2m_ip_cb+0x304>)
    4c56:	681b      	ldr	r3, [r3, #0]
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d100      	bne.n	4c5e <m2m_ip_cb+0x1ee>
    4c5c:	e764      	b.n	4b28 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    4c5e:	4b45      	ldr	r3, [pc, #276]	; (4d74 <m2m_ip_cb+0x304>)
    4c60:	681b      	ldr	r3, [r3, #0]
    4c62:	9a19      	ldr	r2, [sp, #100]	; 0x64
    4c64:	9203      	str	r2, [sp, #12]
    4c66:	0011      	movs	r1, r2
    4c68:	a809      	add	r0, sp, #36	; 0x24
    4c6a:	4798      	blx	r3
    4c6c:	e75c      	b.n	4b28 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    4c6e:	2306      	movs	r3, #6
    4c70:	469a      	mov	sl, r3
    4c72:	e001      	b.n	4c78 <m2m_ip_cb+0x208>
    4c74:	2306      	movs	r3, #6
    4c76:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    4c78:	2300      	movs	r3, #0
    4c7a:	2210      	movs	r2, #16
    4c7c:	a905      	add	r1, sp, #20
    4c7e:	0020      	movs	r0, r4
    4c80:	4f37      	ldr	r7, [pc, #220]	; (4d60 <m2m_ip_cb+0x2f0>)
    4c82:	47b8      	blx	r7
    4c84:	2800      	cmp	r0, #0
    4c86:	d000      	beq.n	4c8a <m2m_ip_cb+0x21a>
    4c88:	e74e      	b.n	4b28 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    4c8a:	aa05      	add	r2, sp, #20
    4c8c:	200c      	movs	r0, #12
    4c8e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    4c90:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    4c92:	0107      	lsls	r7, r0, #4
    4c94:	4935      	ldr	r1, [pc, #212]	; (4d6c <m2m_ip_cb+0x2fc>)
    4c96:	19c9      	adds	r1, r1, r7
    4c98:	2700      	movs	r7, #0
    4c9a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    4c9c:	2608      	movs	r6, #8
    4c9e:	5f97      	ldrsh	r7, [r2, r6]
    4ca0:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    4ca2:	8957      	ldrh	r7, [r2, #10]
    4ca4:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    4ca6:	af09      	add	r7, sp, #36	; 0x24
    4ca8:	8856      	ldrh	r6, [r2, #2]
    4caa:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    4cac:	9a06      	ldr	r2, [sp, #24]
    4cae:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4cb0:	88ca      	ldrh	r2, [r1, #6]
    4cb2:	b292      	uxth	r2, r2
    4cb4:	4293      	cmp	r3, r2
    4cb6:	d00c      	beq.n	4cd2 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    4cb8:	2d10      	cmp	r5, #16
    4cba:	d800      	bhi.n	4cbe <m2m_ip_cb+0x24e>
    4cbc:	e734      	b.n	4b28 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4cbe:	2301      	movs	r3, #1
    4cc0:	2200      	movs	r2, #0
    4cc2:	2100      	movs	r1, #0
    4cc4:	2000      	movs	r0, #0
    4cc6:	4c26      	ldr	r4, [pc, #152]	; (4d60 <m2m_ip_cb+0x2f0>)
    4cc8:	47a0      	blx	r4
	{
    4cca:	e72d      	b.n	4b28 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    4ccc:	2309      	movs	r3, #9
    4cce:	469a      	mov	sl, r3
    4cd0:	e7d2      	b.n	4c78 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    4cd2:	4643      	mov	r3, r8
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	dd01      	ble.n	4cdc <m2m_ip_cb+0x26c>
    4cd8:	45a8      	cmp	r8, r5
    4cda:	db0f      	blt.n	4cfc <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    4cdc:	ab09      	add	r3, sp, #36	; 0x24
    4cde:	4642      	mov	r2, r8
    4ce0:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    4ce2:	2300      	movs	r3, #0
    4ce4:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    4ce6:	4b20      	ldr	r3, [pc, #128]	; (4d68 <m2m_ip_cb+0x2f8>)
    4ce8:	681b      	ldr	r3, [r3, #0]
    4cea:	2b00      	cmp	r3, #0
    4cec:	d100      	bne.n	4cf0 <m2m_ip_cb+0x280>
    4cee:	e71b      	b.n	4b28 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    4cf0:	4b1d      	ldr	r3, [pc, #116]	; (4d68 <m2m_ip_cb+0x2f8>)
    4cf2:	681b      	ldr	r3, [r3, #0]
    4cf4:	aa09      	add	r2, sp, #36	; 0x24
    4cf6:	4651      	mov	r1, sl
    4cf8:	4798      	blx	r3
    4cfa:	e715      	b.n	4b28 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    4cfc:	0023      	movs	r3, r4
    4cfe:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    4d00:	4642      	mov	r2, r8
    4d02:	4669      	mov	r1, sp
    4d04:	818a      	strh	r2, [r1, #12]
    4d06:	898a      	ldrh	r2, [r1, #12]
    4d08:	9200      	str	r2, [sp, #0]
    4d0a:	4652      	mov	r2, sl
    4d0c:	0039      	movs	r1, r7
    4d0e:	4c1a      	ldr	r4, [pc, #104]	; (4d78 <m2m_ip_cb+0x308>)
    4d10:	47a0      	blx	r4
    4d12:	e709      	b.n	4b28 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4d14:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    4d16:	2300      	movs	r3, #0
    4d18:	2208      	movs	r2, #8
    4d1a:	a909      	add	r1, sp, #36	; 0x24
    4d1c:	0020      	movs	r0, r4
    4d1e:	4c10      	ldr	r4, [pc, #64]	; (4d60 <m2m_ip_cb+0x2f0>)
    4d20:	47a0      	blx	r4
    4d22:	2800      	cmp	r0, #0
    4d24:	d000      	beq.n	4d28 <m2m_ip_cb+0x2b8>
    4d26:	e6ff      	b.n	4b28 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    4d28:	ab09      	add	r3, sp, #36	; 0x24
    4d2a:	2000      	movs	r0, #0
    4d2c:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    4d2e:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    4d30:	8859      	ldrh	r1, [r3, #2]
    4d32:	ab05      	add	r3, sp, #20
    4d34:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4d36:	0101      	lsls	r1, r0, #4
    4d38:	4b0c      	ldr	r3, [pc, #48]	; (4d6c <m2m_ip_cb+0x2fc>)
    4d3a:	185b      	adds	r3, r3, r1
    4d3c:	88db      	ldrh	r3, [r3, #6]
    4d3e:	b29b      	uxth	r3, r3
    4d40:	429a      	cmp	r2, r3
    4d42:	d000      	beq.n	4d46 <m2m_ip_cb+0x2d6>
    4d44:	e6f0      	b.n	4b28 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    4d46:	4b08      	ldr	r3, [pc, #32]	; (4d68 <m2m_ip_cb+0x2f8>)
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d100      	bne.n	4d50 <m2m_ip_cb+0x2e0>
    4d4e:	e6eb      	b.n	4b28 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    4d50:	4b05      	ldr	r3, [pc, #20]	; (4d68 <m2m_ip_cb+0x2f8>)
    4d52:	681b      	ldr	r3, [r3, #0]
    4d54:	aa05      	add	r2, sp, #20
    4d56:	0029      	movs	r1, r5
    4d58:	4798      	blx	r3
	{
    4d5a:	e6e5      	b.n	4b28 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    4d5c:	2508      	movs	r5, #8
    4d5e:	e7da      	b.n	4d16 <m2m_ip_cb+0x2a6>
    4d60:	00002cfd 	.word	0x00002cfd
    4d64:	200006b0 	.word	0x200006b0
    4d68:	200006ac 	.word	0x200006ac
    4d6c:	200005fc 	.word	0x200005fc
    4d70:	20000226 	.word	0x20000226
    4d74:	200006b4 	.word	0x200006b4
    4d78:	0000495d 	.word	0x0000495d

00004d7c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    4d7c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    4d7e:	4b0a      	ldr	r3, [pc, #40]	; (4da8 <socketInit+0x2c>)
    4d80:	781b      	ldrb	r3, [r3, #0]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d000      	beq.n	4d88 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    4d86:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    4d88:	22b0      	movs	r2, #176	; 0xb0
    4d8a:	2100      	movs	r1, #0
    4d8c:	4807      	ldr	r0, [pc, #28]	; (4dac <socketInit+0x30>)
    4d8e:	4b08      	ldr	r3, [pc, #32]	; (4db0 <socketInit+0x34>)
    4d90:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    4d92:	4908      	ldr	r1, [pc, #32]	; (4db4 <socketInit+0x38>)
    4d94:	2002      	movs	r0, #2
    4d96:	4b08      	ldr	r3, [pc, #32]	; (4db8 <socketInit+0x3c>)
    4d98:	4798      	blx	r3
		gbSocketInit	= 1;
    4d9a:	2201      	movs	r2, #1
    4d9c:	4b02      	ldr	r3, [pc, #8]	; (4da8 <socketInit+0x2c>)
    4d9e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    4da0:	2200      	movs	r2, #0
    4da2:	4b06      	ldr	r3, [pc, #24]	; (4dbc <socketInit+0x40>)
    4da4:	801a      	strh	r2, [r3, #0]
}
    4da6:	e7ee      	b.n	4d86 <socketInit+0xa>
    4da8:	20000225 	.word	0x20000225
    4dac:	200005fc 	.word	0x200005fc
    4db0:	000025dd 	.word	0x000025dd
    4db4:	00004a71 	.word	0x00004a71
    4db8:	00002de9 	.word	0x00002de9
    4dbc:	20000226 	.word	0x20000226

00004dc0 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    4dc0:	4b02      	ldr	r3, [pc, #8]	; (4dcc <registerSocketCallback+0xc>)
    4dc2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    4dc4:	4b02      	ldr	r3, [pc, #8]	; (4dd0 <registerSocketCallback+0x10>)
    4dc6:	6019      	str	r1, [r3, #0]
}
    4dc8:	4770      	bx	lr
    4dca:	46c0      	nop			; (mov r8, r8)
    4dcc:	200006ac 	.word	0x200006ac
    4dd0:	200006b4 	.word	0x200006b4

00004dd4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    4dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dd6:	46d6      	mov	lr, sl
    4dd8:	4647      	mov	r7, r8
    4dda:	b580      	push	{r7, lr}
    4ddc:	b089      	sub	sp, #36	; 0x24
    4dde:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    4de0:	2802      	cmp	r0, #2
    4de2:	d000      	beq.n	4de6 <socket+0x12>
    4de4:	e09c      	b.n	4f20 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    4de6:	2901      	cmp	r1, #1
    4de8:	d00a      	beq.n	4e00 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    4dea:	2902      	cmp	r1, #2
    4dec:	d100      	bne.n	4df0 <socket+0x1c>
    4dee:	e070      	b.n	4ed2 <socket+0xfe>
	SOCKET					sock = -1;
    4df0:	2501      	movs	r5, #1
    4df2:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    4df4:	0028      	movs	r0, r5
    4df6:	b009      	add	sp, #36	; 0x24
    4df8:	bc0c      	pop	{r2, r3}
    4dfa:	4690      	mov	r8, r2
    4dfc:	469a      	mov	sl, r3
    4dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    4e00:	4c49      	ldr	r4, [pc, #292]	; (4f28 <socket+0x154>)
    4e02:	7827      	ldrb	r7, [r4, #0]
    4e04:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    4e06:	7826      	ldrb	r6, [r4, #0]
    4e08:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    4e0a:	7820      	ldrb	r0, [r4, #0]
    4e0c:	3001      	adds	r0, #1
    4e0e:	3106      	adds	r1, #6
    4e10:	4b46      	ldr	r3, [pc, #280]	; (4f2c <socket+0x158>)
    4e12:	4798      	blx	r3
    4e14:	b2c9      	uxtb	r1, r1
    4e16:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    4e18:	0132      	lsls	r2, r6, #4
    4e1a:	4b45      	ldr	r3, [pc, #276]	; (4f30 <socket+0x15c>)
    4e1c:	189b      	adds	r3, r3, r2
    4e1e:	7a9b      	ldrb	r3, [r3, #10]
    4e20:	2506      	movs	r5, #6
    4e22:	2b00      	cmp	r3, #0
    4e24:	d018      	beq.n	4e58 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    4e26:	4e40      	ldr	r6, [pc, #256]	; (4f28 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    4e28:	4b40      	ldr	r3, [pc, #256]	; (4f2c <socket+0x158>)
    4e2a:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    4e2c:	4b40      	ldr	r3, [pc, #256]	; (4f30 <socket+0x15c>)
    4e2e:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    4e30:	7837      	ldrb	r7, [r6, #0]
    4e32:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    4e34:	7834      	ldrb	r4, [r6, #0]
    4e36:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    4e38:	7830      	ldrb	r0, [r6, #0]
    4e3a:	3001      	adds	r0, #1
    4e3c:	2107      	movs	r1, #7
    4e3e:	47d0      	blx	sl
    4e40:	b2c9      	uxtb	r1, r1
    4e42:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    4e44:	0123      	lsls	r3, r4, #4
    4e46:	4443      	add	r3, r8
    4e48:	7a9b      	ldrb	r3, [r3, #10]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d007      	beq.n	4e5e <socket+0x8a>
    4e4e:	3d01      	subs	r5, #1
    4e50:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    4e52:	2d00      	cmp	r5, #0
    4e54:	d1ec      	bne.n	4e30 <socket+0x5c>
    4e56:	e7cb      	b.n	4df0 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    4e58:	4b35      	ldr	r3, [pc, #212]	; (4f30 <socket+0x15c>)
    4e5a:	18d4      	adds	r4, r2, r3
    4e5c:	e002      	b.n	4e64 <socket+0x90>
    4e5e:	0124      	lsls	r4, r4, #4
    4e60:	4b33      	ldr	r3, [pc, #204]	; (4f30 <socket+0x15c>)
    4e62:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    4e64:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    4e66:	2d00      	cmp	r5, #0
    4e68:	dbc4      	blt.n	4df4 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    4e6a:	2210      	movs	r2, #16
    4e6c:	2100      	movs	r1, #0
    4e6e:	0020      	movs	r0, r4
    4e70:	4b30      	ldr	r3, [pc, #192]	; (4f34 <socket+0x160>)
    4e72:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    4e74:	2301      	movs	r3, #1
    4e76:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    4e78:	4a2f      	ldr	r2, [pc, #188]	; (4f38 <socket+0x164>)
    4e7a:	8813      	ldrh	r3, [r2, #0]
    4e7c:	3301      	adds	r3, #1
    4e7e:	b29b      	uxth	r3, r3
    4e80:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    4e82:	8813      	ldrh	r3, [r2, #0]
    4e84:	b29b      	uxth	r3, r3
    4e86:	2b00      	cmp	r3, #0
    4e88:	d103      	bne.n	4e92 <socket+0xbe>
				++gu16SessionID;
    4e8a:	8813      	ldrh	r3, [r2, #0]
    4e8c:	3301      	adds	r3, #1
    4e8e:	b29b      	uxth	r3, r3
    4e90:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    4e92:	4e29      	ldr	r6, [pc, #164]	; (4f38 <socket+0x164>)
    4e94:	8833      	ldrh	r3, [r6, #0]
    4e96:	b29b      	uxth	r3, r3
    4e98:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    4e9a:	4828      	ldr	r0, [pc, #160]	; (4f3c <socket+0x168>)
    4e9c:	4f28      	ldr	r7, [pc, #160]	; (4f40 <socket+0x16c>)
    4e9e:	47b8      	blx	r7
    4ea0:	8832      	ldrh	r2, [r6, #0]
    4ea2:	b292      	uxth	r2, r2
    4ea4:	0029      	movs	r1, r5
    4ea6:	4827      	ldr	r0, [pc, #156]	; (4f44 <socket+0x170>)
    4ea8:	47b8      	blx	r7
    4eaa:	200d      	movs	r0, #13
    4eac:	4b26      	ldr	r3, [pc, #152]	; (4f48 <socket+0x174>)
    4eae:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    4eb0:	9b05      	ldr	r3, [sp, #20]
    4eb2:	07db      	lsls	r3, r3, #31
    4eb4:	d59e      	bpl.n	4df4 <socket+0x20>
				strSSLCreate.sslSock = sock;
    4eb6:	aa07      	add	r2, sp, #28
    4eb8:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    4eba:	2321      	movs	r3, #33	; 0x21
    4ebc:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    4ebe:	2300      	movs	r3, #0
    4ec0:	9302      	str	r3, [sp, #8]
    4ec2:	9301      	str	r3, [sp, #4]
    4ec4:	9300      	str	r3, [sp, #0]
    4ec6:	3304      	adds	r3, #4
    4ec8:	2150      	movs	r1, #80	; 0x50
    4eca:	2002      	movs	r0, #2
    4ecc:	4c1f      	ldr	r4, [pc, #124]	; (4f4c <socket+0x178>)
    4ece:	47a0      	blx	r4
    4ed0:	e790      	b.n	4df4 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    4ed2:	4b1f      	ldr	r3, [pc, #124]	; (4f50 <socket+0x17c>)
    4ed4:	781d      	ldrb	r5, [r3, #0]
    4ed6:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    4ed8:	781c      	ldrb	r4, [r3, #0]
    4eda:	0124      	lsls	r4, r4, #4
    4edc:	4a1d      	ldr	r2, [pc, #116]	; (4f54 <socket+0x180>)
    4ede:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    4ee0:	7819      	ldrb	r1, [r3, #0]
    4ee2:	3101      	adds	r1, #1
    4ee4:	2203      	movs	r2, #3
    4ee6:	400a      	ands	r2, r1
    4ee8:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    4eea:	7aa3      	ldrb	r3, [r4, #10]
    4eec:	2b00      	cmp	r3, #0
    4eee:	d014      	beq.n	4f1a <socket+0x146>
    4ef0:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    4ef2:	4917      	ldr	r1, [pc, #92]	; (4f50 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    4ef4:	4f17      	ldr	r7, [pc, #92]	; (4f54 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    4ef6:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    4ef8:	780d      	ldrb	r5, [r1, #0]
    4efa:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    4efc:	780c      	ldrb	r4, [r1, #0]
    4efe:	0124      	lsls	r4, r4, #4
    4f00:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    4f02:	780b      	ldrb	r3, [r1, #0]
    4f04:	3301      	adds	r3, #1
    4f06:	4003      	ands	r3, r0
    4f08:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    4f0a:	7aa3      	ldrb	r3, [r4, #10]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d004      	beq.n	4f1a <socket+0x146>
    4f10:	3a01      	subs	r2, #1
    4f12:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    4f14:	2a00      	cmp	r2, #0
    4f16:	d1ef      	bne.n	4ef8 <socket+0x124>
    4f18:	e76a      	b.n	4df0 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    4f1a:	3507      	adds	r5, #7
    4f1c:	b26d      	sxtb	r5, r5
					break;
    4f1e:	e7a2      	b.n	4e66 <socket+0x92>
	SOCKET					sock = -1;
    4f20:	2501      	movs	r5, #1
    4f22:	426d      	negs	r5, r5
    4f24:	e766      	b.n	4df4 <socket+0x20>
    4f26:	46c0      	nop			; (mov r8, r8)
    4f28:	20000228 	.word	0x20000228
    4f2c:	0000dbf9 	.word	0x0000dbf9
    4f30:	200005fc 	.word	0x200005fc
    4f34:	000025dd 	.word	0x000025dd
    4f38:	20000226 	.word	0x20000226
    4f3c:	00010e3c 	.word	0x00010e3c
    4f40:	0000b339 	.word	0x0000b339
    4f44:	000118cc 	.word	0x000118cc
    4f48:	0000b36d 	.word	0x0000b36d
    4f4c:	000026f1 	.word	0x000026f1
    4f50:	20000229 	.word	0x20000229
    4f54:	2000066c 	.word	0x2000066c

00004f58 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    4f58:	b570      	push	{r4, r5, r6, lr}
    4f5a:	b088      	sub	sp, #32
    4f5c:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    4f5e:	db30      	blt.n	4fc2 <connect+0x6a>
    4f60:	2900      	cmp	r1, #0
    4f62:	d031      	beq.n	4fc8 <connect+0x70>
    4f64:	0100      	lsls	r0, r0, #4
    4f66:	4b1d      	ldr	r3, [pc, #116]	; (4fdc <connect+0x84>)
    4f68:	181b      	adds	r3, r3, r0
    4f6a:	7a9b      	ldrb	r3, [r3, #10]
    4f6c:	2b01      	cmp	r3, #1
    4f6e:	d12e      	bne.n	4fce <connect+0x76>
    4f70:	2a00      	cmp	r2, #0
    4f72:	d02f      	beq.n	4fd4 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    4f74:	4b19      	ldr	r3, [pc, #100]	; (4fdc <connect+0x84>)
    4f76:	181b      	adds	r3, r3, r0
    4f78:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    4f7a:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    4f7c:	07db      	lsls	r3, r3, #31
    4f7e:	d505      	bpl.n	4f8c <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    4f80:	4b16      	ldr	r3, [pc, #88]	; (4fdc <connect+0x84>)
    4f82:	181b      	adds	r3, r3, r0
    4f84:	7ada      	ldrb	r2, [r3, #11]
    4f86:	ab05      	add	r3, sp, #20
    4f88:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    4f8a:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    4f8c:	ad05      	add	r5, sp, #20
    4f8e:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    4f90:	2208      	movs	r2, #8
    4f92:	0028      	movs	r0, r5
    4f94:	4b12      	ldr	r3, [pc, #72]	; (4fe0 <connect+0x88>)
    4f96:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    4f98:	0124      	lsls	r4, r4, #4
    4f9a:	4b10      	ldr	r3, [pc, #64]	; (4fdc <connect+0x84>)
    4f9c:	191c      	adds	r4, r3, r4
    4f9e:	88e3      	ldrh	r3, [r4, #6]
    4fa0:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    4fa2:	2300      	movs	r3, #0
    4fa4:	9302      	str	r3, [sp, #8]
    4fa6:	9301      	str	r3, [sp, #4]
    4fa8:	9300      	str	r3, [sp, #0]
    4faa:	330c      	adds	r3, #12
    4fac:	002a      	movs	r2, r5
    4fae:	0031      	movs	r1, r6
    4fb0:	2002      	movs	r0, #2
    4fb2:	4c0c      	ldr	r4, [pc, #48]	; (4fe4 <connect+0x8c>)
    4fb4:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    4fb6:	2800      	cmp	r0, #0
    4fb8:	d001      	beq.n	4fbe <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    4fba:	2009      	movs	r0, #9
    4fbc:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    4fbe:	b008      	add	sp, #32
    4fc0:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4fc2:	2006      	movs	r0, #6
    4fc4:	4240      	negs	r0, r0
    4fc6:	e7fa      	b.n	4fbe <connect+0x66>
    4fc8:	2006      	movs	r0, #6
    4fca:	4240      	negs	r0, r0
    4fcc:	e7f7      	b.n	4fbe <connect+0x66>
    4fce:	2006      	movs	r0, #6
    4fd0:	4240      	negs	r0, r0
    4fd2:	e7f4      	b.n	4fbe <connect+0x66>
    4fd4:	2006      	movs	r0, #6
    4fd6:	4240      	negs	r0, r0
    4fd8:	e7f1      	b.n	4fbe <connect+0x66>
    4fda:	46c0      	nop			; (mov r8, r8)
    4fdc:	200005fc 	.word	0x200005fc
    4fe0:	000025c9 	.word	0x000025c9
    4fe4:	000026f1 	.word	0x000026f1

00004fe8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    4fe8:	b530      	push	{r4, r5, lr}
    4fea:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    4fec:	2800      	cmp	r0, #0
    4fee:	db36      	blt.n	505e <send+0x76>
    4ff0:	2900      	cmp	r1, #0
    4ff2:	d037      	beq.n	5064 <send+0x7c>
    4ff4:	23af      	movs	r3, #175	; 0xaf
    4ff6:	00db      	lsls	r3, r3, #3
    4ff8:	429a      	cmp	r2, r3
    4ffa:	d836      	bhi.n	506a <send+0x82>
    4ffc:	0104      	lsls	r4, r0, #4
    4ffe:	4b1e      	ldr	r3, [pc, #120]	; (5078 <send+0x90>)
    5000:	191b      	adds	r3, r3, r4
    5002:	7a9b      	ldrb	r3, [r3, #10]
    5004:	2b01      	cmp	r3, #1
    5006:	d133      	bne.n	5070 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    5008:	ab04      	add	r3, sp, #16
    500a:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    500c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    500e:	0025      	movs	r5, r4
    5010:	4c19      	ldr	r4, [pc, #100]	; (5078 <send+0x90>)
    5012:	1964      	adds	r4, r4, r5
    5014:	88e4      	ldrh	r4, [r4, #6]
    5016:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    5018:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    501a:	2806      	cmp	r0, #6
    501c:	dd00      	ble.n	5020 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    501e:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5020:	0104      	lsls	r4, r0, #4
    5022:	4b15      	ldr	r3, [pc, #84]	; (5078 <send+0x90>)
    5024:	191b      	adds	r3, r3, r4
    5026:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    5028:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    502a:	07e4      	lsls	r4, r4, #31
    502c:	d505      	bpl.n	503a <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    502e:	0100      	lsls	r0, r0, #4
    5030:	4b11      	ldr	r3, [pc, #68]	; (5078 <send+0x90>)
    5032:	1818      	adds	r0, r3, r0
    5034:	8905      	ldrh	r5, [r0, #8]
    5036:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    5038:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    503a:	2080      	movs	r0, #128	; 0x80
    503c:	4318      	orrs	r0, r3
    503e:	9502      	str	r5, [sp, #8]
    5040:	9201      	str	r2, [sp, #4]
    5042:	9100      	str	r1, [sp, #0]
    5044:	2310      	movs	r3, #16
    5046:	aa04      	add	r2, sp, #16
    5048:	0001      	movs	r1, r0
    504a:	2002      	movs	r0, #2
    504c:	4c0b      	ldr	r4, [pc, #44]	; (507c <send+0x94>)
    504e:	47a0      	blx	r4
    5050:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    5052:	2800      	cmp	r0, #0
    5054:	d000      	beq.n	5058 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    5056:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    5058:	0018      	movs	r0, r3
    505a:	b009      	add	sp, #36	; 0x24
    505c:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    505e:	2306      	movs	r3, #6
    5060:	425b      	negs	r3, r3
    5062:	e7f9      	b.n	5058 <send+0x70>
    5064:	2306      	movs	r3, #6
    5066:	425b      	negs	r3, r3
    5068:	e7f6      	b.n	5058 <send+0x70>
    506a:	2306      	movs	r3, #6
    506c:	425b      	negs	r3, r3
    506e:	e7f3      	b.n	5058 <send+0x70>
    5070:	2306      	movs	r3, #6
    5072:	425b      	negs	r3, r3
    5074:	e7f0      	b.n	5058 <send+0x70>
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	200005fc 	.word	0x200005fc
    507c:	000026f1 	.word	0x000026f1

00005080 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    5080:	b530      	push	{r4, r5, lr}
    5082:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    5084:	2800      	cmp	r0, #0
    5086:	db34      	blt.n	50f2 <recv+0x72>
    5088:	2900      	cmp	r1, #0
    508a:	d035      	beq.n	50f8 <recv+0x78>
    508c:	2a00      	cmp	r2, #0
    508e:	d036      	beq.n	50fe <recv+0x7e>
    5090:	0105      	lsls	r5, r0, #4
    5092:	4c1e      	ldr	r4, [pc, #120]	; (510c <recv+0x8c>)
    5094:	1964      	adds	r4, r4, r5
    5096:	7aa4      	ldrb	r4, [r4, #10]
    5098:	2c01      	cmp	r4, #1
    509a:	d133      	bne.n	5104 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    509c:	4c1b      	ldr	r4, [pc, #108]	; (510c <recv+0x8c>)
    509e:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    50a0:	1964      	adds	r4, r4, r5
    50a2:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    50a4:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    50a6:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    50a8:	2900      	cmp	r1, #0
    50aa:	d11d      	bne.n	50e8 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    50ac:	2101      	movs	r1, #1
    50ae:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    50b0:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    50b2:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    50b4:	07d2      	lsls	r2, r2, #31
    50b6:	d500      	bpl.n	50ba <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    50b8:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    50ba:	2b00      	cmp	r3, #0
    50bc:	d117      	bne.n	50ee <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    50be:	3b01      	subs	r3, #1
    50c0:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    50c2:	aa04      	add	r2, sp, #16
    50c4:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    50c6:	0100      	lsls	r0, r0, #4
    50c8:	4b10      	ldr	r3, [pc, #64]	; (510c <recv+0x8c>)
    50ca:	1818      	adds	r0, r3, r0
    50cc:	88c3      	ldrh	r3, [r0, #6]
    50ce:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    50d0:	2300      	movs	r3, #0
    50d2:	9302      	str	r3, [sp, #8]
    50d4:	9301      	str	r3, [sp, #4]
    50d6:	9300      	str	r3, [sp, #0]
    50d8:	3308      	adds	r3, #8
    50da:	2002      	movs	r0, #2
    50dc:	4c0c      	ldr	r4, [pc, #48]	; (5110 <recv+0x90>)
    50de:	47a0      	blx	r4
    50e0:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    50e2:	2800      	cmp	r0, #0
    50e4:	d000      	beq.n	50e8 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    50e6:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    50e8:	0010      	movs	r0, r2
    50ea:	b007      	add	sp, #28
    50ec:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    50ee:	9304      	str	r3, [sp, #16]
    50f0:	e7e7      	b.n	50c2 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    50f2:	2206      	movs	r2, #6
    50f4:	4252      	negs	r2, r2
    50f6:	e7f7      	b.n	50e8 <recv+0x68>
    50f8:	2206      	movs	r2, #6
    50fa:	4252      	negs	r2, r2
    50fc:	e7f4      	b.n	50e8 <recv+0x68>
    50fe:	2206      	movs	r2, #6
    5100:	4252      	negs	r2, r2
    5102:	e7f1      	b.n	50e8 <recv+0x68>
    5104:	2206      	movs	r2, #6
    5106:	4252      	negs	r2, r2
    5108:	e7ee      	b.n	50e8 <recv+0x68>
    510a:	46c0      	nop			; (mov r8, r8)
    510c:	200005fc 	.word	0x200005fc
    5110:	000026f1 	.word	0x000026f1

00005114 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    5114:	b530      	push	{r4, r5, lr}
    5116:	b087      	sub	sp, #28
    5118:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    511a:	481e      	ldr	r0, [pc, #120]	; (5194 <close+0x80>)
    511c:	4d1e      	ldr	r5, [pc, #120]	; (5198 <close+0x84>)
    511e:	47a8      	blx	r5
    5120:	0021      	movs	r1, r4
    5122:	481e      	ldr	r0, [pc, #120]	; (519c <close+0x88>)
    5124:	47a8      	blx	r5
    5126:	200d      	movs	r0, #13
    5128:	4b1d      	ldr	r3, [pc, #116]	; (51a0 <close+0x8c>)
    512a:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    512c:	2c00      	cmp	r4, #0
    512e:	db2a      	blt.n	5186 <close+0x72>
    5130:	0122      	lsls	r2, r4, #4
    5132:	4b1c      	ldr	r3, [pc, #112]	; (51a4 <close+0x90>)
    5134:	189b      	adds	r3, r3, r2
    5136:	7a9b      	ldrb	r3, [r3, #10]
    5138:	2b01      	cmp	r3, #1
    513a:	d127      	bne.n	518c <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    513c:	a905      	add	r1, sp, #20
    513e:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    5140:	4b18      	ldr	r3, [pc, #96]	; (51a4 <close+0x90>)
    5142:	189b      	adds	r3, r3, r2
    5144:	88da      	ldrh	r2, [r3, #6]
    5146:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    5148:	2200      	movs	r2, #0
    514a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    514c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    514e:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    5150:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5152:	07db      	lsls	r3, r3, #31
    5154:	d500      	bpl.n	5158 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5156:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5158:	2300      	movs	r3, #0
    515a:	9302      	str	r3, [sp, #8]
    515c:	9301      	str	r3, [sp, #4]
    515e:	9300      	str	r3, [sp, #0]
    5160:	3304      	adds	r3, #4
    5162:	aa05      	add	r2, sp, #20
    5164:	2002      	movs	r0, #2
    5166:	4d10      	ldr	r5, [pc, #64]	; (51a8 <close+0x94>)
    5168:	47a8      	blx	r5
    516a:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    516c:	d001      	beq.n	5172 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    516e:	2509      	movs	r5, #9
    5170:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    5172:	0124      	lsls	r4, r4, #4
    5174:	480b      	ldr	r0, [pc, #44]	; (51a4 <close+0x90>)
    5176:	1820      	adds	r0, r4, r0
    5178:	2210      	movs	r2, #16
    517a:	2100      	movs	r1, #0
    517c:	4b0b      	ldr	r3, [pc, #44]	; (51ac <close+0x98>)
    517e:	4798      	blx	r3
	}
	return s8Ret;
}
    5180:	0028      	movs	r0, r5
    5182:	b007      	add	sp, #28
    5184:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    5186:	2506      	movs	r5, #6
    5188:	426d      	negs	r5, r5
    518a:	e7f9      	b.n	5180 <close+0x6c>
    518c:	2506      	movs	r5, #6
    518e:	426d      	negs	r5, r5
    5190:	e7f6      	b.n	5180 <close+0x6c>
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	00010e3c 	.word	0x00010e3c
    5198:	0000b339 	.word	0x0000b339
    519c:	000118b4 	.word	0x000118b4
    51a0:	0000b36d 	.word	0x0000b36d
    51a4:	200005fc 	.word	0x200005fc
    51a8:	000026f1 	.word	0x000026f1
    51ac:	000025dd 	.word	0x000025dd

000051b0 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    51b0:	b570      	push	{r4, r5, r6, lr}
    51b2:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    51b4:	2300      	movs	r3, #0
    51b6:	9301      	str	r3, [sp, #4]
    51b8:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    51ba:	2100      	movs	r1, #0
    51bc:	7802      	ldrb	r2, [r0, #0]
    51be:	1c44      	adds	r4, r0, #1
    51c0:	3005      	adds	r0, #5
    51c2:	000b      	movs	r3, r1
    51c4:	e009      	b.n	51da <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    51c6:	009d      	lsls	r5, r3, #2
    51c8:	195b      	adds	r3, r3, r5
    51ca:	005b      	lsls	r3, r3, #1
    51cc:	189b      	adds	r3, r3, r2
    51ce:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    51d0:	0022      	movs	r2, r4
    51d2:	3401      	adds	r4, #1
			if(j > 4)
    51d4:	42a0      	cmp	r0, r4
    51d6:	d00a      	beq.n	51ee <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    51d8:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    51da:	2a2e      	cmp	r2, #46	; 0x2e
    51dc:	d00a      	beq.n	51f4 <nmi_inet_addr+0x44>
    51de:	2a00      	cmp	r2, #0
    51e0:	d00c      	beq.n	51fc <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    51e2:	3a30      	subs	r2, #48	; 0x30
    51e4:	b2d2      	uxtb	r2, r2
    51e6:	2a09      	cmp	r2, #9
    51e8:	d9ed      	bls.n	51c6 <nmi_inet_addr+0x16>
				return 0;
    51ea:	2000      	movs	r0, #0
    51ec:	e000      	b.n	51f0 <nmi_inet_addr+0x40>
				return 0;
    51ee:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    51f0:	b002      	add	sp, #8
    51f2:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    51f4:	466a      	mov	r2, sp
    51f6:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    51f8:	0020      	movs	r0, r4
    51fa:	e002      	b.n	5202 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    51fc:	466a      	mov	r2, sp
    51fe:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    5200:	0020      	movs	r0, r4
    5202:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    5204:	2e04      	cmp	r6, #4
    5206:	d1d9      	bne.n	51bc <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    5208:	2204      	movs	r2, #4
    520a:	4669      	mov	r1, sp
    520c:	a801      	add	r0, sp, #4
    520e:	4b02      	ldr	r3, [pc, #8]	; (5218 <nmi_inet_addr+0x68>)
    5210:	4798      	blx	r3
	return u32IP;
    5212:	9801      	ldr	r0, [sp, #4]
    5214:	e7ec      	b.n	51f0 <nmi_inet_addr+0x40>
    5216:	46c0      	nop			; (mov r8, r8)
    5218:	000025c9 	.word	0x000025c9

0000521c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    521c:	b510      	push	{r4, lr}
    521e:	b084      	sub	sp, #16
    5220:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    5222:	4b0b      	ldr	r3, [pc, #44]	; (5250 <gethostbyname+0x34>)
    5224:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    5226:	b2c3      	uxtb	r3, r0
    5228:	2b40      	cmp	r3, #64	; 0x40
    522a:	d80d      	bhi.n	5248 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    522c:	23ff      	movs	r3, #255	; 0xff
    522e:	4003      	ands	r3, r0
    5230:	3301      	adds	r3, #1
    5232:	2200      	movs	r2, #0
    5234:	9202      	str	r2, [sp, #8]
    5236:	9201      	str	r2, [sp, #4]
    5238:	9200      	str	r2, [sp, #0]
    523a:	0022      	movs	r2, r4
    523c:	214a      	movs	r1, #74	; 0x4a
    523e:	2002      	movs	r0, #2
    5240:	4c04      	ldr	r4, [pc, #16]	; (5254 <gethostbyname+0x38>)
    5242:	47a0      	blx	r4
	}
	return s8Err;
}
    5244:	b004      	add	sp, #16
    5246:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    5248:	2006      	movs	r0, #6
    524a:	4240      	negs	r0, r0
    524c:	e7fa      	b.n	5244 <gethostbyname+0x28>
    524e:	46c0      	nop			; (mov r8, r8)
    5250:	000025ed 	.word	0x000025ed
    5254:	000026f1 	.word	0x000026f1

00005258 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    5258:	b570      	push	{r4, r5, r6, lr}
    525a:	b082      	sub	sp, #8
    525c:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    525e:	4b2a      	ldr	r3, [pc, #168]	; (5308 <spi_flash_enable+0xb0>)
    5260:	4798      	blx	r3
    5262:	0500      	lsls	r0, r0, #20
    5264:	0d00      	lsrs	r0, r0, #20
    5266:	4b29      	ldr	r3, [pc, #164]	; (530c <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    5268:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    526a:	4298      	cmp	r0, r3
    526c:	d802      	bhi.n	5274 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    526e:	0028      	movs	r0, r5
    5270:	b002      	add	sp, #8
    5272:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5274:	a901      	add	r1, sp, #4
    5276:	4826      	ldr	r0, [pc, #152]	; (5310 <spi_flash_enable+0xb8>)
    5278:	4b26      	ldr	r3, [pc, #152]	; (5314 <spi_flash_enable+0xbc>)
    527a:	4798      	blx	r3
    527c:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    527e:	d1f6      	bne.n	526e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    5280:	4b25      	ldr	r3, [pc, #148]	; (5318 <spi_flash_enable+0xc0>)
    5282:	9a01      	ldr	r2, [sp, #4]
    5284:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    5286:	4925      	ldr	r1, [pc, #148]	; (531c <spi_flash_enable+0xc4>)
    5288:	4319      	orrs	r1, r3
    528a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    528c:	4820      	ldr	r0, [pc, #128]	; (5310 <spi_flash_enable+0xb8>)
    528e:	4b24      	ldr	r3, [pc, #144]	; (5320 <spi_flash_enable+0xc8>)
    5290:	4798      	blx	r3
		if(enable) {
    5292:	2c00      	cmp	r4, #0
    5294:	d020      	beq.n	52d8 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5296:	2100      	movs	r1, #0
    5298:	4822      	ldr	r0, [pc, #136]	; (5324 <spi_flash_enable+0xcc>)
    529a:	4c21      	ldr	r4, [pc, #132]	; (5320 <spi_flash_enable+0xc8>)
    529c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    529e:	21ab      	movs	r1, #171	; 0xab
    52a0:	4821      	ldr	r0, [pc, #132]	; (5328 <spi_flash_enable+0xd0>)
    52a2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    52a4:	2101      	movs	r1, #1
    52a6:	4821      	ldr	r0, [pc, #132]	; (532c <spi_flash_enable+0xd4>)
    52a8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    52aa:	2100      	movs	r1, #0
    52ac:	4820      	ldr	r0, [pc, #128]	; (5330 <spi_flash_enable+0xd8>)
    52ae:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    52b0:	2181      	movs	r1, #129	; 0x81
    52b2:	4820      	ldr	r0, [pc, #128]	; (5334 <spi_flash_enable+0xdc>)
    52b4:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    52b6:	4e20      	ldr	r6, [pc, #128]	; (5338 <spi_flash_enable+0xe0>)
    52b8:	4c20      	ldr	r4, [pc, #128]	; (533c <spi_flash_enable+0xe4>)
    52ba:	0030      	movs	r0, r6
    52bc:	47a0      	blx	r4
    52be:	2801      	cmp	r0, #1
    52c0:	d1fb      	bne.n	52ba <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    52c2:	4b15      	ldr	r3, [pc, #84]	; (5318 <spi_flash_enable+0xc0>)
    52c4:	9a01      	ldr	r2, [sp, #4]
    52c6:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    52c8:	2180      	movs	r1, #128	; 0x80
    52ca:	0249      	lsls	r1, r1, #9
    52cc:	4319      	orrs	r1, r3
    52ce:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    52d0:	480f      	ldr	r0, [pc, #60]	; (5310 <spi_flash_enable+0xb8>)
    52d2:	4b13      	ldr	r3, [pc, #76]	; (5320 <spi_flash_enable+0xc8>)
    52d4:	4798      	blx	r3
    52d6:	e7ca      	b.n	526e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    52d8:	2100      	movs	r1, #0
    52da:	4812      	ldr	r0, [pc, #72]	; (5324 <spi_flash_enable+0xcc>)
    52dc:	4c10      	ldr	r4, [pc, #64]	; (5320 <spi_flash_enable+0xc8>)
    52de:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    52e0:	21b9      	movs	r1, #185	; 0xb9
    52e2:	4811      	ldr	r0, [pc, #68]	; (5328 <spi_flash_enable+0xd0>)
    52e4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    52e6:	2101      	movs	r1, #1
    52e8:	4810      	ldr	r0, [pc, #64]	; (532c <spi_flash_enable+0xd4>)
    52ea:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    52ec:	2100      	movs	r1, #0
    52ee:	4810      	ldr	r0, [pc, #64]	; (5330 <spi_flash_enable+0xd8>)
    52f0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    52f2:	2181      	movs	r1, #129	; 0x81
    52f4:	480f      	ldr	r0, [pc, #60]	; (5334 <spi_flash_enable+0xdc>)
    52f6:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    52f8:	4e0f      	ldr	r6, [pc, #60]	; (5338 <spi_flash_enable+0xe0>)
    52fa:	4c10      	ldr	r4, [pc, #64]	; (533c <spi_flash_enable+0xe4>)
    52fc:	0030      	movs	r0, r6
    52fe:	47a0      	blx	r4
    5300:	2801      	cmp	r0, #1
    5302:	d1fb      	bne.n	52fc <spi_flash_enable+0xa4>
    5304:	e7dd      	b.n	52c2 <spi_flash_enable+0x6a>
    5306:	46c0      	nop			; (mov r8, r8)
    5308:	000035d5 	.word	0x000035d5
    530c:	0000039f 	.word	0x0000039f
    5310:	00001410 	.word	0x00001410
    5314:	00003a25 	.word	0x00003a25
    5318:	f8888fff 	.word	0xf8888fff
    531c:	01111000 	.word	0x01111000
    5320:	00003a31 	.word	0x00003a31
    5324:	00010208 	.word	0x00010208
    5328:	0001020c 	.word	0x0001020c
    532c:	00010214 	.word	0x00010214
    5330:	0001021c 	.word	0x0001021c
    5334:	00010204 	.word	0x00010204
    5338:	00010218 	.word	0x00010218
    533c:	00003a19 	.word	0x00003a19

00005340 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    5340:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    5342:	2200      	movs	r2, #0
    5344:	2300      	movs	r3, #0
    5346:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    5348:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    534a:	2100      	movs	r1, #0
    534c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    534e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    5350:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    5352:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    5354:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    5356:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    5358:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    535a:	24c0      	movs	r4, #192	; 0xc0
    535c:	0164      	lsls	r4, r4, #5
    535e:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    5360:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    5362:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    5364:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    5366:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    5368:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    536a:	242a      	movs	r4, #42	; 0x2a
    536c:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    536e:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    5370:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    5372:	3c06      	subs	r4, #6
    5374:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    5376:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    5378:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    537a:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    537c:	232b      	movs	r3, #43	; 0x2b
    537e:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    5380:	3301      	adds	r3, #1
    5382:	54c1      	strb	r1, [r0, r3]
}
    5384:	bd10      	pop	{r4, pc}
	...

00005388 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    5388:	b5f0      	push	{r4, r5, r6, r7, lr}
    538a:	46d6      	mov	lr, sl
    538c:	464f      	mov	r7, r9
    538e:	4646      	mov	r6, r8
    5390:	b5c0      	push	{r6, r7, lr}
    5392:	b096      	sub	sp, #88	; 0x58
    5394:	0007      	movs	r7, r0
    5396:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    5398:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    539a:	4acb      	ldr	r2, [pc, #812]	; (56c8 <adc_init+0x340>)
    539c:	6a10      	ldr	r0, [r2, #32]
    539e:	2380      	movs	r3, #128	; 0x80
    53a0:	025b      	lsls	r3, r3, #9
    53a2:	4303      	orrs	r3, r0
    53a4:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    53a6:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    53a8:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    53aa:	07db      	lsls	r3, r3, #31
    53ac:	d505      	bpl.n	53ba <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    53ae:	b016      	add	sp, #88	; 0x58
    53b0:	bc1c      	pop	{r2, r3, r4}
    53b2:	4690      	mov	r8, r2
    53b4:	4699      	mov	r9, r3
    53b6:	46a2      	mov	sl, r4
    53b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    53ba:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    53bc:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    53be:	079b      	lsls	r3, r3, #30
    53c0:	d4f5      	bmi.n	53ae <adc_init+0x26>
	module_inst->reference = config->reference;
    53c2:	7873      	ldrb	r3, [r6, #1]
    53c4:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    53c6:	2b00      	cmp	r3, #0
    53c8:	d104      	bne.n	53d4 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    53ca:	4ac0      	ldr	r2, [pc, #768]	; (56cc <adc_init+0x344>)
    53cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
    53ce:	2104      	movs	r1, #4
    53d0:	430b      	orrs	r3, r1
    53d2:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
    53d4:	683b      	ldr	r3, [r7, #0]
    53d6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    53d8:	7833      	ldrb	r3, [r6, #0]
    53da:	466a      	mov	r2, sp
    53dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    53de:	4669      	mov	r1, sp
    53e0:	201e      	movs	r0, #30
    53e2:	4bbb      	ldr	r3, [pc, #748]	; (56d0 <adc_init+0x348>)
    53e4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    53e6:	201e      	movs	r0, #30
    53e8:	4bba      	ldr	r3, [pc, #744]	; (56d4 <adc_init+0x34c>)
    53ea:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    53ec:	232c      	movs	r3, #44	; 0x2c
    53ee:	5cf2      	ldrb	r2, [r6, r3]
    53f0:	2a00      	cmp	r2, #0
    53f2:	d054      	beq.n	549e <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
    53f4:	3b01      	subs	r3, #1
    53f6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    53f8:	7b33      	ldrb	r3, [r6, #12]
    53fa:	18eb      	adds	r3, r5, r3
    53fc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    53fe:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    5400:	b2c9      	uxtb	r1, r1
    5402:	428b      	cmp	r3, r1
    5404:	d221      	bcs.n	544a <adc_init+0xc2>
    5406:	1952      	adds	r2, r2, r5
    5408:	b2d3      	uxtb	r3, r2
    540a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    540c:	4bb2      	ldr	r3, [pc, #712]	; (56d8 <adc_init+0x350>)
    540e:	469a      	mov	sl, r3
    5410:	e003      	b.n	541a <adc_init+0x92>
			offset++;
    5412:	3501      	adds	r5, #1
    5414:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    5416:	45a9      	cmp	r9, r5
    5418:	d017      	beq.n	544a <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    541a:	240f      	movs	r4, #15
    541c:	402c      	ands	r4, r5
    541e:	7b33      	ldrb	r3, [r6, #12]
    5420:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    5422:	2250      	movs	r2, #80	; 0x50
    5424:	49ad      	ldr	r1, [pc, #692]	; (56dc <adc_init+0x354>)
    5426:	a802      	add	r0, sp, #8
    5428:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    542a:	2c13      	cmp	r4, #19
    542c:	d8f1      	bhi.n	5412 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    542e:	00a4      	lsls	r4, r4, #2
    5430:	ab02      	add	r3, sp, #8
    5432:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5434:	a901      	add	r1, sp, #4
    5436:	2300      	movs	r3, #0
    5438:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    543a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    543c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    543e:	3301      	adds	r3, #1
    5440:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    5442:	b2c0      	uxtb	r0, r0
    5444:	4ba6      	ldr	r3, [pc, #664]	; (56e0 <adc_init+0x358>)
    5446:	4798      	blx	r3
    5448:	e7e3      	b.n	5412 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
    544a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    544c:	2250      	movs	r2, #80	; 0x50
    544e:	49a3      	ldr	r1, [pc, #652]	; (56dc <adc_init+0x354>)
    5450:	a802      	add	r0, sp, #8
    5452:	4ba1      	ldr	r3, [pc, #644]	; (56d8 <adc_init+0x350>)
    5454:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    5456:	2c13      	cmp	r4, #19
    5458:	d913      	bls.n	5482 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    545a:	7d73      	ldrb	r3, [r6, #21]
    545c:	009b      	lsls	r3, r3, #2
    545e:	b2db      	uxtb	r3, r3
    5460:	4642      	mov	r2, r8
    5462:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    5464:	7db3      	ldrb	r3, [r6, #22]
    5466:	01db      	lsls	r3, r3, #7
    5468:	7872      	ldrb	r2, [r6, #1]
    546a:	4313      	orrs	r3, r2
    546c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    546e:	4642      	mov	r2, r8
    5470:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    5472:	7933      	ldrb	r3, [r6, #4]
    5474:	2b34      	cmp	r3, #52	; 0x34
    5476:	d900      	bls.n	547a <adc_init+0xf2>
    5478:	e178      	b.n	576c <adc_init+0x3e4>
    547a:	009b      	lsls	r3, r3, #2
    547c:	4a99      	ldr	r2, [pc, #612]	; (56e4 <adc_init+0x35c>)
    547e:	58d3      	ldr	r3, [r2, r3]
    5480:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    5482:	00a4      	lsls	r4, r4, #2
    5484:	ab02      	add	r3, sp, #8
    5486:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5488:	a901      	add	r1, sp, #4
    548a:	2300      	movs	r3, #0
    548c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    548e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    5490:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    5492:	3301      	adds	r3, #1
    5494:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    5496:	b2c0      	uxtb	r0, r0
    5498:	4b91      	ldr	r3, [pc, #580]	; (56e0 <adc_init+0x358>)
    549a:	4798      	blx	r3
    549c:	e7dd      	b.n	545a <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
    549e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    54a0:	2250      	movs	r2, #80	; 0x50
    54a2:	498e      	ldr	r1, [pc, #568]	; (56dc <adc_init+0x354>)
    54a4:	a802      	add	r0, sp, #8
    54a6:	4b8c      	ldr	r3, [pc, #560]	; (56d8 <adc_init+0x350>)
    54a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    54aa:	2c13      	cmp	r4, #19
    54ac:	d915      	bls.n	54da <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
    54ae:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    54b0:	2250      	movs	r2, #80	; 0x50
    54b2:	498a      	ldr	r1, [pc, #552]	; (56dc <adc_init+0x354>)
    54b4:	a802      	add	r0, sp, #8
    54b6:	4b88      	ldr	r3, [pc, #544]	; (56d8 <adc_init+0x350>)
    54b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    54ba:	2c13      	cmp	r4, #19
    54bc:	d8cd      	bhi.n	545a <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    54be:	00a4      	lsls	r4, r4, #2
    54c0:	ab02      	add	r3, sp, #8
    54c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    54c4:	a901      	add	r1, sp, #4
    54c6:	2300      	movs	r3, #0
    54c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    54ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    54cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    54ce:	3301      	adds	r3, #1
    54d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    54d2:	b2c0      	uxtb	r0, r0
    54d4:	4b82      	ldr	r3, [pc, #520]	; (56e0 <adc_init+0x358>)
    54d6:	4798      	blx	r3
    54d8:	e7bf      	b.n	545a <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    54da:	00a4      	lsls	r4, r4, #2
    54dc:	ab02      	add	r3, sp, #8
    54de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    54e0:	a901      	add	r1, sp, #4
    54e2:	2300      	movs	r3, #0
    54e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    54e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    54e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    54ea:	3301      	adds	r3, #1
    54ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    54ee:	b2c0      	uxtb	r0, r0
    54f0:	4b7b      	ldr	r3, [pc, #492]	; (56e0 <adc_init+0x358>)
    54f2:	4798      	blx	r3
    54f4:	e7db      	b.n	54ae <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    54f6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    54f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    54fa:	2102      	movs	r1, #2
    54fc:	e01a      	b.n	5534 <adc_init+0x1ac>
		adjres = config->divide_result;
    54fe:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    5500:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    5502:	2410      	movs	r4, #16
    5504:	e016      	b.n	5534 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    5506:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    5508:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    550a:	2101      	movs	r1, #1
    550c:	e012      	b.n	5534 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    550e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    5510:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    5512:	2100      	movs	r1, #0
    5514:	e00e      	b.n	5534 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    5516:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    5518:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    551a:	2100      	movs	r1, #0
    551c:	e00a      	b.n	5534 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    551e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    5520:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    5522:	2100      	movs	r1, #0
    5524:	e006      	b.n	5534 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    5526:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    5528:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    552a:	2100      	movs	r1, #0
    552c:	e002      	b.n	5534 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    552e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    5530:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    5532:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    5534:	0109      	lsls	r1, r1, #4
    5536:	2270      	movs	r2, #112	; 0x70
    5538:	400a      	ands	r2, r1
    553a:	4313      	orrs	r3, r2
    553c:	4642      	mov	r2, r8
    553e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    5540:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    5542:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    5544:	2b3f      	cmp	r3, #63	; 0x3f
    5546:	d900      	bls.n	554a <adc_init+0x1c2>
    5548:	e731      	b.n	53ae <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    554a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    554c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    554e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5550:	b25b      	sxtb	r3, r3
    5552:	2b00      	cmp	r3, #0
    5554:	dbfb      	blt.n	554e <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    5556:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    5558:	8872      	ldrh	r2, [r6, #2]
    555a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    555c:	2224      	movs	r2, #36	; 0x24
    555e:	5cb2      	ldrb	r2, [r6, r2]
    5560:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    5562:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    5564:	7d32      	ldrb	r2, [r6, #20]
    5566:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    5568:	4313      	orrs	r3, r2
    556a:	7cb2      	ldrb	r2, [r6, #18]
    556c:	0052      	lsls	r2, r2, #1
    556e:	4313      	orrs	r3, r2
    5570:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    5572:	4642      	mov	r2, r8
    5574:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    5576:	7e33      	ldrb	r3, [r6, #24]
    5578:	2b00      	cmp	r3, #0
    557a:	d020      	beq.n	55be <adc_init+0x236>
		switch (resolution) {
    557c:	2c10      	cmp	r4, #16
    557e:	d100      	bne.n	5582 <adc_init+0x1fa>
    5580:	e0d6      	b.n	5730 <adc_init+0x3a8>
    5582:	d800      	bhi.n	5586 <adc_init+0x1fe>
    5584:	e080      	b.n	5688 <adc_init+0x300>
    5586:	2c20      	cmp	r4, #32
    5588:	d100      	bne.n	558c <adc_init+0x204>
    558a:	e0b3      	b.n	56f4 <adc_init+0x36c>
    558c:	2c30      	cmp	r4, #48	; 0x30
    558e:	d116      	bne.n	55be <adc_init+0x236>
			if (config->differential_mode &&
    5590:	7cf2      	ldrb	r2, [r6, #19]
    5592:	2a00      	cmp	r2, #0
    5594:	d00a      	beq.n	55ac <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
    5596:	69f2      	ldr	r2, [r6, #28]
    5598:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    559a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    559c:	2aff      	cmp	r2, #255	; 0xff
    559e:	d900      	bls.n	55a2 <adc_init+0x21a>
    55a0:	e705      	b.n	53ae <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    55a2:	6a32      	ldr	r2, [r6, #32]
    55a4:	3280      	adds	r2, #128	; 0x80
    55a6:	2aff      	cmp	r2, #255	; 0xff
    55a8:	d900      	bls.n	55ac <adc_init+0x224>
    55aa:	e700      	b.n	53ae <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    55ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    55ae:	69f2      	ldr	r2, [r6, #28]
    55b0:	2aff      	cmp	r2, #255	; 0xff
    55b2:	dd00      	ble.n	55b6 <adc_init+0x22e>
    55b4:	e6fb      	b.n	53ae <adc_init+0x26>
    55b6:	6a32      	ldr	r2, [r6, #32]
    55b8:	2aff      	cmp	r2, #255	; 0xff
    55ba:	dd00      	ble.n	55be <adc_init+0x236>
    55bc:	e6f7      	b.n	53ae <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    55be:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    55c0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    55c2:	b252      	sxtb	r2, r2
    55c4:	2a00      	cmp	r2, #0
    55c6:	dbfb      	blt.n	55c0 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
    55c8:	4642      	mov	r2, r8
    55ca:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    55cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    55ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    55d0:	b25b      	sxtb	r3, r3
    55d2:	2b00      	cmp	r3, #0
    55d4:	dbfb      	blt.n	55ce <adc_init+0x246>
	adc_module->WINLT.reg =
    55d6:	8bb3      	ldrh	r3, [r6, #28]
    55d8:	4642      	mov	r2, r8
    55da:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    55dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    55de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    55e0:	b25b      	sxtb	r3, r3
    55e2:	2b00      	cmp	r3, #0
    55e4:	dbfb      	blt.n	55de <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    55e6:	8c33      	ldrh	r3, [r6, #32]
    55e8:	4642      	mov	r2, r8
    55ea:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    55ec:	232c      	movs	r3, #44	; 0x2c
    55ee:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    55f0:	2b00      	cmp	r3, #0
    55f2:	d005      	beq.n	5600 <adc_init+0x278>
		inputs_to_scan--;
    55f4:	3b01      	subs	r3, #1
    55f6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    55f8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    55fa:	2b0f      	cmp	r3, #15
    55fc:	d900      	bls.n	5600 <adc_init+0x278>
    55fe:	e6d6      	b.n	53ae <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    5600:	222b      	movs	r2, #43	; 0x2b
    5602:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    5604:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    5606:	290f      	cmp	r1, #15
    5608:	d900      	bls.n	560c <adc_init+0x284>
    560a:	e6d0      	b.n	53ae <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    560c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    560e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    5610:	b252      	sxtb	r2, r2
    5612:	2a00      	cmp	r2, #0
    5614:	dbfb      	blt.n	560e <adc_init+0x286>
			config->negative_input |
    5616:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    5618:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    561a:	4302      	orrs	r2, r0
    561c:	68b0      	ldr	r0, [r6, #8]
    561e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    5620:	0509      	lsls	r1, r1, #20
			config->negative_input |
    5622:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    5624:	041b      	lsls	r3, r3, #16
			config->negative_input |
    5626:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    5628:	4642      	mov	r2, r8
    562a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    562c:	232a      	movs	r3, #42	; 0x2a
    562e:	5cf3      	ldrb	r3, [r6, r3]
    5630:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    5632:	230f      	movs	r3, #15
    5634:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    5636:	3315      	adds	r3, #21
    5638:	5cf3      	ldrb	r3, [r6, r3]
    563a:	2b00      	cmp	r3, #0
    563c:	d012      	beq.n	5664 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    563e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    5640:	4a29      	ldr	r2, [pc, #164]	; (56e8 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
    5642:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    5644:	4293      	cmp	r3, r2
    5646:	d900      	bls.n	564a <adc_init+0x2c2>
    5648:	e6b1      	b.n	53ae <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    564a:	4642      	mov	r2, r8
    564c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    564e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    5650:	2380      	movs	r3, #128	; 0x80
    5652:	011b      	lsls	r3, r3, #4
    5654:	18d3      	adds	r3, r2, r3
    5656:	4924      	ldr	r1, [pc, #144]	; (56e8 <adc_init+0x360>)
    5658:	b29b      	uxth	r3, r3
    565a:	428b      	cmp	r3, r1
    565c:	d900      	bls.n	5660 <adc_init+0x2d8>
    565e:	e6a6      	b.n	53ae <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    5660:	4643      	mov	r3, r8
    5662:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    5664:	4b21      	ldr	r3, [pc, #132]	; (56ec <adc_init+0x364>)
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	015b      	lsls	r3, r3, #5
    566a:	22e0      	movs	r2, #224	; 0xe0
    566c:	00d2      	lsls	r2, r2, #3
    566e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    5670:	4a1f      	ldr	r2, [pc, #124]	; (56f0 <adc_init+0x368>)
    5672:	6851      	ldr	r1, [r2, #4]
    5674:	0149      	lsls	r1, r1, #5
    5676:	6812      	ldr	r2, [r2, #0]
    5678:	0ed2      	lsrs	r2, r2, #27
    567a:	430a      	orrs	r2, r1
    567c:	b2d2      	uxtb	r2, r2
			) |
    567e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    5680:	4642      	mov	r2, r8
    5682:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    5684:	2000      	movs	r0, #0
    5686:	e692      	b.n	53ae <adc_init+0x26>
		switch (resolution) {
    5688:	2c00      	cmp	r4, #0
    568a:	d198      	bne.n	55be <adc_init+0x236>
			if (config->differential_mode &&
    568c:	7cf2      	ldrb	r2, [r6, #19]
    568e:	2a00      	cmp	r2, #0
    5690:	d00f      	beq.n	56b2 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
    5692:	69f2      	ldr	r2, [r6, #28]
    5694:	2180      	movs	r1, #128	; 0x80
    5696:	0109      	lsls	r1, r1, #4
    5698:	468c      	mov	ip, r1
    569a:	4462      	add	r2, ip
			if (config->differential_mode &&
    569c:	4912      	ldr	r1, [pc, #72]	; (56e8 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    569e:	2017      	movs	r0, #23
			if (config->differential_mode &&
    56a0:	428a      	cmp	r2, r1
    56a2:	d900      	bls.n	56a6 <adc_init+0x31e>
    56a4:	e683      	b.n	53ae <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    56a6:	6a32      	ldr	r2, [r6, #32]
    56a8:	4462      	add	r2, ip
    56aa:	490f      	ldr	r1, [pc, #60]	; (56e8 <adc_init+0x360>)
    56ac:	428a      	cmp	r2, r1
    56ae:	d900      	bls.n	56b2 <adc_init+0x32a>
    56b0:	e67d      	b.n	53ae <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    56b2:	4a0d      	ldr	r2, [pc, #52]	; (56e8 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    56b4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    56b6:	69f1      	ldr	r1, [r6, #28]
    56b8:	4291      	cmp	r1, r2
    56ba:	dd00      	ble.n	56be <adc_init+0x336>
    56bc:	e677      	b.n	53ae <adc_init+0x26>
    56be:	6a31      	ldr	r1, [r6, #32]
    56c0:	4291      	cmp	r1, r2
    56c2:	dd00      	ble.n	56c6 <adc_init+0x33e>
    56c4:	e673      	b.n	53ae <adc_init+0x26>
    56c6:	e77a      	b.n	55be <adc_init+0x236>
    56c8:	40000400 	.word	0x40000400
    56cc:	40000800 	.word	0x40000800
    56d0:	0000a2fd 	.word	0x0000a2fd
    56d4:	0000a271 	.word	0x0000a271
    56d8:	0000a8c1 	.word	0x0000a8c1
    56dc:	000119bc 	.word	0x000119bc
    56e0:	0000a3f5 	.word	0x0000a3f5
    56e4:	000118e8 	.word	0x000118e8
    56e8:	00000fff 	.word	0x00000fff
    56ec:	00806024 	.word	0x00806024
    56f0:	00806020 	.word	0x00806020
			if (config->differential_mode &&
    56f4:	7cf2      	ldrb	r2, [r6, #19]
    56f6:	2a00      	cmp	r2, #0
    56f8:	d00f      	beq.n	571a <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
    56fa:	69f2      	ldr	r2, [r6, #28]
    56fc:	2180      	movs	r1, #128	; 0x80
    56fe:	0089      	lsls	r1, r1, #2
    5700:	468c      	mov	ip, r1
    5702:	4462      	add	r2, ip
			if (config->differential_mode &&
    5704:	491a      	ldr	r1, [pc, #104]	; (5770 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    5706:	2017      	movs	r0, #23
			if (config->differential_mode &&
    5708:	428a      	cmp	r2, r1
    570a:	d900      	bls.n	570e <adc_init+0x386>
    570c:	e64f      	b.n	53ae <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    570e:	6a32      	ldr	r2, [r6, #32]
    5710:	4462      	add	r2, ip
    5712:	4917      	ldr	r1, [pc, #92]	; (5770 <adc_init+0x3e8>)
    5714:	428a      	cmp	r2, r1
    5716:	d900      	bls.n	571a <adc_init+0x392>
    5718:	e649      	b.n	53ae <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    571a:	4a15      	ldr	r2, [pc, #84]	; (5770 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    571c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    571e:	69f1      	ldr	r1, [r6, #28]
    5720:	4291      	cmp	r1, r2
    5722:	dd00      	ble.n	5726 <adc_init+0x39e>
    5724:	e643      	b.n	53ae <adc_init+0x26>
    5726:	6a31      	ldr	r1, [r6, #32]
    5728:	4291      	cmp	r1, r2
    572a:	dd00      	ble.n	572e <adc_init+0x3a6>
    572c:	e63f      	b.n	53ae <adc_init+0x26>
    572e:	e746      	b.n	55be <adc_init+0x236>
			if (config->differential_mode &&
    5730:	7cf2      	ldrb	r2, [r6, #19]
    5732:	2a00      	cmp	r2, #0
    5734:	d00f      	beq.n	5756 <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
    5736:	69f2      	ldr	r2, [r6, #28]
    5738:	2180      	movs	r1, #128	; 0x80
    573a:	0209      	lsls	r1, r1, #8
    573c:	468c      	mov	ip, r1
    573e:	4462      	add	r2, ip
			if (config->differential_mode &&
    5740:	490c      	ldr	r1, [pc, #48]	; (5774 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    5742:	2017      	movs	r0, #23
			if (config->differential_mode &&
    5744:	428a      	cmp	r2, r1
    5746:	d900      	bls.n	574a <adc_init+0x3c2>
    5748:	e631      	b.n	53ae <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    574a:	6a32      	ldr	r2, [r6, #32]
    574c:	4462      	add	r2, ip
    574e:	4909      	ldr	r1, [pc, #36]	; (5774 <adc_init+0x3ec>)
    5750:	428a      	cmp	r2, r1
    5752:	d900      	bls.n	5756 <adc_init+0x3ce>
    5754:	e62b      	b.n	53ae <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    5756:	4a07      	ldr	r2, [pc, #28]	; (5774 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    5758:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    575a:	69f1      	ldr	r1, [r6, #28]
    575c:	4291      	cmp	r1, r2
    575e:	dd00      	ble.n	5762 <adc_init+0x3da>
    5760:	e625      	b.n	53ae <adc_init+0x26>
    5762:	6a31      	ldr	r1, [r6, #32]
    5764:	4291      	cmp	r1, r2
    5766:	dd00      	ble.n	576a <adc_init+0x3e2>
    5768:	e621      	b.n	53ae <adc_init+0x26>
    576a:	e728      	b.n	55be <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
    576c:	2017      	movs	r0, #23
    576e:	e61e      	b.n	53ae <adc_init+0x26>
    5770:	000003ff 	.word	0x000003ff
    5774:	0000ffff 	.word	0x0000ffff

00005778 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    5778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    577a:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    577c:	2041      	movs	r0, #65	; 0x41
    577e:	5c23      	ldrb	r3, [r4, r0]
    5780:	2501      	movs	r5, #1
    5782:	432b      	orrs	r3, r5
    5784:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    5786:	b292      	uxth	r2, r2
    5788:	2000      	movs	r0, #0
    578a:	5620      	ldrsb	r0, [r4, r0]
    578c:	2300      	movs	r3, #0
    578e:	4d12      	ldr	r5, [pc, #72]	; (57d8 <_http_client_send_wait+0x60>)
    5790:	47a8      	blx	r5
    5792:	2800      	cmp	r0, #0
    5794:	db16      	blt.n	57c4 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    5796:	2341      	movs	r3, #65	; 0x41
    5798:	5ce3      	ldrb	r3, [r4, r3]
    579a:	07db      	lsls	r3, r3, #31
    579c:	d518      	bpl.n	57d0 <_http_client_send_wait+0x58>
    579e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    57a0:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    57a2:	2b02      	cmp	r3, #2
    57a4:	d917      	bls.n	57d6 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    57a6:	4f0d      	ldr	r7, [pc, #52]	; (57dc <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    57a8:	4e0d      	ldr	r6, [pc, #52]	; (57e0 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    57aa:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    57ac:	2000      	movs	r0, #0
    57ae:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    57b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    57b2:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    57b4:	5d63      	ldrb	r3, [r4, r5]
    57b6:	07db      	lsls	r3, r3, #31
    57b8:	d50c      	bpl.n	57d4 <_http_client_send_wait+0x5c>
    57ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    57bc:	2b02      	cmp	r3, #2
    57be:	d8f5      	bhi.n	57ac <_http_client_send_wait+0x34>
	return 0;
    57c0:	2000      	movs	r0, #0
    57c2:	e008      	b.n	57d6 <_http_client_send_wait+0x5e>
		module->sending = 0;
    57c4:	2241      	movs	r2, #65	; 0x41
    57c6:	5ca3      	ldrb	r3, [r4, r2]
    57c8:	2101      	movs	r1, #1
    57ca:	438b      	bics	r3, r1
    57cc:	54a3      	strb	r3, [r4, r2]
		return result;
    57ce:	e002      	b.n	57d6 <_http_client_send_wait+0x5e>
	return 0;
    57d0:	2000      	movs	r0, #0
    57d2:	e000      	b.n	57d6 <_http_client_send_wait+0x5e>
    57d4:	2000      	movs	r0, #0
}
    57d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57d8:	00004fe9 	.word	0x00004fe9
    57dc:	00003285 	.word	0x00003285
    57e0:	0000690d 	.word	0x0000690d

000057e4 <http_client_get_config_defaults>:
	config->port = 80;
    57e4:	2350      	movs	r3, #80	; 0x50
    57e6:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    57e8:	2300      	movs	r3, #0
    57ea:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    57ec:	4a05      	ldr	r2, [pc, #20]	; (5804 <http_client_get_config_defaults+0x20>)
    57ee:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    57f0:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    57f2:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    57f4:	3301      	adds	r3, #1
    57f6:	33ff      	adds	r3, #255	; 0xff
    57f8:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    57fa:	3bae      	subs	r3, #174	; 0xae
    57fc:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    57fe:	4b02      	ldr	r3, [pc, #8]	; (5808 <http_client_get_config_defaults+0x24>)
    5800:	6183      	str	r3, [r0, #24]
}
    5802:	4770      	bx	lr
    5804:	00004e20 	.word	0x00004e20
    5808:	00011bd4 	.word	0x00011bd4

0000580c <http_client_init>:
{
    580c:	b570      	push	{r4, r5, r6, lr}
    580e:	0004      	movs	r4, r0
    5810:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    5812:	2800      	cmp	r0, #0
    5814:	d038      	beq.n	5888 <http_client_init+0x7c>
    5816:	2900      	cmp	r1, #0
    5818:	d039      	beq.n	588e <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    581a:	690b      	ldr	r3, [r1, #16]
    581c:	2b00      	cmp	r3, #0
    581e:	d039      	beq.n	5894 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    5820:	684b      	ldr	r3, [r1, #4]
    5822:	2b00      	cmp	r3, #0
    5824:	d039      	beq.n	589a <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    5826:	694b      	ldr	r3, [r1, #20]
    5828:	2b51      	cmp	r3, #81	; 0x51
    582a:	d939      	bls.n	58a0 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    582c:	22e8      	movs	r2, #232	; 0xe8
    582e:	2100      	movs	r1, #0
    5830:	4b1e      	ldr	r3, [pc, #120]	; (58ac <http_client_init+0xa0>)
    5832:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    5834:	0020      	movs	r0, r4
    5836:	3050      	adds	r0, #80	; 0x50
    5838:	221c      	movs	r2, #28
    583a:	0029      	movs	r1, r5
    583c:	4b1c      	ldr	r3, [pc, #112]	; (58b0 <http_client_init+0xa4>)
    583e:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    5840:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    5842:	2b00      	cmp	r3, #0
    5844:	d008      	beq.n	5858 <http_client_init+0x4c>
	if (config->timeout > 0) {
    5846:	892b      	ldrh	r3, [r5, #8]
    5848:	2b00      	cmp	r3, #0
    584a:	d111      	bne.n	5870 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    584c:	2300      	movs	r3, #0
    584e:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    5850:	22d8      	movs	r2, #216	; 0xd8
    5852:	50a3      	str	r3, [r4, r2]
	return 0;
    5854:	2000      	movs	r0, #0
}
    5856:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    5858:	6928      	ldr	r0, [r5, #16]
    585a:	4b16      	ldr	r3, [pc, #88]	; (58b4 <http_client_init+0xa8>)
    585c:	4798      	blx	r3
    585e:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    5860:	2800      	cmp	r0, #0
    5862:	d020      	beq.n	58a6 <http_client_init+0x9a>
		module->alloc_buffer = 1;
    5864:	2241      	movs	r2, #65	; 0x41
    5866:	5ca3      	ldrb	r3, [r4, r2]
    5868:	2104      	movs	r1, #4
    586a:	430b      	orrs	r3, r1
    586c:	54a3      	strb	r3, [r4, r2]
    586e:	e7ea      	b.n	5846 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    5870:	6868      	ldr	r0, [r5, #4]
    5872:	2300      	movs	r3, #0
    5874:	0022      	movs	r2, r4
    5876:	4910      	ldr	r1, [pc, #64]	; (58b8 <http_client_init+0xac>)
    5878:	4d10      	ldr	r5, [pc, #64]	; (58bc <http_client_init+0xb0>)
    587a:	47a8      	blx	r5
    587c:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    587e:	2800      	cmp	r0, #0
    5880:	dae4      	bge.n	584c <http_client_init+0x40>
			return -ENOSPC;
    5882:	201c      	movs	r0, #28
    5884:	4240      	negs	r0, r0
    5886:	e7e6      	b.n	5856 <http_client_init+0x4a>
		return -EINVAL;
    5888:	2016      	movs	r0, #22
    588a:	4240      	negs	r0, r0
    588c:	e7e3      	b.n	5856 <http_client_init+0x4a>
    588e:	2016      	movs	r0, #22
    5890:	4240      	negs	r0, r0
    5892:	e7e0      	b.n	5856 <http_client_init+0x4a>
		return -EINVAL;
    5894:	2016      	movs	r0, #22
    5896:	4240      	negs	r0, r0
    5898:	e7dd      	b.n	5856 <http_client_init+0x4a>
		return -EINVAL;
    589a:	2016      	movs	r0, #22
    589c:	4240      	negs	r0, r0
    589e:	e7da      	b.n	5856 <http_client_init+0x4a>
		return -EINVAL;
    58a0:	2016      	movs	r0, #22
    58a2:	4240      	negs	r0, r0
    58a4:	e7d7      	b.n	5856 <http_client_init+0x4a>
			return -ENOMEM;
    58a6:	200c      	movs	r0, #12
    58a8:	4240      	negs	r0, r0
    58aa:	e7d4      	b.n	5856 <http_client_init+0x4a>
    58ac:	0000a8f7 	.word	0x0000a8f7
    58b0:	0000a8c1 	.word	0x0000a8c1
    58b4:	0000a875 	.word	0x0000a875
    58b8:	000059d1 	.word	0x000059d1
    58bc:	00006899 	.word	0x00006899

000058c0 <http_client_register_callback>:
	if (module == NULL) {
    58c0:	2800      	cmp	r0, #0
    58c2:	d002      	beq.n	58ca <http_client_register_callback+0xa>
	module->cb = callback;
    58c4:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    58c6:	2000      	movs	r0, #0
}
    58c8:	4770      	bx	lr
		return -EINVAL;
    58ca:	2016      	movs	r0, #22
    58cc:	4240      	negs	r0, r0
    58ce:	e7fb      	b.n	58c8 <http_client_register_callback+0x8>

000058d0 <_http_client_clear_conn>:
{
    58d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58d2:	b085      	sub	sp, #20
    58d4:	0004      	movs	r4, r0
    58d6:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    58d8:	23c0      	movs	r3, #192	; 0xc0
    58da:	58c3      	ldr	r3, [r0, r3]
    58dc:	2b00      	cmp	r3, #0
    58de:	d002      	beq.n	58e6 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    58e0:	22c4      	movs	r2, #196	; 0xc4
    58e2:	5880      	ldr	r0, [r0, r2]
    58e4:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    58e6:	0020      	movs	r0, r4
    58e8:	30b0      	adds	r0, #176	; 0xb0
    58ea:	2218      	movs	r2, #24
    58ec:	2100      	movs	r1, #0
    58ee:	4b17      	ldr	r3, [pc, #92]	; (594c <_http_client_clear_conn+0x7c>)
    58f0:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    58f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    58f4:	2b00      	cmp	r3, #0
    58f6:	d124      	bne.n	5942 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    58f8:	2300      	movs	r3, #0
    58fa:	56e3      	ldrsb	r3, [r4, r3]
    58fc:	009b      	lsls	r3, r3, #2
    58fe:	2500      	movs	r5, #0
    5900:	4a13      	ldr	r2, [pc, #76]	; (5950 <_http_client_clear_conn+0x80>)
    5902:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    5904:	0020      	movs	r0, r4
    5906:	306c      	adds	r0, #108	; 0x6c
    5908:	226c      	movs	r2, #108	; 0x6c
    590a:	2100      	movs	r1, #0
    590c:	4f0f      	ldr	r7, [pc, #60]	; (594c <_http_client_clear_conn+0x7c>)
    590e:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    5910:	0020      	movs	r0, r4
    5912:	30d8      	adds	r0, #216	; 0xd8
    5914:	2210      	movs	r2, #16
    5916:	2100      	movs	r1, #0
    5918:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    591a:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    591c:	23d8      	movs	r3, #216	; 0xd8
    591e:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    5920:	2241      	movs	r2, #65	; 0x41
    5922:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    5924:	2101      	movs	r1, #1
    5926:	438b      	bics	r3, r1
    5928:	3101      	adds	r1, #1
    592a:	438b      	bics	r3, r1
    592c:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    592e:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    5930:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5932:	2b00      	cmp	r3, #0
    5934:	d003      	beq.n	593e <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    5936:	aa01      	add	r2, sp, #4
    5938:	3102      	adds	r1, #2
    593a:	0020      	movs	r0, r4
    593c:	4798      	blx	r3
}
    593e:	b005      	add	sp, #20
    5940:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    5942:	2000      	movs	r0, #0
    5944:	5620      	ldrsb	r0, [r4, r0]
    5946:	4b03      	ldr	r3, [pc, #12]	; (5954 <_http_client_clear_conn+0x84>)
    5948:	4798      	blx	r3
    594a:	e7d5      	b.n	58f8 <_http_client_clear_conn+0x28>
    594c:	0000a8f7 	.word	0x0000a8f7
    5950:	2000022c 	.word	0x2000022c
    5954:	00005115 	.word	0x00005115

00005958 <http_client_socket_resolve_handler>:
{
    5958:	b5f0      	push	{r4, r5, r6, r7, lr}
    595a:	b087      	sub	sp, #28
    595c:	9000      	str	r0, [sp, #0]
    595e:	9101      	str	r1, [sp, #4]
    5960:	4c17      	ldr	r4, [pc, #92]	; (59c0 <http_client_socket_resolve_handler+0x68>)
    5962:	0026      	movs	r6, r4
    5964:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    5966:	4f17      	ldr	r7, [pc, #92]	; (59c4 <http_client_socket_resolve_handler+0x6c>)
    5968:	e015      	b.n	5996 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    596a:	2302      	movs	r3, #2
    596c:	aa02      	add	r2, sp, #8
    596e:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    5970:	334e      	adds	r3, #78	; 0x4e
    5972:	5aeb      	ldrh	r3, [r5, r3]
    5974:	021a      	lsls	r2, r3, #8
    5976:	0a1b      	lsrs	r3, r3, #8
    5978:	4313      	orrs	r3, r2
    597a:	aa02      	add	r2, sp, #8
    597c:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    597e:	9b01      	ldr	r3, [sp, #4]
    5980:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    5982:	2000      	movs	r0, #0
    5984:	5628      	ldrsb	r0, [r5, r0]
    5986:	2210      	movs	r2, #16
    5988:	a902      	add	r1, sp, #8
    598a:	4b0f      	ldr	r3, [pc, #60]	; (59c8 <http_client_socket_resolve_handler+0x70>)
    598c:	4798      	blx	r3
				return;
    598e:	e015      	b.n	59bc <http_client_socket_resolve_handler+0x64>
    5990:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    5992:	42b4      	cmp	r4, r6
    5994:	d012      	beq.n	59bc <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    5996:	6825      	ldr	r5, [r4, #0]
    5998:	2d00      	cmp	r5, #0
    599a:	d0f9      	beq.n	5990 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    599c:	1c69      	adds	r1, r5, #1
    599e:	9800      	ldr	r0, [sp, #0]
    59a0:	47b8      	blx	r7
    59a2:	2800      	cmp	r0, #0
    59a4:	d1f4      	bne.n	5990 <http_client_socket_resolve_handler+0x38>
    59a6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    59a8:	2b01      	cmp	r3, #1
    59aa:	d1f1      	bne.n	5990 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    59ac:	9b01      	ldr	r3, [sp, #4]
    59ae:	2b00      	cmp	r3, #0
    59b0:	d1db      	bne.n	596a <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    59b2:	2176      	movs	r1, #118	; 0x76
    59b4:	4249      	negs	r1, r1
    59b6:	0028      	movs	r0, r5
    59b8:	4b04      	ldr	r3, [pc, #16]	; (59cc <http_client_socket_resolve_handler+0x74>)
    59ba:	4798      	blx	r3
}
    59bc:	b007      	add	sp, #28
    59be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59c0:	2000022c 	.word	0x2000022c
    59c4:	0000b63d 	.word	0x0000b63d
    59c8:	00004f59 	.word	0x00004f59
    59cc:	000058d1 	.word	0x000058d1

000059d0 <http_client_timer_callback>:
{
    59d0:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    59d2:	2a00      	cmp	r2, #0
    59d4:	d004      	beq.n	59e0 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    59d6:	213e      	movs	r1, #62	; 0x3e
    59d8:	4249      	negs	r1, r1
    59da:	0010      	movs	r0, r2
    59dc:	4b01      	ldr	r3, [pc, #4]	; (59e4 <http_client_timer_callback+0x14>)
    59de:	4798      	blx	r3
}
    59e0:	bd10      	pop	{r4, pc}
    59e2:	46c0      	nop			; (mov r8, r8)
    59e4:	000058d1 	.word	0x000058d1

000059e8 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    59e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ea:	46de      	mov	lr, fp
    59ec:	4657      	mov	r7, sl
    59ee:	b580      	push	{r7, lr}
    59f0:	b095      	sub	sp, #84	; 0x54
    59f2:	af02      	add	r7, sp, #8
    59f4:	0004      	movs	r4, r0
    59f6:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    59f8:	2310      	movs	r3, #16
    59fa:	2208      	movs	r2, #8
    59fc:	18ba      	adds	r2, r7, r2
    59fe:	18d2      	adds	r2, r2, r3
    5a00:	4bb1      	ldr	r3, [pc, #708]	; (5cc8 <_http_client_request+0x2e0>)
    5a02:	cb23      	ldmia	r3!, {r0, r1, r5}
    5a04:	c223      	stmia	r2!, {r0, r1, r5}
    5a06:	681b      	ldr	r3, [r3, #0]
    5a08:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    5a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    5a0c:	1dd3      	adds	r3, r2, #7
    5a0e:	08db      	lsrs	r3, r3, #3
    5a10:	00db      	lsls	r3, r3, #3
    5a12:	4669      	mov	r1, sp
    5a14:	1acb      	subs	r3, r1, r3
    5a16:	469d      	mov	sp, r3
    5a18:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    5a1a:	2c00      	cmp	r4, #0
    5a1c:	d100      	bne.n	5a20 <_http_client_request+0x38>
    5a1e:	e1f0      	b.n	5e02 <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    5a20:	2341      	movs	r3, #65	; 0x41
    5a22:	5ce3      	ldrb	r3, [r4, r3]
    5a24:	07db      	lsls	r3, r3, #31
    5a26:	d500      	bpl.n	5a2a <_http_client_request+0x42>
    5a28:	e1eb      	b.n	5e02 <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    5a2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    5a2c:	2b03      	cmp	r3, #3
    5a2e:	d004      	beq.n	5a3a <_http_client_request+0x52>
    5a30:	2b04      	cmp	r3, #4
    5a32:	d100      	bne.n	5a36 <_http_client_request+0x4e>
    5a34:	e120      	b.n	5c78 <_http_client_request+0x290>
    5a36:	46dd      	mov	sp, fp
    5a38:	e1e4      	b.n	5e04 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    5a3a:	2300      	movs	r3, #0
    5a3c:	21cc      	movs	r1, #204	; 0xcc
    5a3e:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    5a40:	3104      	adds	r1, #4
    5a42:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    5a44:	9400      	str	r4, [sp, #0]
    5a46:	4ba1      	ldr	r3, [pc, #644]	; (5ccc <_http_client_request+0x2e4>)
    5a48:	0031      	movs	r1, r6
    5a4a:	202c      	movs	r0, #44	; 0x2c
    5a4c:	2508      	movs	r5, #8
    5a4e:	46ac      	mov	ip, r5
    5a50:	44bc      	add	ip, r7
    5a52:	4460      	add	r0, ip
    5a54:	4d9e      	ldr	r5, [pc, #632]	; (5cd0 <_http_client_request+0x2e8>)
    5a56:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    5a58:	23c8      	movs	r3, #200	; 0xc8
    5a5a:	5ce3      	ldrb	r3, [r4, r3]
    5a5c:	2b01      	cmp	r3, #1
    5a5e:	d100      	bne.n	5a62 <_http_client_request+0x7a>
    5a60:	e0a9      	b.n	5bb6 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    5a62:	2b02      	cmp	r3, #2
    5a64:	d100      	bne.n	5a68 <_http_client_request+0x80>
    5a66:	e0af      	b.n	5bc8 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    5a68:	2b03      	cmp	r3, #3
    5a6a:	d100      	bne.n	5a6e <_http_client_request+0x86>
    5a6c:	e0b5      	b.n	5bda <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    5a6e:	2b04      	cmp	r3, #4
    5a70:	d100      	bne.n	5a74 <_http_client_request+0x8c>
    5a72:	e0bb      	b.n	5bec <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    5a74:	2b05      	cmp	r3, #5
    5a76:	d100      	bne.n	5a7a <_http_client_request+0x92>
    5a78:	e0c1      	b.n	5bfe <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    5a7a:	2b06      	cmp	r3, #6
    5a7c:	d100      	bne.n	5a80 <_http_client_request+0x98>
    5a7e:	e0c7      	b.n	5c10 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    5a80:	0025      	movs	r5, r4
    5a82:	3570      	adds	r5, #112	; 0x70
    5a84:	0028      	movs	r0, r5
    5a86:	4b93      	ldr	r3, [pc, #588]	; (5cd4 <_http_client_request+0x2ec>)
    5a88:	469a      	mov	sl, r3
    5a8a:	4798      	blx	r3
    5a8c:	0002      	movs	r2, r0
    5a8e:	0029      	movs	r1, r5
    5a90:	232c      	movs	r3, #44	; 0x2c
    5a92:	2008      	movs	r0, #8
    5a94:	1838      	adds	r0, r7, r0
    5a96:	18c0      	adds	r0, r0, r3
    5a98:	4d8f      	ldr	r5, [pc, #572]	; (5cd8 <_http_client_request+0x2f0>)
    5a9a:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    5a9c:	220b      	movs	r2, #11
    5a9e:	498f      	ldr	r1, [pc, #572]	; (5cdc <_http_client_request+0x2f4>)
    5aa0:	232c      	movs	r3, #44	; 0x2c
    5aa2:	2008      	movs	r0, #8
    5aa4:	1838      	adds	r0, r7, r0
    5aa6:	18c0      	adds	r0, r0, r3
    5aa8:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    5aaa:	220c      	movs	r2, #12
    5aac:	498c      	ldr	r1, [pc, #560]	; (5ce0 <_http_client_request+0x2f8>)
    5aae:	232c      	movs	r3, #44	; 0x2c
    5ab0:	2008      	movs	r0, #8
    5ab2:	1838      	adds	r0, r7, r0
    5ab4:	18c0      	adds	r0, r0, r3
    5ab6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    5ab8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    5aba:	607b      	str	r3, [r7, #4]
    5abc:	0018      	movs	r0, r3
    5abe:	47d0      	blx	sl
    5ac0:	0002      	movs	r2, r0
    5ac2:	6879      	ldr	r1, [r7, #4]
    5ac4:	232c      	movs	r3, #44	; 0x2c
    5ac6:	2008      	movs	r0, #8
    5ac8:	1838      	adds	r0, r7, r0
    5aca:	18c0      	adds	r0, r0, r3
    5acc:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    5ace:	2202      	movs	r2, #2
    5ad0:	4984      	ldr	r1, [pc, #528]	; (5ce4 <_http_client_request+0x2fc>)
    5ad2:	232c      	movs	r3, #44	; 0x2c
    5ad4:	2008      	movs	r0, #8
    5ad6:	1838      	adds	r0, r7, r0
    5ad8:	18c0      	adds	r0, r0, r3
    5ada:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    5adc:	2206      	movs	r2, #6
    5ade:	4982      	ldr	r1, [pc, #520]	; (5ce8 <_http_client_request+0x300>)
    5ae0:	232c      	movs	r3, #44	; 0x2c
    5ae2:	2008      	movs	r0, #8
    5ae4:	1838      	adds	r0, r7, r0
    5ae6:	18c0      	adds	r0, r0, r3
    5ae8:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    5aea:	1c63      	adds	r3, r4, #1
    5aec:	607b      	str	r3, [r7, #4]
    5aee:	0018      	movs	r0, r3
    5af0:	47d0      	blx	sl
    5af2:	0002      	movs	r2, r0
    5af4:	6879      	ldr	r1, [r7, #4]
    5af6:	232c      	movs	r3, #44	; 0x2c
    5af8:	2008      	movs	r0, #8
    5afa:	1838      	adds	r0, r7, r0
    5afc:	18c0      	adds	r0, r0, r3
    5afe:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    5b00:	2202      	movs	r2, #2
    5b02:	4978      	ldr	r1, [pc, #480]	; (5ce4 <_http_client_request+0x2fc>)
    5b04:	232c      	movs	r3, #44	; 0x2c
    5b06:	2008      	movs	r0, #8
    5b08:	1838      	adds	r0, r7, r0
    5b0a:	18c0      	adds	r0, r0, r3
    5b0c:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    5b0e:	2218      	movs	r2, #24
    5b10:	4976      	ldr	r1, [pc, #472]	; (5cec <_http_client_request+0x304>)
    5b12:	232c      	movs	r3, #44	; 0x2c
    5b14:	2008      	movs	r0, #8
    5b16:	1838      	adds	r0, r7, r0
    5b18:	18c0      	adds	r0, r0, r3
    5b1a:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    5b1c:	2213      	movs	r2, #19
    5b1e:	4974      	ldr	r1, [pc, #464]	; (5cf0 <_http_client_request+0x308>)
    5b20:	232c      	movs	r3, #44	; 0x2c
    5b22:	2008      	movs	r0, #8
    5b24:	1838      	adds	r0, r7, r0
    5b26:	18c0      	adds	r0, r0, r3
    5b28:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    5b2a:	2217      	movs	r2, #23
    5b2c:	4971      	ldr	r1, [pc, #452]	; (5cf4 <_http_client_request+0x30c>)
    5b2e:	232c      	movs	r3, #44	; 0x2c
    5b30:	2008      	movs	r0, #8
    5b32:	1838      	adds	r0, r7, r0
    5b34:	18c0      	adds	r0, r0, r3
    5b36:	47a8      	blx	r5

		if (entity->read != NULL) {
    5b38:	0023      	movs	r3, r4
    5b3a:	33b0      	adds	r3, #176	; 0xb0
    5b3c:	68db      	ldr	r3, [r3, #12]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d07b      	beq.n	5c3a <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    5b42:	23b0      	movs	r3, #176	; 0xb0
    5b44:	5ce3      	ldrb	r3, [r4, r3]
    5b46:	2b00      	cmp	r3, #0
    5b48:	d16b      	bne.n	5c22 <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    5b4a:	0023      	movs	r3, r4
    5b4c:	33b0      	adds	r3, #176	; 0xb0
    5b4e:	689b      	ldr	r3, [r3, #8]
    5b50:	2b00      	cmp	r3, #0
    5b52:	d072      	beq.n	5c3a <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    5b54:	0022      	movs	r2, r4
    5b56:	32b0      	adds	r2, #176	; 0xb0
    5b58:	6950      	ldr	r0, [r2, #20]
    5b5a:	4798      	blx	r3
    5b5c:	23cc      	movs	r3, #204	; 0xcc
    5b5e:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    5b60:	2800      	cmp	r0, #0
    5b62:	da00      	bge.n	5b66 <_http_client_request+0x17e>
    5b64:	e0ac      	b.n	5cc0 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    5b66:	0002      	movs	r2, r0
    5b68:	4963      	ldr	r1, [pc, #396]	; (5cf8 <_http_client_request+0x310>)
    5b6a:	2320      	movs	r3, #32
    5b6c:	2008      	movs	r0, #8
    5b6e:	1838      	adds	r0, r7, r0
    5b70:	18c0      	adds	r0, r0, r3
    5b72:	4b62      	ldr	r3, [pc, #392]	; (5cfc <_http_client_request+0x314>)
    5b74:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    5b76:	2210      	movs	r2, #16
    5b78:	4961      	ldr	r1, [pc, #388]	; (5d00 <_http_client_request+0x318>)
    5b7a:	232c      	movs	r3, #44	; 0x2c
    5b7c:	2008      	movs	r0, #8
    5b7e:	1838      	adds	r0, r7, r0
    5b80:	18c0      	adds	r0, r0, r3
    5b82:	4d55      	ldr	r5, [pc, #340]	; (5cd8 <_http_client_request+0x2f0>)
    5b84:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    5b86:	2320      	movs	r3, #32
    5b88:	2208      	movs	r2, #8
    5b8a:	18ba      	adds	r2, r7, r2
    5b8c:	18d0      	adds	r0, r2, r3
    5b8e:	4b51      	ldr	r3, [pc, #324]	; (5cd4 <_http_client_request+0x2ec>)
    5b90:	4798      	blx	r3
    5b92:	0002      	movs	r2, r0
    5b94:	2320      	movs	r3, #32
    5b96:	2108      	movs	r1, #8
    5b98:	1879      	adds	r1, r7, r1
    5b9a:	18c9      	adds	r1, r1, r3
    5b9c:	330c      	adds	r3, #12
    5b9e:	2008      	movs	r0, #8
    5ba0:	1838      	adds	r0, r7, r0
    5ba2:	18c0      	adds	r0, r0, r3
    5ba4:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    5ba6:	2202      	movs	r2, #2
    5ba8:	494e      	ldr	r1, [pc, #312]	; (5ce4 <_http_client_request+0x2fc>)
    5baa:	232c      	movs	r3, #44	; 0x2c
    5bac:	2008      	movs	r0, #8
    5bae:	1838      	adds	r0, r7, r0
    5bb0:	18c0      	adds	r0, r0, r3
    5bb2:	47a8      	blx	r5
    5bb4:	e041      	b.n	5c3a <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    5bb6:	2204      	movs	r2, #4
    5bb8:	4952      	ldr	r1, [pc, #328]	; (5d04 <_http_client_request+0x31c>)
    5bba:	332b      	adds	r3, #43	; 0x2b
    5bbc:	2008      	movs	r0, #8
    5bbe:	1838      	adds	r0, r7, r0
    5bc0:	18c0      	adds	r0, r0, r3
    5bc2:	4b45      	ldr	r3, [pc, #276]	; (5cd8 <_http_client_request+0x2f0>)
    5bc4:	4798      	blx	r3
    5bc6:	e75b      	b.n	5a80 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    5bc8:	2205      	movs	r2, #5
    5bca:	494f      	ldr	r1, [pc, #316]	; (5d08 <_http_client_request+0x320>)
    5bcc:	332a      	adds	r3, #42	; 0x2a
    5bce:	2008      	movs	r0, #8
    5bd0:	1838      	adds	r0, r7, r0
    5bd2:	18c0      	adds	r0, r0, r3
    5bd4:	4b40      	ldr	r3, [pc, #256]	; (5cd8 <_http_client_request+0x2f0>)
    5bd6:	4798      	blx	r3
    5bd8:	e752      	b.n	5a80 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    5bda:	2207      	movs	r2, #7
    5bdc:	494b      	ldr	r1, [pc, #300]	; (5d0c <_http_client_request+0x324>)
    5bde:	3329      	adds	r3, #41	; 0x29
    5be0:	2008      	movs	r0, #8
    5be2:	1838      	adds	r0, r7, r0
    5be4:	18c0      	adds	r0, r0, r3
    5be6:	4b3c      	ldr	r3, [pc, #240]	; (5cd8 <_http_client_request+0x2f0>)
    5be8:	4798      	blx	r3
    5bea:	e749      	b.n	5a80 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    5bec:	2204      	movs	r2, #4
    5bee:	4948      	ldr	r1, [pc, #288]	; (5d10 <_http_client_request+0x328>)
    5bf0:	3328      	adds	r3, #40	; 0x28
    5bf2:	2008      	movs	r0, #8
    5bf4:	1838      	adds	r0, r7, r0
    5bf6:	18c0      	adds	r0, r0, r3
    5bf8:	4b37      	ldr	r3, [pc, #220]	; (5cd8 <_http_client_request+0x2f0>)
    5bfa:	4798      	blx	r3
    5bfc:	e740      	b.n	5a80 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    5bfe:	2208      	movs	r2, #8
    5c00:	4944      	ldr	r1, [pc, #272]	; (5d14 <_http_client_request+0x32c>)
    5c02:	3327      	adds	r3, #39	; 0x27
    5c04:	2008      	movs	r0, #8
    5c06:	1838      	adds	r0, r7, r0
    5c08:	18c0      	adds	r0, r0, r3
    5c0a:	4b33      	ldr	r3, [pc, #204]	; (5cd8 <_http_client_request+0x2f0>)
    5c0c:	4798      	blx	r3
    5c0e:	e737      	b.n	5a80 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    5c10:	2205      	movs	r2, #5
    5c12:	4941      	ldr	r1, [pc, #260]	; (5d18 <_http_client_request+0x330>)
    5c14:	3326      	adds	r3, #38	; 0x26
    5c16:	2008      	movs	r0, #8
    5c18:	1838      	adds	r0, r7, r0
    5c1a:	18c0      	adds	r0, r0, r3
    5c1c:	4b2e      	ldr	r3, [pc, #184]	; (5cd8 <_http_client_request+0x2f0>)
    5c1e:	4798      	blx	r3
    5c20:	e72e      	b.n	5a80 <_http_client_request+0x98>
				module->req.content_length = -1;
    5c22:	2201      	movs	r2, #1
    5c24:	4252      	negs	r2, r2
    5c26:	23cc      	movs	r3, #204	; 0xcc
    5c28:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    5c2a:	321d      	adds	r2, #29
    5c2c:	493b      	ldr	r1, [pc, #236]	; (5d1c <_http_client_request+0x334>)
    5c2e:	3ba0      	subs	r3, #160	; 0xa0
    5c30:	2008      	movs	r0, #8
    5c32:	1838      	adds	r0, r7, r0
    5c34:	18c0      	adds	r0, r0, r3
    5c36:	4b28      	ldr	r3, [pc, #160]	; (5cd8 <_http_client_request+0x2f0>)
    5c38:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    5c3a:	23d4      	movs	r3, #212	; 0xd4
    5c3c:	58e5      	ldr	r5, [r4, r3]
    5c3e:	2d00      	cmp	r5, #0
    5c40:	d00a      	beq.n	5c58 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    5c42:	0028      	movs	r0, r5
    5c44:	4b23      	ldr	r3, [pc, #140]	; (5cd4 <_http_client_request+0x2ec>)
    5c46:	4798      	blx	r3
    5c48:	0002      	movs	r2, r0
    5c4a:	0029      	movs	r1, r5
    5c4c:	232c      	movs	r3, #44	; 0x2c
    5c4e:	2008      	movs	r0, #8
    5c50:	1838      	adds	r0, r7, r0
    5c52:	18c0      	adds	r0, r0, r3
    5c54:	4b20      	ldr	r3, [pc, #128]	; (5cd8 <_http_client_request+0x2f0>)
    5c56:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    5c58:	2202      	movs	r2, #2
    5c5a:	4922      	ldr	r1, [pc, #136]	; (5ce4 <_http_client_request+0x2fc>)
    5c5c:	232c      	movs	r3, #44	; 0x2c
    5c5e:	2008      	movs	r0, #8
    5c60:	1838      	adds	r0, r7, r0
    5c62:	18c0      	adds	r0, r0, r3
    5c64:	4b1c      	ldr	r3, [pc, #112]	; (5cd8 <_http_client_request+0x2f0>)
    5c66:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    5c68:	232c      	movs	r3, #44	; 0x2c
    5c6a:	2208      	movs	r2, #8
    5c6c:	18ba      	adds	r2, r7, r2
    5c6e:	18d0      	adds	r0, r2, r3
    5c70:	4b2b      	ldr	r3, [pc, #172]	; (5d20 <_http_client_request+0x338>)
    5c72:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    5c74:	2304      	movs	r3, #4
    5c76:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    5c78:	23cc      	movs	r3, #204	; 0xcc
    5c7a:	58e2      	ldr	r2, [r4, r3]
    5c7c:	2a00      	cmp	r2, #0
    5c7e:	db51      	blt.n	5d24 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    5c80:	dc00      	bgt.n	5c84 <_http_client_request+0x29c>
    5c82:	e0f0      	b.n	5e66 <_http_client_request+0x47e>
    5c84:	0023      	movs	r3, r4
    5c86:	33b0      	adds	r3, #176	; 0xb0
    5c88:	68dd      	ldr	r5, [r3, #12]
    5c8a:	2d00      	cmp	r5, #0
    5c8c:	d100      	bne.n	5c90 <_http_client_request+0x2a8>
    5c8e:	e0ea      	b.n	5e66 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    5c90:	23d0      	movs	r3, #208	; 0xd0
    5c92:	58e3      	ldr	r3, [r4, r3]
    5c94:	429a      	cmp	r2, r3
    5c96:	dd00      	ble.n	5c9a <_http_client_request+0x2b2>
    5c98:	e0ba      	b.n	5e10 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    5c9a:	23c0      	movs	r3, #192	; 0xc0
    5c9c:	58e3      	ldr	r3, [r4, r3]
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	d002      	beq.n	5ca8 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    5ca2:	22c4      	movs	r2, #196	; 0xc4
    5ca4:	58a0      	ldr	r0, [r4, r2]
    5ca6:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    5ca8:	2302      	movs	r3, #2
    5caa:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    5cac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d100      	bne.n	5cb4 <_http_client_request+0x2cc>
    5cb2:	e6c0      	b.n	5a36 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    5cb4:	220c      	movs	r2, #12
    5cb6:	18ba      	adds	r2, r7, r2
    5cb8:	2101      	movs	r1, #1
    5cba:	0020      	movs	r0, r4
    5cbc:	4798      	blx	r3
    5cbe:	e6ba      	b.n	5a36 <_http_client_request+0x4e>
					module->req.content_length = 0;
    5cc0:	2200      	movs	r2, #0
    5cc2:	50e2      	str	r2, [r4, r3]
    5cc4:	e7b9      	b.n	5c3a <_http_client_request+0x252>
    5cc6:	46c0      	nop			; (mov r8, r8)
    5cc8:	00011abc 	.word	0x00011abc
    5ccc:	00005779 	.word	0x00005779
    5cd0:	00006745 	.word	0x00006745
    5cd4:	0000b69b 	.word	0x0000b69b
    5cd8:	00006799 	.word	0x00006799
    5cdc:	00011b30 	.word	0x00011b30
    5ce0:	00011b3c 	.word	0x00011b3c
    5ce4:	000124bc 	.word	0x000124bc
    5ce8:	00011b4c 	.word	0x00011b4c
    5cec:	00011b54 	.word	0x00011b54
    5cf0:	00011b70 	.word	0x00011b70
    5cf4:	00011b84 	.word	0x00011b84
    5cf8:	00011bbc 	.word	0x00011bbc
    5cfc:	0000b5f9 	.word	0x0000b5f9
    5d00:	00011bc0 	.word	0x00011bc0
    5d04:	00011afc 	.word	0x00011afc
    5d08:	00011b04 	.word	0x00011b04
    5d0c:	00011b0c 	.word	0x00011b0c
    5d10:	00011b14 	.word	0x00011b14
    5d14:	00011b1c 	.word	0x00011b1c
    5d18:	00011b28 	.word	0x00011b28
    5d1c:	00011b9c 	.word	0x00011b9c
    5d20:	00006755 	.word	0x00006755
		if (module->req.content_length < 0 && entity->read) {
    5d24:	0023      	movs	r3, r4
    5d26:	33b0      	adds	r3, #176	; 0xb0
    5d28:	68dd      	ldr	r5, [r3, #12]
    5d2a:	2d00      	cmp	r5, #0
    5d2c:	d100      	bne.n	5d30 <_http_client_request+0x348>
    5d2e:	e09a      	b.n	5e66 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    5d30:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    5d32:	58e3      	ldr	r3, [r4, r3]
    5d34:	6e62      	ldr	r2, [r4, #100]	; 0x64
    5d36:	3a07      	subs	r2, #7
    5d38:	1d71      	adds	r1, r6, #5
    5d3a:	0020      	movs	r0, r4
    5d3c:	30b0      	adds	r0, #176	; 0xb0
    5d3e:	6940      	ldr	r0, [r0, #20]
    5d40:	47a8      	blx	r5
    5d42:	0005      	movs	r5, r0
    5d44:	43c3      	mvns	r3, r0
    5d46:	17db      	asrs	r3, r3, #31
    5d48:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    5d4a:	220a      	movs	r2, #10
    5d4c:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    5d4e:	210d      	movs	r1, #13
    5d50:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    5d52:	1973      	adds	r3, r6, r5
    5d54:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    5d56:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    5d58:	230f      	movs	r3, #15
    5d5a:	402b      	ands	r3, r5
    5d5c:	3206      	adds	r2, #6
    5d5e:	3905      	subs	r1, #5
    5d60:	468c      	mov	ip, r1
    5d62:	44bc      	add	ip, r7
    5d64:	4462      	add	r2, ip
    5d66:	5cd3      	ldrb	r3, [r2, r3]
    5d68:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    5d6a:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    5d6c:	2d0f      	cmp	r5, #15
    5d6e:	dd0d      	ble.n	5d8c <_http_client_request+0x3a4>
				ptr = buffer + 1;
    5d70:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    5d72:	17eb      	asrs	r3, r5, #31
    5d74:	220f      	movs	r2, #15
    5d76:	4013      	ands	r3, r2
    5d78:	195b      	adds	r3, r3, r5
    5d7a:	111b      	asrs	r3, r3, #4
    5d7c:	4013      	ands	r3, r2
    5d7e:	3201      	adds	r2, #1
    5d80:	2008      	movs	r0, #8
    5d82:	4684      	mov	ip, r0
    5d84:	44bc      	add	ip, r7
    5d86:	4462      	add	r2, ip
    5d88:	5cd3      	ldrb	r3, [r2, r3]
    5d8a:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    5d8c:	2dff      	cmp	r5, #255	; 0xff
    5d8e:	dd0d      	ble.n	5dac <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    5d90:	17ea      	asrs	r2, r5, #31
    5d92:	23ff      	movs	r3, #255	; 0xff
    5d94:	4013      	ands	r3, r2
    5d96:	195b      	adds	r3, r3, r5
    5d98:	051b      	lsls	r3, r3, #20
    5d9a:	0f1b      	lsrs	r3, r3, #28
    5d9c:	2210      	movs	r2, #16
    5d9e:	2108      	movs	r1, #8
    5da0:	468c      	mov	ip, r1
    5da2:	44bc      	add	ip, r7
    5da4:	4462      	add	r2, ip
    5da6:	5cd3      	ldrb	r3, [r2, r3]
    5da8:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    5daa:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    5dac:	1cca      	adds	r2, r1, #3
    5dae:	1b92      	subs	r2, r2, r6
    5db0:	1d2b      	adds	r3, r5, #4
    5db2:	18d2      	adds	r2, r2, r3
    5db4:	b292      	uxth	r2, r2
    5db6:	2000      	movs	r0, #0
    5db8:	5620      	ldrsb	r0, [r4, r0]
    5dba:	2300      	movs	r3, #0
    5dbc:	4e30      	ldr	r6, [pc, #192]	; (5e80 <_http_client_request+0x498>)
    5dbe:	47b0      	blx	r6
    5dc0:	2800      	cmp	r0, #0
    5dc2:	db19      	blt.n	5df8 <_http_client_request+0x410>
			module->req.sent_length += size;
    5dc4:	22d0      	movs	r2, #208	; 0xd0
    5dc6:	58a3      	ldr	r3, [r4, r2]
    5dc8:	195b      	adds	r3, r3, r5
    5dca:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    5dcc:	2d00      	cmp	r5, #0
    5dce:	d000      	beq.n	5dd2 <_http_client_request+0x3ea>
    5dd0:	e631      	b.n	5a36 <_http_client_request+0x4e>
				if (module->req.entity.close) {
    5dd2:	23c0      	movs	r3, #192	; 0xc0
    5dd4:	58e3      	ldr	r3, [r4, r3]
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	d002      	beq.n	5de0 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    5dda:	3a0c      	subs	r2, #12
    5ddc:	58a0      	ldr	r0, [r4, r2]
    5dde:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    5de0:	2302      	movs	r3, #2
    5de2:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    5de4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5de6:	2b00      	cmp	r3, #0
    5de8:	d100      	bne.n	5dec <_http_client_request+0x404>
    5dea:	e624      	b.n	5a36 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    5dec:	220c      	movs	r2, #12
    5dee:	18ba      	adds	r2, r7, r2
    5df0:	2101      	movs	r1, #1
    5df2:	0020      	movs	r0, r4
    5df4:	4798      	blx	r3
    5df6:	e61e      	b.n	5a36 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    5df8:	2105      	movs	r1, #5
    5dfa:	4249      	negs	r1, r1
    5dfc:	0020      	movs	r0, r4
    5dfe:	4b21      	ldr	r3, [pc, #132]	; (5e84 <_http_client_request+0x49c>)
    5e00:	4798      	blx	r3
    5e02:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    5e04:	46bd      	mov	sp, r7
    5e06:	b013      	add	sp, #76	; 0x4c
    5e08:	bc0c      	pop	{r2, r3}
    5e0a:	4692      	mov	sl, r2
    5e0c:	469b      	mov	fp, r3
    5e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    5e10:	0022      	movs	r2, r4
    5e12:	32b0      	adds	r2, #176	; 0xb0
    5e14:	6950      	ldr	r0, [r2, #20]
    5e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
    5e18:	0031      	movs	r1, r6
    5e1a:	47a8      	blx	r5
			if (size < 0) {
    5e1c:	2800      	cmp	r0, #0
    5e1e:	db16      	blt.n	5e4e <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    5e20:	23cc      	movs	r3, #204	; 0xcc
    5e22:	58e5      	ldr	r5, [r4, r3]
    5e24:	3304      	adds	r3, #4
    5e26:	58e3      	ldr	r3, [r4, r3]
    5e28:	1aed      	subs	r5, r5, r3
    5e2a:	4285      	cmp	r5, r0
    5e2c:	dd00      	ble.n	5e30 <_http_client_request+0x448>
    5e2e:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    5e30:	b2aa      	uxth	r2, r5
    5e32:	2000      	movs	r0, #0
    5e34:	5620      	ldrsb	r0, [r4, r0]
    5e36:	2300      	movs	r3, #0
    5e38:	0031      	movs	r1, r6
    5e3a:	4e11      	ldr	r6, [pc, #68]	; (5e80 <_http_client_request+0x498>)
    5e3c:	47b0      	blx	r6
    5e3e:	2800      	cmp	r0, #0
    5e40:	db0b      	blt.n	5e5a <_http_client_request+0x472>
				module->req.sent_length += size;
    5e42:	23d0      	movs	r3, #208	; 0xd0
    5e44:	58e2      	ldr	r2, [r4, r3]
    5e46:	4694      	mov	ip, r2
    5e48:	4465      	add	r5, ip
    5e4a:	50e5      	str	r5, [r4, r3]
    5e4c:	e5f3      	b.n	5a36 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    5e4e:	2105      	movs	r1, #5
    5e50:	4249      	negs	r1, r1
    5e52:	0020      	movs	r0, r4
    5e54:	4b0b      	ldr	r3, [pc, #44]	; (5e84 <_http_client_request+0x49c>)
    5e56:	4798      	blx	r3
    5e58:	e5ed      	b.n	5a36 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    5e5a:	2105      	movs	r1, #5
    5e5c:	4249      	negs	r1, r1
    5e5e:	0020      	movs	r0, r4
    5e60:	4b08      	ldr	r3, [pc, #32]	; (5e84 <_http_client_request+0x49c>)
    5e62:	4798      	blx	r3
					return;
    5e64:	e7cd      	b.n	5e02 <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    5e66:	2302      	movs	r3, #2
    5e68:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    5e6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d100      	bne.n	5e72 <_http_client_request+0x48a>
    5e70:	e5e1      	b.n	5a36 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    5e72:	220c      	movs	r2, #12
    5e74:	18ba      	adds	r2, r7, r2
    5e76:	2101      	movs	r1, #1
    5e78:	0020      	movs	r0, r4
    5e7a:	4798      	blx	r3
    5e7c:	e5db      	b.n	5a36 <_http_client_request+0x4e>
    5e7e:	46c0      	nop			; (mov r8, r8)
    5e80:	00004fe9 	.word	0x00004fe9
    5e84:	000058d1 	.word	0x000058d1

00005e88 <http_client_send_request>:
{
    5e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e8a:	46d6      	mov	lr, sl
    5e8c:	b500      	push	{lr}
    5e8e:	b088      	sub	sp, #32
    5e90:	0004      	movs	r4, r0
    5e92:	000f      	movs	r7, r1
    5e94:	4692      	mov	sl, r2
    5e96:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    5e98:	2800      	cmp	r0, #0
    5e9a:	d100      	bne.n	5e9e <http_client_send_request+0x16>
    5e9c:	e0d3      	b.n	6046 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    5e9e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    5ea0:	2b02      	cmp	r3, #2
    5ea2:	d900      	bls.n	5ea6 <http_client_send_request+0x1e>
    5ea4:	e0d3      	b.n	604e <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    5ea6:	2207      	movs	r2, #7
    5ea8:	4981      	ldr	r1, [pc, #516]	; (60b0 <http_client_send_request+0x228>)
    5eaa:	0038      	movs	r0, r7
    5eac:	4b81      	ldr	r3, [pc, #516]	; (60b4 <http_client_send_request+0x22c>)
    5eae:	4798      	blx	r3
		i = 7;
    5eb0:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    5eb2:	2800      	cmp	r0, #0
    5eb4:	d007      	beq.n	5ec6 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    5eb6:	2208      	movs	r2, #8
    5eb8:	497f      	ldr	r1, [pc, #508]	; (60b8 <http_client_send_request+0x230>)
    5eba:	0038      	movs	r0, r7
    5ebc:	4b7d      	ldr	r3, [pc, #500]	; (60b4 <http_client_send_request+0x22c>)
    5ebe:	4798      	blx	r3
		i = 8;
    5ec0:	4246      	negs	r6, r0
    5ec2:	4146      	adcs	r6, r0
    5ec4:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    5ec6:	1c63      	adds	r3, r4, #1
    5ec8:	19bd      	adds	r5, r7, r6
    5eca:	9302      	str	r3, [sp, #8]
    5ecc:	0018      	movs	r0, r3
    5ece:	4b7b      	ldr	r3, [pc, #492]	; (60bc <http_client_send_request+0x234>)
    5ed0:	4798      	blx	r3
    5ed2:	0002      	movs	r2, r0
    5ed4:	0029      	movs	r1, r5
    5ed6:	9802      	ldr	r0, [sp, #8]
    5ed8:	4b76      	ldr	r3, [pc, #472]	; (60b4 <http_client_send_request+0x22c>)
    5eda:	4798      	blx	r3
    5edc:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    5ede:	782b      	ldrb	r3, [r5, #0]
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d052      	beq.n	5f8a <http_client_send_request+0x102>
    5ee4:	2b2f      	cmp	r3, #47	; 0x2f
    5ee6:	d052      	beq.n	5f8e <http_client_send_request+0x106>
    5ee8:	1c71      	adds	r1, r6, #1
    5eea:	1879      	adds	r1, r7, r1
    5eec:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    5eee:	3201      	adds	r2, #1
    5ef0:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    5ef2:	000d      	movs	r5, r1
    5ef4:	780b      	ldrb	r3, [r1, #0]
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d002      	beq.n	5f00 <http_client_send_request+0x78>
    5efa:	3101      	adds	r1, #1
    5efc:	2b2f      	cmp	r3, #47	; 0x2f
    5efe:	d1f6      	bne.n	5eee <http_client_send_request+0x66>
	module->host[j] = '\0';
    5f00:	18a2      	adds	r2, r4, r2
    5f02:	2300      	movs	r3, #0
    5f04:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    5f06:	7863      	ldrb	r3, [r4, #1]
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d100      	bne.n	5f0e <http_client_send_request+0x86>
    5f0c:	e0a3      	b.n	6056 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    5f0e:	0028      	movs	r0, r5
    5f10:	4b6a      	ldr	r3, [pc, #424]	; (60bc <http_client_send_request+0x234>)
    5f12:	4798      	blx	r3
    5f14:	283f      	cmp	r0, #63	; 0x3f
    5f16:	d900      	bls.n	5f1a <http_client_send_request+0x92>
    5f18:	e0a1      	b.n	605e <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    5f1a:	23d4      	movs	r3, #212	; 0xd4
    5f1c:	58e0      	ldr	r0, [r4, r3]
    5f1e:	2800      	cmp	r0, #0
    5f20:	d001      	beq.n	5f26 <http_client_send_request+0x9e>
		free(module->req.ext_header);
    5f22:	4b67      	ldr	r3, [pc, #412]	; (60c0 <http_client_send_request+0x238>)
    5f24:	4798      	blx	r3
	if (ext_header != NULL) {
    5f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d032      	beq.n	5f92 <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    5f2c:	0018      	movs	r0, r3
    5f2e:	4b65      	ldr	r3, [pc, #404]	; (60c4 <http_client_send_request+0x23c>)
    5f30:	4798      	blx	r3
    5f32:	23d4      	movs	r3, #212	; 0xd4
    5f34:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    5f36:	2800      	cmp	r0, #0
    5f38:	d100      	bne.n	5f3c <http_client_send_request+0xb4>
    5f3a:	e094      	b.n	6066 <http_client_send_request+0x1de>
	module->sending = 0;
    5f3c:	2241      	movs	r2, #65	; 0x41
    5f3e:	5ca3      	ldrb	r3, [r4, r2]
    5f40:	2101      	movs	r1, #1
    5f42:	438b      	bics	r3, r1
    5f44:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    5f46:	2300      	movs	r3, #0
    5f48:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    5f4a:	782b      	ldrb	r3, [r5, #0]
    5f4c:	2b2f      	cmp	r3, #47	; 0x2f
    5f4e:	d024      	beq.n	5f9a <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    5f50:	222f      	movs	r2, #47	; 0x2f
    5f52:	2370      	movs	r3, #112	; 0x70
    5f54:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    5f56:	782b      	ldrb	r3, [r5, #0]
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d124      	bne.n	5fa6 <http_client_send_request+0x11e>
	if (entity != NULL) {
    5f5c:	9b03      	ldr	r3, [sp, #12]
    5f5e:	2b00      	cmp	r3, #0
    5f60:	d027      	beq.n	5fb2 <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    5f62:	0020      	movs	r0, r4
    5f64:	30b0      	adds	r0, #176	; 0xb0
    5f66:	2218      	movs	r2, #24
    5f68:	0019      	movs	r1, r3
    5f6a:	4b57      	ldr	r3, [pc, #348]	; (60c8 <http_client_send_request+0x240>)
    5f6c:	4798      	blx	r3
	module->req.method = method;
    5f6e:	23c8      	movs	r3, #200	; 0xc8
    5f70:	4652      	mov	r2, sl
    5f72:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    5f74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    5f76:	2b01      	cmp	r3, #1
    5f78:	d022      	beq.n	5fc0 <http_client_send_request+0x138>
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d027      	beq.n	5fce <http_client_send_request+0x146>
    5f7e:	2b02      	cmp	r3, #2
    5f80:	d03a      	beq.n	5ff8 <http_client_send_request+0x170>
		return -EAGAIN;
    5f82:	230b      	movs	r3, #11
    5f84:	425b      	negs	r3, r3
    5f86:	9301      	str	r3, [sp, #4]
    5f88:	e08d      	b.n	60a6 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    5f8a:	2200      	movs	r2, #0
    5f8c:	e7b8      	b.n	5f00 <http_client_send_request+0x78>
    5f8e:	2200      	movs	r2, #0
    5f90:	e7b6      	b.n	5f00 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    5f92:	2200      	movs	r2, #0
    5f94:	23d4      	movs	r3, #212	; 0xd4
    5f96:	50e2      	str	r2, [r4, r3]
    5f98:	e7d0      	b.n	5f3c <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    5f9a:	0020      	movs	r0, r4
    5f9c:	3070      	adds	r0, #112	; 0x70
    5f9e:	0029      	movs	r1, r5
    5fa0:	4b4a      	ldr	r3, [pc, #296]	; (60cc <http_client_send_request+0x244>)
    5fa2:	4798      	blx	r3
    5fa4:	e7da      	b.n	5f5c <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    5fa6:	0029      	movs	r1, r5
    5fa8:	0020      	movs	r0, r4
    5faa:	3071      	adds	r0, #113	; 0x71
    5fac:	4b47      	ldr	r3, [pc, #284]	; (60cc <http_client_send_request+0x244>)
    5fae:	4798      	blx	r3
    5fb0:	e7d4      	b.n	5f5c <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    5fb2:	0020      	movs	r0, r4
    5fb4:	30b0      	adds	r0, #176	; 0xb0
    5fb6:	2218      	movs	r2, #24
    5fb8:	2100      	movs	r1, #0
    5fba:	4b45      	ldr	r3, [pc, #276]	; (60d0 <http_client_send_request+0x248>)
    5fbc:	4798      	blx	r3
    5fbe:	e7d6      	b.n	5f6e <http_client_send_request+0xe6>
		if (!reconnect) {
    5fc0:	9b01      	ldr	r3, [sp, #4]
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d06f      	beq.n	60a6 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    5fc6:	2100      	movs	r1, #0
    5fc8:	0020      	movs	r0, r4
    5fca:	4b42      	ldr	r3, [pc, #264]	; (60d4 <http_client_send_request+0x24c>)
    5fcc:	4798      	blx	r3
		if (module->config.tls) {
    5fce:	2352      	movs	r3, #82	; 0x52
    5fd0:	5ce2      	ldrb	r2, [r4, r3]
    5fd2:	1e53      	subs	r3, r2, #1
    5fd4:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    5fd6:	b2d2      	uxtb	r2, r2
    5fd8:	2101      	movs	r1, #1
    5fda:	2002      	movs	r0, #2
    5fdc:	4b3e      	ldr	r3, [pc, #248]	; (60d8 <http_client_send_request+0x250>)
    5fde:	4798      	blx	r3
    5fe0:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    5fe2:	2800      	cmp	r0, #0
    5fe4:	db43      	blt.n	606e <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    5fe6:	0080      	lsls	r0, r0, #2
    5fe8:	4b3c      	ldr	r3, [pc, #240]	; (60dc <http_client_send_request+0x254>)
    5fea:	50c4      	str	r4, [r0, r3]
    5fec:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    5fee:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    5ff0:	2620      	movs	r6, #32
			isv6 = 1;
    5ff2:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    5ff4:	2730      	movs	r7, #48	; 0x30
    5ff6:	e00c      	b.n	6012 <http_client_send_request+0x18a>
		if (!reconnect) {
    5ff8:	9b01      	ldr	r3, [sp, #4]
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d1e3      	bne.n	5fc6 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    5ffe:	3303      	adds	r3, #3
    6000:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    6002:	0020      	movs	r0, r4
    6004:	4b36      	ldr	r3, [pc, #216]	; (60e0 <http_client_send_request+0x258>)
    6006:	4798      	blx	r3
			break;
    6008:	e04d      	b.n	60a6 <http_client_send_request+0x21e>
			if (isv6) {
    600a:	2900      	cmp	r1, #0
    600c:	d001      	beq.n	6012 <http_client_send_request+0x18a>
    600e:	e012      	b.n	6036 <http_client_send_request+0x1ae>
			isv6 = 1;
    6010:	0001      	movs	r1, r0
	while (*host != '\0') {
    6012:	782a      	ldrb	r2, [r5, #0]
    6014:	2a00      	cmp	r2, #0
    6016:	d02e      	beq.n	6076 <http_client_send_request+0x1ee>
		ch = *host++;
    6018:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    601a:	0013      	movs	r3, r2
    601c:	43b3      	bics	r3, r6
    601e:	3b41      	subs	r3, #65	; 0x41
    6020:	2b05      	cmp	r3, #5
    6022:	d9f5      	bls.n	6010 <http_client_send_request+0x188>
    6024:	2a3a      	cmp	r2, #58	; 0x3a
    6026:	d00a      	beq.n	603e <http_client_send_request+0x1b6>
    6028:	2a2f      	cmp	r2, #47	; 0x2f
    602a:	d00a      	beq.n	6042 <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    602c:	2a2e      	cmp	r2, #46	; 0x2e
    602e:	d0ec      	beq.n	600a <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    6030:	403a      	ands	r2, r7
    6032:	2a30      	cmp	r2, #48	; 0x30
    6034:	d0ed      	beq.n	6012 <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    6036:	9802      	ldr	r0, [sp, #8]
    6038:	4b2a      	ldr	r3, [pc, #168]	; (60e4 <http_client_send_request+0x25c>)
    603a:	4798      	blx	r3
    603c:	e02f      	b.n	609e <http_client_send_request+0x216>
			isv6 = 1;
    603e:	0001      	movs	r1, r0
    6040:	e7e7      	b.n	6012 <http_client_send_request+0x18a>
    6042:	0001      	movs	r1, r0
    6044:	e7e5      	b.n	6012 <http_client_send_request+0x18a>
		return -EINVAL;
    6046:	2316      	movs	r3, #22
    6048:	425b      	negs	r3, r3
    604a:	9301      	str	r3, [sp, #4]
    604c:	e02b      	b.n	60a6 <http_client_send_request+0x21e>
		return -EBUSY;
    604e:	2310      	movs	r3, #16
    6050:	425b      	negs	r3, r3
    6052:	9301      	str	r3, [sp, #4]
    6054:	e027      	b.n	60a6 <http_client_send_request+0x21e>
		return -EINVAL;
    6056:	2316      	movs	r3, #22
    6058:	425b      	negs	r3, r3
    605a:	9301      	str	r3, [sp, #4]
    605c:	e023      	b.n	60a6 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    605e:	235b      	movs	r3, #91	; 0x5b
    6060:	425b      	negs	r3, r3
    6062:	9301      	str	r3, [sp, #4]
    6064:	e01f      	b.n	60a6 <http_client_send_request+0x21e>
			return -ENOMEM;
    6066:	230c      	movs	r3, #12
    6068:	425b      	negs	r3, r3
    606a:	9301      	str	r3, [sp, #4]
    606c:	e01b      	b.n	60a6 <http_client_send_request+0x21e>
			return -ENOSPC;
    606e:	231c      	movs	r3, #28
    6070:	425b      	negs	r3, r3
    6072:	9301      	str	r3, [sp, #4]
    6074:	e017      	b.n	60a6 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    6076:	2302      	movs	r3, #2
    6078:	aa04      	add	r2, sp, #16
    607a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    607c:	334e      	adds	r3, #78	; 0x4e
    607e:	5ae3      	ldrh	r3, [r4, r3]
    6080:	021a      	lsls	r2, r3, #8
    6082:	0a1b      	lsrs	r3, r3, #8
    6084:	4313      	orrs	r3, r2
    6086:	aa04      	add	r2, sp, #16
    6088:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    608a:	9802      	ldr	r0, [sp, #8]
    608c:	4b16      	ldr	r3, [pc, #88]	; (60e8 <http_client_send_request+0x260>)
    608e:	4798      	blx	r3
    6090:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    6092:	2000      	movs	r0, #0
    6094:	5620      	ldrsb	r0, [r4, r0]
    6096:	2210      	movs	r2, #16
    6098:	a904      	add	r1, sp, #16
    609a:	4b14      	ldr	r3, [pc, #80]	; (60ec <http_client_send_request+0x264>)
    609c:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    609e:	2301      	movs	r3, #1
    60a0:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    60a2:	2300      	movs	r3, #0
    60a4:	9301      	str	r3, [sp, #4]
}
    60a6:	9801      	ldr	r0, [sp, #4]
    60a8:	b008      	add	sp, #32
    60aa:	bc04      	pop	{r2}
    60ac:	4692      	mov	sl, r2
    60ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60b0:	00011be0 	.word	0x00011be0
    60b4:	0000b6a9 	.word	0x0000b6a9
    60b8:	00011be8 	.word	0x00011be8
    60bc:	0000b69b 	.word	0x0000b69b
    60c0:	0000a889 	.word	0x0000a889
    60c4:	0000b661 	.word	0x0000b661
    60c8:	0000a8c1 	.word	0x0000a8c1
    60cc:	0000b651 	.word	0x0000b651
    60d0:	0000a8f7 	.word	0x0000a8f7
    60d4:	000058d1 	.word	0x000058d1
    60d8:	00004dd5 	.word	0x00004dd5
    60dc:	2000022c 	.word	0x2000022c
    60e0:	000059e9 	.word	0x000059e9
    60e4:	0000521d 	.word	0x0000521d
    60e8:	000051b1 	.word	0x000051b1
    60ec:	00004f59 	.word	0x00004f59

000060f0 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    60f0:	b510      	push	{r4, lr}
	if (module == NULL) {
    60f2:	2800      	cmp	r0, #0
    60f4:	d00d      	beq.n	6112 <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    60f6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    60f8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    60fa:	4291      	cmp	r1, r2
    60fc:	d20a      	bcs.n	6114 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    60fe:	1a52      	subs	r2, r2, r1
    6100:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    6102:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    6104:	469c      	mov	ip, r3
    6106:	4461      	add	r1, ip
	recv(module->sock,
    6108:	7800      	ldrb	r0, [r0, #0]
    610a:	b240      	sxtb	r0, r0
    610c:	2300      	movs	r3, #0
    610e:	4c04      	ldr	r4, [pc, #16]	; (6120 <_http_client_recv_packet+0x30>)
    6110:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    6112:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    6114:	218b      	movs	r1, #139	; 0x8b
    6116:	4249      	negs	r1, r1
    6118:	4b02      	ldr	r3, [pc, #8]	; (6124 <_http_client_recv_packet+0x34>)
    611a:	4798      	blx	r3
		return;
    611c:	e7f9      	b.n	6112 <_http_client_recv_packet+0x22>
    611e:	46c0      	nop			; (mov r8, r8)
    6120:	00005081 	.word	0x00005081
    6124:	000058d1 	.word	0x000058d1

00006128 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    6128:	b570      	push	{r4, r5, r6, lr}
    612a:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    612c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    612e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    6130:	1a5c      	subs	r4, r3, r1
    6132:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    6134:	2c00      	cmp	r4, #0
    6136:	dc02      	bgt.n	613e <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    6138:	2300      	movs	r3, #0
    613a:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    613c:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    613e:	0022      	movs	r2, r4
    6140:	4b01      	ldr	r3, [pc, #4]	; (6148 <_http_client_move_buffer+0x20>)
    6142:	4798      	blx	r3
		module->recved_size = remain;
    6144:	646c      	str	r4, [r5, #68]	; 0x44
    6146:	e7f9      	b.n	613c <_http_client_move_buffer+0x14>
    6148:	0000a8d3 	.word	0x0000a8d3

0000614c <_http_client_handle_header>:
{
    614c:	b5f0      	push	{r4, r5, r6, r7, lr}
    614e:	46ce      	mov	lr, r9
    6150:	b500      	push	{lr}
    6152:	b084      	sub	sp, #16
    6154:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    6156:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    6158:	4b62      	ldr	r3, [pc, #392]	; (62e4 <_http_client_handle_header+0x198>)
    615a:	4699      	mov	r9, r3
    615c:	e049      	b.n	61f2 <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    615e:	0021      	movs	r1, r4
    6160:	0038      	movs	r0, r7
    6162:	4b61      	ldr	r3, [pc, #388]	; (62e8 <_http_client_handle_header+0x19c>)
    6164:	4798      	blx	r3
			return 0;
    6166:	2600      	movs	r6, #0
}
    6168:	0030      	movs	r0, r6
    616a:	b004      	add	sp, #16
    616c:	bc04      	pop	{r2}
    616e:	4691      	mov	r9, r2
    6170:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    6172:	1ca1      	adds	r1, r4, #2
    6174:	0038      	movs	r0, r7
    6176:	4b5c      	ldr	r3, [pc, #368]	; (62e8 <_http_client_handle_header+0x19c>)
    6178:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    617a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    617c:	2b00      	cmp	r3, #0
    617e:	d00a      	beq.n	6196 <_http_client_handle_header+0x4a>
    6180:	22e4      	movs	r2, #228	; 0xe4
    6182:	5ab9      	ldrh	r1, [r7, r2]
    6184:	2900      	cmp	r1, #0
    6186:	d006      	beq.n	6196 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    6188:	3a08      	subs	r2, #8
    618a:	58b8      	ldr	r0, [r7, r2]
    618c:	2800      	cmp	r0, #0
    618e:	db07      	blt.n	61a0 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    6190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6192:	4290      	cmp	r0, r2
    6194:	dc10      	bgt.n	61b8 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    6196:	2201      	movs	r2, #1
    6198:	23d8      	movs	r3, #216	; 0xd8
    619a:	50fa      	str	r2, [r7, r3]
			return 1;
    619c:	2601      	movs	r6, #1
    619e:	e7e3      	b.n	6168 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    61a0:	aa01      	add	r2, sp, #4
    61a2:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    61a4:	2101      	movs	r1, #1
    61a6:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    61a8:	2100      	movs	r1, #0
    61aa:	20e0      	movs	r0, #224	; 0xe0
    61ac:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    61ae:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    61b0:	3102      	adds	r1, #2
    61b2:	0038      	movs	r0, r7
    61b4:	4798      	blx	r3
    61b6:	e7ee      	b.n	6196 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    61b8:	aa01      	add	r2, sp, #4
    61ba:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    61bc:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    61be:	2100      	movs	r1, #0
    61c0:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    61c2:	20e0      	movs	r0, #224	; 0xe0
    61c4:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    61c6:	3102      	adds	r1, #2
    61c8:	0038      	movs	r0, r7
    61ca:	4798      	blx	r3
    61cc:	e7e3      	b.n	6196 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    61ce:	0020      	movs	r0, r4
    61d0:	3010      	adds	r0, #16
    61d2:	4b46      	ldr	r3, [pc, #280]	; (62ec <_http_client_handle_header+0x1a0>)
    61d4:	4798      	blx	r3
    61d6:	23dc      	movs	r3, #220	; 0xdc
    61d8:	50f8      	str	r0, [r7, r3]
    61da:	e009      	b.n	61f0 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    61dc:	3201      	adds	r2, #1
    61de:	4295      	cmp	r5, r2
    61e0:	d006      	beq.n	61f0 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    61e2:	7813      	ldrb	r3, [r2, #0]
    61e4:	2b20      	cmp	r3, #32
    61e6:	d12b      	bne.n	6240 <_http_client_handle_header+0xf4>
    61e8:	e7f8      	b.n	61dc <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    61ea:	3a21      	subs	r2, #33	; 0x21
    61ec:	3389      	adds	r3, #137	; 0x89
    61ee:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    61f0:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    61f2:	493f      	ldr	r1, [pc, #252]	; (62f0 <_http_client_handle_header+0x1a4>)
    61f4:	0020      	movs	r0, r4
    61f6:	47c8      	blx	r9
    61f8:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    61fa:	d0b0      	beq.n	615e <_http_client_handle_header+0x12>
    61fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    61fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6200:	4694      	mov	ip, r2
    6202:	4463      	add	r3, ip
    6204:	4298      	cmp	r0, r3
    6206:	d2aa      	bcs.n	615e <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    6208:	2202      	movs	r2, #2
    620a:	4939      	ldr	r1, [pc, #228]	; (62f0 <_http_client_handle_header+0x1a4>)
    620c:	0020      	movs	r0, r4
    620e:	4b39      	ldr	r3, [pc, #228]	; (62f4 <_http_client_handle_header+0x1a8>)
    6210:	4798      	blx	r3
    6212:	2800      	cmp	r0, #0
    6214:	d0ad      	beq.n	6172 <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    6216:	2210      	movs	r2, #16
    6218:	4937      	ldr	r1, [pc, #220]	; (62f8 <_http_client_handle_header+0x1ac>)
    621a:	0020      	movs	r0, r4
    621c:	4b35      	ldr	r3, [pc, #212]	; (62f4 <_http_client_handle_header+0x1a8>)
    621e:	4798      	blx	r3
    6220:	2800      	cmp	r0, #0
    6222:	d0d4      	beq.n	61ce <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    6224:	2213      	movs	r2, #19
    6226:	4935      	ldr	r1, [pc, #212]	; (62fc <_http_client_handle_header+0x1b0>)
    6228:	0020      	movs	r0, r4
    622a:	4b32      	ldr	r3, [pc, #200]	; (62f4 <_http_client_handle_header+0x1a8>)
    622c:	4798      	blx	r3
    622e:	1e06      	subs	r6, r0, #0
    6230:	d110      	bne.n	6254 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    6232:	0022      	movs	r2, r4
    6234:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    6236:	4295      	cmp	r5, r2
    6238:	d9da      	bls.n	61f0 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    623a:	7ce3      	ldrb	r3, [r4, #19]
    623c:	2b20      	cmp	r3, #32
    623e:	d0cd      	beq.n	61dc <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    6240:	2220      	movs	r2, #32
    6242:	4393      	bics	r3, r2
    6244:	2b43      	cmp	r3, #67	; 0x43
    6246:	d0d0      	beq.n	61ea <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    6248:	2186      	movs	r1, #134	; 0x86
    624a:	4249      	negs	r1, r1
    624c:	0038      	movs	r0, r7
    624e:	4b2c      	ldr	r3, [pc, #176]	; (6300 <_http_client_handle_header+0x1b4>)
    6250:	4798      	blx	r3
					return 0;
    6252:	e789      	b.n	6168 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    6254:	220c      	movs	r2, #12
    6256:	492b      	ldr	r1, [pc, #172]	; (6304 <_http_client_handle_header+0x1b8>)
    6258:	0020      	movs	r0, r4
    625a:	4b26      	ldr	r3, [pc, #152]	; (62f4 <_http_client_handle_header+0x1a8>)
    625c:	4798      	blx	r3
    625e:	2800      	cmp	r0, #0
    6260:	d11d      	bne.n	629e <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    6262:	0022      	movs	r2, r4
    6264:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    6266:	4295      	cmp	r5, r2
    6268:	d9c2      	bls.n	61f0 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    626a:	7b23      	ldrb	r3, [r4, #12]
    626c:	2b20      	cmp	r3, #32
    626e:	d009      	beq.n	6284 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    6270:	2220      	movs	r2, #32
    6272:	4393      	bics	r3, r2
    6274:	2b4b      	cmp	r3, #75	; 0x4b
    6276:	d00c      	beq.n	6292 <_http_client_handle_header+0x146>
					module->permanent = 0;
    6278:	2241      	movs	r2, #65	; 0x41
    627a:	5cbb      	ldrb	r3, [r7, r2]
    627c:	2102      	movs	r1, #2
    627e:	438b      	bics	r3, r1
    6280:	54bb      	strb	r3, [r7, r2]
    6282:	e7b5      	b.n	61f0 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    6284:	3201      	adds	r2, #1
    6286:	4295      	cmp	r5, r2
    6288:	d0b2      	beq.n	61f0 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    628a:	7813      	ldrb	r3, [r2, #0]
    628c:	2b20      	cmp	r3, #32
    628e:	d1ef      	bne.n	6270 <_http_client_handle_header+0x124>
    6290:	e7f8      	b.n	6284 <_http_client_handle_header+0x138>
					module->permanent = 1;
    6292:	3221      	adds	r2, #33	; 0x21
    6294:	5cbb      	ldrb	r3, [r7, r2]
    6296:	2102      	movs	r1, #2
    6298:	430b      	orrs	r3, r1
    629a:	54bb      	strb	r3, [r7, r2]
    629c:	e7a8      	b.n	61f0 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    629e:	2205      	movs	r2, #5
    62a0:	4919      	ldr	r1, [pc, #100]	; (6308 <_http_client_handle_header+0x1bc>)
    62a2:	0020      	movs	r0, r4
    62a4:	4b13      	ldr	r3, [pc, #76]	; (62f4 <_http_client_handle_header+0x1a8>)
    62a6:	4798      	blx	r3
    62a8:	2800      	cmp	r0, #0
    62aa:	d1a1      	bne.n	61f0 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    62ac:	0020      	movs	r0, r4
    62ae:	3009      	adds	r0, #9
    62b0:	4b0e      	ldr	r3, [pc, #56]	; (62ec <_http_client_handle_header+0x1a0>)
    62b2:	4798      	blx	r3
    62b4:	23e4      	movs	r3, #228	; 0xe4
    62b6:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    62b8:	2200      	movs	r2, #0
    62ba:	3b08      	subs	r3, #8
    62bc:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    62be:	7963      	ldrb	r3, [r4, #5]
    62c0:	2b31      	cmp	r3, #49	; 0x31
    62c2:	d802      	bhi.n	62ca <_http_client_handle_header+0x17e>
    62c4:	79e3      	ldrb	r3, [r4, #7]
    62c6:	2b30      	cmp	r3, #48	; 0x30
    62c8:	d905      	bls.n	62d6 <_http_client_handle_header+0x18a>
				module->permanent = 1;
    62ca:	2241      	movs	r2, #65	; 0x41
    62cc:	5cbb      	ldrb	r3, [r7, r2]
    62ce:	2102      	movs	r1, #2
    62d0:	430b      	orrs	r3, r1
    62d2:	54bb      	strb	r3, [r7, r2]
    62d4:	e78c      	b.n	61f0 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    62d6:	2241      	movs	r2, #65	; 0x41
    62d8:	5cbb      	ldrb	r3, [r7, r2]
    62da:	2102      	movs	r1, #2
    62dc:	438b      	bics	r3, r1
    62de:	54bb      	strb	r3, [r7, r2]
    62e0:	e786      	b.n	61f0 <_http_client_handle_header+0xa4>
    62e2:	46c0      	nop			; (mov r8, r8)
    62e4:	0000b6cb 	.word	0x0000b6cb
    62e8:	00006129 	.word	0x00006129
    62ec:	0000a7fd 	.word	0x0000a7fd
    62f0:	000124bc 	.word	0x000124bc
    62f4:	0000b6a9 	.word	0x0000b6a9
    62f8:	00011bc0 	.word	0x00011bc0
    62fc:	00011ad0 	.word	0x00011ad0
    6300:	000058d1 	.word	0x000058d1
    6304:	00011ae4 	.word	0x00011ae4
    6308:	00011af4 	.word	0x00011af4

0000630c <_http_client_handle_entity>:
{
    630c:	b5f0      	push	{r4, r5, r6, r7, lr}
    630e:	46ce      	mov	lr, r9
    6310:	b500      	push	{lr}
    6312:	b086      	sub	sp, #24
    6314:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    6316:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    6318:	23dc      	movs	r3, #220	; 0xdc
    631a:	58c3      	ldr	r3, [r0, r3]
    631c:	2b00      	cmp	r3, #0
    631e:	db69      	blt.n	63f4 <_http_client_handle_entity+0xe8>
    6320:	6e02      	ldr	r2, [r0, #96]	; 0x60
    6322:	4293      	cmp	r3, r2
    6324:	dc2b      	bgt.n	637e <_http_client_handle_entity+0x72>
	return 0;
    6326:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    6328:	6c62      	ldr	r2, [r4, #68]	; 0x44
    632a:	4293      	cmp	r3, r2
    632c:	dc4e      	bgt.n	63cc <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    632e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    6330:	2e00      	cmp	r6, #0
    6332:	d003      	beq.n	633c <_http_client_handle_entity+0x30>
    6334:	22e4      	movs	r2, #228	; 0xe4
    6336:	5aa1      	ldrh	r1, [r4, r2]
    6338:	2900      	cmp	r1, #0
    633a:	d10e      	bne.n	635a <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    633c:	2300      	movs	r3, #0
    633e:	22d8      	movs	r2, #216	; 0xd8
    6340:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    6342:	320c      	adds	r2, #12
    6344:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    6346:	3341      	adds	r3, #65	; 0x41
    6348:	5ce3      	ldrb	r3, [r4, r3]
    634a:	079b      	lsls	r3, r3, #30
    634c:	d40f      	bmi.n	636e <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    634e:	2100      	movs	r1, #0
    6350:	0020      	movs	r0, r4
    6352:	4b71      	ldr	r3, [pc, #452]	; (6518 <_http_client_handle_entity+0x20c>)
    6354:	4798      	blx	r3
	return 0;
    6356:	2000      	movs	r0, #0
    6358:	e038      	b.n	63cc <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    635a:	aa03      	add	r2, sp, #12
    635c:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    635e:	2100      	movs	r1, #0
    6360:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    6362:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    6364:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    6366:	3102      	adds	r1, #2
    6368:	0020      	movs	r0, r4
    636a:	47b0      	blx	r6
    636c:	e7e6      	b.n	633c <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    636e:	23dc      	movs	r3, #220	; 0xdc
    6370:	58e1      	ldr	r1, [r4, r3]
    6372:	1869      	adds	r1, r5, r1
    6374:	0020      	movs	r0, r4
    6376:	4b69      	ldr	r3, [pc, #420]	; (651c <_http_client_handle_entity+0x210>)
    6378:	4798      	blx	r3
				return module->recved_size;
    637a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    637c:	e026      	b.n	63cc <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    637e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    6380:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    6382:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    6384:	21e0      	movs	r1, #224	; 0xe0
    6386:	5840      	ldr	r0, [r0, r1]
    6388:	4684      	mov	ip, r0
    638a:	4462      	add	r2, ip
    638c:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    638e:	4293      	cmp	r3, r2
    6390:	dc20      	bgt.n	63d4 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    6392:	2300      	movs	r3, #0
    6394:	22d8      	movs	r2, #216	; 0xd8
    6396:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    6398:	320c      	adds	r2, #12
    639a:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    639c:	3ae3      	subs	r2, #227	; 0xe3
    639e:	ab03      	add	r3, sp, #12
    63a0:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    63a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    63a4:	2b00      	cmp	r3, #0
    63a6:	d007      	beq.n	63b8 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    63a8:	ae03      	add	r6, sp, #12
    63aa:	0032      	movs	r2, r6
    63ac:	2103      	movs	r1, #3
    63ae:	0020      	movs	r0, r4
    63b0:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    63b2:	7a33      	ldrb	r3, [r6, #8]
    63b4:	2b01      	cmp	r3, #1
    63b6:	d103      	bne.n	63c0 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    63b8:	2341      	movs	r3, #65	; 0x41
    63ba:	5ce3      	ldrb	r3, [r4, r3]
    63bc:	079b      	lsls	r3, r3, #30
    63be:	d510      	bpl.n	63e2 <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    63c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    63c2:	18e9      	adds	r1, r5, r3
    63c4:	0020      	movs	r0, r4
    63c6:	4b55      	ldr	r3, [pc, #340]	; (651c <_http_client_handle_entity+0x210>)
    63c8:	4798      	blx	r3
	return 0;
    63ca:	2000      	movs	r0, #0
}
    63cc:	b006      	add	sp, #24
    63ce:	bc04      	pop	{r2}
    63d0:	4691      	mov	r9, r2
    63d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    63d4:	2200      	movs	r2, #0
    63d6:	ab03      	add	r3, sp, #12
    63d8:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    63da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    63dc:	2b00      	cmp	r3, #0
    63de:	d0ef      	beq.n	63c0 <_http_client_handle_entity+0xb4>
    63e0:	e7e2      	b.n	63a8 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    63e2:	484f      	ldr	r0, [pc, #316]	; (6520 <_http_client_handle_entity+0x214>)
    63e4:	4b4f      	ldr	r3, [pc, #316]	; (6524 <_http_client_handle_entity+0x218>)
    63e6:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    63e8:	2100      	movs	r1, #0
    63ea:	0020      	movs	r0, r4
    63ec:	4b4a      	ldr	r3, [pc, #296]	; (6518 <_http_client_handle_entity+0x20c>)
    63ee:	4798      	blx	r3
					return 0;
    63f0:	2000      	movs	r0, #0
    63f2:	e7eb      	b.n	63cc <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    63f4:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    63f6:	2300      	movs	r3, #0
    63f8:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    63fa:	26e0      	movs	r6, #224	; 0xe0
    63fc:	e00a      	b.n	6414 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    63fe:	2341      	movs	r3, #65	; 0x41
    6400:	5ce3      	ldrb	r3, [r4, r3]
    6402:	079b      	lsls	r3, r3, #30
    6404:	d51b      	bpl.n	643e <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    6406:	1ca9      	adds	r1, r5, #2
    6408:	0020      	movs	r0, r4
    640a:	4b44      	ldr	r3, [pc, #272]	; (651c <_http_client_handle_entity+0x210>)
    640c:	4798      	blx	r3
	} while(module->recved_size > 0);
    640e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6410:	2b00      	cmp	r3, #0
    6412:	d073      	beq.n	64fc <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    6414:	59a3      	ldr	r3, [r4, r6]
    6416:	2b00      	cmp	r3, #0
    6418:	db30      	blt.n	647c <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    641a:	d116      	bne.n	644a <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    641c:	22d8      	movs	r2, #216	; 0xd8
    641e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    6420:	320c      	adds	r2, #12
    6422:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    6424:	3ae3      	subs	r2, #227	; 0xe3
    6426:	4669      	mov	r1, sp
    6428:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    642a:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    642c:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    642e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6430:	2b00      	cmp	r3, #0
    6432:	d0e4      	beq.n	63fe <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    6434:	466a      	mov	r2, sp
    6436:	2103      	movs	r1, #3
    6438:	0020      	movs	r0, r4
    643a:	4798      	blx	r3
    643c:	e7df      	b.n	63fe <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    643e:	2100      	movs	r1, #0
    6440:	0020      	movs	r0, r4
    6442:	4b35      	ldr	r3, [pc, #212]	; (6518 <_http_client_handle_entity+0x20c>)
    6444:	4798      	blx	r3
	return 0;
    6446:	2000      	movs	r0, #0
    6448:	e7c0      	b.n	63cc <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    644a:	42bb      	cmp	r3, r7
    644c:	dcdf      	bgt.n	640e <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    644e:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    6450:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    6452:	2300      	movs	r3, #0
    6454:	466a      	mov	r2, sp
    6456:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    6458:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    645a:	2b00      	cmp	r3, #0
    645c:	d002      	beq.n	6464 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    645e:	2103      	movs	r1, #3
    6460:	0020      	movs	r0, r4
    6462:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    6464:	59a3      	ldr	r3, [r4, r6]
    6466:	1c99      	adds	r1, r3, #2
    6468:	1869      	adds	r1, r5, r1
    646a:	0020      	movs	r0, r4
    646c:	4b2b      	ldr	r3, [pc, #172]	; (651c <_http_client_handle_entity+0x210>)
    646e:	4798      	blx	r3
				length = (int)module->recved_size;
    6470:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    6472:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    6474:	2301      	movs	r3, #1
    6476:	425b      	negs	r3, r3
    6478:	51a3      	str	r3, [r4, r6]
    647a:	e7c8      	b.n	640e <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    647c:	2300      	movs	r3, #0
    647e:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    6480:	2f00      	cmp	r7, #0
    6482:	dd04      	ble.n	648e <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    6484:	782b      	ldrb	r3, [r5, #0]
    6486:	2b0a      	cmp	r3, #10
    6488:	d11c      	bne.n	64c4 <_http_client_handle_entity+0x1b8>
					buffer++;
    648a:	3501      	adds	r5, #1
					length--;
    648c:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    648e:	59a3      	ldr	r3, [r4, r6]
    6490:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6492:	4293      	cmp	r3, r2
    6494:	dc39      	bgt.n	650a <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    6496:	2f00      	cmp	r7, #0
    6498:	d1b9      	bne.n	640e <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    649a:	2201      	movs	r2, #1
    649c:	4252      	negs	r2, r2
    649e:	23e0      	movs	r3, #224	; 0xe0
    64a0:	50e2      	str	r2, [r4, r3]
    64a2:	e7d0      	b.n	6446 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    64a4:	001a      	movs	r2, r3
    64a6:	3a61      	subs	r2, #97	; 0x61
    64a8:	2a05      	cmp	r2, #5
    64aa:	d818      	bhi.n	64de <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    64ac:	59a2      	ldr	r2, [r4, r6]
    64ae:	0112      	lsls	r2, r2, #4
    64b0:	18d3      	adds	r3, r2, r3
    64b2:	3b61      	subs	r3, #97	; 0x61
    64b4:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    64b6:	3501      	adds	r5, #1
    64b8:	3f01      	subs	r7, #1
    64ba:	2f00      	cmp	r7, #0
    64bc:	d020      	beq.n	6500 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    64be:	782b      	ldrb	r3, [r5, #0]
    64c0:	2b0a      	cmp	r3, #10
    64c2:	d0e2      	beq.n	648a <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    64c4:	464a      	mov	r2, r9
    64c6:	2a00      	cmp	r2, #0
    64c8:	d1f5      	bne.n	64b6 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    64ca:	001a      	movs	r2, r3
    64cc:	3a30      	subs	r2, #48	; 0x30
    64ce:	2a09      	cmp	r2, #9
    64d0:	d8e8      	bhi.n	64a4 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    64d2:	59a2      	ldr	r2, [r4, r6]
    64d4:	0112      	lsls	r2, r2, #4
    64d6:	18d3      	adds	r3, r2, r3
    64d8:	3b30      	subs	r3, #48	; 0x30
    64da:	51a3      	str	r3, [r4, r6]
    64dc:	e7eb      	b.n	64b6 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    64de:	001a      	movs	r2, r3
    64e0:	3a41      	subs	r2, #65	; 0x41
    64e2:	2a05      	cmp	r2, #5
    64e4:	d805      	bhi.n	64f2 <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    64e6:	59a2      	ldr	r2, [r4, r6]
    64e8:	0112      	lsls	r2, r2, #4
    64ea:	18d3      	adds	r3, r2, r3
    64ec:	3b41      	subs	r3, #65	; 0x41
    64ee:	51a3      	str	r3, [r4, r6]
    64f0:	e7e1      	b.n	64b6 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    64f2:	3b3b      	subs	r3, #59	; 0x3b
    64f4:	425a      	negs	r2, r3
    64f6:	415a      	adcs	r2, r3
    64f8:	4691      	mov	r9, r2
    64fa:	e7dc      	b.n	64b6 <_http_client_handle_entity+0x1aa>
	return 0;
    64fc:	2000      	movs	r0, #0
    64fe:	e765      	b.n	63cc <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    6500:	23e0      	movs	r3, #224	; 0xe0
    6502:	58e3      	ldr	r3, [r4, r3]
    6504:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6506:	4293      	cmp	r3, r2
    6508:	ddc7      	ble.n	649a <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    650a:	218b      	movs	r1, #139	; 0x8b
    650c:	4249      	negs	r1, r1
    650e:	0020      	movs	r0, r4
    6510:	4b01      	ldr	r3, [pc, #4]	; (6518 <_http_client_handle_entity+0x20c>)
    6512:	4798      	blx	r3
    6514:	e797      	b.n	6446 <_http_client_handle_entity+0x13a>
    6516:	46c0      	nop			; (mov r8, r8)
    6518:	000058d1 	.word	0x000058d1
    651c:	00006129 	.word	0x00006129
    6520:	00011acc 	.word	0x00011acc
    6524:	0000b455 	.word	0x0000b455

00006528 <_http_client_handle_response>:
{
    6528:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    652a:	23d8      	movs	r3, #216	; 0xd8
    652c:	58c3      	ldr	r3, [r0, r3]
    652e:	2b00      	cmp	r3, #0
    6530:	d003      	beq.n	653a <_http_client_handle_response+0x12>
    6532:	2b01      	cmp	r3, #1
    6534:	d004      	beq.n	6540 <_http_client_handle_response+0x18>
	return 0;
    6536:	2000      	movs	r0, #0
    6538:	e001      	b.n	653e <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    653a:	4b03      	ldr	r3, [pc, #12]	; (6548 <_http_client_handle_response+0x20>)
    653c:	4798      	blx	r3
}
    653e:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    6540:	4b02      	ldr	r3, [pc, #8]	; (654c <_http_client_handle_response+0x24>)
    6542:	4798      	blx	r3
    6544:	e7fb      	b.n	653e <_http_client_handle_response+0x16>
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	0000614d 	.word	0x0000614d
    654c:	0000630d 	.word	0x0000630d

00006550 <_http_client_recved_packet>:
{
    6550:	b570      	push	{r4, r5, r6, lr}
    6552:	0004      	movs	r4, r0
	module->recved_size += read_len;
    6554:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6556:	469c      	mov	ip, r3
    6558:	4461      	add	r1, ip
    655a:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    655c:	2358      	movs	r3, #88	; 0x58
    655e:	5ac3      	ldrh	r3, [r0, r3]
    6560:	2b00      	cmp	r3, #0
    6562:	d105      	bne.n	6570 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    6564:	4d05      	ldr	r5, [pc, #20]	; (657c <_http_client_recved_packet+0x2c>)
    6566:	0020      	movs	r0, r4
    6568:	47a8      	blx	r5
    656a:	2800      	cmp	r0, #0
    656c:	d1fb      	bne.n	6566 <_http_client_recved_packet+0x16>
}
    656e:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    6570:	6c81      	ldr	r1, [r0, #72]	; 0x48
    6572:	6d40      	ldr	r0, [r0, #84]	; 0x54
    6574:	4b02      	ldr	r3, [pc, #8]	; (6580 <_http_client_recved_packet+0x30>)
    6576:	4798      	blx	r3
    6578:	e7f4      	b.n	6564 <_http_client_recved_packet+0x14>
    657a:	46c0      	nop			; (mov r8, r8)
    657c:	00006529 	.word	0x00006529
    6580:	000068fd 	.word	0x000068fd

00006584 <http_client_socket_event_handler>:
{
    6584:	b510      	push	{r4, lr}
    6586:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    6588:	0080      	lsls	r0, r0, #2
    658a:	4b65      	ldr	r3, [pc, #404]	; (6720 <http_client_socket_event_handler+0x19c>)
    658c:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    658e:	2c00      	cmp	r4, #0
    6590:	d006      	beq.n	65a0 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    6592:	2906      	cmp	r1, #6
    6594:	d051      	beq.n	663a <http_client_socket_event_handler+0xb6>
    6596:	2907      	cmp	r1, #7
    6598:	d100      	bne.n	659c <http_client_socket_event_handler+0x18>
    659a:	e08a      	b.n	66b2 <http_client_socket_event_handler+0x12e>
    659c:	2905      	cmp	r1, #5
    659e:	d001      	beq.n	65a4 <http_client_socket_event_handler+0x20>
}
    65a0:	b004      	add	sp, #16
    65a2:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    65a4:	2301      	movs	r3, #1
    65a6:	56d3      	ldrsb	r3, [r2, r3]
    65a8:	1e1a      	subs	r2, r3, #0
    65aa:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    65ac:	db15      	blt.n	65da <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    65ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    65b0:	2b00      	cmp	r3, #0
    65b2:	d003      	beq.n	65bc <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    65b4:	aa01      	add	r2, sp, #4
    65b6:	2100      	movs	r1, #0
    65b8:	0020      	movs	r0, r4
    65ba:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    65bc:	2303      	movs	r3, #3
    65be:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    65c0:	3355      	adds	r3, #85	; 0x55
    65c2:	5ae2      	ldrh	r2, [r4, r3]
    65c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    65c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    65c8:	4b56      	ldr	r3, [pc, #344]	; (6724 <http_client_socket_event_handler+0x1a0>)
    65ca:	4798      	blx	r3
    		_http_client_recv_packet(module);
    65cc:	0020      	movs	r0, r4
    65ce:	4b56      	ldr	r3, [pc, #344]	; (6728 <http_client_socket_event_handler+0x1a4>)
    65d0:	4798      	blx	r3
			_http_client_request(module);
    65d2:	0020      	movs	r0, r4
    65d4:	4b55      	ldr	r3, [pc, #340]	; (672c <http_client_socket_event_handler+0x1a8>)
    65d6:	4798      	blx	r3
    65d8:	e7e2      	b.n	65a0 <http_client_socket_event_handler+0x1c>
	switch (err) {
    65da:	330e      	adds	r3, #14
    65dc:	b2d9      	uxtb	r1, r3
    65de:	290e      	cmp	r1, #14
    65e0:	d81e      	bhi.n	6620 <http_client_socket_event_handler+0x9c>
    65e2:	008b      	lsls	r3, r1, #2
    65e4:	4952      	ldr	r1, [pc, #328]	; (6730 <http_client_socket_event_handler+0x1ac>)
    65e6:	58cb      	ldr	r3, [r1, r3]
    65e8:	469f      	mov	pc, r3
			return -ENOENT;
    65ea:	2102      	movs	r1, #2
    65ec:	4249      	negs	r1, r1
    65ee:	e01d      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    65f0:	2170      	movs	r1, #112	; 0x70
    65f2:	4249      	negs	r1, r1
    65f4:	e01a      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    65f6:	210c      	movs	r1, #12
    65f8:	4249      	negs	r1, r1
    65fa:	e017      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    65fc:	2116      	movs	r1, #22
    65fe:	4249      	negs	r1, r1
    6600:	e014      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    6602:	210c      	movs	r1, #12
    6604:	4249      	negs	r1, r1
    6606:	e011      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    6608:	2179      	movs	r1, #121	; 0x79
    660a:	4249      	negs	r1, r1
    660c:	e00e      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    660e:	2168      	movs	r1, #104	; 0x68
    6610:	4249      	negs	r1, r1
    6612:	e00b      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    6614:	210b      	movs	r1, #11
    6616:	4249      	negs	r1, r1
    6618:	e008      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    661a:	2110      	movs	r1, #16
    661c:	4249      	negs	r1, r1
    661e:	e005      	b.n	662c <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    6620:	2a00      	cmp	r2, #0
    6622:	db07      	blt.n	6634 <http_client_socket_event_handler+0xb0>
			return 0;
    6624:	2100      	movs	r1, #0
    6626:	e001      	b.n	662c <http_client_socket_event_handler+0xa8>
			return -EIO;
    6628:	2105      	movs	r1, #5
    662a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    662c:	0020      	movs	r0, r4
    662e:	4b41      	ldr	r3, [pc, #260]	; (6734 <http_client_socket_event_handler+0x1b0>)
    6630:	4798      	blx	r3
    6632:	e7b5      	b.n	65a0 <http_client_socket_event_handler+0x1c>
				return -EIO;
    6634:	2105      	movs	r1, #5
    6636:	4249      	negs	r1, r1
    6638:	e7f8      	b.n	662c <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    663a:	2304      	movs	r3, #4
    663c:	5ed1      	ldrsh	r1, [r2, r3]
    663e:	2900      	cmp	r1, #0
    6640:	dd06      	ble.n	6650 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    6642:	0020      	movs	r0, r4
    6644:	4b3c      	ldr	r3, [pc, #240]	; (6738 <http_client_socket_event_handler+0x1b4>)
    6646:	4798      	blx	r3
		_http_client_recv_packet(module);
    6648:	0020      	movs	r0, r4
    664a:	4b37      	ldr	r3, [pc, #220]	; (6728 <http_client_socket_event_handler+0x1a4>)
    664c:	4798      	blx	r3
		break;
    664e:	e7a7      	b.n	65a0 <http_client_socket_event_handler+0x1c>
	switch (err) {
    6650:	000b      	movs	r3, r1
    6652:	330e      	adds	r3, #14
    6654:	b29a      	uxth	r2, r3
    6656:	2a0e      	cmp	r2, #14
    6658:	d81e      	bhi.n	6698 <http_client_socket_event_handler+0x114>
    665a:	0093      	lsls	r3, r2, #2
    665c:	4a37      	ldr	r2, [pc, #220]	; (673c <http_client_socket_event_handler+0x1b8>)
    665e:	58d3      	ldr	r3, [r2, r3]
    6660:	469f      	mov	pc, r3
			return -ENOENT;
    6662:	2102      	movs	r1, #2
    6664:	4249      	negs	r1, r1
    6666:	e01d      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    6668:	2170      	movs	r1, #112	; 0x70
    666a:	4249      	negs	r1, r1
    666c:	e01a      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    666e:	210c      	movs	r1, #12
    6670:	4249      	negs	r1, r1
    6672:	e017      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -EINVAL;
    6674:	2116      	movs	r1, #22
    6676:	4249      	negs	r1, r1
    6678:	e014      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    667a:	210c      	movs	r1, #12
    667c:	4249      	negs	r1, r1
    667e:	e011      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    6680:	2179      	movs	r1, #121	; 0x79
    6682:	4249      	negs	r1, r1
    6684:	e00e      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    6686:	2168      	movs	r1, #104	; 0x68
    6688:	4249      	negs	r1, r1
    668a:	e00b      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    668c:	210b      	movs	r1, #11
    668e:	4249      	negs	r1, r1
    6690:	e008      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    6692:	2110      	movs	r1, #16
    6694:	4249      	negs	r1, r1
    6696:	e005      	b.n	66a4 <http_client_socket_event_handler+0x120>
			if (err < 0) {
    6698:	2900      	cmp	r1, #0
    669a:	db07      	blt.n	66ac <http_client_socket_event_handler+0x128>
			return 0;
    669c:	2100      	movs	r1, #0
    669e:	e001      	b.n	66a4 <http_client_socket_event_handler+0x120>
			return -EIO;
    66a0:	2105      	movs	r1, #5
    66a2:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    66a4:	0020      	movs	r0, r4
    66a6:	4b23      	ldr	r3, [pc, #140]	; (6734 <http_client_socket_event_handler+0x1b0>)
    66a8:	4798      	blx	r3
    66aa:	e7cd      	b.n	6648 <http_client_socket_event_handler+0xc4>
				return -EIO;
    66ac:	2105      	movs	r1, #5
    66ae:	4249      	negs	r1, r1
    66b0:	e7f8      	b.n	66a4 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    66b2:	2300      	movs	r3, #0
    66b4:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    66b6:	2b00      	cmp	r3, #0
    66b8:	db08      	blt.n	66cc <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    66ba:	0020      	movs	r0, r4
    66bc:	4b1b      	ldr	r3, [pc, #108]	; (672c <http_client_socket_event_handler+0x1a8>)
    66be:	4798      	blx	r3
		module->sending = 0;
    66c0:	2241      	movs	r2, #65	; 0x41
    66c2:	5ca3      	ldrb	r3, [r4, r2]
    66c4:	2101      	movs	r1, #1
    66c6:	438b      	bics	r3, r1
    66c8:	54a3      	strb	r3, [r4, r2]
    	break;
    66ca:	e769      	b.n	65a0 <http_client_socket_event_handler+0x1c>
	switch (err) {
    66cc:	330e      	adds	r3, #14
    66ce:	b29a      	uxth	r2, r3
    66d0:	2a0d      	cmp	r2, #13
    66d2:	d81e      	bhi.n	6712 <http_client_socket_event_handler+0x18e>
    66d4:	0093      	lsls	r3, r2, #2
    66d6:	4a1a      	ldr	r2, [pc, #104]	; (6740 <http_client_socket_event_handler+0x1bc>)
    66d8:	58d3      	ldr	r3, [r2, r3]
    66da:	469f      	mov	pc, r3
			return -ENOENT;
    66dc:	2102      	movs	r1, #2
    66de:	4249      	negs	r1, r1
    66e0:	e019      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    66e2:	2170      	movs	r1, #112	; 0x70
    66e4:	4249      	negs	r1, r1
    66e6:	e016      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    66e8:	210c      	movs	r1, #12
    66ea:	4249      	negs	r1, r1
    66ec:	e013      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -EINVAL;
    66ee:	2116      	movs	r1, #22
    66f0:	4249      	negs	r1, r1
    66f2:	e010      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    66f4:	210c      	movs	r1, #12
    66f6:	4249      	negs	r1, r1
    66f8:	e00d      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    66fa:	2179      	movs	r1, #121	; 0x79
    66fc:	4249      	negs	r1, r1
    66fe:	e00a      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    6700:	2168      	movs	r1, #104	; 0x68
    6702:	4249      	negs	r1, r1
    6704:	e007      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    6706:	210b      	movs	r1, #11
    6708:	4249      	negs	r1, r1
    670a:	e004      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    670c:	2110      	movs	r1, #16
    670e:	4249      	negs	r1, r1
    6710:	e001      	b.n	6716 <http_client_socket_event_handler+0x192>
			return -EIO;
    6712:	2105      	movs	r1, #5
    6714:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    6716:	0020      	movs	r0, r4
    6718:	4b06      	ldr	r3, [pc, #24]	; (6734 <http_client_socket_event_handler+0x1b0>)
    671a:	4798      	blx	r3
    671c:	e7d0      	b.n	66c0 <http_client_socket_event_handler+0x13c>
    671e:	46c0      	nop			; (mov r8, r8)
    6720:	2000022c 	.word	0x2000022c
    6724:	000068d1 	.word	0x000068d1
    6728:	000060f1 	.word	0x000060f1
    672c:	000059e9 	.word	0x000059e9
    6730:	00011a0c 	.word	0x00011a0c
    6734:	000058d1 	.word	0x000058d1
    6738:	00006551 	.word	0x00006551
    673c:	00011a48 	.word	0x00011a48
    6740:	00011a84 	.word	0x00011a84

00006744 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    6744:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    6746:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    6748:	2200      	movs	r2, #0
    674a:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    674c:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    674e:	9b00      	ldr	r3, [sp, #0]
    6750:	60c3      	str	r3, [r0, #12]
}
    6752:	4770      	bx	lr

00006754 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    6754:	b510      	push	{r4, lr}
    6756:	0004      	movs	r4, r0
	if(writer->written > 0) {
    6758:	6842      	ldr	r2, [r0, #4]
    675a:	2a00      	cmp	r2, #0
    675c:	d100      	bne.n	6760 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    675e:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    6760:	6901      	ldr	r1, [r0, #16]
    6762:	68c0      	ldr	r0, [r0, #12]
    6764:	68a3      	ldr	r3, [r4, #8]
    6766:	4798      	blx	r3
		writer->written = 0;
    6768:	2300      	movs	r3, #0
    676a:	6063      	str	r3, [r4, #4]
}
    676c:	e7f7      	b.n	675e <stream_writer_send_remain+0xa>
	...

00006770 <stream_writer_send_8>:
{
    6770:	b570      	push	{r4, r5, r6, lr}
    6772:	0004      	movs	r4, r0
    6774:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    6776:	6803      	ldr	r3, [r0, #0]
    6778:	6842      	ldr	r2, [r0, #4]
    677a:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    677c:	2b00      	cmp	r3, #0
    677e:	dd05      	ble.n	678c <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    6780:	6922      	ldr	r2, [r4, #16]
    6782:	6863      	ldr	r3, [r4, #4]
    6784:	1c59      	adds	r1, r3, #1
    6786:	6061      	str	r1, [r4, #4]
    6788:	54d5      	strb	r5, [r2, r3]
}
    678a:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    678c:	4b01      	ldr	r3, [pc, #4]	; (6794 <stream_writer_send_8+0x24>)
    678e:	4798      	blx	r3
    6790:	e7f6      	b.n	6780 <stream_writer_send_8+0x10>
    6792:	46c0      	nop			; (mov r8, r8)
    6794:	00006755 	.word	0x00006755

00006798 <stream_writer_send_buffer>:
{
    6798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    679a:	0006      	movs	r6, r0
    679c:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    679e:	2a00      	cmp	r2, #0
    67a0:	d008      	beq.n	67b4 <stream_writer_send_buffer+0x1c>
    67a2:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    67a4:	4f04      	ldr	r7, [pc, #16]	; (67b8 <stream_writer_send_buffer+0x20>)
    67a6:	2100      	movs	r1, #0
    67a8:	5661      	ldrsb	r1, [r4, r1]
    67aa:	0030      	movs	r0, r6
    67ac:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    67ae:	3401      	adds	r4, #1
    67b0:	42a5      	cmp	r5, r4
    67b2:	d1f8      	bne.n	67a6 <stream_writer_send_buffer+0xe>
}
    67b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    67b6:	46c0      	nop			; (mov r8, r8)
    67b8:	00006771 	.word	0x00006771

000067bc <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    67bc:	4a02      	ldr	r2, [pc, #8]	; (67c8 <sw_timer_tcc_callback+0xc>)
    67be:	6813      	ldr	r3, [r2, #0]
    67c0:	3301      	adds	r3, #1
    67c2:	6013      	str	r3, [r2, #0]
}
    67c4:	4770      	bx	lr
    67c6:	46c0      	nop			; (mov r8, r8)
    67c8:	20000248 	.word	0x20000248

000067cc <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    67cc:	2364      	movs	r3, #100	; 0x64
    67ce:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    67d0:	2300      	movs	r3, #0
    67d2:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    67d4:	7043      	strb	r3, [r0, #1]
}
    67d6:	4770      	bx	lr

000067d8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    67d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    67da:	46c6      	mov	lr, r8
    67dc:	b500      	push	{lr}
    67de:	b0ac      	sub	sp, #176	; 0xb0
    67e0:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    67e2:	466e      	mov	r6, sp
    67e4:	4b1d      	ldr	r3, [pc, #116]	; (685c <sw_timer_init+0x84>)
    67e6:	466a      	mov	r2, sp
    67e8:	cb92      	ldmia	r3!, {r1, r4, r7}
    67ea:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    67ec:	886b      	ldrh	r3, [r5, #2]
    67ee:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    67f0:	3014      	adds	r0, #20
    67f2:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    67f4:	782b      	ldrb	r3, [r5, #0]
    67f6:	009b      	lsls	r3, r3, #2
    67f8:	5999      	ldr	r1, [r3, r6]
    67fa:	0017      	movs	r7, r2
    67fc:	0010      	movs	r0, r2
    67fe:	4b18      	ldr	r3, [pc, #96]	; (6860 <sw_timer_init+0x88>)
    6800:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6802:	2000      	movs	r0, #0
    6804:	4b17      	ldr	r3, [pc, #92]	; (6864 <sw_timer_init+0x8c>)
    6806:	4798      	blx	r3
    6808:	4b17      	ldr	r3, [pc, #92]	; (6868 <sw_timer_init+0x90>)
    680a:	7a1b      	ldrb	r3, [r3, #8]
    680c:	b2db      	uxtb	r3, r3
    680e:	40d8      	lsrs	r0, r3
    6810:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    6812:	8869      	ldrh	r1, [r5, #2]
    6814:	20fa      	movs	r0, #250	; 0xfa
    6816:	0200      	lsls	r0, r0, #8
    6818:	4b14      	ldr	r3, [pc, #80]	; (686c <sw_timer_init+0x94>)
    681a:	4798      	blx	r3
    681c:	0001      	movs	r1, r0
    681e:	4640      	mov	r0, r8
    6820:	4b13      	ldr	r3, [pc, #76]	; (6870 <sw_timer_init+0x98>)
    6822:	4798      	blx	r3
    6824:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    6826:	2305      	movs	r3, #5
    6828:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    682a:	782b      	ldrb	r3, [r5, #0]
    682c:	009b      	lsls	r3, r3, #2
    682e:	5999      	ldr	r1, [r3, r6]
    6830:	003a      	movs	r2, r7
    6832:	0020      	movs	r0, r4
    6834:	4b0f      	ldr	r3, [pc, #60]	; (6874 <sw_timer_init+0x9c>)
    6836:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    6838:	786a      	ldrb	r2, [r5, #1]
    683a:	3208      	adds	r2, #8
    683c:	b2d2      	uxtb	r2, r2
    683e:	490e      	ldr	r1, [pc, #56]	; (6878 <sw_timer_init+0xa0>)
    6840:	0020      	movs	r0, r4
    6842:	4b0e      	ldr	r3, [pc, #56]	; (687c <sw_timer_init+0xa4>)
    6844:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    6846:	7869      	ldrb	r1, [r5, #1]
    6848:	3108      	adds	r1, #8
    684a:	b2c9      	uxtb	r1, r1
    684c:	0020      	movs	r0, r4
    684e:	4b0c      	ldr	r3, [pc, #48]	; (6880 <sw_timer_init+0xa8>)
    6850:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    6852:	b02c      	add	sp, #176	; 0xb0
    6854:	bc04      	pop	{r2}
    6856:	4690      	mov	r8, r2
    6858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    685a:	46c0      	nop			; (mov r8, r8)
    685c:	00011bf4 	.word	0x00011bf4
    6860:	00006999 	.word	0x00006999
    6864:	0000a1e5 	.word	0x0000a1e5
    6868:	40000400 	.word	0x40000400
    686c:	0000da2d 	.word	0x0000da2d
    6870:	0000d919 	.word	0x0000d919
    6874:	00006ae5 	.word	0x00006ae5
    6878:	000067bd 	.word	0x000067bd
    687c:	00006ef1 	.word	0x00006ef1
    6880:	00006f09 	.word	0x00006f09

00006884 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    6884:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    6886:	2102      	movs	r1, #2
    6888:	6893      	ldr	r3, [r2, #8]
    688a:	4219      	tst	r1, r3
    688c:	d1fc      	bne.n	6888 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    688e:	6813      	ldr	r3, [r2, #0]
    6890:	2102      	movs	r1, #2
    6892:	430b      	orrs	r3, r1
    6894:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    6896:	4770      	bx	lr

00006898 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    6898:	b570      	push	{r4, r5, r6, lr}
    689a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    689c:	7805      	ldrb	r5, [r0, #0]
    689e:	07e8      	lsls	r0, r5, #31
    68a0:	d502      	bpl.n	68a8 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    68a2:	2001      	movs	r0, #1
    68a4:	4240      	negs	r0, r0
}
    68a6:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    68a8:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    68aa:	0029      	movs	r1, r5
    68ac:	2002      	movs	r0, #2
    68ae:	4381      	bics	r1, r0
    68b0:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    68b2:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    68b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    68b6:	0018      	movs	r0, r3
    68b8:	4b04      	ldr	r3, [pc, #16]	; (68cc <sw_timer_register_callback+0x34>)
    68ba:	4798      	blx	r3
    68bc:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    68be:	7823      	ldrb	r3, [r4, #0]
    68c0:	2201      	movs	r2, #1
    68c2:	4313      	orrs	r3, r2
    68c4:	7023      	strb	r3, [r4, #0]
			return index;
    68c6:	2000      	movs	r0, #0
    68c8:	e7ed      	b.n	68a6 <sw_timer_register_callback+0xe>
    68ca:	46c0      	nop			; (mov r8, r8)
    68cc:	0000d919 	.word	0x0000d919

000068d0 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    68d0:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    68d2:	008b      	lsls	r3, r1, #2
    68d4:	185d      	adds	r5, r3, r1
    68d6:	00ad      	lsls	r5, r5, #2
    68d8:	5c29      	ldrb	r1, [r5, r0]
    68da:	2602      	movs	r6, #2
    68dc:	4331      	orrs	r1, r6
    68de:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    68e0:	1944      	adds	r4, r0, r5
    68e2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    68e4:	0010      	movs	r0, r2
    68e6:	4b03      	ldr	r3, [pc, #12]	; (68f4 <sw_timer_enable_callback+0x24>)
    68e8:	4798      	blx	r3
    68ea:	4b03      	ldr	r3, [pc, #12]	; (68f8 <sw_timer_enable_callback+0x28>)
    68ec:	681b      	ldr	r3, [r3, #0]
    68ee:	18c0      	adds	r0, r0, r3
    68f0:	6120      	str	r0, [r4, #16]
}
    68f2:	bd70      	pop	{r4, r5, r6, pc}
    68f4:	0000d919 	.word	0x0000d919
    68f8:	20000248 	.word	0x20000248

000068fc <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    68fc:	008b      	lsls	r3, r1, #2
    68fe:	1859      	adds	r1, r3, r1
    6900:	0089      	lsls	r1, r1, #2
    6902:	5c0b      	ldrb	r3, [r1, r0]
    6904:	2202      	movs	r2, #2
    6906:	4393      	bics	r3, r2
    6908:	540b      	strb	r3, [r1, r0]
}
    690a:	4770      	bx	lr

0000690c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    690c:	b570      	push	{r4, r5, r6, lr}
    690e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    6910:	7803      	ldrb	r3, [r0, #0]
    6912:	07db      	lsls	r3, r3, #31
    6914:	d507      	bpl.n	6926 <sw_timer_task+0x1a>
    6916:	7803      	ldrb	r3, [r0, #0]
    6918:	079b      	lsls	r3, r3, #30
    691a:	d504      	bpl.n	6926 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    691c:	4b10      	ldr	r3, [pc, #64]	; (6960 <sw_timer_task+0x54>)
    691e:	681a      	ldr	r2, [r3, #0]
    6920:	6903      	ldr	r3, [r0, #16]
    6922:	1a9b      	subs	r3, r3, r2
    6924:	d400      	bmi.n	6928 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    6926:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    6928:	7803      	ldrb	r3, [r0, #0]
    692a:	075b      	lsls	r3, r3, #29
    692c:	d4fb      	bmi.n	6926 <sw_timer_task+0x1a>
				handler->busy = 1;
    692e:	7803      	ldrb	r3, [r0, #0]
    6930:	2104      	movs	r1, #4
    6932:	430b      	orrs	r3, r1
    6934:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    6936:	68c3      	ldr	r3, [r0, #12]
    6938:	2b00      	cmp	r3, #0
    693a:	d00b      	beq.n	6954 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    693c:	18d2      	adds	r2, r2, r3
    693e:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    6940:	68a2      	ldr	r2, [r4, #8]
    6942:	2100      	movs	r1, #0
    6944:	0020      	movs	r0, r4
    6946:	6865      	ldr	r5, [r4, #4]
    6948:	47a8      	blx	r5
				handler->busy = 0;
    694a:	7823      	ldrb	r3, [r4, #0]
    694c:	2204      	movs	r2, #4
    694e:	4393      	bics	r3, r2
    6950:	7023      	strb	r3, [r4, #0]
}
    6952:	e7e8      	b.n	6926 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    6954:	7802      	ldrb	r2, [r0, #0]
    6956:	2102      	movs	r1, #2
    6958:	438a      	bics	r2, r1
    695a:	7002      	strb	r2, [r0, #0]
    695c:	e7f0      	b.n	6940 <sw_timer_task+0x34>
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	20000248 	.word	0x20000248

00006964 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    6964:	4b09      	ldr	r3, [pc, #36]	; (698c <_tcc_get_inst_index+0x28>)
    6966:	4298      	cmp	r0, r3
    6968:	d00c      	beq.n	6984 <_tcc_get_inst_index+0x20>
    696a:	4b09      	ldr	r3, [pc, #36]	; (6990 <_tcc_get_inst_index+0x2c>)
    696c:	4298      	cmp	r0, r3
    696e:	d007      	beq.n	6980 <_tcc_get_inst_index+0x1c>
    6970:	4a08      	ldr	r2, [pc, #32]	; (6994 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6972:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    6974:	4290      	cmp	r0, r2
    6976:	d001      	beq.n	697c <_tcc_get_inst_index+0x18>
}
    6978:	0018      	movs	r0, r3
    697a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    697c:	3302      	adds	r3, #2
    697e:	e002      	b.n	6986 <_tcc_get_inst_index+0x22>
    6980:	2301      	movs	r3, #1
    6982:	e000      	b.n	6986 <_tcc_get_inst_index+0x22>
    6984:	2300      	movs	r3, #0
			return i;
    6986:	b2db      	uxtb	r3, r3
    6988:	e7f6      	b.n	6978 <_tcc_get_inst_index+0x14>
    698a:	46c0      	nop			; (mov r8, r8)
    698c:	42002000 	.word	0x42002000
    6990:	42002400 	.word	0x42002400
    6994:	42002800 	.word	0x42002800

00006998 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    6998:	b510      	push	{r4, lr}
    699a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    699c:	0008      	movs	r0, r1
    699e:	4b4f      	ldr	r3, [pc, #316]	; (6adc <tcc_get_config_defaults+0x144>)
    69a0:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    69a2:	2300      	movs	r3, #0
    69a4:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    69a6:	0080      	lsls	r0, r0, #2
    69a8:	4a4d      	ldr	r2, [pc, #308]	; (6ae0 <tcc_get_config_defaults+0x148>)
    69aa:	5882      	ldr	r2, [r0, r2]
    69ac:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    69ae:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    69b0:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    69b2:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    69b4:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    69b6:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    69b8:	61e3      	str	r3, [r4, #28]
    69ba:	6223      	str	r3, [r4, #32]
    69bc:	6263      	str	r3, [r4, #36]	; 0x24
    69be:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    69c0:	7523      	strb	r3, [r4, #20]
    69c2:	7563      	strb	r3, [r4, #21]
    69c4:	75a3      	strb	r3, [r4, #22]
    69c6:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    69c8:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    69ca:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    69cc:	7423      	strb	r3, [r4, #16]
    69ce:	7463      	strb	r3, [r4, #17]
    69d0:	74a3      	strb	r3, [r4, #18]
    69d2:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    69d4:	222c      	movs	r2, #44	; 0x2c
    69d6:	54a3      	strb	r3, [r4, r2]
    69d8:	3201      	adds	r2, #1
    69da:	54a3      	strb	r3, [r4, r2]
    69dc:	3201      	adds	r2, #1
    69de:	54a3      	strb	r3, [r4, r2]
    69e0:	3201      	adds	r2, #1
    69e2:	54a3      	strb	r3, [r4, r2]
    69e4:	3201      	adds	r2, #1
    69e6:	54a3      	strb	r3, [r4, r2]
    69e8:	3201      	adds	r2, #1
    69ea:	54a3      	strb	r3, [r4, r2]
    69ec:	3201      	adds	r2, #1
    69ee:	54a3      	strb	r3, [r4, r2]
    69f0:	3201      	adds	r2, #1
    69f2:	54a3      	strb	r3, [r4, r2]
    69f4:	3201      	adds	r2, #1
    69f6:	54a3      	strb	r3, [r4, r2]
    69f8:	3201      	adds	r2, #1
    69fa:	54a3      	strb	r3, [r4, r2]
    69fc:	3201      	adds	r2, #1
    69fe:	54a3      	strb	r3, [r4, r2]
    6a00:	3201      	adds	r2, #1
    6a02:	54a3      	strb	r3, [r4, r2]
    6a04:	3201      	adds	r2, #1
    6a06:	54a3      	strb	r3, [r4, r2]
    6a08:	3201      	adds	r2, #1
    6a0a:	54a3      	strb	r3, [r4, r2]
    6a0c:	3201      	adds	r2, #1
    6a0e:	54a3      	strb	r3, [r4, r2]
    6a10:	3201      	adds	r2, #1
    6a12:	54a3      	strb	r3, [r4, r2]
    6a14:	3201      	adds	r2, #1
    6a16:	54a3      	strb	r3, [r4, r2]
    6a18:	3201      	adds	r2, #1
    6a1a:	54a3      	strb	r3, [r4, r2]
    6a1c:	3201      	adds	r2, #1
    6a1e:	54a3      	strb	r3, [r4, r2]
    6a20:	3201      	adds	r2, #1
    6a22:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    6a24:	3201      	adds	r2, #1
    6a26:	54a3      	strb	r3, [r4, r2]
    6a28:	3201      	adds	r2, #1
    6a2a:	54a3      	strb	r3, [r4, r2]
    6a2c:	3201      	adds	r2, #1
    6a2e:	54a3      	strb	r3, [r4, r2]
    6a30:	3201      	adds	r2, #1
    6a32:	54a3      	strb	r3, [r4, r2]
    6a34:	3201      	adds	r2, #1
    6a36:	54a3      	strb	r3, [r4, r2]
    6a38:	3201      	adds	r2, #1
    6a3a:	54a3      	strb	r3, [r4, r2]
    6a3c:	3201      	adds	r2, #1
    6a3e:	54a3      	strb	r3, [r4, r2]
    6a40:	3201      	adds	r2, #1
    6a42:	54a3      	strb	r3, [r4, r2]
    6a44:	3201      	adds	r2, #1
    6a46:	54a3      	strb	r3, [r4, r2]
    6a48:	3201      	adds	r2, #1
    6a4a:	54a3      	strb	r3, [r4, r2]
    6a4c:	3201      	adds	r2, #1
    6a4e:	54a3      	strb	r3, [r4, r2]
    6a50:	3201      	adds	r2, #1
    6a52:	54a3      	strb	r3, [r4, r2]
    6a54:	3201      	adds	r2, #1
    6a56:	54a3      	strb	r3, [r4, r2]
    6a58:	3201      	adds	r2, #1
    6a5a:	54a3      	strb	r3, [r4, r2]
    6a5c:	3201      	adds	r2, #1
    6a5e:	54a3      	strb	r3, [r4, r2]
    6a60:	3201      	adds	r2, #1
    6a62:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    6a64:	3201      	adds	r2, #1
    6a66:	54a3      	strb	r3, [r4, r2]
    6a68:	3201      	adds	r2, #1
    6a6a:	54a3      	strb	r3, [r4, r2]
    6a6c:	3201      	adds	r2, #1
    6a6e:	54a3      	strb	r3, [r4, r2]
    6a70:	3201      	adds	r2, #1
    6a72:	54a3      	strb	r3, [r4, r2]
    6a74:	3201      	adds	r2, #1
    6a76:	54a3      	strb	r3, [r4, r2]
    6a78:	3201      	adds	r2, #1
    6a7a:	54a3      	strb	r3, [r4, r2]
    6a7c:	3201      	adds	r2, #1
    6a7e:	54a3      	strb	r3, [r4, r2]
    6a80:	3201      	adds	r2, #1
    6a82:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    6a84:	3241      	adds	r2, #65	; 0x41
    6a86:	54a3      	strb	r3, [r4, r2]
    6a88:	65a3      	str	r3, [r4, #88]	; 0x58
    6a8a:	67a3      	str	r3, [r4, #120]	; 0x78
    6a8c:	3201      	adds	r2, #1
    6a8e:	54a3      	strb	r3, [r4, r2]
    6a90:	65e3      	str	r3, [r4, #92]	; 0x5c
    6a92:	67e3      	str	r3, [r4, #124]	; 0x7c
    6a94:	3201      	adds	r2, #1
    6a96:	54a3      	strb	r3, [r4, r2]
    6a98:	6623      	str	r3, [r4, #96]	; 0x60
    6a9a:	3a1a      	subs	r2, #26
    6a9c:	50a3      	str	r3, [r4, r2]
    6a9e:	321b      	adds	r2, #27
    6aa0:	54a3      	strb	r3, [r4, r2]
    6aa2:	6663      	str	r3, [r4, #100]	; 0x64
    6aa4:	3a17      	subs	r2, #23
    6aa6:	50a3      	str	r3, [r4, r2]
    6aa8:	3218      	adds	r2, #24
    6aaa:	54a3      	strb	r3, [r4, r2]
    6aac:	66a3      	str	r3, [r4, #104]	; 0x68
    6aae:	3a14      	subs	r2, #20
    6ab0:	50a3      	str	r3, [r4, r2]
    6ab2:	3215      	adds	r2, #21
    6ab4:	54a3      	strb	r3, [r4, r2]
    6ab6:	66e3      	str	r3, [r4, #108]	; 0x6c
    6ab8:	3a11      	subs	r2, #17
    6aba:	50a3      	str	r3, [r4, r2]
    6abc:	3212      	adds	r2, #18
    6abe:	54a3      	strb	r3, [r4, r2]
    6ac0:	6723      	str	r3, [r4, #112]	; 0x70
    6ac2:	3a0e      	subs	r2, #14
    6ac4:	50a3      	str	r3, [r4, r2]
    6ac6:	320f      	adds	r2, #15
    6ac8:	54a3      	strb	r3, [r4, r2]
    6aca:	6763      	str	r3, [r4, #116]	; 0x74
    6acc:	3a0b      	subs	r2, #11
    6ace:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    6ad0:	2101      	movs	r1, #1
    6ad2:	320c      	adds	r2, #12
    6ad4:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    6ad6:	3201      	adds	r2, #1
    6ad8:	54a3      	strb	r3, [r4, r2]
}
    6ada:	bd10      	pop	{r4, pc}
    6adc:	00006965 	.word	0x00006965
    6ae0:	00011c14 	.word	0x00011c14

00006ae4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    6ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ae6:	46de      	mov	lr, fp
    6ae8:	4657      	mov	r7, sl
    6aea:	464e      	mov	r6, r9
    6aec:	4645      	mov	r5, r8
    6aee:	b5e0      	push	{r5, r6, r7, lr}
    6af0:	b091      	sub	sp, #68	; 0x44
    6af2:	9001      	str	r0, [sp, #4]
    6af4:	000c      	movs	r4, r1
    6af6:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    6af8:	0008      	movs	r0, r1
    6afa:	4bc3      	ldr	r3, [pc, #780]	; (6e08 <tcc_init+0x324>)
    6afc:	4798      	blx	r3
    6afe:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    6b00:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    6b02:	48c2      	ldr	r0, [pc, #776]	; (6e0c <tcc_init+0x328>)
    6b04:	6a02      	ldr	r2, [r0, #32]
    6b06:	009e      	lsls	r6, r3, #2
    6b08:	4fc1      	ldr	r7, [pc, #772]	; (6e10 <tcc_init+0x32c>)
    6b0a:	59f7      	ldr	r7, [r6, r7]
    6b0c:	433a      	orrs	r2, r7
    6b0e:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    6b10:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    6b12:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    6b14:	0792      	lsls	r2, r2, #30
    6b16:	d506      	bpl.n	6b26 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    6b18:	b011      	add	sp, #68	; 0x44
    6b1a:	bc3c      	pop	{r2, r3, r4, r5}
    6b1c:	4690      	mov	r8, r2
    6b1e:	4699      	mov	r9, r3
    6b20:	46a2      	mov	sl, r4
    6b22:	46ab      	mov	fp, r5
    6b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    6b26:	6822      	ldr	r2, [r4, #0]
    6b28:	2701      	movs	r7, #1
    6b2a:	4017      	ands	r7, r2
    6b2c:	d1f4      	bne.n	6b18 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    6b2e:	48b9      	ldr	r0, [pc, #740]	; (6e14 <tcc_init+0x330>)
    6b30:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    6b32:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    6b34:	682e      	ldr	r6, [r5, #0]
    6b36:	42b2      	cmp	r2, r6
    6b38:	d3ee      	bcc.n	6b18 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    6b3a:	686e      	ldr	r6, [r5, #4]
    6b3c:	42b2      	cmp	r2, r6
    6b3e:	d3eb      	bcc.n	6b18 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    6b40:	69e8      	ldr	r0, [r5, #28]
    6b42:	4282      	cmp	r2, r0
    6b44:	d200      	bcs.n	6b48 <tcc_init+0x64>
    6b46:	e1b9      	b.n	6ebc <tcc_init+0x3d8>
    6b48:	6a28      	ldr	r0, [r5, #32]
    6b4a:	4282      	cmp	r2, r0
    6b4c:	d200      	bcs.n	6b50 <tcc_init+0x6c>
    6b4e:	e1b7      	b.n	6ec0 <tcc_init+0x3dc>
    6b50:	6a68      	ldr	r0, [r5, #36]	; 0x24
    6b52:	4282      	cmp	r2, r0
    6b54:	d200      	bcs.n	6b58 <tcc_init+0x74>
    6b56:	e1b5      	b.n	6ec4 <tcc_init+0x3e0>
    6b58:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6b5a:	4282      	cmp	r2, r0
    6b5c:	d200      	bcs.n	6b60 <tcc_init+0x7c>
    6b5e:	e1b3      	b.n	6ec8 <tcc_init+0x3e4>
    6b60:	2298      	movs	r2, #152	; 0x98
    6b62:	4694      	mov	ip, r2
    6b64:	44ac      	add	ip, r5
    6b66:	4662      	mov	r2, ip
    6b68:	9208      	str	r2, [sp, #32]
    6b6a:	2000      	movs	r0, #0
    6b6c:	e003      	b.n	6b76 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6b6e:	3001      	adds	r0, #1
    6b70:	3201      	adds	r2, #1
    6b72:	2808      	cmp	r0, #8
    6b74:	d008      	beq.n	6b88 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    6b76:	7816      	ldrb	r6, [r2, #0]
    6b78:	2e00      	cmp	r6, #0
    6b7a:	d0f8      	beq.n	6b6e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    6b7c:	4ea6      	ldr	r6, [pc, #664]	; (6e18 <tcc_init+0x334>)
    6b7e:	5c76      	ldrb	r6, [r6, r1]
    6b80:	4286      	cmp	r6, r0
    6b82:	dcf4      	bgt.n	6b6e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    6b84:	2017      	movs	r0, #23
    6b86:	e7c7      	b.n	6b18 <tcc_init+0x34>
    6b88:	2200      	movs	r2, #0
    6b8a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    6b8c:	2080      	movs	r0, #128	; 0x80
    6b8e:	0440      	lsls	r0, r0, #17
    6b90:	4684      	mov	ip, r0
    6b92:	e002      	b.n	6b9a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6b94:	3201      	adds	r2, #1
    6b96:	2a04      	cmp	r2, #4
    6b98:	d00e      	beq.n	6bb8 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    6b9a:	18a8      	adds	r0, r5, r2
    6b9c:	7c00      	ldrb	r0, [r0, #16]
    6b9e:	2801      	cmp	r0, #1
    6ba0:	d1f8      	bne.n	6b94 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    6ba2:	489e      	ldr	r0, [pc, #632]	; (6e1c <tcc_init+0x338>)
    6ba4:	5c40      	ldrb	r0, [r0, r1]
    6ba6:	4290      	cmp	r0, r2
    6ba8:	da00      	bge.n	6bac <tcc_init+0xc8>
    6baa:	e18f      	b.n	6ecc <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    6bac:	4660      	mov	r0, ip
    6bae:	4090      	lsls	r0, r2
    6bb0:	9e02      	ldr	r6, [sp, #8]
    6bb2:	4306      	orrs	r6, r0
    6bb4:	9602      	str	r6, [sp, #8]
    6bb6:	e7ed      	b.n	6b94 <tcc_init+0xb0>
	if (config->run_in_standby) {
    6bb8:	329d      	adds	r2, #157	; 0x9d
    6bba:	5caa      	ldrb	r2, [r5, r2]
    6bbc:	2a00      	cmp	r2, #0
    6bbe:	d004      	beq.n	6bca <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    6bc0:	2280      	movs	r2, #128	; 0x80
    6bc2:	0112      	lsls	r2, r2, #4
    6bc4:	9902      	ldr	r1, [sp, #8]
    6bc6:	4311      	orrs	r1, r2
    6bc8:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    6bca:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    6bcc:	1e51      	subs	r1, r2, #1
    6bce:	418a      	sbcs	r2, r1
    6bd0:	0092      	lsls	r2, r2, #2
    6bd2:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    6bd4:	7a6a      	ldrb	r2, [r5, #9]
    6bd6:	2a01      	cmp	r2, #1
    6bd8:	d022      	beq.n	6c20 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    6bda:	4a90      	ldr	r2, [pc, #576]	; (6e1c <tcc_init+0x338>)
    6bdc:	5cd2      	ldrb	r2, [r2, r3]
    6bde:	0011      	movs	r1, r2
    6be0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    6be2:	2235      	movs	r2, #53	; 0x35
    6be4:	5caa      	ldrb	r2, [r5, r2]
    6be6:	428a      	cmp	r2, r1
    6be8:	d300      	bcc.n	6bec <tcc_init+0x108>
    6bea:	e179      	b.n	6ee0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    6bec:	212c      	movs	r1, #44	; 0x2c
    6bee:	5c69      	ldrb	r1, [r5, r1]
    6bf0:	290f      	cmp	r1, #15
    6bf2:	d900      	bls.n	6bf6 <tcc_init+0x112>
    6bf4:	e174      	b.n	6ee0 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6bf6:	7b28      	ldrb	r0, [r5, #12]
    6bf8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6bfa:	7ae8      	ldrb	r0, [r5, #11]
    6bfc:	900b      	str	r0, [sp, #44]	; 0x2c
    6bfe:	202d      	movs	r0, #45	; 0x2d
    6c00:	4682      	mov	sl, r0
    6c02:	44aa      	add	sl, r5
    6c04:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    6c06:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    6c08:	ae0e      	add	r6, sp, #56	; 0x38
    6c0a:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    6c0c:	26c0      	movs	r6, #192	; 0xc0
    6c0e:	0136      	lsls	r6, r6, #4
    6c10:	46b1      	mov	r9, r6
    6c12:	4684      	mov	ip, r0
    6c14:	46a0      	mov	r8, r4
    6c16:	0028      	movs	r0, r5
    6c18:	4655      	mov	r5, sl
    6c1a:	9309      	str	r3, [sp, #36]	; 0x24
    6c1c:	4682      	mov	sl, r0
    6c1e:	e035      	b.n	6c8c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    6c20:	9906      	ldr	r1, [sp, #24]
    6c22:	4311      	orrs	r1, r2
    6c24:	9106      	str	r1, [sp, #24]
    6c26:	e7d8      	b.n	6bda <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    6c28:	0292      	lsls	r2, r2, #10
    6c2a:	464f      	mov	r7, r9
    6c2c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6c2e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    6c30:	7919      	ldrb	r1, [r3, #4]
    6c32:	468b      	mov	fp, r1
    6c34:	2103      	movs	r1, #3
    6c36:	465f      	mov	r7, fp
    6c38:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6c3a:	430a      	orrs	r2, r1
    6c3c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    6c3e:	795a      	ldrb	r2, [r3, #5]
    6c40:	0152      	lsls	r2, r2, #5
    6c42:	2160      	movs	r1, #96	; 0x60
    6c44:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6c46:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    6c48:	7999      	ldrb	r1, [r3, #6]
    6c4a:	0209      	lsls	r1, r1, #8
    6c4c:	26c0      	movs	r6, #192	; 0xc0
    6c4e:	00b6      	lsls	r6, r6, #2
    6c50:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6c52:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    6c54:	79da      	ldrb	r2, [r3, #7]
    6c56:	0312      	lsls	r2, r2, #12
    6c58:	21e0      	movs	r1, #224	; 0xe0
    6c5a:	01c9      	lsls	r1, r1, #7
    6c5c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6c5e:	4316      	orrs	r6, r2
    6c60:	4334      	orrs	r4, r6
    6c62:	9a03      	ldr	r2, [sp, #12]
    6c64:	4314      	orrs	r4, r2
    6c66:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    6c68:	4662      	mov	r2, ip
    6c6a:	9907      	ldr	r1, [sp, #28]
    6c6c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    6c6e:	2a04      	cmp	r2, #4
    6c70:	d02a      	beq.n	6cc8 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    6c72:	7c9a      	ldrb	r2, [r3, #18]
    6c74:	9905      	ldr	r1, [sp, #20]
    6c76:	4291      	cmp	r1, r2
    6c78:	d800      	bhi.n	6c7c <tcc_init+0x198>
    6c7a:	e131      	b.n	6ee0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    6c7c:	7a59      	ldrb	r1, [r3, #9]
    6c7e:	350a      	adds	r5, #10
    6c80:	2304      	movs	r3, #4
    6c82:	469b      	mov	fp, r3
    6c84:	44dc      	add	ip, fp
    6c86:	290f      	cmp	r1, #15
    6c88:	d900      	bls.n	6c8c <tcc_init+0x1a8>
    6c8a:	e129      	b.n	6ee0 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6c8c:	0609      	lsls	r1, r1, #24
    6c8e:	23f0      	movs	r3, #240	; 0xf0
    6c90:	051b      	lsls	r3, r3, #20
    6c92:	4019      	ands	r1, r3
    6c94:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    6c96:	782e      	ldrb	r6, [r5, #0]
    6c98:	0436      	lsls	r6, r6, #16
    6c9a:	20ff      	movs	r0, #255	; 0xff
    6c9c:	0400      	lsls	r0, r0, #16
    6c9e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    6ca0:	7868      	ldrb	r0, [r5, #1]
    6ca2:	2480      	movs	r4, #128	; 0x80
    6ca4:	2800      	cmp	r0, #0
    6ca6:	d100      	bne.n	6caa <tcc_init+0x1c6>
    6ca8:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    6caa:	7898      	ldrb	r0, [r3, #2]
    6cac:	2708      	movs	r7, #8
    6cae:	9703      	str	r7, [sp, #12]
    6cb0:	2800      	cmp	r0, #0
    6cb2:	d101      	bne.n	6cb8 <tcc_init+0x1d4>
    6cb4:	9804      	ldr	r0, [sp, #16]
    6cb6:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    6cb8:	78d8      	ldrb	r0, [r3, #3]
    6cba:	4683      	mov	fp, r0
    6cbc:	2010      	movs	r0, #16
    6cbe:	465f      	mov	r7, fp
    6cc0:	2f00      	cmp	r7, #0
    6cc2:	d1b1      	bne.n	6c28 <tcc_init+0x144>
    6cc4:	9804      	ldr	r0, [sp, #16]
    6cc6:	e7af      	b.n	6c28 <tcc_init+0x144>
    6cc8:	4644      	mov	r4, r8
    6cca:	4655      	mov	r5, sl
    6ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    6cce:	4a52      	ldr	r2, [pc, #328]	; (6e18 <tcc_init+0x334>)
    6cd0:	5cd2      	ldrb	r2, [r2, r3]
    6cd2:	4691      	mov	r9, r2
    6cd4:	4651      	mov	r1, sl
    6cd6:	3150      	adds	r1, #80	; 0x50
    6cd8:	4650      	mov	r0, sl
    6cda:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    6cdc:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6cde:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    6ce0:	2601      	movs	r6, #1
    6ce2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    6ce4:	2602      	movs	r6, #2
    6ce6:	36ff      	adds	r6, #255	; 0xff
    6ce8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    6cea:	2680      	movs	r6, #128	; 0x80
    6cec:	0276      	lsls	r6, r6, #9
    6cee:	46b0      	mov	r8, r6
    6cf0:	46a4      	mov	ip, r4
    6cf2:	001c      	movs	r4, r3
    6cf4:	464b      	mov	r3, r9
    6cf6:	e00f      	b.n	6d18 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    6cf8:	7806      	ldrb	r6, [r0, #0]
    6cfa:	2e00      	cmp	r6, #0
    6cfc:	d007      	beq.n	6d0e <tcc_init+0x22a>
			if (i >= ow_num) {
    6cfe:	4293      	cmp	r3, r2
    6d00:	d800      	bhi.n	6d04 <tcc_init+0x220>
    6d02:	e0e7      	b.n	6ed4 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    6d04:	2e02      	cmp	r6, #2
    6d06:	d014      	beq.n	6d32 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    6d08:	4656      	mov	r6, sl
    6d0a:	4096      	lsls	r6, r2
    6d0c:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6d0e:	3201      	adds	r2, #1
    6d10:	3101      	adds	r1, #1
    6d12:	3002      	adds	r0, #2
    6d14:	2a08      	cmp	r2, #8
    6d16:	d010      	beq.n	6d3a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    6d18:	780e      	ldrb	r6, [r1, #0]
    6d1a:	2e00      	cmp	r6, #0
    6d1c:	d0ec      	beq.n	6cf8 <tcc_init+0x214>
			if (i >= ow_num) {
    6d1e:	4293      	cmp	r3, r2
    6d20:	d800      	bhi.n	6d24 <tcc_init+0x240>
    6d22:	e0d5      	b.n	6ed0 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    6d24:	4646      	mov	r6, r8
    6d26:	4096      	lsls	r6, r2
    6d28:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    6d2a:	7806      	ldrb	r6, [r0, #0]
    6d2c:	2e00      	cmp	r6, #0
    6d2e:	d1e9      	bne.n	6d04 <tcc_init+0x220>
    6d30:	e7ed      	b.n	6d0e <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    6d32:	465e      	mov	r6, fp
    6d34:	4096      	lsls	r6, r2
    6d36:	4337      	orrs	r7, r6
    6d38:	e7e9      	b.n	6d0e <tcc_init+0x22a>
    6d3a:	4699      	mov	r9, r3
    6d3c:	0023      	movs	r3, r4
    6d3e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    6d40:	7e6a      	ldrb	r2, [r5, #25]
    6d42:	0112      	lsls	r2, r2, #4
    6d44:	2130      	movs	r1, #48	; 0x30
    6d46:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    6d48:	7e28      	ldrb	r0, [r5, #24]
    6d4a:	2207      	movs	r2, #7
    6d4c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    6d4e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    6d50:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    6d52:	2080      	movs	r0, #128	; 0x80
    6d54:	0240      	lsls	r0, r0, #9
    6d56:	000e      	movs	r6, r1
    6d58:	e002      	b.n	6d60 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    6d5a:	3201      	adds	r2, #1
    6d5c:	2a04      	cmp	r2, #4
    6d5e:	d00b      	beq.n	6d78 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    6d60:	18a9      	adds	r1, r5, r2
    6d62:	7d09      	ldrb	r1, [r1, #20]
    6d64:	2900      	cmp	r1, #0
    6d66:	d0f8      	beq.n	6d5a <tcc_init+0x276>
			if (n >= cc_num) {
    6d68:	9905      	ldr	r1, [sp, #20]
    6d6a:	4291      	cmp	r1, r2
    6d6c:	dc00      	bgt.n	6d70 <tcc_init+0x28c>
    6d6e:	e0b3      	b.n	6ed8 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    6d70:	0001      	movs	r1, r0
    6d72:	4091      	lsls	r1, r2
    6d74:	430e      	orrs	r6, r1
    6d76:	e7f0      	b.n	6d5a <tcc_init+0x276>
    6d78:	46b2      	mov	sl, r6
    6d7a:	9801      	ldr	r0, [sp, #4]
    6d7c:	0002      	movs	r2, r0
    6d7e:	3204      	adds	r2, #4
    6d80:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    6d82:	2100      	movs	r1, #0
    6d84:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6d86:	4282      	cmp	r2, r0
    6d88:	d1fc      	bne.n	6d84 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    6d8a:	2200      	movs	r2, #0
    6d8c:	9801      	ldr	r0, [sp, #4]
    6d8e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    6d90:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    6d92:	0099      	lsls	r1, r3, #2
    6d94:	4a22      	ldr	r2, [pc, #136]	; (6e20 <tcc_init+0x33c>)
    6d96:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    6d98:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6d9a:	22a0      	movs	r2, #160	; 0xa0
    6d9c:	5ca9      	ldrb	r1, [r5, r2]
    6d9e:	3a64      	subs	r2, #100	; 0x64
    6da0:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    6da2:	a90d      	add	r1, sp, #52	; 0x34
    6da4:	7aaa      	ldrb	r2, [r5, #10]
    6da6:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    6da8:	4a1e      	ldr	r2, [pc, #120]	; (6e24 <tcc_init+0x340>)
    6daa:	5cd6      	ldrb	r6, [r2, r3]
    6dac:	0030      	movs	r0, r6
    6dae:	4b1e      	ldr	r3, [pc, #120]	; (6e28 <tcc_init+0x344>)
    6db0:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    6db2:	0030      	movs	r0, r6
    6db4:	4b1d      	ldr	r3, [pc, #116]	; (6e2c <tcc_init+0x348>)
    6db6:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6db8:	464b      	mov	r3, r9
    6dba:	2b00      	cmp	r3, #0
    6dbc:	dd3c      	ble.n	6e38 <tcc_init+0x354>
    6dbe:	002e      	movs	r6, r5
    6dc0:	3658      	adds	r6, #88	; 0x58
    6dc2:	3398      	adds	r3, #152	; 0x98
    6dc4:	4698      	mov	r8, r3
    6dc6:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6dc8:	2301      	movs	r3, #1
    6dca:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    6dcc:	46ab      	mov	fp, r5
    6dce:	4645      	mov	r5, r8
    6dd0:	46a0      	mov	r8, r4
    6dd2:	9c08      	ldr	r4, [sp, #32]
    6dd4:	e003      	b.n	6dde <tcc_init+0x2fa>
    6dd6:	3401      	adds	r4, #1
    6dd8:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6dda:	42ac      	cmp	r4, r5
    6ddc:	d02a      	beq.n	6e34 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    6dde:	7823      	ldrb	r3, [r4, #0]
    6de0:	2b00      	cmp	r3, #0
    6de2:	d0f8      	beq.n	6dd6 <tcc_init+0x2f2>
    6de4:	ab0c      	add	r3, sp, #48	; 0x30
    6de6:	464a      	mov	r2, r9
    6de8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6dea:	2300      	movs	r3, #0
    6dec:	aa0c      	add	r2, sp, #48	; 0x30
    6dee:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    6df0:	0013      	movs	r3, r2
    6df2:	2220      	movs	r2, #32
    6df4:	18b2      	adds	r2, r6, r2
    6df6:	7812      	ldrb	r2, [r2, #0]
    6df8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6dfa:	464a      	mov	r2, r9
    6dfc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    6dfe:	7830      	ldrb	r0, [r6, #0]
    6e00:	0019      	movs	r1, r3
    6e02:	4b0b      	ldr	r3, [pc, #44]	; (6e30 <tcc_init+0x34c>)
    6e04:	4798      	blx	r3
    6e06:	e7e6      	b.n	6dd6 <tcc_init+0x2f2>
    6e08:	00006965 	.word	0x00006965
    6e0c:	40000400 	.word	0x40000400
    6e10:	00011c00 	.word	0x00011c00
    6e14:	00011c14 	.word	0x00011c14
    6e18:	00011c20 	.word	0x00011c20
    6e1c:	00011c0c 	.word	0x00011c0c
    6e20:	200006b8 	.word	0x200006b8
    6e24:	00011c10 	.word	0x00011c10
    6e28:	0000a2fd 	.word	0x0000a2fd
    6e2c:	0000a271 	.word	0x0000a271
    6e30:	0000a3f5 	.word	0x0000a3f5
    6e34:	4644      	mov	r4, r8
    6e36:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6e3a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6e3e:	0212      	lsls	r2, r2, #8
    6e40:	4313      	orrs	r3, r2
    6e42:	9a02      	ldr	r2, [sp, #8]
    6e44:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    6e46:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6e48:	2204      	movs	r2, #4
    6e4a:	68a3      	ldr	r3, [r4, #8]
    6e4c:	421a      	tst	r2, r3
    6e4e:	d1fc      	bne.n	6e4a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    6e50:	23ff      	movs	r3, #255	; 0xff
    6e52:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6e54:	2204      	movs	r2, #4
    6e56:	68a3      	ldr	r3, [r4, #8]
    6e58:	421a      	tst	r2, r3
    6e5a:	d1fc      	bne.n	6e56 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    6e5c:	466b      	mov	r3, sp
    6e5e:	7e1b      	ldrb	r3, [r3, #24]
    6e60:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    6e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6e64:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    6e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6e68:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    6e6a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    6e6c:	4a1d      	ldr	r2, [pc, #116]	; (6ee4 <tcc_init+0x400>)
    6e6e:	68a3      	ldr	r3, [r4, #8]
    6e70:	4213      	tst	r3, r2
    6e72:	d1fc      	bne.n	6e6e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    6e74:	4653      	mov	r3, sl
    6e76:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6e78:	2210      	movs	r2, #16
    6e7a:	68a3      	ldr	r3, [r4, #8]
    6e7c:	421a      	tst	r2, r3
    6e7e:	d1fc      	bne.n	6e7a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    6e80:	682b      	ldr	r3, [r5, #0]
    6e82:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6e84:	4a18      	ldr	r2, [pc, #96]	; (6ee8 <tcc_init+0x404>)
    6e86:	68a3      	ldr	r3, [r4, #8]
    6e88:	4213      	tst	r3, r2
    6e8a:	d1fc      	bne.n	6e86 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    6e8c:	686b      	ldr	r3, [r5, #4]
    6e8e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6e90:	9805      	ldr	r0, [sp, #20]
    6e92:	2800      	cmp	r0, #0
    6e94:	dd22      	ble.n	6edc <tcc_init+0x3f8>
    6e96:	351c      	adds	r5, #28
    6e98:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    6e9a:	4e14      	ldr	r6, [pc, #80]	; (6eec <tcc_init+0x408>)
    6e9c:	0032      	movs	r2, r6
    6e9e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    6ea0:	68a3      	ldr	r3, [r4, #8]
    6ea2:	421a      	tst	r2, r3
    6ea4:	d1fc      	bne.n	6ea0 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    6ea6:	cd04      	ldmia	r5!, {r2}
    6ea8:	000b      	movs	r3, r1
    6eaa:	3310      	adds	r3, #16
    6eac:	009b      	lsls	r3, r3, #2
    6eae:	18e3      	adds	r3, r4, r3
    6eb0:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6eb2:	3101      	adds	r1, #1
    6eb4:	4288      	cmp	r0, r1
    6eb6:	dcf1      	bgt.n	6e9c <tcc_init+0x3b8>
	return STATUS_OK;
    6eb8:	2000      	movs	r0, #0
    6eba:	e62d      	b.n	6b18 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    6ebc:	2017      	movs	r0, #23
    6ebe:	e62b      	b.n	6b18 <tcc_init+0x34>
    6ec0:	2017      	movs	r0, #23
    6ec2:	e629      	b.n	6b18 <tcc_init+0x34>
    6ec4:	2017      	movs	r0, #23
    6ec6:	e627      	b.n	6b18 <tcc_init+0x34>
    6ec8:	2017      	movs	r0, #23
    6eca:	e625      	b.n	6b18 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    6ecc:	2017      	movs	r0, #23
    6ece:	e623      	b.n	6b18 <tcc_init+0x34>
			if (i >= ow_num) {
    6ed0:	2017      	movs	r0, #23
    6ed2:	e621      	b.n	6b18 <tcc_init+0x34>
			if (i >= ow_num) {
    6ed4:	2017      	movs	r0, #23
    6ed6:	e61f      	b.n	6b18 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    6ed8:	2017      	movs	r0, #23
    6eda:	e61d      	b.n	6b18 <tcc_init+0x34>
	return STATUS_OK;
    6edc:	2000      	movs	r0, #0
    6ede:	e61b      	b.n	6b18 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    6ee0:	2017      	movs	r0, #23
    6ee2:	e619      	b.n	6b18 <tcc_init+0x34>
    6ee4:	00020040 	.word	0x00020040
    6ee8:	00040080 	.word	0x00040080
    6eec:	00080100 	.word	0x00080100

00006ef0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6ef0:	0092      	lsls	r2, r2, #2
    6ef2:	1883      	adds	r3, r0, r2
    6ef4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    6ef6:	4b03      	ldr	r3, [pc, #12]	; (6f04 <tcc_register_callback+0x14>)
    6ef8:	58d3      	ldr	r3, [r2, r3]
    6efa:	6b42      	ldr	r2, [r0, #52]	; 0x34
    6efc:	4313      	orrs	r3, r2
    6efe:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    6f00:	2000      	movs	r0, #0
    6f02:	4770      	bx	lr
    6f04:	00011c24 	.word	0x00011c24

00006f08 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    6f08:	b570      	push	{r4, r5, r6, lr}
    6f0a:	0004      	movs	r4, r0
    6f0c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    6f0e:	6800      	ldr	r0, [r0, #0]
    6f10:	4b09      	ldr	r3, [pc, #36]	; (6f38 <tcc_enable_callback+0x30>)
    6f12:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    6f14:	4b09      	ldr	r3, [pc, #36]	; (6f3c <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6f16:	5c1b      	ldrb	r3, [r3, r0]
    6f18:	221f      	movs	r2, #31
    6f1a:	401a      	ands	r2, r3
    6f1c:	2301      	movs	r3, #1
    6f1e:	4093      	lsls	r3, r2
    6f20:	4a07      	ldr	r2, [pc, #28]	; (6f40 <tcc_enable_callback+0x38>)
    6f22:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    6f24:	00ad      	lsls	r5, r5, #2
    6f26:	4b07      	ldr	r3, [pc, #28]	; (6f44 <tcc_enable_callback+0x3c>)
    6f28:	58ea      	ldr	r2, [r5, r3]
    6f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6f2c:	4313      	orrs	r3, r2
    6f2e:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    6f30:	6823      	ldr	r3, [r4, #0]
    6f32:	629a      	str	r2, [r3, #40]	; 0x28
}
    6f34:	bd70      	pop	{r4, r5, r6, pc}
    6f36:	46c0      	nop			; (mov r8, r8)
    6f38:	00006965 	.word	0x00006965
    6f3c:	00011c54 	.word	0x00011c54
    6f40:	e000e100 	.word	0xe000e100
    6f44:	00011c24 	.word	0x00011c24

00006f48 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f4a:	46c6      	mov	lr, r8
    6f4c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    6f4e:	0080      	lsls	r0, r0, #2
    6f50:	4b0e      	ldr	r3, [pc, #56]	; (6f8c <_tcc_interrupt_handler+0x44>)
    6f52:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6f54:	683b      	ldr	r3, [r7, #0]
    6f56:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6f5c:	4013      	ands	r3, r2
    6f5e:	401e      	ands	r6, r3
    6f60:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6f62:	4b0b      	ldr	r3, [pc, #44]	; (6f90 <_tcc_interrupt_handler+0x48>)
    6f64:	4698      	mov	r8, r3
    6f66:	e002      	b.n	6f6e <_tcc_interrupt_handler+0x26>
    6f68:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6f6a:	2c30      	cmp	r4, #48	; 0x30
    6f6c:	d00a      	beq.n	6f84 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6f6e:	4643      	mov	r3, r8
    6f70:	58e5      	ldr	r5, [r4, r3]
    6f72:	4235      	tst	r5, r6
    6f74:	d0f8      	beq.n	6f68 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6f76:	193b      	adds	r3, r7, r4
    6f78:	685b      	ldr	r3, [r3, #4]
    6f7a:	0038      	movs	r0, r7
    6f7c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    6f7e:	683b      	ldr	r3, [r7, #0]
    6f80:	62dd      	str	r5, [r3, #44]	; 0x2c
    6f82:	e7f1      	b.n	6f68 <_tcc_interrupt_handler+0x20>
		}
	}
}
    6f84:	bc04      	pop	{r2}
    6f86:	4690      	mov	r8, r2
    6f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f8a:	46c0      	nop			; (mov r8, r8)
    6f8c:	200006b8 	.word	0x200006b8
    6f90:	00011c24 	.word	0x00011c24

00006f94 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6f94:	b510      	push	{r4, lr}
    6f96:	2000      	movs	r0, #0
    6f98:	4b01      	ldr	r3, [pc, #4]	; (6fa0 <TCC0_Handler+0xc>)
    6f9a:	4798      	blx	r3
    6f9c:	bd10      	pop	{r4, pc}
    6f9e:	46c0      	nop			; (mov r8, r8)
    6fa0:	00006f49 	.word	0x00006f49

00006fa4 <TCC1_Handler>:
    6fa4:	b510      	push	{r4, lr}
    6fa6:	2001      	movs	r0, #1
    6fa8:	4b01      	ldr	r3, [pc, #4]	; (6fb0 <TCC1_Handler+0xc>)
    6faa:	4798      	blx	r3
    6fac:	bd10      	pop	{r4, pc}
    6fae:	46c0      	nop			; (mov r8, r8)
    6fb0:	00006f49 	.word	0x00006f49

00006fb4 <TCC2_Handler>:
    6fb4:	b510      	push	{r4, lr}
    6fb6:	2002      	movs	r0, #2
    6fb8:	4b01      	ldr	r3, [pc, #4]	; (6fc0 <TCC2_Handler+0xc>)
    6fba:	4798      	blx	r3
    6fbc:	bd10      	pop	{r4, pc}
    6fbe:	46c0      	nop			; (mov r8, r8)
    6fc0:	00006f49 	.word	0x00006f49

00006fc4 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6fc4:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6fc6:	2207      	movs	r2, #7
    6fc8:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    6fca:	421a      	tst	r2, r3
    6fcc:	d1fc      	bne.n	6fc8 <_i2c_master_wait_for_sync+0x4>
}
    6fce:	4770      	bx	lr

00006fd0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    6fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fd2:	46d6      	mov	lr, sl
    6fd4:	464f      	mov	r7, r9
    6fd6:	4646      	mov	r6, r8
    6fd8:	b5c0      	push	{r6, r7, lr}
    6fda:	b08a      	sub	sp, #40	; 0x28
    6fdc:	0006      	movs	r6, r0
    6fde:	000f      	movs	r7, r1
    6fe0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    6fe2:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6fe4:	0008      	movs	r0, r1
    6fe6:	4b97      	ldr	r3, [pc, #604]	; (7244 <i2c_master_init+0x274>)
    6fe8:	4798      	blx	r3
    6fea:	4a97      	ldr	r2, [pc, #604]	; (7248 <i2c_master_init+0x278>)
    6fec:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6fee:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6ff0:	2301      	movs	r3, #1
    6ff2:	40ab      	lsls	r3, r5
    6ff4:	430b      	orrs	r3, r1
    6ff6:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    6ff8:	a909      	add	r1, sp, #36	; 0x24
    6ffa:	7b23      	ldrb	r3, [r4, #12]
    6ffc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6ffe:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7000:	b2c5      	uxtb	r5, r0
    7002:	0028      	movs	r0, r5
    7004:	4b91      	ldr	r3, [pc, #580]	; (724c <i2c_master_init+0x27c>)
    7006:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7008:	0028      	movs	r0, r5
    700a:	4b91      	ldr	r3, [pc, #580]	; (7250 <i2c_master_init+0x280>)
    700c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    700e:	7b20      	ldrb	r0, [r4, #12]
    7010:	2100      	movs	r1, #0
    7012:	4b90      	ldr	r3, [pc, #576]	; (7254 <i2c_master_init+0x284>)
    7014:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    7016:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    7018:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    701a:	079b      	lsls	r3, r3, #30
    701c:	d505      	bpl.n	702a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    701e:	b00a      	add	sp, #40	; 0x28
    7020:	bc1c      	pop	{r2, r3, r4}
    7022:	4690      	mov	r8, r2
    7024:	4699      	mov	r9, r3
    7026:	46a2      	mov	sl, r4
    7028:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    702a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    702c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    702e:	07db      	lsls	r3, r3, #31
    7030:	d4f5      	bmi.n	701e <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    7032:	2314      	movs	r3, #20
    7034:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7036:	6833      	ldr	r3, [r6, #0]
    7038:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    703a:	0018      	movs	r0, r3
    703c:	4b81      	ldr	r3, [pc, #516]	; (7244 <i2c_master_init+0x274>)
    703e:	4798      	blx	r3
    7040:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7042:	2380      	movs	r3, #128	; 0x80
    7044:	aa08      	add	r2, sp, #32
    7046:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7048:	2300      	movs	r3, #0
    704a:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    704c:	2201      	movs	r2, #1
    704e:	a908      	add	r1, sp, #32
    7050:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    7052:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    7054:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    7056:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    7058:	2800      	cmp	r0, #0
    705a:	d100      	bne.n	705e <i2c_master_init+0x8e>
    705c:	e0af      	b.n	71be <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    705e:	ab08      	add	r3, sp, #32
    7060:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    7062:	2302      	movs	r3, #2
    7064:	aa08      	add	r2, sp, #32
    7066:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    7068:	0c00      	lsrs	r0, r0, #16
    706a:	b2c0      	uxtb	r0, r0
    706c:	0011      	movs	r1, r2
    706e:	4b7a      	ldr	r3, [pc, #488]	; (7258 <i2c_master_init+0x288>)
    7070:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    7072:	2f00      	cmp	r7, #0
    7074:	d100      	bne.n	7078 <i2c_master_init+0xa8>
    7076:	e0a7      	b.n	71c8 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    7078:	ab08      	add	r3, sp, #32
    707a:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    707c:	2302      	movs	r3, #2
    707e:	aa08      	add	r2, sp, #32
    7080:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    7082:	0c3f      	lsrs	r7, r7, #16
    7084:	b2f8      	uxtb	r0, r7
    7086:	0011      	movs	r1, r2
    7088:	4b73      	ldr	r3, [pc, #460]	; (7258 <i2c_master_init+0x288>)
    708a:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    708c:	8aa3      	ldrh	r3, [r4, #20]
    708e:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    7090:	8ae3      	ldrh	r3, [r4, #22]
    7092:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    7094:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    7096:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    7098:	2b00      	cmp	r3, #0
    709a:	d104      	bne.n	70a6 <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    709c:	4b6f      	ldr	r3, [pc, #444]	; (725c <i2c_master_init+0x28c>)
    709e:	789b      	ldrb	r3, [r3, #2]
    70a0:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    70a2:	0fdb      	lsrs	r3, r3, #31
    70a4:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    70a6:	68a1      	ldr	r1, [r4, #8]
    70a8:	6923      	ldr	r3, [r4, #16]
    70aa:	430b      	orrs	r3, r1
    70ac:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    70ae:	2224      	movs	r2, #36	; 0x24
    70b0:	5ca2      	ldrb	r2, [r4, r2]
    70b2:	2a00      	cmp	r2, #0
    70b4:	d002      	beq.n	70bc <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    70b6:	2280      	movs	r2, #128	; 0x80
    70b8:	05d2      	lsls	r2, r2, #23
    70ba:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    70bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    70be:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    70c0:	222c      	movs	r2, #44	; 0x2c
    70c2:	5ca2      	ldrb	r2, [r4, r2]
    70c4:	2a00      	cmp	r2, #0
    70c6:	d103      	bne.n	70d0 <i2c_master_init+0x100>
    70c8:	2280      	movs	r2, #128	; 0x80
    70ca:	0492      	lsls	r2, r2, #18
    70cc:	4291      	cmp	r1, r2
    70ce:	d102      	bne.n	70d6 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    70d0:	2280      	movs	r2, #128	; 0x80
    70d2:	0512      	lsls	r2, r2, #20
    70d4:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    70d6:	222d      	movs	r2, #45	; 0x2d
    70d8:	5ca2      	ldrb	r2, [r4, r2]
    70da:	2a00      	cmp	r2, #0
    70dc:	d002      	beq.n	70e4 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    70de:	2280      	movs	r2, #128	; 0x80
    70e0:	0412      	lsls	r2, r2, #16
    70e2:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    70e4:	222e      	movs	r2, #46	; 0x2e
    70e6:	5ca2      	ldrb	r2, [r4, r2]
    70e8:	2a00      	cmp	r2, #0
    70ea:	d002      	beq.n	70f2 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    70ec:	2280      	movs	r2, #128	; 0x80
    70ee:	03d2      	lsls	r2, r2, #15
    70f0:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    70f2:	4642      	mov	r2, r8
    70f4:	6812      	ldr	r2, [r2, #0]
    70f6:	4313      	orrs	r3, r2
    70f8:	4642      	mov	r2, r8
    70fa:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    70fc:	2380      	movs	r3, #128	; 0x80
    70fe:	005b      	lsls	r3, r3, #1
    7100:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    7102:	0028      	movs	r0, r5
    7104:	3014      	adds	r0, #20
    7106:	b2c0      	uxtb	r0, r0
    7108:	4b55      	ldr	r3, [pc, #340]	; (7260 <i2c_master_init+0x290>)
    710a:	4798      	blx	r3
    710c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    710e:	23fa      	movs	r3, #250	; 0xfa
    7110:	009b      	lsls	r3, r3, #2
    7112:	6822      	ldr	r2, [r4, #0]
    7114:	435a      	muls	r2, r3
    7116:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    7118:	6863      	ldr	r3, [r4, #4]
    711a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    711c:	4d51      	ldr	r5, [pc, #324]	; (7264 <i2c_master_init+0x294>)
    711e:	47a8      	blx	r5
    7120:	9000      	str	r0, [sp, #0]
    7122:	9101      	str	r1, [sp, #4]
    7124:	464b      	mov	r3, r9
    7126:	0058      	lsls	r0, r3, #1
    7128:	47a8      	blx	r5
    712a:	9002      	str	r0, [sp, #8]
    712c:	9103      	str	r1, [sp, #12]
    712e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    7130:	47a8      	blx	r5
    7132:	9004      	str	r0, [sp, #16]
    7134:	9105      	str	r1, [sp, #20]
    7136:	4f4c      	ldr	r7, [pc, #304]	; (7268 <i2c_master_init+0x298>)
    7138:	4a4c      	ldr	r2, [pc, #304]	; (726c <i2c_master_init+0x29c>)
    713a:	4b4d      	ldr	r3, [pc, #308]	; (7270 <i2c_master_init+0x2a0>)
    713c:	9800      	ldr	r0, [sp, #0]
    713e:	9901      	ldr	r1, [sp, #4]
    7140:	47b8      	blx	r7
    7142:	0002      	movs	r2, r0
    7144:	000b      	movs	r3, r1
    7146:	9804      	ldr	r0, [sp, #16]
    7148:	9905      	ldr	r1, [sp, #20]
    714a:	47b8      	blx	r7
    714c:	4e49      	ldr	r6, [pc, #292]	; (7274 <i2c_master_init+0x2a4>)
    714e:	2200      	movs	r2, #0
    7150:	4b49      	ldr	r3, [pc, #292]	; (7278 <i2c_master_init+0x2a8>)
    7152:	47b0      	blx	r6
    7154:	9004      	str	r0, [sp, #16]
    7156:	9105      	str	r1, [sp, #20]
    7158:	4648      	mov	r0, r9
    715a:	47a8      	blx	r5
    715c:	0002      	movs	r2, r0
    715e:	000b      	movs	r3, r1
    7160:	9804      	ldr	r0, [sp, #16]
    7162:	9905      	ldr	r1, [sp, #20]
    7164:	47b8      	blx	r7
    7166:	0002      	movs	r2, r0
    7168:	000b      	movs	r3, r1
    716a:	4d44      	ldr	r5, [pc, #272]	; (727c <i2c_master_init+0x2ac>)
    716c:	9800      	ldr	r0, [sp, #0]
    716e:	9901      	ldr	r1, [sp, #4]
    7170:	47a8      	blx	r5
    7172:	9a02      	ldr	r2, [sp, #8]
    7174:	9b03      	ldr	r3, [sp, #12]
    7176:	47b0      	blx	r6
    7178:	2200      	movs	r2, #0
    717a:	4b41      	ldr	r3, [pc, #260]	; (7280 <i2c_master_init+0x2b0>)
    717c:	47a8      	blx	r5
    717e:	9a02      	ldr	r2, [sp, #8]
    7180:	9b03      	ldr	r3, [sp, #12]
    7182:	4d40      	ldr	r5, [pc, #256]	; (7284 <i2c_master_init+0x2b4>)
    7184:	47a8      	blx	r5
    7186:	4b40      	ldr	r3, [pc, #256]	; (7288 <i2c_master_init+0x2b8>)
    7188:	4798      	blx	r3
    718a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    718c:	2380      	movs	r3, #128	; 0x80
    718e:	049b      	lsls	r3, r3, #18
    7190:	68a2      	ldr	r2, [r4, #8]
    7192:	429a      	cmp	r2, r3
    7194:	d01e      	beq.n	71d4 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    7196:	0003      	movs	r3, r0
    7198:	2040      	movs	r0, #64	; 0x40
    719a:	2dff      	cmp	r5, #255	; 0xff
    719c:	d900      	bls.n	71a0 <i2c_master_init+0x1d0>
    719e:	e73e      	b.n	701e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    71a0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    71a2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    71a4:	25ff      	movs	r5, #255	; 0xff
    71a6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    71a8:	0624      	lsls	r4, r4, #24
    71aa:	4325      	orrs	r5, r4
    71ac:	0400      	lsls	r0, r0, #16
    71ae:	23ff      	movs	r3, #255	; 0xff
    71b0:	041b      	lsls	r3, r3, #16
    71b2:	4018      	ands	r0, r3
    71b4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    71b6:	4643      	mov	r3, r8
    71b8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    71ba:	2000      	movs	r0, #0
    71bc:	e72f      	b.n	701e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    71be:	2100      	movs	r1, #0
    71c0:	4640      	mov	r0, r8
    71c2:	4b32      	ldr	r3, [pc, #200]	; (728c <i2c_master_init+0x2bc>)
    71c4:	4798      	blx	r3
    71c6:	e74a      	b.n	705e <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    71c8:	2101      	movs	r1, #1
    71ca:	4640      	mov	r0, r8
    71cc:	4b2f      	ldr	r3, [pc, #188]	; (728c <i2c_master_init+0x2bc>)
    71ce:	4798      	blx	r3
    71d0:	0007      	movs	r7, r0
    71d2:	e751      	b.n	7078 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    71d4:	26fa      	movs	r6, #250	; 0xfa
    71d6:	00b6      	lsls	r6, r6, #2
    71d8:	4653      	mov	r3, sl
    71da:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    71dc:	9800      	ldr	r0, [sp, #0]
    71de:	9901      	ldr	r1, [sp, #4]
    71e0:	0002      	movs	r2, r0
    71e2:	000b      	movs	r3, r1
    71e4:	4c23      	ldr	r4, [pc, #140]	; (7274 <i2c_master_init+0x2a4>)
    71e6:	47a0      	blx	r4
    71e8:	9000      	str	r0, [sp, #0]
    71ea:	9101      	str	r1, [sp, #4]
    71ec:	0030      	movs	r0, r6
    71ee:	4b1d      	ldr	r3, [pc, #116]	; (7264 <i2c_master_init+0x294>)
    71f0:	4798      	blx	r3
    71f2:	2200      	movs	r2, #0
    71f4:	4b26      	ldr	r3, [pc, #152]	; (7290 <i2c_master_init+0x2c0>)
    71f6:	47b8      	blx	r7
    71f8:	0002      	movs	r2, r0
    71fa:	000b      	movs	r3, r1
    71fc:	9800      	ldr	r0, [sp, #0]
    71fe:	9901      	ldr	r1, [sp, #4]
    7200:	4c20      	ldr	r4, [pc, #128]	; (7284 <i2c_master_init+0x2b4>)
    7202:	47a0      	blx	r4
    7204:	2200      	movs	r2, #0
    7206:	4b1e      	ldr	r3, [pc, #120]	; (7280 <i2c_master_init+0x2b0>)
    7208:	4c1c      	ldr	r4, [pc, #112]	; (727c <i2c_master_init+0x2ac>)
    720a:	47a0      	blx	r4
    720c:	4b1e      	ldr	r3, [pc, #120]	; (7288 <i2c_master_init+0x2b8>)
    720e:	4798      	blx	r3
    7210:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    7212:	d00c      	beq.n	722e <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    7214:	0031      	movs	r1, r6
    7216:	9807      	ldr	r0, [sp, #28]
    7218:	4b1e      	ldr	r3, [pc, #120]	; (7294 <i2c_master_init+0x2c4>)
    721a:	4798      	blx	r3
    721c:	3802      	subs	r0, #2
    721e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    7220:	002b      	movs	r3, r5
    7222:	2dff      	cmp	r5, #255	; 0xff
    7224:	d80c      	bhi.n	7240 <i2c_master_init+0x270>
    7226:	28ff      	cmp	r0, #255	; 0xff
    7228:	d9bc      	bls.n	71a4 <i2c_master_init+0x1d4>
    722a:	2040      	movs	r0, #64	; 0x40
    722c:	e6f7      	b.n	701e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    722e:	0071      	lsls	r1, r6, #1
    7230:	1e48      	subs	r0, r1, #1
    7232:	9b07      	ldr	r3, [sp, #28]
    7234:	469c      	mov	ip, r3
    7236:	4460      	add	r0, ip
    7238:	4b16      	ldr	r3, [pc, #88]	; (7294 <i2c_master_init+0x2c4>)
    723a:	4798      	blx	r3
    723c:	3801      	subs	r0, #1
    723e:	e7ef      	b.n	7220 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    7240:	2040      	movs	r0, #64	; 0x40
    7242:	e6ec      	b.n	701e <i2c_master_init+0x4e>
    7244:	00009791 	.word	0x00009791
    7248:	40000400 	.word	0x40000400
    724c:	0000a2fd 	.word	0x0000a2fd
    7250:	0000a271 	.word	0x0000a271
    7254:	000095cd 	.word	0x000095cd
    7258:	0000a3f5 	.word	0x0000a3f5
    725c:	41002000 	.word	0x41002000
    7260:	0000a319 	.word	0x0000a319
    7264:	0000fd25 	.word	0x0000fd25
    7268:	0000f0cd 	.word	0x0000f0cd
    726c:	e826d695 	.word	0xe826d695
    7270:	3e112e0b 	.word	0x3e112e0b
    7274:	0000e245 	.word	0x0000e245
    7278:	40240000 	.word	0x40240000
    727c:	0000f5cd 	.word	0x0000f5cd
    7280:	3ff00000 	.word	0x3ff00000
    7284:	0000e865 	.word	0x0000e865
    7288:	0000fc39 	.word	0x0000fc39
    728c:	00009619 	.word	0x00009619
    7290:	40080000 	.word	0x40080000
    7294:	0000d919 	.word	0x0000d919

00007298 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7298:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    729a:	7e1a      	ldrb	r2, [r3, #24]
    729c:	0792      	lsls	r2, r2, #30
    729e:	d507      	bpl.n	72b0 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    72a0:	2202      	movs	r2, #2
    72a2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    72a4:	8b5b      	ldrh	r3, [r3, #26]
    72a6:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    72a8:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    72aa:	17db      	asrs	r3, r3, #31
    72ac:	4018      	ands	r0, r3
}
    72ae:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    72b0:	8b5a      	ldrh	r2, [r3, #26]
    72b2:	0752      	lsls	r2, r2, #29
    72b4:	d506      	bpl.n	72c4 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    72b6:	6859      	ldr	r1, [r3, #4]
    72b8:	22c0      	movs	r2, #192	; 0xc0
    72ba:	0292      	lsls	r2, r2, #10
    72bc:	430a      	orrs	r2, r1
    72be:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    72c0:	2018      	movs	r0, #24
    72c2:	e7f4      	b.n	72ae <_i2c_master_address_response+0x16>
	return STATUS_OK;
    72c4:	2000      	movs	r0, #0
    72c6:	e7f2      	b.n	72ae <_i2c_master_address_response+0x16>

000072c8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    72c8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    72ca:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    72cc:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    72ce:	2401      	movs	r4, #1
    72d0:	2502      	movs	r5, #2
    72d2:	7e11      	ldrb	r1, [r2, #24]
    72d4:	4221      	tst	r1, r4
    72d6:	d10b      	bne.n	72f0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    72d8:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    72da:	4229      	tst	r1, r5
    72dc:	d106      	bne.n	72ec <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    72de:	3301      	adds	r3, #1
    72e0:	b29b      	uxth	r3, r3
    72e2:	8901      	ldrh	r1, [r0, #8]
    72e4:	4299      	cmp	r1, r3
    72e6:	d8f4      	bhi.n	72d2 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    72e8:	2012      	movs	r0, #18
    72ea:	e002      	b.n	72f2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    72ec:	2000      	movs	r0, #0
    72ee:	e000      	b.n	72f2 <_i2c_master_wait_for_bus+0x2a>
    72f0:	2000      	movs	r0, #0
}
    72f2:	bd30      	pop	{r4, r5, pc}

000072f4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    72f4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    72f6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    72f8:	6862      	ldr	r2, [r4, #4]
    72fa:	2380      	movs	r3, #128	; 0x80
    72fc:	02db      	lsls	r3, r3, #11
    72fe:	4313      	orrs	r3, r2
    7300:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    7302:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    7304:	4b02      	ldr	r3, [pc, #8]	; (7310 <_i2c_master_send_hs_master_code+0x1c>)
    7306:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    7308:	2301      	movs	r3, #1
    730a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    730c:	bd10      	pop	{r4, pc}
    730e:	46c0      	nop			; (mov r8, r8)
    7310:	000072c9 	.word	0x000072c9

00007314 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    7314:	b5f0      	push	{r4, r5, r6, r7, lr}
    7316:	46de      	mov	lr, fp
    7318:	4657      	mov	r7, sl
    731a:	464e      	mov	r6, r9
    731c:	4645      	mov	r5, r8
    731e:	b5e0      	push	{r5, r6, r7, lr}
    7320:	b083      	sub	sp, #12
    7322:	0006      	movs	r6, r0
    7324:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7326:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    7328:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    732a:	682b      	ldr	r3, [r5, #0]
    732c:	011b      	lsls	r3, r3, #4
    732e:	0fdb      	lsrs	r3, r3, #31
    7330:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    7332:	7a4b      	ldrb	r3, [r1, #9]
    7334:	2b00      	cmp	r3, #0
    7336:	d12b      	bne.n	7390 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7338:	686b      	ldr	r3, [r5, #4]
    733a:	4a58      	ldr	r2, [pc, #352]	; (749c <_i2c_master_read_packet+0x188>)
    733c:	4013      	ands	r3, r2
    733e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    7340:	464b      	mov	r3, r9
    7342:	7a1b      	ldrb	r3, [r3, #8]
    7344:	2b00      	cmp	r3, #0
    7346:	d127      	bne.n	7398 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    7348:	464b      	mov	r3, r9
    734a:	881b      	ldrh	r3, [r3, #0]
    734c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    734e:	464a      	mov	r2, r9
    7350:	7a52      	ldrb	r2, [r2, #9]
    7352:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    7354:	4313      	orrs	r3, r2
    7356:	2201      	movs	r2, #1
    7358:	4313      	orrs	r3, r2
    735a:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    735c:	0030      	movs	r0, r6
    735e:	4b50      	ldr	r3, [pc, #320]	; (74a0 <_i2c_master_read_packet+0x18c>)
    7360:	4798      	blx	r3
    7362:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    7364:	4653      	mov	r3, sl
    7366:	2b00      	cmp	r3, #0
    7368:	d003      	beq.n	7372 <_i2c_master_read_packet+0x5e>
    736a:	464b      	mov	r3, r9
    736c:	885b      	ldrh	r3, [r3, #2]
    736e:	2b01      	cmp	r3, #1
    7370:	d03b      	beq.n	73ea <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    7372:	686b      	ldr	r3, [r5, #4]
    7374:	4a49      	ldr	r2, [pc, #292]	; (749c <_i2c_master_read_packet+0x188>)
    7376:	4013      	ands	r3, r2
    7378:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    737a:	9b01      	ldr	r3, [sp, #4]
    737c:	2b00      	cmp	r3, #0
    737e:	d03a      	beq.n	73f6 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    7380:	9801      	ldr	r0, [sp, #4]
    7382:	b003      	add	sp, #12
    7384:	bc3c      	pop	{r2, r3, r4, r5}
    7386:	4690      	mov	r8, r2
    7388:	4699      	mov	r9, r3
    738a:	46a2      	mov	sl, r4
    738c:	46ab      	mov	fp, r5
    738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    7390:	7a89      	ldrb	r1, [r1, #10]
    7392:	4b44      	ldr	r3, [pc, #272]	; (74a4 <_i2c_master_read_packet+0x190>)
    7394:	4798      	blx	r3
    7396:	e7cf      	b.n	7338 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    7398:	464b      	mov	r3, r9
    739a:	881b      	ldrh	r3, [r3, #0]
    739c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    739e:	464a      	mov	r2, r9
    73a0:	7a52      	ldrb	r2, [r2, #9]
    73a2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    73a4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    73a6:	2280      	movs	r2, #128	; 0x80
    73a8:	0212      	lsls	r2, r2, #8
    73aa:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    73ac:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    73ae:	0030      	movs	r0, r6
    73b0:	4b3b      	ldr	r3, [pc, #236]	; (74a0 <_i2c_master_read_packet+0x18c>)
    73b2:	4798      	blx	r3
    73b4:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    73b6:	686b      	ldr	r3, [r5, #4]
    73b8:	4a38      	ldr	r2, [pc, #224]	; (749c <_i2c_master_read_packet+0x188>)
    73ba:	4013      	ands	r3, r2
    73bc:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    73be:	2800      	cmp	r0, #0
    73c0:	d1de      	bne.n	7380 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    73c2:	0030      	movs	r0, r6
    73c4:	4b38      	ldr	r3, [pc, #224]	; (74a8 <_i2c_master_read_packet+0x194>)
    73c6:	4798      	blx	r3
    73c8:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    73ca:	2800      	cmp	r0, #0
    73cc:	d1d8      	bne.n	7380 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    73ce:	464b      	mov	r3, r9
    73d0:	881b      	ldrh	r3, [r3, #0]
    73d2:	0a1b      	lsrs	r3, r3, #8
    73d4:	2278      	movs	r2, #120	; 0x78
    73d6:	4313      	orrs	r3, r2
    73d8:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    73da:	464a      	mov	r2, r9
    73dc:	7a52      	ldrb	r2, [r2, #9]
    73de:	0392      	lsls	r2, r2, #14
    73e0:	2101      	movs	r1, #1
    73e2:	430a      	orrs	r2, r1
    73e4:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    73e6:	626b      	str	r3, [r5, #36]	; 0x24
    73e8:	e7b8      	b.n	735c <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    73ea:	686a      	ldr	r2, [r5, #4]
    73ec:	2380      	movs	r3, #128	; 0x80
    73ee:	02db      	lsls	r3, r3, #11
    73f0:	4313      	orrs	r3, r2
    73f2:	606b      	str	r3, [r5, #4]
    73f4:	e7c1      	b.n	737a <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    73f6:	0030      	movs	r0, r6
    73f8:	4b2b      	ldr	r3, [pc, #172]	; (74a8 <_i2c_master_read_packet+0x194>)
    73fa:	4798      	blx	r3
    73fc:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    73fe:	2800      	cmp	r0, #0
    7400:	d1be      	bne.n	7380 <_i2c_master_read_packet+0x6c>
    7402:	3c01      	subs	r4, #1
    7404:	b2a4      	uxth	r4, r4
    7406:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    7408:	4b28      	ldr	r3, [pc, #160]	; (74ac <_i2c_master_read_packet+0x198>)
    740a:	469b      	mov	fp, r3
    740c:	e015      	b.n	743a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    740e:	2c01      	cmp	r4, #1
    7410:	d020      	beq.n	7454 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    7412:	0030      	movs	r0, r6
    7414:	4b26      	ldr	r3, [pc, #152]	; (74b0 <_i2c_master_read_packet+0x19c>)
    7416:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    7418:	4643      	mov	r3, r8
    741a:	1c5f      	adds	r7, r3, #1
    741c:	b2bf      	uxth	r7, r7
    741e:	2328      	movs	r3, #40	; 0x28
    7420:	5ceb      	ldrb	r3, [r5, r3]
    7422:	464a      	mov	r2, r9
    7424:	6852      	ldr	r2, [r2, #4]
    7426:	4641      	mov	r1, r8
    7428:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    742a:	0030      	movs	r0, r6
    742c:	4b1c      	ldr	r3, [pc, #112]	; (74a0 <_i2c_master_read_packet+0x18c>)
    742e:	4798      	blx	r3
    7430:	3c01      	subs	r4, #1
    7432:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    7434:	2800      	cmp	r0, #0
    7436:	d115      	bne.n	7464 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    7438:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    743a:	455c      	cmp	r4, fp
    743c:	d014      	beq.n	7468 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    743e:	8b6b      	ldrh	r3, [r5, #26]
    7440:	069b      	lsls	r3, r3, #26
    7442:	d527      	bpl.n	7494 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    7444:	7af3      	ldrb	r3, [r6, #11]
    7446:	2b00      	cmp	r3, #0
    7448:	d0e3      	beq.n	7412 <_i2c_master_read_packet+0xfe>
    744a:	4653      	mov	r3, sl
    744c:	2b00      	cmp	r3, #0
    744e:	d1de      	bne.n	740e <_i2c_master_read_packet+0xfa>
    7450:	2c00      	cmp	r4, #0
    7452:	d1de      	bne.n	7412 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7454:	686a      	ldr	r2, [r5, #4]
    7456:	2380      	movs	r3, #128	; 0x80
    7458:	02db      	lsls	r3, r3, #11
    745a:	4313      	orrs	r3, r2
    745c:	606b      	str	r3, [r5, #4]
    745e:	3c01      	subs	r4, #1
    7460:	b2a4      	uxth	r4, r4
    7462:	e7ea      	b.n	743a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    7464:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    7466:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    7468:	7ab3      	ldrb	r3, [r6, #10]
    746a:	2b00      	cmp	r3, #0
    746c:	d109      	bne.n	7482 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    746e:	0030      	movs	r0, r6
    7470:	4b0f      	ldr	r3, [pc, #60]	; (74b0 <_i2c_master_read_packet+0x19c>)
    7472:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    7474:	2328      	movs	r3, #40	; 0x28
    7476:	5cea      	ldrb	r2, [r5, r3]
    7478:	464b      	mov	r3, r9
    747a:	685b      	ldr	r3, [r3, #4]
    747c:	4641      	mov	r1, r8
    747e:	545a      	strb	r2, [r3, r1]
    7480:	e77e      	b.n	7380 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    7482:	0030      	movs	r0, r6
    7484:	4b0a      	ldr	r3, [pc, #40]	; (74b0 <_i2c_master_read_packet+0x19c>)
    7486:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7488:	686a      	ldr	r2, [r5, #4]
    748a:	23c0      	movs	r3, #192	; 0xc0
    748c:	029b      	lsls	r3, r3, #10
    748e:	4313      	orrs	r3, r2
    7490:	606b      	str	r3, [r5, #4]
    7492:	e7ec      	b.n	746e <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    7494:	2341      	movs	r3, #65	; 0x41
    7496:	9301      	str	r3, [sp, #4]
    7498:	e772      	b.n	7380 <_i2c_master_read_packet+0x6c>
    749a:	46c0      	nop			; (mov r8, r8)
    749c:	fffbffff 	.word	0xfffbffff
    74a0:	000072c9 	.word	0x000072c9
    74a4:	000072f5 	.word	0x000072f5
    74a8:	00007299 	.word	0x00007299
    74ac:	0000ffff 	.word	0x0000ffff
    74b0:	00006fc5 	.word	0x00006fc5

000074b4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    74b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74b6:	46de      	mov	lr, fp
    74b8:	4657      	mov	r7, sl
    74ba:	464e      	mov	r6, r9
    74bc:	4645      	mov	r5, r8
    74be:	b5e0      	push	{r5, r6, r7, lr}
    74c0:	b083      	sub	sp, #12
    74c2:	0006      	movs	r6, r0
    74c4:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    74c6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    74c8:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    74ca:	4b32      	ldr	r3, [pc, #200]	; (7594 <_i2c_master_write_packet+0xe0>)
    74cc:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    74ce:	7a7b      	ldrb	r3, [r7, #9]
    74d0:	2b00      	cmp	r3, #0
    74d2:	d11d      	bne.n	7510 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    74d4:	686b      	ldr	r3, [r5, #4]
    74d6:	4a30      	ldr	r2, [pc, #192]	; (7598 <_i2c_master_write_packet+0xe4>)
    74d8:	4013      	ands	r3, r2
    74da:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    74dc:	7a3b      	ldrb	r3, [r7, #8]
    74de:	2b00      	cmp	r3, #0
    74e0:	d01b      	beq.n	751a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    74e2:	883b      	ldrh	r3, [r7, #0]
    74e4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    74e6:	7a7a      	ldrb	r2, [r7, #9]
    74e8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    74ea:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    74ec:	2280      	movs	r2, #128	; 0x80
    74ee:	0212      	lsls	r2, r2, #8
    74f0:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    74f2:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    74f4:	0030      	movs	r0, r6
    74f6:	4b29      	ldr	r3, [pc, #164]	; (759c <_i2c_master_write_packet+0xe8>)
    74f8:	4798      	blx	r3
    74fa:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    74fc:	2800      	cmp	r0, #0
    74fe:	d013      	beq.n	7528 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    7500:	9801      	ldr	r0, [sp, #4]
    7502:	b003      	add	sp, #12
    7504:	bc3c      	pop	{r2, r3, r4, r5}
    7506:	4690      	mov	r8, r2
    7508:	4699      	mov	r9, r3
    750a:	46a2      	mov	sl, r4
    750c:	46ab      	mov	fp, r5
    750e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    7510:	7ab9      	ldrb	r1, [r7, #10]
    7512:	0030      	movs	r0, r6
    7514:	4b22      	ldr	r3, [pc, #136]	; (75a0 <_i2c_master_write_packet+0xec>)
    7516:	4798      	blx	r3
    7518:	e7dc      	b.n	74d4 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    751a:	883b      	ldrh	r3, [r7, #0]
    751c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    751e:	7a7a      	ldrb	r2, [r7, #9]
    7520:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7522:	4313      	orrs	r3, r2
    7524:	626b      	str	r3, [r5, #36]	; 0x24
    7526:	e7e5      	b.n	74f4 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    7528:	0030      	movs	r0, r6
    752a:	4b1e      	ldr	r3, [pc, #120]	; (75a4 <_i2c_master_write_packet+0xf0>)
    752c:	4798      	blx	r3
    752e:	1e03      	subs	r3, r0, #0
    7530:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    7532:	d1e5      	bne.n	7500 <_i2c_master_write_packet+0x4c>
    7534:	46a0      	mov	r8, r4
    7536:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    7538:	3320      	adds	r3, #32
    753a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    753c:	4b15      	ldr	r3, [pc, #84]	; (7594 <_i2c_master_write_packet+0xe0>)
    753e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    7540:	4b16      	ldr	r3, [pc, #88]	; (759c <_i2c_master_write_packet+0xe8>)
    7542:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    7544:	4544      	cmp	r4, r8
    7546:	d015      	beq.n	7574 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    7548:	8b6b      	ldrh	r3, [r5, #26]
    754a:	464a      	mov	r2, r9
    754c:	4213      	tst	r3, r2
    754e:	d01d      	beq.n	758c <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    7550:	0030      	movs	r0, r6
    7552:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	5d1a      	ldrb	r2, [r3, r4]
    7558:	2328      	movs	r3, #40	; 0x28
    755a:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    755c:	0030      	movs	r0, r6
    755e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    7560:	2800      	cmp	r0, #0
    7562:	d106      	bne.n	7572 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    7564:	8b6b      	ldrh	r3, [r5, #26]
    7566:	3401      	adds	r4, #1
    7568:	075b      	lsls	r3, r3, #29
    756a:	d5eb      	bpl.n	7544 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    756c:	231e      	movs	r3, #30
    756e:	9301      	str	r3, [sp, #4]
    7570:	e000      	b.n	7574 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    7572:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    7574:	7ab3      	ldrb	r3, [r6, #10]
    7576:	2b00      	cmp	r3, #0
    7578:	d0c2      	beq.n	7500 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    757a:	0030      	movs	r0, r6
    757c:	4b05      	ldr	r3, [pc, #20]	; (7594 <_i2c_master_write_packet+0xe0>)
    757e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7580:	686a      	ldr	r2, [r5, #4]
    7582:	23c0      	movs	r3, #192	; 0xc0
    7584:	029b      	lsls	r3, r3, #10
    7586:	4313      	orrs	r3, r2
    7588:	606b      	str	r3, [r5, #4]
    758a:	e7b9      	b.n	7500 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    758c:	2341      	movs	r3, #65	; 0x41
    758e:	9301      	str	r3, [sp, #4]
    7590:	e7b6      	b.n	7500 <_i2c_master_write_packet+0x4c>
    7592:	46c0      	nop			; (mov r8, r8)
    7594:	00006fc5 	.word	0x00006fc5
    7598:	fffbffff 	.word	0xfffbffff
    759c:	000072c9 	.word	0x000072c9
    75a0:	000072f5 	.word	0x000072f5
    75a4:	00007299 	.word	0x00007299

000075a8 <i2c_master_read_packet_wait>:
{
    75a8:	b510      	push	{r4, lr}
	module->send_stop = true;
    75aa:	2301      	movs	r3, #1
    75ac:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    75ae:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    75b0:	4b01      	ldr	r3, [pc, #4]	; (75b8 <i2c_master_read_packet_wait+0x10>)
    75b2:	4798      	blx	r3
}
    75b4:	bd10      	pop	{r4, pc}
    75b6:	46c0      	nop			; (mov r8, r8)
    75b8:	00007315 	.word	0x00007315

000075bc <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    75bc:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    75be:	2301      	movs	r3, #1
    75c0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    75c2:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    75c4:	4b01      	ldr	r3, [pc, #4]	; (75cc <i2c_master_write_packet_wait+0x10>)
    75c6:	4798      	blx	r3
}
    75c8:	bd10      	pop	{r4, pc}
    75ca:	46c0      	nop			; (mov r8, r8)
    75cc:	000074b5 	.word	0x000074b5

000075d0 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    75d0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    75d2:	2300      	movs	r3, #0
    75d4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    75d6:	3301      	adds	r3, #1
    75d8:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    75da:	4b01      	ldr	r3, [pc, #4]	; (75e0 <i2c_master_write_packet_wait_no_stop+0x10>)
    75dc:	4798      	blx	r3
}
    75de:	bd10      	pop	{r4, pc}
    75e0:	000074b5 	.word	0x000074b5

000075e4 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    75e4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    75e6:	6804      	ldr	r4, [r0, #0]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    75e8:	4b03      	ldr	r3, [pc, #12]	; (75f8 <i2c_master_send_stop+0x14>)
    75ea:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    75ec:	6862      	ldr	r2, [r4, #4]
    75ee:	23c0      	movs	r3, #192	; 0xc0
    75f0:	029b      	lsls	r3, r3, #10
    75f2:	4313      	orrs	r3, r2
    75f4:	6063      	str	r3, [r4, #4]
}
    75f6:	bd10      	pop	{r4, pc}
    75f8:	00006fc5 	.word	0x00006fc5

000075fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    75fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75fe:	46c6      	mov	lr, r8
    7600:	b500      	push	{lr}
    7602:	000c      	movs	r4, r1
    7604:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    7606:	2800      	cmp	r0, #0
    7608:	d10f      	bne.n	762a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    760a:	2a00      	cmp	r2, #0
    760c:	dd11      	ble.n	7632 <_read+0x36>
    760e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7610:	4e09      	ldr	r6, [pc, #36]	; (7638 <_read+0x3c>)
    7612:	4d0a      	ldr	r5, [pc, #40]	; (763c <_read+0x40>)
    7614:	6830      	ldr	r0, [r6, #0]
    7616:	0021      	movs	r1, r4
    7618:	682b      	ldr	r3, [r5, #0]
    761a:	4798      	blx	r3
		ptr++;
    761c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    761e:	42bc      	cmp	r4, r7
    7620:	d1f8      	bne.n	7614 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    7622:	4640      	mov	r0, r8
    7624:	bc04      	pop	{r2}
    7626:	4690      	mov	r8, r2
    7628:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    762a:	2301      	movs	r3, #1
    762c:	425b      	negs	r3, r3
    762e:	4698      	mov	r8, r3
    7630:	e7f7      	b.n	7622 <_read+0x26>
	for (; len > 0; --len) {
    7632:	4680      	mov	r8, r0
    7634:	e7f5      	b.n	7622 <_read+0x26>
    7636:	46c0      	nop			; (mov r8, r8)
    7638:	200006cc 	.word	0x200006cc
    763c:	200006c4 	.word	0x200006c4

00007640 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7640:	b5f0      	push	{r4, r5, r6, r7, lr}
    7642:	46c6      	mov	lr, r8
    7644:	b500      	push	{lr}
    7646:	000e      	movs	r6, r1
    7648:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    764a:	3801      	subs	r0, #1
    764c:	2802      	cmp	r0, #2
    764e:	d810      	bhi.n	7672 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7650:	2a00      	cmp	r2, #0
    7652:	d011      	beq.n	7678 <_write+0x38>
    7654:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7656:	4b0c      	ldr	r3, [pc, #48]	; (7688 <_write+0x48>)
    7658:	4698      	mov	r8, r3
    765a:	4f0c      	ldr	r7, [pc, #48]	; (768c <_write+0x4c>)
    765c:	4643      	mov	r3, r8
    765e:	6818      	ldr	r0, [r3, #0]
    7660:	5d31      	ldrb	r1, [r6, r4]
    7662:	683b      	ldr	r3, [r7, #0]
    7664:	4798      	blx	r3
    7666:	2800      	cmp	r0, #0
    7668:	db08      	blt.n	767c <_write+0x3c>
			return -1;
		}
		++nChars;
    766a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    766c:	42a5      	cmp	r5, r4
    766e:	d1f5      	bne.n	765c <_write+0x1c>
    7670:	e006      	b.n	7680 <_write+0x40>
		return -1;
    7672:	2401      	movs	r4, #1
    7674:	4264      	negs	r4, r4
    7676:	e003      	b.n	7680 <_write+0x40>
	for (; len != 0; --len) {
    7678:	0014      	movs	r4, r2
    767a:	e001      	b.n	7680 <_write+0x40>
			return -1;
    767c:	2401      	movs	r4, #1
    767e:	4264      	negs	r4, r4
	}
	return nChars;
}
    7680:	0020      	movs	r0, r4
    7682:	bc04      	pop	{r2}
    7684:	4690      	mov	r8, r2
    7686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7688:	200006cc 	.word	0x200006cc
    768c:	200006c8 	.word	0x200006c8

00007690 <get_gpio_pin>:
 * @param  port port to use. Either A or B
 * @param  pin  pin that's being selected. Depends on port
 * @return      value of the pin that was selected.
 */
int get_gpio_pin(char port, int pin)
{
    7690:	b530      	push	{r4, r5, lr}
    7692:	b083      	sub	sp, #12
    7694:	000c      	movs	r4, r1
	int pin_val = -1;

	switch (port) {
    7696:	2861      	cmp	r0, #97	; 0x61
    7698:	d006      	beq.n	76a8 <get_gpio_pin+0x18>
    769a:	2862      	cmp	r0, #98	; 0x62
    769c:	d013      	beq.n	76c6 <get_gpio_pin+0x36>
	int pin_val = -1;
    769e:	2501      	movs	r5, #1
    76a0:	426d      	negs	r5, r5
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
			//TODO: error codes
		}
	}
	return pin_val;
}
    76a2:	0028      	movs	r0, r5
    76a4:	b003      	add	sp, #12
    76a6:	bd30      	pop	{r4, r5, pc}
		switch (pin) {
    76a8:	2908      	cmp	r1, #8
    76aa:	d014      	beq.n	76d6 <get_gpio_pin+0x46>
    76ac:	2909      	cmp	r1, #9
    76ae:	d014      	beq.n	76da <get_gpio_pin+0x4a>
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    76b0:	2303      	movs	r3, #3
    76b2:	9300      	str	r3, [sp, #0]
    76b4:	3b01      	subs	r3, #1
    76b6:	2209      	movs	r2, #9
    76b8:	2108      	movs	r1, #8
    76ba:	480e      	ldr	r0, [pc, #56]	; (76f4 <get_gpio_pin+0x64>)
    76bc:	4d0e      	ldr	r5, [pc, #56]	; (76f8 <get_gpio_pin+0x68>)
    76be:	47a8      	blx	r5
	int pin_val = -1;
    76c0:	2501      	movs	r5, #1
    76c2:	426d      	negs	r5, r5
			break;
    76c4:	e001      	b.n	76ca <get_gpio_pin+0x3a>
	int pin_val = -1;
    76c6:	2501      	movs	r5, #1
    76c8:	426d      	negs	r5, r5
		switch (pin) {
    76ca:	2c02      	cmp	r4, #2
    76cc:	d00f      	beq.n	76ee <get_gpio_pin+0x5e>
    76ce:	2c03      	cmp	r4, #3
    76d0:	d104      	bne.n	76dc <get_gpio_pin+0x4c>
			pin_val = PIN_PB03;
    76d2:	2523      	movs	r5, #35	; 0x23
    76d4:	e7e5      	b.n	76a2 <get_gpio_pin+0x12>
			pin_val = PIN_PA08;
    76d6:	000d      	movs	r5, r1
    76d8:	e7f7      	b.n	76ca <get_gpio_pin+0x3a>
			pin_val = PIN_PA09;
    76da:	000d      	movs	r5, r1
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    76dc:	2303      	movs	r3, #3
    76de:	9300      	str	r3, [sp, #0]
    76e0:	3b01      	subs	r3, #1
    76e2:	2209      	movs	r2, #9
    76e4:	2108      	movs	r1, #8
    76e6:	4803      	ldr	r0, [pc, #12]	; (76f4 <get_gpio_pin+0x64>)
    76e8:	4c03      	ldr	r4, [pc, #12]	; (76f8 <get_gpio_pin+0x68>)
    76ea:	47a0      	blx	r4
    76ec:	e7d9      	b.n	76a2 <get_gpio_pin+0x12>
			pin_val = PIN_PB02;
    76ee:	2522      	movs	r5, #34	; 0x22
	return pin_val;
    76f0:	e7d7      	b.n	76a2 <get_gpio_pin+0x12>
    76f2:	46c0      	nop			; (mov r8, r8)
    76f4:	00011d10 	.word	0x00011d10
    76f8:	0000b339 	.word	0x0000b339

000076fc <help>:

/**
 * Prints out information about the available cli commands.
 */
void help()
{
    76fc:	b510      	push	{r4, lr}
	printf("help - Prints all the available commands and a short synopsis \r\n"
    76fe:	4802      	ldr	r0, [pc, #8]	; (7708 <help+0xc>)
    7700:	4b02      	ldr	r3, [pc, #8]	; (770c <help+0x10>)
    7702:	4798      	blx	r3
	       "adc_get [port] [pin] - Get the ADC value of the given pin. \r\n"
	       "mcu_temp - Reports the temperature of the mcu in Celsius. \r\n"
	       "i2c_scan - Prints out a list connected I2C slave addresses \r\n"
		   "relay_set - turns on relay \r\n"
		   "relay_clear - turns off relay \r\n");
}
    7704:	bd10      	pop	{r4, pc}
    7706:	46c0      	nop			; (mov r8, r8)
    7708:	00011d78 	.word	0x00011d78
    770c:	0000b455 	.word	0x0000b455

00007710 <ver_bl>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_bl()
{
    7710:	b510      	push	{r4, lr}
	printf("Version: %s \r\n", BL_VERSION);
    7712:	4902      	ldr	r1, [pc, #8]	; (771c <ver_bl+0xc>)
    7714:	4802      	ldr	r0, [pc, #8]	; (7720 <ver_bl+0x10>)
    7716:	4b03      	ldr	r3, [pc, #12]	; (7724 <ver_bl+0x14>)
    7718:	4798      	blx	r3
}
    771a:	bd10      	pop	{r4, pc}
    771c:	000124a8 	.word	0x000124a8
    7720:	000124b0 	.word	0x000124b0
    7724:	0000b339 	.word	0x0000b339

00007728 <ver_app>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_app()
{
    7728:	b510      	push	{r4, lr}
	printf("Version: %s \r\n", APP_VERSION);
    772a:	4902      	ldr	r1, [pc, #8]	; (7734 <ver_app+0xc>)
    772c:	4802      	ldr	r0, [pc, #8]	; (7738 <ver_app+0x10>)
    772e:	4b03      	ldr	r3, [pc, #12]	; (773c <ver_app+0x14>)
    7730:	4798      	blx	r3
}
    7732:	bd10      	pop	{r4, pc}
    7734:	000124a8 	.word	0x000124a8
    7738:	000124b0 	.word	0x000124b0
    773c:	0000b339 	.word	0x0000b339

00007740 <mac>:
 * Prints the MAC address of the Wi-Fi chip.
 *
 * For more information on MAC addresses, see <a href="https://en.wikipedia.org/wiki/MAC_address">Wikipedia</a>
 */
void mac()
{
    7740:	b510      	push	{r4, lr}
	printf("00.00.00.00\r\n");
    7742:	4802      	ldr	r0, [pc, #8]	; (774c <mac+0xc>)
    7744:	4b02      	ldr	r3, [pc, #8]	; (7750 <mac+0x10>)
    7746:	4798      	blx	r3
}
    7748:	bd10      	pop	{r4, pc}
    774a:	46c0      	nop			; (mov r8, r8)
    774c:	000122ec 	.word	0x000122ec
    7750:	0000b455 	.word	0x0000b455

00007754 <ip>:
 * Prints the IP address of the Wi-Fi chip.
 *
 * @note Currently this only returns a dummy IP address and will need to be updated.
 */
void ip()
{
    7754:	b510      	push	{r4, lr}
	printf("255.255.255.255 \r\n");
    7756:	4802      	ldr	r0, [pc, #8]	; (7760 <ip+0xc>)
    7758:	4b02      	ldr	r3, [pc, #8]	; (7764 <ip+0x10>)
    775a:	4798      	blx	r3
}
    775c:	bd10      	pop	{r4, pc}
    775e:	46c0      	nop			; (mov r8, r8)
    7760:	000122d8 	.word	0x000122d8
    7764:	0000b455 	.word	0x0000b455

00007768 <otafu>:

	
}

// 1 = update 0 check for upgrade
void otafu(uint8_t update_or_firmware) {
    7768:	b510      	push	{r4, lr}
	if(update_or_firmware) {
    776a:	2800      	cmp	r0, #0
    776c:	d00b      	beq.n	7786 <otafu+0x1e>
		if(download_firmware()) {
    776e:	4b0c      	ldr	r3, [pc, #48]	; (77a0 <otafu+0x38>)
    7770:	4798      	blx	r3
    7772:	2800      	cmp	r0, #0
    7774:	d003      	beq.n	777e <otafu+0x16>
			printf("firmware successfully downloaded!\r\n");
    7776:	480b      	ldr	r0, [pc, #44]	; (77a4 <otafu+0x3c>)
    7778:	4b0b      	ldr	r3, [pc, #44]	; (77a8 <otafu+0x40>)
    777a:	4798      	blx	r3
    777c:	e00a      	b.n	7794 <otafu+0x2c>
		} else {
			printf("download failed...\r\n");
    777e:	480b      	ldr	r0, [pc, #44]	; (77ac <otafu+0x44>)
    7780:	4b09      	ldr	r3, [pc, #36]	; (77a8 <otafu+0x40>)
    7782:	4798      	blx	r3
    7784:	e006      	b.n	7794 <otafu+0x2c>
		}
	} else {
		if(check_for_update()) {
    7786:	4b0a      	ldr	r3, [pc, #40]	; (77b0 <otafu+0x48>)
    7788:	4798      	blx	r3
    778a:	2800      	cmp	r0, #0
    778c:	d103      	bne.n	7796 <otafu+0x2e>
			printf("update available!\r\n");
		} else {
			printf("on latest version\r\n");
    778e:	4809      	ldr	r0, [pc, #36]	; (77b4 <otafu+0x4c>)
    7790:	4b05      	ldr	r3, [pc, #20]	; (77a8 <otafu+0x40>)
    7792:	4798      	blx	r3
		}
	}
	
}
    7794:	bd10      	pop	{r4, pc}
			printf("update available!\r\n");
    7796:	4808      	ldr	r0, [pc, #32]	; (77b8 <otafu+0x50>)
    7798:	4b03      	ldr	r3, [pc, #12]	; (77a8 <otafu+0x40>)
    779a:	4798      	blx	r3
    779c:	e7fa      	b.n	7794 <otafu+0x2c>
    779e:	46c0      	nop			; (mov r8, r8)
    77a0:	00001179 	.word	0x00001179
    77a4:	00012314 	.word	0x00012314
    77a8:	0000b455 	.word	0x0000b455
    77ac:	00012338 	.word	0x00012338
    77b0:	00001125 	.word	0x00001125
    77b4:	00012360 	.word	0x00012360
    77b8:	0001234c 	.word	0x0001234c

000077bc <i2c_scan>:
/**
 * Reports all connected I2C slave devices over a 7 bit (128) address space.
 *
 */
void i2c_scan()
{
    77bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    77be:	b089      	sub	sp, #36	; 0x24
	struct i2c_master_packet wr_packet = {
    77c0:	aa05      	add	r2, sp, #20
    77c2:	2300      	movs	r3, #0
    77c4:	7213      	strb	r3, [r2, #8]
    77c6:	7253      	strb	r3, [r2, #9]
    77c8:	7293      	strb	r3, [r2, #10]
		.data			=  0,
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};
	struct i2c_master_packet rd_packet = {
    77ca:	aa02      	add	r2, sp, #8
    77cc:	2101      	movs	r1, #1
    77ce:	8051      	strh	r1, [r2, #2]
    77d0:	9303      	str	r3, [sp, #12]
    77d2:	7213      	strb	r3, [r2, #8]
    77d4:	7253      	strb	r3, [r2, #9]
    77d6:	7293      	strb	r3, [r2, #10]
		.data			=  0,
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    77d8:	2400      	movs	r4, #0
		enum status_code i2c_status;
		wr_packet.address = slave_address;
    77da:	ad05      	add	r5, sp, #20
		rd_packet.address = slave_address;
		wr_packet.data_length = 0;
    77dc:	2700      	movs	r7, #0
		uint8_t wr_buffer = 0x05;
		wr_packet.data = &wr_buffer;
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &wr_packet);
    77de:	4e23      	ldr	r6, [pc, #140]	; (786c <i2c_scan+0xb0>)
    77e0:	e005      	b.n	77ee <i2c_scan+0x32>
		if (i2c_status == STATUS_OK) {
			i2c_status = i2c_master_read_packet_wait(&i2c_tsl2561, &rd_packet);
			printf("Address found at %#X\r\n", slave_address);
		}
		i2c_master_send_stop(&i2c_tsl2561);
    77e2:	4822      	ldr	r0, [pc, #136]	; (786c <i2c_scan+0xb0>)
    77e4:	4b22      	ldr	r3, [pc, #136]	; (7870 <i2c_scan+0xb4>)
    77e6:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    77e8:	3401      	adds	r4, #1
    77ea:	2c80      	cmp	r4, #128	; 0x80
    77ec:	d018      	beq.n	7820 <i2c_scan+0x64>
		wr_packet.address = slave_address;
    77ee:	b2a3      	uxth	r3, r4
    77f0:	802b      	strh	r3, [r5, #0]
		rd_packet.address = slave_address;
    77f2:	aa02      	add	r2, sp, #8
    77f4:	8013      	strh	r3, [r2, #0]
		wr_packet.data_length = 0;
    77f6:	806f      	strh	r7, [r5, #2]
		uint8_t wr_buffer = 0x05;
    77f8:	466b      	mov	r3, sp
    77fa:	2205      	movs	r2, #5
    77fc:	71da      	strb	r2, [r3, #7]
    77fe:	3307      	adds	r3, #7
		wr_packet.data = &wr_buffer;
    7800:	606b      	str	r3, [r5, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &wr_packet);
    7802:	0029      	movs	r1, r5
    7804:	0030      	movs	r0, r6
    7806:	4b1b      	ldr	r3, [pc, #108]	; (7874 <i2c_scan+0xb8>)
    7808:	4798      	blx	r3
		if (i2c_status == STATUS_OK) {
    780a:	2800      	cmp	r0, #0
    780c:	d1e9      	bne.n	77e2 <i2c_scan+0x26>
			i2c_status = i2c_master_read_packet_wait(&i2c_tsl2561, &rd_packet);
    780e:	a902      	add	r1, sp, #8
    7810:	4816      	ldr	r0, [pc, #88]	; (786c <i2c_scan+0xb0>)
    7812:	4b19      	ldr	r3, [pc, #100]	; (7878 <i2c_scan+0xbc>)
    7814:	4798      	blx	r3
			printf("Address found at %#X\r\n", slave_address);
    7816:	0021      	movs	r1, r4
    7818:	4818      	ldr	r0, [pc, #96]	; (787c <i2c_scan+0xc0>)
    781a:	4b19      	ldr	r3, [pc, #100]	; (7880 <i2c_scan+0xc4>)
    781c:	4798      	blx	r3
    781e:	e7e0      	b.n	77e2 <i2c_scan+0x26>
	}
	
	printf("Scanning temp bus\r\n");
    7820:	4818      	ldr	r0, [pc, #96]	; (7884 <i2c_scan+0xc8>)
    7822:	4b19      	ldr	r3, [pc, #100]	; (7888 <i2c_scan+0xcc>)
    7824:	4798      	blx	r3
	

	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7826:	2600      	movs	r6, #0
		//int slave_address = 64;
		enum status_code i2c_status;
		wr_packet.address = slave_address;
		rd_packet.address = slave_address;
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &wr_packet);
    7828:	4c18      	ldr	r4, [pc, #96]	; (788c <i2c_scan+0xd0>)
    782a:	4f12      	ldr	r7, [pc, #72]	; (7874 <i2c_scan+0xb8>)
		if (i2c_status == STATUS_OK) {
			i2c_status = i2c_master_read_packet_wait(&i2c_hdc, &rd_packet);
    782c:	0025      	movs	r5, r4
    782e:	e005      	b.n	783c <i2c_scan+0x80>
			printf("Address found at %#X\r\n", slave_address);
		}
		i2c_master_send_stop(&i2c_hdc);
    7830:	4816      	ldr	r0, [pc, #88]	; (788c <i2c_scan+0xd0>)
    7832:	4b0f      	ldr	r3, [pc, #60]	; (7870 <i2c_scan+0xb4>)
    7834:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7836:	3601      	adds	r6, #1
    7838:	2e80      	cmp	r6, #128	; 0x80
    783a:	d011      	beq.n	7860 <i2c_scan+0xa4>
		wr_packet.address = slave_address;
    783c:	b2b3      	uxth	r3, r6
    783e:	a905      	add	r1, sp, #20
    7840:	800b      	strh	r3, [r1, #0]
		rd_packet.address = slave_address;
    7842:	aa02      	add	r2, sp, #8
    7844:	8013      	strh	r3, [r2, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &wr_packet);
    7846:	0020      	movs	r0, r4
    7848:	47b8      	blx	r7
		if (i2c_status == STATUS_OK) {
    784a:	2800      	cmp	r0, #0
    784c:	d1f0      	bne.n	7830 <i2c_scan+0x74>
			i2c_status = i2c_master_read_packet_wait(&i2c_hdc, &rd_packet);
    784e:	a902      	add	r1, sp, #8
    7850:	0028      	movs	r0, r5
    7852:	4b09      	ldr	r3, [pc, #36]	; (7878 <i2c_scan+0xbc>)
    7854:	4798      	blx	r3
			printf("Address found at %#X\r\n", slave_address);
    7856:	0031      	movs	r1, r6
    7858:	4808      	ldr	r0, [pc, #32]	; (787c <i2c_scan+0xc0>)
    785a:	4b09      	ldr	r3, [pc, #36]	; (7880 <i2c_scan+0xc4>)
    785c:	4798      	blx	r3
    785e:	e7e7      	b.n	7830 <i2c_scan+0x74>
	}
	
	printf("Scans complete.\r\n");
    7860:	480b      	ldr	r0, [pc, #44]	; (7890 <i2c_scan+0xd4>)
    7862:	4b09      	ldr	r3, [pc, #36]	; (7888 <i2c_scan+0xcc>)
    7864:	4798      	blx	r3
}
    7866:	b009      	add	sp, #36	; 0x24
    7868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    786a:	46c0      	nop			; (mov r8, r8)
    786c:	20000540 	.word	0x20000540
    7870:	000075e5 	.word	0x000075e5
    7874:	000075d1 	.word	0x000075d1
    7878:	000075a9 	.word	0x000075a9
    787c:	00012064 	.word	0x00012064
    7880:	0000b339 	.word	0x0000b339
    7884:	0001207c 	.word	0x0001207c
    7888:	0000b455 	.word	0x0000b455
    788c:	2000029c 	.word	0x2000029c
    7890:	00012090 	.word	0x00012090

00007894 <print_general_error>:
 * Prints a general error message.
 *
 * @param func_name function where error occured.
 */
void print_general_error(char *func_name)
{
    7894:	b510      	push	{r4, lr}
    7896:	0001      	movs	r1, r0
	printf("there was an error parsing your args for %s. See help for correct usage.\r\n", func_name);
    7898:	4801      	ldr	r0, [pc, #4]	; (78a0 <print_general_error+0xc>)
    789a:	4b02      	ldr	r3, [pc, #8]	; (78a4 <print_general_error+0x10>)
    789c:	4798      	blx	r3
}
    789e:	bd10      	pop	{r4, pc}
    78a0:	000123e0 	.word	0x000123e0
    78a4:	0000b339 	.word	0x0000b339

000078a8 <print_args_error>:
 * @param func_name     name of the function where error occured
 * @param required_args number of arguments required for the function
 * @param num_args      number of arguments given to the function
 */
void print_args_error(char *func_name, int required_args, int num_args)
{
    78a8:	b510      	push	{r4, lr}
    78aa:	0013      	movs	r3, r2
	printf("Invalid number of args: %s requires %d arguments and you provided %d \r\n."
    78ac:	000a      	movs	r2, r1
    78ae:	0001      	movs	r1, r0
    78b0:	4801      	ldr	r0, [pc, #4]	; (78b8 <print_args_error+0x10>)
    78b2:	4c02      	ldr	r4, [pc, #8]	; (78bc <print_args_error+0x14>)
    78b4:	47a0      	blx	r4
	       "See help for more information. \r\n", func_name, required_args, num_args);
}
    78b6:	bd10      	pop	{r4, pc}
    78b8:	00012374 	.word	0x00012374
    78bc:	0000b339 	.word	0x0000b339

000078c0 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    78c0:	b510      	push	{r4, lr}
    78c2:	b08c      	sub	sp, #48	; 0x30
    78c4:	0004      	movs	r4, r0
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    78c6:	4668      	mov	r0, sp
    78c8:	4b11      	ldr	r3, [pc, #68]	; (7910 <configure_adc+0x50>)
    78ca:	4798      	blx	r3
	config_adc.positive_input = pin;
    78cc:	466b      	mov	r3, sp
    78ce:	731c      	strb	r4, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    78d0:	2301      	movs	r3, #1
    78d2:	466a      	mov	r2, sp
    78d4:	7053      	strb	r3, [r2, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    78d6:	2380      	movs	r3, #128	; 0x80
    78d8:	009b      	lsls	r3, r3, #2
    78da:	8053      	strh	r3, [r2, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    78dc:	4c0d      	ldr	r4, [pc, #52]	; (7914 <configure_adc+0x54>)
    78de:	490e      	ldr	r1, [pc, #56]	; (7918 <configure_adc+0x58>)
    78e0:	0020      	movs	r0, r4
    78e2:	4b0e      	ldr	r3, [pc, #56]	; (791c <configure_adc+0x5c>)
    78e4:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    78e6:	6822      	ldr	r2, [r4, #0]
    78e8:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    78ea:	b25b      	sxtb	r3, r3
    78ec:	2b00      	cmp	r3, #0
    78ee:	dbfb      	blt.n	78e8 <configure_adc+0x28>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    78f0:	230f      	movs	r3, #15
    78f2:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    78f4:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    78f6:	7813      	ldrb	r3, [r2, #0]
    78f8:	2102      	movs	r1, #2
    78fa:	430b      	orrs	r3, r1
    78fc:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    78fe:	4b05      	ldr	r3, [pc, #20]	; (7914 <configure_adc+0x54>)
    7900:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    7902:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    7904:	b25b      	sxtb	r3, r3
    7906:	2b00      	cmp	r3, #0
    7908:	dbfb      	blt.n	7902 <configure_adc+0x42>
	adc_enable(&adc_instance);
}
    790a:	b00c      	add	sp, #48	; 0x30
    790c:	bd10      	pop	{r4, pc}
    790e:	46c0      	nop			; (mov r8, r8)
    7910:	00005341 	.word	0x00005341
    7914:	20000724 	.word	0x20000724
    7918:	42004000 	.word	0x42004000
    791c:	00005389 	.word	0x00005389

00007920 <adc_get>:
{
    7920:	b530      	push	{r4, r5, lr}
    7922:	b083      	sub	sp, #12
	switch (port) {
    7924:	2861      	cmp	r0, #97	; 0x61
    7926:	d126      	bne.n	7976 <adc_get+0x56>
			switch (pin) {
    7928:	2902      	cmp	r1, #2
    792a:	d114      	bne.n	7956 <adc_get+0x36>
		configure_adc(pin_val);
    792c:	2000      	movs	r0, #0
    792e:	4b3e      	ldr	r3, [pc, #248]	; (7a28 <adc_get+0x108>)
    7930:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    7932:	4b3e      	ldr	r3, [pc, #248]	; (7a2c <adc_get+0x10c>)
    7934:	6819      	ldr	r1, [r3, #0]
    7936:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    7938:	b25b      	sxtb	r3, r3
    793a:	2b00      	cmp	r3, #0
    793c:	dbfb      	blt.n	7936 <adc_get+0x16>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    793e:	7b0b      	ldrb	r3, [r1, #12]
    7940:	2202      	movs	r2, #2
    7942:	4313      	orrs	r3, r2
    7944:	730b      	strb	r3, [r1, #12]
    7946:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    7948:	b25b      	sxtb	r3, r3
    794a:	2b00      	cmp	r3, #0
    794c:	dbfb      	blt.n	7946 <adc_get+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    794e:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    7950:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    7952:	2402      	movs	r4, #2
    7954:	e022      	b.n	799c <adc_get+0x7c>
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    7956:	4b36      	ldr	r3, [pc, #216]	; (7a30 <adc_get+0x110>)
    7958:	4798      	blx	r3
    795a:	2362      	movs	r3, #98	; 0x62
    795c:	5cc2      	ldrb	r2, [r0, r3]
    795e:	3b5f      	subs	r3, #95	; 0x5f
    7960:	4013      	ands	r3, r2
    7962:	2b02      	cmp	r3, #2
    7964:	d005      	beq.n	7972 <adc_get+0x52>
    7966:	2161      	movs	r1, #97	; 0x61
    7968:	2202      	movs	r2, #2
    796a:	4832      	ldr	r0, [pc, #200]	; (7a34 <adc_get+0x114>)
    796c:	4b32      	ldr	r3, [pc, #200]	; (7a38 <adc_get+0x118>)
    796e:	4798      	blx	r3
					break;
    7970:	e00e      	b.n	7990 <adc_get+0x70>
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    7972:	2141      	movs	r1, #65	; 0x41
    7974:	e7f8      	b.n	7968 <adc_get+0x48>
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    7976:	4b2e      	ldr	r3, [pc, #184]	; (7a30 <adc_get+0x110>)
    7978:	4798      	blx	r3
    797a:	2362      	movs	r3, #98	; 0x62
    797c:	5cc2      	ldrb	r2, [r0, r3]
    797e:	3b5f      	subs	r3, #95	; 0x5f
    7980:	4013      	ands	r3, r2
    7982:	2b02      	cmp	r3, #2
    7984:	d006      	beq.n	7994 <adc_get+0x74>
    7986:	2161      	movs	r1, #97	; 0x61
    7988:	2202      	movs	r2, #2
    798a:	482c      	ldr	r0, [pc, #176]	; (7a3c <adc_get+0x11c>)
    798c:	4b2a      	ldr	r3, [pc, #168]	; (7a38 <adc_get+0x118>)
    798e:	4798      	blx	r3
}
    7990:	b003      	add	sp, #12
    7992:	bd30      	pop	{r4, r5, pc}
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    7994:	2141      	movs	r1, #65	; 0x41
    7996:	e7f7      	b.n	7988 <adc_get+0x68>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    7998:	4210      	tst	r0, r2
    799a:	d10a      	bne.n	79b2 <adc_get+0x92>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    799c:	7e0b      	ldrb	r3, [r1, #24]
    799e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    79a0:	0002      	movs	r2, r0
    79a2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    79a4:	421d      	tst	r5, r3
    79a6:	d000      	beq.n	79aa <adc_get+0x8a>
		status_flags |= ADC_STATUS_WINDOW;
    79a8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    79aa:	421c      	tst	r4, r3
    79ac:	d0f4      	beq.n	7998 <adc_get+0x78>
		status_flags |= ADC_STATUS_OVERRUN;
    79ae:	432a      	orrs	r2, r5
    79b0:	e7f2      	b.n	7998 <adc_get+0x78>
    79b2:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    79b4:	b25b      	sxtb	r3, r3
    79b6:	2b00      	cmp	r3, #0
    79b8:	dbfb      	blt.n	79b2 <adc_get+0x92>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    79ba:	8b48      	ldrh	r0, [r1, #26]
    79bc:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    79be:	2301      	movs	r3, #1
    79c0:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    79c2:	7e0a      	ldrb	r2, [r1, #24]
    79c4:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    79c6:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    79c8:	0754      	lsls	r4, r2, #29
    79ca:	d501      	bpl.n	79d0 <adc_get+0xb0>
		status_flags |= ADC_STATUS_WINDOW;
    79cc:	2402      	movs	r4, #2
    79ce:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    79d0:	0792      	lsls	r2, r2, #30
    79d2:	d501      	bpl.n	79d8 <adc_get+0xb8>
		status_flags |= ADC_STATUS_OVERRUN;
    79d4:	2204      	movs	r2, #4
    79d6:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    79d8:	075b      	lsls	r3, r3, #29
    79da:	d501      	bpl.n	79e0 <adc_get+0xc0>
	adc_module->INTFLAG.reg = int_flags;
    79dc:	2302      	movs	r3, #2
    79de:	760b      	strb	r3, [r1, #24]
		float voltage = (adc_result/4095.0)*1.65; //TODO: set values, NO MAGIC NUMBERS
    79e0:	4b17      	ldr	r3, [pc, #92]	; (7a40 <adc_get+0x120>)
    79e2:	4798      	blx	r3
    79e4:	2200      	movs	r2, #0
    79e6:	4b17      	ldr	r3, [pc, #92]	; (7a44 <adc_get+0x124>)
    79e8:	4c17      	ldr	r4, [pc, #92]	; (7a48 <adc_get+0x128>)
    79ea:	47a0      	blx	r4
    79ec:	4a17      	ldr	r2, [pc, #92]	; (7a4c <adc_get+0x12c>)
    79ee:	4b18      	ldr	r3, [pc, #96]	; (7a50 <adc_get+0x130>)
    79f0:	4c18      	ldr	r4, [pc, #96]	; (7a54 <adc_get+0x134>)
    79f2:	47a0      	blx	r4
    79f4:	4b18      	ldr	r3, [pc, #96]	; (7a58 <adc_get+0x138>)
    79f6:	4798      	blx	r3
    79f8:	1c04      	adds	r4, r0, #0
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    79fa:	4b0d      	ldr	r3, [pc, #52]	; (7a30 <adc_get+0x110>)
    79fc:	4798      	blx	r3
    79fe:	2362      	movs	r3, #98	; 0x62
    7a00:	5cc2      	ldrb	r2, [r0, r3]
    7a02:	3b5f      	subs	r3, #95	; 0x5f
    7a04:	4013      	ands	r3, r2
    7a06:	2b02      	cmp	r3, #2
    7a08:	d00b      	beq.n	7a22 <adc_get+0x102>
    7a0a:	2561      	movs	r5, #97	; 0x61
    7a0c:	1c20      	adds	r0, r4, #0
    7a0e:	4b13      	ldr	r3, [pc, #76]	; (7a5c <adc_get+0x13c>)
    7a10:	4798      	blx	r3
    7a12:	9000      	str	r0, [sp, #0]
    7a14:	9101      	str	r1, [sp, #4]
    7a16:	2200      	movs	r2, #0
    7a18:	0029      	movs	r1, r5
    7a1a:	4811      	ldr	r0, [pc, #68]	; (7a60 <adc_get+0x140>)
    7a1c:	4b06      	ldr	r3, [pc, #24]	; (7a38 <adc_get+0x118>)
    7a1e:	4798      	blx	r3
}
    7a20:	e7b6      	b.n	7990 <adc_get+0x70>
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    7a22:	2541      	movs	r5, #65	; 0x41
    7a24:	e7f2      	b.n	7a0c <adc_get+0xec>
    7a26:	46c0      	nop			; (mov r8, r8)
    7a28:	000078c1 	.word	0x000078c1
    7a2c:	20000724 	.word	0x20000724
    7a30:	0000a859 	.word	0x0000a859
    7a34:	00011c58 	.word	0x00011c58
    7a38:	0000b339 	.word	0x0000b339
    7a3c:	00011ca8 	.word	0x00011ca8
    7a40:	0000fca1 	.word	0x0000fca1
    7a44:	40affe00 	.word	0x40affe00
    7a48:	0000e865 	.word	0x0000e865
    7a4c:	66666666 	.word	0x66666666
    7a50:	3ffa6666 	.word	0x3ffa6666
    7a54:	0000f0cd 	.word	0x0000f0cd
    7a58:	0000fe39 	.word	0x0000fe39
    7a5c:	0000fd95 	.word	0x0000fd95
    7a60:	00011cf8 	.word	0x00011cf8

00007a64 <mcu_temp>:
{
    7a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configure_adc(pin);
    7a66:	2018      	movs	r0, #24
    7a68:	4b34      	ldr	r3, [pc, #208]	; (7b3c <mcu_temp+0xd8>)
    7a6a:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    7a6c:	4b34      	ldr	r3, [pc, #208]	; (7b40 <mcu_temp+0xdc>)
    7a6e:	6819      	ldr	r1, [r3, #0]
    7a70:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    7a72:	b25b      	sxtb	r3, r3
    7a74:	2b00      	cmp	r3, #0
    7a76:	dbfb      	blt.n	7a70 <mcu_temp+0xc>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    7a78:	7b0b      	ldrb	r3, [r1, #12]
    7a7a:	2202      	movs	r2, #2
    7a7c:	4313      	orrs	r3, r2
    7a7e:	730b      	strb	r3, [r1, #12]
    7a80:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    7a82:	b25b      	sxtb	r3, r3
    7a84:	2b00      	cmp	r3, #0
    7a86:	dbfb      	blt.n	7a80 <mcu_temp+0x1c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    7a88:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    7a8a:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    7a8c:	2402      	movs	r4, #2
    7a8e:	e001      	b.n	7a94 <mcu_temp+0x30>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    7a90:	4210      	tst	r0, r2
    7a92:	d10a      	bne.n	7aaa <mcu_temp+0x46>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    7a94:	7e0b      	ldrb	r3, [r1, #24]
    7a96:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    7a98:	0002      	movs	r2, r0
    7a9a:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    7a9c:	421d      	tst	r5, r3
    7a9e:	d000      	beq.n	7aa2 <mcu_temp+0x3e>
		status_flags |= ADC_STATUS_WINDOW;
    7aa0:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    7aa2:	421c      	tst	r4, r3
    7aa4:	d0f4      	beq.n	7a90 <mcu_temp+0x2c>
		status_flags |= ADC_STATUS_OVERRUN;
    7aa6:	432a      	orrs	r2, r5
    7aa8:	e7f2      	b.n	7a90 <mcu_temp+0x2c>
    7aaa:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    7aac:	b25b      	sxtb	r3, r3
    7aae:	2b00      	cmp	r3, #0
    7ab0:	dbfb      	blt.n	7aaa <mcu_temp+0x46>
	*result = adc_module->RESULT.reg;
    7ab2:	8b4c      	ldrh	r4, [r1, #26]
    7ab4:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    7ab6:	2301      	movs	r3, #1
    7ab8:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    7aba:	7e0a      	ldrb	r2, [r1, #24]
    7abc:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    7abe:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    7ac0:	0750      	lsls	r0, r2, #29
    7ac2:	d501      	bpl.n	7ac8 <mcu_temp+0x64>
		status_flags |= ADC_STATUS_WINDOW;
    7ac4:	2002      	movs	r0, #2
    7ac6:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    7ac8:	0792      	lsls	r2, r2, #30
    7aca:	d501      	bpl.n	7ad0 <mcu_temp+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
    7acc:	2204      	movs	r2, #4
    7ace:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    7ad0:	075b      	lsls	r3, r3, #29
    7ad2:	d501      	bpl.n	7ad8 <mcu_temp+0x74>
	adc_module->INTFLAG.reg = int_flags;
    7ad4:	2302      	movs	r3, #2
    7ad6:	760b      	strb	r3, [r1, #24]
	if((adc_result & 0x8000) == 0) {
    7ad8:	b223      	sxth	r3, r4
    7ada:	2b00      	cmp	r3, #0
    7adc:	db18      	blt.n	7b10 <mcu_temp+0xac>
      temperature = (adc_result >> 8) + ((adc_result & 0x00F0)>>4)*0.5;
    7ade:	0620      	lsls	r0, r4, #24
    7ae0:	0f00      	lsrs	r0, r0, #28
    7ae2:	4d18      	ldr	r5, [pc, #96]	; (7b44 <mcu_temp+0xe0>)
    7ae4:	47a8      	blx	r5
    7ae6:	2200      	movs	r2, #0
    7ae8:	4b17      	ldr	r3, [pc, #92]	; (7b48 <mcu_temp+0xe4>)
    7aea:	4e18      	ldr	r6, [pc, #96]	; (7b4c <mcu_temp+0xe8>)
    7aec:	47b0      	blx	r6
    7aee:	0006      	movs	r6, r0
    7af0:	000f      	movs	r7, r1
    7af2:	0a20      	lsrs	r0, r4, #8
    7af4:	47a8      	blx	r5
    7af6:	0002      	movs	r2, r0
    7af8:	000b      	movs	r3, r1
    7afa:	0030      	movs	r0, r6
    7afc:	0039      	movs	r1, r7
    7afe:	4c14      	ldr	r4, [pc, #80]	; (7b50 <mcu_temp+0xec>)
    7b00:	47a0      	blx	r4
	printf("MCU temperature: %dC \r\n", (int) temperature);
    7b02:	4b14      	ldr	r3, [pc, #80]	; (7b54 <mcu_temp+0xf0>)
    7b04:	4798      	blx	r3
    7b06:	0001      	movs	r1, r0
    7b08:	4813      	ldr	r0, [pc, #76]	; (7b58 <mcu_temp+0xf4>)
    7b0a:	4b14      	ldr	r3, [pc, #80]	; (7b5c <mcu_temp+0xf8>)
    7b0c:	4798      	blx	r3
}
    7b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      uint16_t twosComplement = (~adc_result) + 1;
    7b10:	4264      	negs	r4, r4
    7b12:	b2a4      	uxth	r4, r4
      temperature = - (twosComplement >> 8) - ((twosComplement & 0x00F0)>>4)*0.5;
    7b14:	0a20      	lsrs	r0, r4, #8
    7b16:	4240      	negs	r0, r0
    7b18:	4d0a      	ldr	r5, [pc, #40]	; (7b44 <mcu_temp+0xe0>)
    7b1a:	47a8      	blx	r5
    7b1c:	0006      	movs	r6, r0
    7b1e:	000f      	movs	r7, r1
    7b20:	0624      	lsls	r4, r4, #24
    7b22:	0f20      	lsrs	r0, r4, #28
    7b24:	47a8      	blx	r5
    7b26:	2200      	movs	r2, #0
    7b28:	4b07      	ldr	r3, [pc, #28]	; (7b48 <mcu_temp+0xe4>)
    7b2a:	4c08      	ldr	r4, [pc, #32]	; (7b4c <mcu_temp+0xe8>)
    7b2c:	47a0      	blx	r4
    7b2e:	0002      	movs	r2, r0
    7b30:	000b      	movs	r3, r1
    7b32:	0030      	movs	r0, r6
    7b34:	0039      	movs	r1, r7
    7b36:	4c0a      	ldr	r4, [pc, #40]	; (7b60 <mcu_temp+0xfc>)
    7b38:	47a0      	blx	r4
    7b3a:	e7e2      	b.n	7b02 <mcu_temp+0x9e>
    7b3c:	000078c1 	.word	0x000078c1
    7b40:	20000724 	.word	0x20000724
    7b44:	0000fca1 	.word	0x0000fca1
    7b48:	3fe00000 	.word	0x3fe00000
    7b4c:	0000f0cd 	.word	0x0000f0cd
    7b50:	0000e245 	.word	0x0000e245
    7b54:	0000fc39 	.word	0x0000fc39
    7b58:	000122fc 	.word	0x000122fc
    7b5c:	0000b339 	.word	0x0000b339
    7b60:	0000f5cd 	.word	0x0000f5cd

00007b64 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    7b64:	b500      	push	{lr}
    7b66:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    7b68:	a901      	add	r1, sp, #4
    7b6a:	2301      	movs	r3, #1
    7b6c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    7b6e:	2200      	movs	r2, #0
    7b70:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    7b72:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(pin, &config_port_pin);
    7b74:	b2c0      	uxtb	r0, r0
    7b76:	4b02      	ldr	r3, [pc, #8]	; (7b80 <configure_port_pins_set+0x1c>)
    7b78:	4798      	blx	r3
}
    7b7a:	b003      	add	sp, #12
    7b7c:	bd00      	pop	{pc}
    7b7e:	46c0      	nop			; (mov r8, r8)
    7b80:	00009c21 	.word	0x00009c21

00007b84 <gpio_set>:
{
    7b84:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    7b86:	4b0d      	ldr	r3, [pc, #52]	; (7bbc <gpio_set+0x38>)
    7b88:	4798      	blx	r3
    7b8a:	0004      	movs	r4, r0
	if (pin_val != -1) {
    7b8c:	1c43      	adds	r3, r0, #1
    7b8e:	d013      	beq.n	7bb8 <gpio_set+0x34>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    7b90:	4b0b      	ldr	r3, [pc, #44]	; (7bc0 <gpio_set+0x3c>)
    7b92:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    7b94:	b2e2      	uxtb	r2, r4
		return NULL;
    7b96:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7b98:	0621      	lsls	r1, r4, #24
    7b9a:	d404      	bmi.n	7ba6 <gpio_set+0x22>
		return &(ports[port_index]->Group[group_index]);
    7b9c:	0953      	lsrs	r3, r2, #5
    7b9e:	01db      	lsls	r3, r3, #7
    7ba0:	4908      	ldr	r1, [pc, #32]	; (7bc4 <gpio_set+0x40>)
    7ba2:	468c      	mov	ip, r1
    7ba4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7ba6:	211f      	movs	r1, #31
    7ba8:	4011      	ands	r1, r2
    7baa:	2201      	movs	r2, #1
    7bac:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7bae:	619a      	str	r2, [r3, #24]
		printf("Pin %d set high\r\n", pin_val);
    7bb0:	0021      	movs	r1, r4
    7bb2:	4805      	ldr	r0, [pc, #20]	; (7bc8 <gpio_set+0x44>)
    7bb4:	4b05      	ldr	r3, [pc, #20]	; (7bcc <gpio_set+0x48>)
    7bb6:	4798      	blx	r3
}
    7bb8:	bd10      	pop	{r4, pc}
    7bba:	46c0      	nop			; (mov r8, r8)
    7bbc:	00007691 	.word	0x00007691
    7bc0:	00007b65 	.word	0x00007b65
    7bc4:	41004400 	.word	0x41004400
    7bc8:	00011d64 	.word	0x00011d64
    7bcc:	0000b339 	.word	0x0000b339

00007bd0 <gpio_clear>:
{
    7bd0:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    7bd2:	4b0d      	ldr	r3, [pc, #52]	; (7c08 <gpio_clear+0x38>)
    7bd4:	4798      	blx	r3
    7bd6:	0004      	movs	r4, r0
	if (pin_val != -1) {
    7bd8:	1c43      	adds	r3, r0, #1
    7bda:	d013      	beq.n	7c04 <gpio_clear+0x34>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    7bdc:	4b0b      	ldr	r3, [pc, #44]	; (7c0c <gpio_clear+0x3c>)
    7bde:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    7be0:	b2e2      	uxtb	r2, r4
		return NULL;
    7be2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7be4:	0621      	lsls	r1, r4, #24
    7be6:	d404      	bmi.n	7bf2 <gpio_clear+0x22>
		return &(ports[port_index]->Group[group_index]);
    7be8:	0953      	lsrs	r3, r2, #5
    7bea:	01db      	lsls	r3, r3, #7
    7bec:	4908      	ldr	r1, [pc, #32]	; (7c10 <gpio_clear+0x40>)
    7bee:	468c      	mov	ip, r1
    7bf0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7bf2:	211f      	movs	r1, #31
    7bf4:	4011      	ands	r1, r2
    7bf6:	2201      	movs	r2, #1
    7bf8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7bfa:	615a      	str	r2, [r3, #20]
		printf("Pin %d cleared\r\n", pin_val);
    7bfc:	0021      	movs	r1, r4
    7bfe:	4805      	ldr	r0, [pc, #20]	; (7c14 <gpio_clear+0x44>)
    7c00:	4b05      	ldr	r3, [pc, #20]	; (7c18 <gpio_clear+0x48>)
    7c02:	4798      	blx	r3
}
    7c04:	bd10      	pop	{r4, pc}
    7c06:	46c0      	nop			; (mov r8, r8)
    7c08:	00007691 	.word	0x00007691
    7c0c:	00007b65 	.word	0x00007b65
    7c10:	41004400 	.word	0x41004400
    7c14:	00011d3c 	.word	0x00011d3c
    7c18:	0000b339 	.word	0x0000b339

00007c1c <get_moisture>:
{
    7c1c:	b570      	push	{r4, r5, r6, lr}
	configure_port_pins_set(PIN_PA17);
    7c1e:	2011      	movs	r0, #17
    7c20:	4b26      	ldr	r3, [pc, #152]	; (7cbc <get_moisture+0xa0>)
    7c22:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    7c24:	2280      	movs	r2, #128	; 0x80
    7c26:	0292      	lsls	r2, r2, #10
    7c28:	4b25      	ldr	r3, [pc, #148]	; (7cc0 <get_moisture+0xa4>)
    7c2a:	619a      	str	r2, [r3, #24]
	delay_ms(500);
    7c2c:	20fa      	movs	r0, #250	; 0xfa
    7c2e:	0040      	lsls	r0, r0, #1
    7c30:	4b24      	ldr	r3, [pc, #144]	; (7cc4 <get_moisture+0xa8>)
    7c32:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    7c34:	4b24      	ldr	r3, [pc, #144]	; (7cc8 <get_moisture+0xac>)
    7c36:	6819      	ldr	r1, [r3, #0]
    7c38:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    7c3a:	b25b      	sxtb	r3, r3
    7c3c:	2b00      	cmp	r3, #0
    7c3e:	dbfb      	blt.n	7c38 <get_moisture+0x1c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    7c40:	7b0b      	ldrb	r3, [r1, #12]
    7c42:	2202      	movs	r2, #2
    7c44:	4313      	orrs	r3, r2
    7c46:	730b      	strb	r3, [r1, #12]
    7c48:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    7c4a:	b25b      	sxtb	r3, r3
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	dbfb      	blt.n	7c48 <get_moisture+0x2c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    7c50:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    7c52:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    7c54:	2402      	movs	r4, #2
    7c56:	e001      	b.n	7c5c <get_moisture+0x40>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    7c58:	4210      	tst	r0, r2
    7c5a:	d10a      	bne.n	7c72 <get_moisture+0x56>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    7c5c:	7e0b      	ldrb	r3, [r1, #24]
    7c5e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    7c60:	0002      	movs	r2, r0
    7c62:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    7c64:	421d      	tst	r5, r3
    7c66:	d000      	beq.n	7c6a <get_moisture+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
    7c68:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    7c6a:	421c      	tst	r4, r3
    7c6c:	d0f4      	beq.n	7c58 <get_moisture+0x3c>
		status_flags |= ADC_STATUS_OVERRUN;
    7c6e:	432a      	orrs	r2, r5
    7c70:	e7f2      	b.n	7c58 <get_moisture+0x3c>
    7c72:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    7c74:	b25b      	sxtb	r3, r3
    7c76:	2b00      	cmp	r3, #0
    7c78:	dbfb      	blt.n	7c72 <get_moisture+0x56>
	*result = adc_module->RESULT.reg;
    7c7a:	8b48      	ldrh	r0, [r1, #26]
    7c7c:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    7c7e:	2301      	movs	r3, #1
    7c80:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    7c82:	7e0a      	ldrb	r2, [r1, #24]
    7c84:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    7c86:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    7c88:	0754      	lsls	r4, r2, #29
    7c8a:	d501      	bpl.n	7c90 <get_moisture+0x74>
		status_flags |= ADC_STATUS_WINDOW;
    7c8c:	2402      	movs	r4, #2
    7c8e:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    7c90:	0792      	lsls	r2, r2, #30
    7c92:	d501      	bpl.n	7c98 <get_moisture+0x7c>
		status_flags |= ADC_STATUS_OVERRUN;
    7c94:	2204      	movs	r2, #4
    7c96:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    7c98:	075b      	lsls	r3, r3, #29
    7c9a:	d501      	bpl.n	7ca0 <get_moisture+0x84>
	adc_module->INTFLAG.reg = int_flags;
    7c9c:	2302      	movs	r3, #2
    7c9e:	760b      	strb	r3, [r1, #24]
		port_base->OUTCLR.reg = pin_mask;
    7ca0:	2280      	movs	r2, #128	; 0x80
    7ca2:	0292      	lsls	r2, r2, #10
    7ca4:	4b06      	ldr	r3, [pc, #24]	; (7cc0 <get_moisture+0xa4>)
    7ca6:	615a      	str	r2, [r3, #20]
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
    7ca8:	4b08      	ldr	r3, [pc, #32]	; (7ccc <get_moisture+0xb0>)
    7caa:	4798      	blx	r3
    7cac:	4908      	ldr	r1, [pc, #32]	; (7cd0 <get_moisture+0xb4>)
    7cae:	4b09      	ldr	r3, [pc, #36]	; (7cd4 <get_moisture+0xb8>)
    7cb0:	4798      	blx	r3
    7cb2:	4909      	ldr	r1, [pc, #36]	; (7cd8 <get_moisture+0xbc>)
    7cb4:	4b09      	ldr	r3, [pc, #36]	; (7cdc <get_moisture+0xc0>)
    7cb6:	4798      	blx	r3
}
    7cb8:	bd70      	pop	{r4, r5, r6, pc}
    7cba:	46c0      	nop			; (mov r8, r8)
    7cbc:	00007b65 	.word	0x00007b65
    7cc0:	41004400 	.word	0x41004400
    7cc4:	00009905 	.word	0x00009905
    7cc8:	20000724 	.word	0x20000724
    7ccc:	0000e1a5 	.word	0x0000e1a5
    7cd0:	457ff000 	.word	0x457ff000
    7cd4:	0000dcd5 	.word	0x0000dcd5
    7cd8:	42c80000 	.word	0x42c80000
    7cdc:	0000df65 	.word	0x0000df65

00007ce0 <read_sensor>:
{
    7ce0:	b5d0      	push	{r4, r6, r7, lr}
    7ce2:	b082      	sub	sp, #8
    7ce4:	0004      	movs	r4, r0
	if(!strcmp("lux", sensor_name)) {
    7ce6:	0001      	movs	r1, r0
    7ce8:	481a      	ldr	r0, [pc, #104]	; (7d54 <read_sensor+0x74>)
    7cea:	4b1b      	ldr	r3, [pc, #108]	; (7d58 <read_sensor+0x78>)
    7cec:	4798      	blx	r3
    7cee:	2800      	cmp	r0, #0
    7cf0:	d00d      	beq.n	7d0e <read_sensor+0x2e>
	if(!strcmp("temp", sensor_name)) {
    7cf2:	0021      	movs	r1, r4
    7cf4:	4819      	ldr	r0, [pc, #100]	; (7d5c <read_sensor+0x7c>)
    7cf6:	4b18      	ldr	r3, [pc, #96]	; (7d58 <read_sensor+0x78>)
    7cf8:	4798      	blx	r3
    7cfa:	2800      	cmp	r0, #0
    7cfc:	d012      	beq.n	7d24 <read_sensor+0x44>
	if(!strcmp("moisture", sensor_name)) {
    7cfe:	0021      	movs	r1, r4
    7d00:	4817      	ldr	r0, [pc, #92]	; (7d60 <read_sensor+0x80>)
    7d02:	4b15      	ldr	r3, [pc, #84]	; (7d58 <read_sensor+0x78>)
    7d04:	4798      	blx	r3
    7d06:	2800      	cmp	r0, #0
    7d08:	d01a      	beq.n	7d40 <read_sensor+0x60>
}
    7d0a:	b002      	add	sp, #8
    7d0c:	bdd0      	pop	{r4, r6, r7, pc}
		power_on_tsl2561();
    7d0e:	4b15      	ldr	r3, [pc, #84]	; (7d64 <read_sensor+0x84>)
    7d10:	4798      	blx	r3
		printf("Current lux: %d\r\n", get_lux());
    7d12:	4b15      	ldr	r3, [pc, #84]	; (7d68 <read_sensor+0x88>)
    7d14:	4798      	blx	r3
    7d16:	0001      	movs	r1, r0
    7d18:	4814      	ldr	r0, [pc, #80]	; (7d6c <read_sensor+0x8c>)
    7d1a:	4b15      	ldr	r3, [pc, #84]	; (7d70 <read_sensor+0x90>)
    7d1c:	4798      	blx	r3
		power_off_tsl2561();
    7d1e:	4b15      	ldr	r3, [pc, #84]	; (7d74 <read_sensor+0x94>)
    7d20:	4798      	blx	r3
    7d22:	e7e6      	b.n	7cf2 <read_sensor+0x12>
		double temperature = get_temp();
    7d24:	4b14      	ldr	r3, [pc, #80]	; (7d78 <read_sensor+0x98>)
    7d26:	4798      	blx	r3
    7d28:	0006      	movs	r6, r0
    7d2a:	000f      	movs	r7, r1
		double humidity = get_humidity();
    7d2c:	4b13      	ldr	r3, [pc, #76]	; (7d7c <read_sensor+0x9c>)
    7d2e:	4798      	blx	r3
		printf("Current temperature: %3.2f\r\n Current humidity: %3.2f\r\n", temperature, humidity);
    7d30:	9000      	str	r0, [sp, #0]
    7d32:	9101      	str	r1, [sp, #4]
    7d34:	0032      	movs	r2, r6
    7d36:	003b      	movs	r3, r7
    7d38:	4811      	ldr	r0, [pc, #68]	; (7d80 <read_sensor+0xa0>)
    7d3a:	490d      	ldr	r1, [pc, #52]	; (7d70 <read_sensor+0x90>)
    7d3c:	4788      	blx	r1
    7d3e:	e7de      	b.n	7cfe <read_sensor+0x1e>
		float m_value = get_moisture();
    7d40:	4b10      	ldr	r3, [pc, #64]	; (7d84 <read_sensor+0xa4>)
    7d42:	4798      	blx	r3
		printf("Current moisture: %.02f %% \r\n", m_value);
    7d44:	4b10      	ldr	r3, [pc, #64]	; (7d88 <read_sensor+0xa8>)
    7d46:	4798      	blx	r3
    7d48:	0002      	movs	r2, r0
    7d4a:	000b      	movs	r3, r1
    7d4c:	480f      	ldr	r0, [pc, #60]	; (7d8c <read_sensor+0xac>)
    7d4e:	4908      	ldr	r1, [pc, #32]	; (7d70 <read_sensor+0x90>)
    7d50:	4788      	blx	r1
}
    7d52:	e7da      	b.n	7d0a <read_sensor+0x2a>
    7d54:	0001242c 	.word	0x0001242c
    7d58:	0000b63d 	.word	0x0000b63d
    7d5c:	000120fc 	.word	0x000120fc
    7d60:	0001247c 	.word	0x0001247c
    7d64:	00001371 	.word	0x00001371
    7d68:	000013fd 	.word	0x000013fd
    7d6c:	00012430 	.word	0x00012430
    7d70:	0000b339 	.word	0x0000b339
    7d74:	0000138d 	.word	0x0000138d
    7d78:	00000575 	.word	0x00000575
    7d7c:	00000545 	.word	0x00000545
    7d80:	00012444 	.word	0x00012444
    7d84:	00007c1d 	.word	0x00007c1d
    7d88:	0000fd95 	.word	0x0000fd95
    7d8c:	00012488 	.word	0x00012488

00007d90 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
    7d90:	b500      	push	{lr}
    7d92:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    7d94:	a901      	add	r1, sp, #4
    7d96:	2300      	movs	r3, #0
    7d98:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    7d9a:	2201      	movs	r2, #1
    7d9c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    7d9e:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(pin, &config_port_pin);
    7da0:	b2c0      	uxtb	r0, r0
    7da2:	4b02      	ldr	r3, [pc, #8]	; (7dac <configure_port_pins_get+0x1c>)
    7da4:	4798      	blx	r3
}
    7da6:	b003      	add	sp, #12
    7da8:	bd00      	pop	{pc}
    7daa:	46c0      	nop			; (mov r8, r8)
    7dac:	00009c21 	.word	0x00009c21

00007db0 <gpio_get>:
{
    7db0:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    7db2:	4b0d      	ldr	r3, [pc, #52]	; (7de8 <gpio_get+0x38>)
    7db4:	4798      	blx	r3
    7db6:	0004      	movs	r4, r0
	configure_port_pins_get(pin_val); //TODO: decide if this is necessary
    7db8:	4b0c      	ldr	r3, [pc, #48]	; (7dec <gpio_get+0x3c>)
    7dba:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    7dbc:	b2e0      	uxtb	r0, r4
		return NULL;
    7dbe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7dc0:	0622      	lsls	r2, r4, #24
    7dc2:	d404      	bmi.n	7dce <gpio_get+0x1e>
		return &(ports[port_index]->Group[group_index]);
    7dc4:	0943      	lsrs	r3, r0, #5
    7dc6:	01db      	lsls	r3, r3, #7
    7dc8:	4a09      	ldr	r2, [pc, #36]	; (7df0 <gpio_get+0x40>)
    7dca:	4694      	mov	ip, r2
    7dcc:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
    7dce:	6a1a      	ldr	r2, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7dd0:	211f      	movs	r1, #31
    7dd2:	4001      	ands	r1, r0
    7dd4:	2301      	movs	r3, #1
    7dd6:	408b      	lsls	r3, r1
	return (port_base->IN.reg & pin_mask);
    7dd8:	401a      	ands	r2, r3
    7dda:	1e53      	subs	r3, r2, #1
    7ddc:	419a      	sbcs	r2, r3
	printf("pin %d value: %d\r\n", pin_val, state);
    7dde:	0021      	movs	r1, r4
    7de0:	4804      	ldr	r0, [pc, #16]	; (7df4 <gpio_get+0x44>)
    7de2:	4b05      	ldr	r3, [pc, #20]	; (7df8 <gpio_get+0x48>)
    7de4:	4798      	blx	r3
}
    7de6:	bd10      	pop	{r4, pc}
    7de8:	00007691 	.word	0x00007691
    7dec:	00007d91 	.word	0x00007d91
    7df0:	41004400 	.word	0x41004400
    7df4:	00011d50 	.word	0x00011d50
    7df8:	0000b339 	.word	0x0000b339

00007dfc <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
    7dfc:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA21);
    7dfe:	2015      	movs	r0, #21
    7e00:	4b03      	ldr	r3, [pc, #12]	; (7e10 <led1_on+0x14>)
    7e02:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    7e04:	2280      	movs	r2, #128	; 0x80
    7e06:	0392      	lsls	r2, r2, #14
    7e08:	4b02      	ldr	r3, [pc, #8]	; (7e14 <led1_on+0x18>)
    7e0a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA21, true);	
}
    7e0c:	bd10      	pop	{r4, pc}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	00007b65 	.word	0x00007b65
    7e14:	41004400 	.word	0x41004400

00007e18 <led1_off>:

void led1_off(void)
{
    7e18:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA21);
    7e1a:	2015      	movs	r0, #21
    7e1c:	4b03      	ldr	r3, [pc, #12]	; (7e2c <led1_off+0x14>)
    7e1e:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7e20:	2280      	movs	r2, #128	; 0x80
    7e22:	0392      	lsls	r2, r2, #14
    7e24:	4b02      	ldr	r3, [pc, #8]	; (7e30 <led1_off+0x18>)
    7e26:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA21, false);
}
    7e28:	bd10      	pop	{r4, pc}
    7e2a:	46c0      	nop			; (mov r8, r8)
    7e2c:	00007b65 	.word	0x00007b65
    7e30:	41004400 	.word	0x41004400

00007e34 <led2_on>:

void led2_on(void)
{
    7e34:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA03);
    7e36:	2003      	movs	r0, #3
    7e38:	4b02      	ldr	r3, [pc, #8]	; (7e44 <led2_on+0x10>)
    7e3a:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    7e3c:	2208      	movs	r2, #8
    7e3e:	4b02      	ldr	r3, [pc, #8]	; (7e48 <led2_on+0x14>)
    7e40:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA03, true);
}
    7e42:	bd10      	pop	{r4, pc}
    7e44:	00007b65 	.word	0x00007b65
    7e48:	41004400 	.word	0x41004400

00007e4c <led2_off>:

void led2_off(void)
{
    7e4c:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA03);
    7e4e:	2003      	movs	r0, #3
    7e50:	4b02      	ldr	r3, [pc, #8]	; (7e5c <led2_off+0x10>)
    7e52:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7e54:	2208      	movs	r2, #8
    7e56:	4b02      	ldr	r3, [pc, #8]	; (7e60 <led2_off+0x14>)
    7e58:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA03, false);
}
    7e5a:	bd10      	pop	{r4, pc}
    7e5c:	00007b65 	.word	0x00007b65
    7e60:	41004400 	.word	0x41004400

00007e64 <boost_enable>:

void boost_enable(void)
{
    7e64:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA20);
    7e66:	2014      	movs	r0, #20
    7e68:	4b03      	ldr	r3, [pc, #12]	; (7e78 <boost_enable+0x14>)
    7e6a:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    7e6c:	2280      	movs	r2, #128	; 0x80
    7e6e:	0352      	lsls	r2, r2, #13
    7e70:	4b02      	ldr	r3, [pc, #8]	; (7e7c <boost_enable+0x18>)
    7e72:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA20, true);
}
    7e74:	bd10      	pop	{r4, pc}
    7e76:	46c0      	nop			; (mov r8, r8)
    7e78:	00007b65 	.word	0x00007b65
    7e7c:	41004400 	.word	0x41004400

00007e80 <boost_disable>:

void boost_disable(void)
{
    7e80:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA20);
    7e82:	2014      	movs	r0, #20
    7e84:	4b03      	ldr	r3, [pc, #12]	; (7e94 <boost_disable+0x14>)
    7e86:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7e88:	2280      	movs	r2, #128	; 0x80
    7e8a:	0352      	lsls	r2, r2, #13
    7e8c:	4b02      	ldr	r3, [pc, #8]	; (7e98 <boost_disable+0x18>)
    7e8e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA20, false);
}
    7e90:	bd10      	pop	{r4, pc}
    7e92:	46c0      	nop			; (mov r8, r8)
    7e94:	00007b65 	.word	0x00007b65
    7e98:	41004400 	.word	0x41004400

00007e9c <relay1_enable>:

void relay1_enable(void)
{
    7e9c:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB02);
    7e9e:	2022      	movs	r0, #34	; 0x22
    7ea0:	4b02      	ldr	r3, [pc, #8]	; (7eac <relay1_enable+0x10>)
    7ea2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    7ea4:	2204      	movs	r2, #4
    7ea6:	4b02      	ldr	r3, [pc, #8]	; (7eb0 <relay1_enable+0x14>)
    7ea8:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB02, true);
}
    7eaa:	bd10      	pop	{r4, pc}
    7eac:	00007b65 	.word	0x00007b65
    7eb0:	41004480 	.word	0x41004480

00007eb4 <relay1_disable>:

void relay1_disable(void)
{
    7eb4:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB02);
    7eb6:	2022      	movs	r0, #34	; 0x22
    7eb8:	4b02      	ldr	r3, [pc, #8]	; (7ec4 <relay1_disable+0x10>)
    7eba:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7ebc:	2204      	movs	r2, #4
    7ebe:	4b02      	ldr	r3, [pc, #8]	; (7ec8 <relay1_disable+0x14>)
    7ec0:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB02, false);
}
    7ec2:	bd10      	pop	{r4, pc}
    7ec4:	00007b65 	.word	0x00007b65
    7ec8:	41004480 	.word	0x41004480

00007ecc <relay2_enable>:

void relay2_enable(void)
{
    7ecc:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB03);
    7ece:	2023      	movs	r0, #35	; 0x23
    7ed0:	4b02      	ldr	r3, [pc, #8]	; (7edc <relay2_enable+0x10>)
    7ed2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    7ed4:	2208      	movs	r2, #8
    7ed6:	4b02      	ldr	r3, [pc, #8]	; (7ee0 <relay2_enable+0x14>)
    7ed8:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB03, true);
}
    7eda:	bd10      	pop	{r4, pc}
    7edc:	00007b65 	.word	0x00007b65
    7ee0:	41004480 	.word	0x41004480

00007ee4 <relay2_disable>:

void relay2_disable(void)
{
    7ee4:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB03);
    7ee6:	2023      	movs	r0, #35	; 0x23
    7ee8:	4b02      	ldr	r3, [pc, #8]	; (7ef4 <relay2_disable+0x10>)
    7eea:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7eec:	2208      	movs	r2, #8
    7eee:	4b02      	ldr	r3, [pc, #8]	; (7ef8 <relay2_disable+0x14>)
    7ef0:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB03, false);
}
    7ef2:	bd10      	pop	{r4, pc}
    7ef4:	00007b65 	.word	0x00007b65
    7ef8:	41004480 	.word	0x41004480

00007efc <gpio5_enable>:

void gpio5_enable(void)
{
    7efc:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB23);
    7efe:	2037      	movs	r0, #55	; 0x37
    7f00:	4b03      	ldr	r3, [pc, #12]	; (7f10 <gpio5_enable+0x14>)
    7f02:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    7f04:	2280      	movs	r2, #128	; 0x80
    7f06:	0412      	lsls	r2, r2, #16
    7f08:	4b02      	ldr	r3, [pc, #8]	; (7f14 <gpio5_enable+0x18>)
    7f0a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB23, true);
}
    7f0c:	bd10      	pop	{r4, pc}
    7f0e:	46c0      	nop			; (mov r8, r8)
    7f10:	00007b65 	.word	0x00007b65
    7f14:	41004480 	.word	0x41004480

00007f18 <gpio5_disable>:

void gpio5_disable(void)
{
    7f18:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB23);
    7f1a:	2037      	movs	r0, #55	; 0x37
    7f1c:	4b03      	ldr	r3, [pc, #12]	; (7f2c <gpio5_disable+0x14>)
    7f1e:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7f20:	2280      	movs	r2, #128	; 0x80
    7f22:	0412      	lsls	r2, r2, #16
    7f24:	4b02      	ldr	r3, [pc, #8]	; (7f30 <gpio5_disable+0x18>)
    7f26:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB23, false);
}
    7f28:	bd10      	pop	{r4, pc}
    7f2a:	46c0      	nop			; (mov r8, r8)
    7f2c:	00007b65 	.word	0x00007b65
    7f30:	41004480 	.word	0x41004480

00007f34 <run_pump>:

	tcc_init(&tcc_instance_pwm, CONF_PWM_MODULE, &config_tcc);
	tcc_enable(&tcc_instance_pwm);
}

void run_pump(int duration) {
    7f34:	b510      	push	{r4, lr}
    7f36:	0004      	movs	r4, r0
	
	//boost_enable();
	gpio5_enable();
    7f38:	4b06      	ldr	r3, [pc, #24]	; (7f54 <run_pump+0x20>)
    7f3a:	4798      	blx	r3
// 		{
// 			ramp_tcc_pwm(0xFFFF*i);
// 			delay_ms(2000);
// 		}
		
	delay_ms(duration); //duration of pump
    7f3c:	2c00      	cmp	r4, #0
    7f3e:	d105      	bne.n	7f4c <run_pump+0x18>
    7f40:	2001      	movs	r0, #1
    7f42:	4b05      	ldr	r3, [pc, #20]	; (7f58 <run_pump+0x24>)
    7f44:	4798      	blx	r3
	
	//tcc_disable(&tcc_instance_pwm);
	gpio5_disable();
    7f46:	4b05      	ldr	r3, [pc, #20]	; (7f5c <run_pump+0x28>)
    7f48:	4798      	blx	r3
	//boost_disable();
	
    7f4a:	bd10      	pop	{r4, pc}
	delay_ms(duration); //duration of pump
    7f4c:	0020      	movs	r0, r4
    7f4e:	4b04      	ldr	r3, [pc, #16]	; (7f60 <run_pump+0x2c>)
    7f50:	4798      	blx	r3
    7f52:	e7f8      	b.n	7f46 <run_pump+0x12>
    7f54:	00007efd 	.word	0x00007efd
    7f58:	000098d9 	.word	0x000098d9
    7f5c:	00007f19 	.word	0x00007f19
    7f60:	00009905 	.word	0x00009905

00007f64 <input_handle>:
{
    7f64:	b570      	push	{r4, r5, r6, lr}
    7f66:	0005      	movs	r5, r0
    7f68:	000e      	movs	r6, r1
	if (!(strcmp("help", argv[0]))) {
    7f6a:	680c      	ldr	r4, [r1, #0]
    7f6c:	0021      	movs	r1, r4
    7f6e:	48bc      	ldr	r0, [pc, #752]	; (8260 <input_handle+0x2fc>)
    7f70:	4bbc      	ldr	r3, [pc, #752]	; (8264 <input_handle+0x300>)
    7f72:	4798      	blx	r3
    7f74:	2800      	cmp	r0, #0
    7f76:	d10a      	bne.n	7f8e <input_handle+0x2a>
		if (argc != required_args) {
    7f78:	2d01      	cmp	r5, #1
    7f7a:	d005      	beq.n	7f88 <input_handle+0x24>
			print_args_error("help", required_args, argc);
    7f7c:	002a      	movs	r2, r5
    7f7e:	2101      	movs	r1, #1
    7f80:	48b7      	ldr	r0, [pc, #732]	; (8260 <input_handle+0x2fc>)
    7f82:	4bb9      	ldr	r3, [pc, #740]	; (8268 <input_handle+0x304>)
    7f84:	4798      	blx	r3
}
    7f86:	bd70      	pop	{r4, r5, r6, pc}
		help();
    7f88:	4bb8      	ldr	r3, [pc, #736]	; (826c <input_handle+0x308>)
    7f8a:	4798      	blx	r3
    7f8c:	e7fb      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("ver_bl", argv[0]))) {
    7f8e:	0021      	movs	r1, r4
    7f90:	48b7      	ldr	r0, [pc, #732]	; (8270 <input_handle+0x30c>)
    7f92:	4bb4      	ldr	r3, [pc, #720]	; (8264 <input_handle+0x300>)
    7f94:	4798      	blx	r3
    7f96:	2800      	cmp	r0, #0
    7f98:	d10a      	bne.n	7fb0 <input_handle+0x4c>
		if (argc != required_args) {
    7f9a:	2d01      	cmp	r5, #1
    7f9c:	d005      	beq.n	7faa <input_handle+0x46>
			print_args_error("ver_bl", required_args, argc);
    7f9e:	002a      	movs	r2, r5
    7fa0:	2101      	movs	r1, #1
    7fa2:	48b3      	ldr	r0, [pc, #716]	; (8270 <input_handle+0x30c>)
    7fa4:	4bb0      	ldr	r3, [pc, #704]	; (8268 <input_handle+0x304>)
    7fa6:	4798      	blx	r3
			return;
    7fa8:	e7ed      	b.n	7f86 <input_handle+0x22>
		ver_bl();
    7faa:	4bb2      	ldr	r3, [pc, #712]	; (8274 <input_handle+0x310>)
    7fac:	4798      	blx	r3
    7fae:	e7ea      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("ver_app", argv[0]))) {
    7fb0:	0021      	movs	r1, r4
    7fb2:	48b1      	ldr	r0, [pc, #708]	; (8278 <input_handle+0x314>)
    7fb4:	4bab      	ldr	r3, [pc, #684]	; (8264 <input_handle+0x300>)
    7fb6:	4798      	blx	r3
    7fb8:	2800      	cmp	r0, #0
    7fba:	d10a      	bne.n	7fd2 <input_handle+0x6e>
		if (argc != required_args) {
    7fbc:	2d01      	cmp	r5, #1
    7fbe:	d005      	beq.n	7fcc <input_handle+0x68>
			print_args_error("ver_app", required_args, argc);
    7fc0:	002a      	movs	r2, r5
    7fc2:	2101      	movs	r1, #1
    7fc4:	48ac      	ldr	r0, [pc, #688]	; (8278 <input_handle+0x314>)
    7fc6:	4ba8      	ldr	r3, [pc, #672]	; (8268 <input_handle+0x304>)
    7fc8:	4798      	blx	r3
			return;
    7fca:	e7dc      	b.n	7f86 <input_handle+0x22>
		ver_app();
    7fcc:	4bab      	ldr	r3, [pc, #684]	; (827c <input_handle+0x318>)
    7fce:	4798      	blx	r3
    7fd0:	e7d9      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("gpio_set", argv[0]))) {
    7fd2:	0021      	movs	r1, r4
    7fd4:	48aa      	ldr	r0, [pc, #680]	; (8280 <input_handle+0x31c>)
    7fd6:	4ba3      	ldr	r3, [pc, #652]	; (8264 <input_handle+0x300>)
    7fd8:	4798      	blx	r3
    7fda:	2800      	cmp	r0, #0
    7fdc:	d11e      	bne.n	801c <input_handle+0xb8>
		if (argc != required_args) {
    7fde:	2d03      	cmp	r5, #3
    7fe0:	d005      	beq.n	7fee <input_handle+0x8a>
			print_args_error("gpio_set", required_args, argc);
    7fe2:	002a      	movs	r2, r5
    7fe4:	2103      	movs	r1, #3
    7fe6:	48a6      	ldr	r0, [pc, #664]	; (8280 <input_handle+0x31c>)
    7fe8:	4b9f      	ldr	r3, [pc, #636]	; (8268 <input_handle+0x304>)
    7fea:	4798      	blx	r3
			return;
    7fec:	e7cb      	b.n	7f86 <input_handle+0x22>
		char port = argv[1][0];
    7fee:	6873      	ldr	r3, [r6, #4]
    7ff0:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    7ff2:	68b0      	ldr	r0, [r6, #8]
    7ff4:	4ba3      	ldr	r3, [pc, #652]	; (8284 <input_handle+0x320>)
    7ff6:	4798      	blx	r3
    7ff8:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    7ffa:	4ba3      	ldr	r3, [pc, #652]	; (8288 <input_handle+0x324>)
    7ffc:	4798      	blx	r3
    7ffe:	68b3      	ldr	r3, [r6, #8]
    8000:	781b      	ldrb	r3, [r3, #0]
    8002:	18c0      	adds	r0, r0, r3
    8004:	7843      	ldrb	r3, [r0, #1]
    8006:	075b      	lsls	r3, r3, #29
    8008:	d504      	bpl.n	8014 <input_handle+0xb0>
			gpio_set(port, pin);
    800a:	0021      	movs	r1, r4
    800c:	0028      	movs	r0, r5
    800e:	4b9f      	ldr	r3, [pc, #636]	; (828c <input_handle+0x328>)
    8010:	4798      	blx	r3
    8012:	e7b8      	b.n	7f86 <input_handle+0x22>
			print_general_error("gpio_set");
    8014:	489a      	ldr	r0, [pc, #616]	; (8280 <input_handle+0x31c>)
    8016:	4b9e      	ldr	r3, [pc, #632]	; (8290 <input_handle+0x32c>)
    8018:	4798      	blx	r3
    801a:	e7b4      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("gpio_clear", argv[0]))) {
    801c:	0021      	movs	r1, r4
    801e:	489d      	ldr	r0, [pc, #628]	; (8294 <input_handle+0x330>)
    8020:	4b90      	ldr	r3, [pc, #576]	; (8264 <input_handle+0x300>)
    8022:	4798      	blx	r3
    8024:	2800      	cmp	r0, #0
    8026:	d11e      	bne.n	8066 <input_handle+0x102>
		if (argc != required_args) {
    8028:	2d03      	cmp	r5, #3
    802a:	d005      	beq.n	8038 <input_handle+0xd4>
			print_args_error("gpio_clear", required_args, argc);
    802c:	002a      	movs	r2, r5
    802e:	2103      	movs	r1, #3
    8030:	4898      	ldr	r0, [pc, #608]	; (8294 <input_handle+0x330>)
    8032:	4b8d      	ldr	r3, [pc, #564]	; (8268 <input_handle+0x304>)
    8034:	4798      	blx	r3
			return;
    8036:	e7a6      	b.n	7f86 <input_handle+0x22>
		char port = argv[1][0];
    8038:	6873      	ldr	r3, [r6, #4]
    803a:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    803c:	68b0      	ldr	r0, [r6, #8]
    803e:	4b91      	ldr	r3, [pc, #580]	; (8284 <input_handle+0x320>)
    8040:	4798      	blx	r3
    8042:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    8044:	4b90      	ldr	r3, [pc, #576]	; (8288 <input_handle+0x324>)
    8046:	4798      	blx	r3
    8048:	68b3      	ldr	r3, [r6, #8]
    804a:	781b      	ldrb	r3, [r3, #0]
    804c:	18c0      	adds	r0, r0, r3
    804e:	7843      	ldrb	r3, [r0, #1]
    8050:	075b      	lsls	r3, r3, #29
    8052:	d504      	bpl.n	805e <input_handle+0xfa>
			gpio_clear(port, pin);
    8054:	0021      	movs	r1, r4
    8056:	0028      	movs	r0, r5
    8058:	4b8f      	ldr	r3, [pc, #572]	; (8298 <input_handle+0x334>)
    805a:	4798      	blx	r3
    805c:	e793      	b.n	7f86 <input_handle+0x22>
			print_general_error("gpio_clear");
    805e:	488d      	ldr	r0, [pc, #564]	; (8294 <input_handle+0x330>)
    8060:	4b8b      	ldr	r3, [pc, #556]	; (8290 <input_handle+0x32c>)
    8062:	4798      	blx	r3
    8064:	e78f      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("gpio_get", argv[0]))) {
    8066:	0021      	movs	r1, r4
    8068:	488c      	ldr	r0, [pc, #560]	; (829c <input_handle+0x338>)
    806a:	4b7e      	ldr	r3, [pc, #504]	; (8264 <input_handle+0x300>)
    806c:	4798      	blx	r3
    806e:	2800      	cmp	r0, #0
    8070:	d11e      	bne.n	80b0 <input_handle+0x14c>
		if (argc != required_args) {
    8072:	2d03      	cmp	r5, #3
    8074:	d005      	beq.n	8082 <input_handle+0x11e>
			print_args_error("gpio_get", required_args, argc);
    8076:	002a      	movs	r2, r5
    8078:	2103      	movs	r1, #3
    807a:	4888      	ldr	r0, [pc, #544]	; (829c <input_handle+0x338>)
    807c:	4b7a      	ldr	r3, [pc, #488]	; (8268 <input_handle+0x304>)
    807e:	4798      	blx	r3
			return;
    8080:	e781      	b.n	7f86 <input_handle+0x22>
		char port = argv[1][0];
    8082:	6873      	ldr	r3, [r6, #4]
    8084:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    8086:	68b0      	ldr	r0, [r6, #8]
    8088:	4b7e      	ldr	r3, [pc, #504]	; (8284 <input_handle+0x320>)
    808a:	4798      	blx	r3
    808c:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    808e:	4b7e      	ldr	r3, [pc, #504]	; (8288 <input_handle+0x324>)
    8090:	4798      	blx	r3
    8092:	68b3      	ldr	r3, [r6, #8]
    8094:	781b      	ldrb	r3, [r3, #0]
    8096:	18c0      	adds	r0, r0, r3
    8098:	7843      	ldrb	r3, [r0, #1]
    809a:	075b      	lsls	r3, r3, #29
    809c:	d504      	bpl.n	80a8 <input_handle+0x144>
			gpio_get(port, pin);
    809e:	0021      	movs	r1, r4
    80a0:	0028      	movs	r0, r5
    80a2:	4b7f      	ldr	r3, [pc, #508]	; (82a0 <input_handle+0x33c>)
    80a4:	4798      	blx	r3
    80a6:	e76e      	b.n	7f86 <input_handle+0x22>
			print_general_error("gpio_get");
    80a8:	487c      	ldr	r0, [pc, #496]	; (829c <input_handle+0x338>)
    80aa:	4b79      	ldr	r3, [pc, #484]	; (8290 <input_handle+0x32c>)
    80ac:	4798      	blx	r3
    80ae:	e76a      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("mac", argv[0]))) {
    80b0:	0021      	movs	r1, r4
    80b2:	487c      	ldr	r0, [pc, #496]	; (82a4 <input_handle+0x340>)
    80b4:	4b6b      	ldr	r3, [pc, #428]	; (8264 <input_handle+0x300>)
    80b6:	4798      	blx	r3
    80b8:	2800      	cmp	r0, #0
    80ba:	d10a      	bne.n	80d2 <input_handle+0x16e>
		if (argc != required_args) {
    80bc:	2d01      	cmp	r5, #1
    80be:	d005      	beq.n	80cc <input_handle+0x168>
			print_args_error("mac", required_args, argc);
    80c0:	002a      	movs	r2, r5
    80c2:	2101      	movs	r1, #1
    80c4:	4877      	ldr	r0, [pc, #476]	; (82a4 <input_handle+0x340>)
    80c6:	4b68      	ldr	r3, [pc, #416]	; (8268 <input_handle+0x304>)
    80c8:	4798      	blx	r3
			return;
    80ca:	e75c      	b.n	7f86 <input_handle+0x22>
		mac();
    80cc:	4b76      	ldr	r3, [pc, #472]	; (82a8 <input_handle+0x344>)
    80ce:	4798      	blx	r3
    80d0:	e759      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("ip", argv[0]))) {
    80d2:	0021      	movs	r1, r4
    80d4:	4875      	ldr	r0, [pc, #468]	; (82ac <input_handle+0x348>)
    80d6:	4b63      	ldr	r3, [pc, #396]	; (8264 <input_handle+0x300>)
    80d8:	4798      	blx	r3
    80da:	2800      	cmp	r0, #0
    80dc:	d10a      	bne.n	80f4 <input_handle+0x190>
		if (argc != required_args) {
    80de:	2d01      	cmp	r5, #1
    80e0:	d005      	beq.n	80ee <input_handle+0x18a>
			print_args_error("ip", required_args, argc);
    80e2:	002a      	movs	r2, r5
    80e4:	2101      	movs	r1, #1
    80e6:	4871      	ldr	r0, [pc, #452]	; (82ac <input_handle+0x348>)
    80e8:	4b5f      	ldr	r3, [pc, #380]	; (8268 <input_handle+0x304>)
    80ea:	4798      	blx	r3
			return;
    80ec:	e74b      	b.n	7f86 <input_handle+0x22>
		ip();
    80ee:	4b70      	ldr	r3, [pc, #448]	; (82b0 <input_handle+0x34c>)
    80f0:	4798      	blx	r3
    80f2:	e748      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("read", argv[0]))) {
    80f4:	0021      	movs	r1, r4
    80f6:	486f      	ldr	r0, [pc, #444]	; (82b4 <input_handle+0x350>)
    80f8:	4b5a      	ldr	r3, [pc, #360]	; (8264 <input_handle+0x300>)
    80fa:	4798      	blx	r3
    80fc:	2800      	cmp	r0, #0
    80fe:	d128      	bne.n	8152 <input_handle+0x1ee>
		if (argc != required_args) {
    8100:	2d04      	cmp	r5, #4
    8102:	d005      	beq.n	8110 <input_handle+0x1ac>
			print_args_error("read", required_args, argc);
    8104:	002a      	movs	r2, r5
    8106:	2104      	movs	r1, #4
    8108:	486a      	ldr	r0, [pc, #424]	; (82b4 <input_handle+0x350>)
    810a:	4b57      	ldr	r3, [pc, #348]	; (8268 <input_handle+0x304>)
    810c:	4798      	blx	r3
			return;
    810e:	e73a      	b.n	7f86 <input_handle+0x22>
		int reading = atoi(argv[2]);
    8110:	68b0      	ldr	r0, [r6, #8]
    8112:	4d5c      	ldr	r5, [pc, #368]	; (8284 <input_handle+0x320>)
    8114:	47a8      	blx	r5
    8116:	0004      	movs	r4, r0
		int interval_ms = atoi(argv[3]);
    8118:	68f0      	ldr	r0, [r6, #12]
    811a:	47a8      	blx	r5
    811c:	0005      	movs	r5, r0
		if (isdigit(argv[2][0]) && isdigit(argv[3][0]))
    811e:	4b5a      	ldr	r3, [pc, #360]	; (8288 <input_handle+0x324>)
    8120:	4798      	blx	r3
    8122:	68b3      	ldr	r3, [r6, #8]
    8124:	781b      	ldrb	r3, [r3, #0]
    8126:	18c0      	adds	r0, r0, r3
    8128:	7843      	ldrb	r3, [r0, #1]
    812a:	075b      	lsls	r3, r3, #29
    812c:	d507      	bpl.n	813e <input_handle+0x1da>
    812e:	4b56      	ldr	r3, [pc, #344]	; (8288 <input_handle+0x324>)
    8130:	4798      	blx	r3
    8132:	68f3      	ldr	r3, [r6, #12]
    8134:	781b      	ldrb	r3, [r3, #0]
    8136:	18c0      	adds	r0, r0, r3
    8138:	7843      	ldrb	r3, [r0, #1]
    813a:	075b      	lsls	r3, r3, #29
    813c:	d403      	bmi.n	8146 <input_handle+0x1e2>
			print_general_error("read");
    813e:	485d      	ldr	r0, [pc, #372]	; (82b4 <input_handle+0x350>)
    8140:	4b53      	ldr	r3, [pc, #332]	; (8290 <input_handle+0x32c>)
    8142:	4798      	blx	r3
    8144:	e71f      	b.n	7f86 <input_handle+0x22>
			read_sensor(argv[1], reading, interval_ms);
    8146:	002a      	movs	r2, r5
    8148:	0021      	movs	r1, r4
    814a:	6870      	ldr	r0, [r6, #4]
    814c:	4b5a      	ldr	r3, [pc, #360]	; (82b8 <input_handle+0x354>)
    814e:	4798      	blx	r3
    8150:	e719      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("adc_get", argv[0]))) {
    8152:	0021      	movs	r1, r4
    8154:	4859      	ldr	r0, [pc, #356]	; (82bc <input_handle+0x358>)
    8156:	4b43      	ldr	r3, [pc, #268]	; (8264 <input_handle+0x300>)
    8158:	4798      	blx	r3
    815a:	2800      	cmp	r0, #0
    815c:	d11e      	bne.n	819c <input_handle+0x238>
		if (argc != required_args) {
    815e:	2d03      	cmp	r5, #3
    8160:	d005      	beq.n	816e <input_handle+0x20a>
			print_args_error("adc_get", required_args, argc);
    8162:	002a      	movs	r2, r5
    8164:	2103      	movs	r1, #3
    8166:	4855      	ldr	r0, [pc, #340]	; (82bc <input_handle+0x358>)
    8168:	4b3f      	ldr	r3, [pc, #252]	; (8268 <input_handle+0x304>)
    816a:	4798      	blx	r3
			return;
    816c:	e70b      	b.n	7f86 <input_handle+0x22>
		char port = argv[1][0];
    816e:	6873      	ldr	r3, [r6, #4]
    8170:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    8172:	68b0      	ldr	r0, [r6, #8]
    8174:	4b43      	ldr	r3, [pc, #268]	; (8284 <input_handle+0x320>)
    8176:	4798      	blx	r3
    8178:	0004      	movs	r4, r0
		if (isdigit(argv[2][0])) {
    817a:	4b43      	ldr	r3, [pc, #268]	; (8288 <input_handle+0x324>)
    817c:	4798      	blx	r3
    817e:	68b3      	ldr	r3, [r6, #8]
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	18c0      	adds	r0, r0, r3
    8184:	7843      	ldrb	r3, [r0, #1]
    8186:	075b      	lsls	r3, r3, #29
    8188:	d504      	bpl.n	8194 <input_handle+0x230>
			adc_get(port, pin);
    818a:	0021      	movs	r1, r4
    818c:	0028      	movs	r0, r5
    818e:	4b4c      	ldr	r3, [pc, #304]	; (82c0 <input_handle+0x35c>)
    8190:	4798      	blx	r3
    8192:	e6f8      	b.n	7f86 <input_handle+0x22>
			print_general_error("adc_get");
    8194:	4849      	ldr	r0, [pc, #292]	; (82bc <input_handle+0x358>)
    8196:	4b3e      	ldr	r3, [pc, #248]	; (8290 <input_handle+0x32c>)
    8198:	4798      	blx	r3
    819a:	e6f4      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("mcu_temp", argv[0]))) {
    819c:	0021      	movs	r1, r4
    819e:	4849      	ldr	r0, [pc, #292]	; (82c4 <input_handle+0x360>)
    81a0:	4b30      	ldr	r3, [pc, #192]	; (8264 <input_handle+0x300>)
    81a2:	4798      	blx	r3
    81a4:	2800      	cmp	r0, #0
    81a6:	d10a      	bne.n	81be <input_handle+0x25a>
		if (argc != required_args) {
    81a8:	2d01      	cmp	r5, #1
    81aa:	d005      	beq.n	81b8 <input_handle+0x254>
			print_args_error("mcu_temp", required_args, argc);
    81ac:	002a      	movs	r2, r5
    81ae:	2101      	movs	r1, #1
    81b0:	4844      	ldr	r0, [pc, #272]	; (82c4 <input_handle+0x360>)
    81b2:	4b2d      	ldr	r3, [pc, #180]	; (8268 <input_handle+0x304>)
    81b4:	4798      	blx	r3
			return;
    81b6:	e6e6      	b.n	7f86 <input_handle+0x22>
		mcu_temp();
    81b8:	4b43      	ldr	r3, [pc, #268]	; (82c8 <input_handle+0x364>)
    81ba:	4798      	blx	r3
    81bc:	e6e3      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("i2c_scan", argv[0]))) {
    81be:	0021      	movs	r1, r4
    81c0:	4842      	ldr	r0, [pc, #264]	; (82cc <input_handle+0x368>)
    81c2:	4b28      	ldr	r3, [pc, #160]	; (8264 <input_handle+0x300>)
    81c4:	4798      	blx	r3
    81c6:	2800      	cmp	r0, #0
    81c8:	d10d      	bne.n	81e6 <input_handle+0x282>
		if (argc != required_args) {
    81ca:	2d01      	cmp	r5, #1
    81cc:	d005      	beq.n	81da <input_handle+0x276>
			print_args_error("i2c_scan", required_args, argc);
    81ce:	002a      	movs	r2, r5
    81d0:	2101      	movs	r1, #1
    81d2:	483e      	ldr	r0, [pc, #248]	; (82cc <input_handle+0x368>)
    81d4:	4b24      	ldr	r3, [pc, #144]	; (8268 <input_handle+0x304>)
    81d6:	4798      	blx	r3
			return;
    81d8:	e6d5      	b.n	7f86 <input_handle+0x22>
		printf("running i2c_scan\r\n");
    81da:	483d      	ldr	r0, [pc, #244]	; (82d0 <input_handle+0x36c>)
    81dc:	4b3d      	ldr	r3, [pc, #244]	; (82d4 <input_handle+0x370>)
    81de:	4798      	blx	r3
		i2c_scan();
    81e0:	4b3d      	ldr	r3, [pc, #244]	; (82d8 <input_handle+0x374>)
    81e2:	4798      	blx	r3
    81e4:	e6cf      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("relay1_on", argv[0]))) {
    81e6:	0021      	movs	r1, r4
    81e8:	483c      	ldr	r0, [pc, #240]	; (82dc <input_handle+0x378>)
    81ea:	4b1e      	ldr	r3, [pc, #120]	; (8264 <input_handle+0x300>)
    81ec:	4798      	blx	r3
    81ee:	2800      	cmp	r0, #0
    81f0:	d10d      	bne.n	820e <input_handle+0x2aa>
		if (argc != required_args) {
    81f2:	2d01      	cmp	r5, #1
    81f4:	d005      	beq.n	8202 <input_handle+0x29e>
			print_args_error("relay1_on", required_args, argc);
    81f6:	002a      	movs	r2, r5
    81f8:	2101      	movs	r1, #1
    81fa:	4838      	ldr	r0, [pc, #224]	; (82dc <input_handle+0x378>)
    81fc:	4b1a      	ldr	r3, [pc, #104]	; (8268 <input_handle+0x304>)
    81fe:	4798      	blx	r3
			return;
    8200:	e6c1      	b.n	7f86 <input_handle+0x22>
	printf("Relay 1 turning on.\r\n");
    8202:	4837      	ldr	r0, [pc, #220]	; (82e0 <input_handle+0x37c>)
    8204:	4b33      	ldr	r3, [pc, #204]	; (82d4 <input_handle+0x370>)
    8206:	4798      	blx	r3
	relay1_enable();
    8208:	4b36      	ldr	r3, [pc, #216]	; (82e4 <input_handle+0x380>)
    820a:	4798      	blx	r3
    820c:	e6bb      	b.n	7f86 <input_handle+0x22>
	}  else if (!(strcmp("relay1_off", argv[0]))) {
    820e:	0021      	movs	r1, r4
    8210:	4835      	ldr	r0, [pc, #212]	; (82e8 <input_handle+0x384>)
    8212:	4b14      	ldr	r3, [pc, #80]	; (8264 <input_handle+0x300>)
    8214:	4798      	blx	r3
    8216:	2800      	cmp	r0, #0
    8218:	d10d      	bne.n	8236 <input_handle+0x2d2>
		if (argc != required_args) {
    821a:	2d01      	cmp	r5, #1
    821c:	d005      	beq.n	822a <input_handle+0x2c6>
			print_args_error("relay1_off", required_args, argc);
    821e:	002a      	movs	r2, r5
    8220:	2101      	movs	r1, #1
    8222:	4831      	ldr	r0, [pc, #196]	; (82e8 <input_handle+0x384>)
    8224:	4b10      	ldr	r3, [pc, #64]	; (8268 <input_handle+0x304>)
    8226:	4798      	blx	r3
			return;
    8228:	e6ad      	b.n	7f86 <input_handle+0x22>
	printf("Relay 1 turning off.\r\n");
    822a:	4830      	ldr	r0, [pc, #192]	; (82ec <input_handle+0x388>)
    822c:	4b29      	ldr	r3, [pc, #164]	; (82d4 <input_handle+0x370>)
    822e:	4798      	blx	r3
	relay1_disable();
    8230:	4b2f      	ldr	r3, [pc, #188]	; (82f0 <input_handle+0x38c>)
    8232:	4798      	blx	r3
    8234:	e6a7      	b.n	7f86 <input_handle+0x22>
	}  else if (!(strcmp("relay2_on", argv[0]))) {
    8236:	0021      	movs	r1, r4
    8238:	482e      	ldr	r0, [pc, #184]	; (82f4 <input_handle+0x390>)
    823a:	4b0a      	ldr	r3, [pc, #40]	; (8264 <input_handle+0x300>)
    823c:	4798      	blx	r3
    823e:	2800      	cmp	r0, #0
    8240:	d15e      	bne.n	8300 <input_handle+0x39c>
	if (argc != required_args) {
    8242:	2d01      	cmp	r5, #1
    8244:	d005      	beq.n	8252 <input_handle+0x2ee>
		print_args_error("relay2_on", required_args, argc);
    8246:	002a      	movs	r2, r5
    8248:	2101      	movs	r1, #1
    824a:	482a      	ldr	r0, [pc, #168]	; (82f4 <input_handle+0x390>)
    824c:	4b06      	ldr	r3, [pc, #24]	; (8268 <input_handle+0x304>)
    824e:	4798      	blx	r3
		return;
    8250:	e699      	b.n	7f86 <input_handle+0x22>
	printf("Relay 2 turning on.\r\n");
    8252:	4829      	ldr	r0, [pc, #164]	; (82f8 <input_handle+0x394>)
    8254:	4b1f      	ldr	r3, [pc, #124]	; (82d4 <input_handle+0x370>)
    8256:	4798      	blx	r3
	relay2_enable();
    8258:	4b28      	ldr	r3, [pc, #160]	; (82fc <input_handle+0x398>)
    825a:	4798      	blx	r3
    825c:	e693      	b.n	7f86 <input_handle+0x22>
    825e:	46c0      	nop			; (mov r8, r8)
    8260:	000120a4 	.word	0x000120a4
    8264:	0000b63d 	.word	0x0000b63d
    8268:	000078a9 	.word	0x000078a9
    826c:	000076fd 	.word	0x000076fd
    8270:	000120ac 	.word	0x000120ac
    8274:	00007711 	.word	0x00007711
    8278:	000120b4 	.word	0x000120b4
    827c:	00007729 	.word	0x00007729
    8280:	000120bc 	.word	0x000120bc
    8284:	0000a7fd 	.word	0x0000a7fd
    8288:	0000a859 	.word	0x0000a859
    828c:	00007b85 	.word	0x00007b85
    8290:	00007895 	.word	0x00007895
    8294:	000120c8 	.word	0x000120c8
    8298:	00007bd1 	.word	0x00007bd1
    829c:	000120d4 	.word	0x000120d4
    82a0:	00007db1 	.word	0x00007db1
    82a4:	000120e0 	.word	0x000120e0
    82a8:	00007741 	.word	0x00007741
    82ac:	000120e4 	.word	0x000120e4
    82b0:	00007755 	.word	0x00007755
    82b4:	000120e8 	.word	0x000120e8
    82b8:	00007ce1 	.word	0x00007ce1
    82bc:	000120f0 	.word	0x000120f0
    82c0:	00007921 	.word	0x00007921
    82c4:	000120f8 	.word	0x000120f8
    82c8:	00007a65 	.word	0x00007a65
    82cc:	00012104 	.word	0x00012104
    82d0:	00012110 	.word	0x00012110
    82d4:	0000b455 	.word	0x0000b455
    82d8:	000077bd 	.word	0x000077bd
    82dc:	00012124 	.word	0x00012124
    82e0:	00012130 	.word	0x00012130
    82e4:	00007e9d 	.word	0x00007e9d
    82e8:	00012148 	.word	0x00012148
    82ec:	00012154 	.word	0x00012154
    82f0:	00007eb5 	.word	0x00007eb5
    82f4:	0001216c 	.word	0x0001216c
    82f8:	00012178 	.word	0x00012178
    82fc:	00007ecd 	.word	0x00007ecd
	}  else if (!(strcmp("relay2_off", argv[0]))) {
    8300:	0021      	movs	r1, r4
    8302:	486a      	ldr	r0, [pc, #424]	; (84ac <input_handle+0x548>)
    8304:	4b6a      	ldr	r3, [pc, #424]	; (84b0 <input_handle+0x54c>)
    8306:	4798      	blx	r3
    8308:	2800      	cmp	r0, #0
    830a:	d10d      	bne.n	8328 <input_handle+0x3c4>
	if (argc != required_args) {
    830c:	2d01      	cmp	r5, #1
    830e:	d005      	beq.n	831c <input_handle+0x3b8>
		print_args_error("relay2_off", required_args, argc);
    8310:	002a      	movs	r2, r5
    8312:	2101      	movs	r1, #1
    8314:	4865      	ldr	r0, [pc, #404]	; (84ac <input_handle+0x548>)
    8316:	4b67      	ldr	r3, [pc, #412]	; (84b4 <input_handle+0x550>)
    8318:	4798      	blx	r3
		return;
    831a:	e634      	b.n	7f86 <input_handle+0x22>
	printf("Relay 2 turning off.\r\n");
    831c:	4866      	ldr	r0, [pc, #408]	; (84b8 <input_handle+0x554>)
    831e:	4b67      	ldr	r3, [pc, #412]	; (84bc <input_handle+0x558>)
    8320:	4798      	blx	r3
	relay2_disable();
    8322:	4b67      	ldr	r3, [pc, #412]	; (84c0 <input_handle+0x55c>)
    8324:	4798      	blx	r3
    8326:	e62e      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("boost_on", argv[0]))) {
    8328:	0021      	movs	r1, r4
    832a:	4866      	ldr	r0, [pc, #408]	; (84c4 <input_handle+0x560>)
    832c:	4b60      	ldr	r3, [pc, #384]	; (84b0 <input_handle+0x54c>)
    832e:	4798      	blx	r3
    8330:	2800      	cmp	r0, #0
    8332:	d10d      	bne.n	8350 <input_handle+0x3ec>
	if (argc != required_args) {
    8334:	2d01      	cmp	r5, #1
    8336:	d005      	beq.n	8344 <input_handle+0x3e0>
		print_args_error("boost_on", required_args, argc);
    8338:	002a      	movs	r2, r5
    833a:	2101      	movs	r1, #1
    833c:	4861      	ldr	r0, [pc, #388]	; (84c4 <input_handle+0x560>)
    833e:	4b5d      	ldr	r3, [pc, #372]	; (84b4 <input_handle+0x550>)
    8340:	4798      	blx	r3
		return;
    8342:	e620      	b.n	7f86 <input_handle+0x22>
	printf("Boost converter enabled.\r\n");
    8344:	4860      	ldr	r0, [pc, #384]	; (84c8 <input_handle+0x564>)
    8346:	4b5d      	ldr	r3, [pc, #372]	; (84bc <input_handle+0x558>)
    8348:	4798      	blx	r3
	boost_enable();
    834a:	4b60      	ldr	r3, [pc, #384]	; (84cc <input_handle+0x568>)
    834c:	4798      	blx	r3
    834e:	e61a      	b.n	7f86 <input_handle+0x22>
	}  else if (!(strcmp("boost_off", argv[0]))) {
    8350:	0021      	movs	r1, r4
    8352:	485f      	ldr	r0, [pc, #380]	; (84d0 <input_handle+0x56c>)
    8354:	4b56      	ldr	r3, [pc, #344]	; (84b0 <input_handle+0x54c>)
    8356:	4798      	blx	r3
    8358:	2800      	cmp	r0, #0
    835a:	d10d      	bne.n	8378 <input_handle+0x414>
	if (argc != required_args) {
    835c:	2d01      	cmp	r5, #1
    835e:	d005      	beq.n	836c <input_handle+0x408>
		print_args_error("boost_off", required_args, argc);
    8360:	002a      	movs	r2, r5
    8362:	2101      	movs	r1, #1
    8364:	485a      	ldr	r0, [pc, #360]	; (84d0 <input_handle+0x56c>)
    8366:	4b53      	ldr	r3, [pc, #332]	; (84b4 <input_handle+0x550>)
    8368:	4798      	blx	r3
		return;
    836a:	e60c      	b.n	7f86 <input_handle+0x22>
	printf("Boost converter disabled.\r\n");
    836c:	4859      	ldr	r0, [pc, #356]	; (84d4 <input_handle+0x570>)
    836e:	4b53      	ldr	r3, [pc, #332]	; (84bc <input_handle+0x558>)
    8370:	4798      	blx	r3
	boost_disable();
    8372:	4b59      	ldr	r3, [pc, #356]	; (84d8 <input_handle+0x574>)
    8374:	4798      	blx	r3
    8376:	e606      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("led1_on", argv[0]))) {
    8378:	0021      	movs	r1, r4
    837a:	4858      	ldr	r0, [pc, #352]	; (84dc <input_handle+0x578>)
    837c:	4b4c      	ldr	r3, [pc, #304]	; (84b0 <input_handle+0x54c>)
    837e:	4798      	blx	r3
    8380:	2800      	cmp	r0, #0
    8382:	d10d      	bne.n	83a0 <input_handle+0x43c>
		if (argc != required_args) {
    8384:	2d01      	cmp	r5, #1
    8386:	d005      	beq.n	8394 <input_handle+0x430>
			print_args_error("led1_on", required_args, argc);
    8388:	002a      	movs	r2, r5
    838a:	2101      	movs	r1, #1
    838c:	4853      	ldr	r0, [pc, #332]	; (84dc <input_handle+0x578>)
    838e:	4b49      	ldr	r3, [pc, #292]	; (84b4 <input_handle+0x550>)
    8390:	4798      	blx	r3
			return;
    8392:	e5f8      	b.n	7f86 <input_handle+0x22>
	printf("LED1 turning on.\r\n");
    8394:	4852      	ldr	r0, [pc, #328]	; (84e0 <input_handle+0x57c>)
    8396:	4b49      	ldr	r3, [pc, #292]	; (84bc <input_handle+0x558>)
    8398:	4798      	blx	r3
	led1_on();
    839a:	4b52      	ldr	r3, [pc, #328]	; (84e4 <input_handle+0x580>)
    839c:	4798      	blx	r3
    839e:	e5f2      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("led1_off", argv[0]))) {
    83a0:	0021      	movs	r1, r4
    83a2:	4851      	ldr	r0, [pc, #324]	; (84e8 <input_handle+0x584>)
    83a4:	4b42      	ldr	r3, [pc, #264]	; (84b0 <input_handle+0x54c>)
    83a6:	4798      	blx	r3
    83a8:	2800      	cmp	r0, #0
    83aa:	d10d      	bne.n	83c8 <input_handle+0x464>
		if (argc != required_args) {
    83ac:	2d01      	cmp	r5, #1
    83ae:	d005      	beq.n	83bc <input_handle+0x458>
		print_args_error("led1_off", required_args, argc);
    83b0:	002a      	movs	r2, r5
    83b2:	2101      	movs	r1, #1
    83b4:	484c      	ldr	r0, [pc, #304]	; (84e8 <input_handle+0x584>)
    83b6:	4b3f      	ldr	r3, [pc, #252]	; (84b4 <input_handle+0x550>)
    83b8:	4798      	blx	r3
		return;
    83ba:	e5e4      	b.n	7f86 <input_handle+0x22>
	printf("LED1 turning off.\r\n");
    83bc:	484b      	ldr	r0, [pc, #300]	; (84ec <input_handle+0x588>)
    83be:	4b3f      	ldr	r3, [pc, #252]	; (84bc <input_handle+0x558>)
    83c0:	4798      	blx	r3
	led1_off();
    83c2:	4b4b      	ldr	r3, [pc, #300]	; (84f0 <input_handle+0x58c>)
    83c4:	4798      	blx	r3
    83c6:	e5de      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("led2_on", argv[0]))) {
    83c8:	0021      	movs	r1, r4
    83ca:	484a      	ldr	r0, [pc, #296]	; (84f4 <input_handle+0x590>)
    83cc:	4b38      	ldr	r3, [pc, #224]	; (84b0 <input_handle+0x54c>)
    83ce:	4798      	blx	r3
    83d0:	2800      	cmp	r0, #0
    83d2:	d10d      	bne.n	83f0 <input_handle+0x48c>
		if (argc != required_args) {
    83d4:	2d01      	cmp	r5, #1
    83d6:	d005      	beq.n	83e4 <input_handle+0x480>
			print_args_error("led2_on", required_args, argc);
    83d8:	002a      	movs	r2, r5
    83da:	2101      	movs	r1, #1
    83dc:	4845      	ldr	r0, [pc, #276]	; (84f4 <input_handle+0x590>)
    83de:	4b35      	ldr	r3, [pc, #212]	; (84b4 <input_handle+0x550>)
    83e0:	4798      	blx	r3
			return;
    83e2:	e5d0      	b.n	7f86 <input_handle+0x22>
	printf("LED2 turning on.\r\n");
    83e4:	4844      	ldr	r0, [pc, #272]	; (84f8 <input_handle+0x594>)
    83e6:	4b35      	ldr	r3, [pc, #212]	; (84bc <input_handle+0x558>)
    83e8:	4798      	blx	r3
	led2_on();
    83ea:	4b44      	ldr	r3, [pc, #272]	; (84fc <input_handle+0x598>)
    83ec:	4798      	blx	r3
    83ee:	e5ca      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("led2_off", argv[0]))) {
    83f0:	0021      	movs	r1, r4
    83f2:	4843      	ldr	r0, [pc, #268]	; (8500 <input_handle+0x59c>)
    83f4:	4b2e      	ldr	r3, [pc, #184]	; (84b0 <input_handle+0x54c>)
    83f6:	4798      	blx	r3
    83f8:	2800      	cmp	r0, #0
    83fa:	d10d      	bne.n	8418 <input_handle+0x4b4>
		if (argc != required_args) {
    83fc:	2d01      	cmp	r5, #1
    83fe:	d005      	beq.n	840c <input_handle+0x4a8>
			print_args_error("led2_off", required_args, argc);
    8400:	002a      	movs	r2, r5
    8402:	2101      	movs	r1, #1
    8404:	483e      	ldr	r0, [pc, #248]	; (8500 <input_handle+0x59c>)
    8406:	4b2b      	ldr	r3, [pc, #172]	; (84b4 <input_handle+0x550>)
    8408:	4798      	blx	r3
			return;
    840a:	e5bc      	b.n	7f86 <input_handle+0x22>
	printf("LED2 turning off.\r\n");
    840c:	483d      	ldr	r0, [pc, #244]	; (8504 <input_handle+0x5a0>)
    840e:	4b2b      	ldr	r3, [pc, #172]	; (84bc <input_handle+0x558>)
    8410:	4798      	blx	r3
	led2_off();
    8412:	4b3d      	ldr	r3, [pc, #244]	; (8508 <input_handle+0x5a4>)
    8414:	4798      	blx	r3
    8416:	e5b6      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("check_for_update", argv[0]))) {
    8418:	0021      	movs	r1, r4
    841a:	483c      	ldr	r0, [pc, #240]	; (850c <input_handle+0x5a8>)
    841c:	4b24      	ldr	r3, [pc, #144]	; (84b0 <input_handle+0x54c>)
    841e:	4798      	blx	r3
    8420:	2800      	cmp	r0, #0
    8422:	d10b      	bne.n	843c <input_handle+0x4d8>
	if (argc != required_args) {
    8424:	2d01      	cmp	r5, #1
    8426:	d005      	beq.n	8434 <input_handle+0x4d0>
		print_args_error("check_for_update", required_args, argc);
    8428:	002a      	movs	r2, r5
    842a:	2101      	movs	r1, #1
    842c:	4837      	ldr	r0, [pc, #220]	; (850c <input_handle+0x5a8>)
    842e:	4b21      	ldr	r3, [pc, #132]	; (84b4 <input_handle+0x550>)
    8430:	4798      	blx	r3
		return;
    8432:	e5a8      	b.n	7f86 <input_handle+0x22>
	otafu(0);
    8434:	2000      	movs	r0, #0
    8436:	4b36      	ldr	r3, [pc, #216]	; (8510 <input_handle+0x5ac>)
    8438:	4798      	blx	r3
    843a:	e5a4      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("download_update", argv[0]))) {
    843c:	0021      	movs	r1, r4
    843e:	4835      	ldr	r0, [pc, #212]	; (8514 <input_handle+0x5b0>)
    8440:	4b1b      	ldr	r3, [pc, #108]	; (84b0 <input_handle+0x54c>)
    8442:	4798      	blx	r3
    8444:	2800      	cmp	r0, #0
    8446:	d10b      	bne.n	8460 <input_handle+0x4fc>
	if (argc != required_args) {
    8448:	2d01      	cmp	r5, #1
    844a:	d005      	beq.n	8458 <input_handle+0x4f4>
		print_args_error("download_update", required_args, argc);
    844c:	002a      	movs	r2, r5
    844e:	2101      	movs	r1, #1
    8450:	4830      	ldr	r0, [pc, #192]	; (8514 <input_handle+0x5b0>)
    8452:	4b18      	ldr	r3, [pc, #96]	; (84b4 <input_handle+0x550>)
    8454:	4798      	blx	r3
		return;
    8456:	e596      	b.n	7f86 <input_handle+0x22>
	otafu(1);
    8458:	2001      	movs	r0, #1
    845a:	4b2d      	ldr	r3, [pc, #180]	; (8510 <input_handle+0x5ac>)
    845c:	4798      	blx	r3
    845e:	e592      	b.n	7f86 <input_handle+0x22>
	} else if (!(strcmp("run_pump", argv[0]))) {
    8460:	0021      	movs	r1, r4
    8462:	482d      	ldr	r0, [pc, #180]	; (8518 <input_handle+0x5b4>)
    8464:	4b12      	ldr	r3, [pc, #72]	; (84b0 <input_handle+0x54c>)
    8466:	4798      	blx	r3
    8468:	2800      	cmp	r0, #0
    846a:	d11b      	bne.n	84a4 <input_handle+0x540>
	if (argc != required_args) {
    846c:	2d02      	cmp	r5, #2
    846e:	d005      	beq.n	847c <input_handle+0x518>
		print_args_error("run_pump", required_args, argc);
    8470:	002a      	movs	r2, r5
    8472:	2102      	movs	r1, #2
    8474:	4828      	ldr	r0, [pc, #160]	; (8518 <input_handle+0x5b4>)
    8476:	4b0f      	ldr	r3, [pc, #60]	; (84b4 <input_handle+0x550>)
    8478:	4798      	blx	r3
		return;
    847a:	e584      	b.n	7f86 <input_handle+0x22>
	int duration = atoi(argv[1]);
    847c:	6870      	ldr	r0, [r6, #4]
    847e:	4b27      	ldr	r3, [pc, #156]	; (851c <input_handle+0x5b8>)
    8480:	4798      	blx	r3
    8482:	0004      	movs	r4, r0
	if (isdigit(argv[1][0])) {
    8484:	4b26      	ldr	r3, [pc, #152]	; (8520 <input_handle+0x5bc>)
    8486:	4798      	blx	r3
    8488:	6873      	ldr	r3, [r6, #4]
    848a:	781b      	ldrb	r3, [r3, #0]
    848c:	18c0      	adds	r0, r0, r3
    848e:	7843      	ldrb	r3, [r0, #1]
    8490:	075b      	lsls	r3, r3, #29
    8492:	d503      	bpl.n	849c <input_handle+0x538>
		run_pump(duration);
    8494:	0020      	movs	r0, r4
    8496:	4b23      	ldr	r3, [pc, #140]	; (8524 <input_handle+0x5c0>)
    8498:	4798      	blx	r3
    849a:	e574      	b.n	7f86 <input_handle+0x22>
	print_general_error("run_pump");
    849c:	481e      	ldr	r0, [pc, #120]	; (8518 <input_handle+0x5b4>)
    849e:	4b22      	ldr	r3, [pc, #136]	; (8528 <input_handle+0x5c4>)
    84a0:	4798      	blx	r3
    84a2:	e570      	b.n	7f86 <input_handle+0x22>
		printf("Invalid input. See help for correct usage.\r\n");
    84a4:	4821      	ldr	r0, [pc, #132]	; (852c <input_handle+0x5c8>)
    84a6:	4b05      	ldr	r3, [pc, #20]	; (84bc <input_handle+0x558>)
    84a8:	4798      	blx	r3
    84aa:	e56c      	b.n	7f86 <input_handle+0x22>
    84ac:	00012190 	.word	0x00012190
    84b0:	0000b63d 	.word	0x0000b63d
    84b4:	000078a9 	.word	0x000078a9
    84b8:	0001219c 	.word	0x0001219c
    84bc:	0000b455 	.word	0x0000b455
    84c0:	00007ee5 	.word	0x00007ee5
    84c4:	000121b4 	.word	0x000121b4
    84c8:	000121c0 	.word	0x000121c0
    84cc:	00007e65 	.word	0x00007e65
    84d0:	000121dc 	.word	0x000121dc
    84d4:	000121e8 	.word	0x000121e8
    84d8:	00007e81 	.word	0x00007e81
    84dc:	00012204 	.word	0x00012204
    84e0:	0001220c 	.word	0x0001220c
    84e4:	00007dfd 	.word	0x00007dfd
    84e8:	00012220 	.word	0x00012220
    84ec:	0001222c 	.word	0x0001222c
    84f0:	00007e19 	.word	0x00007e19
    84f4:	00012240 	.word	0x00012240
    84f8:	00012248 	.word	0x00012248
    84fc:	00007e35 	.word	0x00007e35
    8500:	0001225c 	.word	0x0001225c
    8504:	00012268 	.word	0x00012268
    8508:	00007e4d 	.word	0x00007e4d
    850c:	0001227c 	.word	0x0001227c
    8510:	00007769 	.word	0x00007769
    8514:	00012290 	.word	0x00012290
    8518:	000122a0 	.word	0x000122a0
    851c:	0000a7fd 	.word	0x0000a7fd
    8520:	0000a859 	.word	0x0000a859
    8524:	00007f35 	.word	0x00007f35
    8528:	00007895 	.word	0x00007895
    852c:	000122ac 	.word	0x000122ac

00008530 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    8530:	b5f0      	push	{r4, r5, r6, r7, lr}
    8532:	46de      	mov	lr, fp
    8534:	4657      	mov	r7, sl
    8536:	464e      	mov	r6, r9
    8538:	4645      	mov	r5, r8
    853a:	b5e0      	push	{r5, r6, r7, lr}
    853c:	b091      	sub	sp, #68	; 0x44
    853e:	0005      	movs	r5, r0
    8540:	000c      	movs	r4, r1
    8542:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    8544:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8546:	0008      	movs	r0, r1
    8548:	4bbc      	ldr	r3, [pc, #752]	; (883c <usart_init+0x30c>)
    854a:	4798      	blx	r3
    854c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    854e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    8550:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    8552:	07db      	lsls	r3, r3, #31
    8554:	d506      	bpl.n	8564 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    8556:	b011      	add	sp, #68	; 0x44
    8558:	bc3c      	pop	{r2, r3, r4, r5}
    855a:	4690      	mov	r8, r2
    855c:	4699      	mov	r9, r3
    855e:	46a2      	mov	sl, r4
    8560:	46ab      	mov	fp, r5
    8562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    8564:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    8566:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    8568:	079b      	lsls	r3, r3, #30
    856a:	d4f4      	bmi.n	8556 <usart_init+0x26>
    856c:	49b4      	ldr	r1, [pc, #720]	; (8840 <usart_init+0x310>)
    856e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8570:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    8572:	2301      	movs	r3, #1
    8574:	40bb      	lsls	r3, r7
    8576:	4303      	orrs	r3, r0
    8578:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    857a:	a90f      	add	r1, sp, #60	; 0x3c
    857c:	272d      	movs	r7, #45	; 0x2d
    857e:	5df3      	ldrb	r3, [r6, r7]
    8580:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8582:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8584:	b2d3      	uxtb	r3, r2
    8586:	9302      	str	r3, [sp, #8]
    8588:	0018      	movs	r0, r3
    858a:	4bae      	ldr	r3, [pc, #696]	; (8844 <usart_init+0x314>)
    858c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    858e:	9802      	ldr	r0, [sp, #8]
    8590:	4bad      	ldr	r3, [pc, #692]	; (8848 <usart_init+0x318>)
    8592:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    8594:	5df0      	ldrb	r0, [r6, r7]
    8596:	2100      	movs	r1, #0
    8598:	4bac      	ldr	r3, [pc, #688]	; (884c <usart_init+0x31c>)
    859a:	4798      	blx	r3
	module->character_size = config->character_size;
    859c:	7af3      	ldrb	r3, [r6, #11]
    859e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    85a0:	2324      	movs	r3, #36	; 0x24
    85a2:	5cf3      	ldrb	r3, [r6, r3]
    85a4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    85a6:	2325      	movs	r3, #37	; 0x25
    85a8:	5cf3      	ldrb	r3, [r6, r3]
    85aa:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    85ac:	7ef3      	ldrb	r3, [r6, #27]
    85ae:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    85b0:	7f33      	ldrb	r3, [r6, #28]
    85b2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    85b4:	682b      	ldr	r3, [r5, #0]
    85b6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    85b8:	0018      	movs	r0, r3
    85ba:	4ba0      	ldr	r3, [pc, #640]	; (883c <usart_init+0x30c>)
    85bc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    85be:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    85c0:	2200      	movs	r2, #0
    85c2:	230e      	movs	r3, #14
    85c4:	a906      	add	r1, sp, #24
    85c6:	468c      	mov	ip, r1
    85c8:	4463      	add	r3, ip
    85ca:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    85cc:	8a32      	ldrh	r2, [r6, #16]
    85ce:	9202      	str	r2, [sp, #8]
    85d0:	2380      	movs	r3, #128	; 0x80
    85d2:	01db      	lsls	r3, r3, #7
    85d4:	429a      	cmp	r2, r3
    85d6:	d100      	bne.n	85da <usart_init+0xaa>
    85d8:	e09e      	b.n	8718 <usart_init+0x1e8>
    85da:	d90f      	bls.n	85fc <usart_init+0xcc>
    85dc:	23c0      	movs	r3, #192	; 0xc0
    85de:	01db      	lsls	r3, r3, #7
    85e0:	9a02      	ldr	r2, [sp, #8]
    85e2:	429a      	cmp	r2, r3
    85e4:	d100      	bne.n	85e8 <usart_init+0xb8>
    85e6:	e092      	b.n	870e <usart_init+0x1de>
    85e8:	2380      	movs	r3, #128	; 0x80
    85ea:	021b      	lsls	r3, r3, #8
    85ec:	429a      	cmp	r2, r3
    85ee:	d000      	beq.n	85f2 <usart_init+0xc2>
    85f0:	e11f      	b.n	8832 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    85f2:	2303      	movs	r3, #3
    85f4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    85f6:	2300      	movs	r3, #0
    85f8:	9307      	str	r3, [sp, #28]
    85fa:	e008      	b.n	860e <usart_init+0xde>
	switch (config->sample_rate) {
    85fc:	2380      	movs	r3, #128	; 0x80
    85fe:	019b      	lsls	r3, r3, #6
    8600:	429a      	cmp	r2, r3
    8602:	d000      	beq.n	8606 <usart_init+0xd6>
    8604:	e115      	b.n	8832 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8606:	2310      	movs	r3, #16
    8608:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    860a:	3b0f      	subs	r3, #15
    860c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    860e:	6833      	ldr	r3, [r6, #0]
    8610:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    8612:	68f3      	ldr	r3, [r6, #12]
    8614:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    8616:	6973      	ldr	r3, [r6, #20]
    8618:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    861a:	7e33      	ldrb	r3, [r6, #24]
    861c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    861e:	2326      	movs	r3, #38	; 0x26
    8620:	5cf3      	ldrb	r3, [r6, r3]
    8622:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    8624:	6873      	ldr	r3, [r6, #4]
    8626:	4699      	mov	r9, r3
	switch (transfer_mode)
    8628:	2b00      	cmp	r3, #0
    862a:	d100      	bne.n	862e <usart_init+0xfe>
    862c:	e0a0      	b.n	8770 <usart_init+0x240>
    862e:	2380      	movs	r3, #128	; 0x80
    8630:	055b      	lsls	r3, r3, #21
    8632:	4599      	cmp	r9, r3
    8634:	d100      	bne.n	8638 <usart_init+0x108>
    8636:	e084      	b.n	8742 <usart_init+0x212>
	if(config->encoding_format_enable) {
    8638:	7e73      	ldrb	r3, [r6, #25]
    863a:	2b00      	cmp	r3, #0
    863c:	d002      	beq.n	8644 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    863e:	7eb3      	ldrb	r3, [r6, #26]
    8640:	4642      	mov	r2, r8
    8642:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8644:	682a      	ldr	r2, [r5, #0]
    8646:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    8648:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    864a:	2b00      	cmp	r3, #0
    864c:	d1fc      	bne.n	8648 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    864e:	330e      	adds	r3, #14
    8650:	aa06      	add	r2, sp, #24
    8652:	4694      	mov	ip, r2
    8654:	4463      	add	r3, ip
    8656:	881b      	ldrh	r3, [r3, #0]
    8658:	4642      	mov	r2, r8
    865a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    865c:	9b05      	ldr	r3, [sp, #20]
    865e:	9a03      	ldr	r2, [sp, #12]
    8660:	4313      	orrs	r3, r2
    8662:	9a04      	ldr	r2, [sp, #16]
    8664:	4313      	orrs	r3, r2
    8666:	464a      	mov	r2, r9
    8668:	4313      	orrs	r3, r2
    866a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    866c:	465b      	mov	r3, fp
    866e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    8670:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    8672:	4653      	mov	r3, sl
    8674:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    8676:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    8678:	2327      	movs	r3, #39	; 0x27
    867a:	5cf3      	ldrb	r3, [r6, r3]
    867c:	2b00      	cmp	r3, #0
    867e:	d101      	bne.n	8684 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    8680:	3304      	adds	r3, #4
    8682:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    8684:	7e73      	ldrb	r3, [r6, #25]
    8686:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    8688:	7f32      	ldrb	r2, [r6, #28]
    868a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    868c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    868e:	7f72      	ldrb	r2, [r6, #29]
    8690:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    8692:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    8694:	2224      	movs	r2, #36	; 0x24
    8696:	5cb2      	ldrb	r2, [r6, r2]
    8698:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    869a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    869c:	2225      	movs	r2, #37	; 0x25
    869e:	5cb2      	ldrb	r2, [r6, r2]
    86a0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    86a2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    86a4:	7ab1      	ldrb	r1, [r6, #10]
    86a6:	7af2      	ldrb	r2, [r6, #11]
    86a8:	4311      	orrs	r1, r2
    86aa:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    86ac:	8933      	ldrh	r3, [r6, #8]
    86ae:	2bff      	cmp	r3, #255	; 0xff
    86b0:	d100      	bne.n	86b4 <usart_init+0x184>
    86b2:	e081      	b.n	87b8 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    86b4:	2280      	movs	r2, #128	; 0x80
    86b6:	0452      	lsls	r2, r2, #17
    86b8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    86ba:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    86bc:	232c      	movs	r3, #44	; 0x2c
    86be:	5cf3      	ldrb	r3, [r6, r3]
    86c0:	2b00      	cmp	r3, #0
    86c2:	d103      	bne.n	86cc <usart_init+0x19c>
    86c4:	4b62      	ldr	r3, [pc, #392]	; (8850 <usart_init+0x320>)
    86c6:	789b      	ldrb	r3, [r3, #2]
    86c8:	079b      	lsls	r3, r3, #30
    86ca:	d501      	bpl.n	86d0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    86cc:	2380      	movs	r3, #128	; 0x80
    86ce:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    86d0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    86d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    86d4:	2b00      	cmp	r3, #0
    86d6:	d1fc      	bne.n	86d2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    86d8:	4643      	mov	r3, r8
    86da:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    86dc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    86de:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    86e0:	2b00      	cmp	r3, #0
    86e2:	d1fc      	bne.n	86de <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    86e4:	4643      	mov	r3, r8
    86e6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    86e8:	ab0e      	add	r3, sp, #56	; 0x38
    86ea:	2280      	movs	r2, #128	; 0x80
    86ec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    86ee:	2200      	movs	r2, #0
    86f0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    86f2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    86f4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    86f6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    86f8:	930a      	str	r3, [sp, #40]	; 0x28
    86fa:	6b73      	ldr	r3, [r6, #52]	; 0x34
    86fc:	930b      	str	r3, [sp, #44]	; 0x2c
    86fe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    8700:	930c      	str	r3, [sp, #48]	; 0x30
    8702:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    8704:	9302      	str	r3, [sp, #8]
    8706:	930d      	str	r3, [sp, #52]	; 0x34
    8708:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    870a:	ae0a      	add	r6, sp, #40	; 0x28
    870c:	e063      	b.n	87d6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    870e:	2308      	movs	r3, #8
    8710:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    8712:	3b07      	subs	r3, #7
    8714:	9307      	str	r3, [sp, #28]
    8716:	e77a      	b.n	860e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    8718:	6833      	ldr	r3, [r6, #0]
    871a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    871c:	68f3      	ldr	r3, [r6, #12]
    871e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    8720:	6973      	ldr	r3, [r6, #20]
    8722:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    8724:	7e33      	ldrb	r3, [r6, #24]
    8726:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    8728:	2326      	movs	r3, #38	; 0x26
    872a:	5cf3      	ldrb	r3, [r6, r3]
    872c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    872e:	6873      	ldr	r3, [r6, #4]
    8730:	4699      	mov	r9, r3
	switch (transfer_mode)
    8732:	2b00      	cmp	r3, #0
    8734:	d018      	beq.n	8768 <usart_init+0x238>
    8736:	2380      	movs	r3, #128	; 0x80
    8738:	055b      	lsls	r3, r3, #21
    873a:	4599      	cmp	r9, r3
    873c:	d001      	beq.n	8742 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    873e:	2000      	movs	r0, #0
    8740:	e025      	b.n	878e <usart_init+0x25e>
			if (!config->use_external_clock) {
    8742:	2327      	movs	r3, #39	; 0x27
    8744:	5cf3      	ldrb	r3, [r6, r3]
    8746:	2b00      	cmp	r3, #0
    8748:	d000      	beq.n	874c <usart_init+0x21c>
    874a:	e775      	b.n	8638 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    874c:	6a33      	ldr	r3, [r6, #32]
    874e:	001f      	movs	r7, r3
    8750:	b2c0      	uxtb	r0, r0
    8752:	4b40      	ldr	r3, [pc, #256]	; (8854 <usart_init+0x324>)
    8754:	4798      	blx	r3
    8756:	0001      	movs	r1, r0
    8758:	220e      	movs	r2, #14
    875a:	ab06      	add	r3, sp, #24
    875c:	469c      	mov	ip, r3
    875e:	4462      	add	r2, ip
    8760:	0038      	movs	r0, r7
    8762:	4b3d      	ldr	r3, [pc, #244]	; (8858 <usart_init+0x328>)
    8764:	4798      	blx	r3
    8766:	e012      	b.n	878e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8768:	2308      	movs	r3, #8
    876a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    876c:	2300      	movs	r3, #0
    876e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    8770:	2327      	movs	r3, #39	; 0x27
    8772:	5cf3      	ldrb	r3, [r6, r3]
    8774:	2b00      	cmp	r3, #0
    8776:	d00e      	beq.n	8796 <usart_init+0x266>
				status_code =
    8778:	9b06      	ldr	r3, [sp, #24]
    877a:	9300      	str	r3, [sp, #0]
    877c:	9b07      	ldr	r3, [sp, #28]
    877e:	220e      	movs	r2, #14
    8780:	a906      	add	r1, sp, #24
    8782:	468c      	mov	ip, r1
    8784:	4462      	add	r2, ip
    8786:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    8788:	6a30      	ldr	r0, [r6, #32]
    878a:	4f34      	ldr	r7, [pc, #208]	; (885c <usart_init+0x32c>)
    878c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    878e:	2800      	cmp	r0, #0
    8790:	d000      	beq.n	8794 <usart_init+0x264>
    8792:	e6e0      	b.n	8556 <usart_init+0x26>
    8794:	e750      	b.n	8638 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    8796:	6a33      	ldr	r3, [r6, #32]
    8798:	001f      	movs	r7, r3
    879a:	b2c0      	uxtb	r0, r0
    879c:	4b2d      	ldr	r3, [pc, #180]	; (8854 <usart_init+0x324>)
    879e:	4798      	blx	r3
    87a0:	0001      	movs	r1, r0
				status_code =
    87a2:	9b06      	ldr	r3, [sp, #24]
    87a4:	9300      	str	r3, [sp, #0]
    87a6:	9b07      	ldr	r3, [sp, #28]
    87a8:	220e      	movs	r2, #14
    87aa:	a806      	add	r0, sp, #24
    87ac:	4684      	mov	ip, r0
    87ae:	4462      	add	r2, ip
    87b0:	0038      	movs	r0, r7
    87b2:	4f2a      	ldr	r7, [pc, #168]	; (885c <usart_init+0x32c>)
    87b4:	47b8      	blx	r7
    87b6:	e7ea      	b.n	878e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    87b8:	7ef3      	ldrb	r3, [r6, #27]
    87ba:	2b00      	cmp	r3, #0
    87bc:	d100      	bne.n	87c0 <usart_init+0x290>
    87be:	e77d      	b.n	86bc <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    87c0:	2380      	movs	r3, #128	; 0x80
    87c2:	04db      	lsls	r3, r3, #19
    87c4:	431f      	orrs	r7, r3
    87c6:	e779      	b.n	86bc <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    87c8:	0020      	movs	r0, r4
    87ca:	4b25      	ldr	r3, [pc, #148]	; (8860 <usart_init+0x330>)
    87cc:	4798      	blx	r3
    87ce:	e007      	b.n	87e0 <usart_init+0x2b0>
    87d0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    87d2:	2f04      	cmp	r7, #4
    87d4:	d00d      	beq.n	87f2 <usart_init+0x2c2>
    87d6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    87d8:	00bb      	lsls	r3, r7, #2
    87da:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    87dc:	2800      	cmp	r0, #0
    87de:	d0f3      	beq.n	87c8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    87e0:	1c43      	adds	r3, r0, #1
    87e2:	d0f5      	beq.n	87d0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    87e4:	a90e      	add	r1, sp, #56	; 0x38
    87e6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    87e8:	0c00      	lsrs	r0, r0, #16
    87ea:	b2c0      	uxtb	r0, r0
    87ec:	4b1d      	ldr	r3, [pc, #116]	; (8864 <usart_init+0x334>)
    87ee:	4798      	blx	r3
    87f0:	e7ee      	b.n	87d0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    87f2:	2300      	movs	r3, #0
    87f4:	60eb      	str	r3, [r5, #12]
    87f6:	612b      	str	r3, [r5, #16]
    87f8:	616b      	str	r3, [r5, #20]
    87fa:	61ab      	str	r3, [r5, #24]
    87fc:	61eb      	str	r3, [r5, #28]
    87fe:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    8800:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    8802:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    8804:	2200      	movs	r2, #0
    8806:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    8808:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    880a:	3330      	adds	r3, #48	; 0x30
    880c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    880e:	3301      	adds	r3, #1
    8810:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    8812:	3301      	adds	r3, #1
    8814:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    8816:	3301      	adds	r3, #1
    8818:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    881a:	6828      	ldr	r0, [r5, #0]
    881c:	4b07      	ldr	r3, [pc, #28]	; (883c <usart_init+0x30c>)
    881e:	4798      	blx	r3
    8820:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    8822:	4911      	ldr	r1, [pc, #68]	; (8868 <usart_init+0x338>)
    8824:	4b11      	ldr	r3, [pc, #68]	; (886c <usart_init+0x33c>)
    8826:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    8828:	00a4      	lsls	r4, r4, #2
    882a:	4b11      	ldr	r3, [pc, #68]	; (8870 <usart_init+0x340>)
    882c:	50e5      	str	r5, [r4, r3]
	return status_code;
    882e:	2000      	movs	r0, #0
    8830:	e691      	b.n	8556 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8832:	2310      	movs	r3, #16
    8834:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8836:	2300      	movs	r3, #0
    8838:	9307      	str	r3, [sp, #28]
    883a:	e6e8      	b.n	860e <usart_init+0xde>
    883c:	00009791 	.word	0x00009791
    8840:	40000400 	.word	0x40000400
    8844:	0000a2fd 	.word	0x0000a2fd
    8848:	0000a271 	.word	0x0000a271
    884c:	000095cd 	.word	0x000095cd
    8850:	41002000 	.word	0x41002000
    8854:	0000a319 	.word	0x0000a319
    8858:	0000950f 	.word	0x0000950f
    885c:	00009539 	.word	0x00009539
    8860:	00009619 	.word	0x00009619
    8864:	0000a3f5 	.word	0x0000a3f5
    8868:	00008a69 	.word	0x00008a69
    886c:	000097cd 	.word	0x000097cd
    8870:	20000730 	.word	0x20000730

00008874 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    8874:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    8876:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    8878:	2a00      	cmp	r2, #0
    887a:	d101      	bne.n	8880 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    887c:	0018      	movs	r0, r3
    887e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    8880:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    8882:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    8884:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    8886:	2a00      	cmp	r2, #0
    8888:	d1f8      	bne.n	887c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    888a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    888c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    888e:	2a00      	cmp	r2, #0
    8890:	d1fc      	bne.n	888c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    8892:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    8894:	2102      	movs	r1, #2
    8896:	7e1a      	ldrb	r2, [r3, #24]
    8898:	420a      	tst	r2, r1
    889a:	d0fc      	beq.n	8896 <usart_write_wait+0x22>
	return STATUS_OK;
    889c:	2300      	movs	r3, #0
    889e:	e7ed      	b.n	887c <usart_write_wait+0x8>

000088a0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    88a0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    88a2:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    88a4:	2a00      	cmp	r2, #0
    88a6:	d101      	bne.n	88ac <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    88a8:	0018      	movs	r0, r3
    88aa:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    88ac:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    88ae:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    88b0:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    88b2:	2a00      	cmp	r2, #0
    88b4:	d1f8      	bne.n	88a8 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    88b6:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    88b8:	7e10      	ldrb	r0, [r2, #24]
    88ba:	0740      	lsls	r0, r0, #29
    88bc:	d5f4      	bpl.n	88a8 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    88be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    88c0:	2b00      	cmp	r3, #0
    88c2:	d1fc      	bne.n	88be <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    88c4:	8b53      	ldrh	r3, [r2, #26]
    88c6:	b2db      	uxtb	r3, r3
	if (error_code) {
    88c8:	0698      	lsls	r0, r3, #26
    88ca:	d01d      	beq.n	8908 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    88cc:	0798      	lsls	r0, r3, #30
    88ce:	d503      	bpl.n	88d8 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    88d0:	2302      	movs	r3, #2
    88d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    88d4:	3318      	adds	r3, #24
    88d6:	e7e7      	b.n	88a8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    88d8:	0758      	lsls	r0, r3, #29
    88da:	d503      	bpl.n	88e4 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    88dc:	2304      	movs	r3, #4
    88de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    88e0:	331a      	adds	r3, #26
    88e2:	e7e1      	b.n	88a8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    88e4:	07d8      	lsls	r0, r3, #31
    88e6:	d503      	bpl.n	88f0 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    88e8:	2301      	movs	r3, #1
    88ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    88ec:	3312      	adds	r3, #18
    88ee:	e7db      	b.n	88a8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    88f0:	06d8      	lsls	r0, r3, #27
    88f2:	d503      	bpl.n	88fc <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    88f4:	2310      	movs	r3, #16
    88f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    88f8:	3332      	adds	r3, #50	; 0x32
    88fa:	e7d5      	b.n	88a8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    88fc:	069b      	lsls	r3, r3, #26
    88fe:	d503      	bpl.n	8908 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8900:	2320      	movs	r3, #32
    8902:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    8904:	3321      	adds	r3, #33	; 0x21
    8906:	e7cf      	b.n	88a8 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    8908:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    890a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    890c:	2300      	movs	r3, #0
    890e:	e7cb      	b.n	88a8 <usart_read_wait+0x8>

00008910 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    8910:	b5f0      	push	{r4, r5, r6, r7, lr}
    8912:	46ce      	mov	lr, r9
    8914:	4647      	mov	r7, r8
    8916:	b580      	push	{r7, lr}
    8918:	b083      	sub	sp, #12
    891a:	0005      	movs	r5, r0
    891c:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    891e:	2017      	movs	r0, #23
	if (length == 0) {
    8920:	2a00      	cmp	r2, #0
    8922:	d104      	bne.n	892e <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    8924:	b003      	add	sp, #12
    8926:	bc0c      	pop	{r2, r3}
    8928:	4690      	mov	r8, r2
    892a:	4699      	mov	r9, r3
    892c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    892e:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    8930:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    8932:	2b00      	cmp	r3, #0
    8934:	d0f6      	beq.n	8924 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    8936:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8938:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    893a:	2b00      	cmp	r3, #0
    893c:	d1fc      	bne.n	8938 <usart_write_buffer_wait+0x28>
	while (length--) {
    893e:	3a01      	subs	r2, #1
    8940:	b293      	uxth	r3, r2
    8942:	4699      	mov	r9, r3
    8944:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    8946:	2701      	movs	r7, #1
	while (length--) {
    8948:	4b1f      	ldr	r3, [pc, #124]	; (89c8 <usart_write_buffer_wait+0xb8>)
    894a:	4698      	mov	r8, r3
    894c:	e011      	b.n	8972 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    894e:	1c73      	adds	r3, r6, #1
    8950:	b29b      	uxth	r3, r3
    8952:	9a01      	ldr	r2, [sp, #4]
    8954:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8956:	796a      	ldrb	r2, [r5, #5]
    8958:	2a01      	cmp	r2, #1
    895a:	d017      	beq.n	898c <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    895c:	b289      	uxth	r1, r1
    895e:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    8960:	0028      	movs	r0, r5
    8962:	4b1a      	ldr	r3, [pc, #104]	; (89cc <usart_write_buffer_wait+0xbc>)
    8964:	4798      	blx	r3
	while (length--) {
    8966:	464b      	mov	r3, r9
    8968:	3b01      	subs	r3, #1
    896a:	b29b      	uxth	r3, r3
    896c:	4699      	mov	r9, r3
    896e:	4543      	cmp	r3, r8
    8970:	d013      	beq.n	899a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    8972:	7e23      	ldrb	r3, [r4, #24]
    8974:	423b      	tst	r3, r7
    8976:	d1ea      	bne.n	894e <usart_write_buffer_wait+0x3e>
    8978:	4b13      	ldr	r3, [pc, #76]	; (89c8 <usart_write_buffer_wait+0xb8>)
    897a:	7e22      	ldrb	r2, [r4, #24]
    897c:	423a      	tst	r2, r7
    897e:	d1e6      	bne.n	894e <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    8980:	2b01      	cmp	r3, #1
    8982:	d019      	beq.n	89b8 <usart_write_buffer_wait+0xa8>
    8984:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    8986:	2b00      	cmp	r3, #0
    8988:	d1f7      	bne.n	897a <usart_write_buffer_wait+0x6a>
    898a:	e7e0      	b.n	894e <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    898c:	3602      	adds	r6, #2
    898e:	b2b6      	uxth	r6, r6
    8990:	9a01      	ldr	r2, [sp, #4]
    8992:	5cd3      	ldrb	r3, [r2, r3]
    8994:	021b      	lsls	r3, r3, #8
    8996:	4319      	orrs	r1, r3
    8998:	e7e2      	b.n	8960 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    899a:	7e23      	ldrb	r3, [r4, #24]
    899c:	079b      	lsls	r3, r3, #30
    899e:	d40d      	bmi.n	89bc <usart_write_buffer_wait+0xac>
    89a0:	4b09      	ldr	r3, [pc, #36]	; (89c8 <usart_write_buffer_wait+0xb8>)
    89a2:	2102      	movs	r1, #2
    89a4:	7e22      	ldrb	r2, [r4, #24]
    89a6:	420a      	tst	r2, r1
    89a8:	d10a      	bne.n	89c0 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    89aa:	2b01      	cmp	r3, #1
    89ac:	d00a      	beq.n	89c4 <usart_write_buffer_wait+0xb4>
    89ae:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    89b0:	2b00      	cmp	r3, #0
    89b2:	d1f7      	bne.n	89a4 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    89b4:	2000      	movs	r0, #0
    89b6:	e7b5      	b.n	8924 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    89b8:	2012      	movs	r0, #18
    89ba:	e7b3      	b.n	8924 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    89bc:	2000      	movs	r0, #0
    89be:	e7b1      	b.n	8924 <usart_write_buffer_wait+0x14>
    89c0:	2000      	movs	r0, #0
    89c2:	e7af      	b.n	8924 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    89c4:	2012      	movs	r0, #18
    89c6:	e7ad      	b.n	8924 <usart_write_buffer_wait+0x14>
    89c8:	0000ffff 	.word	0x0000ffff
    89cc:	00008875 	.word	0x00008875

000089d0 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    89d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    89d2:	46d6      	mov	lr, sl
    89d4:	b500      	push	{lr}
    89d6:	b084      	sub	sp, #16
    89d8:	0004      	movs	r4, r0
    89da:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    89dc:	2017      	movs	r0, #23
	if (length == 0) {
    89de:	2a00      	cmp	r2, #0
    89e0:	d103      	bne.n	89ea <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    89e2:	b004      	add	sp, #16
    89e4:	bc04      	pop	{r2}
    89e6:	4692      	mov	sl, r2
    89e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    89ea:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    89ec:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    89ee:	2b00      	cmp	r3, #0
    89f0:	d0f7      	beq.n	89e2 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    89f2:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    89f4:	3a01      	subs	r2, #1
    89f6:	b293      	uxth	r3, r2
    89f8:	469a      	mov	sl, r3
    89fa:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    89fc:	2704      	movs	r7, #4
    89fe:	e019      	b.n	8a34 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    8a00:	2300      	movs	r3, #0
    8a02:	aa02      	add	r2, sp, #8
    8a04:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    8a06:	1d91      	adds	r1, r2, #6
    8a08:	0020      	movs	r0, r4
    8a0a:	4b15      	ldr	r3, [pc, #84]	; (8a60 <usart_read_buffer_wait+0x90>)
    8a0c:	4798      	blx	r3
		if (retval != STATUS_OK) {
    8a0e:	2800      	cmp	r0, #0
    8a10:	d1e7      	bne.n	89e2 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    8a12:	1c69      	adds	r1, r5, #1
    8a14:	b289      	uxth	r1, r1
    8a16:	ab02      	add	r3, sp, #8
    8a18:	88db      	ldrh	r3, [r3, #6]
    8a1a:	9a01      	ldr	r2, [sp, #4]
    8a1c:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8a1e:	7962      	ldrb	r2, [r4, #5]
    8a20:	2a01      	cmp	r2, #1
    8a22:	d014      	beq.n	8a4e <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    8a24:	000d      	movs	r5, r1
	while (length--) {
    8a26:	4653      	mov	r3, sl
    8a28:	3b01      	subs	r3, #1
    8a2a:	b29b      	uxth	r3, r3
    8a2c:	469a      	mov	sl, r3
    8a2e:	4b0d      	ldr	r3, [pc, #52]	; (8a64 <usart_read_buffer_wait+0x94>)
    8a30:	459a      	cmp	sl, r3
    8a32:	d0d6      	beq.n	89e2 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    8a34:	7e33      	ldrb	r3, [r6, #24]
    8a36:	423b      	tst	r3, r7
    8a38:	d1e2      	bne.n	8a00 <usart_read_buffer_wait+0x30>
    8a3a:	4b0a      	ldr	r3, [pc, #40]	; (8a64 <usart_read_buffer_wait+0x94>)
    8a3c:	7e32      	ldrb	r2, [r6, #24]
    8a3e:	423a      	tst	r2, r7
    8a40:	d1de      	bne.n	8a00 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    8a42:	2b01      	cmp	r3, #1
    8a44:	d009      	beq.n	8a5a <usart_read_buffer_wait+0x8a>
    8a46:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d1f7      	bne.n	8a3c <usart_read_buffer_wait+0x6c>
    8a4c:	e7d8      	b.n	8a00 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    8a4e:	3502      	adds	r5, #2
    8a50:	b2ad      	uxth	r5, r5
    8a52:	0a1b      	lsrs	r3, r3, #8
    8a54:	9a01      	ldr	r2, [sp, #4]
    8a56:	5453      	strb	r3, [r2, r1]
    8a58:	e7e5      	b.n	8a26 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    8a5a:	2012      	movs	r0, #18
    8a5c:	e7c1      	b.n	89e2 <usart_read_buffer_wait+0x12>
    8a5e:	46c0      	nop			; (mov r8, r8)
    8a60:	000088a1 	.word	0x000088a1
    8a64:	0000ffff 	.word	0x0000ffff

00008a68 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    8a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    8a6a:	0080      	lsls	r0, r0, #2
    8a6c:	4b62      	ldr	r3, [pc, #392]	; (8bf8 <_usart_interrupt_handler+0x190>)
    8a6e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    8a70:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8a72:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    8a74:	2b00      	cmp	r3, #0
    8a76:	d1fc      	bne.n	8a72 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    8a78:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    8a7a:	7da6      	ldrb	r6, [r4, #22]
    8a7c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    8a7e:	2330      	movs	r3, #48	; 0x30
    8a80:	5ceb      	ldrb	r3, [r5, r3]
    8a82:	2231      	movs	r2, #49	; 0x31
    8a84:	5caf      	ldrb	r7, [r5, r2]
    8a86:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    8a88:	07f3      	lsls	r3, r6, #31
    8a8a:	d522      	bpl.n	8ad2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    8a8c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    8a8e:	b29b      	uxth	r3, r3
    8a90:	2b00      	cmp	r3, #0
    8a92:	d01c      	beq.n	8ace <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8a94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    8a96:	7813      	ldrb	r3, [r2, #0]
    8a98:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    8a9a:	1c51      	adds	r1, r2, #1
    8a9c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8a9e:	7969      	ldrb	r1, [r5, #5]
    8aa0:	2901      	cmp	r1, #1
    8aa2:	d00e      	beq.n	8ac2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8aa4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    8aa6:	05db      	lsls	r3, r3, #23
    8aa8:	0ddb      	lsrs	r3, r3, #23
    8aaa:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    8aac:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    8aae:	3b01      	subs	r3, #1
    8ab0:	b29b      	uxth	r3, r3
    8ab2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d10c      	bne.n	8ad2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    8ab8:	3301      	adds	r3, #1
    8aba:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    8abc:	3301      	adds	r3, #1
    8abe:	75a3      	strb	r3, [r4, #22]
    8ac0:	e007      	b.n	8ad2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    8ac2:	7851      	ldrb	r1, [r2, #1]
    8ac4:	0209      	lsls	r1, r1, #8
    8ac6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    8ac8:	3202      	adds	r2, #2
    8aca:	62aa      	str	r2, [r5, #40]	; 0x28
    8acc:	e7eb      	b.n	8aa6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    8ace:	2301      	movs	r3, #1
    8ad0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    8ad2:	07b3      	lsls	r3, r6, #30
    8ad4:	d506      	bpl.n	8ae4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    8ad6:	2302      	movs	r3, #2
    8ad8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    8ada:	2200      	movs	r2, #0
    8adc:	3331      	adds	r3, #49	; 0x31
    8ade:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    8ae0:	07fb      	lsls	r3, r7, #31
    8ae2:	d41a      	bmi.n	8b1a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    8ae4:	0773      	lsls	r3, r6, #29
    8ae6:	d565      	bpl.n	8bb4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    8ae8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    8aea:	b29b      	uxth	r3, r3
    8aec:	2b00      	cmp	r3, #0
    8aee:	d05f      	beq.n	8bb0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8af0:	8b63      	ldrh	r3, [r4, #26]
    8af2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    8af4:	071a      	lsls	r2, r3, #28
    8af6:	d414      	bmi.n	8b22 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8af8:	223f      	movs	r2, #63	; 0x3f
    8afa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    8afc:	2b00      	cmp	r3, #0
    8afe:	d034      	beq.n	8b6a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    8b00:	079a      	lsls	r2, r3, #30
    8b02:	d511      	bpl.n	8b28 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    8b04:	221a      	movs	r2, #26
    8b06:	2332      	movs	r3, #50	; 0x32
    8b08:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    8b0a:	3b30      	subs	r3, #48	; 0x30
    8b0c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    8b0e:	077b      	lsls	r3, r7, #29
    8b10:	d550      	bpl.n	8bb4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    8b12:	0028      	movs	r0, r5
    8b14:	696b      	ldr	r3, [r5, #20]
    8b16:	4798      	blx	r3
    8b18:	e04c      	b.n	8bb4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    8b1a:	0028      	movs	r0, r5
    8b1c:	68eb      	ldr	r3, [r5, #12]
    8b1e:	4798      	blx	r3
    8b20:	e7e0      	b.n	8ae4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    8b22:	2237      	movs	r2, #55	; 0x37
    8b24:	4013      	ands	r3, r2
    8b26:	e7e9      	b.n	8afc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8b28:	075a      	lsls	r2, r3, #29
    8b2a:	d505      	bpl.n	8b38 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    8b2c:	221e      	movs	r2, #30
    8b2e:	2332      	movs	r3, #50	; 0x32
    8b30:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    8b32:	3b2e      	subs	r3, #46	; 0x2e
    8b34:	8363      	strh	r3, [r4, #26]
    8b36:	e7ea      	b.n	8b0e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8b38:	07da      	lsls	r2, r3, #31
    8b3a:	d505      	bpl.n	8b48 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    8b3c:	2213      	movs	r2, #19
    8b3e:	2332      	movs	r3, #50	; 0x32
    8b40:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    8b42:	3b31      	subs	r3, #49	; 0x31
    8b44:	8363      	strh	r3, [r4, #26]
    8b46:	e7e2      	b.n	8b0e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    8b48:	06da      	lsls	r2, r3, #27
    8b4a:	d505      	bpl.n	8b58 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    8b4c:	2242      	movs	r2, #66	; 0x42
    8b4e:	2332      	movs	r3, #50	; 0x32
    8b50:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    8b52:	3b22      	subs	r3, #34	; 0x22
    8b54:	8363      	strh	r3, [r4, #26]
    8b56:	e7da      	b.n	8b0e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    8b58:	2220      	movs	r2, #32
    8b5a:	421a      	tst	r2, r3
    8b5c:	d0d7      	beq.n	8b0e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    8b5e:	3221      	adds	r2, #33	; 0x21
    8b60:	2332      	movs	r3, #50	; 0x32
    8b62:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8b64:	3b12      	subs	r3, #18
    8b66:	8363      	strh	r3, [r4, #26]
    8b68:	e7d1      	b.n	8b0e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    8b6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    8b6c:	05db      	lsls	r3, r3, #23
    8b6e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    8b70:	b2da      	uxtb	r2, r3
    8b72:	6a69      	ldr	r1, [r5, #36]	; 0x24
    8b74:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    8b76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8b78:	1c51      	adds	r1, r2, #1
    8b7a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8b7c:	7969      	ldrb	r1, [r5, #5]
    8b7e:	2901      	cmp	r1, #1
    8b80:	d010      	beq.n	8ba4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    8b82:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    8b84:	3b01      	subs	r3, #1
    8b86:	b29b      	uxth	r3, r3
    8b88:	85ab      	strh	r3, [r5, #44]	; 0x2c
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d112      	bne.n	8bb4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8b8e:	3304      	adds	r3, #4
    8b90:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    8b92:	2200      	movs	r2, #0
    8b94:	332e      	adds	r3, #46	; 0x2e
    8b96:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    8b98:	07bb      	lsls	r3, r7, #30
    8b9a:	d50b      	bpl.n	8bb4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    8b9c:	0028      	movs	r0, r5
    8b9e:	692b      	ldr	r3, [r5, #16]
    8ba0:	4798      	blx	r3
    8ba2:	e007      	b.n	8bb4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    8ba4:	0a1b      	lsrs	r3, r3, #8
    8ba6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    8ba8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8baa:	3301      	adds	r3, #1
    8bac:	626b      	str	r3, [r5, #36]	; 0x24
    8bae:	e7e8      	b.n	8b82 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8bb0:	2304      	movs	r3, #4
    8bb2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    8bb4:	06f3      	lsls	r3, r6, #27
    8bb6:	d504      	bpl.n	8bc2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    8bb8:	2310      	movs	r3, #16
    8bba:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    8bbc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    8bbe:	06fb      	lsls	r3, r7, #27
    8bc0:	d40e      	bmi.n	8be0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    8bc2:	06b3      	lsls	r3, r6, #26
    8bc4:	d504      	bpl.n	8bd0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    8bc6:	2320      	movs	r3, #32
    8bc8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    8bca:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    8bcc:	073b      	lsls	r3, r7, #28
    8bce:	d40b      	bmi.n	8be8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    8bd0:	0733      	lsls	r3, r6, #28
    8bd2:	d504      	bpl.n	8bde <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    8bd4:	2308      	movs	r3, #8
    8bd6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    8bd8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    8bda:	06bb      	lsls	r3, r7, #26
    8bdc:	d408      	bmi.n	8bf0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    8bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    8be0:	0028      	movs	r0, r5
    8be2:	69eb      	ldr	r3, [r5, #28]
    8be4:	4798      	blx	r3
    8be6:	e7ec      	b.n	8bc2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    8be8:	0028      	movs	r0, r5
    8bea:	69ab      	ldr	r3, [r5, #24]
    8bec:	4798      	blx	r3
    8bee:	e7ef      	b.n	8bd0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    8bf0:	6a2b      	ldr	r3, [r5, #32]
    8bf2:	0028      	movs	r0, r5
    8bf4:	4798      	blx	r3
}
    8bf6:	e7f2      	b.n	8bde <_usart_interrupt_handler+0x176>
    8bf8:	20000730 	.word	0x20000730

00008bfc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    8bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bfe:	b08b      	sub	sp, #44	; 0x2c
    8c00:	0005      	movs	r5, r0
    8c02:	000c      	movs	r4, r1
    8c04:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    8c06:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    8c08:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    8c0a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    8c0c:	079b      	lsls	r3, r3, #30
    8c0e:	d501      	bpl.n	8c14 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    8c10:	b00b      	add	sp, #44	; 0x2c
    8c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    8c14:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    8c16:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    8c18:	07db      	lsls	r3, r3, #31
    8c1a:	d4f9      	bmi.n	8c10 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8c1c:	0008      	movs	r0, r1
    8c1e:	4b6f      	ldr	r3, [pc, #444]	; (8ddc <spi_init+0x1e0>)
    8c20:	4798      	blx	r3
    8c22:	4a6f      	ldr	r2, [pc, #444]	; (8de0 <spi_init+0x1e4>)
    8c24:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8c26:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    8c28:	2301      	movs	r3, #1
    8c2a:	40bb      	lsls	r3, r7
    8c2c:	430b      	orrs	r3, r1
    8c2e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    8c30:	a909      	add	r1, sp, #36	; 0x24
    8c32:	2724      	movs	r7, #36	; 0x24
    8c34:	5df3      	ldrb	r3, [r6, r7]
    8c36:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8c38:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8c3a:	b2c3      	uxtb	r3, r0
    8c3c:	9301      	str	r3, [sp, #4]
    8c3e:	0018      	movs	r0, r3
    8c40:	4b68      	ldr	r3, [pc, #416]	; (8de4 <spi_init+0x1e8>)
    8c42:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    8c44:	9801      	ldr	r0, [sp, #4]
    8c46:	4b68      	ldr	r3, [pc, #416]	; (8de8 <spi_init+0x1ec>)
    8c48:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    8c4a:	5df0      	ldrb	r0, [r6, r7]
    8c4c:	2100      	movs	r1, #0
    8c4e:	4b67      	ldr	r3, [pc, #412]	; (8dec <spi_init+0x1f0>)
    8c50:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    8c52:	7833      	ldrb	r3, [r6, #0]
    8c54:	2b01      	cmp	r3, #1
    8c56:	d03f      	beq.n	8cd8 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    8c58:	7833      	ldrb	r3, [r6, #0]
    8c5a:	2b00      	cmp	r3, #0
    8c5c:	d103      	bne.n	8c66 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    8c5e:	6823      	ldr	r3, [r4, #0]
    8c60:	2208      	movs	r2, #8
    8c62:	4313      	orrs	r3, r2
    8c64:	6023      	str	r3, [r4, #0]
    8c66:	002b      	movs	r3, r5
    8c68:	330c      	adds	r3, #12
    8c6a:	0029      	movs	r1, r5
    8c6c:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    8c6e:	2200      	movs	r2, #0
    8c70:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    8c72:	428b      	cmp	r3, r1
    8c74:	d1fc      	bne.n	8c70 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    8c76:	2300      	movs	r3, #0
    8c78:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    8c7a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    8c7c:	2400      	movs	r4, #0
    8c7e:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    8c80:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    8c82:	3336      	adds	r3, #54	; 0x36
    8c84:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    8c86:	3301      	adds	r3, #1
    8c88:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    8c8a:	3301      	adds	r3, #1
    8c8c:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    8c8e:	3b35      	subs	r3, #53	; 0x35
    8c90:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    8c92:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    8c94:	6828      	ldr	r0, [r5, #0]
    8c96:	4b51      	ldr	r3, [pc, #324]	; (8ddc <spi_init+0x1e0>)
    8c98:	4798      	blx	r3
    8c9a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    8c9c:	4954      	ldr	r1, [pc, #336]	; (8df0 <spi_init+0x1f4>)
    8c9e:	4b55      	ldr	r3, [pc, #340]	; (8df4 <spi_init+0x1f8>)
    8ca0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    8ca2:	00bf      	lsls	r7, r7, #2
    8ca4:	4b54      	ldr	r3, [pc, #336]	; (8df8 <spi_init+0x1fc>)
    8ca6:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8ca8:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8caa:	ab04      	add	r3, sp, #16
    8cac:	2280      	movs	r2, #128	; 0x80
    8cae:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8cb0:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8cb2:	3a7f      	subs	r2, #127	; 0x7f
    8cb4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8cb6:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    8cb8:	7833      	ldrb	r3, [r6, #0]
    8cba:	2b00      	cmp	r3, #0
    8cbc:	d102      	bne.n	8cc4 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    8cbe:	2200      	movs	r2, #0
    8cc0:	ab04      	add	r3, sp, #16
    8cc2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    8cc4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8cc6:	9305      	str	r3, [sp, #20]
    8cc8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8cca:	9306      	str	r3, [sp, #24]
    8ccc:	6b33      	ldr	r3, [r6, #48]	; 0x30
    8cce:	9307      	str	r3, [sp, #28]
    8cd0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    8cd2:	9308      	str	r3, [sp, #32]
    8cd4:	2400      	movs	r4, #0
    8cd6:	e00b      	b.n	8cf0 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    8cd8:	6823      	ldr	r3, [r4, #0]
    8cda:	220c      	movs	r2, #12
    8cdc:	4313      	orrs	r3, r2
    8cde:	6023      	str	r3, [r4, #0]
    8ce0:	e7ba      	b.n	8c58 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    8ce2:	0038      	movs	r0, r7
    8ce4:	4b45      	ldr	r3, [pc, #276]	; (8dfc <spi_init+0x200>)
    8ce6:	4798      	blx	r3
    8ce8:	e00a      	b.n	8d00 <spi_init+0x104>
    8cea:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    8cec:	2c04      	cmp	r4, #4
    8cee:	d010      	beq.n	8d12 <spi_init+0x116>
    8cf0:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    8cf2:	00a3      	lsls	r3, r4, #2
    8cf4:	aa02      	add	r2, sp, #8
    8cf6:	200c      	movs	r0, #12
    8cf8:	1812      	adds	r2, r2, r0
    8cfa:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    8cfc:	2800      	cmp	r0, #0
    8cfe:	d0f0      	beq.n	8ce2 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    8d00:	1c43      	adds	r3, r0, #1
    8d02:	d0f2      	beq.n	8cea <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    8d04:	a904      	add	r1, sp, #16
    8d06:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    8d08:	0c00      	lsrs	r0, r0, #16
    8d0a:	b2c0      	uxtb	r0, r0
    8d0c:	4b3c      	ldr	r3, [pc, #240]	; (8e00 <spi_init+0x204>)
    8d0e:	4798      	blx	r3
    8d10:	e7eb      	b.n	8cea <spi_init+0xee>
	module->mode             = config->mode;
    8d12:	7833      	ldrb	r3, [r6, #0]
    8d14:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    8d16:	7c33      	ldrb	r3, [r6, #16]
    8d18:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    8d1a:	7cb3      	ldrb	r3, [r6, #18]
    8d1c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    8d1e:	7d33      	ldrb	r3, [r6, #20]
    8d20:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    8d22:	2200      	movs	r2, #0
    8d24:	ab02      	add	r3, sp, #8
    8d26:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    8d28:	7833      	ldrb	r3, [r6, #0]
    8d2a:	2b01      	cmp	r3, #1
    8d2c:	d012      	beq.n	8d54 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    8d2e:	7833      	ldrb	r3, [r6, #0]
    8d30:	2b00      	cmp	r3, #0
    8d32:	d126      	bne.n	8d82 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    8d34:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    8d36:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    8d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    8d3a:	7ff1      	ldrb	r1, [r6, #31]
    8d3c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    8d3e:	7fb4      	ldrb	r4, [r6, #30]
    8d40:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    8d42:	4319      	orrs	r1, r3
    8d44:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    8d46:	2320      	movs	r3, #32
    8d48:	5cf3      	ldrb	r3, [r6, r3]
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d01b      	beq.n	8d86 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    8d4e:	2340      	movs	r3, #64	; 0x40
    8d50:	431a      	orrs	r2, r3
    8d52:	e018      	b.n	8d86 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8d54:	6828      	ldr	r0, [r5, #0]
    8d56:	4b21      	ldr	r3, [pc, #132]	; (8ddc <spi_init+0x1e0>)
    8d58:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8d5a:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    8d5c:	b2c0      	uxtb	r0, r0
    8d5e:	4b29      	ldr	r3, [pc, #164]	; (8e04 <spi_init+0x208>)
    8d60:	4798      	blx	r3
    8d62:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    8d64:	ab02      	add	r3, sp, #8
    8d66:	1d9a      	adds	r2, r3, #6
    8d68:	69b0      	ldr	r0, [r6, #24]
    8d6a:	4b27      	ldr	r3, [pc, #156]	; (8e08 <spi_init+0x20c>)
    8d6c:	4798      	blx	r3
    8d6e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    8d70:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    8d72:	2b00      	cmp	r3, #0
    8d74:	d000      	beq.n	8d78 <spi_init+0x17c>
    8d76:	e74b      	b.n	8c10 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    8d78:	ab02      	add	r3, sp, #8
    8d7a:	3306      	adds	r3, #6
    8d7c:	781b      	ldrb	r3, [r3, #0]
    8d7e:	733b      	strb	r3, [r7, #12]
    8d80:	e7d5      	b.n	8d2e <spi_init+0x132>
	uint32_t ctrlb = 0;
    8d82:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    8d84:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    8d86:	6873      	ldr	r3, [r6, #4]
    8d88:	68b1      	ldr	r1, [r6, #8]
    8d8a:	430b      	orrs	r3, r1
    8d8c:	68f1      	ldr	r1, [r6, #12]
    8d8e:	430b      	orrs	r3, r1
    8d90:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    8d92:	7c31      	ldrb	r1, [r6, #16]
    8d94:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    8d96:	7c71      	ldrb	r1, [r6, #17]
    8d98:	2900      	cmp	r1, #0
    8d9a:	d103      	bne.n	8da4 <spi_init+0x1a8>
    8d9c:	491b      	ldr	r1, [pc, #108]	; (8e0c <spi_init+0x210>)
    8d9e:	7889      	ldrb	r1, [r1, #2]
    8da0:	0789      	lsls	r1, r1, #30
    8da2:	d501      	bpl.n	8da8 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    8da4:	2180      	movs	r1, #128	; 0x80
    8da6:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    8da8:	7cb1      	ldrb	r1, [r6, #18]
    8daa:	2900      	cmp	r1, #0
    8dac:	d002      	beq.n	8db4 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    8dae:	2180      	movs	r1, #128	; 0x80
    8db0:	0289      	lsls	r1, r1, #10
    8db2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    8db4:	7cf1      	ldrb	r1, [r6, #19]
    8db6:	2900      	cmp	r1, #0
    8db8:	d002      	beq.n	8dc0 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    8dba:	2180      	movs	r1, #128	; 0x80
    8dbc:	0089      	lsls	r1, r1, #2
    8dbe:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    8dc0:	7d31      	ldrb	r1, [r6, #20]
    8dc2:	2900      	cmp	r1, #0
    8dc4:	d002      	beq.n	8dcc <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    8dc6:	2180      	movs	r1, #128	; 0x80
    8dc8:	0189      	lsls	r1, r1, #6
    8dca:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    8dcc:	6839      	ldr	r1, [r7, #0]
    8dce:	430b      	orrs	r3, r1
    8dd0:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	431a      	orrs	r2, r3
    8dd6:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    8dd8:	2000      	movs	r0, #0
    8dda:	e719      	b.n	8c10 <spi_init+0x14>
    8ddc:	00009791 	.word	0x00009791
    8de0:	40000400 	.word	0x40000400
    8de4:	0000a2fd 	.word	0x0000a2fd
    8de8:	0000a271 	.word	0x0000a271
    8dec:	000095cd 	.word	0x000095cd
    8df0:	00009231 	.word	0x00009231
    8df4:	000097cd 	.word	0x000097cd
    8df8:	20000730 	.word	0x20000730
    8dfc:	00009619 	.word	0x00009619
    8e00:	0000a3f5 	.word	0x0000a3f5
    8e04:	0000a319 	.word	0x0000a319
    8e08:	0000950f 	.word	0x0000950f
    8e0c:	41002000 	.word	0x41002000

00008e10 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    8e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e12:	46d6      	mov	lr, sl
    8e14:	464f      	mov	r7, r9
    8e16:	b580      	push	{r7, lr}
    8e18:	b083      	sub	sp, #12
    8e1a:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    8e1c:	2538      	movs	r5, #56	; 0x38
    8e1e:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    8e20:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    8e22:	2e05      	cmp	r6, #5
    8e24:	d075      	beq.n	8f12 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    8e26:	3512      	adds	r5, #18
	if (length == 0) {
    8e28:	2a00      	cmp	r2, #0
    8e2a:	d072      	beq.n	8f12 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    8e2c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    8e2e:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    8e30:	2c00      	cmp	r4, #0
    8e32:	d06e      	beq.n	8f12 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    8e34:	7944      	ldrb	r4, [r0, #5]
    8e36:	2c00      	cmp	r4, #0
    8e38:	d103      	bne.n	8e42 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8e3a:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8e3c:	7e25      	ldrb	r5, [r4, #24]
    8e3e:	07a9      	lsls	r1, r5, #30
    8e40:	d40a      	bmi.n	8e58 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    8e42:	3a01      	subs	r2, #1
    8e44:	b294      	uxth	r4, r2
    8e46:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    8e48:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    8e4a:	2102      	movs	r1, #2
    8e4c:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    8e4e:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8e50:	05db      	lsls	r3, r3, #23
    8e52:	0ddb      	lsrs	r3, r3, #23
    8e54:	469a      	mov	sl, r3
    8e56:	e037      	b.n	8ec8 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8e58:	2502      	movs	r5, #2
    8e5a:	7625      	strb	r5, [r4, #24]
    8e5c:	e7f1      	b.n	8e42 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8e5e:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8e60:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    8e62:	423b      	tst	r3, r7
    8e64:	d0fc      	beq.n	8e60 <spi_read_buffer_wait+0x50>
    8e66:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    8e68:	423b      	tst	r3, r7
    8e6a:	d009      	beq.n	8e80 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8e6c:	4653      	mov	r3, sl
    8e6e:	628b      	str	r3, [r1, #40]	; 0x28
    8e70:	e02d      	b.n	8ece <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8e72:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    8e74:	464d      	mov	r5, r9
    8e76:	422b      	tst	r3, r5
    8e78:	d138      	bne.n	8eec <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8e7a:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    8e7c:	4213      	tst	r3, r2
    8e7e:	d045      	beq.n	8f0c <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8e80:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8e82:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    8e84:	4213      	tst	r3, r2
    8e86:	d0fc      	beq.n	8e82 <spi_read_buffer_wait+0x72>
    8e88:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    8e8a:	4213      	tst	r3, r2
    8e8c:	d040      	beq.n	8f10 <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8e8e:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    8e90:	2500      	movs	r5, #0
    8e92:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8e94:	4213      	tst	r3, r2
    8e96:	d002      	beq.n	8e9e <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8e98:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    8e9a:	231e      	movs	r3, #30
    8e9c:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8e9e:	7983      	ldrb	r3, [r0, #6]
    8ea0:	2b01      	cmp	r3, #1
    8ea2:	d027      	beq.n	8ef4 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8ea4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8ea6:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    8ea8:	9901      	ldr	r1, [sp, #4]
    8eaa:	2900      	cmp	r1, #0
    8eac:	d137      	bne.n	8f1e <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    8eae:	1c75      	adds	r5, r6, #1
    8eb0:	b2ad      	uxth	r5, r5
    8eb2:	4661      	mov	r1, ip
    8eb4:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8eb6:	7981      	ldrb	r1, [r0, #6]
    8eb8:	2901      	cmp	r1, #1
    8eba:	d01f      	beq.n	8efc <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    8ebc:	002e      	movs	r6, r5
	while (length--) {
    8ebe:	3c01      	subs	r4, #1
    8ec0:	b2a4      	uxth	r4, r4
    8ec2:	4b18      	ldr	r3, [pc, #96]	; (8f24 <spi_read_buffer_wait+0x114>)
    8ec4:	429c      	cmp	r4, r3
    8ec6:	d01f      	beq.n	8f08 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    8ec8:	7943      	ldrb	r3, [r0, #5]
    8eca:	2b01      	cmp	r3, #1
    8ecc:	d0c7      	beq.n	8e5e <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    8ece:	7943      	ldrb	r3, [r0, #5]
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d1d5      	bne.n	8e80 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8ed4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8ed6:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    8ed8:	4213      	tst	r3, r2
    8eda:	d1ca      	bne.n	8e72 <spi_read_buffer_wait+0x62>
    8edc:	4b12      	ldr	r3, [pc, #72]	; (8f28 <spi_read_buffer_wait+0x118>)
    8ede:	7e0d      	ldrb	r5, [r1, #24]
    8ee0:	4215      	tst	r5, r2
    8ee2:	d1c6      	bne.n	8e72 <spi_read_buffer_wait+0x62>
    8ee4:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d1f9      	bne.n	8ede <spi_read_buffer_wait+0xce>
    8eea:	e7c2      	b.n	8e72 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8eec:	2302      	movs	r3, #2
    8eee:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    8ef0:	2504      	movs	r5, #4
    8ef2:	e00e      	b.n	8f12 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8ef4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8ef6:	05db      	lsls	r3, r3, #23
    8ef8:	0ddb      	lsrs	r3, r3, #23
    8efa:	e7d5      	b.n	8ea8 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    8efc:	3602      	adds	r6, #2
    8efe:	b2b6      	uxth	r6, r6
    8f00:	0a1b      	lsrs	r3, r3, #8
    8f02:	4661      	mov	r1, ip
    8f04:	554b      	strb	r3, [r1, r5]
    8f06:	e7da      	b.n	8ebe <spi_read_buffer_wait+0xae>
    8f08:	9d01      	ldr	r5, [sp, #4]
    8f0a:	e002      	b.n	8f12 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    8f0c:	2512      	movs	r5, #18
    8f0e:	e000      	b.n	8f12 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    8f10:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    8f12:	0028      	movs	r0, r5
    8f14:	b003      	add	sp, #12
    8f16:	bc0c      	pop	{r2, r3}
    8f18:	4691      	mov	r9, r2
    8f1a:	469a      	mov	sl, r3
    8f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f1e:	9d01      	ldr	r5, [sp, #4]
    8f20:	e7f7      	b.n	8f12 <spi_read_buffer_wait+0x102>
    8f22:	46c0      	nop			; (mov r8, r8)
    8f24:	0000ffff 	.word	0x0000ffff
    8f28:	00002710 	.word	0x00002710

00008f2c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    8f2c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    8f2e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    8f30:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    8f32:	2c01      	cmp	r4, #1
    8f34:	d001      	beq.n	8f3a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    8f36:	0018      	movs	r0, r3
    8f38:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    8f3a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    8f3c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    8f3e:	2c00      	cmp	r4, #0
    8f40:	d1f9      	bne.n	8f36 <spi_select_slave+0xa>
		if (select) {
    8f42:	2a00      	cmp	r2, #0
    8f44:	d058      	beq.n	8ff8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    8f46:	784b      	ldrb	r3, [r1, #1]
    8f48:	2b00      	cmp	r3, #0
    8f4a:	d044      	beq.n	8fd6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8f4c:	6803      	ldr	r3, [r0, #0]
    8f4e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    8f50:	07db      	lsls	r3, r3, #31
    8f52:	d410      	bmi.n	8f76 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    8f54:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    8f56:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8f58:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8f5a:	2900      	cmp	r1, #0
    8f5c:	d104      	bne.n	8f68 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    8f5e:	0953      	lsrs	r3, r2, #5
    8f60:	01db      	lsls	r3, r3, #7
    8f62:	492e      	ldr	r1, [pc, #184]	; (901c <spi_select_slave+0xf0>)
    8f64:	468c      	mov	ip, r1
    8f66:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8f68:	211f      	movs	r1, #31
    8f6a:	4011      	ands	r1, r2
    8f6c:	2201      	movs	r2, #1
    8f6e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8f70:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    8f72:	2305      	movs	r3, #5
    8f74:	e7df      	b.n	8f36 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    8f76:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    8f78:	09d4      	lsrs	r4, r2, #7
		return NULL;
    8f7a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8f7c:	2c00      	cmp	r4, #0
    8f7e:	d104      	bne.n	8f8a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    8f80:	0953      	lsrs	r3, r2, #5
    8f82:	01db      	lsls	r3, r3, #7
    8f84:	4c25      	ldr	r4, [pc, #148]	; (901c <spi_select_slave+0xf0>)
    8f86:	46a4      	mov	ip, r4
    8f88:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8f8a:	241f      	movs	r4, #31
    8f8c:	4014      	ands	r4, r2
    8f8e:	2201      	movs	r2, #1
    8f90:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    8f92:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8f94:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8f96:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    8f98:	07d2      	lsls	r2, r2, #31
    8f9a:	d501      	bpl.n	8fa0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8f9c:	788a      	ldrb	r2, [r1, #2]
    8f9e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    8fa0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    8fa2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    8fa4:	2a00      	cmp	r2, #0
    8fa6:	d1c6      	bne.n	8f36 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8fa8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    8faa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8fac:	7e13      	ldrb	r3, [r2, #24]
    8fae:	420b      	tst	r3, r1
    8fb0:	d0fc      	beq.n	8fac <spi_select_slave+0x80>
    8fb2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    8fb4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    8fb6:	0749      	lsls	r1, r1, #29
    8fb8:	d5bd      	bpl.n	8f36 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8fba:	8b53      	ldrh	r3, [r2, #26]
    8fbc:	075b      	lsls	r3, r3, #29
    8fbe:	d501      	bpl.n	8fc4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8fc0:	2304      	movs	r3, #4
    8fc2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8fc4:	7983      	ldrb	r3, [r0, #6]
    8fc6:	2b01      	cmp	r3, #1
    8fc8:	d002      	beq.n	8fd0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8fca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8fcc:	2300      	movs	r3, #0
    8fce:	e7b2      	b.n	8f36 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8fd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8fd2:	2300      	movs	r3, #0
    8fd4:	e7af      	b.n	8f36 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    8fd6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    8fd8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8fda:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8fdc:	2900      	cmp	r1, #0
    8fde:	d104      	bne.n	8fea <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    8fe0:	0953      	lsrs	r3, r2, #5
    8fe2:	01db      	lsls	r3, r3, #7
    8fe4:	490d      	ldr	r1, [pc, #52]	; (901c <spi_select_slave+0xf0>)
    8fe6:	468c      	mov	ip, r1
    8fe8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8fea:	211f      	movs	r1, #31
    8fec:	4011      	ands	r1, r2
    8fee:	2201      	movs	r2, #1
    8ff0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    8ff2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    8ff4:	2300      	movs	r3, #0
    8ff6:	e79e      	b.n	8f36 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    8ff8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    8ffa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8ffc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8ffe:	2900      	cmp	r1, #0
    9000:	d104      	bne.n	900c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    9002:	0953      	lsrs	r3, r2, #5
    9004:	01db      	lsls	r3, r3, #7
    9006:	4905      	ldr	r1, [pc, #20]	; (901c <spi_select_slave+0xf0>)
    9008:	468c      	mov	ip, r1
    900a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    900c:	211f      	movs	r1, #31
    900e:	4011      	ands	r1, r2
    9010:	2201      	movs	r2, #1
    9012:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9014:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    9016:	2300      	movs	r3, #0
    9018:	e78d      	b.n	8f36 <spi_select_slave+0xa>
    901a:	46c0      	nop			; (mov r8, r8)
    901c:	41004400 	.word	0x41004400

00009020 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    9020:	b5f0      	push	{r4, r5, r6, r7, lr}
    9022:	46de      	mov	lr, fp
    9024:	4657      	mov	r7, sl
    9026:	464e      	mov	r6, r9
    9028:	4645      	mov	r5, r8
    902a:	b5e0      	push	{r5, r6, r7, lr}
    902c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    902e:	2338      	movs	r3, #56	; 0x38
    9030:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    9032:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    9034:	2c05      	cmp	r4, #5
    9036:	d002      	beq.n	903e <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    9038:	3312      	adds	r3, #18
	if (length == 0) {
    903a:	2a00      	cmp	r2, #0
    903c:	d107      	bne.n	904e <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    903e:	0018      	movs	r0, r3
    9040:	b003      	add	sp, #12
    9042:	bc3c      	pop	{r2, r3, r4, r5}
    9044:	4690      	mov	r8, r2
    9046:	4699      	mov	r9, r3
    9048:	46a2      	mov	sl, r4
    904a:	46ab      	mov	fp, r5
    904c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    904e:	7943      	ldrb	r3, [r0, #5]
    9050:	2b00      	cmp	r3, #0
    9052:	d103      	bne.n	905c <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9054:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    9056:	7e1c      	ldrb	r4, [r3, #24]
    9058:	07a4      	lsls	r4, r4, #30
    905a:	d40a      	bmi.n	9072 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    905c:	4693      	mov	fp, r2
    905e:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    9060:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    9062:	2502      	movs	r5, #2
    9064:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    9066:	3502      	adds	r5, #2
    9068:	46a8      	mov	r8, r5
    906a:	3a01      	subs	r2, #1
    906c:	b292      	uxth	r2, r2
    906e:	468a      	mov	sl, r1
    9070:	e023      	b.n	90ba <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9072:	2402      	movs	r4, #2
    9074:	761c      	strb	r4, [r3, #24]
    9076:	e7f1      	b.n	905c <spi_write_buffer_wait+0x3c>
    9078:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    907a:	4661      	mov	r1, ip
    907c:	420d      	tst	r5, r1
    907e:	d12e      	bne.n	90de <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9080:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    9082:	421d      	tst	r5, r3
    9084:	d100      	bne.n	9088 <spi_write_buffer_wait+0x68>
    9086:	e0c2      	b.n	920e <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9088:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    908a:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    908c:	421d      	tst	r5, r3
    908e:	d0fc      	beq.n	908a <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    9090:	1c67      	adds	r7, r4, #1
    9092:	b2bf      	uxth	r7, r7
    9094:	4651      	mov	r1, sl
    9096:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9098:	7981      	ldrb	r1, [r0, #6]
    909a:	2901      	cmp	r1, #1
    909c:	d023      	beq.n	90e6 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    909e:	b2ad      	uxth	r5, r5
    90a0:	003c      	movs	r4, r7
    90a2:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    90a4:	421f      	tst	r7, r3
    90a6:	d002      	beq.n	90ae <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    90a8:	05ed      	lsls	r5, r5, #23
    90aa:	0ded      	lsrs	r5, r5, #23
    90ac:	62b5      	str	r5, [r6, #40]	; 0x28
    90ae:	1e55      	subs	r5, r2, #1
    90b0:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    90b2:	79c6      	ldrb	r6, [r0, #7]
    90b4:	2e00      	cmp	r6, #0
    90b6:	d11d      	bne.n	90f4 <spi_write_buffer_wait+0xd4>
    90b8:	002a      	movs	r2, r5
	while (length--) {
    90ba:	4d5a      	ldr	r5, [pc, #360]	; (9224 <spi_write_buffer_wait+0x204>)
    90bc:	42aa      	cmp	r2, r5
    90be:	d070      	beq.n	91a2 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    90c0:	7945      	ldrb	r5, [r0, #5]
    90c2:	2d00      	cmp	r5, #0
    90c4:	d1e0      	bne.n	9088 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    90c6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    90c8:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    90ca:	421d      	tst	r5, r3
    90cc:	d1d4      	bne.n	9078 <spi_write_buffer_wait+0x58>
    90ce:	4d56      	ldr	r5, [pc, #344]	; (9228 <spi_write_buffer_wait+0x208>)
    90d0:	7e37      	ldrb	r7, [r6, #24]
    90d2:	421f      	tst	r7, r3
    90d4:	d1d0      	bne.n	9078 <spi_write_buffer_wait+0x58>
    90d6:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    90d8:	2d00      	cmp	r5, #0
    90da:	d1f9      	bne.n	90d0 <spi_write_buffer_wait+0xb0>
    90dc:	e7cc      	b.n	9078 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    90de:	2302      	movs	r3, #2
    90e0:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    90e2:	3302      	adds	r3, #2
    90e4:	e7ab      	b.n	903e <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    90e6:	3402      	adds	r4, #2
    90e8:	b2a4      	uxth	r4, r4
    90ea:	4651      	mov	r1, sl
    90ec:	5dcf      	ldrb	r7, [r1, r7]
    90ee:	023f      	lsls	r7, r7, #8
    90f0:	433d      	orrs	r5, r7
    90f2:	e7d6      	b.n	90a2 <spi_write_buffer_wait+0x82>
    90f4:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    90f6:	7945      	ldrb	r5, [r0, #5]
    90f8:	2d00      	cmp	r5, #0
    90fa:	d137      	bne.n	916c <spi_write_buffer_wait+0x14c>
    90fc:	4d4b      	ldr	r5, [pc, #300]	; (922c <spi_write_buffer_wait+0x20c>)
    90fe:	9101      	str	r1, [sp, #4]
    9100:	e012      	b.n	9128 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    9102:	3402      	adds	r4, #2
    9104:	b2a4      	uxth	r4, r4
    9106:	4649      	mov	r1, r9
    9108:	9f01      	ldr	r7, [sp, #4]
    910a:	5c79      	ldrb	r1, [r7, r1]
    910c:	0209      	lsls	r1, r1, #8
    910e:	9f00      	ldr	r7, [sp, #0]
    9110:	430f      	orrs	r7, r1
    9112:	e01b      	b.n	914c <spi_write_buffer_wait+0x12c>
						length--;
    9114:	3a01      	subs	r2, #1
    9116:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    9118:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    911a:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    911c:	4641      	mov	r1, r8
    911e:	420f      	tst	r7, r1
    9120:	d11b      	bne.n	915a <spi_write_buffer_wait+0x13a>
    9122:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    9124:	2d00      	cmp	r5, #0
    9126:	d018      	beq.n	915a <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    9128:	2a00      	cmp	r2, #0
    912a:	d0f5      	beq.n	9118 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    912c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    912e:	7e37      	ldrb	r7, [r6, #24]
    9130:	421f      	tst	r7, r3
    9132:	d0f1      	beq.n	9118 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    9134:	1c67      	adds	r7, r4, #1
    9136:	b2b9      	uxth	r1, r7
    9138:	4689      	mov	r9, r1
    913a:	9901      	ldr	r1, [sp, #4]
    913c:	5d09      	ldrb	r1, [r1, r4]
    913e:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9140:	7981      	ldrb	r1, [r0, #6]
    9142:	2901      	cmp	r1, #1
    9144:	d0dd      	beq.n	9102 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    9146:	4669      	mov	r1, sp
    9148:	880f      	ldrh	r7, [r1, #0]
    914a:	464c      	mov	r4, r9
    914c:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    914e:	4219      	tst	r1, r3
    9150:	d0e0      	beq.n	9114 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9152:	05ff      	lsls	r7, r7, #23
    9154:	0dff      	lsrs	r7, r7, #23
    9156:	62b7      	str	r7, [r6, #40]	; 0x28
    9158:	e7dc      	b.n	9114 <spi_write_buffer_wait+0xf4>
    915a:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    915c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    915e:	4667      	mov	r7, ip
    9160:	423d      	tst	r5, r7
    9162:	d118      	bne.n	9196 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9164:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    9166:	4646      	mov	r6, r8
    9168:	4235      	tst	r5, r6
    916a:	d052      	beq.n	9212 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    916c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    916e:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    9170:	4647      	mov	r7, r8
    9172:	423d      	tst	r5, r7
    9174:	d0fb      	beq.n	916e <spi_write_buffer_wait+0x14e>
    9176:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    9178:	423d      	tst	r5, r7
    917a:	d007      	beq.n	918c <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    917c:	8b75      	ldrh	r5, [r6, #26]
    917e:	423d      	tst	r5, r7
    9180:	d000      	beq.n	9184 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9182:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9184:	7985      	ldrb	r5, [r0, #6]
    9186:	2d01      	cmp	r5, #1
    9188:	d009      	beq.n	919e <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    918a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    918c:	465d      	mov	r5, fp
    918e:	3d01      	subs	r5, #1
    9190:	b2ad      	uxth	r5, r5
    9192:	46ab      	mov	fp, r5
    9194:	e769      	b.n	906a <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9196:	2302      	movs	r3, #2
    9198:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    919a:	3302      	adds	r3, #2
    919c:	e74f      	b.n	903e <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    919e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    91a0:	e7f4      	b.n	918c <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    91a2:	7943      	ldrb	r3, [r0, #5]
    91a4:	2b01      	cmp	r3, #1
    91a6:	d00b      	beq.n	91c0 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    91a8:	2b00      	cmp	r3, #0
    91aa:	d134      	bne.n	9216 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    91ac:	79c2      	ldrb	r2, [r0, #7]
    91ae:	2a00      	cmp	r2, #0
    91b0:	d100      	bne.n	91b4 <spi_write_buffer_wait+0x194>
    91b2:	e744      	b.n	903e <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    91b4:	2404      	movs	r4, #4
			while (flush_length) {
    91b6:	465b      	mov	r3, fp
    91b8:	465d      	mov	r5, fp
    91ba:	2b00      	cmp	r3, #0
    91bc:	d119      	bne.n	91f2 <spi_write_buffer_wait+0x1d2>
    91be:	e73e      	b.n	903e <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    91c0:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    91c2:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    91c4:	7e0b      	ldrb	r3, [r1, #24]
    91c6:	4213      	tst	r3, r2
    91c8:	d0fc      	beq.n	91c4 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    91ca:	2300      	movs	r3, #0
    91cc:	e737      	b.n	903e <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    91ce:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    91d0:	4223      	tst	r3, r4
    91d2:	d022      	beq.n	921a <spi_write_buffer_wait+0x1fa>
    91d4:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    91d6:	4223      	tst	r3, r4
    91d8:	d007      	beq.n	91ea <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    91da:	8b4b      	ldrh	r3, [r1, #26]
    91dc:	4223      	tst	r3, r4
    91de:	d000      	beq.n	91e2 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    91e0:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    91e2:	7983      	ldrb	r3, [r0, #6]
    91e4:	2b01      	cmp	r3, #1
    91e6:	d010      	beq.n	920a <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    91e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    91ea:	3d01      	subs	r5, #1
    91ec:	b2ad      	uxth	r5, r5
			while (flush_length) {
    91ee:	2d00      	cmp	r5, #0
    91f0:	d015      	beq.n	921e <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    91f2:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    91f4:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    91f6:	4223      	tst	r3, r4
    91f8:	d1e9      	bne.n	91ce <spi_write_buffer_wait+0x1ae>
    91fa:	4b0b      	ldr	r3, [pc, #44]	; (9228 <spi_write_buffer_wait+0x208>)
    91fc:	7e0a      	ldrb	r2, [r1, #24]
    91fe:	4222      	tst	r2, r4
    9200:	d1e5      	bne.n	91ce <spi_write_buffer_wait+0x1ae>
    9202:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    9204:	2b00      	cmp	r3, #0
    9206:	d1f9      	bne.n	91fc <spi_write_buffer_wait+0x1dc>
    9208:	e7e1      	b.n	91ce <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    920a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    920c:	e7ed      	b.n	91ea <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    920e:	2312      	movs	r3, #18
    9210:	e715      	b.n	903e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    9212:	2312      	movs	r3, #18
    9214:	e713      	b.n	903e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    9216:	2300      	movs	r3, #0
    9218:	e711      	b.n	903e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    921a:	2312      	movs	r3, #18
    921c:	e70f      	b.n	903e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    921e:	2300      	movs	r3, #0
    9220:	e70d      	b.n	903e <spi_write_buffer_wait+0x1e>
    9222:	46c0      	nop			; (mov r8, r8)
    9224:	0000ffff 	.word	0x0000ffff
    9228:	00002710 	.word	0x00002710
    922c:	00002711 	.word	0x00002711

00009230 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    9230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    9232:	0080      	lsls	r0, r0, #2
    9234:	4b85      	ldr	r3, [pc, #532]	; (944c <_spi_interrupt_handler+0x21c>)
    9236:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9238:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    923a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    923c:	5ce3      	ldrb	r3, [r4, r3]
    923e:	2236      	movs	r2, #54	; 0x36
    9240:	5ca7      	ldrb	r7, [r4, r2]
    9242:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    9244:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    9246:	7db5      	ldrb	r5, [r6, #22]
    9248:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    924a:	07eb      	lsls	r3, r5, #31
    924c:	d52e      	bpl.n	92ac <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    924e:	7963      	ldrb	r3, [r4, #5]
    9250:	2b01      	cmp	r3, #1
    9252:	d025      	beq.n	92a0 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    9254:	2b00      	cmp	r3, #0
    9256:	d129      	bne.n	92ac <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    9258:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    925a:	2b00      	cmp	r3, #0
    925c:	d026      	beq.n	92ac <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    925e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9262:	7813      	ldrb	r3, [r2, #0]
    9264:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    9266:	1c50      	adds	r0, r2, #1
    9268:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    926a:	79a0      	ldrb	r0, [r4, #6]
    926c:	2801      	cmp	r0, #1
    926e:	d100      	bne.n	9272 <_spi_interrupt_handler+0x42>
    9270:	e069      	b.n	9346 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9272:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    9274:	05db      	lsls	r3, r3, #23
    9276:	0ddb      	lsrs	r3, r3, #23
    9278:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    927a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    927c:	3b01      	subs	r3, #1
    927e:	b29b      	uxth	r3, r3
    9280:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    9282:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    9284:	b29b      	uxth	r3, r3
    9286:	2b00      	cmp	r3, #0
    9288:	d110      	bne.n	92ac <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    928a:	3301      	adds	r3, #1
    928c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    928e:	7a63      	ldrb	r3, [r4, #9]
    9290:	2b01      	cmp	r3, #1
    9292:	d10b      	bne.n	92ac <_spi_interrupt_handler+0x7c>
    9294:	79e3      	ldrb	r3, [r4, #7]
    9296:	2b00      	cmp	r3, #0
    9298:	d108      	bne.n	92ac <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    929a:	3302      	adds	r3, #2
    929c:	75b3      	strb	r3, [r6, #22]
    929e:	e005      	b.n	92ac <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    92a0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    92a2:	2b00      	cmp	r3, #0
    92a4:	d03e      	beq.n	9324 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    92a6:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    92a8:	2b00      	cmp	r3, #0
    92aa:	d1d8      	bne.n	925e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    92ac:	076b      	lsls	r3, r5, #29
    92ae:	d511      	bpl.n	92d4 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    92b0:	8b73      	ldrh	r3, [r6, #26]
    92b2:	075b      	lsls	r3, r3, #29
    92b4:	d551      	bpl.n	935a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    92b6:	7a63      	ldrb	r3, [r4, #9]
    92b8:	2b01      	cmp	r3, #1
    92ba:	d008      	beq.n	92ce <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    92bc:	221e      	movs	r2, #30
    92be:	2338      	movs	r3, #56	; 0x38
    92c0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    92c2:	3b35      	subs	r3, #53	; 0x35
    92c4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    92c6:	3302      	adds	r3, #2
    92c8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    92ca:	073b      	lsls	r3, r7, #28
    92cc:	d441      	bmi.n	9352 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    92ce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    92d0:	2304      	movs	r3, #4
    92d2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    92d4:	07ab      	lsls	r3, r5, #30
    92d6:	d515      	bpl.n	9304 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    92d8:	7963      	ldrb	r3, [r4, #5]
    92da:	2b00      	cmp	r3, #0
    92dc:	d10e      	bne.n	92fc <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    92de:	3307      	adds	r3, #7
    92e0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    92e2:	3b05      	subs	r3, #5
    92e4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    92e6:	3301      	adds	r3, #1
    92e8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    92ea:	2300      	movs	r3, #0
    92ec:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    92ee:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    92f0:	3338      	adds	r3, #56	; 0x38
    92f2:	2200      	movs	r2, #0
    92f4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    92f6:	06fb      	lsls	r3, r7, #27
    92f8:	d500      	bpl.n	92fc <_spi_interrupt_handler+0xcc>
    92fa:	e07f      	b.n	93fc <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    92fc:	7963      	ldrb	r3, [r4, #5]
    92fe:	2b01      	cmp	r3, #1
    9300:	d100      	bne.n	9304 <_spi_interrupt_handler+0xd4>
    9302:	e07f      	b.n	9404 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    9304:	072b      	lsls	r3, r5, #28
    9306:	d508      	bpl.n	931a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    9308:	7963      	ldrb	r3, [r4, #5]
    930a:	2b00      	cmp	r3, #0
    930c:	d105      	bne.n	931a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    930e:	3308      	adds	r3, #8
    9310:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    9312:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    9314:	06bb      	lsls	r3, r7, #26
    9316:	d500      	bpl.n	931a <_spi_interrupt_handler+0xea>
    9318:	e08a      	b.n	9430 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    931a:	b26d      	sxtb	r5, r5
    931c:	2d00      	cmp	r5, #0
    931e:	da00      	bge.n	9322 <_spi_interrupt_handler+0xf2>
    9320:	e08a      	b.n	9438 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    9322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    9324:	4b4a      	ldr	r3, [pc, #296]	; (9450 <_spi_interrupt_handler+0x220>)
    9326:	881b      	ldrh	r3, [r3, #0]
    9328:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    932a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    932c:	3b01      	subs	r3, #1
    932e:	b29b      	uxth	r3, r3
    9330:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    9332:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9334:	b29b      	uxth	r3, r3
    9336:	2b00      	cmp	r3, #0
    9338:	d101      	bne.n	933e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    933a:	3301      	adds	r3, #1
    933c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    933e:	7963      	ldrb	r3, [r4, #5]
		if (0
    9340:	2b01      	cmp	r3, #1
    9342:	d0b0      	beq.n	92a6 <_spi_interrupt_handler+0x76>
    9344:	e786      	b.n	9254 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    9346:	7850      	ldrb	r0, [r2, #1]
    9348:	0200      	lsls	r0, r0, #8
    934a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    934c:	3202      	adds	r2, #2
    934e:	62e2      	str	r2, [r4, #44]	; 0x2c
    9350:	e790      	b.n	9274 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    9352:	0020      	movs	r0, r4
    9354:	69a3      	ldr	r3, [r4, #24]
    9356:	4798      	blx	r3
    9358:	e7b9      	b.n	92ce <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    935a:	7a63      	ldrb	r3, [r4, #9]
    935c:	2b01      	cmp	r3, #1
    935e:	d027      	beq.n	93b0 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9360:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    9362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9364:	05db      	lsls	r3, r3, #23
    9366:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    9368:	b2da      	uxtb	r2, r3
    936a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    936c:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    936e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9370:	1c51      	adds	r1, r2, #1
    9372:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9374:	79a1      	ldrb	r1, [r4, #6]
    9376:	2901      	cmp	r1, #1
    9378:	d033      	beq.n	93e2 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    937a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    937c:	3b01      	subs	r3, #1
    937e:	b29b      	uxth	r3, r3
    9380:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    9382:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    9384:	b29b      	uxth	r3, r3
    9386:	2b00      	cmp	r3, #0
    9388:	d1a4      	bne.n	92d4 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    938a:	2200      	movs	r2, #0
    938c:	3338      	adds	r3, #56	; 0x38
    938e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9390:	3b34      	subs	r3, #52	; 0x34
    9392:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    9394:	7a63      	ldrb	r3, [r4, #9]
    9396:	2b02      	cmp	r3, #2
    9398:	d029      	beq.n	93ee <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    939a:	7a63      	ldrb	r3, [r4, #9]
    939c:	2b00      	cmp	r3, #0
    939e:	d000      	beq.n	93a2 <_spi_interrupt_handler+0x172>
    93a0:	e798      	b.n	92d4 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    93a2:	07bb      	lsls	r3, r7, #30
    93a4:	d400      	bmi.n	93a8 <_spi_interrupt_handler+0x178>
    93a6:	e795      	b.n	92d4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    93a8:	0020      	movs	r0, r4
    93aa:	6923      	ldr	r3, [r4, #16]
    93ac:	4798      	blx	r3
    93ae:	e791      	b.n	92d4 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    93b0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    93b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    93b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    93b6:	3b01      	subs	r3, #1
    93b8:	b29b      	uxth	r3, r3
    93ba:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    93bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    93be:	b29b      	uxth	r3, r3
    93c0:	2b00      	cmp	r3, #0
    93c2:	d000      	beq.n	93c6 <_spi_interrupt_handler+0x196>
    93c4:	e786      	b.n	92d4 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    93c6:	3304      	adds	r3, #4
    93c8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    93ca:	2200      	movs	r2, #0
    93cc:	3334      	adds	r3, #52	; 0x34
    93ce:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    93d0:	3b35      	subs	r3, #53	; 0x35
    93d2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    93d4:	07fb      	lsls	r3, r7, #31
    93d6:	d400      	bmi.n	93da <_spi_interrupt_handler+0x1aa>
    93d8:	e77c      	b.n	92d4 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    93da:	0020      	movs	r0, r4
    93dc:	68e3      	ldr	r3, [r4, #12]
    93de:	4798      	blx	r3
    93e0:	e778      	b.n	92d4 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    93e2:	0a1b      	lsrs	r3, r3, #8
    93e4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    93e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    93e8:	3301      	adds	r3, #1
    93ea:	62a3      	str	r3, [r4, #40]	; 0x28
    93ec:	e7c5      	b.n	937a <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    93ee:	077b      	lsls	r3, r7, #29
    93f0:	d400      	bmi.n	93f4 <_spi_interrupt_handler+0x1c4>
    93f2:	e76f      	b.n	92d4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    93f4:	0020      	movs	r0, r4
    93f6:	6963      	ldr	r3, [r4, #20]
    93f8:	4798      	blx	r3
    93fa:	e76b      	b.n	92d4 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    93fc:	0020      	movs	r0, r4
    93fe:	69e3      	ldr	r3, [r4, #28]
    9400:	4798      	blx	r3
    9402:	e77b      	b.n	92fc <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9404:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    9406:	2b01      	cmp	r3, #1
    9408:	d000      	beq.n	940c <_spi_interrupt_handler+0x1dc>
    940a:	e786      	b.n	931a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    940c:	79e3      	ldrb	r3, [r4, #7]
    940e:	2b00      	cmp	r3, #0
    9410:	d000      	beq.n	9414 <_spi_interrupt_handler+0x1e4>
    9412:	e782      	b.n	931a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9414:	3302      	adds	r3, #2
    9416:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    9418:	3301      	adds	r3, #1
    941a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    941c:	2200      	movs	r2, #0
    941e:	3335      	adds	r3, #53	; 0x35
    9420:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    9422:	07fb      	lsls	r3, r7, #31
    9424:	d400      	bmi.n	9428 <_spi_interrupt_handler+0x1f8>
    9426:	e76d      	b.n	9304 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    9428:	0020      	movs	r0, r4
    942a:	68e3      	ldr	r3, [r4, #12]
    942c:	4798      	blx	r3
    942e:	e769      	b.n	9304 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    9430:	0020      	movs	r0, r4
    9432:	6a23      	ldr	r3, [r4, #32]
    9434:	4798      	blx	r3
    9436:	e770      	b.n	931a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9438:	2380      	movs	r3, #128	; 0x80
    943a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    943c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    943e:	067b      	lsls	r3, r7, #25
    9440:	d400      	bmi.n	9444 <_spi_interrupt_handler+0x214>
    9442:	e76e      	b.n	9322 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    9444:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9446:	0020      	movs	r0, r4
    9448:	4798      	blx	r3
}
    944a:	e76a      	b.n	9322 <_spi_interrupt_handler+0xf2>
    944c:	20000730 	.word	0x20000730
    9450:	2000072c 	.word	0x2000072c

00009454 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    9454:	b5f0      	push	{r4, r5, r6, r7, lr}
    9456:	46de      	mov	lr, fp
    9458:	4657      	mov	r7, sl
    945a:	464e      	mov	r6, r9
    945c:	4645      	mov	r5, r8
    945e:	b5e0      	push	{r5, r6, r7, lr}
    9460:	b087      	sub	sp, #28
    9462:	4680      	mov	r8, r0
    9464:	9104      	str	r1, [sp, #16]
    9466:	0016      	movs	r6, r2
    9468:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    946a:	2200      	movs	r2, #0
    946c:	2300      	movs	r3, #0
    946e:	2100      	movs	r1, #0
    9470:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    9472:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    9474:	2001      	movs	r0, #1
    9476:	0021      	movs	r1, r4
    9478:	9600      	str	r6, [sp, #0]
    947a:	9701      	str	r7, [sp, #4]
    947c:	465c      	mov	r4, fp
    947e:	9403      	str	r4, [sp, #12]
    9480:	4644      	mov	r4, r8
    9482:	9405      	str	r4, [sp, #20]
    9484:	e013      	b.n	94ae <long_division+0x5a>
    9486:	2420      	movs	r4, #32
    9488:	1a64      	subs	r4, r4, r1
    948a:	0005      	movs	r5, r0
    948c:	40e5      	lsrs	r5, r4
    948e:	46a8      	mov	r8, r5
    9490:	e014      	b.n	94bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    9492:	9c00      	ldr	r4, [sp, #0]
    9494:	9d01      	ldr	r5, [sp, #4]
    9496:	1b12      	subs	r2, r2, r4
    9498:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    949a:	465c      	mov	r4, fp
    949c:	464d      	mov	r5, r9
    949e:	432c      	orrs	r4, r5
    94a0:	46a3      	mov	fp, r4
    94a2:	9c03      	ldr	r4, [sp, #12]
    94a4:	4645      	mov	r5, r8
    94a6:	432c      	orrs	r4, r5
    94a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    94aa:	3901      	subs	r1, #1
    94ac:	d325      	bcc.n	94fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    94ae:	2420      	movs	r4, #32
    94b0:	4264      	negs	r4, r4
    94b2:	190c      	adds	r4, r1, r4
    94b4:	d4e7      	bmi.n	9486 <long_division+0x32>
    94b6:	0005      	movs	r5, r0
    94b8:	40a5      	lsls	r5, r4
    94ba:	46a8      	mov	r8, r5
    94bc:	0004      	movs	r4, r0
    94be:	408c      	lsls	r4, r1
    94c0:	46a1      	mov	r9, r4
		r = r << 1;
    94c2:	1892      	adds	r2, r2, r2
    94c4:	415b      	adcs	r3, r3
    94c6:	0014      	movs	r4, r2
    94c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    94ca:	9e05      	ldr	r6, [sp, #20]
    94cc:	464f      	mov	r7, r9
    94ce:	403e      	ands	r6, r7
    94d0:	46b4      	mov	ip, r6
    94d2:	9e04      	ldr	r6, [sp, #16]
    94d4:	4647      	mov	r7, r8
    94d6:	403e      	ands	r6, r7
    94d8:	46b2      	mov	sl, r6
    94da:	4666      	mov	r6, ip
    94dc:	4657      	mov	r7, sl
    94de:	433e      	orrs	r6, r7
    94e0:	d003      	beq.n	94ea <long_division+0x96>
			r |= 0x01;
    94e2:	0006      	movs	r6, r0
    94e4:	4326      	orrs	r6, r4
    94e6:	0032      	movs	r2, r6
    94e8:	002b      	movs	r3, r5
		if (r >= d) {
    94ea:	9c00      	ldr	r4, [sp, #0]
    94ec:	9d01      	ldr	r5, [sp, #4]
    94ee:	429d      	cmp	r5, r3
    94f0:	d8db      	bhi.n	94aa <long_division+0x56>
    94f2:	d1ce      	bne.n	9492 <long_division+0x3e>
    94f4:	4294      	cmp	r4, r2
    94f6:	d8d8      	bhi.n	94aa <long_division+0x56>
    94f8:	e7cb      	b.n	9492 <long_division+0x3e>
    94fa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    94fc:	4658      	mov	r0, fp
    94fe:	0019      	movs	r1, r3
    9500:	b007      	add	sp, #28
    9502:	bc3c      	pop	{r2, r3, r4, r5}
    9504:	4690      	mov	r8, r2
    9506:	4699      	mov	r9, r3
    9508:	46a2      	mov	sl, r4
    950a:	46ab      	mov	fp, r5
    950c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000950e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    950e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    9510:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9512:	2340      	movs	r3, #64	; 0x40
    9514:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    9516:	4281      	cmp	r1, r0
    9518:	d202      	bcs.n	9520 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    951a:	0018      	movs	r0, r3
    951c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    951e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    9520:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    9522:	1c63      	adds	r3, r4, #1
    9524:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    9526:	4288      	cmp	r0, r1
    9528:	d9f9      	bls.n	951e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    952a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    952c:	2cff      	cmp	r4, #255	; 0xff
    952e:	d8f4      	bhi.n	951a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    9530:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    9532:	2300      	movs	r3, #0
    9534:	e7f1      	b.n	951a <_sercom_get_sync_baud_val+0xc>
	...

00009538 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    9538:	b5f0      	push	{r4, r5, r6, r7, lr}
    953a:	b083      	sub	sp, #12
    953c:	000f      	movs	r7, r1
    953e:	0016      	movs	r6, r2
    9540:	aa08      	add	r2, sp, #32
    9542:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    9544:	0004      	movs	r4, r0
    9546:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9548:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    954a:	42bc      	cmp	r4, r7
    954c:	d902      	bls.n	9554 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    954e:	0010      	movs	r0, r2
    9550:	b003      	add	sp, #12
    9552:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    9554:	2b00      	cmp	r3, #0
    9556:	d114      	bne.n	9582 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    9558:	0002      	movs	r2, r0
    955a:	0008      	movs	r0, r1
    955c:	2100      	movs	r1, #0
    955e:	4c19      	ldr	r4, [pc, #100]	; (95c4 <_sercom_get_async_baud_val+0x8c>)
    9560:	47a0      	blx	r4
    9562:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    9564:	003a      	movs	r2, r7
    9566:	2300      	movs	r3, #0
    9568:	2000      	movs	r0, #0
    956a:	4c17      	ldr	r4, [pc, #92]	; (95c8 <_sercom_get_async_baud_val+0x90>)
    956c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    956e:	2200      	movs	r2, #0
    9570:	2301      	movs	r3, #1
    9572:	1a12      	subs	r2, r2, r0
    9574:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    9576:	0c12      	lsrs	r2, r2, #16
    9578:	041b      	lsls	r3, r3, #16
    957a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    957c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    957e:	2200      	movs	r2, #0
    9580:	e7e5      	b.n	954e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    9582:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    9584:	2b01      	cmp	r3, #1
    9586:	d1f9      	bne.n	957c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    9588:	000a      	movs	r2, r1
    958a:	2300      	movs	r3, #0
    958c:	2100      	movs	r1, #0
    958e:	4c0d      	ldr	r4, [pc, #52]	; (95c4 <_sercom_get_async_baud_val+0x8c>)
    9590:	47a0      	blx	r4
    9592:	0002      	movs	r2, r0
    9594:	000b      	movs	r3, r1
    9596:	9200      	str	r2, [sp, #0]
    9598:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    959a:	0038      	movs	r0, r7
    959c:	2100      	movs	r1, #0
    959e:	4c0a      	ldr	r4, [pc, #40]	; (95c8 <_sercom_get_async_baud_val+0x90>)
    95a0:	47a0      	blx	r4
    95a2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    95a4:	2380      	movs	r3, #128	; 0x80
    95a6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    95a8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    95aa:	4298      	cmp	r0, r3
    95ac:	d8cf      	bhi.n	954e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    95ae:	0f79      	lsrs	r1, r7, #29
    95b0:	00f8      	lsls	r0, r7, #3
    95b2:	9a00      	ldr	r2, [sp, #0]
    95b4:	9b01      	ldr	r3, [sp, #4]
    95b6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    95b8:	00ea      	lsls	r2, r5, #3
    95ba:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    95bc:	b2d2      	uxtb	r2, r2
    95be:	0352      	lsls	r2, r2, #13
    95c0:	432a      	orrs	r2, r5
    95c2:	e7db      	b.n	957c <_sercom_get_async_baud_val+0x44>
    95c4:	0000dc81 	.word	0x0000dc81
    95c8:	00009455 	.word	0x00009455

000095cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    95cc:	b510      	push	{r4, lr}
    95ce:	b082      	sub	sp, #8
    95d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    95d2:	4b0e      	ldr	r3, [pc, #56]	; (960c <sercom_set_gclk_generator+0x40>)
    95d4:	781b      	ldrb	r3, [r3, #0]
    95d6:	2b00      	cmp	r3, #0
    95d8:	d007      	beq.n	95ea <sercom_set_gclk_generator+0x1e>
    95da:	2900      	cmp	r1, #0
    95dc:	d105      	bne.n	95ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    95de:	4b0b      	ldr	r3, [pc, #44]	; (960c <sercom_set_gclk_generator+0x40>)
    95e0:	785b      	ldrb	r3, [r3, #1]
    95e2:	4283      	cmp	r3, r0
    95e4:	d010      	beq.n	9608 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    95e6:	201d      	movs	r0, #29
    95e8:	e00c      	b.n	9604 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    95ea:	a901      	add	r1, sp, #4
    95ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    95ee:	2013      	movs	r0, #19
    95f0:	4b07      	ldr	r3, [pc, #28]	; (9610 <sercom_set_gclk_generator+0x44>)
    95f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    95f4:	2013      	movs	r0, #19
    95f6:	4b07      	ldr	r3, [pc, #28]	; (9614 <sercom_set_gclk_generator+0x48>)
    95f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    95fa:	4b04      	ldr	r3, [pc, #16]	; (960c <sercom_set_gclk_generator+0x40>)
    95fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    95fe:	2201      	movs	r2, #1
    9600:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    9602:	2000      	movs	r0, #0
}
    9604:	b002      	add	sp, #8
    9606:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    9608:	2000      	movs	r0, #0
    960a:	e7fb      	b.n	9604 <sercom_set_gclk_generator+0x38>
    960c:	2000024c 	.word	0x2000024c
    9610:	0000a2fd 	.word	0x0000a2fd
    9614:	0000a271 	.word	0x0000a271

00009618 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    9618:	4b40      	ldr	r3, [pc, #256]	; (971c <_sercom_get_default_pad+0x104>)
    961a:	4298      	cmp	r0, r3
    961c:	d031      	beq.n	9682 <_sercom_get_default_pad+0x6a>
    961e:	d90a      	bls.n	9636 <_sercom_get_default_pad+0x1e>
    9620:	4b3f      	ldr	r3, [pc, #252]	; (9720 <_sercom_get_default_pad+0x108>)
    9622:	4298      	cmp	r0, r3
    9624:	d04d      	beq.n	96c2 <_sercom_get_default_pad+0xaa>
    9626:	4b3f      	ldr	r3, [pc, #252]	; (9724 <_sercom_get_default_pad+0x10c>)
    9628:	4298      	cmp	r0, r3
    962a:	d05a      	beq.n	96e2 <_sercom_get_default_pad+0xca>
    962c:	4b3e      	ldr	r3, [pc, #248]	; (9728 <_sercom_get_default_pad+0x110>)
    962e:	4298      	cmp	r0, r3
    9630:	d037      	beq.n	96a2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    9632:	2000      	movs	r0, #0
}
    9634:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    9636:	4b3d      	ldr	r3, [pc, #244]	; (972c <_sercom_get_default_pad+0x114>)
    9638:	4298      	cmp	r0, r3
    963a:	d00c      	beq.n	9656 <_sercom_get_default_pad+0x3e>
    963c:	4b3c      	ldr	r3, [pc, #240]	; (9730 <_sercom_get_default_pad+0x118>)
    963e:	4298      	cmp	r0, r3
    9640:	d1f7      	bne.n	9632 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9642:	2901      	cmp	r1, #1
    9644:	d017      	beq.n	9676 <_sercom_get_default_pad+0x5e>
    9646:	2900      	cmp	r1, #0
    9648:	d05d      	beq.n	9706 <_sercom_get_default_pad+0xee>
    964a:	2902      	cmp	r1, #2
    964c:	d015      	beq.n	967a <_sercom_get_default_pad+0x62>
    964e:	2903      	cmp	r1, #3
    9650:	d015      	beq.n	967e <_sercom_get_default_pad+0x66>
	return 0;
    9652:	2000      	movs	r0, #0
    9654:	e7ee      	b.n	9634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9656:	2901      	cmp	r1, #1
    9658:	d007      	beq.n	966a <_sercom_get_default_pad+0x52>
    965a:	2900      	cmp	r1, #0
    965c:	d051      	beq.n	9702 <_sercom_get_default_pad+0xea>
    965e:	2902      	cmp	r1, #2
    9660:	d005      	beq.n	966e <_sercom_get_default_pad+0x56>
    9662:	2903      	cmp	r1, #3
    9664:	d005      	beq.n	9672 <_sercom_get_default_pad+0x5a>
	return 0;
    9666:	2000      	movs	r0, #0
    9668:	e7e4      	b.n	9634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    966a:	4832      	ldr	r0, [pc, #200]	; (9734 <_sercom_get_default_pad+0x11c>)
    966c:	e7e2      	b.n	9634 <_sercom_get_default_pad+0x1c>
    966e:	4832      	ldr	r0, [pc, #200]	; (9738 <_sercom_get_default_pad+0x120>)
    9670:	e7e0      	b.n	9634 <_sercom_get_default_pad+0x1c>
    9672:	4832      	ldr	r0, [pc, #200]	; (973c <_sercom_get_default_pad+0x124>)
    9674:	e7de      	b.n	9634 <_sercom_get_default_pad+0x1c>
    9676:	4832      	ldr	r0, [pc, #200]	; (9740 <_sercom_get_default_pad+0x128>)
    9678:	e7dc      	b.n	9634 <_sercom_get_default_pad+0x1c>
    967a:	4832      	ldr	r0, [pc, #200]	; (9744 <_sercom_get_default_pad+0x12c>)
    967c:	e7da      	b.n	9634 <_sercom_get_default_pad+0x1c>
    967e:	4832      	ldr	r0, [pc, #200]	; (9748 <_sercom_get_default_pad+0x130>)
    9680:	e7d8      	b.n	9634 <_sercom_get_default_pad+0x1c>
    9682:	2901      	cmp	r1, #1
    9684:	d007      	beq.n	9696 <_sercom_get_default_pad+0x7e>
    9686:	2900      	cmp	r1, #0
    9688:	d03f      	beq.n	970a <_sercom_get_default_pad+0xf2>
    968a:	2902      	cmp	r1, #2
    968c:	d005      	beq.n	969a <_sercom_get_default_pad+0x82>
    968e:	2903      	cmp	r1, #3
    9690:	d005      	beq.n	969e <_sercom_get_default_pad+0x86>
	return 0;
    9692:	2000      	movs	r0, #0
    9694:	e7ce      	b.n	9634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9696:	482d      	ldr	r0, [pc, #180]	; (974c <_sercom_get_default_pad+0x134>)
    9698:	e7cc      	b.n	9634 <_sercom_get_default_pad+0x1c>
    969a:	482d      	ldr	r0, [pc, #180]	; (9750 <_sercom_get_default_pad+0x138>)
    969c:	e7ca      	b.n	9634 <_sercom_get_default_pad+0x1c>
    969e:	482d      	ldr	r0, [pc, #180]	; (9754 <_sercom_get_default_pad+0x13c>)
    96a0:	e7c8      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96a2:	2901      	cmp	r1, #1
    96a4:	d007      	beq.n	96b6 <_sercom_get_default_pad+0x9e>
    96a6:	2900      	cmp	r1, #0
    96a8:	d031      	beq.n	970e <_sercom_get_default_pad+0xf6>
    96aa:	2902      	cmp	r1, #2
    96ac:	d005      	beq.n	96ba <_sercom_get_default_pad+0xa2>
    96ae:	2903      	cmp	r1, #3
    96b0:	d005      	beq.n	96be <_sercom_get_default_pad+0xa6>
	return 0;
    96b2:	2000      	movs	r0, #0
    96b4:	e7be      	b.n	9634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    96b6:	4828      	ldr	r0, [pc, #160]	; (9758 <_sercom_get_default_pad+0x140>)
    96b8:	e7bc      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96ba:	4828      	ldr	r0, [pc, #160]	; (975c <_sercom_get_default_pad+0x144>)
    96bc:	e7ba      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96be:	4828      	ldr	r0, [pc, #160]	; (9760 <_sercom_get_default_pad+0x148>)
    96c0:	e7b8      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96c2:	2901      	cmp	r1, #1
    96c4:	d007      	beq.n	96d6 <_sercom_get_default_pad+0xbe>
    96c6:	2900      	cmp	r1, #0
    96c8:	d023      	beq.n	9712 <_sercom_get_default_pad+0xfa>
    96ca:	2902      	cmp	r1, #2
    96cc:	d005      	beq.n	96da <_sercom_get_default_pad+0xc2>
    96ce:	2903      	cmp	r1, #3
    96d0:	d005      	beq.n	96de <_sercom_get_default_pad+0xc6>
	return 0;
    96d2:	2000      	movs	r0, #0
    96d4:	e7ae      	b.n	9634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    96d6:	4823      	ldr	r0, [pc, #140]	; (9764 <_sercom_get_default_pad+0x14c>)
    96d8:	e7ac      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96da:	4823      	ldr	r0, [pc, #140]	; (9768 <_sercom_get_default_pad+0x150>)
    96dc:	e7aa      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96de:	4823      	ldr	r0, [pc, #140]	; (976c <_sercom_get_default_pad+0x154>)
    96e0:	e7a8      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96e2:	2901      	cmp	r1, #1
    96e4:	d007      	beq.n	96f6 <_sercom_get_default_pad+0xde>
    96e6:	2900      	cmp	r1, #0
    96e8:	d015      	beq.n	9716 <_sercom_get_default_pad+0xfe>
    96ea:	2902      	cmp	r1, #2
    96ec:	d005      	beq.n	96fa <_sercom_get_default_pad+0xe2>
    96ee:	2903      	cmp	r1, #3
    96f0:	d005      	beq.n	96fe <_sercom_get_default_pad+0xe6>
	return 0;
    96f2:	2000      	movs	r0, #0
    96f4:	e79e      	b.n	9634 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    96f6:	481e      	ldr	r0, [pc, #120]	; (9770 <_sercom_get_default_pad+0x158>)
    96f8:	e79c      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96fa:	481e      	ldr	r0, [pc, #120]	; (9774 <_sercom_get_default_pad+0x15c>)
    96fc:	e79a      	b.n	9634 <_sercom_get_default_pad+0x1c>
    96fe:	481e      	ldr	r0, [pc, #120]	; (9778 <_sercom_get_default_pad+0x160>)
    9700:	e798      	b.n	9634 <_sercom_get_default_pad+0x1c>
    9702:	481e      	ldr	r0, [pc, #120]	; (977c <_sercom_get_default_pad+0x164>)
    9704:	e796      	b.n	9634 <_sercom_get_default_pad+0x1c>
    9706:	2003      	movs	r0, #3
    9708:	e794      	b.n	9634 <_sercom_get_default_pad+0x1c>
    970a:	481d      	ldr	r0, [pc, #116]	; (9780 <_sercom_get_default_pad+0x168>)
    970c:	e792      	b.n	9634 <_sercom_get_default_pad+0x1c>
    970e:	481d      	ldr	r0, [pc, #116]	; (9784 <_sercom_get_default_pad+0x16c>)
    9710:	e790      	b.n	9634 <_sercom_get_default_pad+0x1c>
    9712:	481d      	ldr	r0, [pc, #116]	; (9788 <_sercom_get_default_pad+0x170>)
    9714:	e78e      	b.n	9634 <_sercom_get_default_pad+0x1c>
    9716:	481d      	ldr	r0, [pc, #116]	; (978c <_sercom_get_default_pad+0x174>)
    9718:	e78c      	b.n	9634 <_sercom_get_default_pad+0x1c>
    971a:	46c0      	nop			; (mov r8, r8)
    971c:	42001000 	.word	0x42001000
    9720:	42001800 	.word	0x42001800
    9724:	42001c00 	.word	0x42001c00
    9728:	42001400 	.word	0x42001400
    972c:	42000800 	.word	0x42000800
    9730:	42000c00 	.word	0x42000c00
    9734:	00050003 	.word	0x00050003
    9738:	00060003 	.word	0x00060003
    973c:	00070003 	.word	0x00070003
    9740:	00010003 	.word	0x00010003
    9744:	001e0003 	.word	0x001e0003
    9748:	001f0003 	.word	0x001f0003
    974c:	00090003 	.word	0x00090003
    9750:	000a0003 	.word	0x000a0003
    9754:	000b0003 	.word	0x000b0003
    9758:	00110003 	.word	0x00110003
    975c:	00120003 	.word	0x00120003
    9760:	00130003 	.word	0x00130003
    9764:	000d0003 	.word	0x000d0003
    9768:	000e0003 	.word	0x000e0003
    976c:	000f0003 	.word	0x000f0003
    9770:	00170003 	.word	0x00170003
    9774:	00180003 	.word	0x00180003
    9778:	00190003 	.word	0x00190003
    977c:	00040003 	.word	0x00040003
    9780:	00080003 	.word	0x00080003
    9784:	00100003 	.word	0x00100003
    9788:	000c0003 	.word	0x000c0003
    978c:	00160003 	.word	0x00160003

00009790 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    9790:	b530      	push	{r4, r5, lr}
    9792:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    9794:	4b0b      	ldr	r3, [pc, #44]	; (97c4 <_sercom_get_sercom_inst_index+0x34>)
    9796:	466a      	mov	r2, sp
    9798:	cb32      	ldmia	r3!, {r1, r4, r5}
    979a:	c232      	stmia	r2!, {r1, r4, r5}
    979c:	cb32      	ldmia	r3!, {r1, r4, r5}
    979e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    97a0:	9b00      	ldr	r3, [sp, #0]
    97a2:	4283      	cmp	r3, r0
    97a4:	d00b      	beq.n	97be <_sercom_get_sercom_inst_index+0x2e>
    97a6:	2301      	movs	r3, #1
    97a8:	009a      	lsls	r2, r3, #2
    97aa:	4669      	mov	r1, sp
    97ac:	5852      	ldr	r2, [r2, r1]
    97ae:	4282      	cmp	r2, r0
    97b0:	d006      	beq.n	97c0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    97b2:	3301      	adds	r3, #1
    97b4:	2b06      	cmp	r3, #6
    97b6:	d1f7      	bne.n	97a8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    97b8:	2000      	movs	r0, #0
}
    97ba:	b007      	add	sp, #28
    97bc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    97be:	2300      	movs	r3, #0
			return i;
    97c0:	b2d8      	uxtb	r0, r3
    97c2:	e7fa      	b.n	97ba <_sercom_get_sercom_inst_index+0x2a>
    97c4:	000124c0 	.word	0x000124c0

000097c8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    97c8:	4770      	bx	lr
	...

000097cc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    97cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    97ce:	4b0a      	ldr	r3, [pc, #40]	; (97f8 <_sercom_set_handler+0x2c>)
    97d0:	781b      	ldrb	r3, [r3, #0]
    97d2:	2b00      	cmp	r3, #0
    97d4:	d10c      	bne.n	97f0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    97d6:	4f09      	ldr	r7, [pc, #36]	; (97fc <_sercom_set_handler+0x30>)
    97d8:	4e09      	ldr	r6, [pc, #36]	; (9800 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    97da:	4d0a      	ldr	r5, [pc, #40]	; (9804 <_sercom_set_handler+0x38>)
    97dc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    97de:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    97e0:	195a      	adds	r2, r3, r5
    97e2:	6014      	str	r4, [r2, #0]
    97e4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    97e6:	2b18      	cmp	r3, #24
    97e8:	d1f9      	bne.n	97de <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    97ea:	2201      	movs	r2, #1
    97ec:	4b02      	ldr	r3, [pc, #8]	; (97f8 <_sercom_set_handler+0x2c>)
    97ee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    97f0:	0080      	lsls	r0, r0, #2
    97f2:	4b02      	ldr	r3, [pc, #8]	; (97fc <_sercom_set_handler+0x30>)
    97f4:	50c1      	str	r1, [r0, r3]
}
    97f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97f8:	2000024e 	.word	0x2000024e
    97fc:	20000250 	.word	0x20000250
    9800:	000097c9 	.word	0x000097c9
    9804:	20000730 	.word	0x20000730

00009808 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    9808:	b500      	push	{lr}
    980a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    980c:	2309      	movs	r3, #9
    980e:	466a      	mov	r2, sp
    9810:	7013      	strb	r3, [r2, #0]
    9812:	3301      	adds	r3, #1
    9814:	7053      	strb	r3, [r2, #1]
    9816:	3301      	adds	r3, #1
    9818:	7093      	strb	r3, [r2, #2]
    981a:	3301      	adds	r3, #1
    981c:	70d3      	strb	r3, [r2, #3]
    981e:	3301      	adds	r3, #1
    9820:	7113      	strb	r3, [r2, #4]
    9822:	3301      	adds	r3, #1
    9824:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    9826:	4b03      	ldr	r3, [pc, #12]	; (9834 <_sercom_get_interrupt_vector+0x2c>)
    9828:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    982a:	466b      	mov	r3, sp
    982c:	5618      	ldrsb	r0, [r3, r0]
}
    982e:	b003      	add	sp, #12
    9830:	bd00      	pop	{pc}
    9832:	46c0      	nop			; (mov r8, r8)
    9834:	00009791 	.word	0x00009791

00009838 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    9838:	b510      	push	{r4, lr}
    983a:	4b02      	ldr	r3, [pc, #8]	; (9844 <SERCOM0_Handler+0xc>)
    983c:	681b      	ldr	r3, [r3, #0]
    983e:	2000      	movs	r0, #0
    9840:	4798      	blx	r3
    9842:	bd10      	pop	{r4, pc}
    9844:	20000250 	.word	0x20000250

00009848 <SERCOM1_Handler>:
    9848:	b510      	push	{r4, lr}
    984a:	4b02      	ldr	r3, [pc, #8]	; (9854 <SERCOM1_Handler+0xc>)
    984c:	685b      	ldr	r3, [r3, #4]
    984e:	2001      	movs	r0, #1
    9850:	4798      	blx	r3
    9852:	bd10      	pop	{r4, pc}
    9854:	20000250 	.word	0x20000250

00009858 <SERCOM2_Handler>:
    9858:	b510      	push	{r4, lr}
    985a:	4b02      	ldr	r3, [pc, #8]	; (9864 <SERCOM2_Handler+0xc>)
    985c:	689b      	ldr	r3, [r3, #8]
    985e:	2002      	movs	r0, #2
    9860:	4798      	blx	r3
    9862:	bd10      	pop	{r4, pc}
    9864:	20000250 	.word	0x20000250

00009868 <SERCOM3_Handler>:
    9868:	b510      	push	{r4, lr}
    986a:	4b02      	ldr	r3, [pc, #8]	; (9874 <SERCOM3_Handler+0xc>)
    986c:	68db      	ldr	r3, [r3, #12]
    986e:	2003      	movs	r0, #3
    9870:	4798      	blx	r3
    9872:	bd10      	pop	{r4, pc}
    9874:	20000250 	.word	0x20000250

00009878 <SERCOM4_Handler>:
    9878:	b510      	push	{r4, lr}
    987a:	4b02      	ldr	r3, [pc, #8]	; (9884 <SERCOM4_Handler+0xc>)
    987c:	691b      	ldr	r3, [r3, #16]
    987e:	2004      	movs	r0, #4
    9880:	4798      	blx	r3
    9882:	bd10      	pop	{r4, pc}
    9884:	20000250 	.word	0x20000250

00009888 <SERCOM5_Handler>:
    9888:	b510      	push	{r4, lr}
    988a:	4b02      	ldr	r3, [pc, #8]	; (9894 <SERCOM5_Handler+0xc>)
    988c:	695b      	ldr	r3, [r3, #20]
    988e:	2005      	movs	r0, #5
    9890:	4798      	blx	r3
    9892:	bd10      	pop	{r4, pc}
    9894:	20000250 	.word	0x20000250

00009898 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    9898:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    989a:	2000      	movs	r0, #0
    989c:	4b08      	ldr	r3, [pc, #32]	; (98c0 <delay_init+0x28>)
    989e:	4798      	blx	r3
    98a0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    98a2:	4c08      	ldr	r4, [pc, #32]	; (98c4 <delay_init+0x2c>)
    98a4:	21fa      	movs	r1, #250	; 0xfa
    98a6:	0089      	lsls	r1, r1, #2
    98a8:	47a0      	blx	r4
    98aa:	4b07      	ldr	r3, [pc, #28]	; (98c8 <delay_init+0x30>)
    98ac:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    98ae:	4907      	ldr	r1, [pc, #28]	; (98cc <delay_init+0x34>)
    98b0:	0028      	movs	r0, r5
    98b2:	47a0      	blx	r4
    98b4:	4b06      	ldr	r3, [pc, #24]	; (98d0 <delay_init+0x38>)
    98b6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    98b8:	2205      	movs	r2, #5
    98ba:	4b06      	ldr	r3, [pc, #24]	; (98d4 <delay_init+0x3c>)
    98bc:	601a      	str	r2, [r3, #0]
}
    98be:	bd70      	pop	{r4, r5, r6, pc}
    98c0:	0000a1e5 	.word	0x0000a1e5
    98c4:	0000d919 	.word	0x0000d919
    98c8:	20000004 	.word	0x20000004
    98cc:	000f4240 	.word	0x000f4240
    98d0:	20000008 	.word	0x20000008
    98d4:	e000e010 	.word	0xe000e010

000098d8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    98d8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    98da:	4b08      	ldr	r3, [pc, #32]	; (98fc <delay_cycles_us+0x24>)
    98dc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    98de:	4a08      	ldr	r2, [pc, #32]	; (9900 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    98e0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    98e2:	2180      	movs	r1, #128	; 0x80
    98e4:	0249      	lsls	r1, r1, #9
	while (n--) {
    98e6:	3801      	subs	r0, #1
    98e8:	d307      	bcc.n	98fa <delay_cycles_us+0x22>
	if (n > 0) {
    98ea:	2c00      	cmp	r4, #0
    98ec:	d0fb      	beq.n	98e6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    98ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    98f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    98f2:	6813      	ldr	r3, [r2, #0]
    98f4:	420b      	tst	r3, r1
    98f6:	d0fc      	beq.n	98f2 <delay_cycles_us+0x1a>
    98f8:	e7f5      	b.n	98e6 <delay_cycles_us+0xe>
	}
}
    98fa:	bd30      	pop	{r4, r5, pc}
    98fc:	20000008 	.word	0x20000008
    9900:	e000e010 	.word	0xe000e010

00009904 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    9904:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    9906:	4b08      	ldr	r3, [pc, #32]	; (9928 <delay_cycles_ms+0x24>)
    9908:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    990a:	4a08      	ldr	r2, [pc, #32]	; (992c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    990c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    990e:	2180      	movs	r1, #128	; 0x80
    9910:	0249      	lsls	r1, r1, #9
	while (n--) {
    9912:	3801      	subs	r0, #1
    9914:	d307      	bcc.n	9926 <delay_cycles_ms+0x22>
	if (n > 0) {
    9916:	2c00      	cmp	r4, #0
    9918:	d0fb      	beq.n	9912 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    991a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    991c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    991e:	6813      	ldr	r3, [r2, #0]
    9920:	420b      	tst	r3, r1
    9922:	d0fc      	beq.n	991e <delay_cycles_ms+0x1a>
    9924:	e7f5      	b.n	9912 <delay_cycles_ms+0xe>
	}
}
    9926:	bd30      	pop	{r4, r5, pc}
    9928:	20000004 	.word	0x20000004
    992c:	e000e010 	.word	0xe000e010

00009930 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    9930:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
    9932:	4a1e      	ldr	r2, [pc, #120]	; (99ac <nvm_set_config+0x7c>)
    9934:	69d3      	ldr	r3, [r2, #28]
    9936:	2104      	movs	r1, #4
    9938:	430b      	orrs	r3, r1
    993a:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    993c:	4b1c      	ldr	r3, [pc, #112]	; (99b0 <nvm_set_config+0x80>)
    993e:	2220      	movs	r2, #32
    9940:	32ff      	adds	r2, #255	; 0xff
    9942:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    9944:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    9946:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    9948:	07d2      	lsls	r2, r2, #31
    994a:	d401      	bmi.n	9950 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    994c:	0018      	movs	r0, r3
    994e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    9950:	7803      	ldrb	r3, [r0, #0]
    9952:	021b      	lsls	r3, r3, #8
    9954:	22c0      	movs	r2, #192	; 0xc0
    9956:	0092      	lsls	r2, r2, #2
    9958:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    995a:	7841      	ldrb	r1, [r0, #1]
    995c:	01c9      	lsls	r1, r1, #7
    995e:	22ff      	movs	r2, #255	; 0xff
    9960:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    9962:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    9964:	7881      	ldrb	r1, [r0, #2]
    9966:	0049      	lsls	r1, r1, #1
    9968:	221e      	movs	r2, #30
    996a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    996c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    996e:	78c2      	ldrb	r2, [r0, #3]
    9970:	0492      	lsls	r2, r2, #18
    9972:	2180      	movs	r1, #128	; 0x80
    9974:	02c9      	lsls	r1, r1, #11
    9976:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    9978:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    997a:	7902      	ldrb	r2, [r0, #4]
    997c:	0412      	lsls	r2, r2, #16
    997e:	21c0      	movs	r1, #192	; 0xc0
    9980:	0289      	lsls	r1, r1, #10
    9982:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    9984:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    9986:	4a0a      	ldr	r2, [pc, #40]	; (99b0 <nvm_set_config+0x80>)
    9988:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    998a:	6893      	ldr	r3, [r2, #8]
    998c:	035b      	lsls	r3, r3, #13
    998e:	0f5b      	lsrs	r3, r3, #29
    9990:	4908      	ldr	r1, [pc, #32]	; (99b4 <nvm_set_config+0x84>)
    9992:	2408      	movs	r4, #8
    9994:	409c      	lsls	r4, r3
    9996:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    9998:	6893      	ldr	r3, [r2, #8]
    999a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    999c:	7843      	ldrb	r3, [r0, #1]
    999e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    99a0:	8b13      	ldrh	r3, [r2, #24]
    99a2:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    99a4:	0fdb      	lsrs	r3, r3, #31
    99a6:	011b      	lsls	r3, r3, #4
    99a8:	e7d0      	b.n	994c <nvm_set_config+0x1c>
    99aa:	46c0      	nop			; (mov r8, r8)
    99ac:	40000400 	.word	0x40000400
    99b0:	41004000 	.word	0x41004000
    99b4:	20000268 	.word	0x20000268

000099b8 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    99b8:	b530      	push	{r4, r5, lr}
    99ba:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    99bc:	4a22      	ldr	r2, [pc, #136]	; (9a48 <nvm_execute_command+0x90>)
    99be:	8810      	ldrh	r0, [r2, #0]
    99c0:	8853      	ldrh	r3, [r2, #2]
    99c2:	4343      	muls	r3, r0
    99c4:	428b      	cmp	r3, r1
    99c6:	d206      	bcs.n	99d6 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    99c8:	2280      	movs	r2, #128	; 0x80
    99ca:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    99cc:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    99ce:	4b1f      	ldr	r3, [pc, #124]	; (9a4c <nvm_execute_command+0x94>)
    99d0:	18cb      	adds	r3, r1, r3
    99d2:	4293      	cmp	r3, r2
    99d4:	d80e      	bhi.n	99f4 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    99d6:	4b1e      	ldr	r3, [pc, #120]	; (9a50 <nvm_execute_command+0x98>)
    99d8:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    99da:	2280      	movs	r2, #128	; 0x80
    99dc:	02d2      	lsls	r2, r2, #11
    99de:	432a      	orrs	r2, r5
    99e0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    99e2:	2220      	movs	r2, #32
    99e4:	32ff      	adds	r2, #255	; 0xff
    99e6:	831a      	strh	r2, [r3, #24]
    99e8:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    99ea:	07db      	lsls	r3, r3, #31
    99ec:	d403      	bmi.n	99f6 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    99ee:	4b18      	ldr	r3, [pc, #96]	; (9a50 <nvm_execute_command+0x98>)
    99f0:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    99f2:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    99f4:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    99f6:	2c45      	cmp	r4, #69	; 0x45
    99f8:	d822      	bhi.n	9a40 <nvm_execute_command+0x88>
    99fa:	00a3      	lsls	r3, r4, #2
    99fc:	4a15      	ldr	r2, [pc, #84]	; (9a54 <nvm_execute_command+0x9c>)
    99fe:	58d3      	ldr	r3, [r2, r3]
    9a00:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    9a02:	4b13      	ldr	r3, [pc, #76]	; (9a50 <nvm_execute_command+0x98>)
    9a04:	8b1b      	ldrh	r3, [r3, #24]
    9a06:	05db      	lsls	r3, r3, #23
    9a08:	d503      	bpl.n	9a12 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    9a0a:	4b11      	ldr	r3, [pc, #68]	; (9a50 <nvm_execute_command+0x98>)
    9a0c:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    9a0e:	2010      	movs	r0, #16
    9a10:	e7f0      	b.n	99f4 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    9a12:	0889      	lsrs	r1, r1, #2
    9a14:	0049      	lsls	r1, r1, #1
    9a16:	4b0e      	ldr	r3, [pc, #56]	; (9a50 <nvm_execute_command+0x98>)
    9a18:	61d9      	str	r1, [r3, #28]
			break;
    9a1a:	e003      	b.n	9a24 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    9a1c:	0889      	lsrs	r1, r1, #2
    9a1e:	0049      	lsls	r1, r1, #1
    9a20:	4b0b      	ldr	r3, [pc, #44]	; (9a50 <nvm_execute_command+0x98>)
    9a22:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    9a24:	20a5      	movs	r0, #165	; 0xa5
    9a26:	0200      	lsls	r0, r0, #8
    9a28:	4304      	orrs	r4, r0
    9a2a:	4b09      	ldr	r3, [pc, #36]	; (9a50 <nvm_execute_command+0x98>)
    9a2c:	801c      	strh	r4, [r3, #0]
    9a2e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    9a30:	2201      	movs	r2, #1
    9a32:	7d0b      	ldrb	r3, [r1, #20]
    9a34:	4213      	tst	r3, r2
    9a36:	d0fc      	beq.n	9a32 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    9a38:	4b05      	ldr	r3, [pc, #20]	; (9a50 <nvm_execute_command+0x98>)
    9a3a:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    9a3c:	2000      	movs	r0, #0
    9a3e:	e7d9      	b.n	99f4 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    9a40:	4b03      	ldr	r3, [pc, #12]	; (9a50 <nvm_execute_command+0x98>)
    9a42:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    9a44:	2017      	movs	r0, #23
    9a46:	e7d5      	b.n	99f4 <nvm_execute_command+0x3c>
    9a48:	20000268 	.word	0x20000268
    9a4c:	ff7fc000 	.word	0xff7fc000
    9a50:	41004000 	.word	0x41004000
    9a54:	000124d8 	.word	0x000124d8

00009a58 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    9a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9a5a:	4b25      	ldr	r3, [pc, #148]	; (9af0 <nvm_write_buffer+0x98>)
    9a5c:	881d      	ldrh	r5, [r3, #0]
    9a5e:	885b      	ldrh	r3, [r3, #2]
    9a60:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9a62:	2418      	movs	r4, #24
	if (destination_address >
    9a64:	4283      	cmp	r3, r0
    9a66:	d201      	bcs.n	9a6c <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    9a68:	0020      	movs	r0, r4
    9a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    9a6c:	1e6b      	subs	r3, r5, #1
    9a6e:	4218      	tst	r0, r3
    9a70:	d1fa      	bne.n	9a68 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    9a72:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    9a74:	4295      	cmp	r5, r2
    9a76:	d3f7      	bcc.n	9a68 <nvm_write_buffer+0x10>
    9a78:	4b1e      	ldr	r3, [pc, #120]	; (9af4 <nvm_write_buffer+0x9c>)
    9a7a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    9a7c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    9a7e:	07db      	lsls	r3, r3, #31
    9a80:	d5f2      	bpl.n	9a68 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    9a82:	4c1d      	ldr	r4, [pc, #116]	; (9af8 <nvm_write_buffer+0xa0>)
    9a84:	4b1b      	ldr	r3, [pc, #108]	; (9af4 <nvm_write_buffer+0x9c>)
    9a86:	801c      	strh	r4, [r3, #0]
    9a88:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    9a8a:	2401      	movs	r4, #1
    9a8c:	7d2b      	ldrb	r3, [r5, #20]
    9a8e:	4223      	tst	r3, r4
    9a90:	d0fc      	beq.n	9a8c <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9a92:	2420      	movs	r4, #32
    9a94:	34ff      	adds	r4, #255	; 0xff
    9a96:	4b17      	ldr	r3, [pc, #92]	; (9af4 <nvm_write_buffer+0x9c>)
    9a98:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    9a9a:	2a00      	cmp	r2, #0
    9a9c:	d022      	beq.n	9ae4 <nvm_write_buffer+0x8c>
    9a9e:	2301      	movs	r3, #1
    9aa0:	0005      	movs	r5, r0
    9aa2:	439d      	bics	r5, r3
    9aa4:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    9aa6:	1e57      	subs	r7, r2, #1
    9aa8:	e009      	b.n	9abe <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    9aaa:	18ce      	adds	r6, r1, r3
    9aac:	7876      	ldrb	r6, [r6, #1]
    9aae:	0236      	lsls	r6, r6, #8
    9ab0:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    9ab2:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    9ab4:	3302      	adds	r3, #2
    9ab6:	b29b      	uxth	r3, r3
    9ab8:	3502      	adds	r5, #2
    9aba:	429a      	cmp	r2, r3
    9abc:	d904      	bls.n	9ac8 <nvm_write_buffer+0x70>
		data = buffer[i];
    9abe:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    9ac0:	42bb      	cmp	r3, r7
    9ac2:	dbf2      	blt.n	9aaa <nvm_write_buffer+0x52>
		data = buffer[i];
    9ac4:	b2a4      	uxth	r4, r4
    9ac6:	e7f4      	b.n	9ab2 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    9ac8:	4b09      	ldr	r3, [pc, #36]	; (9af0 <nvm_write_buffer+0x98>)
    9aca:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    9acc:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d1ca      	bne.n	9a68 <nvm_write_buffer+0x10>
    9ad2:	2a3f      	cmp	r2, #63	; 0x3f
    9ad4:	d8c8      	bhi.n	9a68 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    9ad6:	2200      	movs	r2, #0
    9ad8:	0001      	movs	r1, r0
    9ada:	2004      	movs	r0, #4
    9adc:	4b07      	ldr	r3, [pc, #28]	; (9afc <nvm_write_buffer+0xa4>)
    9ade:	4798      	blx	r3
    9ae0:	0004      	movs	r4, r0
    9ae2:	e7c1      	b.n	9a68 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    9ae4:	4b02      	ldr	r3, [pc, #8]	; (9af0 <nvm_write_buffer+0x98>)
    9ae6:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    9ae8:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    9aea:	2b00      	cmp	r3, #0
    9aec:	d0f3      	beq.n	9ad6 <nvm_write_buffer+0x7e>
    9aee:	e7bb      	b.n	9a68 <nvm_write_buffer+0x10>
    9af0:	20000268 	.word	0x20000268
    9af4:	41004000 	.word	0x41004000
    9af8:	ffffa544 	.word	0xffffa544
    9afc:	000099b9 	.word	0x000099b9

00009b00 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    9b00:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9b02:	4b18      	ldr	r3, [pc, #96]	; (9b64 <nvm_read_buffer+0x64>)
    9b04:	881d      	ldrh	r5, [r3, #0]
    9b06:	885b      	ldrh	r3, [r3, #2]
    9b08:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    9b0a:	2418      	movs	r4, #24
	if (source_address >
    9b0c:	4283      	cmp	r3, r0
    9b0e:	d201      	bcs.n	9b14 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    9b10:	0020      	movs	r0, r4
    9b12:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    9b14:	1e6b      	subs	r3, r5, #1
    9b16:	4218      	tst	r0, r3
    9b18:	d1fa      	bne.n	9b10 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    9b1a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    9b1c:	4295      	cmp	r5, r2
    9b1e:	d3f7      	bcc.n	9b10 <nvm_read_buffer+0x10>
    9b20:	4b11      	ldr	r3, [pc, #68]	; (9b68 <nvm_read_buffer+0x68>)
    9b22:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    9b24:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    9b26:	07db      	lsls	r3, r3, #31
    9b28:	d5f2      	bpl.n	9b10 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9b2a:	2420      	movs	r4, #32
    9b2c:	34ff      	adds	r4, #255	; 0xff
    9b2e:	4b0e      	ldr	r3, [pc, #56]	; (9b68 <nvm_read_buffer+0x68>)
    9b30:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    9b32:	2a00      	cmp	r2, #0
    9b34:	d014      	beq.n	9b60 <nvm_read_buffer+0x60>
    9b36:	2301      	movs	r3, #1
    9b38:	4398      	bics	r0, r3
    9b3a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    9b3c:	1e56      	subs	r6, r2, #1
    9b3e:	e004      	b.n	9b4a <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    9b40:	3302      	adds	r3, #2
    9b42:	b29b      	uxth	r3, r3
    9b44:	3002      	adds	r0, #2
    9b46:	429a      	cmp	r2, r3
    9b48:	d908      	bls.n	9b5c <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    9b4a:	8804      	ldrh	r4, [r0, #0]
    9b4c:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    9b4e:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    9b50:	42b3      	cmp	r3, r6
    9b52:	daf5      	bge.n	9b40 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    9b54:	18cd      	adds	r5, r1, r3
    9b56:	0a24      	lsrs	r4, r4, #8
    9b58:	706c      	strb	r4, [r5, #1]
    9b5a:	e7f1      	b.n	9b40 <nvm_read_buffer+0x40>
	return STATUS_OK;
    9b5c:	2400      	movs	r4, #0
    9b5e:	e7d7      	b.n	9b10 <nvm_read_buffer+0x10>
    9b60:	2400      	movs	r4, #0
    9b62:	e7d5      	b.n	9b10 <nvm_read_buffer+0x10>
    9b64:	20000268 	.word	0x20000268
    9b68:	41004000 	.word	0x41004000

00009b6c <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9b6c:	4b13      	ldr	r3, [pc, #76]	; (9bbc <nvm_erase_row+0x50>)
    9b6e:	881a      	ldrh	r2, [r3, #0]
    9b70:	885b      	ldrh	r3, [r3, #2]
    9b72:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9b74:	2118      	movs	r1, #24
	if (row_address >
    9b76:	4283      	cmp	r3, r0
    9b78:	d201      	bcs.n	9b7e <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    9b7a:	0008      	movs	r0, r1
    9b7c:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    9b7e:	0092      	lsls	r2, r2, #2
    9b80:	3a01      	subs	r2, #1
    9b82:	4210      	tst	r0, r2
    9b84:	d1f9      	bne.n	9b7a <nvm_erase_row+0xe>
    9b86:	4b0e      	ldr	r3, [pc, #56]	; (9bc0 <nvm_erase_row+0x54>)
    9b88:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    9b8a:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    9b8c:	07db      	lsls	r3, r3, #31
    9b8e:	d5f4      	bpl.n	9b7a <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9b90:	4b0b      	ldr	r3, [pc, #44]	; (9bc0 <nvm_erase_row+0x54>)
    9b92:	2220      	movs	r2, #32
    9b94:	32ff      	adds	r2, #255	; 0xff
    9b96:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    9b98:	0880      	lsrs	r0, r0, #2
    9b9a:	0040      	lsls	r0, r0, #1
    9b9c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    9b9e:	4a09      	ldr	r2, [pc, #36]	; (9bc4 <nvm_erase_row+0x58>)
    9ba0:	801a      	strh	r2, [r3, #0]
    9ba2:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    9ba4:	2201      	movs	r2, #1
    9ba6:	7d0b      	ldrb	r3, [r1, #20]
    9ba8:	4213      	tst	r3, r2
    9baa:	d0fc      	beq.n	9ba6 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    9bac:	4b04      	ldr	r3, [pc, #16]	; (9bc0 <nvm_erase_row+0x54>)
    9bae:	8b19      	ldrh	r1, [r3, #24]
    9bb0:	201c      	movs	r0, #28
    9bb2:	4001      	ands	r1, r0
	return STATUS_OK;
    9bb4:	1e48      	subs	r0, r1, #1
    9bb6:	4181      	sbcs	r1, r0
    9bb8:	0089      	lsls	r1, r1, #2
    9bba:	e7de      	b.n	9b7a <nvm_erase_row+0xe>
    9bbc:	20000268 	.word	0x20000268
    9bc0:	41004000 	.word	0x41004000
    9bc4:	ffffa502 	.word	0xffffa502

00009bc8 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9bc8:	4b13      	ldr	r3, [pc, #76]	; (9c18 <nvm_get_parameters+0x50>)
    9bca:	2220      	movs	r2, #32
    9bcc:	32ff      	adds	r2, #255	; 0xff
    9bce:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    9bd0:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    9bd2:	034a      	lsls	r2, r1, #13
    9bd4:	0f52      	lsrs	r2, r2, #29
    9bd6:	2308      	movs	r3, #8
    9bd8:	4093      	lsls	r3, r2
	parameters->page_size =
    9bda:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    9bdc:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    9bde:	4b0f      	ldr	r3, [pc, #60]	; (9c1c <nvm_get_parameters+0x54>)
    9be0:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    9be2:	065b      	lsls	r3, r3, #25
    9be4:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    9be6:	2b07      	cmp	r3, #7
    9be8:	d010      	beq.n	9c0c <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    9bea:	2206      	movs	r2, #6
    9bec:	1ad2      	subs	r2, r2, r3
    9bee:	2304      	movs	r3, #4
    9bf0:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    9bf2:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    9bf4:	4b09      	ldr	r3, [pc, #36]	; (9c1c <nvm_get_parameters+0x54>)
    9bf6:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    9bf8:	2207      	movs	r2, #7
    9bfa:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    9bfc:	2b07      	cmp	r3, #7
    9bfe:	d008      	beq.n	9c12 <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    9c00:	2207      	movs	r2, #7
    9c02:	1ad2      	subs	r2, r2, r3
    9c04:	2304      	movs	r3, #4
    9c06:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    9c08:	6083      	str	r3, [r0, #8]
	}
}
    9c0a:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    9c0c:	2300      	movs	r3, #0
    9c0e:	6043      	str	r3, [r0, #4]
    9c10:	e7f0      	b.n	9bf4 <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
    9c12:	2300      	movs	r3, #0
    9c14:	6083      	str	r3, [r0, #8]
    9c16:	e7f8      	b.n	9c0a <nvm_get_parameters+0x42>
    9c18:	41004000 	.word	0x41004000
    9c1c:	00804000 	.word	0x00804000

00009c20 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    9c20:	b500      	push	{lr}
    9c22:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9c24:	ab01      	add	r3, sp, #4
    9c26:	2280      	movs	r2, #128	; 0x80
    9c28:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    9c2a:	780a      	ldrb	r2, [r1, #0]
    9c2c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    9c2e:	784a      	ldrb	r2, [r1, #1]
    9c30:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    9c32:	788a      	ldrb	r2, [r1, #2]
    9c34:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    9c36:	0019      	movs	r1, r3
    9c38:	4b01      	ldr	r3, [pc, #4]	; (9c40 <port_pin_set_config+0x20>)
    9c3a:	4798      	blx	r3
}
    9c3c:	b003      	add	sp, #12
    9c3e:	bd00      	pop	{pc}
    9c40:	0000a3f5 	.word	0x0000a3f5

00009c44 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    9c44:	4770      	bx	lr
	...

00009c48 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    9c48:	4b0c      	ldr	r3, [pc, #48]	; (9c7c <cpu_irq_enter_critical+0x34>)
    9c4a:	681b      	ldr	r3, [r3, #0]
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d106      	bne.n	9c5e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9c50:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    9c54:	2b00      	cmp	r3, #0
    9c56:	d007      	beq.n	9c68 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    9c58:	2200      	movs	r2, #0
    9c5a:	4b09      	ldr	r3, [pc, #36]	; (9c80 <cpu_irq_enter_critical+0x38>)
    9c5c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    9c5e:	4a07      	ldr	r2, [pc, #28]	; (9c7c <cpu_irq_enter_critical+0x34>)
    9c60:	6813      	ldr	r3, [r2, #0]
    9c62:	3301      	adds	r3, #1
    9c64:	6013      	str	r3, [r2, #0]
}
    9c66:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    9c68:	b672      	cpsid	i
    9c6a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    9c6e:	2200      	movs	r2, #0
    9c70:	4b04      	ldr	r3, [pc, #16]	; (9c84 <cpu_irq_enter_critical+0x3c>)
    9c72:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    9c74:	3201      	adds	r2, #1
    9c76:	4b02      	ldr	r3, [pc, #8]	; (9c80 <cpu_irq_enter_critical+0x38>)
    9c78:	701a      	strb	r2, [r3, #0]
    9c7a:	e7f0      	b.n	9c5e <cpu_irq_enter_critical+0x16>
    9c7c:	20000270 	.word	0x20000270
    9c80:	20000274 	.word	0x20000274
    9c84:	2000000c 	.word	0x2000000c

00009c88 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    9c88:	4b08      	ldr	r3, [pc, #32]	; (9cac <cpu_irq_leave_critical+0x24>)
    9c8a:	681a      	ldr	r2, [r3, #0]
    9c8c:	3a01      	subs	r2, #1
    9c8e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    9c90:	681b      	ldr	r3, [r3, #0]
    9c92:	2b00      	cmp	r3, #0
    9c94:	d109      	bne.n	9caa <cpu_irq_leave_critical+0x22>
    9c96:	4b06      	ldr	r3, [pc, #24]	; (9cb0 <cpu_irq_leave_critical+0x28>)
    9c98:	781b      	ldrb	r3, [r3, #0]
    9c9a:	2b00      	cmp	r3, #0
    9c9c:	d005      	beq.n	9caa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    9c9e:	2201      	movs	r2, #1
    9ca0:	4b04      	ldr	r3, [pc, #16]	; (9cb4 <cpu_irq_leave_critical+0x2c>)
    9ca2:	701a      	strb	r2, [r3, #0]
    9ca4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9ca8:	b662      	cpsie	i
	}
}
    9caa:	4770      	bx	lr
    9cac:	20000270 	.word	0x20000270
    9cb0:	20000274 	.word	0x20000274
    9cb4:	2000000c 	.word	0x2000000c

00009cb8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    9cb8:	b510      	push	{r4, lr}
	switch (clock_source) {
    9cba:	2808      	cmp	r0, #8
    9cbc:	d803      	bhi.n	9cc6 <system_clock_source_get_hz+0xe>
    9cbe:	0080      	lsls	r0, r0, #2
    9cc0:	4b1b      	ldr	r3, [pc, #108]	; (9d30 <system_clock_source_get_hz+0x78>)
    9cc2:	581b      	ldr	r3, [r3, r0]
    9cc4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    9cc6:	2000      	movs	r0, #0
    9cc8:	e030      	b.n	9d2c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    9cca:	4b1a      	ldr	r3, [pc, #104]	; (9d34 <system_clock_source_get_hz+0x7c>)
    9ccc:	6918      	ldr	r0, [r3, #16]
    9cce:	e02d      	b.n	9d2c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    9cd0:	4b19      	ldr	r3, [pc, #100]	; (9d38 <system_clock_source_get_hz+0x80>)
    9cd2:	6a1b      	ldr	r3, [r3, #32]
    9cd4:	059b      	lsls	r3, r3, #22
    9cd6:	0f9b      	lsrs	r3, r3, #30
    9cd8:	4818      	ldr	r0, [pc, #96]	; (9d3c <system_clock_source_get_hz+0x84>)
    9cda:	40d8      	lsrs	r0, r3
    9cdc:	e026      	b.n	9d2c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    9cde:	4b15      	ldr	r3, [pc, #84]	; (9d34 <system_clock_source_get_hz+0x7c>)
    9ce0:	6958      	ldr	r0, [r3, #20]
    9ce2:	e023      	b.n	9d2c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    9ce4:	4b13      	ldr	r3, [pc, #76]	; (9d34 <system_clock_source_get_hz+0x7c>)
    9ce6:	681b      	ldr	r3, [r3, #0]
			return 0;
    9ce8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    9cea:	079b      	lsls	r3, r3, #30
    9cec:	d51e      	bpl.n	9d2c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    9cee:	4912      	ldr	r1, [pc, #72]	; (9d38 <system_clock_source_get_hz+0x80>)
    9cf0:	2210      	movs	r2, #16
    9cf2:	68cb      	ldr	r3, [r1, #12]
    9cf4:	421a      	tst	r2, r3
    9cf6:	d0fc      	beq.n	9cf2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    9cf8:	4b0e      	ldr	r3, [pc, #56]	; (9d34 <system_clock_source_get_hz+0x7c>)
    9cfa:	681b      	ldr	r3, [r3, #0]
    9cfc:	075b      	lsls	r3, r3, #29
    9cfe:	d401      	bmi.n	9d04 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    9d00:	480f      	ldr	r0, [pc, #60]	; (9d40 <system_clock_source_get_hz+0x88>)
    9d02:	e013      	b.n	9d2c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9d04:	2000      	movs	r0, #0
    9d06:	4b0f      	ldr	r3, [pc, #60]	; (9d44 <system_clock_source_get_hz+0x8c>)
    9d08:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    9d0a:	4b0a      	ldr	r3, [pc, #40]	; (9d34 <system_clock_source_get_hz+0x7c>)
    9d0c:	689b      	ldr	r3, [r3, #8]
    9d0e:	041b      	lsls	r3, r3, #16
    9d10:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9d12:	4358      	muls	r0, r3
    9d14:	e00a      	b.n	9d2c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    9d16:	2350      	movs	r3, #80	; 0x50
    9d18:	4a07      	ldr	r2, [pc, #28]	; (9d38 <system_clock_source_get_hz+0x80>)
    9d1a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    9d1c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    9d1e:	075b      	lsls	r3, r3, #29
    9d20:	d504      	bpl.n	9d2c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    9d22:	4b04      	ldr	r3, [pc, #16]	; (9d34 <system_clock_source_get_hz+0x7c>)
    9d24:	68d8      	ldr	r0, [r3, #12]
    9d26:	e001      	b.n	9d2c <system_clock_source_get_hz+0x74>
		return 32768UL;
    9d28:	2080      	movs	r0, #128	; 0x80
    9d2a:	0200      	lsls	r0, r0, #8
	}
}
    9d2c:	bd10      	pop	{r4, pc}
    9d2e:	46c0      	nop			; (mov r8, r8)
    9d30:	000125f0 	.word	0x000125f0
    9d34:	20000278 	.word	0x20000278
    9d38:	40000800 	.word	0x40000800
    9d3c:	007a1200 	.word	0x007a1200
    9d40:	02dc6c00 	.word	0x02dc6c00
    9d44:	0000a319 	.word	0x0000a319

00009d48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    9d48:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    9d4a:	490c      	ldr	r1, [pc, #48]	; (9d7c <system_clock_source_osc8m_set_config+0x34>)
    9d4c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    9d4e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    9d50:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    9d52:	7840      	ldrb	r0, [r0, #1]
    9d54:	2201      	movs	r2, #1
    9d56:	4010      	ands	r0, r2
    9d58:	0180      	lsls	r0, r0, #6
    9d5a:	2640      	movs	r6, #64	; 0x40
    9d5c:	43b3      	bics	r3, r6
    9d5e:	4303      	orrs	r3, r0
    9d60:	402a      	ands	r2, r5
    9d62:	01d2      	lsls	r2, r2, #7
    9d64:	2080      	movs	r0, #128	; 0x80
    9d66:	4383      	bics	r3, r0
    9d68:	4313      	orrs	r3, r2
    9d6a:	2203      	movs	r2, #3
    9d6c:	4022      	ands	r2, r4
    9d6e:	0212      	lsls	r2, r2, #8
    9d70:	4803      	ldr	r0, [pc, #12]	; (9d80 <system_clock_source_osc8m_set_config+0x38>)
    9d72:	4003      	ands	r3, r0
    9d74:	4313      	orrs	r3, r2
    9d76:	620b      	str	r3, [r1, #32]
}
    9d78:	bd70      	pop	{r4, r5, r6, pc}
    9d7a:	46c0      	nop			; (mov r8, r8)
    9d7c:	40000800 	.word	0x40000800
    9d80:	fffffcff 	.word	0xfffffcff

00009d84 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    9d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d86:	46de      	mov	lr, fp
    9d88:	4657      	mov	r7, sl
    9d8a:	464e      	mov	r6, r9
    9d8c:	4645      	mov	r5, r8
    9d8e:	b5e0      	push	{r5, r6, r7, lr}
    9d90:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    9d92:	4b26      	ldr	r3, [pc, #152]	; (9e2c <system_clock_source_xosc32k_set_config+0xa8>)
    9d94:	469b      	mov	fp, r3
    9d96:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    9d98:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    9d9a:	7800      	ldrb	r0, [r0, #0]
    9d9c:	4242      	negs	r2, r0
    9d9e:	4142      	adcs	r2, r0
    9da0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    9da2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    9da4:	78ca      	ldrb	r2, [r1, #3]
    9da6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    9da8:	790a      	ldrb	r2, [r1, #4]
    9daa:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    9dac:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9dae:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    9db0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    9db2:	688a      	ldr	r2, [r1, #8]
    9db4:	491e      	ldr	r1, [pc, #120]	; (9e30 <system_clock_source_xosc32k_set_config+0xac>)
    9db6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    9db8:	2101      	movs	r1, #1
    9dba:	464a      	mov	r2, r9
    9dbc:	0092      	lsls	r2, r2, #2
    9dbe:	4691      	mov	r9, r2
    9dc0:	2204      	movs	r2, #4
    9dc2:	4393      	bics	r3, r2
    9dc4:	464a      	mov	r2, r9
    9dc6:	4313      	orrs	r3, r2
    9dc8:	4642      	mov	r2, r8
    9dca:	400a      	ands	r2, r1
    9dcc:	00d2      	lsls	r2, r2, #3
    9dce:	4690      	mov	r8, r2
    9dd0:	2208      	movs	r2, #8
    9dd2:	4393      	bics	r3, r2
    9dd4:	4642      	mov	r2, r8
    9dd6:	4313      	orrs	r3, r2
    9dd8:	4662      	mov	r2, ip
    9dda:	400a      	ands	r2, r1
    9ddc:	0112      	lsls	r2, r2, #4
    9dde:	4694      	mov	ip, r2
    9de0:	2210      	movs	r2, #16
    9de2:	4393      	bics	r3, r2
    9de4:	4662      	mov	r2, ip
    9de6:	4313      	orrs	r3, r2
    9de8:	4008      	ands	r0, r1
    9dea:	0140      	lsls	r0, r0, #5
    9dec:	2220      	movs	r2, #32
    9dee:	4393      	bics	r3, r2
    9df0:	4303      	orrs	r3, r0
    9df2:	400f      	ands	r7, r1
    9df4:	01bf      	lsls	r7, r7, #6
    9df6:	2040      	movs	r0, #64	; 0x40
    9df8:	4383      	bics	r3, r0
    9dfa:	433b      	orrs	r3, r7
    9dfc:	400e      	ands	r6, r1
    9dfe:	01f6      	lsls	r6, r6, #7
    9e00:	3040      	adds	r0, #64	; 0x40
    9e02:	4383      	bics	r3, r0
    9e04:	4333      	orrs	r3, r6
    9e06:	3879      	subs	r0, #121	; 0x79
    9e08:	4005      	ands	r5, r0
    9e0a:	022d      	lsls	r5, r5, #8
    9e0c:	4809      	ldr	r0, [pc, #36]	; (9e34 <system_clock_source_xosc32k_set_config+0xb0>)
    9e0e:	4003      	ands	r3, r0
    9e10:	432b      	orrs	r3, r5
    9e12:	4021      	ands	r1, r4
    9e14:	0309      	lsls	r1, r1, #12
    9e16:	4808      	ldr	r0, [pc, #32]	; (9e38 <system_clock_source_xosc32k_set_config+0xb4>)
    9e18:	4003      	ands	r3, r0
    9e1a:	430b      	orrs	r3, r1
    9e1c:	465a      	mov	r2, fp
    9e1e:	8293      	strh	r3, [r2, #20]
}
    9e20:	bc3c      	pop	{r2, r3, r4, r5}
    9e22:	4690      	mov	r8, r2
    9e24:	4699      	mov	r9, r3
    9e26:	46a2      	mov	sl, r4
    9e28:	46ab      	mov	fp, r5
    9e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e2c:	40000800 	.word	0x40000800
    9e30:	20000278 	.word	0x20000278
    9e34:	fffff8ff 	.word	0xfffff8ff
    9e38:	ffffefff 	.word	0xffffefff

00009e3c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    9e3c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9e3e:	7a03      	ldrb	r3, [r0, #8]
    9e40:	069b      	lsls	r3, r3, #26
    9e42:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    9e44:	8942      	ldrh	r2, [r0, #10]
    9e46:	0592      	lsls	r2, r2, #22
    9e48:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9e4a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    9e4c:	4918      	ldr	r1, [pc, #96]	; (9eb0 <system_clock_source_dfll_set_config+0x74>)
    9e4e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    9e50:	7983      	ldrb	r3, [r0, #6]
    9e52:	79c2      	ldrb	r2, [r0, #7]
    9e54:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    9e56:	8842      	ldrh	r2, [r0, #2]
    9e58:	8884      	ldrh	r4, [r0, #4]
    9e5a:	4322      	orrs	r2, r4
    9e5c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    9e5e:	7842      	ldrb	r2, [r0, #1]
    9e60:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    9e62:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    9e64:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    9e66:	7803      	ldrb	r3, [r0, #0]
    9e68:	2b04      	cmp	r3, #4
    9e6a:	d011      	beq.n	9e90 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    9e6c:	2b20      	cmp	r3, #32
    9e6e:	d10e      	bne.n	9e8e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9e70:	7b03      	ldrb	r3, [r0, #12]
    9e72:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9e74:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9e76:	4313      	orrs	r3, r2
    9e78:	89c2      	ldrh	r2, [r0, #14]
    9e7a:	0412      	lsls	r2, r2, #16
    9e7c:	490d      	ldr	r1, [pc, #52]	; (9eb4 <system_clock_source_dfll_set_config+0x78>)
    9e7e:	400a      	ands	r2, r1
    9e80:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    9e82:	4a0b      	ldr	r2, [pc, #44]	; (9eb0 <system_clock_source_dfll_set_config+0x74>)
    9e84:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    9e86:	6811      	ldr	r1, [r2, #0]
    9e88:	4b0b      	ldr	r3, [pc, #44]	; (9eb8 <system_clock_source_dfll_set_config+0x7c>)
    9e8a:	430b      	orrs	r3, r1
    9e8c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    9e8e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9e90:	7b03      	ldrb	r3, [r0, #12]
    9e92:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9e94:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9e96:	4313      	orrs	r3, r2
    9e98:	89c2      	ldrh	r2, [r0, #14]
    9e9a:	0412      	lsls	r2, r2, #16
    9e9c:	4905      	ldr	r1, [pc, #20]	; (9eb4 <system_clock_source_dfll_set_config+0x78>)
    9e9e:	400a      	ands	r2, r1
    9ea0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    9ea2:	4a03      	ldr	r2, [pc, #12]	; (9eb0 <system_clock_source_dfll_set_config+0x74>)
    9ea4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    9ea6:	6813      	ldr	r3, [r2, #0]
    9ea8:	2104      	movs	r1, #4
    9eaa:	430b      	orrs	r3, r1
    9eac:	6013      	str	r3, [r2, #0]
    9eae:	e7ee      	b.n	9e8e <system_clock_source_dfll_set_config+0x52>
    9eb0:	20000278 	.word	0x20000278
    9eb4:	03ff0000 	.word	0x03ff0000
    9eb8:	00000424 	.word	0x00000424

00009ebc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    9ebc:	2808      	cmp	r0, #8
    9ebe:	d803      	bhi.n	9ec8 <system_clock_source_enable+0xc>
    9ec0:	0080      	lsls	r0, r0, #2
    9ec2:	4b25      	ldr	r3, [pc, #148]	; (9f58 <system_clock_source_enable+0x9c>)
    9ec4:	581b      	ldr	r3, [r3, r0]
    9ec6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9ec8:	2017      	movs	r0, #23
    9eca:	e044      	b.n	9f56 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    9ecc:	4a23      	ldr	r2, [pc, #140]	; (9f5c <system_clock_source_enable+0xa0>)
    9ece:	6a13      	ldr	r3, [r2, #32]
    9ed0:	2102      	movs	r1, #2
    9ed2:	430b      	orrs	r3, r1
    9ed4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    9ed6:	2000      	movs	r0, #0
    9ed8:	e03d      	b.n	9f56 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    9eda:	4a20      	ldr	r2, [pc, #128]	; (9f5c <system_clock_source_enable+0xa0>)
    9edc:	6993      	ldr	r3, [r2, #24]
    9ede:	2102      	movs	r1, #2
    9ee0:	430b      	orrs	r3, r1
    9ee2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    9ee4:	2000      	movs	r0, #0
		break;
    9ee6:	e036      	b.n	9f56 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    9ee8:	4a1c      	ldr	r2, [pc, #112]	; (9f5c <system_clock_source_enable+0xa0>)
    9eea:	8a13      	ldrh	r3, [r2, #16]
    9eec:	2102      	movs	r1, #2
    9eee:	430b      	orrs	r3, r1
    9ef0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    9ef2:	2000      	movs	r0, #0
		break;
    9ef4:	e02f      	b.n	9f56 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    9ef6:	4a19      	ldr	r2, [pc, #100]	; (9f5c <system_clock_source_enable+0xa0>)
    9ef8:	8a93      	ldrh	r3, [r2, #20]
    9efa:	2102      	movs	r1, #2
    9efc:	430b      	orrs	r3, r1
    9efe:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    9f00:	2000      	movs	r0, #0
		break;
    9f02:	e028      	b.n	9f56 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    9f04:	4916      	ldr	r1, [pc, #88]	; (9f60 <system_clock_source_enable+0xa4>)
    9f06:	680b      	ldr	r3, [r1, #0]
    9f08:	2202      	movs	r2, #2
    9f0a:	4313      	orrs	r3, r2
    9f0c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    9f0e:	4b13      	ldr	r3, [pc, #76]	; (9f5c <system_clock_source_enable+0xa0>)
    9f10:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    9f12:	0019      	movs	r1, r3
    9f14:	320e      	adds	r2, #14
    9f16:	68cb      	ldr	r3, [r1, #12]
    9f18:	421a      	tst	r2, r3
    9f1a:	d0fc      	beq.n	9f16 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    9f1c:	4a10      	ldr	r2, [pc, #64]	; (9f60 <system_clock_source_enable+0xa4>)
    9f1e:	6891      	ldr	r1, [r2, #8]
    9f20:	4b0e      	ldr	r3, [pc, #56]	; (9f5c <system_clock_source_enable+0xa0>)
    9f22:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    9f24:	6852      	ldr	r2, [r2, #4]
    9f26:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    9f28:	2200      	movs	r2, #0
    9f2a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    9f2c:	0019      	movs	r1, r3
    9f2e:	3210      	adds	r2, #16
    9f30:	68cb      	ldr	r3, [r1, #12]
    9f32:	421a      	tst	r2, r3
    9f34:	d0fc      	beq.n	9f30 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    9f36:	4b0a      	ldr	r3, [pc, #40]	; (9f60 <system_clock_source_enable+0xa4>)
    9f38:	681b      	ldr	r3, [r3, #0]
    9f3a:	b29b      	uxth	r3, r3
    9f3c:	4a07      	ldr	r2, [pc, #28]	; (9f5c <system_clock_source_enable+0xa0>)
    9f3e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    9f40:	2000      	movs	r0, #0
    9f42:	e008      	b.n	9f56 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    9f44:	4905      	ldr	r1, [pc, #20]	; (9f5c <system_clock_source_enable+0xa0>)
    9f46:	2244      	movs	r2, #68	; 0x44
    9f48:	5c8b      	ldrb	r3, [r1, r2]
    9f4a:	2002      	movs	r0, #2
    9f4c:	4303      	orrs	r3, r0
    9f4e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    9f50:	2000      	movs	r0, #0
		break;
    9f52:	e000      	b.n	9f56 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    9f54:	2000      	movs	r0, #0
}
    9f56:	4770      	bx	lr
    9f58:	00012614 	.word	0x00012614
    9f5c:	40000800 	.word	0x40000800
    9f60:	20000278 	.word	0x20000278

00009f64 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    9f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f66:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    9f68:	22c2      	movs	r2, #194	; 0xc2
    9f6a:	00d2      	lsls	r2, r2, #3
    9f6c:	4b47      	ldr	r3, [pc, #284]	; (a08c <system_clock_init+0x128>)
    9f6e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    9f70:	4947      	ldr	r1, [pc, #284]	; (a090 <system_clock_init+0x12c>)
    9f72:	684b      	ldr	r3, [r1, #4]
    9f74:	221e      	movs	r2, #30
    9f76:	4393      	bics	r3, r2
    9f78:	3a1c      	subs	r2, #28
    9f7a:	4313      	orrs	r3, r2
    9f7c:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    9f7e:	ab01      	add	r3, sp, #4
    9f80:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9f82:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    9f84:	4d43      	ldr	r5, [pc, #268]	; (a094 <system_clock_init+0x130>)
    9f86:	b2e0      	uxtb	r0, r4
    9f88:	a901      	add	r1, sp, #4
    9f8a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9f8c:	3401      	adds	r4, #1
    9f8e:	2c25      	cmp	r4, #37	; 0x25
    9f90:	d1f9      	bne.n	9f86 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    9f92:	a80a      	add	r0, sp, #40	; 0x28
    9f94:	2300      	movs	r3, #0
    9f96:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    9f98:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    9f9a:	2280      	movs	r2, #128	; 0x80
    9f9c:	0212      	lsls	r2, r2, #8
    9f9e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    9fa0:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    9fa2:	2201      	movs	r2, #1
    9fa4:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    9fa6:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    9fa8:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    9faa:	3202      	adds	r2, #2
    9fac:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    9fae:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    9fb0:	4b39      	ldr	r3, [pc, #228]	; (a098 <system_clock_init+0x134>)
    9fb2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    9fb4:	2005      	movs	r0, #5
    9fb6:	4b39      	ldr	r3, [pc, #228]	; (a09c <system_clock_init+0x138>)
    9fb8:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    9fba:	4934      	ldr	r1, [pc, #208]	; (a08c <system_clock_init+0x128>)
    9fbc:	2202      	movs	r2, #2
    9fbe:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    9fc0:	421a      	tst	r2, r3
    9fc2:	d0fc      	beq.n	9fbe <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    9fc4:	4a31      	ldr	r2, [pc, #196]	; (a08c <system_clock_init+0x128>)
    9fc6:	8a93      	ldrh	r3, [r2, #20]
    9fc8:	2180      	movs	r1, #128	; 0x80
    9fca:	430b      	orrs	r3, r1
    9fcc:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    9fce:	ab05      	add	r3, sp, #20
    9fd0:	2100      	movs	r1, #0
    9fd2:	2200      	movs	r2, #0
    9fd4:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    9fd6:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    9fd8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    9fda:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    9fdc:	313f      	adds	r1, #63	; 0x3f
    9fde:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    9fe0:	393b      	subs	r1, #59	; 0x3b
    9fe2:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    9fe4:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    9fe6:	4b2e      	ldr	r3, [pc, #184]	; (a0a0 <system_clock_init+0x13c>)
    9fe8:	681b      	ldr	r3, [r3, #0]
    9fea:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    9fec:	2b3f      	cmp	r3, #63	; 0x3f
    9fee:	d04a      	beq.n	a086 <system_clock_init+0x122>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    9ff0:	a805      	add	r0, sp, #20
    9ff2:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    9ff4:	4b2b      	ldr	r3, [pc, #172]	; (a0a4 <system_clock_init+0x140>)
    9ff6:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    9ff8:	2307      	movs	r3, #7
    9ffa:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    9ffc:	3338      	adds	r3, #56	; 0x38
    9ffe:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    a000:	4b29      	ldr	r3, [pc, #164]	; (a0a8 <system_clock_init+0x144>)
    a002:	4798      	blx	r3
	config->run_in_standby  = false;
    a004:	a804      	add	r0, sp, #16
    a006:	2500      	movs	r5, #0
    a008:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    a00a:	2601      	movs	r6, #1
    a00c:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    a00e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    a010:	4b26      	ldr	r3, [pc, #152]	; (a0ac <system_clock_init+0x148>)
    a012:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    a014:	2006      	movs	r0, #6
    a016:	4f21      	ldr	r7, [pc, #132]	; (a09c <system_clock_init+0x138>)
    a018:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    a01a:	4b25      	ldr	r3, [pc, #148]	; (a0b0 <system_clock_init+0x14c>)
    a01c:	4798      	blx	r3
	config->division_factor    = 1;
    a01e:	ac01      	add	r4, sp, #4
    a020:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    a022:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    a024:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    a026:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    a028:	2305      	movs	r3, #5
    a02a:	7023      	strb	r3, [r4, #0]
    a02c:	0021      	movs	r1, r4
    a02e:	2001      	movs	r0, #1
    a030:	4b20      	ldr	r3, [pc, #128]	; (a0b4 <system_clock_init+0x150>)
    a032:	4798      	blx	r3
    a034:	2001      	movs	r0, #1
    a036:	4b20      	ldr	r3, [pc, #128]	; (a0b8 <system_clock_init+0x154>)
    a038:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    a03a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    a03c:	0021      	movs	r1, r4
    a03e:	2000      	movs	r0, #0
    a040:	4b14      	ldr	r3, [pc, #80]	; (a094 <system_clock_init+0x130>)
    a042:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    a044:	2000      	movs	r0, #0
    a046:	4b1d      	ldr	r3, [pc, #116]	; (a0bc <system_clock_init+0x158>)
    a048:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    a04a:	2007      	movs	r0, #7
    a04c:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    a04e:	490f      	ldr	r1, [pc, #60]	; (a08c <system_clock_init+0x128>)
    a050:	22d0      	movs	r2, #208	; 0xd0
    a052:	68cb      	ldr	r3, [r1, #12]
    a054:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    a056:	2bd0      	cmp	r3, #208	; 0xd0
    a058:	d1fb      	bne.n	a052 <system_clock_init+0xee>
	PM->CPUSEL.reg = (uint32_t)divider;
    a05a:	4a19      	ldr	r2, [pc, #100]	; (a0c0 <system_clock_init+0x15c>)
    a05c:	2300      	movs	r3, #0
    a05e:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    a060:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    a062:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    a064:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    a066:	a901      	add	r1, sp, #4
    a068:	2201      	movs	r2, #1
    a06a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    a06c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    a06e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    a070:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    a072:	3307      	adds	r3, #7
    a074:	700b      	strb	r3, [r1, #0]
    a076:	2000      	movs	r0, #0
    a078:	4b0e      	ldr	r3, [pc, #56]	; (a0b4 <system_clock_init+0x150>)
    a07a:	4798      	blx	r3
    a07c:	2000      	movs	r0, #0
    a07e:	4b0e      	ldr	r3, [pc, #56]	; (a0b8 <system_clock_init+0x154>)
    a080:	4798      	blx	r3
#endif
}
    a082:	b00f      	add	sp, #60	; 0x3c
    a084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    a086:	3b20      	subs	r3, #32
    a088:	e7b2      	b.n	9ff0 <system_clock_init+0x8c>
    a08a:	46c0      	nop			; (mov r8, r8)
    a08c:	40000800 	.word	0x40000800
    a090:	41004000 	.word	0x41004000
    a094:	0000a2fd 	.word	0x0000a2fd
    a098:	00009d85 	.word	0x00009d85
    a09c:	00009ebd 	.word	0x00009ebd
    a0a0:	00806024 	.word	0x00806024
    a0a4:	000005b9 	.word	0x000005b9
    a0a8:	00009e3d 	.word	0x00009e3d
    a0ac:	00009d49 	.word	0x00009d49
    a0b0:	0000a0c5 	.word	0x0000a0c5
    a0b4:	0000a0e9 	.word	0x0000a0e9
    a0b8:	0000a1a1 	.word	0x0000a1a1
    a0bc:	0000a271 	.word	0x0000a271
    a0c0:	40000400 	.word	0x40000400

0000a0c4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    a0c4:	4a06      	ldr	r2, [pc, #24]	; (a0e0 <system_gclk_init+0x1c>)
    a0c6:	6993      	ldr	r3, [r2, #24]
    a0c8:	2108      	movs	r1, #8
    a0ca:	430b      	orrs	r3, r1
    a0cc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    a0ce:	2201      	movs	r2, #1
    a0d0:	4b04      	ldr	r3, [pc, #16]	; (a0e4 <system_gclk_init+0x20>)
    a0d2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    a0d4:	0019      	movs	r1, r3
    a0d6:	780b      	ldrb	r3, [r1, #0]
    a0d8:	4213      	tst	r3, r2
    a0da:	d1fc      	bne.n	a0d6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    a0dc:	4770      	bx	lr
    a0de:	46c0      	nop			; (mov r8, r8)
    a0e0:	40000400 	.word	0x40000400
    a0e4:	40000c00 	.word	0x40000c00

0000a0e8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    a0e8:	b570      	push	{r4, r5, r6, lr}
    a0ea:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    a0ec:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    a0ee:	780d      	ldrb	r5, [r1, #0]
    a0f0:	022d      	lsls	r5, r5, #8
    a0f2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    a0f4:	784b      	ldrb	r3, [r1, #1]
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d002      	beq.n	a100 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    a0fa:	2380      	movs	r3, #128	; 0x80
    a0fc:	02db      	lsls	r3, r3, #11
    a0fe:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    a100:	7a4b      	ldrb	r3, [r1, #9]
    a102:	2b00      	cmp	r3, #0
    a104:	d002      	beq.n	a10c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    a106:	2380      	movs	r3, #128	; 0x80
    a108:	031b      	lsls	r3, r3, #12
    a10a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    a10c:	6848      	ldr	r0, [r1, #4]
    a10e:	2801      	cmp	r0, #1
    a110:	d910      	bls.n	a134 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    a112:	1e43      	subs	r3, r0, #1
    a114:	4218      	tst	r0, r3
    a116:	d134      	bne.n	a182 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    a118:	2802      	cmp	r0, #2
    a11a:	d930      	bls.n	a17e <system_gclk_gen_set_config+0x96>
    a11c:	2302      	movs	r3, #2
    a11e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    a120:	3201      	adds	r2, #1
						mask <<= 1) {
    a122:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    a124:	4298      	cmp	r0, r3
    a126:	d8fb      	bhi.n	a120 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    a128:	0212      	lsls	r2, r2, #8
    a12a:	4332      	orrs	r2, r6
    a12c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    a12e:	2380      	movs	r3, #128	; 0x80
    a130:	035b      	lsls	r3, r3, #13
    a132:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    a134:	7a0b      	ldrb	r3, [r1, #8]
    a136:	2b00      	cmp	r3, #0
    a138:	d002      	beq.n	a140 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    a13a:	2380      	movs	r3, #128	; 0x80
    a13c:	039b      	lsls	r3, r3, #14
    a13e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a140:	4a13      	ldr	r2, [pc, #76]	; (a190 <system_gclk_gen_set_config+0xa8>)
    a142:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    a144:	b25b      	sxtb	r3, r3
    a146:	2b00      	cmp	r3, #0
    a148:	dbfb      	blt.n	a142 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    a14a:	4b12      	ldr	r3, [pc, #72]	; (a194 <system_gclk_gen_set_config+0xac>)
    a14c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    a14e:	4b12      	ldr	r3, [pc, #72]	; (a198 <system_gclk_gen_set_config+0xb0>)
    a150:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a152:	4a0f      	ldr	r2, [pc, #60]	; (a190 <system_gclk_gen_set_config+0xa8>)
    a154:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    a156:	b25b      	sxtb	r3, r3
    a158:	2b00      	cmp	r3, #0
    a15a:	dbfb      	blt.n	a154 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    a15c:	4b0c      	ldr	r3, [pc, #48]	; (a190 <system_gclk_gen_set_config+0xa8>)
    a15e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a160:	001a      	movs	r2, r3
    a162:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    a164:	b25b      	sxtb	r3, r3
    a166:	2b00      	cmp	r3, #0
    a168:	dbfb      	blt.n	a162 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    a16a:	4a09      	ldr	r2, [pc, #36]	; (a190 <system_gclk_gen_set_config+0xa8>)
    a16c:	6853      	ldr	r3, [r2, #4]
    a16e:	2180      	movs	r1, #128	; 0x80
    a170:	0249      	lsls	r1, r1, #9
    a172:	400b      	ands	r3, r1
    a174:	431d      	orrs	r5, r3
    a176:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    a178:	4b08      	ldr	r3, [pc, #32]	; (a19c <system_gclk_gen_set_config+0xb4>)
    a17a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    a17c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    a17e:	2200      	movs	r2, #0
    a180:	e7d2      	b.n	a128 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    a182:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    a184:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    a186:	2380      	movs	r3, #128	; 0x80
    a188:	029b      	lsls	r3, r3, #10
    a18a:	431d      	orrs	r5, r3
    a18c:	e7d2      	b.n	a134 <system_gclk_gen_set_config+0x4c>
    a18e:	46c0      	nop			; (mov r8, r8)
    a190:	40000c00 	.word	0x40000c00
    a194:	00009c49 	.word	0x00009c49
    a198:	40000c08 	.word	0x40000c08
    a19c:	00009c89 	.word	0x00009c89

0000a1a0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    a1a0:	b510      	push	{r4, lr}
    a1a2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a1a4:	4a0b      	ldr	r2, [pc, #44]	; (a1d4 <system_gclk_gen_enable+0x34>)
    a1a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    a1a8:	b25b      	sxtb	r3, r3
    a1aa:	2b00      	cmp	r3, #0
    a1ac:	dbfb      	blt.n	a1a6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    a1ae:	4b0a      	ldr	r3, [pc, #40]	; (a1d8 <system_gclk_gen_enable+0x38>)
    a1b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a1b2:	4b0a      	ldr	r3, [pc, #40]	; (a1dc <system_gclk_gen_enable+0x3c>)
    a1b4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a1b6:	4a07      	ldr	r2, [pc, #28]	; (a1d4 <system_gclk_gen_enable+0x34>)
    a1b8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    a1ba:	b25b      	sxtb	r3, r3
    a1bc:	2b00      	cmp	r3, #0
    a1be:	dbfb      	blt.n	a1b8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    a1c0:	4a04      	ldr	r2, [pc, #16]	; (a1d4 <system_gclk_gen_enable+0x34>)
    a1c2:	6851      	ldr	r1, [r2, #4]
    a1c4:	2380      	movs	r3, #128	; 0x80
    a1c6:	025b      	lsls	r3, r3, #9
    a1c8:	430b      	orrs	r3, r1
    a1ca:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    a1cc:	4b04      	ldr	r3, [pc, #16]	; (a1e0 <system_gclk_gen_enable+0x40>)
    a1ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    a1d0:	bd10      	pop	{r4, pc}
    a1d2:	46c0      	nop			; (mov r8, r8)
    a1d4:	40000c00 	.word	0x40000c00
    a1d8:	00009c49 	.word	0x00009c49
    a1dc:	40000c04 	.word	0x40000c04
    a1e0:	00009c89 	.word	0x00009c89

0000a1e4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    a1e4:	b570      	push	{r4, r5, r6, lr}
    a1e6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a1e8:	4a1a      	ldr	r2, [pc, #104]	; (a254 <system_gclk_gen_get_hz+0x70>)
    a1ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    a1ec:	b25b      	sxtb	r3, r3
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	dbfb      	blt.n	a1ea <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    a1f2:	4b19      	ldr	r3, [pc, #100]	; (a258 <system_gclk_gen_get_hz+0x74>)
    a1f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a1f6:	4b19      	ldr	r3, [pc, #100]	; (a25c <system_gclk_gen_get_hz+0x78>)
    a1f8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a1fa:	4a16      	ldr	r2, [pc, #88]	; (a254 <system_gclk_gen_get_hz+0x70>)
    a1fc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    a1fe:	b25b      	sxtb	r3, r3
    a200:	2b00      	cmp	r3, #0
    a202:	dbfb      	blt.n	a1fc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    a204:	4e13      	ldr	r6, [pc, #76]	; (a254 <system_gclk_gen_get_hz+0x70>)
    a206:	6870      	ldr	r0, [r6, #4]
    a208:	04c0      	lsls	r0, r0, #19
    a20a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    a20c:	4b14      	ldr	r3, [pc, #80]	; (a260 <system_gclk_gen_get_hz+0x7c>)
    a20e:	4798      	blx	r3
    a210:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a212:	4b12      	ldr	r3, [pc, #72]	; (a25c <system_gclk_gen_get_hz+0x78>)
    a214:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    a216:	6876      	ldr	r6, [r6, #4]
    a218:	02f6      	lsls	r6, r6, #11
    a21a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    a21c:	4b11      	ldr	r3, [pc, #68]	; (a264 <system_gclk_gen_get_hz+0x80>)
    a21e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a220:	4a0c      	ldr	r2, [pc, #48]	; (a254 <system_gclk_gen_get_hz+0x70>)
    a222:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    a224:	b25b      	sxtb	r3, r3
    a226:	2b00      	cmp	r3, #0
    a228:	dbfb      	blt.n	a222 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    a22a:	4b0a      	ldr	r3, [pc, #40]	; (a254 <system_gclk_gen_get_hz+0x70>)
    a22c:	689c      	ldr	r4, [r3, #8]
    a22e:	0224      	lsls	r4, r4, #8
    a230:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    a232:	4b0d      	ldr	r3, [pc, #52]	; (a268 <system_gclk_gen_get_hz+0x84>)
    a234:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    a236:	2e00      	cmp	r6, #0
    a238:	d107      	bne.n	a24a <system_gclk_gen_get_hz+0x66>
    a23a:	2c01      	cmp	r4, #1
    a23c:	d907      	bls.n	a24e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    a23e:	0021      	movs	r1, r4
    a240:	0028      	movs	r0, r5
    a242:	4b0a      	ldr	r3, [pc, #40]	; (a26c <system_gclk_gen_get_hz+0x88>)
    a244:	4798      	blx	r3
    a246:	0005      	movs	r5, r0
    a248:	e001      	b.n	a24e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    a24a:	3401      	adds	r4, #1
    a24c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    a24e:	0028      	movs	r0, r5
    a250:	bd70      	pop	{r4, r5, r6, pc}
    a252:	46c0      	nop			; (mov r8, r8)
    a254:	40000c00 	.word	0x40000c00
    a258:	00009c49 	.word	0x00009c49
    a25c:	40000c04 	.word	0x40000c04
    a260:	00009cb9 	.word	0x00009cb9
    a264:	40000c08 	.word	0x40000c08
    a268:	00009c89 	.word	0x00009c89
    a26c:	0000d919 	.word	0x0000d919

0000a270 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    a270:	b510      	push	{r4, lr}
    a272:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    a274:	4b06      	ldr	r3, [pc, #24]	; (a290 <system_gclk_chan_enable+0x20>)
    a276:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a278:	4b06      	ldr	r3, [pc, #24]	; (a294 <system_gclk_chan_enable+0x24>)
    a27a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    a27c:	4a06      	ldr	r2, [pc, #24]	; (a298 <system_gclk_chan_enable+0x28>)
    a27e:	8853      	ldrh	r3, [r2, #2]
    a280:	2180      	movs	r1, #128	; 0x80
    a282:	01c9      	lsls	r1, r1, #7
    a284:	430b      	orrs	r3, r1
    a286:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    a288:	4b04      	ldr	r3, [pc, #16]	; (a29c <system_gclk_chan_enable+0x2c>)
    a28a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    a28c:	bd10      	pop	{r4, pc}
    a28e:	46c0      	nop			; (mov r8, r8)
    a290:	00009c49 	.word	0x00009c49
    a294:	40000c02 	.word	0x40000c02
    a298:	40000c00 	.word	0x40000c00
    a29c:	00009c89 	.word	0x00009c89

0000a2a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    a2a0:	b510      	push	{r4, lr}
    a2a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    a2a4:	4b0f      	ldr	r3, [pc, #60]	; (a2e4 <system_gclk_chan_disable+0x44>)
    a2a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a2a8:	4b0f      	ldr	r3, [pc, #60]	; (a2e8 <system_gclk_chan_disable+0x48>)
    a2aa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    a2ac:	4a0f      	ldr	r2, [pc, #60]	; (a2ec <system_gclk_chan_disable+0x4c>)
    a2ae:	8853      	ldrh	r3, [r2, #2]
    a2b0:	051b      	lsls	r3, r3, #20
    a2b2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    a2b4:	8853      	ldrh	r3, [r2, #2]
    a2b6:	490e      	ldr	r1, [pc, #56]	; (a2f0 <system_gclk_chan_disable+0x50>)
    a2b8:	400b      	ands	r3, r1
    a2ba:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    a2bc:	8853      	ldrh	r3, [r2, #2]
    a2be:	490d      	ldr	r1, [pc, #52]	; (a2f4 <system_gclk_chan_disable+0x54>)
    a2c0:	400b      	ands	r3, r1
    a2c2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    a2c4:	0011      	movs	r1, r2
    a2c6:	2280      	movs	r2, #128	; 0x80
    a2c8:	01d2      	lsls	r2, r2, #7
    a2ca:	884b      	ldrh	r3, [r1, #2]
    a2cc:	4213      	tst	r3, r2
    a2ce:	d1fc      	bne.n	a2ca <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    a2d0:	4906      	ldr	r1, [pc, #24]	; (a2ec <system_gclk_chan_disable+0x4c>)
    a2d2:	884a      	ldrh	r2, [r1, #2]
    a2d4:	0203      	lsls	r3, r0, #8
    a2d6:	4806      	ldr	r0, [pc, #24]	; (a2f0 <system_gclk_chan_disable+0x50>)
    a2d8:	4002      	ands	r2, r0
    a2da:	4313      	orrs	r3, r2
    a2dc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    a2de:	4b06      	ldr	r3, [pc, #24]	; (a2f8 <system_gclk_chan_disable+0x58>)
    a2e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    a2e2:	bd10      	pop	{r4, pc}
    a2e4:	00009c49 	.word	0x00009c49
    a2e8:	40000c02 	.word	0x40000c02
    a2ec:	40000c00 	.word	0x40000c00
    a2f0:	fffff0ff 	.word	0xfffff0ff
    a2f4:	ffffbfff 	.word	0xffffbfff
    a2f8:	00009c89 	.word	0x00009c89

0000a2fc <system_gclk_chan_set_config>:
{
    a2fc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    a2fe:	780c      	ldrb	r4, [r1, #0]
    a300:	0224      	lsls	r4, r4, #8
    a302:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    a304:	4b02      	ldr	r3, [pc, #8]	; (a310 <system_gclk_chan_set_config+0x14>)
    a306:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    a308:	b2a4      	uxth	r4, r4
    a30a:	4b02      	ldr	r3, [pc, #8]	; (a314 <system_gclk_chan_set_config+0x18>)
    a30c:	805c      	strh	r4, [r3, #2]
}
    a30e:	bd10      	pop	{r4, pc}
    a310:	0000a2a1 	.word	0x0000a2a1
    a314:	40000c00 	.word	0x40000c00

0000a318 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    a318:	b510      	push	{r4, lr}
    a31a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    a31c:	4b06      	ldr	r3, [pc, #24]	; (a338 <system_gclk_chan_get_hz+0x20>)
    a31e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a320:	4b06      	ldr	r3, [pc, #24]	; (a33c <system_gclk_chan_get_hz+0x24>)
    a322:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    a324:	4b06      	ldr	r3, [pc, #24]	; (a340 <system_gclk_chan_get_hz+0x28>)
    a326:	885c      	ldrh	r4, [r3, #2]
    a328:	0524      	lsls	r4, r4, #20
    a32a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    a32c:	4b05      	ldr	r3, [pc, #20]	; (a344 <system_gclk_chan_get_hz+0x2c>)
    a32e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    a330:	0020      	movs	r0, r4
    a332:	4b05      	ldr	r3, [pc, #20]	; (a348 <system_gclk_chan_get_hz+0x30>)
    a334:	4798      	blx	r3
}
    a336:	bd10      	pop	{r4, pc}
    a338:	00009c49 	.word	0x00009c49
    a33c:	40000c02 	.word	0x40000c02
    a340:	40000c00 	.word	0x40000c00
    a344:	00009c89 	.word	0x00009c89
    a348:	0000a1e5 	.word	0x0000a1e5

0000a34c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    a34c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    a34e:	78d3      	ldrb	r3, [r2, #3]
    a350:	2b00      	cmp	r3, #0
    a352:	d135      	bne.n	a3c0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    a354:	7813      	ldrb	r3, [r2, #0]
    a356:	2b80      	cmp	r3, #128	; 0x80
    a358:	d029      	beq.n	a3ae <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    a35a:	061b      	lsls	r3, r3, #24
    a35c:	2480      	movs	r4, #128	; 0x80
    a35e:	0264      	lsls	r4, r4, #9
    a360:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    a362:	7854      	ldrb	r4, [r2, #1]
    a364:	2502      	movs	r5, #2
    a366:	43ac      	bics	r4, r5
    a368:	d106      	bne.n	a378 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    a36a:	7894      	ldrb	r4, [r2, #2]
    a36c:	2c00      	cmp	r4, #0
    a36e:	d120      	bne.n	a3b2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    a370:	2480      	movs	r4, #128	; 0x80
    a372:	02a4      	lsls	r4, r4, #10
    a374:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    a376:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a378:	7854      	ldrb	r4, [r2, #1]
    a37a:	3c01      	subs	r4, #1
    a37c:	2c01      	cmp	r4, #1
    a37e:	d91c      	bls.n	a3ba <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    a380:	040d      	lsls	r5, r1, #16
    a382:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    a384:	24a0      	movs	r4, #160	; 0xa0
    a386:	05e4      	lsls	r4, r4, #23
    a388:	432c      	orrs	r4, r5
    a38a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a38c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    a38e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    a390:	24d0      	movs	r4, #208	; 0xd0
    a392:	0624      	lsls	r4, r4, #24
    a394:	432c      	orrs	r4, r5
    a396:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a398:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    a39a:	78d4      	ldrb	r4, [r2, #3]
    a39c:	2c00      	cmp	r4, #0
    a39e:	d122      	bne.n	a3e6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    a3a0:	035b      	lsls	r3, r3, #13
    a3a2:	d51c      	bpl.n	a3de <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    a3a4:	7893      	ldrb	r3, [r2, #2]
    a3a6:	2b01      	cmp	r3, #1
    a3a8:	d01e      	beq.n	a3e8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    a3aa:	6141      	str	r1, [r0, #20]
    a3ac:	e017      	b.n	a3de <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    a3ae:	2300      	movs	r3, #0
    a3b0:	e7d7      	b.n	a362 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    a3b2:	24c0      	movs	r4, #192	; 0xc0
    a3b4:	02e4      	lsls	r4, r4, #11
    a3b6:	4323      	orrs	r3, r4
    a3b8:	e7dd      	b.n	a376 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    a3ba:	4c0d      	ldr	r4, [pc, #52]	; (a3f0 <_system_pinmux_config+0xa4>)
    a3bc:	4023      	ands	r3, r4
    a3be:	e7df      	b.n	a380 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    a3c0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    a3c2:	040c      	lsls	r4, r1, #16
    a3c4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    a3c6:	23a0      	movs	r3, #160	; 0xa0
    a3c8:	05db      	lsls	r3, r3, #23
    a3ca:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a3cc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    a3ce:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    a3d0:	23d0      	movs	r3, #208	; 0xd0
    a3d2:	061b      	lsls	r3, r3, #24
    a3d4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a3d6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    a3d8:	78d3      	ldrb	r3, [r2, #3]
    a3da:	2b00      	cmp	r3, #0
    a3dc:	d103      	bne.n	a3e6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a3de:	7853      	ldrb	r3, [r2, #1]
    a3e0:	3b01      	subs	r3, #1
    a3e2:	2b01      	cmp	r3, #1
    a3e4:	d902      	bls.n	a3ec <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    a3e6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    a3e8:	6181      	str	r1, [r0, #24]
    a3ea:	e7f8      	b.n	a3de <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    a3ec:	6081      	str	r1, [r0, #8]
}
    a3ee:	e7fa      	b.n	a3e6 <_system_pinmux_config+0x9a>
    a3f0:	fffbffff 	.word	0xfffbffff

0000a3f4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    a3f4:	b510      	push	{r4, lr}
    a3f6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    a3f8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    a3fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    a3fc:	2900      	cmp	r1, #0
    a3fe:	d104      	bne.n	a40a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    a400:	0943      	lsrs	r3, r0, #5
    a402:	01db      	lsls	r3, r3, #7
    a404:	4905      	ldr	r1, [pc, #20]	; (a41c <system_pinmux_pin_set_config+0x28>)
    a406:	468c      	mov	ip, r1
    a408:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    a40a:	241f      	movs	r4, #31
    a40c:	4020      	ands	r0, r4
    a40e:	2101      	movs	r1, #1
    a410:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    a412:	0018      	movs	r0, r3
    a414:	4b02      	ldr	r3, [pc, #8]	; (a420 <system_pinmux_pin_set_config+0x2c>)
    a416:	4798      	blx	r3
}
    a418:	bd10      	pop	{r4, pc}
    a41a:	46c0      	nop			; (mov r8, r8)
    a41c:	41004400 	.word	0x41004400
    a420:	0000a34d 	.word	0x0000a34d

0000a424 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    a424:	4770      	bx	lr
	...

0000a428 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    a428:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    a42a:	4b05      	ldr	r3, [pc, #20]	; (a440 <system_init+0x18>)
    a42c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    a42e:	4b05      	ldr	r3, [pc, #20]	; (a444 <system_init+0x1c>)
    a430:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    a432:	4b05      	ldr	r3, [pc, #20]	; (a448 <system_init+0x20>)
    a434:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    a436:	4b05      	ldr	r3, [pc, #20]	; (a44c <system_init+0x24>)
    a438:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    a43a:	4b05      	ldr	r3, [pc, #20]	; (a450 <system_init+0x28>)
    a43c:	4798      	blx	r3
}
    a43e:	bd10      	pop	{r4, pc}
    a440:	00009f65 	.word	0x00009f65
    a444:	00009c45 	.word	0x00009c45
    a448:	0000a425 	.word	0x0000a425
    a44c:	00002009 	.word	0x00002009
    a450:	0000a425 	.word	0x0000a425

0000a454 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    a454:	e7fe      	b.n	a454 <Dummy_Handler>
	...

0000a458 <Reset_Handler>:
{
    a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    a45a:	4a2a      	ldr	r2, [pc, #168]	; (a504 <Reset_Handler+0xac>)
    a45c:	4b2a      	ldr	r3, [pc, #168]	; (a508 <Reset_Handler+0xb0>)
    a45e:	429a      	cmp	r2, r3
    a460:	d011      	beq.n	a486 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    a462:	001a      	movs	r2, r3
    a464:	4b29      	ldr	r3, [pc, #164]	; (a50c <Reset_Handler+0xb4>)
    a466:	429a      	cmp	r2, r3
    a468:	d20d      	bcs.n	a486 <Reset_Handler+0x2e>
    a46a:	4a29      	ldr	r2, [pc, #164]	; (a510 <Reset_Handler+0xb8>)
    a46c:	3303      	adds	r3, #3
    a46e:	1a9b      	subs	r3, r3, r2
    a470:	089b      	lsrs	r3, r3, #2
    a472:	3301      	adds	r3, #1
    a474:	009b      	lsls	r3, r3, #2
    a476:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    a478:	4823      	ldr	r0, [pc, #140]	; (a508 <Reset_Handler+0xb0>)
    a47a:	4922      	ldr	r1, [pc, #136]	; (a504 <Reset_Handler+0xac>)
    a47c:	588c      	ldr	r4, [r1, r2]
    a47e:	5084      	str	r4, [r0, r2]
    a480:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    a482:	429a      	cmp	r2, r3
    a484:	d1fa      	bne.n	a47c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    a486:	4a23      	ldr	r2, [pc, #140]	; (a514 <Reset_Handler+0xbc>)
    a488:	4b23      	ldr	r3, [pc, #140]	; (a518 <Reset_Handler+0xc0>)
    a48a:	429a      	cmp	r2, r3
    a48c:	d20a      	bcs.n	a4a4 <Reset_Handler+0x4c>
    a48e:	43d3      	mvns	r3, r2
    a490:	4921      	ldr	r1, [pc, #132]	; (a518 <Reset_Handler+0xc0>)
    a492:	185b      	adds	r3, r3, r1
    a494:	2103      	movs	r1, #3
    a496:	438b      	bics	r3, r1
    a498:	3304      	adds	r3, #4
    a49a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    a49c:	2100      	movs	r1, #0
    a49e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    a4a0:	4293      	cmp	r3, r2
    a4a2:	d1fc      	bne.n	a49e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    a4a4:	4a1d      	ldr	r2, [pc, #116]	; (a51c <Reset_Handler+0xc4>)
    a4a6:	21ff      	movs	r1, #255	; 0xff
    a4a8:	4b1d      	ldr	r3, [pc, #116]	; (a520 <Reset_Handler+0xc8>)
    a4aa:	438b      	bics	r3, r1
    a4ac:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    a4ae:	39fd      	subs	r1, #253	; 0xfd
    a4b0:	2390      	movs	r3, #144	; 0x90
    a4b2:	005b      	lsls	r3, r3, #1
    a4b4:	4a1b      	ldr	r2, [pc, #108]	; (a524 <Reset_Handler+0xcc>)
    a4b6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a4b8:	4a1b      	ldr	r2, [pc, #108]	; (a528 <Reset_Handler+0xd0>)
    a4ba:	78d3      	ldrb	r3, [r2, #3]
    a4bc:	2503      	movs	r5, #3
    a4be:	43ab      	bics	r3, r5
    a4c0:	2402      	movs	r4, #2
    a4c2:	4323      	orrs	r3, r4
    a4c4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a4c6:	78d3      	ldrb	r3, [r2, #3]
    a4c8:	270c      	movs	r7, #12
    a4ca:	43bb      	bics	r3, r7
    a4cc:	2608      	movs	r6, #8
    a4ce:	4333      	orrs	r3, r6
    a4d0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    a4d2:	4b16      	ldr	r3, [pc, #88]	; (a52c <Reset_Handler+0xd4>)
    a4d4:	7b98      	ldrb	r0, [r3, #14]
    a4d6:	2230      	movs	r2, #48	; 0x30
    a4d8:	4390      	bics	r0, r2
    a4da:	2220      	movs	r2, #32
    a4dc:	4310      	orrs	r0, r2
    a4de:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    a4e0:	7b99      	ldrb	r1, [r3, #14]
    a4e2:	43b9      	bics	r1, r7
    a4e4:	4331      	orrs	r1, r6
    a4e6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    a4e8:	7b9a      	ldrb	r2, [r3, #14]
    a4ea:	43aa      	bics	r2, r5
    a4ec:	4322      	orrs	r2, r4
    a4ee:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    a4f0:	4a0f      	ldr	r2, [pc, #60]	; (a530 <Reset_Handler+0xd8>)
    a4f2:	6853      	ldr	r3, [r2, #4]
    a4f4:	2180      	movs	r1, #128	; 0x80
    a4f6:	430b      	orrs	r3, r1
    a4f8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    a4fa:	4b0e      	ldr	r3, [pc, #56]	; (a534 <Reset_Handler+0xdc>)
    a4fc:	4798      	blx	r3
        main();
    a4fe:	4b0e      	ldr	r3, [pc, #56]	; (a538 <Reset_Handler+0xe0>)
    a500:	4798      	blx	r3
    a502:	e7fe      	b.n	a502 <Reset_Handler+0xaa>
    a504:	00012aa0 	.word	0x00012aa0
    a508:	20000000 	.word	0x20000000
    a50c:	200001e0 	.word	0x200001e0
    a510:	20000004 	.word	0x20000004
    a514:	200001e0 	.word	0x200001e0
    a518:	200007fc 	.word	0x200007fc
    a51c:	e000ed00 	.word	0xe000ed00
    a520:	00000000 	.word	0x00000000
    a524:	41007000 	.word	0x41007000
    a528:	41005000 	.word	0x41005000
    a52c:	41004800 	.word	0x41004800
    a530:	41004000 	.word	0x41004000
    a534:	0000a809 	.word	0x0000a809
    a538:	0000a6fd 	.word	0x0000a6fd

0000a53c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    a53c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    a53e:	4a06      	ldr	r2, [pc, #24]	; (a558 <_sbrk+0x1c>)
    a540:	6812      	ldr	r2, [r2, #0]
    a542:	2a00      	cmp	r2, #0
    a544:	d004      	beq.n	a550 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    a546:	4a04      	ldr	r2, [pc, #16]	; (a558 <_sbrk+0x1c>)
    a548:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    a54a:	18c3      	adds	r3, r0, r3
    a54c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    a54e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    a550:	4902      	ldr	r1, [pc, #8]	; (a55c <_sbrk+0x20>)
    a552:	4a01      	ldr	r2, [pc, #4]	; (a558 <_sbrk+0x1c>)
    a554:	6011      	str	r1, [r2, #0]
    a556:	e7f6      	b.n	a546 <_sbrk+0xa>
    a558:	20000290 	.word	0x20000290
    a55c:	20002800 	.word	0x20002800

0000a560 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    a560:	2001      	movs	r0, #1
    a562:	4240      	negs	r0, r0
    a564:	4770      	bx	lr

0000a566 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    a566:	2380      	movs	r3, #128	; 0x80
    a568:	019b      	lsls	r3, r3, #6
    a56a:	604b      	str	r3, [r1, #4]

	return 0;
}
    a56c:	2000      	movs	r0, #0
    a56e:	4770      	bx	lr

0000a570 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    a570:	2001      	movs	r0, #1
    a572:	4770      	bx	lr

0000a574 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    a574:	2000      	movs	r0, #0
    a576:	4770      	bx	lr

0000a578 <processUserInput>:
 * stores user input in rx buffer read from serial
 *
 * @return  true if successful, false if error
 */
bool processUserInput(void)
{
    a578:	b500      	push	{lr}
    a57a:	b083      	sub	sp, #12
	char singleCharInput;
	volatile enum status_code uartReadCode = usart_read_buffer_wait(&usart_instance, &singleCharInput, 1);
    a57c:	2201      	movs	r2, #1
    a57e:	466b      	mov	r3, sp
    a580:	1dd9      	adds	r1, r3, #7
    a582:	482f      	ldr	r0, [pc, #188]	; (a640 <processUserInput+0xc8>)
    a584:	4b2f      	ldr	r3, [pc, #188]	; (a644 <processUserInput+0xcc>)
    a586:	4798      	blx	r3
    a588:	466b      	mov	r3, sp
    a58a:	7198      	strb	r0, [r3, #6]
    a58c:	3306      	adds	r3, #6

	if (STATUS_OK != uartReadCode) {
    a58e:	781b      	ldrb	r3, [r3, #0]
		return false;
    a590:	2000      	movs	r0, #0
	if (STATUS_OK != uartReadCode) {
    a592:	2b00      	cmp	r3, #0
    a594:	d121      	bne.n	a5da <processUserInput+0x62>
	}
	if((singleCharInput != BS && !numberCharsRead) || numberCharsRead) {
    a596:	466b      	mov	r3, sp
    a598:	3307      	adds	r3, #7
    a59a:	781b      	ldrb	r3, [r3, #0]
    a59c:	2b7f      	cmp	r3, #127	; 0x7f
    a59e:	d01e      	beq.n	a5de <processUserInput+0x66>
		if (STATUS_OK == uartReadCode) {
    a5a0:	466b      	mov	r3, sp
    a5a2:	3306      	adds	r3, #6
    a5a4:	781b      	ldrb	r3, [r3, #0]
    a5a6:	2b00      	cmp	r3, #0
    a5a8:	d02d      	beq.n	a606 <processUserInput+0x8e>
			volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
		}
	}
	

	switch (singleCharInput) {
    a5aa:	466b      	mov	r3, sp
    a5ac:	3307      	adds	r3, #7
    a5ae:	781b      	ldrb	r3, [r3, #0]
    a5b0:	2b0d      	cmp	r3, #13
    a5b2:	d031      	beq.n	a618 <processUserInput+0xa0>
    a5b4:	2b7f      	cmp	r3, #127	; 0x7f
    a5b6:	d03c      	beq.n	a632 <processUserInput+0xba>
    a5b8:	2b0a      	cmp	r3, #10
    a5ba:	d02d      	beq.n	a618 <processUserInput+0xa0>
		// rx_buffer[--numberCharsRead] = NULLCHAR;
		break;
	}
	default: {
		/// All other cases
		if (numberCharsRead < MAX_RX_BUFFER_LENGTH)
    a5bc:	4a22      	ldr	r2, [pc, #136]	; (a648 <processUserInput+0xd0>)
    a5be:	7812      	ldrb	r2, [r2, #0]
    a5c0:	2a63      	cmp	r2, #99	; 0x63
    a5c2:	d804      	bhi.n	a5ce <processUserInput+0x56>
			rx_buffer[numberCharsRead++] = singleCharInput;
    a5c4:	1c50      	adds	r0, r2, #1
    a5c6:	4920      	ldr	r1, [pc, #128]	; (a648 <processUserInput+0xd0>)
    a5c8:	7008      	strb	r0, [r1, #0]
    a5ca:	4920      	ldr	r1, [pc, #128]	; (a64c <processUserInput+0xd4>)
    a5cc:	548b      	strb	r3, [r1, r2]
		rx_buffer[numberCharsRead] = NULLCHAR;  ///< String read protection
    a5ce:	4b1e      	ldr	r3, [pc, #120]	; (a648 <processUserInput+0xd0>)
    a5d0:	781b      	ldrb	r3, [r3, #0]
    a5d2:	2100      	movs	r1, #0
    a5d4:	4a1d      	ldr	r2, [pc, #116]	; (a64c <processUserInput+0xd4>)
    a5d6:	54d1      	strb	r1, [r2, r3]
		break;
	}
	}
	return false;
    a5d8:	2000      	movs	r0, #0
}
    a5da:	b003      	add	sp, #12
    a5dc:	bd00      	pop	{pc}
	if((singleCharInput != BS && !numberCharsRead) || numberCharsRead) {
    a5de:	4b1a      	ldr	r3, [pc, #104]	; (a648 <processUserInput+0xd0>)
    a5e0:	781b      	ldrb	r3, [r3, #0]
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d0f9      	beq.n	a5da <processUserInput+0x62>
		if (STATUS_OK == uartReadCode) {
    a5e6:	466b      	mov	r3, sp
    a5e8:	3306      	adds	r3, #6
    a5ea:	781b      	ldrb	r3, [r3, #0]
    a5ec:	2b00      	cmp	r3, #0
    a5ee:	d00a      	beq.n	a606 <processUserInput+0x8e>
		if(!numberCharsRead) //no characters written
    a5f0:	4b15      	ldr	r3, [pc, #84]	; (a648 <processUserInput+0xd0>)
    a5f2:	781b      	ldrb	r3, [r3, #0]
		numberCharsRead--;
    a5f4:	3b01      	subs	r3, #1
    a5f6:	b2db      	uxtb	r3, r3
    a5f8:	4a13      	ldr	r2, [pc, #76]	; (a648 <processUserInput+0xd0>)
    a5fa:	7013      	strb	r3, [r2, #0]
		rx_buffer[numberCharsRead] = NULLCHAR;
    a5fc:	2100      	movs	r1, #0
    a5fe:	4a13      	ldr	r2, [pc, #76]	; (a64c <processUserInput+0xd4>)
    a600:	54d1      	strb	r1, [r2, r3]
	return false;
    a602:	2000      	movs	r0, #0
		break;
    a604:	e7e9      	b.n	a5da <processUserInput+0x62>
			volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
    a606:	2201      	movs	r2, #1
    a608:	466b      	mov	r3, sp
    a60a:	1dd9      	adds	r1, r3, #7
    a60c:	480c      	ldr	r0, [pc, #48]	; (a640 <processUserInput+0xc8>)
    a60e:	4b10      	ldr	r3, [pc, #64]	; (a650 <processUserInput+0xd8>)
    a610:	4798      	blx	r3
    a612:	466b      	mov	r3, sp
    a614:	7158      	strb	r0, [r3, #5]
    a616:	e7c8      	b.n	a5aa <processUserInput+0x32>
		rx_buffer[numberCharsRead] = NULLCHAR;
    a618:	4b0b      	ldr	r3, [pc, #44]	; (a648 <processUserInput+0xd0>)
    a61a:	781b      	ldrb	r3, [r3, #0]
    a61c:	2100      	movs	r1, #0
    a61e:	4a0b      	ldr	r2, [pc, #44]	; (a64c <processUserInput+0xd4>)
    a620:	54d1      	strb	r1, [r2, r3]
	return false;
    a622:	2000      	movs	r0, #0
		if (numberCharsRead > 0) {
    a624:	2b00      	cmp	r3, #0
    a626:	d0d8      	beq.n	a5da <processUserInput+0x62>
			numberCharsRead = 0;
    a628:	2200      	movs	r2, #0
    a62a:	4b07      	ldr	r3, [pc, #28]	; (a648 <processUserInput+0xd0>)
    a62c:	701a      	strb	r2, [r3, #0]
			return true;
    a62e:	3001      	adds	r0, #1
    a630:	e7d3      	b.n	a5da <processUserInput+0x62>
		if(!numberCharsRead) //no characters written
    a632:	4b05      	ldr	r3, [pc, #20]	; (a648 <processUserInput+0xd0>)
    a634:	781b      	ldrb	r3, [r3, #0]
    a636:	2b00      	cmp	r3, #0
    a638:	d1dc      	bne.n	a5f4 <processUserInput+0x7c>
	return false;
    a63a:	2000      	movs	r0, #0
    a63c:	e7cd      	b.n	a5da <processUserInput+0x62>
    a63e:	46c0      	nop			; (mov r8, r8)
    a640:	20000758 	.word	0x20000758
    a644:	000089d1 	.word	0x000089d1
    a648:	200007f4 	.word	0x200007f4
    a64c:	20000790 	.word	0x20000790
    a650:	00008911 	.word	0x00008911

0000a654 <make_lowercase>:
/**
 * helper function to set string to all lowercase
 * @param str string to make all lowercase
 */
void make_lowercase(char **str)
{
    a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a656:	46ce      	mov	lr, r9
    a658:	4647      	mov	r7, r8
    a65a:	b580      	push	{r7, lr}
    a65c:	0007      	movs	r7, r0
	int i = 0;

	while (*(*(str) + i) != 0) {
    a65e:	6804      	ldr	r4, [r0, #0]
    a660:	7825      	ldrb	r5, [r4, #0]
    a662:	2d00      	cmp	r5, #0
    a664:	d016      	beq.n	a694 <make_lowercase+0x40>
    a666:	2600      	movs	r6, #0
		*(*(str) + i) = tolower(*(*str + i));
    a668:	4b0c      	ldr	r3, [pc, #48]	; (a69c <make_lowercase+0x48>)
    a66a:	4699      	mov	r9, r3
    a66c:	2303      	movs	r3, #3
    a66e:	4698      	mov	r8, r3
    a670:	e006      	b.n	a680 <make_lowercase+0x2c>
    a672:	7022      	strb	r2, [r4, #0]
		i++;
    a674:	3601      	adds	r6, #1
	while (*(*(str) + i) != 0) {
    a676:	683b      	ldr	r3, [r7, #0]
    a678:	199c      	adds	r4, r3, r6
    a67a:	7825      	ldrb	r5, [r4, #0]
    a67c:	2d00      	cmp	r5, #0
    a67e:	d009      	beq.n	a694 <make_lowercase+0x40>
		*(*(str) + i) = tolower(*(*str + i));
    a680:	47c8      	blx	r9
    a682:	1940      	adds	r0, r0, r5
    a684:	7843      	ldrb	r3, [r0, #1]
    a686:	4642      	mov	r2, r8
    a688:	4013      	ands	r3, r2
    a68a:	002a      	movs	r2, r5
    a68c:	2b01      	cmp	r3, #1
    a68e:	d1f0      	bne.n	a672 <make_lowercase+0x1e>
    a690:	3220      	adds	r2, #32
    a692:	e7ee      	b.n	a672 <make_lowercase+0x1e>
	}
}
    a694:	bc0c      	pop	{r2, r3}
    a696:	4690      	mov	r8, r2
    a698:	4699      	mov	r9, r3
    a69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a69c:	0000a859 	.word	0x0000a859

0000a6a0 <fix_args>:

/**
 * fixes arguments and adds them to the argv buffer
 */
void fix_args()
{
    a6a0:	b570      	push	{r4, r5, r6, lr}
    a6a2:	b082      	sub	sp, #8
	char *p = strtok(rx_buffer, " "); /// NOTE: strtok destroys the input string
    a6a4:	490e      	ldr	r1, [pc, #56]	; (a6e0 <fix_args+0x40>)
    a6a6:	480f      	ldr	r0, [pc, #60]	; (a6e4 <fix_args+0x44>)
    a6a8:	4b0f      	ldr	r3, [pc, #60]	; (a6e8 <fix_args+0x48>)
    a6aa:	4798      	blx	r3
    a6ac:	9001      	str	r0, [sp, #4]

	while (p != NULL) {
    a6ae:	2800      	cmp	r0, #0
    a6b0:	d013      	beq.n	a6da <fix_args+0x3a>
		make_lowercase(&p);
    a6b2:	4e0e      	ldr	r6, [pc, #56]	; (a6ec <fix_args+0x4c>)
		strcpy(argv[argc++], p);
    a6b4:	4c0e      	ldr	r4, [pc, #56]	; (a6f0 <fix_args+0x50>)
    a6b6:	4d0f      	ldr	r5, [pc, #60]	; (a6f4 <fix_args+0x54>)
		make_lowercase(&p);
    a6b8:	a801      	add	r0, sp, #4
    a6ba:	47b0      	blx	r6
		strcpy(argv[argc++], p);
    a6bc:	7823      	ldrb	r3, [r4, #0]
    a6be:	1c5a      	adds	r2, r3, #1
    a6c0:	7022      	strb	r2, [r4, #0]
    a6c2:	009b      	lsls	r3, r3, #2
    a6c4:	5958      	ldr	r0, [r3, r5]
    a6c6:	9901      	ldr	r1, [sp, #4]
    a6c8:	4b0b      	ldr	r3, [pc, #44]	; (a6f8 <fix_args+0x58>)
    a6ca:	4798      	blx	r3
		p = strtok(NULL, " ");
    a6cc:	4904      	ldr	r1, [pc, #16]	; (a6e0 <fix_args+0x40>)
    a6ce:	2000      	movs	r0, #0
    a6d0:	4b05      	ldr	r3, [pc, #20]	; (a6e8 <fix_args+0x48>)
    a6d2:	4798      	blx	r3
    a6d4:	9001      	str	r0, [sp, #4]
	while (p != NULL) {
    a6d6:	2800      	cmp	r0, #0
    a6d8:	d1ee      	bne.n	a6b8 <fix_args+0x18>
	}
}
    a6da:	b002      	add	sp, #8
    a6dc:	bd70      	pop	{r4, r5, r6, pc}
    a6de:	46c0      	nop			; (mov r8, r8)
    a6e0:	00011b2c 	.word	0x00011b2c
    a6e4:	20000790 	.word	0x20000790
    a6e8:	0000b6fd 	.word	0x0000b6fd
    a6ec:	0000a655 	.word	0x0000a655
    a6f0:	2000078c 	.word	0x2000078c
    a6f4:	20000748 	.word	0x20000748
    a6f8:	0000b651 	.word	0x0000b651

0000a6fc <main>:


int main(void)
{
    a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
    a6fe:	4b24      	ldr	r3, [pc, #144]	; (a790 <main+0x94>)
    a700:	4798      	blx	r3
	//system_interrupt_enable_global();
	delay_init();
    a702:	4b24      	ldr	r3, [pc, #144]	; (a794 <main+0x98>)
    a704:	4798      	blx	r3
	configure_usart();
    a706:	4b24      	ldr	r3, [pc, #144]	; (a798 <main+0x9c>)
    a708:	4798      	blx	r3
	configure_nvm();
    a70a:	4b24      	ldr	r3, [pc, #144]	; (a79c <main+0xa0>)
    a70c:	4798      	blx	r3
	configure_flash();
    a70e:	4b24      	ldr	r3, [pc, #144]	; (a7a0 <main+0xa4>)
    a710:	4798      	blx	r3
	configure_i2c_tsl2561(ADDR_FLOAT);
    a712:	2039      	movs	r0, #57	; 0x39
    a714:	4b23      	ldr	r3, [pc, #140]	; (a7a4 <main+0xa8>)
    a716:	4798      	blx	r3
	configure_i2c_hdc();
    a718:	4b23      	ldr	r3, [pc, #140]	; (a7a8 <main+0xac>)
    a71a:	4798      	blx	r3
	set_resolution(FOURTEEN_BIT_RESOLUTION, FOURTEEN_BIT_RESOLUTION);
    a71c:	2102      	movs	r1, #2
    a71e:	2002      	movs	r0, #2
    a720:	4b22      	ldr	r3, [pc, #136]	; (a7ac <main+0xb0>)
    a722:	4798      	blx	r3
	get_default_wifi_config(&new_wifi_configuration);
    a724:	4c22      	ldr	r4, [pc, #136]	; (a7b0 <main+0xb4>)
    a726:	0020      	movs	r0, r4
    a728:	4b22      	ldr	r3, [pc, #136]	; (a7b4 <main+0xb8>)
    a72a:	4798      	blx	r3
	configure_wifi_module(&new_wifi_configuration);
    a72c:	0020      	movs	r0, r4
    a72e:	4b22      	ldr	r3, [pc, #136]	; (a7b8 <main+0xbc>)
    a730:	4798      	blx	r3
	
	uint16_t hdc_dev = get_hdc_device_id();
    a732:	4b22      	ldr	r3, [pc, #136]	; (a7bc <main+0xc0>)
    a734:	4798      	blx	r3
	uint16_t hdc_manu = get_hdc_manufacturer_id();
    a736:	4b22      	ldr	r3, [pc, #136]	; (a7c0 <main+0xc4>)
    a738:	4798      	blx	r3
	uint16_t tsl2561_id = get_tsl2561_device_id();
    a73a:	4b22      	ldr	r3, [pc, #136]	; (a7c4 <main+0xc8>)
    a73c:	4798      	blx	r3
    a73e:	0001      	movs	r1, r0
	printf("dev id: 0x%02x\r\n", tsl2561_id);
    a740:	4821      	ldr	r0, [pc, #132]	; (a7c8 <main+0xcc>)
    a742:	4b22      	ldr	r3, [pc, #136]	; (a7cc <main+0xd0>)
    a744:	4798      	blx	r3
    a746:	2400      	movs	r4, #0
	for (int i = 0; i < MAX_ARGS; i++)
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    a748:	4e21      	ldr	r6, [pc, #132]	; (a7d0 <main+0xd4>)
    a74a:	4d22      	ldr	r5, [pc, #136]	; (a7d4 <main+0xd8>)
    a74c:	2019      	movs	r0, #25
    a74e:	47b0      	blx	r6
    a750:	5128      	str	r0, [r5, r4]
    a752:	3404      	adds	r4, #4
	for (int i = 0; i < MAX_ARGS; i++)
    a754:	2c10      	cmp	r4, #16
    a756:	d1f9      	bne.n	a74c <main+0x50>

	//TODO: print version information
	printf("\r\nWelcome to the Evergreen CLI.\r\n");
    a758:	481f      	ldr	r0, [pc, #124]	; (a7d8 <main+0xdc>)
    a75a:	4b20      	ldr	r3, [pc, #128]	; (a7dc <main+0xe0>)
    a75c:	4798      	blx	r3
	printf("> ");
    a75e:	4820      	ldr	r0, [pc, #128]	; (a7e0 <main+0xe4>)
    a760:	4b1a      	ldr	r3, [pc, #104]	; (a7cc <main+0xd0>)
    a762:	4798      	blx	r3
	while (1) {
 			bool commandEntered = processUserInput();
    a764:	4c1f      	ldr	r4, [pc, #124]	; (a7e4 <main+0xe8>)
 			if (commandEntered) {
				printf("> %s\r\n", rx_buffer);
    a766:	4e20      	ldr	r6, [pc, #128]	; (a7e8 <main+0xec>)
 			bool commandEntered = processUserInput();
    a768:	47a0      	blx	r4
 			if (commandEntered) {
    a76a:	2800      	cmp	r0, #0
    a76c:	d0fc      	beq.n	a768 <main+0x6c>
				printf("> %s\r\n", rx_buffer);
    a76e:	0031      	movs	r1, r6
    a770:	481e      	ldr	r0, [pc, #120]	; (a7ec <main+0xf0>)
    a772:	4f16      	ldr	r7, [pc, #88]	; (a7cc <main+0xd0>)
    a774:	47b8      	blx	r7
 				fix_args();
    a776:	4b1e      	ldr	r3, [pc, #120]	; (a7f0 <main+0xf4>)
    a778:	4798      	blx	r3
 				input_handle(argc, argv); //fix
    a77a:	4d1e      	ldr	r5, [pc, #120]	; (a7f4 <main+0xf8>)
    a77c:	7828      	ldrb	r0, [r5, #0]
    a77e:	4915      	ldr	r1, [pc, #84]	; (a7d4 <main+0xd8>)
    a780:	4b1d      	ldr	r3, [pc, #116]	; (a7f8 <main+0xfc>)
    a782:	4798      	blx	r3
 				argc = 0;
    a784:	2300      	movs	r3, #0
    a786:	702b      	strb	r3, [r5, #0]
 				printf("> ");
    a788:	4815      	ldr	r0, [pc, #84]	; (a7e0 <main+0xe4>)
    a78a:	47b8      	blx	r7
    a78c:	e7ec      	b.n	a768 <main+0x6c>
    a78e:	46c0      	nop			; (mov r8, r8)
    a790:	0000a429 	.word	0x0000a429
    a794:	00009899 	.word	0x00009899
    a798:	00000159 	.word	0x00000159
    a79c:	00000335 	.word	0x00000335
    a7a0:	0000024d 	.word	0x0000024d
    a7a4:	000011d5 	.word	0x000011d5
    a7a8:	00000365 	.word	0x00000365
    a7ac:	0000040d 	.word	0x0000040d
    a7b0:	20000710 	.word	0x20000710
    a7b4:	00001001 	.word	0x00001001
    a7b8:	00001029 	.word	0x00001029
    a7bc:	00000535 	.word	0x00000535
    a7c0:	00000525 	.word	0x00000525
    a7c4:	0000139d 	.word	0x0000139d
    a7c8:	00012638 	.word	0x00012638
    a7cc:	0000b339 	.word	0x0000b339
    a7d0:	0000a875 	.word	0x0000a875
    a7d4:	20000748 	.word	0x20000748
    a7d8:	0001264c 	.word	0x0001264c
    a7dc:	0000b455 	.word	0x0000b455
    a7e0:	00012670 	.word	0x00012670
    a7e4:	0000a579 	.word	0x0000a579
    a7e8:	20000790 	.word	0x20000790
    a7ec:	00012674 	.word	0x00012674
    a7f0:	0000a6a1 	.word	0x0000a6a1
    a7f4:	2000078c 	.word	0x2000078c
    a7f8:	00007f65 	.word	0x00007f65

0000a7fc <atoi>:
    a7fc:	b510      	push	{r4, lr}
    a7fe:	220a      	movs	r2, #10
    a800:	2100      	movs	r1, #0
    a802:	f001 f857 	bl	b8b4 <strtol>
    a806:	bd10      	pop	{r4, pc}

0000a808 <__libc_init_array>:
    a808:	b570      	push	{r4, r5, r6, lr}
    a80a:	2600      	movs	r6, #0
    a80c:	4d0c      	ldr	r5, [pc, #48]	; (a840 <__libc_init_array+0x38>)
    a80e:	4c0d      	ldr	r4, [pc, #52]	; (a844 <__libc_init_array+0x3c>)
    a810:	1b64      	subs	r4, r4, r5
    a812:	10a4      	asrs	r4, r4, #2
    a814:	42a6      	cmp	r6, r4
    a816:	d109      	bne.n	a82c <__libc_init_array+0x24>
    a818:	2600      	movs	r6, #0
    a81a:	f008 f931 	bl	12a80 <_init>
    a81e:	4d0a      	ldr	r5, [pc, #40]	; (a848 <__libc_init_array+0x40>)
    a820:	4c0a      	ldr	r4, [pc, #40]	; (a84c <__libc_init_array+0x44>)
    a822:	1b64      	subs	r4, r4, r5
    a824:	10a4      	asrs	r4, r4, #2
    a826:	42a6      	cmp	r6, r4
    a828:	d105      	bne.n	a836 <__libc_init_array+0x2e>
    a82a:	bd70      	pop	{r4, r5, r6, pc}
    a82c:	00b3      	lsls	r3, r6, #2
    a82e:	58eb      	ldr	r3, [r5, r3]
    a830:	4798      	blx	r3
    a832:	3601      	adds	r6, #1
    a834:	e7ee      	b.n	a814 <__libc_init_array+0xc>
    a836:	00b3      	lsls	r3, r6, #2
    a838:	58eb      	ldr	r3, [r5, r3]
    a83a:	4798      	blx	r3
    a83c:	3601      	adds	r6, #1
    a83e:	e7f2      	b.n	a826 <__libc_init_array+0x1e>
    a840:	00012a8c 	.word	0x00012a8c
    a844:	00012a8c 	.word	0x00012a8c
    a848:	00012a8c 	.word	0x00012a8c
    a84c:	00012a90 	.word	0x00012a90

0000a850 <__locale_ctype_ptr_l>:
    a850:	30ec      	adds	r0, #236	; 0xec
    a852:	6800      	ldr	r0, [r0, #0]
    a854:	4770      	bx	lr
	...

0000a858 <__locale_ctype_ptr>:
    a858:	4b04      	ldr	r3, [pc, #16]	; (a86c <__locale_ctype_ptr+0x14>)
    a85a:	681b      	ldr	r3, [r3, #0]
    a85c:	6a1b      	ldr	r3, [r3, #32]
    a85e:	2b00      	cmp	r3, #0
    a860:	d100      	bne.n	a864 <__locale_ctype_ptr+0xc>
    a862:	4b03      	ldr	r3, [pc, #12]	; (a870 <__locale_ctype_ptr+0x18>)
    a864:	33ec      	adds	r3, #236	; 0xec
    a866:	6818      	ldr	r0, [r3, #0]
    a868:	4770      	bx	lr
    a86a:	46c0      	nop			; (mov r8, r8)
    a86c:	20000010 	.word	0x20000010
    a870:	20000074 	.word	0x20000074

0000a874 <malloc>:
    a874:	b510      	push	{r4, lr}
    a876:	4b03      	ldr	r3, [pc, #12]	; (a884 <malloc+0x10>)
    a878:	0001      	movs	r1, r0
    a87a:	6818      	ldr	r0, [r3, #0]
    a87c:	f000 f88e 	bl	a99c <_malloc_r>
    a880:	bd10      	pop	{r4, pc}
    a882:	46c0      	nop			; (mov r8, r8)
    a884:	20000010 	.word	0x20000010

0000a888 <free>:
    a888:	b510      	push	{r4, lr}
    a88a:	4b03      	ldr	r3, [pc, #12]	; (a898 <free+0x10>)
    a88c:	0001      	movs	r1, r0
    a88e:	6818      	ldr	r0, [r3, #0]
    a890:	f000 f83a 	bl	a908 <_free_r>
    a894:	bd10      	pop	{r4, pc}
    a896:	46c0      	nop			; (mov r8, r8)
    a898:	20000010 	.word	0x20000010

0000a89c <__ascii_mbtowc>:
    a89c:	b082      	sub	sp, #8
    a89e:	2900      	cmp	r1, #0
    a8a0:	d100      	bne.n	a8a4 <__ascii_mbtowc+0x8>
    a8a2:	a901      	add	r1, sp, #4
    a8a4:	1e10      	subs	r0, r2, #0
    a8a6:	d006      	beq.n	a8b6 <__ascii_mbtowc+0x1a>
    a8a8:	2b00      	cmp	r3, #0
    a8aa:	d006      	beq.n	a8ba <__ascii_mbtowc+0x1e>
    a8ac:	7813      	ldrb	r3, [r2, #0]
    a8ae:	600b      	str	r3, [r1, #0]
    a8b0:	7810      	ldrb	r0, [r2, #0]
    a8b2:	1e43      	subs	r3, r0, #1
    a8b4:	4198      	sbcs	r0, r3
    a8b6:	b002      	add	sp, #8
    a8b8:	4770      	bx	lr
    a8ba:	2002      	movs	r0, #2
    a8bc:	4240      	negs	r0, r0
    a8be:	e7fa      	b.n	a8b6 <__ascii_mbtowc+0x1a>

0000a8c0 <memcpy>:
    a8c0:	2300      	movs	r3, #0
    a8c2:	b510      	push	{r4, lr}
    a8c4:	429a      	cmp	r2, r3
    a8c6:	d100      	bne.n	a8ca <memcpy+0xa>
    a8c8:	bd10      	pop	{r4, pc}
    a8ca:	5ccc      	ldrb	r4, [r1, r3]
    a8cc:	54c4      	strb	r4, [r0, r3]
    a8ce:	3301      	adds	r3, #1
    a8d0:	e7f8      	b.n	a8c4 <memcpy+0x4>

0000a8d2 <memmove>:
    a8d2:	b510      	push	{r4, lr}
    a8d4:	4288      	cmp	r0, r1
    a8d6:	d902      	bls.n	a8de <memmove+0xc>
    a8d8:	188b      	adds	r3, r1, r2
    a8da:	4298      	cmp	r0, r3
    a8dc:	d308      	bcc.n	a8f0 <memmove+0x1e>
    a8de:	2300      	movs	r3, #0
    a8e0:	429a      	cmp	r2, r3
    a8e2:	d007      	beq.n	a8f4 <memmove+0x22>
    a8e4:	5ccc      	ldrb	r4, [r1, r3]
    a8e6:	54c4      	strb	r4, [r0, r3]
    a8e8:	3301      	adds	r3, #1
    a8ea:	e7f9      	b.n	a8e0 <memmove+0xe>
    a8ec:	5c8b      	ldrb	r3, [r1, r2]
    a8ee:	5483      	strb	r3, [r0, r2]
    a8f0:	3a01      	subs	r2, #1
    a8f2:	d2fb      	bcs.n	a8ec <memmove+0x1a>
    a8f4:	bd10      	pop	{r4, pc}

0000a8f6 <memset>:
    a8f6:	0003      	movs	r3, r0
    a8f8:	1882      	adds	r2, r0, r2
    a8fa:	4293      	cmp	r3, r2
    a8fc:	d100      	bne.n	a900 <memset+0xa>
    a8fe:	4770      	bx	lr
    a900:	7019      	strb	r1, [r3, #0]
    a902:	3301      	adds	r3, #1
    a904:	e7f9      	b.n	a8fa <memset+0x4>
	...

0000a908 <_free_r>:
    a908:	b570      	push	{r4, r5, r6, lr}
    a90a:	0005      	movs	r5, r0
    a90c:	2900      	cmp	r1, #0
    a90e:	d010      	beq.n	a932 <_free_r+0x2a>
    a910:	1f0c      	subs	r4, r1, #4
    a912:	6823      	ldr	r3, [r4, #0]
    a914:	2b00      	cmp	r3, #0
    a916:	da00      	bge.n	a91a <_free_r+0x12>
    a918:	18e4      	adds	r4, r4, r3
    a91a:	0028      	movs	r0, r5
    a91c:	f002 f933 	bl	cb86 <__malloc_lock>
    a920:	4a1d      	ldr	r2, [pc, #116]	; (a998 <_free_r+0x90>)
    a922:	6813      	ldr	r3, [r2, #0]
    a924:	2b00      	cmp	r3, #0
    a926:	d105      	bne.n	a934 <_free_r+0x2c>
    a928:	6063      	str	r3, [r4, #4]
    a92a:	6014      	str	r4, [r2, #0]
    a92c:	0028      	movs	r0, r5
    a92e:	f002 f92b 	bl	cb88 <__malloc_unlock>
    a932:	bd70      	pop	{r4, r5, r6, pc}
    a934:	42a3      	cmp	r3, r4
    a936:	d909      	bls.n	a94c <_free_r+0x44>
    a938:	6821      	ldr	r1, [r4, #0]
    a93a:	1860      	adds	r0, r4, r1
    a93c:	4283      	cmp	r3, r0
    a93e:	d1f3      	bne.n	a928 <_free_r+0x20>
    a940:	6818      	ldr	r0, [r3, #0]
    a942:	685b      	ldr	r3, [r3, #4]
    a944:	1841      	adds	r1, r0, r1
    a946:	6021      	str	r1, [r4, #0]
    a948:	e7ee      	b.n	a928 <_free_r+0x20>
    a94a:	0013      	movs	r3, r2
    a94c:	685a      	ldr	r2, [r3, #4]
    a94e:	2a00      	cmp	r2, #0
    a950:	d001      	beq.n	a956 <_free_r+0x4e>
    a952:	42a2      	cmp	r2, r4
    a954:	d9f9      	bls.n	a94a <_free_r+0x42>
    a956:	6819      	ldr	r1, [r3, #0]
    a958:	1858      	adds	r0, r3, r1
    a95a:	42a0      	cmp	r0, r4
    a95c:	d10b      	bne.n	a976 <_free_r+0x6e>
    a95e:	6820      	ldr	r0, [r4, #0]
    a960:	1809      	adds	r1, r1, r0
    a962:	1858      	adds	r0, r3, r1
    a964:	6019      	str	r1, [r3, #0]
    a966:	4282      	cmp	r2, r0
    a968:	d1e0      	bne.n	a92c <_free_r+0x24>
    a96a:	6810      	ldr	r0, [r2, #0]
    a96c:	6852      	ldr	r2, [r2, #4]
    a96e:	1841      	adds	r1, r0, r1
    a970:	6019      	str	r1, [r3, #0]
    a972:	605a      	str	r2, [r3, #4]
    a974:	e7da      	b.n	a92c <_free_r+0x24>
    a976:	42a0      	cmp	r0, r4
    a978:	d902      	bls.n	a980 <_free_r+0x78>
    a97a:	230c      	movs	r3, #12
    a97c:	602b      	str	r3, [r5, #0]
    a97e:	e7d5      	b.n	a92c <_free_r+0x24>
    a980:	6821      	ldr	r1, [r4, #0]
    a982:	1860      	adds	r0, r4, r1
    a984:	4282      	cmp	r2, r0
    a986:	d103      	bne.n	a990 <_free_r+0x88>
    a988:	6810      	ldr	r0, [r2, #0]
    a98a:	6852      	ldr	r2, [r2, #4]
    a98c:	1841      	adds	r1, r0, r1
    a98e:	6021      	str	r1, [r4, #0]
    a990:	6062      	str	r2, [r4, #4]
    a992:	605c      	str	r4, [r3, #4]
    a994:	e7ca      	b.n	a92c <_free_r+0x24>
    a996:	46c0      	nop			; (mov r8, r8)
    a998:	20000294 	.word	0x20000294

0000a99c <_malloc_r>:
    a99c:	2303      	movs	r3, #3
    a99e:	b570      	push	{r4, r5, r6, lr}
    a9a0:	1ccd      	adds	r5, r1, #3
    a9a2:	439d      	bics	r5, r3
    a9a4:	3508      	adds	r5, #8
    a9a6:	0006      	movs	r6, r0
    a9a8:	2d0c      	cmp	r5, #12
    a9aa:	d21e      	bcs.n	a9ea <_malloc_r+0x4e>
    a9ac:	250c      	movs	r5, #12
    a9ae:	42a9      	cmp	r1, r5
    a9b0:	d81d      	bhi.n	a9ee <_malloc_r+0x52>
    a9b2:	0030      	movs	r0, r6
    a9b4:	f002 f8e7 	bl	cb86 <__malloc_lock>
    a9b8:	4a25      	ldr	r2, [pc, #148]	; (aa50 <_malloc_r+0xb4>)
    a9ba:	6814      	ldr	r4, [r2, #0]
    a9bc:	0021      	movs	r1, r4
    a9be:	2900      	cmp	r1, #0
    a9c0:	d119      	bne.n	a9f6 <_malloc_r+0x5a>
    a9c2:	4c24      	ldr	r4, [pc, #144]	; (aa54 <_malloc_r+0xb8>)
    a9c4:	6823      	ldr	r3, [r4, #0]
    a9c6:	2b00      	cmp	r3, #0
    a9c8:	d103      	bne.n	a9d2 <_malloc_r+0x36>
    a9ca:	0030      	movs	r0, r6
    a9cc:	f000 fd4c 	bl	b468 <_sbrk_r>
    a9d0:	6020      	str	r0, [r4, #0]
    a9d2:	0029      	movs	r1, r5
    a9d4:	0030      	movs	r0, r6
    a9d6:	f000 fd47 	bl	b468 <_sbrk_r>
    a9da:	1c43      	adds	r3, r0, #1
    a9dc:	d12c      	bne.n	aa38 <_malloc_r+0x9c>
    a9de:	230c      	movs	r3, #12
    a9e0:	0030      	movs	r0, r6
    a9e2:	6033      	str	r3, [r6, #0]
    a9e4:	f002 f8d0 	bl	cb88 <__malloc_unlock>
    a9e8:	e003      	b.n	a9f2 <_malloc_r+0x56>
    a9ea:	2d00      	cmp	r5, #0
    a9ec:	dadf      	bge.n	a9ae <_malloc_r+0x12>
    a9ee:	230c      	movs	r3, #12
    a9f0:	6033      	str	r3, [r6, #0]
    a9f2:	2000      	movs	r0, #0
    a9f4:	bd70      	pop	{r4, r5, r6, pc}
    a9f6:	680b      	ldr	r3, [r1, #0]
    a9f8:	1b5b      	subs	r3, r3, r5
    a9fa:	d41a      	bmi.n	aa32 <_malloc_r+0x96>
    a9fc:	2b0b      	cmp	r3, #11
    a9fe:	d903      	bls.n	aa08 <_malloc_r+0x6c>
    aa00:	600b      	str	r3, [r1, #0]
    aa02:	18cc      	adds	r4, r1, r3
    aa04:	6025      	str	r5, [r4, #0]
    aa06:	e003      	b.n	aa10 <_malloc_r+0x74>
    aa08:	428c      	cmp	r4, r1
    aa0a:	d10e      	bne.n	aa2a <_malloc_r+0x8e>
    aa0c:	6863      	ldr	r3, [r4, #4]
    aa0e:	6013      	str	r3, [r2, #0]
    aa10:	0030      	movs	r0, r6
    aa12:	f002 f8b9 	bl	cb88 <__malloc_unlock>
    aa16:	0020      	movs	r0, r4
    aa18:	2207      	movs	r2, #7
    aa1a:	300b      	adds	r0, #11
    aa1c:	1d23      	adds	r3, r4, #4
    aa1e:	4390      	bics	r0, r2
    aa20:	1ac3      	subs	r3, r0, r3
    aa22:	d0e7      	beq.n	a9f4 <_malloc_r+0x58>
    aa24:	425a      	negs	r2, r3
    aa26:	50e2      	str	r2, [r4, r3]
    aa28:	e7e4      	b.n	a9f4 <_malloc_r+0x58>
    aa2a:	684b      	ldr	r3, [r1, #4]
    aa2c:	6063      	str	r3, [r4, #4]
    aa2e:	000c      	movs	r4, r1
    aa30:	e7ee      	b.n	aa10 <_malloc_r+0x74>
    aa32:	000c      	movs	r4, r1
    aa34:	6849      	ldr	r1, [r1, #4]
    aa36:	e7c2      	b.n	a9be <_malloc_r+0x22>
    aa38:	2303      	movs	r3, #3
    aa3a:	1cc4      	adds	r4, r0, #3
    aa3c:	439c      	bics	r4, r3
    aa3e:	42a0      	cmp	r0, r4
    aa40:	d0e0      	beq.n	aa04 <_malloc_r+0x68>
    aa42:	1a21      	subs	r1, r4, r0
    aa44:	0030      	movs	r0, r6
    aa46:	f000 fd0f 	bl	b468 <_sbrk_r>
    aa4a:	1c43      	adds	r3, r0, #1
    aa4c:	d1da      	bne.n	aa04 <_malloc_r+0x68>
    aa4e:	e7c6      	b.n	a9de <_malloc_r+0x42>
    aa50:	20000294 	.word	0x20000294
    aa54:	20000298 	.word	0x20000298

0000aa58 <__cvt>:
    aa58:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa5a:	b08b      	sub	sp, #44	; 0x2c
    aa5c:	0014      	movs	r4, r2
    aa5e:	1e1d      	subs	r5, r3, #0
    aa60:	9912      	ldr	r1, [sp, #72]	; 0x48
    aa62:	da53      	bge.n	ab0c <__cvt+0xb4>
    aa64:	2480      	movs	r4, #128	; 0x80
    aa66:	0624      	lsls	r4, r4, #24
    aa68:	191b      	adds	r3, r3, r4
    aa6a:	001d      	movs	r5, r3
    aa6c:	0014      	movs	r4, r2
    aa6e:	232d      	movs	r3, #45	; 0x2d
    aa70:	700b      	strb	r3, [r1, #0]
    aa72:	2320      	movs	r3, #32
    aa74:	9e14      	ldr	r6, [sp, #80]	; 0x50
    aa76:	2203      	movs	r2, #3
    aa78:	439e      	bics	r6, r3
    aa7a:	2e46      	cmp	r6, #70	; 0x46
    aa7c:	d007      	beq.n	aa8e <__cvt+0x36>
    aa7e:	0033      	movs	r3, r6
    aa80:	3b45      	subs	r3, #69	; 0x45
    aa82:	4259      	negs	r1, r3
    aa84:	414b      	adcs	r3, r1
    aa86:	9910      	ldr	r1, [sp, #64]	; 0x40
    aa88:	3a01      	subs	r2, #1
    aa8a:	18cb      	adds	r3, r1, r3
    aa8c:	9310      	str	r3, [sp, #64]	; 0x40
    aa8e:	ab09      	add	r3, sp, #36	; 0x24
    aa90:	9304      	str	r3, [sp, #16]
    aa92:	ab08      	add	r3, sp, #32
    aa94:	9303      	str	r3, [sp, #12]
    aa96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aa98:	9200      	str	r2, [sp, #0]
    aa9a:	9302      	str	r3, [sp, #8]
    aa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aa9e:	0022      	movs	r2, r4
    aaa0:	9301      	str	r3, [sp, #4]
    aaa2:	002b      	movs	r3, r5
    aaa4:	f001 f876 	bl	bb94 <_dtoa_r>
    aaa8:	0007      	movs	r7, r0
    aaaa:	2e47      	cmp	r6, #71	; 0x47
    aaac:	d102      	bne.n	aab4 <__cvt+0x5c>
    aaae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aab0:	07db      	lsls	r3, r3, #31
    aab2:	d524      	bpl.n	aafe <__cvt+0xa6>
    aab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aab6:	18fb      	adds	r3, r7, r3
    aab8:	9307      	str	r3, [sp, #28]
    aaba:	2e46      	cmp	r6, #70	; 0x46
    aabc:	d114      	bne.n	aae8 <__cvt+0x90>
    aabe:	783b      	ldrb	r3, [r7, #0]
    aac0:	2b30      	cmp	r3, #48	; 0x30
    aac2:	d10c      	bne.n	aade <__cvt+0x86>
    aac4:	2200      	movs	r2, #0
    aac6:	2300      	movs	r3, #0
    aac8:	0020      	movs	r0, r4
    aaca:	0029      	movs	r1, r5
    aacc:	f003 f8aa 	bl	dc24 <__aeabi_dcmpeq>
    aad0:	2800      	cmp	r0, #0
    aad2:	d104      	bne.n	aade <__cvt+0x86>
    aad4:	2301      	movs	r3, #1
    aad6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    aad8:	1a9b      	subs	r3, r3, r2
    aada:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    aadc:	6013      	str	r3, [r2, #0]
    aade:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aae0:	9a07      	ldr	r2, [sp, #28]
    aae2:	681b      	ldr	r3, [r3, #0]
    aae4:	18d3      	adds	r3, r2, r3
    aae6:	9307      	str	r3, [sp, #28]
    aae8:	2200      	movs	r2, #0
    aaea:	2300      	movs	r3, #0
    aaec:	0020      	movs	r0, r4
    aaee:	0029      	movs	r1, r5
    aaf0:	f003 f898 	bl	dc24 <__aeabi_dcmpeq>
    aaf4:	2230      	movs	r2, #48	; 0x30
    aaf6:	2800      	cmp	r0, #0
    aaf8:	d00d      	beq.n	ab16 <__cvt+0xbe>
    aafa:	9b07      	ldr	r3, [sp, #28]
    aafc:	9309      	str	r3, [sp, #36]	; 0x24
    aafe:	0038      	movs	r0, r7
    ab00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab02:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ab04:	1bdb      	subs	r3, r3, r7
    ab06:	6013      	str	r3, [r2, #0]
    ab08:	b00b      	add	sp, #44	; 0x2c
    ab0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab0c:	2300      	movs	r3, #0
    ab0e:	e7af      	b.n	aa70 <__cvt+0x18>
    ab10:	1c59      	adds	r1, r3, #1
    ab12:	9109      	str	r1, [sp, #36]	; 0x24
    ab14:	701a      	strb	r2, [r3, #0]
    ab16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab18:	9907      	ldr	r1, [sp, #28]
    ab1a:	4299      	cmp	r1, r3
    ab1c:	d8f8      	bhi.n	ab10 <__cvt+0xb8>
    ab1e:	e7ee      	b.n	aafe <__cvt+0xa6>

0000ab20 <__exponent>:
    ab20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab22:	232b      	movs	r3, #43	; 0x2b
    ab24:	b085      	sub	sp, #20
    ab26:	0007      	movs	r7, r0
    ab28:	000c      	movs	r4, r1
    ab2a:	7002      	strb	r2, [r0, #0]
    ab2c:	1c86      	adds	r6, r0, #2
    ab2e:	2900      	cmp	r1, #0
    ab30:	da01      	bge.n	ab36 <__exponent+0x16>
    ab32:	232d      	movs	r3, #45	; 0x2d
    ab34:	424c      	negs	r4, r1
    ab36:	707b      	strb	r3, [r7, #1]
    ab38:	2c09      	cmp	r4, #9
    ab3a:	dd23      	ble.n	ab84 <__exponent+0x64>
    ab3c:	ab02      	add	r3, sp, #8
    ab3e:	1ddd      	adds	r5, r3, #7
    ab40:	1e6b      	subs	r3, r5, #1
    ab42:	0020      	movs	r0, r4
    ab44:	210a      	movs	r1, #10
    ab46:	9301      	str	r3, [sp, #4]
    ab48:	f003 f856 	bl	dbf8 <__aeabi_idivmod>
    ab4c:	1e6b      	subs	r3, r5, #1
    ab4e:	3130      	adds	r1, #48	; 0x30
    ab50:	7019      	strb	r1, [r3, #0]
    ab52:	0020      	movs	r0, r4
    ab54:	210a      	movs	r1, #10
    ab56:	f002 ff69 	bl	da2c <__divsi3>
    ab5a:	0004      	movs	r4, r0
    ab5c:	2809      	cmp	r0, #9
    ab5e:	dc0a      	bgt.n	ab76 <__exponent+0x56>
    ab60:	3d02      	subs	r5, #2
    ab62:	3430      	adds	r4, #48	; 0x30
    ab64:	702c      	strb	r4, [r5, #0]
    ab66:	ab02      	add	r3, sp, #8
    ab68:	3307      	adds	r3, #7
    ab6a:	0030      	movs	r0, r6
    ab6c:	42ab      	cmp	r3, r5
    ab6e:	d804      	bhi.n	ab7a <__exponent+0x5a>
    ab70:	1bc0      	subs	r0, r0, r7
    ab72:	b005      	add	sp, #20
    ab74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab76:	9d01      	ldr	r5, [sp, #4]
    ab78:	e7e2      	b.n	ab40 <__exponent+0x20>
    ab7a:	782b      	ldrb	r3, [r5, #0]
    ab7c:	3501      	adds	r5, #1
    ab7e:	7033      	strb	r3, [r6, #0]
    ab80:	3601      	adds	r6, #1
    ab82:	e7f0      	b.n	ab66 <__exponent+0x46>
    ab84:	2330      	movs	r3, #48	; 0x30
    ab86:	18e4      	adds	r4, r4, r3
    ab88:	7033      	strb	r3, [r6, #0]
    ab8a:	1cb0      	adds	r0, r6, #2
    ab8c:	7074      	strb	r4, [r6, #1]
    ab8e:	e7ef      	b.n	ab70 <__exponent+0x50>

0000ab90 <_printf_float>:
    ab90:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab92:	b095      	sub	sp, #84	; 0x54
    ab94:	000c      	movs	r4, r1
    ab96:	920a      	str	r2, [sp, #40]	; 0x28
    ab98:	930b      	str	r3, [sp, #44]	; 0x2c
    ab9a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    ab9c:	9009      	str	r0, [sp, #36]	; 0x24
    ab9e:	f001 ff6f 	bl	ca80 <_localeconv_r>
    aba2:	6803      	ldr	r3, [r0, #0]
    aba4:	0018      	movs	r0, r3
    aba6:	930d      	str	r3, [sp, #52]	; 0x34
    aba8:	f000 fd77 	bl	b69a <strlen>
    abac:	2300      	movs	r3, #0
    abae:	9312      	str	r3, [sp, #72]	; 0x48
    abb0:	6823      	ldr	r3, [r4, #0]
    abb2:	900e      	str	r0, [sp, #56]	; 0x38
    abb4:	930c      	str	r3, [sp, #48]	; 0x30
    abb6:	990c      	ldr	r1, [sp, #48]	; 0x30
    abb8:	7e27      	ldrb	r7, [r4, #24]
    abba:	682b      	ldr	r3, [r5, #0]
    abbc:	2207      	movs	r2, #7
    abbe:	05c9      	lsls	r1, r1, #23
    abc0:	d547      	bpl.n	ac52 <_printf_float+0xc2>
    abc2:	189b      	adds	r3, r3, r2
    abc4:	4393      	bics	r3, r2
    abc6:	001a      	movs	r2, r3
    abc8:	3208      	adds	r2, #8
    abca:	602a      	str	r2, [r5, #0]
    abcc:	681a      	ldr	r2, [r3, #0]
    abce:	685b      	ldr	r3, [r3, #4]
    abd0:	64a2      	str	r2, [r4, #72]	; 0x48
    abd2:	64e3      	str	r3, [r4, #76]	; 0x4c
    abd4:	2201      	movs	r2, #1
    abd6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    abd8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    abda:	006b      	lsls	r3, r5, #1
    abdc:	085b      	lsrs	r3, r3, #1
    abde:	930f      	str	r3, [sp, #60]	; 0x3c
    abe0:	4252      	negs	r2, r2
    abe2:	4ba7      	ldr	r3, [pc, #668]	; (ae80 <_printf_float+0x2f0>)
    abe4:	0030      	movs	r0, r6
    abe6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    abe8:	f005 f806 	bl	fbf8 <__aeabi_dcmpun>
    abec:	2800      	cmp	r0, #0
    abee:	d000      	beq.n	abf2 <_printf_float+0x62>
    abf0:	e206      	b.n	b000 <_printf_float+0x470>
    abf2:	2201      	movs	r2, #1
    abf4:	4ba2      	ldr	r3, [pc, #648]	; (ae80 <_printf_float+0x2f0>)
    abf6:	4252      	negs	r2, r2
    abf8:	0030      	movs	r0, r6
    abfa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    abfc:	f003 f822 	bl	dc44 <__aeabi_dcmple>
    ac00:	2800      	cmp	r0, #0
    ac02:	d000      	beq.n	ac06 <_printf_float+0x76>
    ac04:	e1fc      	b.n	b000 <_printf_float+0x470>
    ac06:	2200      	movs	r2, #0
    ac08:	2300      	movs	r3, #0
    ac0a:	0030      	movs	r0, r6
    ac0c:	0029      	movs	r1, r5
    ac0e:	f003 f80f 	bl	dc30 <__aeabi_dcmplt>
    ac12:	2800      	cmp	r0, #0
    ac14:	d003      	beq.n	ac1e <_printf_float+0x8e>
    ac16:	0023      	movs	r3, r4
    ac18:	222d      	movs	r2, #45	; 0x2d
    ac1a:	3343      	adds	r3, #67	; 0x43
    ac1c:	701a      	strb	r2, [r3, #0]
    ac1e:	4d99      	ldr	r5, [pc, #612]	; (ae84 <_printf_float+0x2f4>)
    ac20:	2f47      	cmp	r7, #71	; 0x47
    ac22:	d800      	bhi.n	ac26 <_printf_float+0x96>
    ac24:	4d98      	ldr	r5, [pc, #608]	; (ae88 <_printf_float+0x2f8>)
    ac26:	2303      	movs	r3, #3
    ac28:	2600      	movs	r6, #0
    ac2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ac2c:	6123      	str	r3, [r4, #16]
    ac2e:	3301      	adds	r3, #1
    ac30:	439a      	bics	r2, r3
    ac32:	6022      	str	r2, [r4, #0]
    ac34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac36:	aa13      	add	r2, sp, #76	; 0x4c
    ac38:	9300      	str	r3, [sp, #0]
    ac3a:	0021      	movs	r1, r4
    ac3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ac40:	f000 f9f2 	bl	b028 <_printf_common>
    ac44:	1c43      	adds	r3, r0, #1
    ac46:	d000      	beq.n	ac4a <_printf_float+0xba>
    ac48:	e09c      	b.n	ad84 <_printf_float+0x1f4>
    ac4a:	2001      	movs	r0, #1
    ac4c:	4240      	negs	r0, r0
    ac4e:	b015      	add	sp, #84	; 0x54
    ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac52:	3307      	adds	r3, #7
    ac54:	e7b6      	b.n	abc4 <_printf_float+0x34>
    ac56:	2380      	movs	r3, #128	; 0x80
    ac58:	6862      	ldr	r2, [r4, #4]
    ac5a:	00db      	lsls	r3, r3, #3
    ac5c:	1c51      	adds	r1, r2, #1
    ac5e:	d145      	bne.n	acec <_printf_float+0x15c>
    ac60:	3207      	adds	r2, #7
    ac62:	6062      	str	r2, [r4, #4]
    ac64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ac66:	2100      	movs	r1, #0
    ac68:	4313      	orrs	r3, r2
    ac6a:	aa12      	add	r2, sp, #72	; 0x48
    ac6c:	9205      	str	r2, [sp, #20]
    ac6e:	aa11      	add	r2, sp, #68	; 0x44
    ac70:	9203      	str	r2, [sp, #12]
    ac72:	2223      	movs	r2, #35	; 0x23
    ac74:	6023      	str	r3, [r4, #0]
    ac76:	9106      	str	r1, [sp, #24]
    ac78:	9301      	str	r3, [sp, #4]
    ac7a:	a908      	add	r1, sp, #32
    ac7c:	6863      	ldr	r3, [r4, #4]
    ac7e:	1852      	adds	r2, r2, r1
    ac80:	9202      	str	r2, [sp, #8]
    ac82:	9300      	str	r3, [sp, #0]
    ac84:	0032      	movs	r2, r6
    ac86:	002b      	movs	r3, r5
    ac88:	9704      	str	r7, [sp, #16]
    ac8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ac8c:	f7ff fee4 	bl	aa58 <__cvt>
    ac90:	2320      	movs	r3, #32
    ac92:	003a      	movs	r2, r7
    ac94:	0005      	movs	r5, r0
    ac96:	439a      	bics	r2, r3
    ac98:	2a47      	cmp	r2, #71	; 0x47
    ac9a:	d107      	bne.n	acac <_printf_float+0x11c>
    ac9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ac9e:	1cda      	adds	r2, r3, #3
    aca0:	db02      	blt.n	aca8 <_printf_float+0x118>
    aca2:	6862      	ldr	r2, [r4, #4]
    aca4:	4293      	cmp	r3, r2
    aca6:	dd5b      	ble.n	ad60 <_printf_float+0x1d0>
    aca8:	3f02      	subs	r7, #2
    acaa:	b2ff      	uxtb	r7, r7
    acac:	9911      	ldr	r1, [sp, #68]	; 0x44
    acae:	2f65      	cmp	r7, #101	; 0x65
    acb0:	d83b      	bhi.n	ad2a <_printf_float+0x19a>
    acb2:	0020      	movs	r0, r4
    acb4:	3901      	subs	r1, #1
    acb6:	003a      	movs	r2, r7
    acb8:	3050      	adds	r0, #80	; 0x50
    acba:	9111      	str	r1, [sp, #68]	; 0x44
    acbc:	f7ff ff30 	bl	ab20 <__exponent>
    acc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    acc2:	0006      	movs	r6, r0
    acc4:	1883      	adds	r3, r0, r2
    acc6:	6123      	str	r3, [r4, #16]
    acc8:	2a01      	cmp	r2, #1
    acca:	dc02      	bgt.n	acd2 <_printf_float+0x142>
    accc:	6822      	ldr	r2, [r4, #0]
    acce:	07d2      	lsls	r2, r2, #31
    acd0:	d501      	bpl.n	acd6 <_printf_float+0x146>
    acd2:	3301      	adds	r3, #1
    acd4:	6123      	str	r3, [r4, #16]
    acd6:	2323      	movs	r3, #35	; 0x23
    acd8:	aa08      	add	r2, sp, #32
    acda:	189b      	adds	r3, r3, r2
    acdc:	781b      	ldrb	r3, [r3, #0]
    acde:	2b00      	cmp	r3, #0
    ace0:	d0a8      	beq.n	ac34 <_printf_float+0xa4>
    ace2:	0023      	movs	r3, r4
    ace4:	222d      	movs	r2, #45	; 0x2d
    ace6:	3343      	adds	r3, #67	; 0x43
    ace8:	701a      	strb	r2, [r3, #0]
    acea:	e7a3      	b.n	ac34 <_printf_float+0xa4>
    acec:	2f67      	cmp	r7, #103	; 0x67
    acee:	d001      	beq.n	acf4 <_printf_float+0x164>
    acf0:	2f47      	cmp	r7, #71	; 0x47
    acf2:	d1b7      	bne.n	ac64 <_printf_float+0xd4>
    acf4:	2a00      	cmp	r2, #0
    acf6:	d016      	beq.n	ad26 <_printf_float+0x196>
    acf8:	990c      	ldr	r1, [sp, #48]	; 0x30
    acfa:	a808      	add	r0, sp, #32
    acfc:	430b      	orrs	r3, r1
    acfe:	2100      	movs	r1, #0
    ad00:	9106      	str	r1, [sp, #24]
    ad02:	a912      	add	r1, sp, #72	; 0x48
    ad04:	9105      	str	r1, [sp, #20]
    ad06:	a911      	add	r1, sp, #68	; 0x44
    ad08:	9103      	str	r1, [sp, #12]
    ad0a:	2123      	movs	r1, #35	; 0x23
    ad0c:	1809      	adds	r1, r1, r0
    ad0e:	6023      	str	r3, [r4, #0]
    ad10:	9301      	str	r3, [sp, #4]
    ad12:	9200      	str	r2, [sp, #0]
    ad14:	002b      	movs	r3, r5
    ad16:	9704      	str	r7, [sp, #16]
    ad18:	9102      	str	r1, [sp, #8]
    ad1a:	0032      	movs	r2, r6
    ad1c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ad1e:	f7ff fe9b 	bl	aa58 <__cvt>
    ad22:	0005      	movs	r5, r0
    ad24:	e7ba      	b.n	ac9c <_printf_float+0x10c>
    ad26:	2201      	movs	r2, #1
    ad28:	e79b      	b.n	ac62 <_printf_float+0xd2>
    ad2a:	2f66      	cmp	r7, #102	; 0x66
    ad2c:	d119      	bne.n	ad62 <_printf_float+0x1d2>
    ad2e:	6863      	ldr	r3, [r4, #4]
    ad30:	2900      	cmp	r1, #0
    ad32:	dd0c      	ble.n	ad4e <_printf_float+0x1be>
    ad34:	6121      	str	r1, [r4, #16]
    ad36:	2b00      	cmp	r3, #0
    ad38:	d102      	bne.n	ad40 <_printf_float+0x1b0>
    ad3a:	6822      	ldr	r2, [r4, #0]
    ad3c:	07d2      	lsls	r2, r2, #31
    ad3e:	d502      	bpl.n	ad46 <_printf_float+0x1b6>
    ad40:	3301      	adds	r3, #1
    ad42:	185b      	adds	r3, r3, r1
    ad44:	6123      	str	r3, [r4, #16]
    ad46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ad48:	2600      	movs	r6, #0
    ad4a:	65a3      	str	r3, [r4, #88]	; 0x58
    ad4c:	e7c3      	b.n	acd6 <_printf_float+0x146>
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d103      	bne.n	ad5a <_printf_float+0x1ca>
    ad52:	2201      	movs	r2, #1
    ad54:	6821      	ldr	r1, [r4, #0]
    ad56:	4211      	tst	r1, r2
    ad58:	d000      	beq.n	ad5c <_printf_float+0x1cc>
    ad5a:	1c9a      	adds	r2, r3, #2
    ad5c:	6122      	str	r2, [r4, #16]
    ad5e:	e7f2      	b.n	ad46 <_printf_float+0x1b6>
    ad60:	2767      	movs	r7, #103	; 0x67
    ad62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ad64:	9812      	ldr	r0, [sp, #72]	; 0x48
    ad66:	4283      	cmp	r3, r0
    ad68:	db05      	blt.n	ad76 <_printf_float+0x1e6>
    ad6a:	6822      	ldr	r2, [r4, #0]
    ad6c:	6123      	str	r3, [r4, #16]
    ad6e:	07d2      	lsls	r2, r2, #31
    ad70:	d5e9      	bpl.n	ad46 <_printf_float+0x1b6>
    ad72:	3301      	adds	r3, #1
    ad74:	e7e6      	b.n	ad44 <_printf_float+0x1b4>
    ad76:	2201      	movs	r2, #1
    ad78:	2b00      	cmp	r3, #0
    ad7a:	dc01      	bgt.n	ad80 <_printf_float+0x1f0>
    ad7c:	1892      	adds	r2, r2, r2
    ad7e:	1ad2      	subs	r2, r2, r3
    ad80:	1812      	adds	r2, r2, r0
    ad82:	e7eb      	b.n	ad5c <_printf_float+0x1cc>
    ad84:	6822      	ldr	r2, [r4, #0]
    ad86:	0553      	lsls	r3, r2, #21
    ad88:	d408      	bmi.n	ad9c <_printf_float+0x20c>
    ad8a:	6923      	ldr	r3, [r4, #16]
    ad8c:	002a      	movs	r2, r5
    ad8e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ad90:	9809      	ldr	r0, [sp, #36]	; 0x24
    ad92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ad94:	47a8      	blx	r5
    ad96:	1c43      	adds	r3, r0, #1
    ad98:	d129      	bne.n	adee <_printf_float+0x25e>
    ad9a:	e756      	b.n	ac4a <_printf_float+0xba>
    ad9c:	2f65      	cmp	r7, #101	; 0x65
    ad9e:	d800      	bhi.n	ada2 <_printf_float+0x212>
    ada0:	e0dc      	b.n	af5c <_printf_float+0x3cc>
    ada2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ada4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ada6:	2200      	movs	r2, #0
    ada8:	2300      	movs	r3, #0
    adaa:	f002 ff3b 	bl	dc24 <__aeabi_dcmpeq>
    adae:	2800      	cmp	r0, #0
    adb0:	d035      	beq.n	ae1e <_printf_float+0x28e>
    adb2:	2301      	movs	r3, #1
    adb4:	4a35      	ldr	r2, [pc, #212]	; (ae8c <_printf_float+0x2fc>)
    adb6:	990a      	ldr	r1, [sp, #40]	; 0x28
    adb8:	9809      	ldr	r0, [sp, #36]	; 0x24
    adba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    adbc:	47a8      	blx	r5
    adbe:	1c43      	adds	r3, r0, #1
    adc0:	d100      	bne.n	adc4 <_printf_float+0x234>
    adc2:	e742      	b.n	ac4a <_printf_float+0xba>
    adc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    adc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    adc8:	4293      	cmp	r3, r2
    adca:	db02      	blt.n	add2 <_printf_float+0x242>
    adcc:	6823      	ldr	r3, [r4, #0]
    adce:	07db      	lsls	r3, r3, #31
    add0:	d50d      	bpl.n	adee <_printf_float+0x25e>
    add2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    add4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    add6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    add8:	990a      	ldr	r1, [sp, #40]	; 0x28
    adda:	9809      	ldr	r0, [sp, #36]	; 0x24
    addc:	47a8      	blx	r5
    adde:	2500      	movs	r5, #0
    ade0:	1c43      	adds	r3, r0, #1
    ade2:	d100      	bne.n	ade6 <_printf_float+0x256>
    ade4:	e731      	b.n	ac4a <_printf_float+0xba>
    ade6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ade8:	3b01      	subs	r3, #1
    adea:	429d      	cmp	r5, r3
    adec:	db0b      	blt.n	ae06 <_printf_float+0x276>
    adee:	6823      	ldr	r3, [r4, #0]
    adf0:	2500      	movs	r5, #0
    adf2:	079b      	lsls	r3, r3, #30
    adf4:	d500      	bpl.n	adf8 <_printf_float+0x268>
    adf6:	e0fd      	b.n	aff4 <_printf_float+0x464>
    adf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    adfa:	68e0      	ldr	r0, [r4, #12]
    adfc:	4298      	cmp	r0, r3
    adfe:	db00      	blt.n	ae02 <_printf_float+0x272>
    ae00:	e725      	b.n	ac4e <_printf_float+0xbe>
    ae02:	0018      	movs	r0, r3
    ae04:	e723      	b.n	ac4e <_printf_float+0xbe>
    ae06:	0022      	movs	r2, r4
    ae08:	2301      	movs	r3, #1
    ae0a:	321a      	adds	r2, #26
    ae0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ae0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ae10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ae12:	47b0      	blx	r6
    ae14:	1c43      	adds	r3, r0, #1
    ae16:	d100      	bne.n	ae1a <_printf_float+0x28a>
    ae18:	e717      	b.n	ac4a <_printf_float+0xba>
    ae1a:	3501      	adds	r5, #1
    ae1c:	e7e3      	b.n	ade6 <_printf_float+0x256>
    ae1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ae20:	2b00      	cmp	r3, #0
    ae22:	dc35      	bgt.n	ae90 <_printf_float+0x300>
    ae24:	2301      	movs	r3, #1
    ae26:	4a19      	ldr	r2, [pc, #100]	; (ae8c <_printf_float+0x2fc>)
    ae28:	990a      	ldr	r1, [sp, #40]	; 0x28
    ae2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ae2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ae2e:	47b0      	blx	r6
    ae30:	1c43      	adds	r3, r0, #1
    ae32:	d100      	bne.n	ae36 <_printf_float+0x2a6>
    ae34:	e709      	b.n	ac4a <_printf_float+0xba>
    ae36:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d105      	bne.n	ae48 <_printf_float+0x2b8>
    ae3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae3e:	2b00      	cmp	r3, #0
    ae40:	d102      	bne.n	ae48 <_printf_float+0x2b8>
    ae42:	6823      	ldr	r3, [r4, #0]
    ae44:	07db      	lsls	r3, r3, #31
    ae46:	d5d2      	bpl.n	adee <_printf_float+0x25e>
    ae48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ae4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ae4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ae50:	9809      	ldr	r0, [sp, #36]	; 0x24
    ae52:	47b0      	blx	r6
    ae54:	2600      	movs	r6, #0
    ae56:	1c43      	adds	r3, r0, #1
    ae58:	d100      	bne.n	ae5c <_printf_float+0x2cc>
    ae5a:	e6f6      	b.n	ac4a <_printf_float+0xba>
    ae5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ae5e:	425b      	negs	r3, r3
    ae60:	429e      	cmp	r6, r3
    ae62:	db01      	blt.n	ae68 <_printf_float+0x2d8>
    ae64:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae66:	e791      	b.n	ad8c <_printf_float+0x1fc>
    ae68:	0022      	movs	r2, r4
    ae6a:	2301      	movs	r3, #1
    ae6c:	321a      	adds	r2, #26
    ae6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ae70:	9809      	ldr	r0, [sp, #36]	; 0x24
    ae72:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ae74:	47b8      	blx	r7
    ae76:	1c43      	adds	r3, r0, #1
    ae78:	d100      	bne.n	ae7c <_printf_float+0x2ec>
    ae7a:	e6e6      	b.n	ac4a <_printf_float+0xba>
    ae7c:	3601      	adds	r6, #1
    ae7e:	e7ed      	b.n	ae5c <_printf_float+0x2cc>
    ae80:	7fefffff 	.word	0x7fefffff
    ae84:	0001268e 	.word	0x0001268e
    ae88:	0001268a 	.word	0x0001268a
    ae8c:	0001269a 	.word	0x0001269a
    ae90:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ae92:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ae94:	429e      	cmp	r6, r3
    ae96:	dd00      	ble.n	ae9a <_printf_float+0x30a>
    ae98:	001e      	movs	r6, r3
    ae9a:	2e00      	cmp	r6, #0
    ae9c:	dc35      	bgt.n	af0a <_printf_float+0x37a>
    ae9e:	2300      	movs	r3, #0
    aea0:	930c      	str	r3, [sp, #48]	; 0x30
    aea2:	43f3      	mvns	r3, r6
    aea4:	17db      	asrs	r3, r3, #31
    aea6:	930f      	str	r3, [sp, #60]	; 0x3c
    aea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aeaa:	6da7      	ldr	r7, [r4, #88]	; 0x58
    aeac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aeae:	4033      	ands	r3, r6
    aeb0:	1afb      	subs	r3, r7, r3
    aeb2:	429a      	cmp	r2, r3
    aeb4:	db32      	blt.n	af1c <_printf_float+0x38c>
    aeb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aeb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    aeba:	4293      	cmp	r3, r2
    aebc:	db3c      	blt.n	af38 <_printf_float+0x3a8>
    aebe:	6823      	ldr	r3, [r4, #0]
    aec0:	07db      	lsls	r3, r3, #31
    aec2:	d439      	bmi.n	af38 <_printf_float+0x3a8>
    aec4:	9e12      	ldr	r6, [sp, #72]	; 0x48
    aec6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    aec8:	1bf3      	subs	r3, r6, r7
    aeca:	1ab6      	subs	r6, r6, r2
    aecc:	429e      	cmp	r6, r3
    aece:	dd00      	ble.n	aed2 <_printf_float+0x342>
    aed0:	001e      	movs	r6, r3
    aed2:	2e00      	cmp	r6, #0
    aed4:	dc39      	bgt.n	af4a <_printf_float+0x3ba>
    aed6:	43f7      	mvns	r7, r6
    aed8:	2500      	movs	r5, #0
    aeda:	17fb      	asrs	r3, r7, #31
    aedc:	930c      	str	r3, [sp, #48]	; 0x30
    aede:	9a11      	ldr	r2, [sp, #68]	; 0x44
    aee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    aee2:	990c      	ldr	r1, [sp, #48]	; 0x30
    aee4:	1a9b      	subs	r3, r3, r2
    aee6:	0032      	movs	r2, r6
    aee8:	400a      	ands	r2, r1
    aeea:	1a9b      	subs	r3, r3, r2
    aeec:	429d      	cmp	r5, r3
    aeee:	db00      	blt.n	aef2 <_printf_float+0x362>
    aef0:	e77d      	b.n	adee <_printf_float+0x25e>
    aef2:	0022      	movs	r2, r4
    aef4:	2301      	movs	r3, #1
    aef6:	321a      	adds	r2, #26
    aef8:	990a      	ldr	r1, [sp, #40]	; 0x28
    aefa:	9809      	ldr	r0, [sp, #36]	; 0x24
    aefc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    aefe:	47b8      	blx	r7
    af00:	1c43      	adds	r3, r0, #1
    af02:	d100      	bne.n	af06 <_printf_float+0x376>
    af04:	e6a1      	b.n	ac4a <_printf_float+0xba>
    af06:	3501      	adds	r5, #1
    af08:	e7e9      	b.n	aede <_printf_float+0x34e>
    af0a:	0033      	movs	r3, r6
    af0c:	002a      	movs	r2, r5
    af0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    af10:	9809      	ldr	r0, [sp, #36]	; 0x24
    af12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    af14:	47b8      	blx	r7
    af16:	1c43      	adds	r3, r0, #1
    af18:	d1c1      	bne.n	ae9e <_printf_float+0x30e>
    af1a:	e696      	b.n	ac4a <_printf_float+0xba>
    af1c:	0022      	movs	r2, r4
    af1e:	2301      	movs	r3, #1
    af20:	321a      	adds	r2, #26
    af22:	990a      	ldr	r1, [sp, #40]	; 0x28
    af24:	9809      	ldr	r0, [sp, #36]	; 0x24
    af26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    af28:	47b8      	blx	r7
    af2a:	1c43      	adds	r3, r0, #1
    af2c:	d100      	bne.n	af30 <_printf_float+0x3a0>
    af2e:	e68c      	b.n	ac4a <_printf_float+0xba>
    af30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af32:	3301      	adds	r3, #1
    af34:	930c      	str	r3, [sp, #48]	; 0x30
    af36:	e7b7      	b.n	aea8 <_printf_float+0x318>
    af38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    af3c:	990a      	ldr	r1, [sp, #40]	; 0x28
    af3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    af40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    af42:	47b0      	blx	r6
    af44:	1c43      	adds	r3, r0, #1
    af46:	d1bd      	bne.n	aec4 <_printf_float+0x334>
    af48:	e67f      	b.n	ac4a <_printf_float+0xba>
    af4a:	19ea      	adds	r2, r5, r7
    af4c:	0033      	movs	r3, r6
    af4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    af50:	9809      	ldr	r0, [sp, #36]	; 0x24
    af52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    af54:	47a8      	blx	r5
    af56:	1c43      	adds	r3, r0, #1
    af58:	d1bd      	bne.n	aed6 <_printf_float+0x346>
    af5a:	e676      	b.n	ac4a <_printf_float+0xba>
    af5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    af5e:	2b01      	cmp	r3, #1
    af60:	dc02      	bgt.n	af68 <_printf_float+0x3d8>
    af62:	2301      	movs	r3, #1
    af64:	421a      	tst	r2, r3
    af66:	d038      	beq.n	afda <_printf_float+0x44a>
    af68:	2301      	movs	r3, #1
    af6a:	002a      	movs	r2, r5
    af6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    af6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    af70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    af72:	47b8      	blx	r7
    af74:	1c43      	adds	r3, r0, #1
    af76:	d100      	bne.n	af7a <_printf_float+0x3ea>
    af78:	e667      	b.n	ac4a <_printf_float+0xba>
    af7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    af7e:	990a      	ldr	r1, [sp, #40]	; 0x28
    af80:	9809      	ldr	r0, [sp, #36]	; 0x24
    af82:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    af84:	47b8      	blx	r7
    af86:	1c43      	adds	r3, r0, #1
    af88:	d100      	bne.n	af8c <_printf_float+0x3fc>
    af8a:	e65e      	b.n	ac4a <_printf_float+0xba>
    af8c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    af8e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    af90:	2200      	movs	r2, #0
    af92:	2300      	movs	r3, #0
    af94:	f002 fe46 	bl	dc24 <__aeabi_dcmpeq>
    af98:	2800      	cmp	r0, #0
    af9a:	d008      	beq.n	afae <_printf_float+0x41e>
    af9c:	2500      	movs	r5, #0
    af9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    afa0:	3b01      	subs	r3, #1
    afa2:	429d      	cmp	r5, r3
    afa4:	db0d      	blt.n	afc2 <_printf_float+0x432>
    afa6:	0022      	movs	r2, r4
    afa8:	0033      	movs	r3, r6
    afaa:	3250      	adds	r2, #80	; 0x50
    afac:	e6ef      	b.n	ad8e <_printf_float+0x1fe>
    afae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    afb0:	1c6a      	adds	r2, r5, #1
    afb2:	3b01      	subs	r3, #1
    afb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    afb6:	9809      	ldr	r0, [sp, #36]	; 0x24
    afb8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    afba:	47a8      	blx	r5
    afbc:	1c43      	adds	r3, r0, #1
    afbe:	d1f2      	bne.n	afa6 <_printf_float+0x416>
    afc0:	e643      	b.n	ac4a <_printf_float+0xba>
    afc2:	0022      	movs	r2, r4
    afc4:	2301      	movs	r3, #1
    afc6:	321a      	adds	r2, #26
    afc8:	990a      	ldr	r1, [sp, #40]	; 0x28
    afca:	9809      	ldr	r0, [sp, #36]	; 0x24
    afcc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    afce:	47b8      	blx	r7
    afd0:	1c43      	adds	r3, r0, #1
    afd2:	d100      	bne.n	afd6 <_printf_float+0x446>
    afd4:	e639      	b.n	ac4a <_printf_float+0xba>
    afd6:	3501      	adds	r5, #1
    afd8:	e7e1      	b.n	af9e <_printf_float+0x40e>
    afda:	002a      	movs	r2, r5
    afdc:	e7ea      	b.n	afb4 <_printf_float+0x424>
    afde:	0022      	movs	r2, r4
    afe0:	2301      	movs	r3, #1
    afe2:	3219      	adds	r2, #25
    afe4:	990a      	ldr	r1, [sp, #40]	; 0x28
    afe6:	9809      	ldr	r0, [sp, #36]	; 0x24
    afe8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    afea:	47b0      	blx	r6
    afec:	1c43      	adds	r3, r0, #1
    afee:	d100      	bne.n	aff2 <_printf_float+0x462>
    aff0:	e62b      	b.n	ac4a <_printf_float+0xba>
    aff2:	3501      	adds	r5, #1
    aff4:	68e3      	ldr	r3, [r4, #12]
    aff6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    aff8:	1a9b      	subs	r3, r3, r2
    affa:	429d      	cmp	r5, r3
    affc:	dbef      	blt.n	afde <_printf_float+0x44e>
    affe:	e6fb      	b.n	adf8 <_printf_float+0x268>
    b000:	0032      	movs	r2, r6
    b002:	002b      	movs	r3, r5
    b004:	0030      	movs	r0, r6
    b006:	0029      	movs	r1, r5
    b008:	f004 fdf6 	bl	fbf8 <__aeabi_dcmpun>
    b00c:	2800      	cmp	r0, #0
    b00e:	d100      	bne.n	b012 <_printf_float+0x482>
    b010:	e621      	b.n	ac56 <_printf_float+0xc6>
    b012:	4d03      	ldr	r5, [pc, #12]	; (b020 <_printf_float+0x490>)
    b014:	2f47      	cmp	r7, #71	; 0x47
    b016:	d900      	bls.n	b01a <_printf_float+0x48a>
    b018:	e605      	b.n	ac26 <_printf_float+0x96>
    b01a:	4d02      	ldr	r5, [pc, #8]	; (b024 <_printf_float+0x494>)
    b01c:	e603      	b.n	ac26 <_printf_float+0x96>
    b01e:	46c0      	nop			; (mov r8, r8)
    b020:	00012696 	.word	0x00012696
    b024:	00012692 	.word	0x00012692

0000b028 <_printf_common>:
    b028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b02a:	0015      	movs	r5, r2
    b02c:	9301      	str	r3, [sp, #4]
    b02e:	688a      	ldr	r2, [r1, #8]
    b030:	690b      	ldr	r3, [r1, #16]
    b032:	9000      	str	r0, [sp, #0]
    b034:	000c      	movs	r4, r1
    b036:	4293      	cmp	r3, r2
    b038:	da00      	bge.n	b03c <_printf_common+0x14>
    b03a:	0013      	movs	r3, r2
    b03c:	0022      	movs	r2, r4
    b03e:	602b      	str	r3, [r5, #0]
    b040:	3243      	adds	r2, #67	; 0x43
    b042:	7812      	ldrb	r2, [r2, #0]
    b044:	2a00      	cmp	r2, #0
    b046:	d001      	beq.n	b04c <_printf_common+0x24>
    b048:	3301      	adds	r3, #1
    b04a:	602b      	str	r3, [r5, #0]
    b04c:	6823      	ldr	r3, [r4, #0]
    b04e:	069b      	lsls	r3, r3, #26
    b050:	d502      	bpl.n	b058 <_printf_common+0x30>
    b052:	682b      	ldr	r3, [r5, #0]
    b054:	3302      	adds	r3, #2
    b056:	602b      	str	r3, [r5, #0]
    b058:	2706      	movs	r7, #6
    b05a:	6823      	ldr	r3, [r4, #0]
    b05c:	401f      	ands	r7, r3
    b05e:	d027      	beq.n	b0b0 <_printf_common+0x88>
    b060:	0023      	movs	r3, r4
    b062:	3343      	adds	r3, #67	; 0x43
    b064:	781b      	ldrb	r3, [r3, #0]
    b066:	1e5a      	subs	r2, r3, #1
    b068:	4193      	sbcs	r3, r2
    b06a:	6822      	ldr	r2, [r4, #0]
    b06c:	0692      	lsls	r2, r2, #26
    b06e:	d430      	bmi.n	b0d2 <_printf_common+0xaa>
    b070:	0022      	movs	r2, r4
    b072:	9901      	ldr	r1, [sp, #4]
    b074:	3243      	adds	r2, #67	; 0x43
    b076:	9800      	ldr	r0, [sp, #0]
    b078:	9e08      	ldr	r6, [sp, #32]
    b07a:	47b0      	blx	r6
    b07c:	1c43      	adds	r3, r0, #1
    b07e:	d025      	beq.n	b0cc <_printf_common+0xa4>
    b080:	2306      	movs	r3, #6
    b082:	6820      	ldr	r0, [r4, #0]
    b084:	682a      	ldr	r2, [r5, #0]
    b086:	68e1      	ldr	r1, [r4, #12]
    b088:	4003      	ands	r3, r0
    b08a:	2500      	movs	r5, #0
    b08c:	2b04      	cmp	r3, #4
    b08e:	d103      	bne.n	b098 <_printf_common+0x70>
    b090:	1a8d      	subs	r5, r1, r2
    b092:	43eb      	mvns	r3, r5
    b094:	17db      	asrs	r3, r3, #31
    b096:	401d      	ands	r5, r3
    b098:	68a3      	ldr	r3, [r4, #8]
    b09a:	6922      	ldr	r2, [r4, #16]
    b09c:	4293      	cmp	r3, r2
    b09e:	dd01      	ble.n	b0a4 <_printf_common+0x7c>
    b0a0:	1a9b      	subs	r3, r3, r2
    b0a2:	18ed      	adds	r5, r5, r3
    b0a4:	2700      	movs	r7, #0
    b0a6:	42bd      	cmp	r5, r7
    b0a8:	d120      	bne.n	b0ec <_printf_common+0xc4>
    b0aa:	2000      	movs	r0, #0
    b0ac:	e010      	b.n	b0d0 <_printf_common+0xa8>
    b0ae:	3701      	adds	r7, #1
    b0b0:	68e3      	ldr	r3, [r4, #12]
    b0b2:	682a      	ldr	r2, [r5, #0]
    b0b4:	1a9b      	subs	r3, r3, r2
    b0b6:	429f      	cmp	r7, r3
    b0b8:	dad2      	bge.n	b060 <_printf_common+0x38>
    b0ba:	0022      	movs	r2, r4
    b0bc:	2301      	movs	r3, #1
    b0be:	3219      	adds	r2, #25
    b0c0:	9901      	ldr	r1, [sp, #4]
    b0c2:	9800      	ldr	r0, [sp, #0]
    b0c4:	9e08      	ldr	r6, [sp, #32]
    b0c6:	47b0      	blx	r6
    b0c8:	1c43      	adds	r3, r0, #1
    b0ca:	d1f0      	bne.n	b0ae <_printf_common+0x86>
    b0cc:	2001      	movs	r0, #1
    b0ce:	4240      	negs	r0, r0
    b0d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b0d2:	2030      	movs	r0, #48	; 0x30
    b0d4:	18e1      	adds	r1, r4, r3
    b0d6:	3143      	adds	r1, #67	; 0x43
    b0d8:	7008      	strb	r0, [r1, #0]
    b0da:	0021      	movs	r1, r4
    b0dc:	1c5a      	adds	r2, r3, #1
    b0de:	3145      	adds	r1, #69	; 0x45
    b0e0:	7809      	ldrb	r1, [r1, #0]
    b0e2:	18a2      	adds	r2, r4, r2
    b0e4:	3243      	adds	r2, #67	; 0x43
    b0e6:	3302      	adds	r3, #2
    b0e8:	7011      	strb	r1, [r2, #0]
    b0ea:	e7c1      	b.n	b070 <_printf_common+0x48>
    b0ec:	0022      	movs	r2, r4
    b0ee:	2301      	movs	r3, #1
    b0f0:	321a      	adds	r2, #26
    b0f2:	9901      	ldr	r1, [sp, #4]
    b0f4:	9800      	ldr	r0, [sp, #0]
    b0f6:	9e08      	ldr	r6, [sp, #32]
    b0f8:	47b0      	blx	r6
    b0fa:	1c43      	adds	r3, r0, #1
    b0fc:	d0e6      	beq.n	b0cc <_printf_common+0xa4>
    b0fe:	3701      	adds	r7, #1
    b100:	e7d1      	b.n	b0a6 <_printf_common+0x7e>
	...

0000b104 <_printf_i>:
    b104:	b5f0      	push	{r4, r5, r6, r7, lr}
    b106:	b08b      	sub	sp, #44	; 0x2c
    b108:	9206      	str	r2, [sp, #24]
    b10a:	000a      	movs	r2, r1
    b10c:	3243      	adds	r2, #67	; 0x43
    b10e:	9307      	str	r3, [sp, #28]
    b110:	9005      	str	r0, [sp, #20]
    b112:	9204      	str	r2, [sp, #16]
    b114:	7e0a      	ldrb	r2, [r1, #24]
    b116:	000c      	movs	r4, r1
    b118:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b11a:	2a6e      	cmp	r2, #110	; 0x6e
    b11c:	d100      	bne.n	b120 <_printf_i+0x1c>
    b11e:	e08f      	b.n	b240 <_printf_i+0x13c>
    b120:	d817      	bhi.n	b152 <_printf_i+0x4e>
    b122:	2a63      	cmp	r2, #99	; 0x63
    b124:	d02c      	beq.n	b180 <_printf_i+0x7c>
    b126:	d808      	bhi.n	b13a <_printf_i+0x36>
    b128:	2a00      	cmp	r2, #0
    b12a:	d100      	bne.n	b12e <_printf_i+0x2a>
    b12c:	e099      	b.n	b262 <_printf_i+0x15e>
    b12e:	2a58      	cmp	r2, #88	; 0x58
    b130:	d054      	beq.n	b1dc <_printf_i+0xd8>
    b132:	0026      	movs	r6, r4
    b134:	3642      	adds	r6, #66	; 0x42
    b136:	7032      	strb	r2, [r6, #0]
    b138:	e029      	b.n	b18e <_printf_i+0x8a>
    b13a:	2a64      	cmp	r2, #100	; 0x64
    b13c:	d001      	beq.n	b142 <_printf_i+0x3e>
    b13e:	2a69      	cmp	r2, #105	; 0x69
    b140:	d1f7      	bne.n	b132 <_printf_i+0x2e>
    b142:	6821      	ldr	r1, [r4, #0]
    b144:	681a      	ldr	r2, [r3, #0]
    b146:	0608      	lsls	r0, r1, #24
    b148:	d523      	bpl.n	b192 <_printf_i+0x8e>
    b14a:	1d11      	adds	r1, r2, #4
    b14c:	6019      	str	r1, [r3, #0]
    b14e:	6815      	ldr	r5, [r2, #0]
    b150:	e025      	b.n	b19e <_printf_i+0x9a>
    b152:	2a73      	cmp	r2, #115	; 0x73
    b154:	d100      	bne.n	b158 <_printf_i+0x54>
    b156:	e088      	b.n	b26a <_printf_i+0x166>
    b158:	d808      	bhi.n	b16c <_printf_i+0x68>
    b15a:	2a6f      	cmp	r2, #111	; 0x6f
    b15c:	d029      	beq.n	b1b2 <_printf_i+0xae>
    b15e:	2a70      	cmp	r2, #112	; 0x70
    b160:	d1e7      	bne.n	b132 <_printf_i+0x2e>
    b162:	2220      	movs	r2, #32
    b164:	6809      	ldr	r1, [r1, #0]
    b166:	430a      	orrs	r2, r1
    b168:	6022      	str	r2, [r4, #0]
    b16a:	e003      	b.n	b174 <_printf_i+0x70>
    b16c:	2a75      	cmp	r2, #117	; 0x75
    b16e:	d020      	beq.n	b1b2 <_printf_i+0xae>
    b170:	2a78      	cmp	r2, #120	; 0x78
    b172:	d1de      	bne.n	b132 <_printf_i+0x2e>
    b174:	0022      	movs	r2, r4
    b176:	2178      	movs	r1, #120	; 0x78
    b178:	3245      	adds	r2, #69	; 0x45
    b17a:	7011      	strb	r1, [r2, #0]
    b17c:	4a6c      	ldr	r2, [pc, #432]	; (b330 <_printf_i+0x22c>)
    b17e:	e030      	b.n	b1e2 <_printf_i+0xde>
    b180:	000e      	movs	r6, r1
    b182:	681a      	ldr	r2, [r3, #0]
    b184:	3642      	adds	r6, #66	; 0x42
    b186:	1d11      	adds	r1, r2, #4
    b188:	6019      	str	r1, [r3, #0]
    b18a:	6813      	ldr	r3, [r2, #0]
    b18c:	7033      	strb	r3, [r6, #0]
    b18e:	2301      	movs	r3, #1
    b190:	e079      	b.n	b286 <_printf_i+0x182>
    b192:	0649      	lsls	r1, r1, #25
    b194:	d5d9      	bpl.n	b14a <_printf_i+0x46>
    b196:	1d11      	adds	r1, r2, #4
    b198:	6019      	str	r1, [r3, #0]
    b19a:	2300      	movs	r3, #0
    b19c:	5ed5      	ldrsh	r5, [r2, r3]
    b19e:	2d00      	cmp	r5, #0
    b1a0:	da03      	bge.n	b1aa <_printf_i+0xa6>
    b1a2:	232d      	movs	r3, #45	; 0x2d
    b1a4:	9a04      	ldr	r2, [sp, #16]
    b1a6:	426d      	negs	r5, r5
    b1a8:	7013      	strb	r3, [r2, #0]
    b1aa:	4b62      	ldr	r3, [pc, #392]	; (b334 <_printf_i+0x230>)
    b1ac:	270a      	movs	r7, #10
    b1ae:	9303      	str	r3, [sp, #12]
    b1b0:	e02f      	b.n	b212 <_printf_i+0x10e>
    b1b2:	6820      	ldr	r0, [r4, #0]
    b1b4:	6819      	ldr	r1, [r3, #0]
    b1b6:	0605      	lsls	r5, r0, #24
    b1b8:	d503      	bpl.n	b1c2 <_printf_i+0xbe>
    b1ba:	1d08      	adds	r0, r1, #4
    b1bc:	6018      	str	r0, [r3, #0]
    b1be:	680d      	ldr	r5, [r1, #0]
    b1c0:	e005      	b.n	b1ce <_printf_i+0xca>
    b1c2:	0640      	lsls	r0, r0, #25
    b1c4:	d5f9      	bpl.n	b1ba <_printf_i+0xb6>
    b1c6:	680d      	ldr	r5, [r1, #0]
    b1c8:	1d08      	adds	r0, r1, #4
    b1ca:	6018      	str	r0, [r3, #0]
    b1cc:	b2ad      	uxth	r5, r5
    b1ce:	4b59      	ldr	r3, [pc, #356]	; (b334 <_printf_i+0x230>)
    b1d0:	2708      	movs	r7, #8
    b1d2:	9303      	str	r3, [sp, #12]
    b1d4:	2a6f      	cmp	r2, #111	; 0x6f
    b1d6:	d018      	beq.n	b20a <_printf_i+0x106>
    b1d8:	270a      	movs	r7, #10
    b1da:	e016      	b.n	b20a <_printf_i+0x106>
    b1dc:	3145      	adds	r1, #69	; 0x45
    b1de:	700a      	strb	r2, [r1, #0]
    b1e0:	4a54      	ldr	r2, [pc, #336]	; (b334 <_printf_i+0x230>)
    b1e2:	9203      	str	r2, [sp, #12]
    b1e4:	681a      	ldr	r2, [r3, #0]
    b1e6:	6821      	ldr	r1, [r4, #0]
    b1e8:	1d10      	adds	r0, r2, #4
    b1ea:	6018      	str	r0, [r3, #0]
    b1ec:	6815      	ldr	r5, [r2, #0]
    b1ee:	0608      	lsls	r0, r1, #24
    b1f0:	d522      	bpl.n	b238 <_printf_i+0x134>
    b1f2:	07cb      	lsls	r3, r1, #31
    b1f4:	d502      	bpl.n	b1fc <_printf_i+0xf8>
    b1f6:	2320      	movs	r3, #32
    b1f8:	4319      	orrs	r1, r3
    b1fa:	6021      	str	r1, [r4, #0]
    b1fc:	2710      	movs	r7, #16
    b1fe:	2d00      	cmp	r5, #0
    b200:	d103      	bne.n	b20a <_printf_i+0x106>
    b202:	2320      	movs	r3, #32
    b204:	6822      	ldr	r2, [r4, #0]
    b206:	439a      	bics	r2, r3
    b208:	6022      	str	r2, [r4, #0]
    b20a:	0023      	movs	r3, r4
    b20c:	2200      	movs	r2, #0
    b20e:	3343      	adds	r3, #67	; 0x43
    b210:	701a      	strb	r2, [r3, #0]
    b212:	6863      	ldr	r3, [r4, #4]
    b214:	60a3      	str	r3, [r4, #8]
    b216:	2b00      	cmp	r3, #0
    b218:	db5c      	blt.n	b2d4 <_printf_i+0x1d0>
    b21a:	2204      	movs	r2, #4
    b21c:	6821      	ldr	r1, [r4, #0]
    b21e:	4391      	bics	r1, r2
    b220:	6021      	str	r1, [r4, #0]
    b222:	2d00      	cmp	r5, #0
    b224:	d158      	bne.n	b2d8 <_printf_i+0x1d4>
    b226:	9e04      	ldr	r6, [sp, #16]
    b228:	2b00      	cmp	r3, #0
    b22a:	d064      	beq.n	b2f6 <_printf_i+0x1f2>
    b22c:	0026      	movs	r6, r4
    b22e:	9b03      	ldr	r3, [sp, #12]
    b230:	3642      	adds	r6, #66	; 0x42
    b232:	781b      	ldrb	r3, [r3, #0]
    b234:	7033      	strb	r3, [r6, #0]
    b236:	e05e      	b.n	b2f6 <_printf_i+0x1f2>
    b238:	0648      	lsls	r0, r1, #25
    b23a:	d5da      	bpl.n	b1f2 <_printf_i+0xee>
    b23c:	b2ad      	uxth	r5, r5
    b23e:	e7d8      	b.n	b1f2 <_printf_i+0xee>
    b240:	6809      	ldr	r1, [r1, #0]
    b242:	681a      	ldr	r2, [r3, #0]
    b244:	0608      	lsls	r0, r1, #24
    b246:	d505      	bpl.n	b254 <_printf_i+0x150>
    b248:	1d11      	adds	r1, r2, #4
    b24a:	6019      	str	r1, [r3, #0]
    b24c:	6813      	ldr	r3, [r2, #0]
    b24e:	6962      	ldr	r2, [r4, #20]
    b250:	601a      	str	r2, [r3, #0]
    b252:	e006      	b.n	b262 <_printf_i+0x15e>
    b254:	0649      	lsls	r1, r1, #25
    b256:	d5f7      	bpl.n	b248 <_printf_i+0x144>
    b258:	1d11      	adds	r1, r2, #4
    b25a:	6019      	str	r1, [r3, #0]
    b25c:	6813      	ldr	r3, [r2, #0]
    b25e:	8aa2      	ldrh	r2, [r4, #20]
    b260:	801a      	strh	r2, [r3, #0]
    b262:	2300      	movs	r3, #0
    b264:	9e04      	ldr	r6, [sp, #16]
    b266:	6123      	str	r3, [r4, #16]
    b268:	e054      	b.n	b314 <_printf_i+0x210>
    b26a:	681a      	ldr	r2, [r3, #0]
    b26c:	1d11      	adds	r1, r2, #4
    b26e:	6019      	str	r1, [r3, #0]
    b270:	6816      	ldr	r6, [r2, #0]
    b272:	2100      	movs	r1, #0
    b274:	6862      	ldr	r2, [r4, #4]
    b276:	0030      	movs	r0, r6
    b278:	f001 fc7a 	bl	cb70 <memchr>
    b27c:	2800      	cmp	r0, #0
    b27e:	d001      	beq.n	b284 <_printf_i+0x180>
    b280:	1b80      	subs	r0, r0, r6
    b282:	6060      	str	r0, [r4, #4]
    b284:	6863      	ldr	r3, [r4, #4]
    b286:	6123      	str	r3, [r4, #16]
    b288:	2300      	movs	r3, #0
    b28a:	9a04      	ldr	r2, [sp, #16]
    b28c:	7013      	strb	r3, [r2, #0]
    b28e:	e041      	b.n	b314 <_printf_i+0x210>
    b290:	6923      	ldr	r3, [r4, #16]
    b292:	0032      	movs	r2, r6
    b294:	9906      	ldr	r1, [sp, #24]
    b296:	9805      	ldr	r0, [sp, #20]
    b298:	9d07      	ldr	r5, [sp, #28]
    b29a:	47a8      	blx	r5
    b29c:	1c43      	adds	r3, r0, #1
    b29e:	d043      	beq.n	b328 <_printf_i+0x224>
    b2a0:	6823      	ldr	r3, [r4, #0]
    b2a2:	2500      	movs	r5, #0
    b2a4:	079b      	lsls	r3, r3, #30
    b2a6:	d40f      	bmi.n	b2c8 <_printf_i+0x1c4>
    b2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2aa:	68e0      	ldr	r0, [r4, #12]
    b2ac:	4298      	cmp	r0, r3
    b2ae:	da3d      	bge.n	b32c <_printf_i+0x228>
    b2b0:	0018      	movs	r0, r3
    b2b2:	e03b      	b.n	b32c <_printf_i+0x228>
    b2b4:	0022      	movs	r2, r4
    b2b6:	2301      	movs	r3, #1
    b2b8:	3219      	adds	r2, #25
    b2ba:	9906      	ldr	r1, [sp, #24]
    b2bc:	9805      	ldr	r0, [sp, #20]
    b2be:	9e07      	ldr	r6, [sp, #28]
    b2c0:	47b0      	blx	r6
    b2c2:	1c43      	adds	r3, r0, #1
    b2c4:	d030      	beq.n	b328 <_printf_i+0x224>
    b2c6:	3501      	adds	r5, #1
    b2c8:	68e3      	ldr	r3, [r4, #12]
    b2ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b2cc:	1a9b      	subs	r3, r3, r2
    b2ce:	429d      	cmp	r5, r3
    b2d0:	dbf0      	blt.n	b2b4 <_printf_i+0x1b0>
    b2d2:	e7e9      	b.n	b2a8 <_printf_i+0x1a4>
    b2d4:	2d00      	cmp	r5, #0
    b2d6:	d0a9      	beq.n	b22c <_printf_i+0x128>
    b2d8:	9e04      	ldr	r6, [sp, #16]
    b2da:	0028      	movs	r0, r5
    b2dc:	0039      	movs	r1, r7
    b2de:	f002 fba1 	bl	da24 <__aeabi_uidivmod>
    b2e2:	9b03      	ldr	r3, [sp, #12]
    b2e4:	3e01      	subs	r6, #1
    b2e6:	5c5b      	ldrb	r3, [r3, r1]
    b2e8:	0028      	movs	r0, r5
    b2ea:	7033      	strb	r3, [r6, #0]
    b2ec:	0039      	movs	r1, r7
    b2ee:	f002 fb13 	bl	d918 <__udivsi3>
    b2f2:	1e05      	subs	r5, r0, #0
    b2f4:	d1f1      	bne.n	b2da <_printf_i+0x1d6>
    b2f6:	2f08      	cmp	r7, #8
    b2f8:	d109      	bne.n	b30e <_printf_i+0x20a>
    b2fa:	6823      	ldr	r3, [r4, #0]
    b2fc:	07db      	lsls	r3, r3, #31
    b2fe:	d506      	bpl.n	b30e <_printf_i+0x20a>
    b300:	6863      	ldr	r3, [r4, #4]
    b302:	6922      	ldr	r2, [r4, #16]
    b304:	4293      	cmp	r3, r2
    b306:	dc02      	bgt.n	b30e <_printf_i+0x20a>
    b308:	2330      	movs	r3, #48	; 0x30
    b30a:	3e01      	subs	r6, #1
    b30c:	7033      	strb	r3, [r6, #0]
    b30e:	9b04      	ldr	r3, [sp, #16]
    b310:	1b9b      	subs	r3, r3, r6
    b312:	6123      	str	r3, [r4, #16]
    b314:	9b07      	ldr	r3, [sp, #28]
    b316:	aa09      	add	r2, sp, #36	; 0x24
    b318:	9300      	str	r3, [sp, #0]
    b31a:	0021      	movs	r1, r4
    b31c:	9b06      	ldr	r3, [sp, #24]
    b31e:	9805      	ldr	r0, [sp, #20]
    b320:	f7ff fe82 	bl	b028 <_printf_common>
    b324:	1c43      	adds	r3, r0, #1
    b326:	d1b3      	bne.n	b290 <_printf_i+0x18c>
    b328:	2001      	movs	r0, #1
    b32a:	4240      	negs	r0, r0
    b32c:	b00b      	add	sp, #44	; 0x2c
    b32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b330:	000126ad 	.word	0x000126ad
    b334:	0001269c 	.word	0x0001269c

0000b338 <iprintf>:
    b338:	b40f      	push	{r0, r1, r2, r3}
    b33a:	4b0b      	ldr	r3, [pc, #44]	; (b368 <iprintf+0x30>)
    b33c:	b513      	push	{r0, r1, r4, lr}
    b33e:	681c      	ldr	r4, [r3, #0]
    b340:	2c00      	cmp	r4, #0
    b342:	d005      	beq.n	b350 <iprintf+0x18>
    b344:	69a3      	ldr	r3, [r4, #24]
    b346:	2b00      	cmp	r3, #0
    b348:	d102      	bne.n	b350 <iprintf+0x18>
    b34a:	0020      	movs	r0, r4
    b34c:	f001 fb02 	bl	c954 <__sinit>
    b350:	ab05      	add	r3, sp, #20
    b352:	9a04      	ldr	r2, [sp, #16]
    b354:	68a1      	ldr	r1, [r4, #8]
    b356:	0020      	movs	r0, r4
    b358:	9301      	str	r3, [sp, #4]
    b35a:	f002 f895 	bl	d488 <_vfiprintf_r>
    b35e:	bc16      	pop	{r1, r2, r4}
    b360:	bc08      	pop	{r3}
    b362:	b004      	add	sp, #16
    b364:	4718      	bx	r3
    b366:	46c0      	nop			; (mov r8, r8)
    b368:	20000010 	.word	0x20000010

0000b36c <putchar>:
    b36c:	4b08      	ldr	r3, [pc, #32]	; (b390 <putchar+0x24>)
    b36e:	b570      	push	{r4, r5, r6, lr}
    b370:	681c      	ldr	r4, [r3, #0]
    b372:	0005      	movs	r5, r0
    b374:	2c00      	cmp	r4, #0
    b376:	d005      	beq.n	b384 <putchar+0x18>
    b378:	69a3      	ldr	r3, [r4, #24]
    b37a:	2b00      	cmp	r3, #0
    b37c:	d102      	bne.n	b384 <putchar+0x18>
    b37e:	0020      	movs	r0, r4
    b380:	f001 fae8 	bl	c954 <__sinit>
    b384:	0029      	movs	r1, r5
    b386:	68a2      	ldr	r2, [r4, #8]
    b388:	0020      	movs	r0, r4
    b38a:	f002 f999 	bl	d6c0 <_putc_r>
    b38e:	bd70      	pop	{r4, r5, r6, pc}
    b390:	20000010 	.word	0x20000010

0000b394 <_puts_r>:
    b394:	b570      	push	{r4, r5, r6, lr}
    b396:	0005      	movs	r5, r0
    b398:	000e      	movs	r6, r1
    b39a:	2800      	cmp	r0, #0
    b39c:	d004      	beq.n	b3a8 <_puts_r+0x14>
    b39e:	6983      	ldr	r3, [r0, #24]
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d101      	bne.n	b3a8 <_puts_r+0x14>
    b3a4:	f001 fad6 	bl	c954 <__sinit>
    b3a8:	69ab      	ldr	r3, [r5, #24]
    b3aa:	68ac      	ldr	r4, [r5, #8]
    b3ac:	2b00      	cmp	r3, #0
    b3ae:	d102      	bne.n	b3b6 <_puts_r+0x22>
    b3b0:	0028      	movs	r0, r5
    b3b2:	f001 facf 	bl	c954 <__sinit>
    b3b6:	4b24      	ldr	r3, [pc, #144]	; (b448 <_puts_r+0xb4>)
    b3b8:	429c      	cmp	r4, r3
    b3ba:	d10f      	bne.n	b3dc <_puts_r+0x48>
    b3bc:	686c      	ldr	r4, [r5, #4]
    b3be:	89a3      	ldrh	r3, [r4, #12]
    b3c0:	071b      	lsls	r3, r3, #28
    b3c2:	d502      	bpl.n	b3ca <_puts_r+0x36>
    b3c4:	6923      	ldr	r3, [r4, #16]
    b3c6:	2b00      	cmp	r3, #0
    b3c8:	d120      	bne.n	b40c <_puts_r+0x78>
    b3ca:	0021      	movs	r1, r4
    b3cc:	0028      	movs	r0, r5
    b3ce:	f000 fae7 	bl	b9a0 <__swsetup_r>
    b3d2:	2800      	cmp	r0, #0
    b3d4:	d01a      	beq.n	b40c <_puts_r+0x78>
    b3d6:	2001      	movs	r0, #1
    b3d8:	4240      	negs	r0, r0
    b3da:	bd70      	pop	{r4, r5, r6, pc}
    b3dc:	4b1b      	ldr	r3, [pc, #108]	; (b44c <_puts_r+0xb8>)
    b3de:	429c      	cmp	r4, r3
    b3e0:	d101      	bne.n	b3e6 <_puts_r+0x52>
    b3e2:	68ac      	ldr	r4, [r5, #8]
    b3e4:	e7eb      	b.n	b3be <_puts_r+0x2a>
    b3e6:	4b1a      	ldr	r3, [pc, #104]	; (b450 <_puts_r+0xbc>)
    b3e8:	429c      	cmp	r4, r3
    b3ea:	d1e8      	bne.n	b3be <_puts_r+0x2a>
    b3ec:	68ec      	ldr	r4, [r5, #12]
    b3ee:	e7e6      	b.n	b3be <_puts_r+0x2a>
    b3f0:	3b01      	subs	r3, #1
    b3f2:	3601      	adds	r6, #1
    b3f4:	60a3      	str	r3, [r4, #8]
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	da04      	bge.n	b404 <_puts_r+0x70>
    b3fa:	69a2      	ldr	r2, [r4, #24]
    b3fc:	4293      	cmp	r3, r2
    b3fe:	db16      	blt.n	b42e <_puts_r+0x9a>
    b400:	290a      	cmp	r1, #10
    b402:	d014      	beq.n	b42e <_puts_r+0x9a>
    b404:	6823      	ldr	r3, [r4, #0]
    b406:	1c5a      	adds	r2, r3, #1
    b408:	6022      	str	r2, [r4, #0]
    b40a:	7019      	strb	r1, [r3, #0]
    b40c:	7831      	ldrb	r1, [r6, #0]
    b40e:	68a3      	ldr	r3, [r4, #8]
    b410:	2900      	cmp	r1, #0
    b412:	d1ed      	bne.n	b3f0 <_puts_r+0x5c>
    b414:	3b01      	subs	r3, #1
    b416:	60a3      	str	r3, [r4, #8]
    b418:	2b00      	cmp	r3, #0
    b41a:	da0f      	bge.n	b43c <_puts_r+0xa8>
    b41c:	0022      	movs	r2, r4
    b41e:	310a      	adds	r1, #10
    b420:	0028      	movs	r0, r5
    b422:	f000 fa5b 	bl	b8dc <__swbuf_r>
    b426:	1c43      	adds	r3, r0, #1
    b428:	d0d5      	beq.n	b3d6 <_puts_r+0x42>
    b42a:	200a      	movs	r0, #10
    b42c:	e7d5      	b.n	b3da <_puts_r+0x46>
    b42e:	0022      	movs	r2, r4
    b430:	0028      	movs	r0, r5
    b432:	f000 fa53 	bl	b8dc <__swbuf_r>
    b436:	1c43      	adds	r3, r0, #1
    b438:	d1e8      	bne.n	b40c <_puts_r+0x78>
    b43a:	e7cc      	b.n	b3d6 <_puts_r+0x42>
    b43c:	200a      	movs	r0, #10
    b43e:	6823      	ldr	r3, [r4, #0]
    b440:	1c5a      	adds	r2, r3, #1
    b442:	6022      	str	r2, [r4, #0]
    b444:	7018      	strb	r0, [r3, #0]
    b446:	e7c8      	b.n	b3da <_puts_r+0x46>
    b448:	000127ec 	.word	0x000127ec
    b44c:	0001280c 	.word	0x0001280c
    b450:	000127cc 	.word	0x000127cc

0000b454 <puts>:
    b454:	b510      	push	{r4, lr}
    b456:	4b03      	ldr	r3, [pc, #12]	; (b464 <puts+0x10>)
    b458:	0001      	movs	r1, r0
    b45a:	6818      	ldr	r0, [r3, #0]
    b45c:	f7ff ff9a 	bl	b394 <_puts_r>
    b460:	bd10      	pop	{r4, pc}
    b462:	46c0      	nop			; (mov r8, r8)
    b464:	20000010 	.word	0x20000010

0000b468 <_sbrk_r>:
    b468:	2300      	movs	r3, #0
    b46a:	b570      	push	{r4, r5, r6, lr}
    b46c:	4c06      	ldr	r4, [pc, #24]	; (b488 <_sbrk_r+0x20>)
    b46e:	0005      	movs	r5, r0
    b470:	0008      	movs	r0, r1
    b472:	6023      	str	r3, [r4, #0]
    b474:	f7ff f862 	bl	a53c <_sbrk>
    b478:	1c43      	adds	r3, r0, #1
    b47a:	d103      	bne.n	b484 <_sbrk_r+0x1c>
    b47c:	6823      	ldr	r3, [r4, #0]
    b47e:	2b00      	cmp	r3, #0
    b480:	d000      	beq.n	b484 <_sbrk_r+0x1c>
    b482:	602b      	str	r3, [r5, #0]
    b484:	bd70      	pop	{r4, r5, r6, pc}
    b486:	46c0      	nop			; (mov r8, r8)
    b488:	200007f8 	.word	0x200007f8

0000b48c <setbuf>:
    b48c:	424a      	negs	r2, r1
    b48e:	414a      	adcs	r2, r1
    b490:	2380      	movs	r3, #128	; 0x80
    b492:	b510      	push	{r4, lr}
    b494:	0052      	lsls	r2, r2, #1
    b496:	00db      	lsls	r3, r3, #3
    b498:	f000 f802 	bl	b4a0 <setvbuf>
    b49c:	bd10      	pop	{r4, pc}
	...

0000b4a0 <setvbuf>:
    b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4a2:	001d      	movs	r5, r3
    b4a4:	4b4f      	ldr	r3, [pc, #316]	; (b5e4 <setvbuf+0x144>)
    b4a6:	b085      	sub	sp, #20
    b4a8:	681e      	ldr	r6, [r3, #0]
    b4aa:	0004      	movs	r4, r0
    b4ac:	000f      	movs	r7, r1
    b4ae:	9200      	str	r2, [sp, #0]
    b4b0:	2e00      	cmp	r6, #0
    b4b2:	d005      	beq.n	b4c0 <setvbuf+0x20>
    b4b4:	69b3      	ldr	r3, [r6, #24]
    b4b6:	2b00      	cmp	r3, #0
    b4b8:	d102      	bne.n	b4c0 <setvbuf+0x20>
    b4ba:	0030      	movs	r0, r6
    b4bc:	f001 fa4a 	bl	c954 <__sinit>
    b4c0:	4b49      	ldr	r3, [pc, #292]	; (b5e8 <setvbuf+0x148>)
    b4c2:	429c      	cmp	r4, r3
    b4c4:	d150      	bne.n	b568 <setvbuf+0xc8>
    b4c6:	6874      	ldr	r4, [r6, #4]
    b4c8:	9b00      	ldr	r3, [sp, #0]
    b4ca:	2b02      	cmp	r3, #2
    b4cc:	d005      	beq.n	b4da <setvbuf+0x3a>
    b4ce:	2b01      	cmp	r3, #1
    b4d0:	d900      	bls.n	b4d4 <setvbuf+0x34>
    b4d2:	e084      	b.n	b5de <setvbuf+0x13e>
    b4d4:	2d00      	cmp	r5, #0
    b4d6:	da00      	bge.n	b4da <setvbuf+0x3a>
    b4d8:	e081      	b.n	b5de <setvbuf+0x13e>
    b4da:	0021      	movs	r1, r4
    b4dc:	0030      	movs	r0, r6
    b4de:	f001 f9cb 	bl	c878 <_fflush_r>
    b4e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b4e4:	2900      	cmp	r1, #0
    b4e6:	d008      	beq.n	b4fa <setvbuf+0x5a>
    b4e8:	0023      	movs	r3, r4
    b4ea:	3344      	adds	r3, #68	; 0x44
    b4ec:	4299      	cmp	r1, r3
    b4ee:	d002      	beq.n	b4f6 <setvbuf+0x56>
    b4f0:	0030      	movs	r0, r6
    b4f2:	f7ff fa09 	bl	a908 <_free_r>
    b4f6:	2300      	movs	r3, #0
    b4f8:	6363      	str	r3, [r4, #52]	; 0x34
    b4fa:	2300      	movs	r3, #0
    b4fc:	61a3      	str	r3, [r4, #24]
    b4fe:	6063      	str	r3, [r4, #4]
    b500:	89a3      	ldrh	r3, [r4, #12]
    b502:	061b      	lsls	r3, r3, #24
    b504:	d503      	bpl.n	b50e <setvbuf+0x6e>
    b506:	6921      	ldr	r1, [r4, #16]
    b508:	0030      	movs	r0, r6
    b50a:	f7ff f9fd 	bl	a908 <_free_r>
    b50e:	89a3      	ldrh	r3, [r4, #12]
    b510:	4a36      	ldr	r2, [pc, #216]	; (b5ec <setvbuf+0x14c>)
    b512:	4013      	ands	r3, r2
    b514:	81a3      	strh	r3, [r4, #12]
    b516:	9b00      	ldr	r3, [sp, #0]
    b518:	2b02      	cmp	r3, #2
    b51a:	d05a      	beq.n	b5d2 <setvbuf+0x132>
    b51c:	ab03      	add	r3, sp, #12
    b51e:	aa02      	add	r2, sp, #8
    b520:	0021      	movs	r1, r4
    b522:	0030      	movs	r0, r6
    b524:	f001 fab8 	bl	ca98 <__swhatbuf_r>
    b528:	89a3      	ldrh	r3, [r4, #12]
    b52a:	4318      	orrs	r0, r3
    b52c:	81a0      	strh	r0, [r4, #12]
    b52e:	2d00      	cmp	r5, #0
    b530:	d124      	bne.n	b57c <setvbuf+0xdc>
    b532:	9d02      	ldr	r5, [sp, #8]
    b534:	0028      	movs	r0, r5
    b536:	f7ff f99d 	bl	a874 <malloc>
    b53a:	9501      	str	r5, [sp, #4]
    b53c:	1e07      	subs	r7, r0, #0
    b53e:	d142      	bne.n	b5c6 <setvbuf+0x126>
    b540:	9b02      	ldr	r3, [sp, #8]
    b542:	9301      	str	r3, [sp, #4]
    b544:	42ab      	cmp	r3, r5
    b546:	d139      	bne.n	b5bc <setvbuf+0x11c>
    b548:	2001      	movs	r0, #1
    b54a:	4240      	negs	r0, r0
    b54c:	2302      	movs	r3, #2
    b54e:	89a2      	ldrh	r2, [r4, #12]
    b550:	4313      	orrs	r3, r2
    b552:	81a3      	strh	r3, [r4, #12]
    b554:	2300      	movs	r3, #0
    b556:	60a3      	str	r3, [r4, #8]
    b558:	0023      	movs	r3, r4
    b55a:	3347      	adds	r3, #71	; 0x47
    b55c:	6023      	str	r3, [r4, #0]
    b55e:	6123      	str	r3, [r4, #16]
    b560:	2301      	movs	r3, #1
    b562:	6163      	str	r3, [r4, #20]
    b564:	b005      	add	sp, #20
    b566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b568:	4b21      	ldr	r3, [pc, #132]	; (b5f0 <setvbuf+0x150>)
    b56a:	429c      	cmp	r4, r3
    b56c:	d101      	bne.n	b572 <setvbuf+0xd2>
    b56e:	68b4      	ldr	r4, [r6, #8]
    b570:	e7aa      	b.n	b4c8 <setvbuf+0x28>
    b572:	4b20      	ldr	r3, [pc, #128]	; (b5f4 <setvbuf+0x154>)
    b574:	429c      	cmp	r4, r3
    b576:	d1a7      	bne.n	b4c8 <setvbuf+0x28>
    b578:	68f4      	ldr	r4, [r6, #12]
    b57a:	e7a5      	b.n	b4c8 <setvbuf+0x28>
    b57c:	2f00      	cmp	r7, #0
    b57e:	d0d9      	beq.n	b534 <setvbuf+0x94>
    b580:	69b3      	ldr	r3, [r6, #24]
    b582:	2b00      	cmp	r3, #0
    b584:	d102      	bne.n	b58c <setvbuf+0xec>
    b586:	0030      	movs	r0, r6
    b588:	f001 f9e4 	bl	c954 <__sinit>
    b58c:	9b00      	ldr	r3, [sp, #0]
    b58e:	2b01      	cmp	r3, #1
    b590:	d103      	bne.n	b59a <setvbuf+0xfa>
    b592:	89a3      	ldrh	r3, [r4, #12]
    b594:	9a00      	ldr	r2, [sp, #0]
    b596:	431a      	orrs	r2, r3
    b598:	81a2      	strh	r2, [r4, #12]
    b59a:	2008      	movs	r0, #8
    b59c:	89a3      	ldrh	r3, [r4, #12]
    b59e:	6027      	str	r7, [r4, #0]
    b5a0:	6127      	str	r7, [r4, #16]
    b5a2:	6165      	str	r5, [r4, #20]
    b5a4:	4018      	ands	r0, r3
    b5a6:	d018      	beq.n	b5da <setvbuf+0x13a>
    b5a8:	2001      	movs	r0, #1
    b5aa:	4018      	ands	r0, r3
    b5ac:	2300      	movs	r3, #0
    b5ae:	4298      	cmp	r0, r3
    b5b0:	d011      	beq.n	b5d6 <setvbuf+0x136>
    b5b2:	426d      	negs	r5, r5
    b5b4:	60a3      	str	r3, [r4, #8]
    b5b6:	61a5      	str	r5, [r4, #24]
    b5b8:	0018      	movs	r0, r3
    b5ba:	e7d3      	b.n	b564 <setvbuf+0xc4>
    b5bc:	9801      	ldr	r0, [sp, #4]
    b5be:	f7ff f959 	bl	a874 <malloc>
    b5c2:	1e07      	subs	r7, r0, #0
    b5c4:	d0c0      	beq.n	b548 <setvbuf+0xa8>
    b5c6:	2380      	movs	r3, #128	; 0x80
    b5c8:	89a2      	ldrh	r2, [r4, #12]
    b5ca:	9d01      	ldr	r5, [sp, #4]
    b5cc:	4313      	orrs	r3, r2
    b5ce:	81a3      	strh	r3, [r4, #12]
    b5d0:	e7d6      	b.n	b580 <setvbuf+0xe0>
    b5d2:	2000      	movs	r0, #0
    b5d4:	e7ba      	b.n	b54c <setvbuf+0xac>
    b5d6:	60a5      	str	r5, [r4, #8]
    b5d8:	e7c4      	b.n	b564 <setvbuf+0xc4>
    b5da:	60a0      	str	r0, [r4, #8]
    b5dc:	e7c2      	b.n	b564 <setvbuf+0xc4>
    b5de:	2001      	movs	r0, #1
    b5e0:	4240      	negs	r0, r0
    b5e2:	e7bf      	b.n	b564 <setvbuf+0xc4>
    b5e4:	20000010 	.word	0x20000010
    b5e8:	000127ec 	.word	0x000127ec
    b5ec:	fffff35c 	.word	0xfffff35c
    b5f0:	0001280c 	.word	0x0001280c
    b5f4:	000127cc 	.word	0x000127cc

0000b5f8 <siprintf>:
    b5f8:	b40e      	push	{r1, r2, r3}
    b5fa:	b510      	push	{r4, lr}
    b5fc:	b09d      	sub	sp, #116	; 0x74
    b5fe:	a902      	add	r1, sp, #8
    b600:	9002      	str	r0, [sp, #8]
    b602:	6108      	str	r0, [r1, #16]
    b604:	480b      	ldr	r0, [pc, #44]	; (b634 <siprintf+0x3c>)
    b606:	2482      	movs	r4, #130	; 0x82
    b608:	6088      	str	r0, [r1, #8]
    b60a:	6148      	str	r0, [r1, #20]
    b60c:	2001      	movs	r0, #1
    b60e:	4240      	negs	r0, r0
    b610:	ab1f      	add	r3, sp, #124	; 0x7c
    b612:	81c8      	strh	r0, [r1, #14]
    b614:	4808      	ldr	r0, [pc, #32]	; (b638 <siprintf+0x40>)
    b616:	cb04      	ldmia	r3!, {r2}
    b618:	00a4      	lsls	r4, r4, #2
    b61a:	6800      	ldr	r0, [r0, #0]
    b61c:	9301      	str	r3, [sp, #4]
    b61e:	818c      	strh	r4, [r1, #12]
    b620:	f001 fe06 	bl	d230 <_svfiprintf_r>
    b624:	2300      	movs	r3, #0
    b626:	9a02      	ldr	r2, [sp, #8]
    b628:	7013      	strb	r3, [r2, #0]
    b62a:	b01d      	add	sp, #116	; 0x74
    b62c:	bc10      	pop	{r4}
    b62e:	bc08      	pop	{r3}
    b630:	b003      	add	sp, #12
    b632:	4718      	bx	r3
    b634:	7fffffff 	.word	0x7fffffff
    b638:	20000010 	.word	0x20000010

0000b63c <strcmp>:
    b63c:	7802      	ldrb	r2, [r0, #0]
    b63e:	780b      	ldrb	r3, [r1, #0]
    b640:	2a00      	cmp	r2, #0
    b642:	d003      	beq.n	b64c <strcmp+0x10>
    b644:	3001      	adds	r0, #1
    b646:	3101      	adds	r1, #1
    b648:	429a      	cmp	r2, r3
    b64a:	d0f7      	beq.n	b63c <strcmp>
    b64c:	1ad0      	subs	r0, r2, r3
    b64e:	4770      	bx	lr

0000b650 <strcpy>:
    b650:	1c03      	adds	r3, r0, #0
    b652:	780a      	ldrb	r2, [r1, #0]
    b654:	3101      	adds	r1, #1
    b656:	701a      	strb	r2, [r3, #0]
    b658:	3301      	adds	r3, #1
    b65a:	2a00      	cmp	r2, #0
    b65c:	d1f9      	bne.n	b652 <strcpy+0x2>
    b65e:	4770      	bx	lr

0000b660 <strdup>:
    b660:	b510      	push	{r4, lr}
    b662:	4b03      	ldr	r3, [pc, #12]	; (b670 <strdup+0x10>)
    b664:	0001      	movs	r1, r0
    b666:	6818      	ldr	r0, [r3, #0]
    b668:	f000 f804 	bl	b674 <_strdup_r>
    b66c:	bd10      	pop	{r4, pc}
    b66e:	46c0      	nop			; (mov r8, r8)
    b670:	20000010 	.word	0x20000010

0000b674 <_strdup_r>:
    b674:	b570      	push	{r4, r5, r6, lr}
    b676:	0005      	movs	r5, r0
    b678:	0008      	movs	r0, r1
    b67a:	000e      	movs	r6, r1
    b67c:	f000 f80d 	bl	b69a <strlen>
    b680:	1c44      	adds	r4, r0, #1
    b682:	0021      	movs	r1, r4
    b684:	0028      	movs	r0, r5
    b686:	f7ff f989 	bl	a99c <_malloc_r>
    b68a:	1e05      	subs	r5, r0, #0
    b68c:	d003      	beq.n	b696 <_strdup_r+0x22>
    b68e:	0022      	movs	r2, r4
    b690:	0031      	movs	r1, r6
    b692:	f7ff f915 	bl	a8c0 <memcpy>
    b696:	0028      	movs	r0, r5
    b698:	bd70      	pop	{r4, r5, r6, pc}

0000b69a <strlen>:
    b69a:	2300      	movs	r3, #0
    b69c:	5cc2      	ldrb	r2, [r0, r3]
    b69e:	3301      	adds	r3, #1
    b6a0:	2a00      	cmp	r2, #0
    b6a2:	d1fb      	bne.n	b69c <strlen+0x2>
    b6a4:	1e58      	subs	r0, r3, #1
    b6a6:	4770      	bx	lr

0000b6a8 <strncmp>:
    b6a8:	2300      	movs	r3, #0
    b6aa:	b530      	push	{r4, r5, lr}
    b6ac:	429a      	cmp	r2, r3
    b6ae:	d00a      	beq.n	b6c6 <strncmp+0x1e>
    b6b0:	3a01      	subs	r2, #1
    b6b2:	5cc4      	ldrb	r4, [r0, r3]
    b6b4:	5ccd      	ldrb	r5, [r1, r3]
    b6b6:	42ac      	cmp	r4, r5
    b6b8:	d104      	bne.n	b6c4 <strncmp+0x1c>
    b6ba:	429a      	cmp	r2, r3
    b6bc:	d002      	beq.n	b6c4 <strncmp+0x1c>
    b6be:	3301      	adds	r3, #1
    b6c0:	2c00      	cmp	r4, #0
    b6c2:	d1f6      	bne.n	b6b2 <strncmp+0xa>
    b6c4:	1b63      	subs	r3, r4, r5
    b6c6:	0018      	movs	r0, r3
    b6c8:	bd30      	pop	{r4, r5, pc}

0000b6ca <strstr>:
    b6ca:	b510      	push	{r4, lr}
    b6cc:	0002      	movs	r2, r0
    b6ce:	7800      	ldrb	r0, [r0, #0]
    b6d0:	2800      	cmp	r0, #0
    b6d2:	d104      	bne.n	b6de <strstr+0x14>
    b6d4:	7809      	ldrb	r1, [r1, #0]
    b6d6:	2900      	cmp	r1, #0
    b6d8:	d00d      	beq.n	b6f6 <strstr+0x2c>
    b6da:	bd10      	pop	{r4, pc}
    b6dc:	3201      	adds	r2, #1
    b6de:	7810      	ldrb	r0, [r2, #0]
    b6e0:	2800      	cmp	r0, #0
    b6e2:	d0fa      	beq.n	b6da <strstr+0x10>
    b6e4:	2300      	movs	r3, #0
    b6e6:	5cc8      	ldrb	r0, [r1, r3]
    b6e8:	2800      	cmp	r0, #0
    b6ea:	d004      	beq.n	b6f6 <strstr+0x2c>
    b6ec:	5cd4      	ldrb	r4, [r2, r3]
    b6ee:	4284      	cmp	r4, r0
    b6f0:	d1f4      	bne.n	b6dc <strstr+0x12>
    b6f2:	3301      	adds	r3, #1
    b6f4:	e7f7      	b.n	b6e6 <strstr+0x1c>
    b6f6:	0010      	movs	r0, r2
    b6f8:	e7ef      	b.n	b6da <strstr+0x10>
	...

0000b6fc <strtok>:
    b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6fe:	4b12      	ldr	r3, [pc, #72]	; (b748 <strtok+0x4c>)
    b700:	0006      	movs	r6, r0
    b702:	681d      	ldr	r5, [r3, #0]
    b704:	000f      	movs	r7, r1
    b706:	6dac      	ldr	r4, [r5, #88]	; 0x58
    b708:	2c00      	cmp	r4, #0
    b70a:	d116      	bne.n	b73a <strtok+0x3e>
    b70c:	2050      	movs	r0, #80	; 0x50
    b70e:	f7ff f8b1 	bl	a874 <malloc>
    b712:	65a8      	str	r0, [r5, #88]	; 0x58
    b714:	6004      	str	r4, [r0, #0]
    b716:	6044      	str	r4, [r0, #4]
    b718:	6084      	str	r4, [r0, #8]
    b71a:	60c4      	str	r4, [r0, #12]
    b71c:	6104      	str	r4, [r0, #16]
    b71e:	6144      	str	r4, [r0, #20]
    b720:	6184      	str	r4, [r0, #24]
    b722:	6284      	str	r4, [r0, #40]	; 0x28
    b724:	62c4      	str	r4, [r0, #44]	; 0x2c
    b726:	6304      	str	r4, [r0, #48]	; 0x30
    b728:	6344      	str	r4, [r0, #52]	; 0x34
    b72a:	6384      	str	r4, [r0, #56]	; 0x38
    b72c:	63c4      	str	r4, [r0, #60]	; 0x3c
    b72e:	6404      	str	r4, [r0, #64]	; 0x40
    b730:	6444      	str	r4, [r0, #68]	; 0x44
    b732:	6484      	str	r4, [r0, #72]	; 0x48
    b734:	64c4      	str	r4, [r0, #76]	; 0x4c
    b736:	7704      	strb	r4, [r0, #28]
    b738:	6244      	str	r4, [r0, #36]	; 0x24
    b73a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    b73c:	0039      	movs	r1, r7
    b73e:	0030      	movs	r0, r6
    b740:	2301      	movs	r3, #1
    b742:	f000 f803 	bl	b74c <__strtok_r>
    b746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b748:	20000010 	.word	0x20000010

0000b74c <__strtok_r>:
    b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b74e:	2800      	cmp	r0, #0
    b750:	d104      	bne.n	b75c <__strtok_r+0x10>
    b752:	6810      	ldr	r0, [r2, #0]
    b754:	2800      	cmp	r0, #0
    b756:	d101      	bne.n	b75c <__strtok_r+0x10>
    b758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b75a:	0020      	movs	r0, r4
    b75c:	000e      	movs	r6, r1
    b75e:	7805      	ldrb	r5, [r0, #0]
    b760:	1c44      	adds	r4, r0, #1
    b762:	7837      	ldrb	r7, [r6, #0]
    b764:	2f00      	cmp	r7, #0
    b766:	d104      	bne.n	b772 <__strtok_r+0x26>
    b768:	2d00      	cmp	r5, #0
    b76a:	d110      	bne.n	b78e <__strtok_r+0x42>
    b76c:	6015      	str	r5, [r2, #0]
    b76e:	0028      	movs	r0, r5
    b770:	e7f2      	b.n	b758 <__strtok_r+0xc>
    b772:	3601      	adds	r6, #1
    b774:	42bd      	cmp	r5, r7
    b776:	d1f4      	bne.n	b762 <__strtok_r+0x16>
    b778:	2b00      	cmp	r3, #0
    b77a:	d1ee      	bne.n	b75a <__strtok_r+0xe>
    b77c:	6014      	str	r4, [r2, #0]
    b77e:	7003      	strb	r3, [r0, #0]
    b780:	e7ea      	b.n	b758 <__strtok_r+0xc>
    b782:	0033      	movs	r3, r6
    b784:	e00e      	b.n	b7a4 <__strtok_r+0x58>
    b786:	3501      	adds	r5, #1
    b788:	001c      	movs	r4, r3
    b78a:	2f00      	cmp	r7, #0
    b78c:	d102      	bne.n	b794 <__strtok_r+0x48>
    b78e:	000d      	movs	r5, r1
    b790:	7826      	ldrb	r6, [r4, #0]
    b792:	1c63      	adds	r3, r4, #1
    b794:	782f      	ldrb	r7, [r5, #0]
    b796:	42be      	cmp	r6, r7
    b798:	d1f5      	bne.n	b786 <__strtok_r+0x3a>
    b79a:	2e00      	cmp	r6, #0
    b79c:	d0f1      	beq.n	b782 <__strtok_r+0x36>
    b79e:	2400      	movs	r4, #0
    b7a0:	1e59      	subs	r1, r3, #1
    b7a2:	700c      	strb	r4, [r1, #0]
    b7a4:	6013      	str	r3, [r2, #0]
    b7a6:	e7d7      	b.n	b758 <__strtok_r+0xc>

0000b7a8 <_strtol_l.isra.0>:
    b7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7aa:	001f      	movs	r7, r3
    b7ac:	000e      	movs	r6, r1
    b7ae:	b087      	sub	sp, #28
    b7b0:	9005      	str	r0, [sp, #20]
    b7b2:	9103      	str	r1, [sp, #12]
    b7b4:	9202      	str	r2, [sp, #8]
    b7b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    b7b8:	7834      	ldrb	r4, [r6, #0]
    b7ba:	f7ff f849 	bl	a850 <__locale_ctype_ptr_l>
    b7be:	2208      	movs	r2, #8
    b7c0:	1900      	adds	r0, r0, r4
    b7c2:	7843      	ldrb	r3, [r0, #1]
    b7c4:	1c75      	adds	r5, r6, #1
    b7c6:	4013      	ands	r3, r2
    b7c8:	d10c      	bne.n	b7e4 <_strtol_l.isra.0+0x3c>
    b7ca:	2c2d      	cmp	r4, #45	; 0x2d
    b7cc:	d10c      	bne.n	b7e8 <_strtol_l.isra.0+0x40>
    b7ce:	3301      	adds	r3, #1
    b7d0:	782c      	ldrb	r4, [r5, #0]
    b7d2:	9301      	str	r3, [sp, #4]
    b7d4:	1cb5      	adds	r5, r6, #2
    b7d6:	2f00      	cmp	r7, #0
    b7d8:	d00c      	beq.n	b7f4 <_strtol_l.isra.0+0x4c>
    b7da:	2f10      	cmp	r7, #16
    b7dc:	d114      	bne.n	b808 <_strtol_l.isra.0+0x60>
    b7de:	2c30      	cmp	r4, #48	; 0x30
    b7e0:	d00a      	beq.n	b7f8 <_strtol_l.isra.0+0x50>
    b7e2:	e011      	b.n	b808 <_strtol_l.isra.0+0x60>
    b7e4:	002e      	movs	r6, r5
    b7e6:	e7e6      	b.n	b7b6 <_strtol_l.isra.0+0xe>
    b7e8:	9301      	str	r3, [sp, #4]
    b7ea:	2c2b      	cmp	r4, #43	; 0x2b
    b7ec:	d1f3      	bne.n	b7d6 <_strtol_l.isra.0+0x2e>
    b7ee:	782c      	ldrb	r4, [r5, #0]
    b7f0:	1cb5      	adds	r5, r6, #2
    b7f2:	e7f0      	b.n	b7d6 <_strtol_l.isra.0+0x2e>
    b7f4:	2c30      	cmp	r4, #48	; 0x30
    b7f6:	d12f      	bne.n	b858 <_strtol_l.isra.0+0xb0>
    b7f8:	2220      	movs	r2, #32
    b7fa:	782b      	ldrb	r3, [r5, #0]
    b7fc:	4393      	bics	r3, r2
    b7fe:	2b58      	cmp	r3, #88	; 0x58
    b800:	d151      	bne.n	b8a6 <_strtol_l.isra.0+0xfe>
    b802:	2710      	movs	r7, #16
    b804:	786c      	ldrb	r4, [r5, #1]
    b806:	3502      	adds	r5, #2
    b808:	9b01      	ldr	r3, [sp, #4]
    b80a:	4a29      	ldr	r2, [pc, #164]	; (b8b0 <_strtol_l.isra.0+0x108>)
    b80c:	0039      	movs	r1, r7
    b80e:	189e      	adds	r6, r3, r2
    b810:	0030      	movs	r0, r6
    b812:	f002 f907 	bl	da24 <__aeabi_uidivmod>
    b816:	0030      	movs	r0, r6
    b818:	9104      	str	r1, [sp, #16]
    b81a:	0039      	movs	r1, r7
    b81c:	f002 f87c 	bl	d918 <__udivsi3>
    b820:	2101      	movs	r1, #1
    b822:	2300      	movs	r3, #0
    b824:	4249      	negs	r1, r1
    b826:	0002      	movs	r2, r0
    b828:	468c      	mov	ip, r1
    b82a:	0018      	movs	r0, r3
    b82c:	0021      	movs	r1, r4
    b82e:	3930      	subs	r1, #48	; 0x30
    b830:	2909      	cmp	r1, #9
    b832:	d813      	bhi.n	b85c <_strtol_l.isra.0+0xb4>
    b834:	000c      	movs	r4, r1
    b836:	42a7      	cmp	r7, r4
    b838:	dd1c      	ble.n	b874 <_strtol_l.isra.0+0xcc>
    b83a:	1c59      	adds	r1, r3, #1
    b83c:	d009      	beq.n	b852 <_strtol_l.isra.0+0xaa>
    b83e:	4663      	mov	r3, ip
    b840:	4282      	cmp	r2, r0
    b842:	d306      	bcc.n	b852 <_strtol_l.isra.0+0xaa>
    b844:	d102      	bne.n	b84c <_strtol_l.isra.0+0xa4>
    b846:	9904      	ldr	r1, [sp, #16]
    b848:	42a1      	cmp	r1, r4
    b84a:	db02      	blt.n	b852 <_strtol_l.isra.0+0xaa>
    b84c:	2301      	movs	r3, #1
    b84e:	4378      	muls	r0, r7
    b850:	1820      	adds	r0, r4, r0
    b852:	782c      	ldrb	r4, [r5, #0]
    b854:	3501      	adds	r5, #1
    b856:	e7e9      	b.n	b82c <_strtol_l.isra.0+0x84>
    b858:	270a      	movs	r7, #10
    b85a:	e7d5      	b.n	b808 <_strtol_l.isra.0+0x60>
    b85c:	0021      	movs	r1, r4
    b85e:	3941      	subs	r1, #65	; 0x41
    b860:	2919      	cmp	r1, #25
    b862:	d801      	bhi.n	b868 <_strtol_l.isra.0+0xc0>
    b864:	3c37      	subs	r4, #55	; 0x37
    b866:	e7e6      	b.n	b836 <_strtol_l.isra.0+0x8e>
    b868:	0021      	movs	r1, r4
    b86a:	3961      	subs	r1, #97	; 0x61
    b86c:	2919      	cmp	r1, #25
    b86e:	d801      	bhi.n	b874 <_strtol_l.isra.0+0xcc>
    b870:	3c57      	subs	r4, #87	; 0x57
    b872:	e7e0      	b.n	b836 <_strtol_l.isra.0+0x8e>
    b874:	1c5a      	adds	r2, r3, #1
    b876:	d108      	bne.n	b88a <_strtol_l.isra.0+0xe2>
    b878:	9a05      	ldr	r2, [sp, #20]
    b87a:	3323      	adds	r3, #35	; 0x23
    b87c:	6013      	str	r3, [r2, #0]
    b87e:	9b02      	ldr	r3, [sp, #8]
    b880:	0030      	movs	r0, r6
    b882:	2b00      	cmp	r3, #0
    b884:	d10b      	bne.n	b89e <_strtol_l.isra.0+0xf6>
    b886:	b007      	add	sp, #28
    b888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b88a:	9a01      	ldr	r2, [sp, #4]
    b88c:	2a00      	cmp	r2, #0
    b88e:	d000      	beq.n	b892 <_strtol_l.isra.0+0xea>
    b890:	4240      	negs	r0, r0
    b892:	9a02      	ldr	r2, [sp, #8]
    b894:	2a00      	cmp	r2, #0
    b896:	d0f6      	beq.n	b886 <_strtol_l.isra.0+0xde>
    b898:	9a03      	ldr	r2, [sp, #12]
    b89a:	2b00      	cmp	r3, #0
    b89c:	d000      	beq.n	b8a0 <_strtol_l.isra.0+0xf8>
    b89e:	1e6a      	subs	r2, r5, #1
    b8a0:	9b02      	ldr	r3, [sp, #8]
    b8a2:	601a      	str	r2, [r3, #0]
    b8a4:	e7ef      	b.n	b886 <_strtol_l.isra.0+0xde>
    b8a6:	2430      	movs	r4, #48	; 0x30
    b8a8:	2f00      	cmp	r7, #0
    b8aa:	d1ad      	bne.n	b808 <_strtol_l.isra.0+0x60>
    b8ac:	3708      	adds	r7, #8
    b8ae:	e7ab      	b.n	b808 <_strtol_l.isra.0+0x60>
    b8b0:	7fffffff 	.word	0x7fffffff

0000b8b4 <strtol>:
    b8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b8b6:	0013      	movs	r3, r2
    b8b8:	4a06      	ldr	r2, [pc, #24]	; (b8d4 <strtol+0x20>)
    b8ba:	0005      	movs	r5, r0
    b8bc:	6810      	ldr	r0, [r2, #0]
    b8be:	6a04      	ldr	r4, [r0, #32]
    b8c0:	2c00      	cmp	r4, #0
    b8c2:	d100      	bne.n	b8c6 <strtol+0x12>
    b8c4:	4c04      	ldr	r4, [pc, #16]	; (b8d8 <strtol+0x24>)
    b8c6:	000a      	movs	r2, r1
    b8c8:	9400      	str	r4, [sp, #0]
    b8ca:	0029      	movs	r1, r5
    b8cc:	f7ff ff6c 	bl	b7a8 <_strtol_l.isra.0>
    b8d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b8d2:	46c0      	nop			; (mov r8, r8)
    b8d4:	20000010 	.word	0x20000010
    b8d8:	20000074 	.word	0x20000074

0000b8dc <__swbuf_r>:
    b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8de:	0005      	movs	r5, r0
    b8e0:	000e      	movs	r6, r1
    b8e2:	0014      	movs	r4, r2
    b8e4:	2800      	cmp	r0, #0
    b8e6:	d004      	beq.n	b8f2 <__swbuf_r+0x16>
    b8e8:	6983      	ldr	r3, [r0, #24]
    b8ea:	2b00      	cmp	r3, #0
    b8ec:	d101      	bne.n	b8f2 <__swbuf_r+0x16>
    b8ee:	f001 f831 	bl	c954 <__sinit>
    b8f2:	4b22      	ldr	r3, [pc, #136]	; (b97c <__swbuf_r+0xa0>)
    b8f4:	429c      	cmp	r4, r3
    b8f6:	d12d      	bne.n	b954 <__swbuf_r+0x78>
    b8f8:	686c      	ldr	r4, [r5, #4]
    b8fa:	69a3      	ldr	r3, [r4, #24]
    b8fc:	60a3      	str	r3, [r4, #8]
    b8fe:	89a3      	ldrh	r3, [r4, #12]
    b900:	071b      	lsls	r3, r3, #28
    b902:	d531      	bpl.n	b968 <__swbuf_r+0x8c>
    b904:	6923      	ldr	r3, [r4, #16]
    b906:	2b00      	cmp	r3, #0
    b908:	d02e      	beq.n	b968 <__swbuf_r+0x8c>
    b90a:	6823      	ldr	r3, [r4, #0]
    b90c:	6922      	ldr	r2, [r4, #16]
    b90e:	b2f7      	uxtb	r7, r6
    b910:	1a98      	subs	r0, r3, r2
    b912:	6963      	ldr	r3, [r4, #20]
    b914:	b2f6      	uxtb	r6, r6
    b916:	4298      	cmp	r0, r3
    b918:	db05      	blt.n	b926 <__swbuf_r+0x4a>
    b91a:	0021      	movs	r1, r4
    b91c:	0028      	movs	r0, r5
    b91e:	f000 ffab 	bl	c878 <_fflush_r>
    b922:	2800      	cmp	r0, #0
    b924:	d126      	bne.n	b974 <__swbuf_r+0x98>
    b926:	68a3      	ldr	r3, [r4, #8]
    b928:	3001      	adds	r0, #1
    b92a:	3b01      	subs	r3, #1
    b92c:	60a3      	str	r3, [r4, #8]
    b92e:	6823      	ldr	r3, [r4, #0]
    b930:	1c5a      	adds	r2, r3, #1
    b932:	6022      	str	r2, [r4, #0]
    b934:	701f      	strb	r7, [r3, #0]
    b936:	6963      	ldr	r3, [r4, #20]
    b938:	4298      	cmp	r0, r3
    b93a:	d004      	beq.n	b946 <__swbuf_r+0x6a>
    b93c:	89a3      	ldrh	r3, [r4, #12]
    b93e:	07db      	lsls	r3, r3, #31
    b940:	d51a      	bpl.n	b978 <__swbuf_r+0x9c>
    b942:	2e0a      	cmp	r6, #10
    b944:	d118      	bne.n	b978 <__swbuf_r+0x9c>
    b946:	0021      	movs	r1, r4
    b948:	0028      	movs	r0, r5
    b94a:	f000 ff95 	bl	c878 <_fflush_r>
    b94e:	2800      	cmp	r0, #0
    b950:	d012      	beq.n	b978 <__swbuf_r+0x9c>
    b952:	e00f      	b.n	b974 <__swbuf_r+0x98>
    b954:	4b0a      	ldr	r3, [pc, #40]	; (b980 <__swbuf_r+0xa4>)
    b956:	429c      	cmp	r4, r3
    b958:	d101      	bne.n	b95e <__swbuf_r+0x82>
    b95a:	68ac      	ldr	r4, [r5, #8]
    b95c:	e7cd      	b.n	b8fa <__swbuf_r+0x1e>
    b95e:	4b09      	ldr	r3, [pc, #36]	; (b984 <__swbuf_r+0xa8>)
    b960:	429c      	cmp	r4, r3
    b962:	d1ca      	bne.n	b8fa <__swbuf_r+0x1e>
    b964:	68ec      	ldr	r4, [r5, #12]
    b966:	e7c8      	b.n	b8fa <__swbuf_r+0x1e>
    b968:	0021      	movs	r1, r4
    b96a:	0028      	movs	r0, r5
    b96c:	f000 f818 	bl	b9a0 <__swsetup_r>
    b970:	2800      	cmp	r0, #0
    b972:	d0ca      	beq.n	b90a <__swbuf_r+0x2e>
    b974:	2601      	movs	r6, #1
    b976:	4276      	negs	r6, r6
    b978:	0030      	movs	r0, r6
    b97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b97c:	000127ec 	.word	0x000127ec
    b980:	0001280c 	.word	0x0001280c
    b984:	000127cc 	.word	0x000127cc

0000b988 <__ascii_wctomb>:
    b988:	1e0b      	subs	r3, r1, #0
    b98a:	d004      	beq.n	b996 <__ascii_wctomb+0xe>
    b98c:	2aff      	cmp	r2, #255	; 0xff
    b98e:	d904      	bls.n	b99a <__ascii_wctomb+0x12>
    b990:	238a      	movs	r3, #138	; 0x8a
    b992:	6003      	str	r3, [r0, #0]
    b994:	3b8b      	subs	r3, #139	; 0x8b
    b996:	0018      	movs	r0, r3
    b998:	4770      	bx	lr
    b99a:	700a      	strb	r2, [r1, #0]
    b99c:	2301      	movs	r3, #1
    b99e:	e7fa      	b.n	b996 <__ascii_wctomb+0xe>

0000b9a0 <__swsetup_r>:
    b9a0:	4b36      	ldr	r3, [pc, #216]	; (ba7c <__swsetup_r+0xdc>)
    b9a2:	b570      	push	{r4, r5, r6, lr}
    b9a4:	681d      	ldr	r5, [r3, #0]
    b9a6:	0006      	movs	r6, r0
    b9a8:	000c      	movs	r4, r1
    b9aa:	2d00      	cmp	r5, #0
    b9ac:	d005      	beq.n	b9ba <__swsetup_r+0x1a>
    b9ae:	69ab      	ldr	r3, [r5, #24]
    b9b0:	2b00      	cmp	r3, #0
    b9b2:	d102      	bne.n	b9ba <__swsetup_r+0x1a>
    b9b4:	0028      	movs	r0, r5
    b9b6:	f000 ffcd 	bl	c954 <__sinit>
    b9ba:	4b31      	ldr	r3, [pc, #196]	; (ba80 <__swsetup_r+0xe0>)
    b9bc:	429c      	cmp	r4, r3
    b9be:	d10f      	bne.n	b9e0 <__swsetup_r+0x40>
    b9c0:	686c      	ldr	r4, [r5, #4]
    b9c2:	230c      	movs	r3, #12
    b9c4:	5ee2      	ldrsh	r2, [r4, r3]
    b9c6:	b293      	uxth	r3, r2
    b9c8:	0719      	lsls	r1, r3, #28
    b9ca:	d42d      	bmi.n	ba28 <__swsetup_r+0x88>
    b9cc:	06d9      	lsls	r1, r3, #27
    b9ce:	d411      	bmi.n	b9f4 <__swsetup_r+0x54>
    b9d0:	2309      	movs	r3, #9
    b9d2:	2001      	movs	r0, #1
    b9d4:	6033      	str	r3, [r6, #0]
    b9d6:	3337      	adds	r3, #55	; 0x37
    b9d8:	4313      	orrs	r3, r2
    b9da:	81a3      	strh	r3, [r4, #12]
    b9dc:	4240      	negs	r0, r0
    b9de:	bd70      	pop	{r4, r5, r6, pc}
    b9e0:	4b28      	ldr	r3, [pc, #160]	; (ba84 <__swsetup_r+0xe4>)
    b9e2:	429c      	cmp	r4, r3
    b9e4:	d101      	bne.n	b9ea <__swsetup_r+0x4a>
    b9e6:	68ac      	ldr	r4, [r5, #8]
    b9e8:	e7eb      	b.n	b9c2 <__swsetup_r+0x22>
    b9ea:	4b27      	ldr	r3, [pc, #156]	; (ba88 <__swsetup_r+0xe8>)
    b9ec:	429c      	cmp	r4, r3
    b9ee:	d1e8      	bne.n	b9c2 <__swsetup_r+0x22>
    b9f0:	68ec      	ldr	r4, [r5, #12]
    b9f2:	e7e6      	b.n	b9c2 <__swsetup_r+0x22>
    b9f4:	075b      	lsls	r3, r3, #29
    b9f6:	d513      	bpl.n	ba20 <__swsetup_r+0x80>
    b9f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b9fa:	2900      	cmp	r1, #0
    b9fc:	d008      	beq.n	ba10 <__swsetup_r+0x70>
    b9fe:	0023      	movs	r3, r4
    ba00:	3344      	adds	r3, #68	; 0x44
    ba02:	4299      	cmp	r1, r3
    ba04:	d002      	beq.n	ba0c <__swsetup_r+0x6c>
    ba06:	0030      	movs	r0, r6
    ba08:	f7fe ff7e 	bl	a908 <_free_r>
    ba0c:	2300      	movs	r3, #0
    ba0e:	6363      	str	r3, [r4, #52]	; 0x34
    ba10:	2224      	movs	r2, #36	; 0x24
    ba12:	89a3      	ldrh	r3, [r4, #12]
    ba14:	4393      	bics	r3, r2
    ba16:	81a3      	strh	r3, [r4, #12]
    ba18:	2300      	movs	r3, #0
    ba1a:	6063      	str	r3, [r4, #4]
    ba1c:	6923      	ldr	r3, [r4, #16]
    ba1e:	6023      	str	r3, [r4, #0]
    ba20:	2308      	movs	r3, #8
    ba22:	89a2      	ldrh	r2, [r4, #12]
    ba24:	4313      	orrs	r3, r2
    ba26:	81a3      	strh	r3, [r4, #12]
    ba28:	6923      	ldr	r3, [r4, #16]
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d10b      	bne.n	ba46 <__swsetup_r+0xa6>
    ba2e:	21a0      	movs	r1, #160	; 0xa0
    ba30:	2280      	movs	r2, #128	; 0x80
    ba32:	89a3      	ldrh	r3, [r4, #12]
    ba34:	0089      	lsls	r1, r1, #2
    ba36:	0092      	lsls	r2, r2, #2
    ba38:	400b      	ands	r3, r1
    ba3a:	4293      	cmp	r3, r2
    ba3c:	d003      	beq.n	ba46 <__swsetup_r+0xa6>
    ba3e:	0021      	movs	r1, r4
    ba40:	0030      	movs	r0, r6
    ba42:	f001 f851 	bl	cae8 <__smakebuf_r>
    ba46:	2301      	movs	r3, #1
    ba48:	89a2      	ldrh	r2, [r4, #12]
    ba4a:	4013      	ands	r3, r2
    ba4c:	d011      	beq.n	ba72 <__swsetup_r+0xd2>
    ba4e:	2300      	movs	r3, #0
    ba50:	60a3      	str	r3, [r4, #8]
    ba52:	6963      	ldr	r3, [r4, #20]
    ba54:	425b      	negs	r3, r3
    ba56:	61a3      	str	r3, [r4, #24]
    ba58:	2000      	movs	r0, #0
    ba5a:	6923      	ldr	r3, [r4, #16]
    ba5c:	4283      	cmp	r3, r0
    ba5e:	d1be      	bne.n	b9de <__swsetup_r+0x3e>
    ba60:	230c      	movs	r3, #12
    ba62:	5ee2      	ldrsh	r2, [r4, r3]
    ba64:	0613      	lsls	r3, r2, #24
    ba66:	d5ba      	bpl.n	b9de <__swsetup_r+0x3e>
    ba68:	2340      	movs	r3, #64	; 0x40
    ba6a:	4313      	orrs	r3, r2
    ba6c:	81a3      	strh	r3, [r4, #12]
    ba6e:	3801      	subs	r0, #1
    ba70:	e7b5      	b.n	b9de <__swsetup_r+0x3e>
    ba72:	0792      	lsls	r2, r2, #30
    ba74:	d400      	bmi.n	ba78 <__swsetup_r+0xd8>
    ba76:	6963      	ldr	r3, [r4, #20]
    ba78:	60a3      	str	r3, [r4, #8]
    ba7a:	e7ed      	b.n	ba58 <__swsetup_r+0xb8>
    ba7c:	20000010 	.word	0x20000010
    ba80:	000127ec 	.word	0x000127ec
    ba84:	0001280c 	.word	0x0001280c
    ba88:	000127cc 	.word	0x000127cc

0000ba8c <quorem>:
    ba8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba8e:	6903      	ldr	r3, [r0, #16]
    ba90:	690c      	ldr	r4, [r1, #16]
    ba92:	b089      	sub	sp, #36	; 0x24
    ba94:	0007      	movs	r7, r0
    ba96:	9105      	str	r1, [sp, #20]
    ba98:	2600      	movs	r6, #0
    ba9a:	429c      	cmp	r4, r3
    ba9c:	dc6d      	bgt.n	bb7a <quorem+0xee>
    ba9e:	000b      	movs	r3, r1
    baa0:	3c01      	subs	r4, #1
    baa2:	3314      	adds	r3, #20
    baa4:	00a5      	lsls	r5, r4, #2
    baa6:	9303      	str	r3, [sp, #12]
    baa8:	195b      	adds	r3, r3, r5
    baaa:	9304      	str	r3, [sp, #16]
    baac:	0003      	movs	r3, r0
    baae:	3314      	adds	r3, #20
    bab0:	9302      	str	r3, [sp, #8]
    bab2:	195d      	adds	r5, r3, r5
    bab4:	9b04      	ldr	r3, [sp, #16]
    bab6:	6828      	ldr	r0, [r5, #0]
    bab8:	681b      	ldr	r3, [r3, #0]
    baba:	1c59      	adds	r1, r3, #1
    babc:	9301      	str	r3, [sp, #4]
    babe:	f001 ff2b 	bl	d918 <__udivsi3>
    bac2:	9001      	str	r0, [sp, #4]
    bac4:	42b0      	cmp	r0, r6
    bac6:	d02d      	beq.n	bb24 <quorem+0x98>
    bac8:	9b03      	ldr	r3, [sp, #12]
    baca:	9802      	ldr	r0, [sp, #8]
    bacc:	469c      	mov	ip, r3
    bace:	9606      	str	r6, [sp, #24]
    bad0:	4662      	mov	r2, ip
    bad2:	ca08      	ldmia	r2!, {r3}
    bad4:	4694      	mov	ip, r2
    bad6:	9a01      	ldr	r2, [sp, #4]
    bad8:	b299      	uxth	r1, r3
    bada:	4351      	muls	r1, r2
    badc:	0c1b      	lsrs	r3, r3, #16
    bade:	4353      	muls	r3, r2
    bae0:	1989      	adds	r1, r1, r6
    bae2:	0c0a      	lsrs	r2, r1, #16
    bae4:	189b      	adds	r3, r3, r2
    bae6:	9307      	str	r3, [sp, #28]
    bae8:	8802      	ldrh	r2, [r0, #0]
    baea:	0c1e      	lsrs	r6, r3, #16
    baec:	9b06      	ldr	r3, [sp, #24]
    baee:	b289      	uxth	r1, r1
    baf0:	18d2      	adds	r2, r2, r3
    baf2:	6803      	ldr	r3, [r0, #0]
    baf4:	1a52      	subs	r2, r2, r1
    baf6:	0c19      	lsrs	r1, r3, #16
    baf8:	466b      	mov	r3, sp
    bafa:	8b9b      	ldrh	r3, [r3, #28]
    bafc:	1acb      	subs	r3, r1, r3
    bafe:	1411      	asrs	r1, r2, #16
    bb00:	185b      	adds	r3, r3, r1
    bb02:	1419      	asrs	r1, r3, #16
    bb04:	b292      	uxth	r2, r2
    bb06:	041b      	lsls	r3, r3, #16
    bb08:	431a      	orrs	r2, r3
    bb0a:	9b04      	ldr	r3, [sp, #16]
    bb0c:	9106      	str	r1, [sp, #24]
    bb0e:	c004      	stmia	r0!, {r2}
    bb10:	4563      	cmp	r3, ip
    bb12:	d2dd      	bcs.n	bad0 <quorem+0x44>
    bb14:	682b      	ldr	r3, [r5, #0]
    bb16:	2b00      	cmp	r3, #0
    bb18:	d104      	bne.n	bb24 <quorem+0x98>
    bb1a:	9b02      	ldr	r3, [sp, #8]
    bb1c:	3d04      	subs	r5, #4
    bb1e:	42ab      	cmp	r3, r5
    bb20:	d32e      	bcc.n	bb80 <quorem+0xf4>
    bb22:	613c      	str	r4, [r7, #16]
    bb24:	9905      	ldr	r1, [sp, #20]
    bb26:	0038      	movs	r0, r7
    bb28:	f001 fa41 	bl	cfae <__mcmp>
    bb2c:	2800      	cmp	r0, #0
    bb2e:	db23      	blt.n	bb78 <quorem+0xec>
    bb30:	2500      	movs	r5, #0
    bb32:	9b01      	ldr	r3, [sp, #4]
    bb34:	9802      	ldr	r0, [sp, #8]
    bb36:	3301      	adds	r3, #1
    bb38:	9903      	ldr	r1, [sp, #12]
    bb3a:	9301      	str	r3, [sp, #4]
    bb3c:	c908      	ldmia	r1!, {r3}
    bb3e:	8802      	ldrh	r2, [r0, #0]
    bb40:	1955      	adds	r5, r2, r5
    bb42:	b29a      	uxth	r2, r3
    bb44:	1aaa      	subs	r2, r5, r2
    bb46:	6805      	ldr	r5, [r0, #0]
    bb48:	0c1b      	lsrs	r3, r3, #16
    bb4a:	0c2d      	lsrs	r5, r5, #16
    bb4c:	1aeb      	subs	r3, r5, r3
    bb4e:	1415      	asrs	r5, r2, #16
    bb50:	195b      	adds	r3, r3, r5
    bb52:	141d      	asrs	r5, r3, #16
    bb54:	b292      	uxth	r2, r2
    bb56:	041b      	lsls	r3, r3, #16
    bb58:	4313      	orrs	r3, r2
    bb5a:	c008      	stmia	r0!, {r3}
    bb5c:	9b04      	ldr	r3, [sp, #16]
    bb5e:	428b      	cmp	r3, r1
    bb60:	d2ec      	bcs.n	bb3c <quorem+0xb0>
    bb62:	9a02      	ldr	r2, [sp, #8]
    bb64:	00a3      	lsls	r3, r4, #2
    bb66:	18d3      	adds	r3, r2, r3
    bb68:	681a      	ldr	r2, [r3, #0]
    bb6a:	2a00      	cmp	r2, #0
    bb6c:	d104      	bne.n	bb78 <quorem+0xec>
    bb6e:	9a02      	ldr	r2, [sp, #8]
    bb70:	3b04      	subs	r3, #4
    bb72:	429a      	cmp	r2, r3
    bb74:	d309      	bcc.n	bb8a <quorem+0xfe>
    bb76:	613c      	str	r4, [r7, #16]
    bb78:	9e01      	ldr	r6, [sp, #4]
    bb7a:	0030      	movs	r0, r6
    bb7c:	b009      	add	sp, #36	; 0x24
    bb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb80:	682b      	ldr	r3, [r5, #0]
    bb82:	2b00      	cmp	r3, #0
    bb84:	d1cd      	bne.n	bb22 <quorem+0x96>
    bb86:	3c01      	subs	r4, #1
    bb88:	e7c7      	b.n	bb1a <quorem+0x8e>
    bb8a:	681a      	ldr	r2, [r3, #0]
    bb8c:	2a00      	cmp	r2, #0
    bb8e:	d1f2      	bne.n	bb76 <quorem+0xea>
    bb90:	3c01      	subs	r4, #1
    bb92:	e7ec      	b.n	bb6e <quorem+0xe2>

0000bb94 <_dtoa_r>:
    bb94:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb96:	0016      	movs	r6, r2
    bb98:	001f      	movs	r7, r3
    bb9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    bb9c:	b09d      	sub	sp, #116	; 0x74
    bb9e:	9004      	str	r0, [sp, #16]
    bba0:	9d25      	ldr	r5, [sp, #148]	; 0x94
    bba2:	9606      	str	r6, [sp, #24]
    bba4:	9707      	str	r7, [sp, #28]
    bba6:	2c00      	cmp	r4, #0
    bba8:	d108      	bne.n	bbbc <_dtoa_r+0x28>
    bbaa:	2010      	movs	r0, #16
    bbac:	f7fe fe62 	bl	a874 <malloc>
    bbb0:	9b04      	ldr	r3, [sp, #16]
    bbb2:	6258      	str	r0, [r3, #36]	; 0x24
    bbb4:	6044      	str	r4, [r0, #4]
    bbb6:	6084      	str	r4, [r0, #8]
    bbb8:	6004      	str	r4, [r0, #0]
    bbba:	60c4      	str	r4, [r0, #12]
    bbbc:	9b04      	ldr	r3, [sp, #16]
    bbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bbc0:	6819      	ldr	r1, [r3, #0]
    bbc2:	2900      	cmp	r1, #0
    bbc4:	d00b      	beq.n	bbde <_dtoa_r+0x4a>
    bbc6:	685a      	ldr	r2, [r3, #4]
    bbc8:	2301      	movs	r3, #1
    bbca:	4093      	lsls	r3, r2
    bbcc:	604a      	str	r2, [r1, #4]
    bbce:	608b      	str	r3, [r1, #8]
    bbd0:	9804      	ldr	r0, [sp, #16]
    bbd2:	f001 f812 	bl	cbfa <_Bfree>
    bbd6:	2200      	movs	r2, #0
    bbd8:	9b04      	ldr	r3, [sp, #16]
    bbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bbdc:	601a      	str	r2, [r3, #0]
    bbde:	9b07      	ldr	r3, [sp, #28]
    bbe0:	2b00      	cmp	r3, #0
    bbe2:	da1f      	bge.n	bc24 <_dtoa_r+0x90>
    bbe4:	2301      	movs	r3, #1
    bbe6:	602b      	str	r3, [r5, #0]
    bbe8:	007b      	lsls	r3, r7, #1
    bbea:	085b      	lsrs	r3, r3, #1
    bbec:	9307      	str	r3, [sp, #28]
    bbee:	9c07      	ldr	r4, [sp, #28]
    bbf0:	4bb7      	ldr	r3, [pc, #732]	; (bed0 <_dtoa_r+0x33c>)
    bbf2:	0022      	movs	r2, r4
    bbf4:	9319      	str	r3, [sp, #100]	; 0x64
    bbf6:	401a      	ands	r2, r3
    bbf8:	429a      	cmp	r2, r3
    bbfa:	d116      	bne.n	bc2a <_dtoa_r+0x96>
    bbfc:	4bb5      	ldr	r3, [pc, #724]	; (bed4 <_dtoa_r+0x340>)
    bbfe:	9a24      	ldr	r2, [sp, #144]	; 0x90
    bc00:	6013      	str	r3, [r2, #0]
    bc02:	9b06      	ldr	r3, [sp, #24]
    bc04:	2b00      	cmp	r3, #0
    bc06:	d103      	bne.n	bc10 <_dtoa_r+0x7c>
    bc08:	0324      	lsls	r4, r4, #12
    bc0a:	d101      	bne.n	bc10 <_dtoa_r+0x7c>
    bc0c:	f000 fd91 	bl	c732 <_dtoa_r+0xb9e>
    bc10:	4bb1      	ldr	r3, [pc, #708]	; (bed8 <_dtoa_r+0x344>)
    bc12:	9a26      	ldr	r2, [sp, #152]	; 0x98
    bc14:	930a      	str	r3, [sp, #40]	; 0x28
    bc16:	4bb1      	ldr	r3, [pc, #708]	; (bedc <_dtoa_r+0x348>)
    bc18:	2a00      	cmp	r2, #0
    bc1a:	d001      	beq.n	bc20 <_dtoa_r+0x8c>
    bc1c:	f000 fd8f 	bl	c73e <_dtoa_r+0xbaa>
    bc20:	f000 fd8f 	bl	c742 <_dtoa_r+0xbae>
    bc24:	2300      	movs	r3, #0
    bc26:	602b      	str	r3, [r5, #0]
    bc28:	e7e1      	b.n	bbee <_dtoa_r+0x5a>
    bc2a:	9e06      	ldr	r6, [sp, #24]
    bc2c:	9f07      	ldr	r7, [sp, #28]
    bc2e:	2200      	movs	r2, #0
    bc30:	2300      	movs	r3, #0
    bc32:	0030      	movs	r0, r6
    bc34:	0039      	movs	r1, r7
    bc36:	f001 fff5 	bl	dc24 <__aeabi_dcmpeq>
    bc3a:	1e05      	subs	r5, r0, #0
    bc3c:	d00e      	beq.n	bc5c <_dtoa_r+0xc8>
    bc3e:	2301      	movs	r3, #1
    bc40:	9a24      	ldr	r2, [sp, #144]	; 0x90
    bc42:	6013      	str	r3, [r2, #0]
    bc44:	4ba6      	ldr	r3, [pc, #664]	; (bee0 <_dtoa_r+0x34c>)
    bc46:	9a26      	ldr	r2, [sp, #152]	; 0x98
    bc48:	930a      	str	r3, [sp, #40]	; 0x28
    bc4a:	2a00      	cmp	r2, #0
    bc4c:	d101      	bne.n	bc52 <_dtoa_r+0xbe>
    bc4e:	f000 fd78 	bl	c742 <_dtoa_r+0xbae>
    bc52:	4aa4      	ldr	r2, [pc, #656]	; (bee4 <_dtoa_r+0x350>)
    bc54:	9926      	ldr	r1, [sp, #152]	; 0x98
    bc56:	600a      	str	r2, [r1, #0]
    bc58:	f000 fd73 	bl	c742 <_dtoa_r+0xbae>
    bc5c:	ab1a      	add	r3, sp, #104	; 0x68
    bc5e:	9301      	str	r3, [sp, #4]
    bc60:	ab1b      	add	r3, sp, #108	; 0x6c
    bc62:	9300      	str	r3, [sp, #0]
    bc64:	0032      	movs	r2, r6
    bc66:	003b      	movs	r3, r7
    bc68:	9804      	ldr	r0, [sp, #16]
    bc6a:	f001 fa1d 	bl	d0a8 <__d2b>
    bc6e:	0063      	lsls	r3, r4, #1
    bc70:	9005      	str	r0, [sp, #20]
    bc72:	0d5b      	lsrs	r3, r3, #21
    bc74:	d100      	bne.n	bc78 <_dtoa_r+0xe4>
    bc76:	e07f      	b.n	bd78 <_dtoa_r+0x1e4>
    bc78:	033a      	lsls	r2, r7, #12
    bc7a:	4c9b      	ldr	r4, [pc, #620]	; (bee8 <_dtoa_r+0x354>)
    bc7c:	0b12      	lsrs	r2, r2, #12
    bc7e:	4314      	orrs	r4, r2
    bc80:	0021      	movs	r1, r4
    bc82:	4a9a      	ldr	r2, [pc, #616]	; (beec <_dtoa_r+0x358>)
    bc84:	0030      	movs	r0, r6
    bc86:	9518      	str	r5, [sp, #96]	; 0x60
    bc88:	189e      	adds	r6, r3, r2
    bc8a:	2200      	movs	r2, #0
    bc8c:	4b98      	ldr	r3, [pc, #608]	; (bef0 <_dtoa_r+0x35c>)
    bc8e:	f003 fc9d 	bl	f5cc <__aeabi_dsub>
    bc92:	4a98      	ldr	r2, [pc, #608]	; (bef4 <_dtoa_r+0x360>)
    bc94:	4b98      	ldr	r3, [pc, #608]	; (bef8 <_dtoa_r+0x364>)
    bc96:	f003 fa19 	bl	f0cc <__aeabi_dmul>
    bc9a:	4a98      	ldr	r2, [pc, #608]	; (befc <_dtoa_r+0x368>)
    bc9c:	4b98      	ldr	r3, [pc, #608]	; (bf00 <_dtoa_r+0x36c>)
    bc9e:	f002 fad1 	bl	e244 <__aeabi_dadd>
    bca2:	0004      	movs	r4, r0
    bca4:	0030      	movs	r0, r6
    bca6:	000d      	movs	r5, r1
    bca8:	f003 fffa 	bl	fca0 <__aeabi_i2d>
    bcac:	4a95      	ldr	r2, [pc, #596]	; (bf04 <_dtoa_r+0x370>)
    bcae:	4b96      	ldr	r3, [pc, #600]	; (bf08 <_dtoa_r+0x374>)
    bcb0:	f003 fa0c 	bl	f0cc <__aeabi_dmul>
    bcb4:	0002      	movs	r2, r0
    bcb6:	000b      	movs	r3, r1
    bcb8:	0020      	movs	r0, r4
    bcba:	0029      	movs	r1, r5
    bcbc:	f002 fac2 	bl	e244 <__aeabi_dadd>
    bcc0:	0004      	movs	r4, r0
    bcc2:	000d      	movs	r5, r1
    bcc4:	f003 ffb8 	bl	fc38 <__aeabi_d2iz>
    bcc8:	2200      	movs	r2, #0
    bcca:	9003      	str	r0, [sp, #12]
    bccc:	2300      	movs	r3, #0
    bcce:	0020      	movs	r0, r4
    bcd0:	0029      	movs	r1, r5
    bcd2:	f001 ffad 	bl	dc30 <__aeabi_dcmplt>
    bcd6:	2800      	cmp	r0, #0
    bcd8:	d00e      	beq.n	bcf8 <_dtoa_r+0x164>
    bcda:	9803      	ldr	r0, [sp, #12]
    bcdc:	f003 ffe0 	bl	fca0 <__aeabi_i2d>
    bce0:	000b      	movs	r3, r1
    bce2:	0002      	movs	r2, r0
    bce4:	0029      	movs	r1, r5
    bce6:	0020      	movs	r0, r4
    bce8:	f001 ff9c 	bl	dc24 <__aeabi_dcmpeq>
    bcec:	0003      	movs	r3, r0
    bcee:	4258      	negs	r0, r3
    bcf0:	4158      	adcs	r0, r3
    bcf2:	9b03      	ldr	r3, [sp, #12]
    bcf4:	1a1b      	subs	r3, r3, r0
    bcf6:	9303      	str	r3, [sp, #12]
    bcf8:	2301      	movs	r3, #1
    bcfa:	9316      	str	r3, [sp, #88]	; 0x58
    bcfc:	9b03      	ldr	r3, [sp, #12]
    bcfe:	2b16      	cmp	r3, #22
    bd00:	d80f      	bhi.n	bd22 <_dtoa_r+0x18e>
    bd02:	4982      	ldr	r1, [pc, #520]	; (bf0c <_dtoa_r+0x378>)
    bd04:	00db      	lsls	r3, r3, #3
    bd06:	18c9      	adds	r1, r1, r3
    bd08:	6808      	ldr	r0, [r1, #0]
    bd0a:	6849      	ldr	r1, [r1, #4]
    bd0c:	9a06      	ldr	r2, [sp, #24]
    bd0e:	9b07      	ldr	r3, [sp, #28]
    bd10:	f001 ffa2 	bl	dc58 <__aeabi_dcmpgt>
    bd14:	2800      	cmp	r0, #0
    bd16:	d04b      	beq.n	bdb0 <_dtoa_r+0x21c>
    bd18:	9b03      	ldr	r3, [sp, #12]
    bd1a:	3b01      	subs	r3, #1
    bd1c:	9303      	str	r3, [sp, #12]
    bd1e:	2300      	movs	r3, #0
    bd20:	9316      	str	r3, [sp, #88]	; 0x58
    bd22:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bd24:	1b9e      	subs	r6, r3, r6
    bd26:	2300      	movs	r3, #0
    bd28:	930b      	str	r3, [sp, #44]	; 0x2c
    bd2a:	0033      	movs	r3, r6
    bd2c:	3b01      	subs	r3, #1
    bd2e:	930c      	str	r3, [sp, #48]	; 0x30
    bd30:	d504      	bpl.n	bd3c <_dtoa_r+0x1a8>
    bd32:	2301      	movs	r3, #1
    bd34:	1b9b      	subs	r3, r3, r6
    bd36:	930b      	str	r3, [sp, #44]	; 0x2c
    bd38:	2300      	movs	r3, #0
    bd3a:	930c      	str	r3, [sp, #48]	; 0x30
    bd3c:	9b03      	ldr	r3, [sp, #12]
    bd3e:	2b00      	cmp	r3, #0
    bd40:	db38      	blt.n	bdb4 <_dtoa_r+0x220>
    bd42:	9a03      	ldr	r2, [sp, #12]
    bd44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd46:	4694      	mov	ip, r2
    bd48:	4463      	add	r3, ip
    bd4a:	930c      	str	r3, [sp, #48]	; 0x30
    bd4c:	2300      	movs	r3, #0
    bd4e:	920f      	str	r2, [sp, #60]	; 0x3c
    bd50:	9308      	str	r3, [sp, #32]
    bd52:	9b22      	ldr	r3, [sp, #136]	; 0x88
    bd54:	2501      	movs	r5, #1
    bd56:	2b09      	cmp	r3, #9
    bd58:	d900      	bls.n	bd5c <_dtoa_r+0x1c8>
    bd5a:	e091      	b.n	be80 <_dtoa_r+0x2ec>
    bd5c:	2b05      	cmp	r3, #5
    bd5e:	dd02      	ble.n	bd66 <_dtoa_r+0x1d2>
    bd60:	2500      	movs	r5, #0
    bd62:	3b04      	subs	r3, #4
    bd64:	9322      	str	r3, [sp, #136]	; 0x88
    bd66:	9b22      	ldr	r3, [sp, #136]	; 0x88
    bd68:	1e98      	subs	r0, r3, #2
    bd6a:	2803      	cmp	r0, #3
    bd6c:	d900      	bls.n	bd70 <_dtoa_r+0x1dc>
    bd6e:	e091      	b.n	be94 <_dtoa_r+0x300>
    bd70:	f001 fdc8 	bl	d904 <__gnu_thumb1_case_uqi>
    bd74:	76298482 	.word	0x76298482
    bd78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bd7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    bd7c:	189e      	adds	r6, r3, r2
    bd7e:	4b64      	ldr	r3, [pc, #400]	; (bf10 <_dtoa_r+0x37c>)
    bd80:	18f2      	adds	r2, r6, r3
    bd82:	2a20      	cmp	r2, #32
    bd84:	dd0f      	ble.n	bda6 <_dtoa_r+0x212>
    bd86:	4b63      	ldr	r3, [pc, #396]	; (bf14 <_dtoa_r+0x380>)
    bd88:	9806      	ldr	r0, [sp, #24]
    bd8a:	18f3      	adds	r3, r6, r3
    bd8c:	40d8      	lsrs	r0, r3
    bd8e:	2340      	movs	r3, #64	; 0x40
    bd90:	1a9b      	subs	r3, r3, r2
    bd92:	409c      	lsls	r4, r3
    bd94:	4320      	orrs	r0, r4
    bd96:	f003 ffc5 	bl	fd24 <__aeabi_ui2d>
    bd9a:	2301      	movs	r3, #1
    bd9c:	4c5e      	ldr	r4, [pc, #376]	; (bf18 <_dtoa_r+0x384>)
    bd9e:	3e01      	subs	r6, #1
    bda0:	1909      	adds	r1, r1, r4
    bda2:	9318      	str	r3, [sp, #96]	; 0x60
    bda4:	e771      	b.n	bc8a <_dtoa_r+0xf6>
    bda6:	2320      	movs	r3, #32
    bda8:	9806      	ldr	r0, [sp, #24]
    bdaa:	1a9b      	subs	r3, r3, r2
    bdac:	4098      	lsls	r0, r3
    bdae:	e7f2      	b.n	bd96 <_dtoa_r+0x202>
    bdb0:	9016      	str	r0, [sp, #88]	; 0x58
    bdb2:	e7b6      	b.n	bd22 <_dtoa_r+0x18e>
    bdb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bdb6:	9a03      	ldr	r2, [sp, #12]
    bdb8:	1a9b      	subs	r3, r3, r2
    bdba:	930b      	str	r3, [sp, #44]	; 0x2c
    bdbc:	4253      	negs	r3, r2
    bdbe:	9308      	str	r3, [sp, #32]
    bdc0:	2300      	movs	r3, #0
    bdc2:	930f      	str	r3, [sp, #60]	; 0x3c
    bdc4:	e7c5      	b.n	bd52 <_dtoa_r+0x1be>
    bdc6:	2301      	movs	r3, #1
    bdc8:	930e      	str	r3, [sp, #56]	; 0x38
    bdca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    bdcc:	2b00      	cmp	r3, #0
    bdce:	dd65      	ble.n	be9c <_dtoa_r+0x308>
    bdd0:	001f      	movs	r7, r3
    bdd2:	930d      	str	r3, [sp, #52]	; 0x34
    bdd4:	9a04      	ldr	r2, [sp, #16]
    bdd6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    bdd8:	2200      	movs	r2, #0
    bdda:	6062      	str	r2, [r4, #4]
    bddc:	3204      	adds	r2, #4
    bdde:	0011      	movs	r1, r2
    bde0:	3114      	adds	r1, #20
    bde2:	4299      	cmp	r1, r3
    bde4:	d95f      	bls.n	bea6 <_dtoa_r+0x312>
    bde6:	6861      	ldr	r1, [r4, #4]
    bde8:	9804      	ldr	r0, [sp, #16]
    bdea:	f000 fece 	bl	cb8a <_Balloc>
    bdee:	9b04      	ldr	r3, [sp, #16]
    bdf0:	6020      	str	r0, [r4, #0]
    bdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bdf4:	681b      	ldr	r3, [r3, #0]
    bdf6:	930a      	str	r3, [sp, #40]	; 0x28
    bdf8:	2f0e      	cmp	r7, #14
    bdfa:	d900      	bls.n	bdfe <_dtoa_r+0x26a>
    bdfc:	e105      	b.n	c00a <_dtoa_r+0x476>
    bdfe:	2d00      	cmp	r5, #0
    be00:	d100      	bne.n	be04 <_dtoa_r+0x270>
    be02:	e102      	b.n	c00a <_dtoa_r+0x476>
    be04:	9b06      	ldr	r3, [sp, #24]
    be06:	9c07      	ldr	r4, [sp, #28]
    be08:	9314      	str	r3, [sp, #80]	; 0x50
    be0a:	9415      	str	r4, [sp, #84]	; 0x54
    be0c:	9b03      	ldr	r3, [sp, #12]
    be0e:	2b00      	cmp	r3, #0
    be10:	dc00      	bgt.n	be14 <_dtoa_r+0x280>
    be12:	e085      	b.n	bf20 <_dtoa_r+0x38c>
    be14:	001a      	movs	r2, r3
    be16:	210f      	movs	r1, #15
    be18:	4b3c      	ldr	r3, [pc, #240]	; (bf0c <_dtoa_r+0x378>)
    be1a:	400a      	ands	r2, r1
    be1c:	00d2      	lsls	r2, r2, #3
    be1e:	189b      	adds	r3, r3, r2
    be20:	685c      	ldr	r4, [r3, #4]
    be22:	681b      	ldr	r3, [r3, #0]
    be24:	9310      	str	r3, [sp, #64]	; 0x40
    be26:	9411      	str	r4, [sp, #68]	; 0x44
    be28:	9b03      	ldr	r3, [sp, #12]
    be2a:	2402      	movs	r4, #2
    be2c:	111d      	asrs	r5, r3, #4
    be2e:	06eb      	lsls	r3, r5, #27
    be30:	d50a      	bpl.n	be48 <_dtoa_r+0x2b4>
    be32:	4b3a      	ldr	r3, [pc, #232]	; (bf1c <_dtoa_r+0x388>)
    be34:	400d      	ands	r5, r1
    be36:	6a1a      	ldr	r2, [r3, #32]
    be38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    be3a:	9814      	ldr	r0, [sp, #80]	; 0x50
    be3c:	9915      	ldr	r1, [sp, #84]	; 0x54
    be3e:	f002 fd11 	bl	e864 <__aeabi_ddiv>
    be42:	9006      	str	r0, [sp, #24]
    be44:	9107      	str	r1, [sp, #28]
    be46:	3401      	adds	r4, #1
    be48:	4e34      	ldr	r6, [pc, #208]	; (bf1c <_dtoa_r+0x388>)
    be4a:	2d00      	cmp	r5, #0
    be4c:	d130      	bne.n	beb0 <_dtoa_r+0x31c>
    be4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    be50:	9b11      	ldr	r3, [sp, #68]	; 0x44
    be52:	9806      	ldr	r0, [sp, #24]
    be54:	9907      	ldr	r1, [sp, #28]
    be56:	f002 fd05 	bl	e864 <__aeabi_ddiv>
    be5a:	9006      	str	r0, [sp, #24]
    be5c:	9107      	str	r1, [sp, #28]
    be5e:	e07a      	b.n	bf56 <_dtoa_r+0x3c2>
    be60:	2301      	movs	r3, #1
    be62:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    be64:	930e      	str	r3, [sp, #56]	; 0x38
    be66:	4694      	mov	ip, r2
    be68:	9b03      	ldr	r3, [sp, #12]
    be6a:	4463      	add	r3, ip
    be6c:	1c5f      	adds	r7, r3, #1
    be6e:	930d      	str	r3, [sp, #52]	; 0x34
    be70:	1e3b      	subs	r3, r7, #0
    be72:	dcaf      	bgt.n	bdd4 <_dtoa_r+0x240>
    be74:	2301      	movs	r3, #1
    be76:	e7ad      	b.n	bdd4 <_dtoa_r+0x240>
    be78:	2300      	movs	r3, #0
    be7a:	e7a5      	b.n	bdc8 <_dtoa_r+0x234>
    be7c:	2300      	movs	r3, #0
    be7e:	e7f0      	b.n	be62 <_dtoa_r+0x2ce>
    be80:	2300      	movs	r3, #0
    be82:	950e      	str	r5, [sp, #56]	; 0x38
    be84:	9322      	str	r3, [sp, #136]	; 0x88
    be86:	3b01      	subs	r3, #1
    be88:	2200      	movs	r2, #0
    be8a:	930d      	str	r3, [sp, #52]	; 0x34
    be8c:	001f      	movs	r7, r3
    be8e:	3313      	adds	r3, #19
    be90:	9223      	str	r2, [sp, #140]	; 0x8c
    be92:	e79f      	b.n	bdd4 <_dtoa_r+0x240>
    be94:	2301      	movs	r3, #1
    be96:	930e      	str	r3, [sp, #56]	; 0x38
    be98:	3b02      	subs	r3, #2
    be9a:	e7f5      	b.n	be88 <_dtoa_r+0x2f4>
    be9c:	2301      	movs	r3, #1
    be9e:	930d      	str	r3, [sp, #52]	; 0x34
    bea0:	001f      	movs	r7, r3
    bea2:	001a      	movs	r2, r3
    bea4:	e7f4      	b.n	be90 <_dtoa_r+0x2fc>
    bea6:	6861      	ldr	r1, [r4, #4]
    bea8:	0052      	lsls	r2, r2, #1
    beaa:	3101      	adds	r1, #1
    beac:	6061      	str	r1, [r4, #4]
    beae:	e796      	b.n	bdde <_dtoa_r+0x24a>
    beb0:	2301      	movs	r3, #1
    beb2:	421d      	tst	r5, r3
    beb4:	d008      	beq.n	bec8 <_dtoa_r+0x334>
    beb6:	9810      	ldr	r0, [sp, #64]	; 0x40
    beb8:	9911      	ldr	r1, [sp, #68]	; 0x44
    beba:	18e4      	adds	r4, r4, r3
    bebc:	6832      	ldr	r2, [r6, #0]
    bebe:	6873      	ldr	r3, [r6, #4]
    bec0:	f003 f904 	bl	f0cc <__aeabi_dmul>
    bec4:	9010      	str	r0, [sp, #64]	; 0x40
    bec6:	9111      	str	r1, [sp, #68]	; 0x44
    bec8:	106d      	asrs	r5, r5, #1
    beca:	3608      	adds	r6, #8
    becc:	e7bd      	b.n	be4a <_dtoa_r+0x2b6>
    bece:	46c0      	nop			; (mov r8, r8)
    bed0:	7ff00000 	.word	0x7ff00000
    bed4:	0000270f 	.word	0x0000270f
    bed8:	000127c8 	.word	0x000127c8
    bedc:	000127cb 	.word	0x000127cb
    bee0:	0001269a 	.word	0x0001269a
    bee4:	0001269b 	.word	0x0001269b
    bee8:	3ff00000 	.word	0x3ff00000
    beec:	fffffc01 	.word	0xfffffc01
    bef0:	3ff80000 	.word	0x3ff80000
    bef4:	636f4361 	.word	0x636f4361
    bef8:	3fd287a7 	.word	0x3fd287a7
    befc:	8b60c8b3 	.word	0x8b60c8b3
    bf00:	3fc68a28 	.word	0x3fc68a28
    bf04:	509f79fb 	.word	0x509f79fb
    bf08:	3fd34413 	.word	0x3fd34413
    bf0c:	00012858 	.word	0x00012858
    bf10:	00000432 	.word	0x00000432
    bf14:	00000412 	.word	0x00000412
    bf18:	fe100000 	.word	0xfe100000
    bf1c:	00012830 	.word	0x00012830
    bf20:	9b03      	ldr	r3, [sp, #12]
    bf22:	2402      	movs	r4, #2
    bf24:	2b00      	cmp	r3, #0
    bf26:	d016      	beq.n	bf56 <_dtoa_r+0x3c2>
    bf28:	9814      	ldr	r0, [sp, #80]	; 0x50
    bf2a:	9915      	ldr	r1, [sp, #84]	; 0x54
    bf2c:	425d      	negs	r5, r3
    bf2e:	230f      	movs	r3, #15
    bf30:	4aca      	ldr	r2, [pc, #808]	; (c25c <_dtoa_r+0x6c8>)
    bf32:	402b      	ands	r3, r5
    bf34:	00db      	lsls	r3, r3, #3
    bf36:	18d3      	adds	r3, r2, r3
    bf38:	681a      	ldr	r2, [r3, #0]
    bf3a:	685b      	ldr	r3, [r3, #4]
    bf3c:	f003 f8c6 	bl	f0cc <__aeabi_dmul>
    bf40:	2300      	movs	r3, #0
    bf42:	9006      	str	r0, [sp, #24]
    bf44:	9107      	str	r1, [sp, #28]
    bf46:	4ec6      	ldr	r6, [pc, #792]	; (c260 <_dtoa_r+0x6cc>)
    bf48:	112d      	asrs	r5, r5, #4
    bf4a:	2d00      	cmp	r5, #0
    bf4c:	d000      	beq.n	bf50 <_dtoa_r+0x3bc>
    bf4e:	e08c      	b.n	c06a <_dtoa_r+0x4d6>
    bf50:	2b00      	cmp	r3, #0
    bf52:	d000      	beq.n	bf56 <_dtoa_r+0x3c2>
    bf54:	e781      	b.n	be5a <_dtoa_r+0x2c6>
    bf56:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bf58:	2b00      	cmp	r3, #0
    bf5a:	d100      	bne.n	bf5e <_dtoa_r+0x3ca>
    bf5c:	e091      	b.n	c082 <_dtoa_r+0x4ee>
    bf5e:	9a06      	ldr	r2, [sp, #24]
    bf60:	9b07      	ldr	r3, [sp, #28]
    bf62:	9210      	str	r2, [sp, #64]	; 0x40
    bf64:	9311      	str	r3, [sp, #68]	; 0x44
    bf66:	9810      	ldr	r0, [sp, #64]	; 0x40
    bf68:	9911      	ldr	r1, [sp, #68]	; 0x44
    bf6a:	2200      	movs	r2, #0
    bf6c:	4bbd      	ldr	r3, [pc, #756]	; (c264 <_dtoa_r+0x6d0>)
    bf6e:	f001 fe5f 	bl	dc30 <__aeabi_dcmplt>
    bf72:	2800      	cmp	r0, #0
    bf74:	d100      	bne.n	bf78 <_dtoa_r+0x3e4>
    bf76:	e084      	b.n	c082 <_dtoa_r+0x4ee>
    bf78:	2f00      	cmp	r7, #0
    bf7a:	d100      	bne.n	bf7e <_dtoa_r+0x3ea>
    bf7c:	e081      	b.n	c082 <_dtoa_r+0x4ee>
    bf7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bf80:	2b00      	cmp	r3, #0
    bf82:	dd3e      	ble.n	c002 <_dtoa_r+0x46e>
    bf84:	9810      	ldr	r0, [sp, #64]	; 0x40
    bf86:	9911      	ldr	r1, [sp, #68]	; 0x44
    bf88:	9b03      	ldr	r3, [sp, #12]
    bf8a:	2200      	movs	r2, #0
    bf8c:	1e5e      	subs	r6, r3, #1
    bf8e:	4bb6      	ldr	r3, [pc, #728]	; (c268 <_dtoa_r+0x6d4>)
    bf90:	f003 f89c 	bl	f0cc <__aeabi_dmul>
    bf94:	9006      	str	r0, [sp, #24]
    bf96:	9107      	str	r1, [sp, #28]
    bf98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    bf9a:	3401      	adds	r4, #1
    bf9c:	0020      	movs	r0, r4
    bf9e:	f003 fe7f 	bl	fca0 <__aeabi_i2d>
    bfa2:	9a06      	ldr	r2, [sp, #24]
    bfa4:	9b07      	ldr	r3, [sp, #28]
    bfa6:	f003 f891 	bl	f0cc <__aeabi_dmul>
    bfaa:	2200      	movs	r2, #0
    bfac:	4baf      	ldr	r3, [pc, #700]	; (c26c <_dtoa_r+0x6d8>)
    bfae:	f002 f949 	bl	e244 <__aeabi_dadd>
    bfb2:	9012      	str	r0, [sp, #72]	; 0x48
    bfb4:	9113      	str	r1, [sp, #76]	; 0x4c
    bfb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bfb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    bfba:	4aad      	ldr	r2, [pc, #692]	; (c270 <_dtoa_r+0x6dc>)
    bfbc:	9310      	str	r3, [sp, #64]	; 0x40
    bfbe:	9411      	str	r4, [sp, #68]	; 0x44
    bfc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bfc2:	189c      	adds	r4, r3, r2
    bfc4:	9411      	str	r4, [sp, #68]	; 0x44
    bfc6:	2d00      	cmp	r5, #0
    bfc8:	d15e      	bne.n	c088 <_dtoa_r+0x4f4>
    bfca:	9806      	ldr	r0, [sp, #24]
    bfcc:	9907      	ldr	r1, [sp, #28]
    bfce:	2200      	movs	r2, #0
    bfd0:	4ba8      	ldr	r3, [pc, #672]	; (c274 <_dtoa_r+0x6e0>)
    bfd2:	f003 fafb 	bl	f5cc <__aeabi_dsub>
    bfd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bfd8:	0023      	movs	r3, r4
    bfda:	9006      	str	r0, [sp, #24]
    bfdc:	9107      	str	r1, [sp, #28]
    bfde:	f001 fe3b 	bl	dc58 <__aeabi_dcmpgt>
    bfe2:	2800      	cmp	r0, #0
    bfe4:	d000      	beq.n	bfe8 <_dtoa_r+0x454>
    bfe6:	e301      	b.n	c5ec <_dtoa_r+0xa58>
    bfe8:	48a3      	ldr	r0, [pc, #652]	; (c278 <_dtoa_r+0x6e4>)
    bfea:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bfec:	4684      	mov	ip, r0
    bfee:	4461      	add	r1, ip
    bff0:	000b      	movs	r3, r1
    bff2:	9806      	ldr	r0, [sp, #24]
    bff4:	9907      	ldr	r1, [sp, #28]
    bff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bff8:	f001 fe1a 	bl	dc30 <__aeabi_dcmplt>
    bffc:	2800      	cmp	r0, #0
    bffe:	d000      	beq.n	c002 <_dtoa_r+0x46e>
    c000:	e2e8      	b.n	c5d4 <_dtoa_r+0xa40>
    c002:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c004:	9c15      	ldr	r4, [sp, #84]	; 0x54
    c006:	9306      	str	r3, [sp, #24]
    c008:	9407      	str	r4, [sp, #28]
    c00a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c00c:	2b00      	cmp	r3, #0
    c00e:	da00      	bge.n	c012 <_dtoa_r+0x47e>
    c010:	e157      	b.n	c2c2 <_dtoa_r+0x72e>
    c012:	9a03      	ldr	r2, [sp, #12]
    c014:	2a0e      	cmp	r2, #14
    c016:	dd00      	ble.n	c01a <_dtoa_r+0x486>
    c018:	e153      	b.n	c2c2 <_dtoa_r+0x72e>
    c01a:	4b90      	ldr	r3, [pc, #576]	; (c25c <_dtoa_r+0x6c8>)
    c01c:	00d2      	lsls	r2, r2, #3
    c01e:	189b      	adds	r3, r3, r2
    c020:	685c      	ldr	r4, [r3, #4]
    c022:	681b      	ldr	r3, [r3, #0]
    c024:	9308      	str	r3, [sp, #32]
    c026:	9409      	str	r4, [sp, #36]	; 0x24
    c028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c02a:	2b00      	cmp	r3, #0
    c02c:	db00      	blt.n	c030 <_dtoa_r+0x49c>
    c02e:	e0ce      	b.n	c1ce <_dtoa_r+0x63a>
    c030:	2f00      	cmp	r7, #0
    c032:	dd00      	ble.n	c036 <_dtoa_r+0x4a2>
    c034:	e0cb      	b.n	c1ce <_dtoa_r+0x63a>
    c036:	d000      	beq.n	c03a <_dtoa_r+0x4a6>
    c038:	e2cf      	b.n	c5da <_dtoa_r+0xa46>
    c03a:	9808      	ldr	r0, [sp, #32]
    c03c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c03e:	2200      	movs	r2, #0
    c040:	4b8c      	ldr	r3, [pc, #560]	; (c274 <_dtoa_r+0x6e0>)
    c042:	f003 f843 	bl	f0cc <__aeabi_dmul>
    c046:	9a06      	ldr	r2, [sp, #24]
    c048:	9b07      	ldr	r3, [sp, #28]
    c04a:	f001 fe0f 	bl	dc6c <__aeabi_dcmpge>
    c04e:	003e      	movs	r6, r7
    c050:	9708      	str	r7, [sp, #32]
    c052:	2800      	cmp	r0, #0
    c054:	d000      	beq.n	c058 <_dtoa_r+0x4c4>
    c056:	e2a4      	b.n	c5a2 <_dtoa_r+0xa0e>
    c058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c05a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c05c:	1c5d      	adds	r5, r3, #1
    c05e:	2331      	movs	r3, #49	; 0x31
    c060:	7013      	strb	r3, [r2, #0]
    c062:	9b03      	ldr	r3, [sp, #12]
    c064:	3301      	adds	r3, #1
    c066:	9303      	str	r3, [sp, #12]
    c068:	e29f      	b.n	c5aa <_dtoa_r+0xa16>
    c06a:	2201      	movs	r2, #1
    c06c:	4215      	tst	r5, r2
    c06e:	d005      	beq.n	c07c <_dtoa_r+0x4e8>
    c070:	18a4      	adds	r4, r4, r2
    c072:	6832      	ldr	r2, [r6, #0]
    c074:	6873      	ldr	r3, [r6, #4]
    c076:	f003 f829 	bl	f0cc <__aeabi_dmul>
    c07a:	2301      	movs	r3, #1
    c07c:	106d      	asrs	r5, r5, #1
    c07e:	3608      	adds	r6, #8
    c080:	e763      	b.n	bf4a <_dtoa_r+0x3b6>
    c082:	9e03      	ldr	r6, [sp, #12]
    c084:	003d      	movs	r5, r7
    c086:	e789      	b.n	bf9c <_dtoa_r+0x408>
    c088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c08a:	1e69      	subs	r1, r5, #1
    c08c:	1952      	adds	r2, r2, r5
    c08e:	9217      	str	r2, [sp, #92]	; 0x5c
    c090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c092:	4b72      	ldr	r3, [pc, #456]	; (c25c <_dtoa_r+0x6c8>)
    c094:	00c9      	lsls	r1, r1, #3
    c096:	2a00      	cmp	r2, #0
    c098:	d04a      	beq.n	c130 <_dtoa_r+0x59c>
    c09a:	185b      	adds	r3, r3, r1
    c09c:	681a      	ldr	r2, [r3, #0]
    c09e:	685b      	ldr	r3, [r3, #4]
    c0a0:	2000      	movs	r0, #0
    c0a2:	4976      	ldr	r1, [pc, #472]	; (c27c <_dtoa_r+0x6e8>)
    c0a4:	f002 fbde 	bl	e864 <__aeabi_ddiv>
    c0a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c0aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c0ac:	f003 fa8e 	bl	f5cc <__aeabi_dsub>
    c0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c0b2:	9010      	str	r0, [sp, #64]	; 0x40
    c0b4:	9111      	str	r1, [sp, #68]	; 0x44
    c0b6:	9312      	str	r3, [sp, #72]	; 0x48
    c0b8:	9806      	ldr	r0, [sp, #24]
    c0ba:	9907      	ldr	r1, [sp, #28]
    c0bc:	f003 fdbc 	bl	fc38 <__aeabi_d2iz>
    c0c0:	0004      	movs	r4, r0
    c0c2:	f003 fded 	bl	fca0 <__aeabi_i2d>
    c0c6:	0002      	movs	r2, r0
    c0c8:	000b      	movs	r3, r1
    c0ca:	9806      	ldr	r0, [sp, #24]
    c0cc:	9907      	ldr	r1, [sp, #28]
    c0ce:	f003 fa7d 	bl	f5cc <__aeabi_dsub>
    c0d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c0d4:	3430      	adds	r4, #48	; 0x30
    c0d6:	1c5d      	adds	r5, r3, #1
    c0d8:	701c      	strb	r4, [r3, #0]
    c0da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c0dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c0de:	9006      	str	r0, [sp, #24]
    c0e0:	9107      	str	r1, [sp, #28]
    c0e2:	f001 fda5 	bl	dc30 <__aeabi_dcmplt>
    c0e6:	2800      	cmp	r0, #0
    c0e8:	d165      	bne.n	c1b6 <_dtoa_r+0x622>
    c0ea:	9a06      	ldr	r2, [sp, #24]
    c0ec:	9b07      	ldr	r3, [sp, #28]
    c0ee:	2000      	movs	r0, #0
    c0f0:	495c      	ldr	r1, [pc, #368]	; (c264 <_dtoa_r+0x6d0>)
    c0f2:	f003 fa6b 	bl	f5cc <__aeabi_dsub>
    c0f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c0f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c0fa:	f001 fd99 	bl	dc30 <__aeabi_dcmplt>
    c0fe:	2800      	cmp	r0, #0
    c100:	d000      	beq.n	c104 <_dtoa_r+0x570>
    c102:	e0be      	b.n	c282 <_dtoa_r+0x6ee>
    c104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c106:	429d      	cmp	r5, r3
    c108:	d100      	bne.n	c10c <_dtoa_r+0x578>
    c10a:	e77a      	b.n	c002 <_dtoa_r+0x46e>
    c10c:	9810      	ldr	r0, [sp, #64]	; 0x40
    c10e:	9911      	ldr	r1, [sp, #68]	; 0x44
    c110:	2200      	movs	r2, #0
    c112:	4b55      	ldr	r3, [pc, #340]	; (c268 <_dtoa_r+0x6d4>)
    c114:	f002 ffda 	bl	f0cc <__aeabi_dmul>
    c118:	2200      	movs	r2, #0
    c11a:	9010      	str	r0, [sp, #64]	; 0x40
    c11c:	9111      	str	r1, [sp, #68]	; 0x44
    c11e:	9806      	ldr	r0, [sp, #24]
    c120:	9907      	ldr	r1, [sp, #28]
    c122:	4b51      	ldr	r3, [pc, #324]	; (c268 <_dtoa_r+0x6d4>)
    c124:	f002 ffd2 	bl	f0cc <__aeabi_dmul>
    c128:	9512      	str	r5, [sp, #72]	; 0x48
    c12a:	9006      	str	r0, [sp, #24]
    c12c:	9107      	str	r1, [sp, #28]
    c12e:	e7c3      	b.n	c0b8 <_dtoa_r+0x524>
    c130:	1859      	adds	r1, r3, r1
    c132:	6808      	ldr	r0, [r1, #0]
    c134:	6849      	ldr	r1, [r1, #4]
    c136:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c138:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c13a:	f002 ffc7 	bl	f0cc <__aeabi_dmul>
    c13e:	9010      	str	r0, [sp, #64]	; 0x40
    c140:	9111      	str	r1, [sp, #68]	; 0x44
    c142:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c144:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    c146:	9806      	ldr	r0, [sp, #24]
    c148:	9907      	ldr	r1, [sp, #28]
    c14a:	f003 fd75 	bl	fc38 <__aeabi_d2iz>
    c14e:	9012      	str	r0, [sp, #72]	; 0x48
    c150:	f003 fda6 	bl	fca0 <__aeabi_i2d>
    c154:	0002      	movs	r2, r0
    c156:	000b      	movs	r3, r1
    c158:	9806      	ldr	r0, [sp, #24]
    c15a:	9907      	ldr	r1, [sp, #28]
    c15c:	f003 fa36 	bl	f5cc <__aeabi_dsub>
    c160:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c162:	9006      	str	r0, [sp, #24]
    c164:	9107      	str	r1, [sp, #28]
    c166:	3330      	adds	r3, #48	; 0x30
    c168:	7023      	strb	r3, [r4, #0]
    c16a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c16c:	3401      	adds	r4, #1
    c16e:	2200      	movs	r2, #0
    c170:	42a3      	cmp	r3, r4
    c172:	d124      	bne.n	c1be <_dtoa_r+0x62a>
    c174:	4b41      	ldr	r3, [pc, #260]	; (c27c <_dtoa_r+0x6e8>)
    c176:	9810      	ldr	r0, [sp, #64]	; 0x40
    c178:	9911      	ldr	r1, [sp, #68]	; 0x44
    c17a:	f002 f863 	bl	e244 <__aeabi_dadd>
    c17e:	0002      	movs	r2, r0
    c180:	000b      	movs	r3, r1
    c182:	9806      	ldr	r0, [sp, #24]
    c184:	9907      	ldr	r1, [sp, #28]
    c186:	f001 fd67 	bl	dc58 <__aeabi_dcmpgt>
    c18a:	2800      	cmp	r0, #0
    c18c:	d000      	beq.n	c190 <_dtoa_r+0x5fc>
    c18e:	e078      	b.n	c282 <_dtoa_r+0x6ee>
    c190:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c192:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c194:	2000      	movs	r0, #0
    c196:	4939      	ldr	r1, [pc, #228]	; (c27c <_dtoa_r+0x6e8>)
    c198:	f003 fa18 	bl	f5cc <__aeabi_dsub>
    c19c:	0002      	movs	r2, r0
    c19e:	000b      	movs	r3, r1
    c1a0:	9806      	ldr	r0, [sp, #24]
    c1a2:	9907      	ldr	r1, [sp, #28]
    c1a4:	f001 fd44 	bl	dc30 <__aeabi_dcmplt>
    c1a8:	2800      	cmp	r0, #0
    c1aa:	d100      	bne.n	c1ae <_dtoa_r+0x61a>
    c1ac:	e729      	b.n	c002 <_dtoa_r+0x46e>
    c1ae:	1e6b      	subs	r3, r5, #1
    c1b0:	781a      	ldrb	r2, [r3, #0]
    c1b2:	2a30      	cmp	r2, #48	; 0x30
    c1b4:	d001      	beq.n	c1ba <_dtoa_r+0x626>
    c1b6:	9603      	str	r6, [sp, #12]
    c1b8:	e03f      	b.n	c23a <_dtoa_r+0x6a6>
    c1ba:	001d      	movs	r5, r3
    c1bc:	e7f7      	b.n	c1ae <_dtoa_r+0x61a>
    c1be:	9806      	ldr	r0, [sp, #24]
    c1c0:	9907      	ldr	r1, [sp, #28]
    c1c2:	4b29      	ldr	r3, [pc, #164]	; (c268 <_dtoa_r+0x6d4>)
    c1c4:	f002 ff82 	bl	f0cc <__aeabi_dmul>
    c1c8:	9006      	str	r0, [sp, #24]
    c1ca:	9107      	str	r1, [sp, #28]
    c1cc:	e7bb      	b.n	c146 <_dtoa_r+0x5b2>
    c1ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c1d0:	9a08      	ldr	r2, [sp, #32]
    c1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c1d4:	9806      	ldr	r0, [sp, #24]
    c1d6:	9907      	ldr	r1, [sp, #28]
    c1d8:	f002 fb44 	bl	e864 <__aeabi_ddiv>
    c1dc:	f003 fd2c 	bl	fc38 <__aeabi_d2iz>
    c1e0:	0004      	movs	r4, r0
    c1e2:	f003 fd5d 	bl	fca0 <__aeabi_i2d>
    c1e6:	9a08      	ldr	r2, [sp, #32]
    c1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c1ea:	f002 ff6f 	bl	f0cc <__aeabi_dmul>
    c1ee:	000b      	movs	r3, r1
    c1f0:	0002      	movs	r2, r0
    c1f2:	9806      	ldr	r0, [sp, #24]
    c1f4:	9907      	ldr	r1, [sp, #28]
    c1f6:	f003 f9e9 	bl	f5cc <__aeabi_dsub>
    c1fa:	0023      	movs	r3, r4
    c1fc:	3330      	adds	r3, #48	; 0x30
    c1fe:	7033      	strb	r3, [r6, #0]
    c200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c202:	1c75      	adds	r5, r6, #1
    c204:	1aeb      	subs	r3, r5, r3
    c206:	429f      	cmp	r7, r3
    c208:	d14c      	bne.n	c2a4 <_dtoa_r+0x710>
    c20a:	0002      	movs	r2, r0
    c20c:	000b      	movs	r3, r1
    c20e:	f002 f819 	bl	e244 <__aeabi_dadd>
    c212:	0006      	movs	r6, r0
    c214:	000f      	movs	r7, r1
    c216:	0002      	movs	r2, r0
    c218:	000b      	movs	r3, r1
    c21a:	9808      	ldr	r0, [sp, #32]
    c21c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c21e:	f001 fd07 	bl	dc30 <__aeabi_dcmplt>
    c222:	2800      	cmp	r0, #0
    c224:	d12c      	bne.n	c280 <_dtoa_r+0x6ec>
    c226:	9808      	ldr	r0, [sp, #32]
    c228:	9909      	ldr	r1, [sp, #36]	; 0x24
    c22a:	0032      	movs	r2, r6
    c22c:	003b      	movs	r3, r7
    c22e:	f001 fcf9 	bl	dc24 <__aeabi_dcmpeq>
    c232:	2800      	cmp	r0, #0
    c234:	d001      	beq.n	c23a <_dtoa_r+0x6a6>
    c236:	07e3      	lsls	r3, r4, #31
    c238:	d422      	bmi.n	c280 <_dtoa_r+0x6ec>
    c23a:	9905      	ldr	r1, [sp, #20]
    c23c:	9804      	ldr	r0, [sp, #16]
    c23e:	f000 fcdc 	bl	cbfa <_Bfree>
    c242:	2300      	movs	r3, #0
    c244:	702b      	strb	r3, [r5, #0]
    c246:	9b03      	ldr	r3, [sp, #12]
    c248:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c24a:	3301      	adds	r3, #1
    c24c:	6013      	str	r3, [r2, #0]
    c24e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c250:	2b00      	cmp	r3, #0
    c252:	d100      	bne.n	c256 <_dtoa_r+0x6c2>
    c254:	e275      	b.n	c742 <_dtoa_r+0xbae>
    c256:	601d      	str	r5, [r3, #0]
    c258:	e273      	b.n	c742 <_dtoa_r+0xbae>
    c25a:	46c0      	nop			; (mov r8, r8)
    c25c:	00012858 	.word	0x00012858
    c260:	00012830 	.word	0x00012830
    c264:	3ff00000 	.word	0x3ff00000
    c268:	40240000 	.word	0x40240000
    c26c:	401c0000 	.word	0x401c0000
    c270:	fcc00000 	.word	0xfcc00000
    c274:	40140000 	.word	0x40140000
    c278:	7cc00000 	.word	0x7cc00000
    c27c:	3fe00000 	.word	0x3fe00000
    c280:	9e03      	ldr	r6, [sp, #12]
    c282:	1e6b      	subs	r3, r5, #1
    c284:	781a      	ldrb	r2, [r3, #0]
    c286:	2a39      	cmp	r2, #57	; 0x39
    c288:	d106      	bne.n	c298 <_dtoa_r+0x704>
    c28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c28c:	429a      	cmp	r2, r3
    c28e:	d107      	bne.n	c2a0 <_dtoa_r+0x70c>
    c290:	2330      	movs	r3, #48	; 0x30
    c292:	7013      	strb	r3, [r2, #0]
    c294:	0013      	movs	r3, r2
    c296:	3601      	adds	r6, #1
    c298:	781a      	ldrb	r2, [r3, #0]
    c29a:	3201      	adds	r2, #1
    c29c:	701a      	strb	r2, [r3, #0]
    c29e:	e78a      	b.n	c1b6 <_dtoa_r+0x622>
    c2a0:	001d      	movs	r5, r3
    c2a2:	e7ee      	b.n	c282 <_dtoa_r+0x6ee>
    c2a4:	2200      	movs	r2, #0
    c2a6:	4bcf      	ldr	r3, [pc, #828]	; (c5e4 <_dtoa_r+0xa50>)
    c2a8:	f002 ff10 	bl	f0cc <__aeabi_dmul>
    c2ac:	2200      	movs	r2, #0
    c2ae:	2300      	movs	r3, #0
    c2b0:	9006      	str	r0, [sp, #24]
    c2b2:	9107      	str	r1, [sp, #28]
    c2b4:	002e      	movs	r6, r5
    c2b6:	f001 fcb5 	bl	dc24 <__aeabi_dcmpeq>
    c2ba:	2800      	cmp	r0, #0
    c2bc:	d100      	bne.n	c2c0 <_dtoa_r+0x72c>
    c2be:	e787      	b.n	c1d0 <_dtoa_r+0x63c>
    c2c0:	e7bb      	b.n	c23a <_dtoa_r+0x6a6>
    c2c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c2c4:	2a00      	cmp	r2, #0
    c2c6:	d100      	bne.n	c2ca <_dtoa_r+0x736>
    c2c8:	e087      	b.n	c3da <_dtoa_r+0x846>
    c2ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c2cc:	2a01      	cmp	r2, #1
    c2ce:	dc6e      	bgt.n	c3ae <_dtoa_r+0x81a>
    c2d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c2d2:	2a00      	cmp	r2, #0
    c2d4:	d067      	beq.n	c3a6 <_dtoa_r+0x812>
    c2d6:	4ac4      	ldr	r2, [pc, #784]	; (c5e8 <_dtoa_r+0xa54>)
    c2d8:	189b      	adds	r3, r3, r2
    c2da:	9d08      	ldr	r5, [sp, #32]
    c2dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c2de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c2e0:	2101      	movs	r1, #1
    c2e2:	18d2      	adds	r2, r2, r3
    c2e4:	920b      	str	r2, [sp, #44]	; 0x2c
    c2e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2e8:	9804      	ldr	r0, [sp, #16]
    c2ea:	18d3      	adds	r3, r2, r3
    c2ec:	930c      	str	r3, [sp, #48]	; 0x30
    c2ee:	f000 fd22 	bl	cd36 <__i2b>
    c2f2:	0006      	movs	r6, r0
    c2f4:	2c00      	cmp	r4, #0
    c2f6:	dd0e      	ble.n	c316 <_dtoa_r+0x782>
    c2f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c2fa:	2b00      	cmp	r3, #0
    c2fc:	dd0b      	ble.n	c316 <_dtoa_r+0x782>
    c2fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c300:	0023      	movs	r3, r4
    c302:	4294      	cmp	r4, r2
    c304:	dd00      	ble.n	c308 <_dtoa_r+0x774>
    c306:	0013      	movs	r3, r2
    c308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c30a:	1ae4      	subs	r4, r4, r3
    c30c:	1ad2      	subs	r2, r2, r3
    c30e:	920b      	str	r2, [sp, #44]	; 0x2c
    c310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c312:	1ad3      	subs	r3, r2, r3
    c314:	930c      	str	r3, [sp, #48]	; 0x30
    c316:	9b08      	ldr	r3, [sp, #32]
    c318:	2b00      	cmp	r3, #0
    c31a:	d01e      	beq.n	c35a <_dtoa_r+0x7c6>
    c31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c31e:	2b00      	cmp	r3, #0
    c320:	d05f      	beq.n	c3e2 <_dtoa_r+0x84e>
    c322:	2d00      	cmp	r5, #0
    c324:	dd11      	ble.n	c34a <_dtoa_r+0x7b6>
    c326:	0031      	movs	r1, r6
    c328:	002a      	movs	r2, r5
    c32a:	9804      	ldr	r0, [sp, #16]
    c32c:	f000 fd9c 	bl	ce68 <__pow5mult>
    c330:	9a05      	ldr	r2, [sp, #20]
    c332:	0001      	movs	r1, r0
    c334:	0006      	movs	r6, r0
    c336:	9804      	ldr	r0, [sp, #16]
    c338:	f000 fd06 	bl	cd48 <__multiply>
    c33c:	9905      	ldr	r1, [sp, #20]
    c33e:	9010      	str	r0, [sp, #64]	; 0x40
    c340:	9804      	ldr	r0, [sp, #16]
    c342:	f000 fc5a 	bl	cbfa <_Bfree>
    c346:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c348:	9305      	str	r3, [sp, #20]
    c34a:	9b08      	ldr	r3, [sp, #32]
    c34c:	1b5a      	subs	r2, r3, r5
    c34e:	d004      	beq.n	c35a <_dtoa_r+0x7c6>
    c350:	9905      	ldr	r1, [sp, #20]
    c352:	9804      	ldr	r0, [sp, #16]
    c354:	f000 fd88 	bl	ce68 <__pow5mult>
    c358:	9005      	str	r0, [sp, #20]
    c35a:	2101      	movs	r1, #1
    c35c:	9804      	ldr	r0, [sp, #16]
    c35e:	f000 fcea 	bl	cd36 <__i2b>
    c362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c364:	9008      	str	r0, [sp, #32]
    c366:	2b00      	cmp	r3, #0
    c368:	dd3d      	ble.n	c3e6 <_dtoa_r+0x852>
    c36a:	001a      	movs	r2, r3
    c36c:	0001      	movs	r1, r0
    c36e:	9804      	ldr	r0, [sp, #16]
    c370:	f000 fd7a 	bl	ce68 <__pow5mult>
    c374:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c376:	9008      	str	r0, [sp, #32]
    c378:	2500      	movs	r5, #0
    c37a:	2b01      	cmp	r3, #1
    c37c:	dc3b      	bgt.n	c3f6 <_dtoa_r+0x862>
    c37e:	2500      	movs	r5, #0
    c380:	9b06      	ldr	r3, [sp, #24]
    c382:	42ab      	cmp	r3, r5
    c384:	d133      	bne.n	c3ee <_dtoa_r+0x85a>
    c386:	9b07      	ldr	r3, [sp, #28]
    c388:	031b      	lsls	r3, r3, #12
    c38a:	42ab      	cmp	r3, r5
    c38c:	d12f      	bne.n	c3ee <_dtoa_r+0x85a>
    c38e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c390:	9a07      	ldr	r2, [sp, #28]
    c392:	4213      	tst	r3, r2
    c394:	d02b      	beq.n	c3ee <_dtoa_r+0x85a>
    c396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c398:	3501      	adds	r5, #1
    c39a:	3301      	adds	r3, #1
    c39c:	930b      	str	r3, [sp, #44]	; 0x2c
    c39e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c3a0:	3301      	adds	r3, #1
    c3a2:	930c      	str	r3, [sp, #48]	; 0x30
    c3a4:	e023      	b.n	c3ee <_dtoa_r+0x85a>
    c3a6:	2336      	movs	r3, #54	; 0x36
    c3a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    c3aa:	1a9b      	subs	r3, r3, r2
    c3ac:	e795      	b.n	c2da <_dtoa_r+0x746>
    c3ae:	9b08      	ldr	r3, [sp, #32]
    c3b0:	1e7d      	subs	r5, r7, #1
    c3b2:	42ab      	cmp	r3, r5
    c3b4:	db06      	blt.n	c3c4 <_dtoa_r+0x830>
    c3b6:	1b5d      	subs	r5, r3, r5
    c3b8:	2f00      	cmp	r7, #0
    c3ba:	da0b      	bge.n	c3d4 <_dtoa_r+0x840>
    c3bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c3be:	1bdc      	subs	r4, r3, r7
    c3c0:	2300      	movs	r3, #0
    c3c2:	e78c      	b.n	c2de <_dtoa_r+0x74a>
    c3c4:	9b08      	ldr	r3, [sp, #32]
    c3c6:	9508      	str	r5, [sp, #32]
    c3c8:	1aea      	subs	r2, r5, r3
    c3ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c3cc:	2500      	movs	r5, #0
    c3ce:	189b      	adds	r3, r3, r2
    c3d0:	930f      	str	r3, [sp, #60]	; 0x3c
    c3d2:	e7f1      	b.n	c3b8 <_dtoa_r+0x824>
    c3d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c3d6:	003b      	movs	r3, r7
    c3d8:	e781      	b.n	c2de <_dtoa_r+0x74a>
    c3da:	9d08      	ldr	r5, [sp, #32]
    c3dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c3de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c3e0:	e788      	b.n	c2f4 <_dtoa_r+0x760>
    c3e2:	9a08      	ldr	r2, [sp, #32]
    c3e4:	e7b4      	b.n	c350 <_dtoa_r+0x7bc>
    c3e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c3e8:	2500      	movs	r5, #0
    c3ea:	2b01      	cmp	r3, #1
    c3ec:	ddc7      	ble.n	c37e <_dtoa_r+0x7ea>
    c3ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c3f0:	2001      	movs	r0, #1
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d00b      	beq.n	c40e <_dtoa_r+0x87a>
    c3f6:	9b08      	ldr	r3, [sp, #32]
    c3f8:	9a08      	ldr	r2, [sp, #32]
    c3fa:	691b      	ldr	r3, [r3, #16]
    c3fc:	930f      	str	r3, [sp, #60]	; 0x3c
    c3fe:	3303      	adds	r3, #3
    c400:	009b      	lsls	r3, r3, #2
    c402:	18d3      	adds	r3, r2, r3
    c404:	6858      	ldr	r0, [r3, #4]
    c406:	f000 fc4d 	bl	cca4 <__hi0bits>
    c40a:	2320      	movs	r3, #32
    c40c:	1a18      	subs	r0, r3, r0
    c40e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c410:	18c0      	adds	r0, r0, r3
    c412:	231f      	movs	r3, #31
    c414:	4018      	ands	r0, r3
    c416:	d100      	bne.n	c41a <_dtoa_r+0x886>
    c418:	e0ab      	b.n	c572 <_dtoa_r+0x9de>
    c41a:	3301      	adds	r3, #1
    c41c:	1a1b      	subs	r3, r3, r0
    c41e:	2b04      	cmp	r3, #4
    c420:	dc00      	bgt.n	c424 <_dtoa_r+0x890>
    c422:	e09b      	b.n	c55c <_dtoa_r+0x9c8>
    c424:	231c      	movs	r3, #28
    c426:	1a18      	subs	r0, r3, r0
    c428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c42a:	1824      	adds	r4, r4, r0
    c42c:	181b      	adds	r3, r3, r0
    c42e:	930b      	str	r3, [sp, #44]	; 0x2c
    c430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c432:	181b      	adds	r3, r3, r0
    c434:	930c      	str	r3, [sp, #48]	; 0x30
    c436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c438:	2b00      	cmp	r3, #0
    c43a:	dd05      	ble.n	c448 <_dtoa_r+0x8b4>
    c43c:	001a      	movs	r2, r3
    c43e:	9905      	ldr	r1, [sp, #20]
    c440:	9804      	ldr	r0, [sp, #16]
    c442:	f000 fd63 	bl	cf0c <__lshift>
    c446:	9005      	str	r0, [sp, #20]
    c448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c44a:	2b00      	cmp	r3, #0
    c44c:	dd05      	ble.n	c45a <_dtoa_r+0x8c6>
    c44e:	001a      	movs	r2, r3
    c450:	9908      	ldr	r1, [sp, #32]
    c452:	9804      	ldr	r0, [sp, #16]
    c454:	f000 fd5a 	bl	cf0c <__lshift>
    c458:	9008      	str	r0, [sp, #32]
    c45a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c45c:	2b00      	cmp	r3, #0
    c45e:	d100      	bne.n	c462 <_dtoa_r+0x8ce>
    c460:	e089      	b.n	c576 <_dtoa_r+0x9e2>
    c462:	9908      	ldr	r1, [sp, #32]
    c464:	9805      	ldr	r0, [sp, #20]
    c466:	f000 fda2 	bl	cfae <__mcmp>
    c46a:	2800      	cmp	r0, #0
    c46c:	db00      	blt.n	c470 <_dtoa_r+0x8dc>
    c46e:	e082      	b.n	c576 <_dtoa_r+0x9e2>
    c470:	9b03      	ldr	r3, [sp, #12]
    c472:	220a      	movs	r2, #10
    c474:	3b01      	subs	r3, #1
    c476:	9303      	str	r3, [sp, #12]
    c478:	9905      	ldr	r1, [sp, #20]
    c47a:	2300      	movs	r3, #0
    c47c:	9804      	ldr	r0, [sp, #16]
    c47e:	f000 fbd5 	bl	cc2c <__multadd>
    c482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c484:	9005      	str	r0, [sp, #20]
    c486:	2b00      	cmp	r3, #0
    c488:	d100      	bne.n	c48c <_dtoa_r+0x8f8>
    c48a:	e15d      	b.n	c748 <_dtoa_r+0xbb4>
    c48c:	2300      	movs	r3, #0
    c48e:	0031      	movs	r1, r6
    c490:	220a      	movs	r2, #10
    c492:	9804      	ldr	r0, [sp, #16]
    c494:	f000 fbca 	bl	cc2c <__multadd>
    c498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c49a:	0006      	movs	r6, r0
    c49c:	2b00      	cmp	r3, #0
    c49e:	dc02      	bgt.n	c4a6 <_dtoa_r+0x912>
    c4a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c4a2:	2b02      	cmp	r3, #2
    c4a4:	dc6d      	bgt.n	c582 <_dtoa_r+0x9ee>
    c4a6:	2c00      	cmp	r4, #0
    c4a8:	dd05      	ble.n	c4b6 <_dtoa_r+0x922>
    c4aa:	0031      	movs	r1, r6
    c4ac:	0022      	movs	r2, r4
    c4ae:	9804      	ldr	r0, [sp, #16]
    c4b0:	f000 fd2c 	bl	cf0c <__lshift>
    c4b4:	0006      	movs	r6, r0
    c4b6:	0030      	movs	r0, r6
    c4b8:	2d00      	cmp	r5, #0
    c4ba:	d011      	beq.n	c4e0 <_dtoa_r+0x94c>
    c4bc:	6871      	ldr	r1, [r6, #4]
    c4be:	9804      	ldr	r0, [sp, #16]
    c4c0:	f000 fb63 	bl	cb8a <_Balloc>
    c4c4:	0031      	movs	r1, r6
    c4c6:	0004      	movs	r4, r0
    c4c8:	6933      	ldr	r3, [r6, #16]
    c4ca:	310c      	adds	r1, #12
    c4cc:	1c9a      	adds	r2, r3, #2
    c4ce:	0092      	lsls	r2, r2, #2
    c4d0:	300c      	adds	r0, #12
    c4d2:	f7fe f9f5 	bl	a8c0 <memcpy>
    c4d6:	2201      	movs	r2, #1
    c4d8:	0021      	movs	r1, r4
    c4da:	9804      	ldr	r0, [sp, #16]
    c4dc:	f000 fd16 	bl	cf0c <__lshift>
    c4e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    c4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4e4:	3f01      	subs	r7, #1
    c4e6:	930b      	str	r3, [sp, #44]	; 0x2c
    c4e8:	19db      	adds	r3, r3, r7
    c4ea:	0037      	movs	r7, r6
    c4ec:	0006      	movs	r6, r0
    c4ee:	930f      	str	r3, [sp, #60]	; 0x3c
    c4f0:	9908      	ldr	r1, [sp, #32]
    c4f2:	9805      	ldr	r0, [sp, #20]
    c4f4:	f7ff faca 	bl	ba8c <quorem>
    c4f8:	0039      	movs	r1, r7
    c4fa:	900d      	str	r0, [sp, #52]	; 0x34
    c4fc:	0004      	movs	r4, r0
    c4fe:	9805      	ldr	r0, [sp, #20]
    c500:	f000 fd55 	bl	cfae <__mcmp>
    c504:	0032      	movs	r2, r6
    c506:	900e      	str	r0, [sp, #56]	; 0x38
    c508:	9908      	ldr	r1, [sp, #32]
    c50a:	9804      	ldr	r0, [sp, #16]
    c50c:	f000 fd68 	bl	cfe0 <__mdiff>
    c510:	2301      	movs	r3, #1
    c512:	930c      	str	r3, [sp, #48]	; 0x30
    c514:	68c3      	ldr	r3, [r0, #12]
    c516:	3430      	adds	r4, #48	; 0x30
    c518:	0005      	movs	r5, r0
    c51a:	2b00      	cmp	r3, #0
    c51c:	d104      	bne.n	c528 <_dtoa_r+0x994>
    c51e:	0001      	movs	r1, r0
    c520:	9805      	ldr	r0, [sp, #20]
    c522:	f000 fd44 	bl	cfae <__mcmp>
    c526:	900c      	str	r0, [sp, #48]	; 0x30
    c528:	0029      	movs	r1, r5
    c52a:	9804      	ldr	r0, [sp, #16]
    c52c:	f000 fb65 	bl	cbfa <_Bfree>
    c530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c532:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c534:	4313      	orrs	r3, r2
    c536:	d000      	beq.n	c53a <_dtoa_r+0x9a6>
    c538:	e089      	b.n	c64e <_dtoa_r+0xaba>
    c53a:	9a06      	ldr	r2, [sp, #24]
    c53c:	3301      	adds	r3, #1
    c53e:	4213      	tst	r3, r2
    c540:	d000      	beq.n	c544 <_dtoa_r+0x9b0>
    c542:	e084      	b.n	c64e <_dtoa_r+0xaba>
    c544:	2c39      	cmp	r4, #57	; 0x39
    c546:	d100      	bne.n	c54a <_dtoa_r+0x9b6>
    c548:	e0a3      	b.n	c692 <_dtoa_r+0xafe>
    c54a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c54c:	2b00      	cmp	r3, #0
    c54e:	dd01      	ble.n	c554 <_dtoa_r+0x9c0>
    c550:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    c552:	3431      	adds	r4, #49	; 0x31
    c554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c556:	1c5d      	adds	r5, r3, #1
    c558:	701c      	strb	r4, [r3, #0]
    c55a:	e027      	b.n	c5ac <_dtoa_r+0xa18>
    c55c:	2b04      	cmp	r3, #4
    c55e:	d100      	bne.n	c562 <_dtoa_r+0x9ce>
    c560:	e769      	b.n	c436 <_dtoa_r+0x8a2>
    c562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c564:	331c      	adds	r3, #28
    c566:	18d2      	adds	r2, r2, r3
    c568:	920b      	str	r2, [sp, #44]	; 0x2c
    c56a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c56c:	18e4      	adds	r4, r4, r3
    c56e:	18d3      	adds	r3, r2, r3
    c570:	e760      	b.n	c434 <_dtoa_r+0x8a0>
    c572:	0003      	movs	r3, r0
    c574:	e7f5      	b.n	c562 <_dtoa_r+0x9ce>
    c576:	2f00      	cmp	r7, #0
    c578:	dc3c      	bgt.n	c5f4 <_dtoa_r+0xa60>
    c57a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c57c:	2b02      	cmp	r3, #2
    c57e:	dd39      	ble.n	c5f4 <_dtoa_r+0xa60>
    c580:	970d      	str	r7, [sp, #52]	; 0x34
    c582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c584:	2b00      	cmp	r3, #0
    c586:	d10c      	bne.n	c5a2 <_dtoa_r+0xa0e>
    c588:	9908      	ldr	r1, [sp, #32]
    c58a:	2205      	movs	r2, #5
    c58c:	9804      	ldr	r0, [sp, #16]
    c58e:	f000 fb4d 	bl	cc2c <__multadd>
    c592:	9008      	str	r0, [sp, #32]
    c594:	0001      	movs	r1, r0
    c596:	9805      	ldr	r0, [sp, #20]
    c598:	f000 fd09 	bl	cfae <__mcmp>
    c59c:	2800      	cmp	r0, #0
    c59e:	dd00      	ble.n	c5a2 <_dtoa_r+0xa0e>
    c5a0:	e55a      	b.n	c058 <_dtoa_r+0x4c4>
    c5a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c5a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    c5a6:	43db      	mvns	r3, r3
    c5a8:	9303      	str	r3, [sp, #12]
    c5aa:	2700      	movs	r7, #0
    c5ac:	9908      	ldr	r1, [sp, #32]
    c5ae:	9804      	ldr	r0, [sp, #16]
    c5b0:	f000 fb23 	bl	cbfa <_Bfree>
    c5b4:	2e00      	cmp	r6, #0
    c5b6:	d100      	bne.n	c5ba <_dtoa_r+0xa26>
    c5b8:	e63f      	b.n	c23a <_dtoa_r+0x6a6>
    c5ba:	2f00      	cmp	r7, #0
    c5bc:	d005      	beq.n	c5ca <_dtoa_r+0xa36>
    c5be:	42b7      	cmp	r7, r6
    c5c0:	d003      	beq.n	c5ca <_dtoa_r+0xa36>
    c5c2:	0039      	movs	r1, r7
    c5c4:	9804      	ldr	r0, [sp, #16]
    c5c6:	f000 fb18 	bl	cbfa <_Bfree>
    c5ca:	0031      	movs	r1, r6
    c5cc:	9804      	ldr	r0, [sp, #16]
    c5ce:	f000 fb14 	bl	cbfa <_Bfree>
    c5d2:	e632      	b.n	c23a <_dtoa_r+0x6a6>
    c5d4:	9508      	str	r5, [sp, #32]
    c5d6:	002e      	movs	r6, r5
    c5d8:	e7e3      	b.n	c5a2 <_dtoa_r+0xa0e>
    c5da:	2300      	movs	r3, #0
    c5dc:	9308      	str	r3, [sp, #32]
    c5de:	001e      	movs	r6, r3
    c5e0:	e7df      	b.n	c5a2 <_dtoa_r+0xa0e>
    c5e2:	46c0      	nop			; (mov r8, r8)
    c5e4:	40240000 	.word	0x40240000
    c5e8:	00000433 	.word	0x00000433
    c5ec:	9603      	str	r6, [sp, #12]
    c5ee:	9508      	str	r5, [sp, #32]
    c5f0:	002e      	movs	r6, r5
    c5f2:	e531      	b.n	c058 <_dtoa_r+0x4c4>
    c5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c5f6:	970d      	str	r7, [sp, #52]	; 0x34
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	d000      	beq.n	c5fe <_dtoa_r+0xa6a>
    c5fc:	e753      	b.n	c4a6 <_dtoa_r+0x912>
    c5fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    c600:	9908      	ldr	r1, [sp, #32]
    c602:	9805      	ldr	r0, [sp, #20]
    c604:	f7ff fa42 	bl	ba8c <quorem>
    c608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c60a:	3030      	adds	r0, #48	; 0x30
    c60c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c60e:	7028      	strb	r0, [r5, #0]
    c610:	3501      	adds	r5, #1
    c612:	0004      	movs	r4, r0
    c614:	1aeb      	subs	r3, r5, r3
    c616:	429a      	cmp	r2, r3
    c618:	dc78      	bgt.n	c70c <_dtoa_r+0xb78>
    c61a:	1e15      	subs	r5, r2, #0
    c61c:	dc00      	bgt.n	c620 <_dtoa_r+0xa8c>
    c61e:	2501      	movs	r5, #1
    c620:	2700      	movs	r7, #0
    c622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c624:	195d      	adds	r5, r3, r5
    c626:	9905      	ldr	r1, [sp, #20]
    c628:	2201      	movs	r2, #1
    c62a:	9804      	ldr	r0, [sp, #16]
    c62c:	f000 fc6e 	bl	cf0c <__lshift>
    c630:	9908      	ldr	r1, [sp, #32]
    c632:	9005      	str	r0, [sp, #20]
    c634:	f000 fcbb 	bl	cfae <__mcmp>
    c638:	2800      	cmp	r0, #0
    c63a:	dc2f      	bgt.n	c69c <_dtoa_r+0xb08>
    c63c:	d101      	bne.n	c642 <_dtoa_r+0xaae>
    c63e:	07e3      	lsls	r3, r4, #31
    c640:	d42c      	bmi.n	c69c <_dtoa_r+0xb08>
    c642:	1e6b      	subs	r3, r5, #1
    c644:	781a      	ldrb	r2, [r3, #0]
    c646:	2a30      	cmp	r2, #48	; 0x30
    c648:	d1b0      	bne.n	c5ac <_dtoa_r+0xa18>
    c64a:	001d      	movs	r5, r3
    c64c:	e7f9      	b.n	c642 <_dtoa_r+0xaae>
    c64e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c650:	2b00      	cmp	r3, #0
    c652:	db07      	blt.n	c664 <_dtoa_r+0xad0>
    c654:	001d      	movs	r5, r3
    c656:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c658:	431d      	orrs	r5, r3
    c65a:	d126      	bne.n	c6aa <_dtoa_r+0xb16>
    c65c:	2301      	movs	r3, #1
    c65e:	9a06      	ldr	r2, [sp, #24]
    c660:	4213      	tst	r3, r2
    c662:	d122      	bne.n	c6aa <_dtoa_r+0xb16>
    c664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c666:	2b00      	cmp	r3, #0
    c668:	dc00      	bgt.n	c66c <_dtoa_r+0xad8>
    c66a:	e773      	b.n	c554 <_dtoa_r+0x9c0>
    c66c:	9905      	ldr	r1, [sp, #20]
    c66e:	2201      	movs	r2, #1
    c670:	9804      	ldr	r0, [sp, #16]
    c672:	f000 fc4b 	bl	cf0c <__lshift>
    c676:	9908      	ldr	r1, [sp, #32]
    c678:	9005      	str	r0, [sp, #20]
    c67a:	f000 fc98 	bl	cfae <__mcmp>
    c67e:	2800      	cmp	r0, #0
    c680:	dc04      	bgt.n	c68c <_dtoa_r+0xaf8>
    c682:	d000      	beq.n	c686 <_dtoa_r+0xaf2>
    c684:	e766      	b.n	c554 <_dtoa_r+0x9c0>
    c686:	07e3      	lsls	r3, r4, #31
    c688:	d400      	bmi.n	c68c <_dtoa_r+0xaf8>
    c68a:	e763      	b.n	c554 <_dtoa_r+0x9c0>
    c68c:	2c39      	cmp	r4, #57	; 0x39
    c68e:	d000      	beq.n	c692 <_dtoa_r+0xafe>
    c690:	e75e      	b.n	c550 <_dtoa_r+0x9bc>
    c692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c696:	1c5d      	adds	r5, r3, #1
    c698:	2339      	movs	r3, #57	; 0x39
    c69a:	7013      	strb	r3, [r2, #0]
    c69c:	1e6b      	subs	r3, r5, #1
    c69e:	781a      	ldrb	r2, [r3, #0]
    c6a0:	2a39      	cmp	r2, #57	; 0x39
    c6a2:	d03b      	beq.n	c71c <_dtoa_r+0xb88>
    c6a4:	3201      	adds	r2, #1
    c6a6:	701a      	strb	r2, [r3, #0]
    c6a8:	e780      	b.n	c5ac <_dtoa_r+0xa18>
    c6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c6ac:	3301      	adds	r3, #1
    c6ae:	930d      	str	r3, [sp, #52]	; 0x34
    c6b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c6b2:	2b00      	cmp	r3, #0
    c6b4:	dd05      	ble.n	c6c2 <_dtoa_r+0xb2e>
    c6b6:	2c39      	cmp	r4, #57	; 0x39
    c6b8:	d0eb      	beq.n	c692 <_dtoa_r+0xafe>
    c6ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c6bc:	3401      	adds	r4, #1
    c6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c6c0:	e74a      	b.n	c558 <_dtoa_r+0x9c4>
    c6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c6c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c6c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c6c8:	701c      	strb	r4, [r3, #0]
    c6ca:	4293      	cmp	r3, r2
    c6cc:	d0ab      	beq.n	c626 <_dtoa_r+0xa92>
    c6ce:	2300      	movs	r3, #0
    c6d0:	220a      	movs	r2, #10
    c6d2:	9905      	ldr	r1, [sp, #20]
    c6d4:	9804      	ldr	r0, [sp, #16]
    c6d6:	f000 faa9 	bl	cc2c <__multadd>
    c6da:	2300      	movs	r3, #0
    c6dc:	9005      	str	r0, [sp, #20]
    c6de:	220a      	movs	r2, #10
    c6e0:	0039      	movs	r1, r7
    c6e2:	9804      	ldr	r0, [sp, #16]
    c6e4:	42b7      	cmp	r7, r6
    c6e6:	d106      	bne.n	c6f6 <_dtoa_r+0xb62>
    c6e8:	f000 faa0 	bl	cc2c <__multadd>
    c6ec:	0007      	movs	r7, r0
    c6ee:	0006      	movs	r6, r0
    c6f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c6f2:	930b      	str	r3, [sp, #44]	; 0x2c
    c6f4:	e6fc      	b.n	c4f0 <_dtoa_r+0x95c>
    c6f6:	f000 fa99 	bl	cc2c <__multadd>
    c6fa:	0031      	movs	r1, r6
    c6fc:	0007      	movs	r7, r0
    c6fe:	2300      	movs	r3, #0
    c700:	220a      	movs	r2, #10
    c702:	9804      	ldr	r0, [sp, #16]
    c704:	f000 fa92 	bl	cc2c <__multadd>
    c708:	0006      	movs	r6, r0
    c70a:	e7f1      	b.n	c6f0 <_dtoa_r+0xb5c>
    c70c:	2300      	movs	r3, #0
    c70e:	220a      	movs	r2, #10
    c710:	9905      	ldr	r1, [sp, #20]
    c712:	9804      	ldr	r0, [sp, #16]
    c714:	f000 fa8a 	bl	cc2c <__multadd>
    c718:	9005      	str	r0, [sp, #20]
    c71a:	e771      	b.n	c600 <_dtoa_r+0xa6c>
    c71c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c71e:	429a      	cmp	r2, r3
    c720:	d105      	bne.n	c72e <_dtoa_r+0xb9a>
    c722:	9b03      	ldr	r3, [sp, #12]
    c724:	3301      	adds	r3, #1
    c726:	9303      	str	r3, [sp, #12]
    c728:	2331      	movs	r3, #49	; 0x31
    c72a:	7013      	strb	r3, [r2, #0]
    c72c:	e73e      	b.n	c5ac <_dtoa_r+0xa18>
    c72e:	001d      	movs	r5, r3
    c730:	e7b4      	b.n	c69c <_dtoa_r+0xb08>
    c732:	4b0a      	ldr	r3, [pc, #40]	; (c75c <_dtoa_r+0xbc8>)
    c734:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c736:	930a      	str	r3, [sp, #40]	; 0x28
    c738:	4b09      	ldr	r3, [pc, #36]	; (c760 <_dtoa_r+0xbcc>)
    c73a:	2a00      	cmp	r2, #0
    c73c:	d001      	beq.n	c742 <_dtoa_r+0xbae>
    c73e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c740:	6013      	str	r3, [r2, #0]
    c742:	980a      	ldr	r0, [sp, #40]	; 0x28
    c744:	b01d      	add	sp, #116	; 0x74
    c746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c74a:	2b00      	cmp	r3, #0
    c74c:	dd00      	ble.n	c750 <_dtoa_r+0xbbc>
    c74e:	e756      	b.n	c5fe <_dtoa_r+0xa6a>
    c750:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c752:	2b02      	cmp	r3, #2
    c754:	dc00      	bgt.n	c758 <_dtoa_r+0xbc4>
    c756:	e752      	b.n	c5fe <_dtoa_r+0xa6a>
    c758:	e713      	b.n	c582 <_dtoa_r+0x9ee>
    c75a:	46c0      	nop			; (mov r8, r8)
    c75c:	000127bf 	.word	0x000127bf
    c760:	000127c7 	.word	0x000127c7

0000c764 <__sflush_r>:
    c764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c766:	898a      	ldrh	r2, [r1, #12]
    c768:	0005      	movs	r5, r0
    c76a:	000c      	movs	r4, r1
    c76c:	0713      	lsls	r3, r2, #28
    c76e:	d460      	bmi.n	c832 <__sflush_r+0xce>
    c770:	684b      	ldr	r3, [r1, #4]
    c772:	2b00      	cmp	r3, #0
    c774:	dc04      	bgt.n	c780 <__sflush_r+0x1c>
    c776:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c778:	2b00      	cmp	r3, #0
    c77a:	dc01      	bgt.n	c780 <__sflush_r+0x1c>
    c77c:	2000      	movs	r0, #0
    c77e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c780:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c782:	2f00      	cmp	r7, #0
    c784:	d0fa      	beq.n	c77c <__sflush_r+0x18>
    c786:	2300      	movs	r3, #0
    c788:	682e      	ldr	r6, [r5, #0]
    c78a:	602b      	str	r3, [r5, #0]
    c78c:	2380      	movs	r3, #128	; 0x80
    c78e:	015b      	lsls	r3, r3, #5
    c790:	401a      	ands	r2, r3
    c792:	d034      	beq.n	c7fe <__sflush_r+0x9a>
    c794:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c796:	89a3      	ldrh	r3, [r4, #12]
    c798:	075b      	lsls	r3, r3, #29
    c79a:	d506      	bpl.n	c7aa <__sflush_r+0x46>
    c79c:	6863      	ldr	r3, [r4, #4]
    c79e:	1ac0      	subs	r0, r0, r3
    c7a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	d001      	beq.n	c7aa <__sflush_r+0x46>
    c7a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c7a8:	1ac0      	subs	r0, r0, r3
    c7aa:	0002      	movs	r2, r0
    c7ac:	6a21      	ldr	r1, [r4, #32]
    c7ae:	2300      	movs	r3, #0
    c7b0:	0028      	movs	r0, r5
    c7b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c7b4:	47b8      	blx	r7
    c7b6:	89a1      	ldrh	r1, [r4, #12]
    c7b8:	1c43      	adds	r3, r0, #1
    c7ba:	d106      	bne.n	c7ca <__sflush_r+0x66>
    c7bc:	682b      	ldr	r3, [r5, #0]
    c7be:	2b1d      	cmp	r3, #29
    c7c0:	d831      	bhi.n	c826 <__sflush_r+0xc2>
    c7c2:	4a2c      	ldr	r2, [pc, #176]	; (c874 <__sflush_r+0x110>)
    c7c4:	40da      	lsrs	r2, r3
    c7c6:	07d3      	lsls	r3, r2, #31
    c7c8:	d52d      	bpl.n	c826 <__sflush_r+0xc2>
    c7ca:	2300      	movs	r3, #0
    c7cc:	6063      	str	r3, [r4, #4]
    c7ce:	6923      	ldr	r3, [r4, #16]
    c7d0:	6023      	str	r3, [r4, #0]
    c7d2:	04cb      	lsls	r3, r1, #19
    c7d4:	d505      	bpl.n	c7e2 <__sflush_r+0x7e>
    c7d6:	1c43      	adds	r3, r0, #1
    c7d8:	d102      	bne.n	c7e0 <__sflush_r+0x7c>
    c7da:	682b      	ldr	r3, [r5, #0]
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d100      	bne.n	c7e2 <__sflush_r+0x7e>
    c7e0:	6560      	str	r0, [r4, #84]	; 0x54
    c7e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c7e4:	602e      	str	r6, [r5, #0]
    c7e6:	2900      	cmp	r1, #0
    c7e8:	d0c8      	beq.n	c77c <__sflush_r+0x18>
    c7ea:	0023      	movs	r3, r4
    c7ec:	3344      	adds	r3, #68	; 0x44
    c7ee:	4299      	cmp	r1, r3
    c7f0:	d002      	beq.n	c7f8 <__sflush_r+0x94>
    c7f2:	0028      	movs	r0, r5
    c7f4:	f7fe f888 	bl	a908 <_free_r>
    c7f8:	2000      	movs	r0, #0
    c7fa:	6360      	str	r0, [r4, #52]	; 0x34
    c7fc:	e7bf      	b.n	c77e <__sflush_r+0x1a>
    c7fe:	2301      	movs	r3, #1
    c800:	6a21      	ldr	r1, [r4, #32]
    c802:	0028      	movs	r0, r5
    c804:	47b8      	blx	r7
    c806:	1c43      	adds	r3, r0, #1
    c808:	d1c5      	bne.n	c796 <__sflush_r+0x32>
    c80a:	682b      	ldr	r3, [r5, #0]
    c80c:	2b00      	cmp	r3, #0
    c80e:	d0c2      	beq.n	c796 <__sflush_r+0x32>
    c810:	2b1d      	cmp	r3, #29
    c812:	d001      	beq.n	c818 <__sflush_r+0xb4>
    c814:	2b16      	cmp	r3, #22
    c816:	d101      	bne.n	c81c <__sflush_r+0xb8>
    c818:	602e      	str	r6, [r5, #0]
    c81a:	e7af      	b.n	c77c <__sflush_r+0x18>
    c81c:	2340      	movs	r3, #64	; 0x40
    c81e:	89a2      	ldrh	r2, [r4, #12]
    c820:	4313      	orrs	r3, r2
    c822:	81a3      	strh	r3, [r4, #12]
    c824:	e7ab      	b.n	c77e <__sflush_r+0x1a>
    c826:	2340      	movs	r3, #64	; 0x40
    c828:	430b      	orrs	r3, r1
    c82a:	2001      	movs	r0, #1
    c82c:	81a3      	strh	r3, [r4, #12]
    c82e:	4240      	negs	r0, r0
    c830:	e7a5      	b.n	c77e <__sflush_r+0x1a>
    c832:	690f      	ldr	r7, [r1, #16]
    c834:	2f00      	cmp	r7, #0
    c836:	d0a1      	beq.n	c77c <__sflush_r+0x18>
    c838:	680b      	ldr	r3, [r1, #0]
    c83a:	600f      	str	r7, [r1, #0]
    c83c:	1bdb      	subs	r3, r3, r7
    c83e:	9301      	str	r3, [sp, #4]
    c840:	2300      	movs	r3, #0
    c842:	0792      	lsls	r2, r2, #30
    c844:	d100      	bne.n	c848 <__sflush_r+0xe4>
    c846:	694b      	ldr	r3, [r1, #20]
    c848:	60a3      	str	r3, [r4, #8]
    c84a:	9b01      	ldr	r3, [sp, #4]
    c84c:	2b00      	cmp	r3, #0
    c84e:	dc00      	bgt.n	c852 <__sflush_r+0xee>
    c850:	e794      	b.n	c77c <__sflush_r+0x18>
    c852:	9b01      	ldr	r3, [sp, #4]
    c854:	003a      	movs	r2, r7
    c856:	6a21      	ldr	r1, [r4, #32]
    c858:	0028      	movs	r0, r5
    c85a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c85c:	47b0      	blx	r6
    c85e:	2800      	cmp	r0, #0
    c860:	dc03      	bgt.n	c86a <__sflush_r+0x106>
    c862:	2340      	movs	r3, #64	; 0x40
    c864:	89a2      	ldrh	r2, [r4, #12]
    c866:	4313      	orrs	r3, r2
    c868:	e7df      	b.n	c82a <__sflush_r+0xc6>
    c86a:	9b01      	ldr	r3, [sp, #4]
    c86c:	183f      	adds	r7, r7, r0
    c86e:	1a1b      	subs	r3, r3, r0
    c870:	9301      	str	r3, [sp, #4]
    c872:	e7ea      	b.n	c84a <__sflush_r+0xe6>
    c874:	20400001 	.word	0x20400001

0000c878 <_fflush_r>:
    c878:	690b      	ldr	r3, [r1, #16]
    c87a:	b570      	push	{r4, r5, r6, lr}
    c87c:	0005      	movs	r5, r0
    c87e:	000c      	movs	r4, r1
    c880:	2b00      	cmp	r3, #0
    c882:	d101      	bne.n	c888 <_fflush_r+0x10>
    c884:	2000      	movs	r0, #0
    c886:	bd70      	pop	{r4, r5, r6, pc}
    c888:	2800      	cmp	r0, #0
    c88a:	d004      	beq.n	c896 <_fflush_r+0x1e>
    c88c:	6983      	ldr	r3, [r0, #24]
    c88e:	2b00      	cmp	r3, #0
    c890:	d101      	bne.n	c896 <_fflush_r+0x1e>
    c892:	f000 f85f 	bl	c954 <__sinit>
    c896:	4b0b      	ldr	r3, [pc, #44]	; (c8c4 <_fflush_r+0x4c>)
    c898:	429c      	cmp	r4, r3
    c89a:	d109      	bne.n	c8b0 <_fflush_r+0x38>
    c89c:	686c      	ldr	r4, [r5, #4]
    c89e:	220c      	movs	r2, #12
    c8a0:	5ea3      	ldrsh	r3, [r4, r2]
    c8a2:	2b00      	cmp	r3, #0
    c8a4:	d0ee      	beq.n	c884 <_fflush_r+0xc>
    c8a6:	0021      	movs	r1, r4
    c8a8:	0028      	movs	r0, r5
    c8aa:	f7ff ff5b 	bl	c764 <__sflush_r>
    c8ae:	e7ea      	b.n	c886 <_fflush_r+0xe>
    c8b0:	4b05      	ldr	r3, [pc, #20]	; (c8c8 <_fflush_r+0x50>)
    c8b2:	429c      	cmp	r4, r3
    c8b4:	d101      	bne.n	c8ba <_fflush_r+0x42>
    c8b6:	68ac      	ldr	r4, [r5, #8]
    c8b8:	e7f1      	b.n	c89e <_fflush_r+0x26>
    c8ba:	4b04      	ldr	r3, [pc, #16]	; (c8cc <_fflush_r+0x54>)
    c8bc:	429c      	cmp	r4, r3
    c8be:	d1ee      	bne.n	c89e <_fflush_r+0x26>
    c8c0:	68ec      	ldr	r4, [r5, #12]
    c8c2:	e7ec      	b.n	c89e <_fflush_r+0x26>
    c8c4:	000127ec 	.word	0x000127ec
    c8c8:	0001280c 	.word	0x0001280c
    c8cc:	000127cc 	.word	0x000127cc

0000c8d0 <_cleanup_r>:
    c8d0:	b510      	push	{r4, lr}
    c8d2:	4902      	ldr	r1, [pc, #8]	; (c8dc <_cleanup_r+0xc>)
    c8d4:	f000 f8b2 	bl	ca3c <_fwalk_reent>
    c8d8:	bd10      	pop	{r4, pc}
    c8da:	46c0      	nop			; (mov r8, r8)
    c8dc:	0000c879 	.word	0x0000c879

0000c8e0 <std.isra.0>:
    c8e0:	2300      	movs	r3, #0
    c8e2:	b510      	push	{r4, lr}
    c8e4:	0004      	movs	r4, r0
    c8e6:	6003      	str	r3, [r0, #0]
    c8e8:	6043      	str	r3, [r0, #4]
    c8ea:	6083      	str	r3, [r0, #8]
    c8ec:	8181      	strh	r1, [r0, #12]
    c8ee:	6643      	str	r3, [r0, #100]	; 0x64
    c8f0:	81c2      	strh	r2, [r0, #14]
    c8f2:	6103      	str	r3, [r0, #16]
    c8f4:	6143      	str	r3, [r0, #20]
    c8f6:	6183      	str	r3, [r0, #24]
    c8f8:	0019      	movs	r1, r3
    c8fa:	2208      	movs	r2, #8
    c8fc:	305c      	adds	r0, #92	; 0x5c
    c8fe:	f7fd fffa 	bl	a8f6 <memset>
    c902:	4b05      	ldr	r3, [pc, #20]	; (c918 <std.isra.0+0x38>)
    c904:	6224      	str	r4, [r4, #32]
    c906:	6263      	str	r3, [r4, #36]	; 0x24
    c908:	4b04      	ldr	r3, [pc, #16]	; (c91c <std.isra.0+0x3c>)
    c90a:	62a3      	str	r3, [r4, #40]	; 0x28
    c90c:	4b04      	ldr	r3, [pc, #16]	; (c920 <std.isra.0+0x40>)
    c90e:	62e3      	str	r3, [r4, #44]	; 0x2c
    c910:	4b04      	ldr	r3, [pc, #16]	; (c924 <std.isra.0+0x44>)
    c912:	6323      	str	r3, [r4, #48]	; 0x30
    c914:	bd10      	pop	{r4, pc}
    c916:	46c0      	nop			; (mov r8, r8)
    c918:	0000d72d 	.word	0x0000d72d
    c91c:	0000d755 	.word	0x0000d755
    c920:	0000d78d 	.word	0x0000d78d
    c924:	0000d7b9 	.word	0x0000d7b9

0000c928 <__sfmoreglue>:
    c928:	b570      	push	{r4, r5, r6, lr}
    c92a:	2568      	movs	r5, #104	; 0x68
    c92c:	1e4a      	subs	r2, r1, #1
    c92e:	4355      	muls	r5, r2
    c930:	000e      	movs	r6, r1
    c932:	0029      	movs	r1, r5
    c934:	3174      	adds	r1, #116	; 0x74
    c936:	f7fe f831 	bl	a99c <_malloc_r>
    c93a:	1e04      	subs	r4, r0, #0
    c93c:	d008      	beq.n	c950 <__sfmoreglue+0x28>
    c93e:	2100      	movs	r1, #0
    c940:	002a      	movs	r2, r5
    c942:	6001      	str	r1, [r0, #0]
    c944:	6046      	str	r6, [r0, #4]
    c946:	300c      	adds	r0, #12
    c948:	60a0      	str	r0, [r4, #8]
    c94a:	3268      	adds	r2, #104	; 0x68
    c94c:	f7fd ffd3 	bl	a8f6 <memset>
    c950:	0020      	movs	r0, r4
    c952:	bd70      	pop	{r4, r5, r6, pc}

0000c954 <__sinit>:
    c954:	6983      	ldr	r3, [r0, #24]
    c956:	b513      	push	{r0, r1, r4, lr}
    c958:	0004      	movs	r4, r0
    c95a:	2b00      	cmp	r3, #0
    c95c:	d128      	bne.n	c9b0 <__sinit+0x5c>
    c95e:	6483      	str	r3, [r0, #72]	; 0x48
    c960:	64c3      	str	r3, [r0, #76]	; 0x4c
    c962:	6503      	str	r3, [r0, #80]	; 0x50
    c964:	4b13      	ldr	r3, [pc, #76]	; (c9b4 <__sinit+0x60>)
    c966:	4a14      	ldr	r2, [pc, #80]	; (c9b8 <__sinit+0x64>)
    c968:	681b      	ldr	r3, [r3, #0]
    c96a:	6282      	str	r2, [r0, #40]	; 0x28
    c96c:	9301      	str	r3, [sp, #4]
    c96e:	4298      	cmp	r0, r3
    c970:	d101      	bne.n	c976 <__sinit+0x22>
    c972:	2301      	movs	r3, #1
    c974:	6183      	str	r3, [r0, #24]
    c976:	0020      	movs	r0, r4
    c978:	f000 f820 	bl	c9bc <__sfp>
    c97c:	6060      	str	r0, [r4, #4]
    c97e:	0020      	movs	r0, r4
    c980:	f000 f81c 	bl	c9bc <__sfp>
    c984:	60a0      	str	r0, [r4, #8]
    c986:	0020      	movs	r0, r4
    c988:	f000 f818 	bl	c9bc <__sfp>
    c98c:	2200      	movs	r2, #0
    c98e:	60e0      	str	r0, [r4, #12]
    c990:	2104      	movs	r1, #4
    c992:	6860      	ldr	r0, [r4, #4]
    c994:	f7ff ffa4 	bl	c8e0 <std.isra.0>
    c998:	2201      	movs	r2, #1
    c99a:	2109      	movs	r1, #9
    c99c:	68a0      	ldr	r0, [r4, #8]
    c99e:	f7ff ff9f 	bl	c8e0 <std.isra.0>
    c9a2:	2202      	movs	r2, #2
    c9a4:	2112      	movs	r1, #18
    c9a6:	68e0      	ldr	r0, [r4, #12]
    c9a8:	f7ff ff9a 	bl	c8e0 <std.isra.0>
    c9ac:	2301      	movs	r3, #1
    c9ae:	61a3      	str	r3, [r4, #24]
    c9b0:	bd13      	pop	{r0, r1, r4, pc}
    c9b2:	46c0      	nop			; (mov r8, r8)
    c9b4:	0001267c 	.word	0x0001267c
    c9b8:	0000c8d1 	.word	0x0000c8d1

0000c9bc <__sfp>:
    c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9be:	4b1e      	ldr	r3, [pc, #120]	; (ca38 <__sfp+0x7c>)
    c9c0:	0007      	movs	r7, r0
    c9c2:	681e      	ldr	r6, [r3, #0]
    c9c4:	69b3      	ldr	r3, [r6, #24]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d102      	bne.n	c9d0 <__sfp+0x14>
    c9ca:	0030      	movs	r0, r6
    c9cc:	f7ff ffc2 	bl	c954 <__sinit>
    c9d0:	3648      	adds	r6, #72	; 0x48
    c9d2:	68b4      	ldr	r4, [r6, #8]
    c9d4:	6873      	ldr	r3, [r6, #4]
    c9d6:	3b01      	subs	r3, #1
    c9d8:	d504      	bpl.n	c9e4 <__sfp+0x28>
    c9da:	6833      	ldr	r3, [r6, #0]
    c9dc:	2b00      	cmp	r3, #0
    c9de:	d007      	beq.n	c9f0 <__sfp+0x34>
    c9e0:	6836      	ldr	r6, [r6, #0]
    c9e2:	e7f6      	b.n	c9d2 <__sfp+0x16>
    c9e4:	220c      	movs	r2, #12
    c9e6:	5ea5      	ldrsh	r5, [r4, r2]
    c9e8:	2d00      	cmp	r5, #0
    c9ea:	d00d      	beq.n	ca08 <__sfp+0x4c>
    c9ec:	3468      	adds	r4, #104	; 0x68
    c9ee:	e7f2      	b.n	c9d6 <__sfp+0x1a>
    c9f0:	2104      	movs	r1, #4
    c9f2:	0038      	movs	r0, r7
    c9f4:	f7ff ff98 	bl	c928 <__sfmoreglue>
    c9f8:	6030      	str	r0, [r6, #0]
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d1f0      	bne.n	c9e0 <__sfp+0x24>
    c9fe:	230c      	movs	r3, #12
    ca00:	0004      	movs	r4, r0
    ca02:	603b      	str	r3, [r7, #0]
    ca04:	0020      	movs	r0, r4
    ca06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca08:	2301      	movs	r3, #1
    ca0a:	0020      	movs	r0, r4
    ca0c:	425b      	negs	r3, r3
    ca0e:	81e3      	strh	r3, [r4, #14]
    ca10:	3302      	adds	r3, #2
    ca12:	81a3      	strh	r3, [r4, #12]
    ca14:	6665      	str	r5, [r4, #100]	; 0x64
    ca16:	6025      	str	r5, [r4, #0]
    ca18:	60a5      	str	r5, [r4, #8]
    ca1a:	6065      	str	r5, [r4, #4]
    ca1c:	6125      	str	r5, [r4, #16]
    ca1e:	6165      	str	r5, [r4, #20]
    ca20:	61a5      	str	r5, [r4, #24]
    ca22:	2208      	movs	r2, #8
    ca24:	0029      	movs	r1, r5
    ca26:	305c      	adds	r0, #92	; 0x5c
    ca28:	f7fd ff65 	bl	a8f6 <memset>
    ca2c:	6365      	str	r5, [r4, #52]	; 0x34
    ca2e:	63a5      	str	r5, [r4, #56]	; 0x38
    ca30:	64a5      	str	r5, [r4, #72]	; 0x48
    ca32:	64e5      	str	r5, [r4, #76]	; 0x4c
    ca34:	e7e6      	b.n	ca04 <__sfp+0x48>
    ca36:	46c0      	nop			; (mov r8, r8)
    ca38:	0001267c 	.word	0x0001267c

0000ca3c <_fwalk_reent>:
    ca3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ca3e:	0004      	movs	r4, r0
    ca40:	0007      	movs	r7, r0
    ca42:	2600      	movs	r6, #0
    ca44:	9101      	str	r1, [sp, #4]
    ca46:	3448      	adds	r4, #72	; 0x48
    ca48:	2c00      	cmp	r4, #0
    ca4a:	d101      	bne.n	ca50 <_fwalk_reent+0x14>
    ca4c:	0030      	movs	r0, r6
    ca4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ca50:	6863      	ldr	r3, [r4, #4]
    ca52:	68a5      	ldr	r5, [r4, #8]
    ca54:	9300      	str	r3, [sp, #0]
    ca56:	9b00      	ldr	r3, [sp, #0]
    ca58:	3b01      	subs	r3, #1
    ca5a:	9300      	str	r3, [sp, #0]
    ca5c:	d501      	bpl.n	ca62 <_fwalk_reent+0x26>
    ca5e:	6824      	ldr	r4, [r4, #0]
    ca60:	e7f2      	b.n	ca48 <_fwalk_reent+0xc>
    ca62:	89ab      	ldrh	r3, [r5, #12]
    ca64:	2b01      	cmp	r3, #1
    ca66:	d908      	bls.n	ca7a <_fwalk_reent+0x3e>
    ca68:	220e      	movs	r2, #14
    ca6a:	5eab      	ldrsh	r3, [r5, r2]
    ca6c:	3301      	adds	r3, #1
    ca6e:	d004      	beq.n	ca7a <_fwalk_reent+0x3e>
    ca70:	0029      	movs	r1, r5
    ca72:	0038      	movs	r0, r7
    ca74:	9b01      	ldr	r3, [sp, #4]
    ca76:	4798      	blx	r3
    ca78:	4306      	orrs	r6, r0
    ca7a:	3568      	adds	r5, #104	; 0x68
    ca7c:	e7eb      	b.n	ca56 <_fwalk_reent+0x1a>
	...

0000ca80 <_localeconv_r>:
    ca80:	4b03      	ldr	r3, [pc, #12]	; (ca90 <_localeconv_r+0x10>)
    ca82:	681b      	ldr	r3, [r3, #0]
    ca84:	6a18      	ldr	r0, [r3, #32]
    ca86:	2800      	cmp	r0, #0
    ca88:	d100      	bne.n	ca8c <_localeconv_r+0xc>
    ca8a:	4802      	ldr	r0, [pc, #8]	; (ca94 <_localeconv_r+0x14>)
    ca8c:	30f0      	adds	r0, #240	; 0xf0
    ca8e:	4770      	bx	lr
    ca90:	20000010 	.word	0x20000010
    ca94:	20000074 	.word	0x20000074

0000ca98 <__swhatbuf_r>:
    ca98:	b570      	push	{r4, r5, r6, lr}
    ca9a:	000e      	movs	r6, r1
    ca9c:	001d      	movs	r5, r3
    ca9e:	230e      	movs	r3, #14
    caa0:	5ec9      	ldrsh	r1, [r1, r3]
    caa2:	b090      	sub	sp, #64	; 0x40
    caa4:	0014      	movs	r4, r2
    caa6:	2900      	cmp	r1, #0
    caa8:	da07      	bge.n	caba <__swhatbuf_r+0x22>
    caaa:	2300      	movs	r3, #0
    caac:	602b      	str	r3, [r5, #0]
    caae:	89b3      	ldrh	r3, [r6, #12]
    cab0:	061b      	lsls	r3, r3, #24
    cab2:	d411      	bmi.n	cad8 <__swhatbuf_r+0x40>
    cab4:	2380      	movs	r3, #128	; 0x80
    cab6:	00db      	lsls	r3, r3, #3
    cab8:	e00f      	b.n	cada <__swhatbuf_r+0x42>
    caba:	aa01      	add	r2, sp, #4
    cabc:	f000 fea8 	bl	d810 <_fstat_r>
    cac0:	2800      	cmp	r0, #0
    cac2:	dbf2      	blt.n	caaa <__swhatbuf_r+0x12>
    cac4:	22f0      	movs	r2, #240	; 0xf0
    cac6:	9b02      	ldr	r3, [sp, #8]
    cac8:	0212      	lsls	r2, r2, #8
    caca:	4013      	ands	r3, r2
    cacc:	4a05      	ldr	r2, [pc, #20]	; (cae4 <__swhatbuf_r+0x4c>)
    cace:	189b      	adds	r3, r3, r2
    cad0:	425a      	negs	r2, r3
    cad2:	4153      	adcs	r3, r2
    cad4:	602b      	str	r3, [r5, #0]
    cad6:	e7ed      	b.n	cab4 <__swhatbuf_r+0x1c>
    cad8:	2340      	movs	r3, #64	; 0x40
    cada:	2000      	movs	r0, #0
    cadc:	6023      	str	r3, [r4, #0]
    cade:	b010      	add	sp, #64	; 0x40
    cae0:	bd70      	pop	{r4, r5, r6, pc}
    cae2:	46c0      	nop			; (mov r8, r8)
    cae4:	ffffe000 	.word	0xffffe000

0000cae8 <__smakebuf_r>:
    cae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    caea:	2602      	movs	r6, #2
    caec:	898b      	ldrh	r3, [r1, #12]
    caee:	0005      	movs	r5, r0
    caf0:	000c      	movs	r4, r1
    caf2:	4233      	tst	r3, r6
    caf4:	d006      	beq.n	cb04 <__smakebuf_r+0x1c>
    caf6:	0023      	movs	r3, r4
    caf8:	3347      	adds	r3, #71	; 0x47
    cafa:	6023      	str	r3, [r4, #0]
    cafc:	6123      	str	r3, [r4, #16]
    cafe:	2301      	movs	r3, #1
    cb00:	6163      	str	r3, [r4, #20]
    cb02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cb04:	ab01      	add	r3, sp, #4
    cb06:	466a      	mov	r2, sp
    cb08:	f7ff ffc6 	bl	ca98 <__swhatbuf_r>
    cb0c:	9900      	ldr	r1, [sp, #0]
    cb0e:	0007      	movs	r7, r0
    cb10:	0028      	movs	r0, r5
    cb12:	f7fd ff43 	bl	a99c <_malloc_r>
    cb16:	2800      	cmp	r0, #0
    cb18:	d108      	bne.n	cb2c <__smakebuf_r+0x44>
    cb1a:	220c      	movs	r2, #12
    cb1c:	5ea3      	ldrsh	r3, [r4, r2]
    cb1e:	059a      	lsls	r2, r3, #22
    cb20:	d4ef      	bmi.n	cb02 <__smakebuf_r+0x1a>
    cb22:	2203      	movs	r2, #3
    cb24:	4393      	bics	r3, r2
    cb26:	431e      	orrs	r6, r3
    cb28:	81a6      	strh	r6, [r4, #12]
    cb2a:	e7e4      	b.n	caf6 <__smakebuf_r+0xe>
    cb2c:	4b0f      	ldr	r3, [pc, #60]	; (cb6c <__smakebuf_r+0x84>)
    cb2e:	62ab      	str	r3, [r5, #40]	; 0x28
    cb30:	2380      	movs	r3, #128	; 0x80
    cb32:	89a2      	ldrh	r2, [r4, #12]
    cb34:	6020      	str	r0, [r4, #0]
    cb36:	4313      	orrs	r3, r2
    cb38:	81a3      	strh	r3, [r4, #12]
    cb3a:	9b00      	ldr	r3, [sp, #0]
    cb3c:	6120      	str	r0, [r4, #16]
    cb3e:	6163      	str	r3, [r4, #20]
    cb40:	9b01      	ldr	r3, [sp, #4]
    cb42:	2b00      	cmp	r3, #0
    cb44:	d00d      	beq.n	cb62 <__smakebuf_r+0x7a>
    cb46:	230e      	movs	r3, #14
    cb48:	5ee1      	ldrsh	r1, [r4, r3]
    cb4a:	0028      	movs	r0, r5
    cb4c:	f000 fe72 	bl	d834 <_isatty_r>
    cb50:	2800      	cmp	r0, #0
    cb52:	d006      	beq.n	cb62 <__smakebuf_r+0x7a>
    cb54:	2203      	movs	r2, #3
    cb56:	89a3      	ldrh	r3, [r4, #12]
    cb58:	4393      	bics	r3, r2
    cb5a:	001a      	movs	r2, r3
    cb5c:	2301      	movs	r3, #1
    cb5e:	4313      	orrs	r3, r2
    cb60:	81a3      	strh	r3, [r4, #12]
    cb62:	89a0      	ldrh	r0, [r4, #12]
    cb64:	4338      	orrs	r0, r7
    cb66:	81a0      	strh	r0, [r4, #12]
    cb68:	e7cb      	b.n	cb02 <__smakebuf_r+0x1a>
    cb6a:	46c0      	nop			; (mov r8, r8)
    cb6c:	0000c8d1 	.word	0x0000c8d1

0000cb70 <memchr>:
    cb70:	b2c9      	uxtb	r1, r1
    cb72:	1882      	adds	r2, r0, r2
    cb74:	4290      	cmp	r0, r2
    cb76:	d101      	bne.n	cb7c <memchr+0xc>
    cb78:	2000      	movs	r0, #0
    cb7a:	4770      	bx	lr
    cb7c:	7803      	ldrb	r3, [r0, #0]
    cb7e:	428b      	cmp	r3, r1
    cb80:	d0fb      	beq.n	cb7a <memchr+0xa>
    cb82:	3001      	adds	r0, #1
    cb84:	e7f6      	b.n	cb74 <memchr+0x4>

0000cb86 <__malloc_lock>:
    cb86:	4770      	bx	lr

0000cb88 <__malloc_unlock>:
    cb88:	4770      	bx	lr

0000cb8a <_Balloc>:
    cb8a:	b570      	push	{r4, r5, r6, lr}
    cb8c:	6a46      	ldr	r6, [r0, #36]	; 0x24
    cb8e:	0004      	movs	r4, r0
    cb90:	000d      	movs	r5, r1
    cb92:	2e00      	cmp	r6, #0
    cb94:	d107      	bne.n	cba6 <_Balloc+0x1c>
    cb96:	2010      	movs	r0, #16
    cb98:	f7fd fe6c 	bl	a874 <malloc>
    cb9c:	6260      	str	r0, [r4, #36]	; 0x24
    cb9e:	6046      	str	r6, [r0, #4]
    cba0:	6086      	str	r6, [r0, #8]
    cba2:	6006      	str	r6, [r0, #0]
    cba4:	60c6      	str	r6, [r0, #12]
    cba6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    cba8:	68f3      	ldr	r3, [r6, #12]
    cbaa:	2b00      	cmp	r3, #0
    cbac:	d013      	beq.n	cbd6 <_Balloc+0x4c>
    cbae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cbb0:	00aa      	lsls	r2, r5, #2
    cbb2:	68db      	ldr	r3, [r3, #12]
    cbb4:	189b      	adds	r3, r3, r2
    cbb6:	6818      	ldr	r0, [r3, #0]
    cbb8:	2800      	cmp	r0, #0
    cbba:	d118      	bne.n	cbee <_Balloc+0x64>
    cbbc:	2101      	movs	r1, #1
    cbbe:	000e      	movs	r6, r1
    cbc0:	40ae      	lsls	r6, r5
    cbc2:	1d72      	adds	r2, r6, #5
    cbc4:	0092      	lsls	r2, r2, #2
    cbc6:	0020      	movs	r0, r4
    cbc8:	f000 fac2 	bl	d150 <_calloc_r>
    cbcc:	2800      	cmp	r0, #0
    cbce:	d00c      	beq.n	cbea <_Balloc+0x60>
    cbd0:	6045      	str	r5, [r0, #4]
    cbd2:	6086      	str	r6, [r0, #8]
    cbd4:	e00d      	b.n	cbf2 <_Balloc+0x68>
    cbd6:	2221      	movs	r2, #33	; 0x21
    cbd8:	2104      	movs	r1, #4
    cbda:	0020      	movs	r0, r4
    cbdc:	f000 fab8 	bl	d150 <_calloc_r>
    cbe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cbe2:	60f0      	str	r0, [r6, #12]
    cbe4:	68db      	ldr	r3, [r3, #12]
    cbe6:	2b00      	cmp	r3, #0
    cbe8:	d1e1      	bne.n	cbae <_Balloc+0x24>
    cbea:	2000      	movs	r0, #0
    cbec:	bd70      	pop	{r4, r5, r6, pc}
    cbee:	6802      	ldr	r2, [r0, #0]
    cbf0:	601a      	str	r2, [r3, #0]
    cbf2:	2300      	movs	r3, #0
    cbf4:	6103      	str	r3, [r0, #16]
    cbf6:	60c3      	str	r3, [r0, #12]
    cbf8:	e7f8      	b.n	cbec <_Balloc+0x62>

0000cbfa <_Bfree>:
    cbfa:	b570      	push	{r4, r5, r6, lr}
    cbfc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    cbfe:	0006      	movs	r6, r0
    cc00:	000d      	movs	r5, r1
    cc02:	2c00      	cmp	r4, #0
    cc04:	d107      	bne.n	cc16 <_Bfree+0x1c>
    cc06:	2010      	movs	r0, #16
    cc08:	f7fd fe34 	bl	a874 <malloc>
    cc0c:	6270      	str	r0, [r6, #36]	; 0x24
    cc0e:	6044      	str	r4, [r0, #4]
    cc10:	6084      	str	r4, [r0, #8]
    cc12:	6004      	str	r4, [r0, #0]
    cc14:	60c4      	str	r4, [r0, #12]
    cc16:	2d00      	cmp	r5, #0
    cc18:	d007      	beq.n	cc2a <_Bfree+0x30>
    cc1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    cc1c:	686a      	ldr	r2, [r5, #4]
    cc1e:	68db      	ldr	r3, [r3, #12]
    cc20:	0092      	lsls	r2, r2, #2
    cc22:	189b      	adds	r3, r3, r2
    cc24:	681a      	ldr	r2, [r3, #0]
    cc26:	602a      	str	r2, [r5, #0]
    cc28:	601d      	str	r5, [r3, #0]
    cc2a:	bd70      	pop	{r4, r5, r6, pc}

0000cc2c <__multadd>:
    cc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cc2e:	001e      	movs	r6, r3
    cc30:	2314      	movs	r3, #20
    cc32:	469c      	mov	ip, r3
    cc34:	0007      	movs	r7, r0
    cc36:	000c      	movs	r4, r1
    cc38:	2000      	movs	r0, #0
    cc3a:	690d      	ldr	r5, [r1, #16]
    cc3c:	448c      	add	ip, r1
    cc3e:	4663      	mov	r3, ip
    cc40:	8819      	ldrh	r1, [r3, #0]
    cc42:	681b      	ldr	r3, [r3, #0]
    cc44:	4351      	muls	r1, r2
    cc46:	0c1b      	lsrs	r3, r3, #16
    cc48:	4353      	muls	r3, r2
    cc4a:	1989      	adds	r1, r1, r6
    cc4c:	0c0e      	lsrs	r6, r1, #16
    cc4e:	199b      	adds	r3, r3, r6
    cc50:	b289      	uxth	r1, r1
    cc52:	0c1e      	lsrs	r6, r3, #16
    cc54:	041b      	lsls	r3, r3, #16
    cc56:	185b      	adds	r3, r3, r1
    cc58:	4661      	mov	r1, ip
    cc5a:	3001      	adds	r0, #1
    cc5c:	c108      	stmia	r1!, {r3}
    cc5e:	468c      	mov	ip, r1
    cc60:	4285      	cmp	r5, r0
    cc62:	dcec      	bgt.n	cc3e <__multadd+0x12>
    cc64:	2e00      	cmp	r6, #0
    cc66:	d01b      	beq.n	cca0 <__multadd+0x74>
    cc68:	68a3      	ldr	r3, [r4, #8]
    cc6a:	429d      	cmp	r5, r3
    cc6c:	db12      	blt.n	cc94 <__multadd+0x68>
    cc6e:	6863      	ldr	r3, [r4, #4]
    cc70:	0038      	movs	r0, r7
    cc72:	1c59      	adds	r1, r3, #1
    cc74:	f7ff ff89 	bl	cb8a <_Balloc>
    cc78:	0021      	movs	r1, r4
    cc7a:	6923      	ldr	r3, [r4, #16]
    cc7c:	9001      	str	r0, [sp, #4]
    cc7e:	1c9a      	adds	r2, r3, #2
    cc80:	0092      	lsls	r2, r2, #2
    cc82:	310c      	adds	r1, #12
    cc84:	300c      	adds	r0, #12
    cc86:	f7fd fe1b 	bl	a8c0 <memcpy>
    cc8a:	0021      	movs	r1, r4
    cc8c:	0038      	movs	r0, r7
    cc8e:	f7ff ffb4 	bl	cbfa <_Bfree>
    cc92:	9c01      	ldr	r4, [sp, #4]
    cc94:	1d2b      	adds	r3, r5, #4
    cc96:	009b      	lsls	r3, r3, #2
    cc98:	18e3      	adds	r3, r4, r3
    cc9a:	3501      	adds	r5, #1
    cc9c:	605e      	str	r6, [r3, #4]
    cc9e:	6125      	str	r5, [r4, #16]
    cca0:	0020      	movs	r0, r4
    cca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000cca4 <__hi0bits>:
    cca4:	0003      	movs	r3, r0
    cca6:	0c02      	lsrs	r2, r0, #16
    cca8:	2000      	movs	r0, #0
    ccaa:	4282      	cmp	r2, r0
    ccac:	d101      	bne.n	ccb2 <__hi0bits+0xe>
    ccae:	041b      	lsls	r3, r3, #16
    ccb0:	3010      	adds	r0, #16
    ccb2:	0e1a      	lsrs	r2, r3, #24
    ccb4:	d101      	bne.n	ccba <__hi0bits+0x16>
    ccb6:	3008      	adds	r0, #8
    ccb8:	021b      	lsls	r3, r3, #8
    ccba:	0f1a      	lsrs	r2, r3, #28
    ccbc:	d101      	bne.n	ccc2 <__hi0bits+0x1e>
    ccbe:	3004      	adds	r0, #4
    ccc0:	011b      	lsls	r3, r3, #4
    ccc2:	0f9a      	lsrs	r2, r3, #30
    ccc4:	d101      	bne.n	ccca <__hi0bits+0x26>
    ccc6:	3002      	adds	r0, #2
    ccc8:	009b      	lsls	r3, r3, #2
    ccca:	2b00      	cmp	r3, #0
    cccc:	db03      	blt.n	ccd6 <__hi0bits+0x32>
    ccce:	3001      	adds	r0, #1
    ccd0:	005b      	lsls	r3, r3, #1
    ccd2:	d400      	bmi.n	ccd6 <__hi0bits+0x32>
    ccd4:	2020      	movs	r0, #32
    ccd6:	4770      	bx	lr

0000ccd8 <__lo0bits>:
    ccd8:	2207      	movs	r2, #7
    ccda:	6803      	ldr	r3, [r0, #0]
    ccdc:	b510      	push	{r4, lr}
    ccde:	0001      	movs	r1, r0
    cce0:	401a      	ands	r2, r3
    cce2:	d00d      	beq.n	cd00 <__lo0bits+0x28>
    cce4:	2401      	movs	r4, #1
    cce6:	2000      	movs	r0, #0
    cce8:	4223      	tst	r3, r4
    ccea:	d105      	bne.n	ccf8 <__lo0bits+0x20>
    ccec:	3002      	adds	r0, #2
    ccee:	4203      	tst	r3, r0
    ccf0:	d003      	beq.n	ccfa <__lo0bits+0x22>
    ccf2:	40e3      	lsrs	r3, r4
    ccf4:	0020      	movs	r0, r4
    ccf6:	600b      	str	r3, [r1, #0]
    ccf8:	bd10      	pop	{r4, pc}
    ccfa:	089b      	lsrs	r3, r3, #2
    ccfc:	600b      	str	r3, [r1, #0]
    ccfe:	e7fb      	b.n	ccf8 <__lo0bits+0x20>
    cd00:	b29c      	uxth	r4, r3
    cd02:	0010      	movs	r0, r2
    cd04:	2c00      	cmp	r4, #0
    cd06:	d101      	bne.n	cd0c <__lo0bits+0x34>
    cd08:	2010      	movs	r0, #16
    cd0a:	0c1b      	lsrs	r3, r3, #16
    cd0c:	b2da      	uxtb	r2, r3
    cd0e:	2a00      	cmp	r2, #0
    cd10:	d101      	bne.n	cd16 <__lo0bits+0x3e>
    cd12:	3008      	adds	r0, #8
    cd14:	0a1b      	lsrs	r3, r3, #8
    cd16:	071a      	lsls	r2, r3, #28
    cd18:	d101      	bne.n	cd1e <__lo0bits+0x46>
    cd1a:	3004      	adds	r0, #4
    cd1c:	091b      	lsrs	r3, r3, #4
    cd1e:	079a      	lsls	r2, r3, #30
    cd20:	d101      	bne.n	cd26 <__lo0bits+0x4e>
    cd22:	3002      	adds	r0, #2
    cd24:	089b      	lsrs	r3, r3, #2
    cd26:	07da      	lsls	r2, r3, #31
    cd28:	d4e8      	bmi.n	ccfc <__lo0bits+0x24>
    cd2a:	085b      	lsrs	r3, r3, #1
    cd2c:	d001      	beq.n	cd32 <__lo0bits+0x5a>
    cd2e:	3001      	adds	r0, #1
    cd30:	e7e4      	b.n	ccfc <__lo0bits+0x24>
    cd32:	2020      	movs	r0, #32
    cd34:	e7e0      	b.n	ccf8 <__lo0bits+0x20>

0000cd36 <__i2b>:
    cd36:	b510      	push	{r4, lr}
    cd38:	000c      	movs	r4, r1
    cd3a:	2101      	movs	r1, #1
    cd3c:	f7ff ff25 	bl	cb8a <_Balloc>
    cd40:	2301      	movs	r3, #1
    cd42:	6144      	str	r4, [r0, #20]
    cd44:	6103      	str	r3, [r0, #16]
    cd46:	bd10      	pop	{r4, pc}

0000cd48 <__multiply>:
    cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd4a:	690b      	ldr	r3, [r1, #16]
    cd4c:	0015      	movs	r5, r2
    cd4e:	6912      	ldr	r2, [r2, #16]
    cd50:	b089      	sub	sp, #36	; 0x24
    cd52:	000c      	movs	r4, r1
    cd54:	4293      	cmp	r3, r2
    cd56:	da01      	bge.n	cd5c <__multiply+0x14>
    cd58:	002c      	movs	r4, r5
    cd5a:	000d      	movs	r5, r1
    cd5c:	6927      	ldr	r7, [r4, #16]
    cd5e:	692e      	ldr	r6, [r5, #16]
    cd60:	68a2      	ldr	r2, [r4, #8]
    cd62:	19bb      	adds	r3, r7, r6
    cd64:	6861      	ldr	r1, [r4, #4]
    cd66:	9301      	str	r3, [sp, #4]
    cd68:	4293      	cmp	r3, r2
    cd6a:	dd00      	ble.n	cd6e <__multiply+0x26>
    cd6c:	3101      	adds	r1, #1
    cd6e:	f7ff ff0c 	bl	cb8a <_Balloc>
    cd72:	0003      	movs	r3, r0
    cd74:	3314      	adds	r3, #20
    cd76:	9300      	str	r3, [sp, #0]
    cd78:	9a00      	ldr	r2, [sp, #0]
    cd7a:	19bb      	adds	r3, r7, r6
    cd7c:	4694      	mov	ip, r2
    cd7e:	009b      	lsls	r3, r3, #2
    cd80:	449c      	add	ip, r3
    cd82:	0013      	movs	r3, r2
    cd84:	2200      	movs	r2, #0
    cd86:	9004      	str	r0, [sp, #16]
    cd88:	4563      	cmp	r3, ip
    cd8a:	d31c      	bcc.n	cdc6 <__multiply+0x7e>
    cd8c:	002a      	movs	r2, r5
    cd8e:	3414      	adds	r4, #20
    cd90:	00bf      	lsls	r7, r7, #2
    cd92:	19e3      	adds	r3, r4, r7
    cd94:	3214      	adds	r2, #20
    cd96:	00b6      	lsls	r6, r6, #2
    cd98:	9305      	str	r3, [sp, #20]
    cd9a:	1993      	adds	r3, r2, r6
    cd9c:	9402      	str	r4, [sp, #8]
    cd9e:	9306      	str	r3, [sp, #24]
    cda0:	9b06      	ldr	r3, [sp, #24]
    cda2:	429a      	cmp	r2, r3
    cda4:	d311      	bcc.n	cdca <__multiply+0x82>
    cda6:	9b01      	ldr	r3, [sp, #4]
    cda8:	2b00      	cmp	r3, #0
    cdaa:	dd06      	ble.n	cdba <__multiply+0x72>
    cdac:	2304      	movs	r3, #4
    cdae:	425b      	negs	r3, r3
    cdb0:	449c      	add	ip, r3
    cdb2:	4663      	mov	r3, ip
    cdb4:	681b      	ldr	r3, [r3, #0]
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d051      	beq.n	ce5e <__multiply+0x116>
    cdba:	9b04      	ldr	r3, [sp, #16]
    cdbc:	9a01      	ldr	r2, [sp, #4]
    cdbe:	0018      	movs	r0, r3
    cdc0:	611a      	str	r2, [r3, #16]
    cdc2:	b009      	add	sp, #36	; 0x24
    cdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdc6:	c304      	stmia	r3!, {r2}
    cdc8:	e7de      	b.n	cd88 <__multiply+0x40>
    cdca:	8814      	ldrh	r4, [r2, #0]
    cdcc:	2c00      	cmp	r4, #0
    cdce:	d01e      	beq.n	ce0e <__multiply+0xc6>
    cdd0:	2600      	movs	r6, #0
    cdd2:	9d00      	ldr	r5, [sp, #0]
    cdd4:	9f02      	ldr	r7, [sp, #8]
    cdd6:	cf01      	ldmia	r7!, {r0}
    cdd8:	9507      	str	r5, [sp, #28]
    cdda:	cd08      	ldmia	r5!, {r3}
    cddc:	9303      	str	r3, [sp, #12]
    cdde:	b283      	uxth	r3, r0
    cde0:	4363      	muls	r3, r4
    cde2:	0019      	movs	r1, r3
    cde4:	466b      	mov	r3, sp
    cde6:	0c00      	lsrs	r0, r0, #16
    cde8:	899b      	ldrh	r3, [r3, #12]
    cdea:	4360      	muls	r0, r4
    cdec:	18cb      	adds	r3, r1, r3
    cdee:	9903      	ldr	r1, [sp, #12]
    cdf0:	199b      	adds	r3, r3, r6
    cdf2:	0c09      	lsrs	r1, r1, #16
    cdf4:	1841      	adds	r1, r0, r1
    cdf6:	0c18      	lsrs	r0, r3, #16
    cdf8:	1809      	adds	r1, r1, r0
    cdfa:	0c0e      	lsrs	r6, r1, #16
    cdfc:	b29b      	uxth	r3, r3
    cdfe:	0409      	lsls	r1, r1, #16
    ce00:	430b      	orrs	r3, r1
    ce02:	9907      	ldr	r1, [sp, #28]
    ce04:	600b      	str	r3, [r1, #0]
    ce06:	9b05      	ldr	r3, [sp, #20]
    ce08:	42bb      	cmp	r3, r7
    ce0a:	d8e4      	bhi.n	cdd6 <__multiply+0x8e>
    ce0c:	602e      	str	r6, [r5, #0]
    ce0e:	6813      	ldr	r3, [r2, #0]
    ce10:	0c1b      	lsrs	r3, r3, #16
    ce12:	9303      	str	r3, [sp, #12]
    ce14:	d01e      	beq.n	ce54 <__multiply+0x10c>
    ce16:	2600      	movs	r6, #0
    ce18:	9b00      	ldr	r3, [sp, #0]
    ce1a:	9c02      	ldr	r4, [sp, #8]
    ce1c:	681b      	ldr	r3, [r3, #0]
    ce1e:	9800      	ldr	r0, [sp, #0]
    ce20:	0007      	movs	r7, r0
    ce22:	8821      	ldrh	r1, [r4, #0]
    ce24:	9d03      	ldr	r5, [sp, #12]
    ce26:	b29b      	uxth	r3, r3
    ce28:	4369      	muls	r1, r5
    ce2a:	c820      	ldmia	r0!, {r5}
    ce2c:	0c2d      	lsrs	r5, r5, #16
    ce2e:	1949      	adds	r1, r1, r5
    ce30:	198e      	adds	r6, r1, r6
    ce32:	0431      	lsls	r1, r6, #16
    ce34:	430b      	orrs	r3, r1
    ce36:	603b      	str	r3, [r7, #0]
    ce38:	cc08      	ldmia	r4!, {r3}
    ce3a:	9903      	ldr	r1, [sp, #12]
    ce3c:	0c1b      	lsrs	r3, r3, #16
    ce3e:	434b      	muls	r3, r1
    ce40:	6879      	ldr	r1, [r7, #4]
    ce42:	0c36      	lsrs	r6, r6, #16
    ce44:	b289      	uxth	r1, r1
    ce46:	185b      	adds	r3, r3, r1
    ce48:	9905      	ldr	r1, [sp, #20]
    ce4a:	199b      	adds	r3, r3, r6
    ce4c:	0c1e      	lsrs	r6, r3, #16
    ce4e:	42a1      	cmp	r1, r4
    ce50:	d8e6      	bhi.n	ce20 <__multiply+0xd8>
    ce52:	6003      	str	r3, [r0, #0]
    ce54:	9b00      	ldr	r3, [sp, #0]
    ce56:	3204      	adds	r2, #4
    ce58:	3304      	adds	r3, #4
    ce5a:	9300      	str	r3, [sp, #0]
    ce5c:	e7a0      	b.n	cda0 <__multiply+0x58>
    ce5e:	9b01      	ldr	r3, [sp, #4]
    ce60:	3b01      	subs	r3, #1
    ce62:	9301      	str	r3, [sp, #4]
    ce64:	e79f      	b.n	cda6 <__multiply+0x5e>
	...

0000ce68 <__pow5mult>:
    ce68:	2303      	movs	r3, #3
    ce6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ce6c:	4013      	ands	r3, r2
    ce6e:	0005      	movs	r5, r0
    ce70:	000e      	movs	r6, r1
    ce72:	0014      	movs	r4, r2
    ce74:	2b00      	cmp	r3, #0
    ce76:	d008      	beq.n	ce8a <__pow5mult+0x22>
    ce78:	4922      	ldr	r1, [pc, #136]	; (cf04 <__pow5mult+0x9c>)
    ce7a:	3b01      	subs	r3, #1
    ce7c:	009a      	lsls	r2, r3, #2
    ce7e:	5852      	ldr	r2, [r2, r1]
    ce80:	2300      	movs	r3, #0
    ce82:	0031      	movs	r1, r6
    ce84:	f7ff fed2 	bl	cc2c <__multadd>
    ce88:	0006      	movs	r6, r0
    ce8a:	10a3      	asrs	r3, r4, #2
    ce8c:	9301      	str	r3, [sp, #4]
    ce8e:	d036      	beq.n	cefe <__pow5mult+0x96>
    ce90:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    ce92:	2c00      	cmp	r4, #0
    ce94:	d107      	bne.n	cea6 <__pow5mult+0x3e>
    ce96:	2010      	movs	r0, #16
    ce98:	f7fd fcec 	bl	a874 <malloc>
    ce9c:	6268      	str	r0, [r5, #36]	; 0x24
    ce9e:	6044      	str	r4, [r0, #4]
    cea0:	6084      	str	r4, [r0, #8]
    cea2:	6004      	str	r4, [r0, #0]
    cea4:	60c4      	str	r4, [r0, #12]
    cea6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    cea8:	68bc      	ldr	r4, [r7, #8]
    ceaa:	2c00      	cmp	r4, #0
    ceac:	d107      	bne.n	cebe <__pow5mult+0x56>
    ceae:	4916      	ldr	r1, [pc, #88]	; (cf08 <__pow5mult+0xa0>)
    ceb0:	0028      	movs	r0, r5
    ceb2:	f7ff ff40 	bl	cd36 <__i2b>
    ceb6:	2300      	movs	r3, #0
    ceb8:	0004      	movs	r4, r0
    ceba:	60b8      	str	r0, [r7, #8]
    cebc:	6003      	str	r3, [r0, #0]
    cebe:	2201      	movs	r2, #1
    cec0:	9b01      	ldr	r3, [sp, #4]
    cec2:	4213      	tst	r3, r2
    cec4:	d00a      	beq.n	cedc <__pow5mult+0x74>
    cec6:	0031      	movs	r1, r6
    cec8:	0022      	movs	r2, r4
    ceca:	0028      	movs	r0, r5
    cecc:	f7ff ff3c 	bl	cd48 <__multiply>
    ced0:	0007      	movs	r7, r0
    ced2:	0031      	movs	r1, r6
    ced4:	0028      	movs	r0, r5
    ced6:	f7ff fe90 	bl	cbfa <_Bfree>
    ceda:	003e      	movs	r6, r7
    cedc:	9b01      	ldr	r3, [sp, #4]
    cede:	105b      	asrs	r3, r3, #1
    cee0:	9301      	str	r3, [sp, #4]
    cee2:	d00c      	beq.n	cefe <__pow5mult+0x96>
    cee4:	6820      	ldr	r0, [r4, #0]
    cee6:	2800      	cmp	r0, #0
    cee8:	d107      	bne.n	cefa <__pow5mult+0x92>
    ceea:	0022      	movs	r2, r4
    ceec:	0021      	movs	r1, r4
    ceee:	0028      	movs	r0, r5
    cef0:	f7ff ff2a 	bl	cd48 <__multiply>
    cef4:	2300      	movs	r3, #0
    cef6:	6020      	str	r0, [r4, #0]
    cef8:	6003      	str	r3, [r0, #0]
    cefa:	0004      	movs	r4, r0
    cefc:	e7df      	b.n	cebe <__pow5mult+0x56>
    cefe:	0030      	movs	r0, r6
    cf00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    cf02:	46c0      	nop			; (mov r8, r8)
    cf04:	00012920 	.word	0x00012920
    cf08:	00000271 	.word	0x00000271

0000cf0c <__lshift>:
    cf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf0e:	000d      	movs	r5, r1
    cf10:	0017      	movs	r7, r2
    cf12:	692b      	ldr	r3, [r5, #16]
    cf14:	1154      	asrs	r4, r2, #5
    cf16:	b085      	sub	sp, #20
    cf18:	18e3      	adds	r3, r4, r3
    cf1a:	9302      	str	r3, [sp, #8]
    cf1c:	3301      	adds	r3, #1
    cf1e:	9301      	str	r3, [sp, #4]
    cf20:	6849      	ldr	r1, [r1, #4]
    cf22:	68ab      	ldr	r3, [r5, #8]
    cf24:	9003      	str	r0, [sp, #12]
    cf26:	9a01      	ldr	r2, [sp, #4]
    cf28:	4293      	cmp	r3, r2
    cf2a:	db34      	blt.n	cf96 <__lshift+0x8a>
    cf2c:	9803      	ldr	r0, [sp, #12]
    cf2e:	f7ff fe2c 	bl	cb8a <_Balloc>
    cf32:	2300      	movs	r3, #0
    cf34:	0002      	movs	r2, r0
    cf36:	0006      	movs	r6, r0
    cf38:	0019      	movs	r1, r3
    cf3a:	3214      	adds	r2, #20
    cf3c:	42a3      	cmp	r3, r4
    cf3e:	db2d      	blt.n	cf9c <__lshift+0x90>
    cf40:	43e3      	mvns	r3, r4
    cf42:	17db      	asrs	r3, r3, #31
    cf44:	401c      	ands	r4, r3
    cf46:	002b      	movs	r3, r5
    cf48:	211f      	movs	r1, #31
    cf4a:	00a4      	lsls	r4, r4, #2
    cf4c:	1914      	adds	r4, r2, r4
    cf4e:	692a      	ldr	r2, [r5, #16]
    cf50:	3314      	adds	r3, #20
    cf52:	0092      	lsls	r2, r2, #2
    cf54:	189a      	adds	r2, r3, r2
    cf56:	400f      	ands	r7, r1
    cf58:	d024      	beq.n	cfa4 <__lshift+0x98>
    cf5a:	3101      	adds	r1, #1
    cf5c:	1bc9      	subs	r1, r1, r7
    cf5e:	468c      	mov	ip, r1
    cf60:	2100      	movs	r1, #0
    cf62:	6818      	ldr	r0, [r3, #0]
    cf64:	40b8      	lsls	r0, r7
    cf66:	4301      	orrs	r1, r0
    cf68:	4660      	mov	r0, ip
    cf6a:	6021      	str	r1, [r4, #0]
    cf6c:	cb02      	ldmia	r3!, {r1}
    cf6e:	3404      	adds	r4, #4
    cf70:	40c1      	lsrs	r1, r0
    cf72:	429a      	cmp	r2, r3
    cf74:	d8f5      	bhi.n	cf62 <__lshift+0x56>
    cf76:	6021      	str	r1, [r4, #0]
    cf78:	2900      	cmp	r1, #0
    cf7a:	d002      	beq.n	cf82 <__lshift+0x76>
    cf7c:	9b02      	ldr	r3, [sp, #8]
    cf7e:	3302      	adds	r3, #2
    cf80:	9301      	str	r3, [sp, #4]
    cf82:	9b01      	ldr	r3, [sp, #4]
    cf84:	9803      	ldr	r0, [sp, #12]
    cf86:	3b01      	subs	r3, #1
    cf88:	6133      	str	r3, [r6, #16]
    cf8a:	0029      	movs	r1, r5
    cf8c:	f7ff fe35 	bl	cbfa <_Bfree>
    cf90:	0030      	movs	r0, r6
    cf92:	b005      	add	sp, #20
    cf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf96:	3101      	adds	r1, #1
    cf98:	005b      	lsls	r3, r3, #1
    cf9a:	e7c4      	b.n	cf26 <__lshift+0x1a>
    cf9c:	0098      	lsls	r0, r3, #2
    cf9e:	5011      	str	r1, [r2, r0]
    cfa0:	3301      	adds	r3, #1
    cfa2:	e7cb      	b.n	cf3c <__lshift+0x30>
    cfa4:	cb02      	ldmia	r3!, {r1}
    cfa6:	c402      	stmia	r4!, {r1}
    cfa8:	429a      	cmp	r2, r3
    cfaa:	d8fb      	bhi.n	cfa4 <__lshift+0x98>
    cfac:	e7e9      	b.n	cf82 <__lshift+0x76>

0000cfae <__mcmp>:
    cfae:	690a      	ldr	r2, [r1, #16]
    cfb0:	6903      	ldr	r3, [r0, #16]
    cfb2:	b530      	push	{r4, r5, lr}
    cfb4:	1a9b      	subs	r3, r3, r2
    cfb6:	d10e      	bne.n	cfd6 <__mcmp+0x28>
    cfb8:	0092      	lsls	r2, r2, #2
    cfba:	3014      	adds	r0, #20
    cfbc:	3114      	adds	r1, #20
    cfbe:	1884      	adds	r4, r0, r2
    cfc0:	1889      	adds	r1, r1, r2
    cfc2:	3c04      	subs	r4, #4
    cfc4:	3904      	subs	r1, #4
    cfc6:	6822      	ldr	r2, [r4, #0]
    cfc8:	680d      	ldr	r5, [r1, #0]
    cfca:	42aa      	cmp	r2, r5
    cfcc:	d005      	beq.n	cfda <__mcmp+0x2c>
    cfce:	42aa      	cmp	r2, r5
    cfd0:	4192      	sbcs	r2, r2
    cfd2:	2301      	movs	r3, #1
    cfd4:	4313      	orrs	r3, r2
    cfd6:	0018      	movs	r0, r3
    cfd8:	bd30      	pop	{r4, r5, pc}
    cfda:	42a0      	cmp	r0, r4
    cfdc:	d3f1      	bcc.n	cfc2 <__mcmp+0x14>
    cfde:	e7fa      	b.n	cfd6 <__mcmp+0x28>

0000cfe0 <__mdiff>:
    cfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfe2:	000d      	movs	r5, r1
    cfe4:	b085      	sub	sp, #20
    cfe6:	0007      	movs	r7, r0
    cfe8:	0011      	movs	r1, r2
    cfea:	0028      	movs	r0, r5
    cfec:	0014      	movs	r4, r2
    cfee:	f7ff ffde 	bl	cfae <__mcmp>
    cff2:	1e06      	subs	r6, r0, #0
    cff4:	d108      	bne.n	d008 <__mdiff+0x28>
    cff6:	0001      	movs	r1, r0
    cff8:	0038      	movs	r0, r7
    cffa:	f7ff fdc6 	bl	cb8a <_Balloc>
    cffe:	2301      	movs	r3, #1
    d000:	6146      	str	r6, [r0, #20]
    d002:	6103      	str	r3, [r0, #16]
    d004:	b005      	add	sp, #20
    d006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d008:	2301      	movs	r3, #1
    d00a:	9301      	str	r3, [sp, #4]
    d00c:	2800      	cmp	r0, #0
    d00e:	db04      	blt.n	d01a <__mdiff+0x3a>
    d010:	0023      	movs	r3, r4
    d012:	002c      	movs	r4, r5
    d014:	001d      	movs	r5, r3
    d016:	2300      	movs	r3, #0
    d018:	9301      	str	r3, [sp, #4]
    d01a:	6861      	ldr	r1, [r4, #4]
    d01c:	0038      	movs	r0, r7
    d01e:	f7ff fdb4 	bl	cb8a <_Balloc>
    d022:	002f      	movs	r7, r5
    d024:	2200      	movs	r2, #0
    d026:	9b01      	ldr	r3, [sp, #4]
    d028:	6926      	ldr	r6, [r4, #16]
    d02a:	60c3      	str	r3, [r0, #12]
    d02c:	3414      	adds	r4, #20
    d02e:	00b3      	lsls	r3, r6, #2
    d030:	18e3      	adds	r3, r4, r3
    d032:	9302      	str	r3, [sp, #8]
    d034:	692b      	ldr	r3, [r5, #16]
    d036:	3714      	adds	r7, #20
    d038:	009b      	lsls	r3, r3, #2
    d03a:	18fb      	adds	r3, r7, r3
    d03c:	9303      	str	r3, [sp, #12]
    d03e:	0003      	movs	r3, r0
    d040:	4694      	mov	ip, r2
    d042:	3314      	adds	r3, #20
    d044:	cc20      	ldmia	r4!, {r5}
    d046:	cf04      	ldmia	r7!, {r2}
    d048:	9201      	str	r2, [sp, #4]
    d04a:	b2aa      	uxth	r2, r5
    d04c:	4494      	add	ip, r2
    d04e:	466a      	mov	r2, sp
    d050:	4661      	mov	r1, ip
    d052:	8892      	ldrh	r2, [r2, #4]
    d054:	0c2d      	lsrs	r5, r5, #16
    d056:	1a8a      	subs	r2, r1, r2
    d058:	9901      	ldr	r1, [sp, #4]
    d05a:	0c09      	lsrs	r1, r1, #16
    d05c:	1a69      	subs	r1, r5, r1
    d05e:	1415      	asrs	r5, r2, #16
    d060:	1949      	adds	r1, r1, r5
    d062:	140d      	asrs	r5, r1, #16
    d064:	b292      	uxth	r2, r2
    d066:	0409      	lsls	r1, r1, #16
    d068:	430a      	orrs	r2, r1
    d06a:	601a      	str	r2, [r3, #0]
    d06c:	9a03      	ldr	r2, [sp, #12]
    d06e:	46ac      	mov	ip, r5
    d070:	3304      	adds	r3, #4
    d072:	42ba      	cmp	r2, r7
    d074:	d8e6      	bhi.n	d044 <__mdiff+0x64>
    d076:	9902      	ldr	r1, [sp, #8]
    d078:	001a      	movs	r2, r3
    d07a:	428c      	cmp	r4, r1
    d07c:	d305      	bcc.n	d08a <__mdiff+0xaa>
    d07e:	3a04      	subs	r2, #4
    d080:	6813      	ldr	r3, [r2, #0]
    d082:	2b00      	cmp	r3, #0
    d084:	d00e      	beq.n	d0a4 <__mdiff+0xc4>
    d086:	6106      	str	r6, [r0, #16]
    d088:	e7bc      	b.n	d004 <__mdiff+0x24>
    d08a:	cc04      	ldmia	r4!, {r2}
    d08c:	b291      	uxth	r1, r2
    d08e:	4461      	add	r1, ip
    d090:	140d      	asrs	r5, r1, #16
    d092:	0c12      	lsrs	r2, r2, #16
    d094:	1952      	adds	r2, r2, r5
    d096:	1415      	asrs	r5, r2, #16
    d098:	b289      	uxth	r1, r1
    d09a:	0412      	lsls	r2, r2, #16
    d09c:	430a      	orrs	r2, r1
    d09e:	46ac      	mov	ip, r5
    d0a0:	c304      	stmia	r3!, {r2}
    d0a2:	e7e8      	b.n	d076 <__mdiff+0x96>
    d0a4:	3e01      	subs	r6, #1
    d0a6:	e7ea      	b.n	d07e <__mdiff+0x9e>

0000d0a8 <__d2b>:
    d0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d0aa:	001d      	movs	r5, r3
    d0ac:	2101      	movs	r1, #1
    d0ae:	9f08      	ldr	r7, [sp, #32]
    d0b0:	0014      	movs	r4, r2
    d0b2:	f7ff fd6a 	bl	cb8a <_Balloc>
    d0b6:	032b      	lsls	r3, r5, #12
    d0b8:	006d      	lsls	r5, r5, #1
    d0ba:	0006      	movs	r6, r0
    d0bc:	0b1b      	lsrs	r3, r3, #12
    d0be:	0d6d      	lsrs	r5, r5, #21
    d0c0:	d124      	bne.n	d10c <__d2b+0x64>
    d0c2:	9301      	str	r3, [sp, #4]
    d0c4:	2c00      	cmp	r4, #0
    d0c6:	d027      	beq.n	d118 <__d2b+0x70>
    d0c8:	4668      	mov	r0, sp
    d0ca:	9400      	str	r4, [sp, #0]
    d0cc:	f7ff fe04 	bl	ccd8 <__lo0bits>
    d0d0:	9c00      	ldr	r4, [sp, #0]
    d0d2:	2800      	cmp	r0, #0
    d0d4:	d01e      	beq.n	d114 <__d2b+0x6c>
    d0d6:	9b01      	ldr	r3, [sp, #4]
    d0d8:	2120      	movs	r1, #32
    d0da:	001a      	movs	r2, r3
    d0dc:	1a09      	subs	r1, r1, r0
    d0de:	408a      	lsls	r2, r1
    d0e0:	40c3      	lsrs	r3, r0
    d0e2:	4322      	orrs	r2, r4
    d0e4:	6172      	str	r2, [r6, #20]
    d0e6:	9301      	str	r3, [sp, #4]
    d0e8:	9c01      	ldr	r4, [sp, #4]
    d0ea:	61b4      	str	r4, [r6, #24]
    d0ec:	1e63      	subs	r3, r4, #1
    d0ee:	419c      	sbcs	r4, r3
    d0f0:	3401      	adds	r4, #1
    d0f2:	6134      	str	r4, [r6, #16]
    d0f4:	2d00      	cmp	r5, #0
    d0f6:	d018      	beq.n	d12a <__d2b+0x82>
    d0f8:	4b12      	ldr	r3, [pc, #72]	; (d144 <__d2b+0x9c>)
    d0fa:	18ed      	adds	r5, r5, r3
    d0fc:	2335      	movs	r3, #53	; 0x35
    d0fe:	182d      	adds	r5, r5, r0
    d100:	603d      	str	r5, [r7, #0]
    d102:	1a18      	subs	r0, r3, r0
    d104:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d106:	6018      	str	r0, [r3, #0]
    d108:	0030      	movs	r0, r6
    d10a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d10c:	2280      	movs	r2, #128	; 0x80
    d10e:	0352      	lsls	r2, r2, #13
    d110:	4313      	orrs	r3, r2
    d112:	e7d6      	b.n	d0c2 <__d2b+0x1a>
    d114:	6174      	str	r4, [r6, #20]
    d116:	e7e7      	b.n	d0e8 <__d2b+0x40>
    d118:	a801      	add	r0, sp, #4
    d11a:	f7ff fddd 	bl	ccd8 <__lo0bits>
    d11e:	2401      	movs	r4, #1
    d120:	9b01      	ldr	r3, [sp, #4]
    d122:	6134      	str	r4, [r6, #16]
    d124:	6173      	str	r3, [r6, #20]
    d126:	3020      	adds	r0, #32
    d128:	e7e4      	b.n	d0f4 <__d2b+0x4c>
    d12a:	4b07      	ldr	r3, [pc, #28]	; (d148 <__d2b+0xa0>)
    d12c:	18c0      	adds	r0, r0, r3
    d12e:	4b07      	ldr	r3, [pc, #28]	; (d14c <__d2b+0xa4>)
    d130:	6038      	str	r0, [r7, #0]
    d132:	18e3      	adds	r3, r4, r3
    d134:	009b      	lsls	r3, r3, #2
    d136:	18f3      	adds	r3, r6, r3
    d138:	6958      	ldr	r0, [r3, #20]
    d13a:	f7ff fdb3 	bl	cca4 <__hi0bits>
    d13e:	0164      	lsls	r4, r4, #5
    d140:	1a20      	subs	r0, r4, r0
    d142:	e7df      	b.n	d104 <__d2b+0x5c>
    d144:	fffffbcd 	.word	0xfffffbcd
    d148:	fffffbce 	.word	0xfffffbce
    d14c:	3fffffff 	.word	0x3fffffff

0000d150 <_calloc_r>:
    d150:	434a      	muls	r2, r1
    d152:	b570      	push	{r4, r5, r6, lr}
    d154:	0011      	movs	r1, r2
    d156:	0014      	movs	r4, r2
    d158:	f7fd fc20 	bl	a99c <_malloc_r>
    d15c:	1e05      	subs	r5, r0, #0
    d15e:	d003      	beq.n	d168 <_calloc_r+0x18>
    d160:	0022      	movs	r2, r4
    d162:	2100      	movs	r1, #0
    d164:	f7fd fbc7 	bl	a8f6 <memset>
    d168:	0028      	movs	r0, r5
    d16a:	bd70      	pop	{r4, r5, r6, pc}

0000d16c <__ssputs_r>:
    d16c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d16e:	688e      	ldr	r6, [r1, #8]
    d170:	b085      	sub	sp, #20
    d172:	0007      	movs	r7, r0
    d174:	000c      	movs	r4, r1
    d176:	9203      	str	r2, [sp, #12]
    d178:	9301      	str	r3, [sp, #4]
    d17a:	429e      	cmp	r6, r3
    d17c:	d839      	bhi.n	d1f2 <__ssputs_r+0x86>
    d17e:	2390      	movs	r3, #144	; 0x90
    d180:	898a      	ldrh	r2, [r1, #12]
    d182:	00db      	lsls	r3, r3, #3
    d184:	421a      	tst	r2, r3
    d186:	d034      	beq.n	d1f2 <__ssputs_r+0x86>
    d188:	2503      	movs	r5, #3
    d18a:	6909      	ldr	r1, [r1, #16]
    d18c:	6823      	ldr	r3, [r4, #0]
    d18e:	1a5b      	subs	r3, r3, r1
    d190:	9302      	str	r3, [sp, #8]
    d192:	6963      	ldr	r3, [r4, #20]
    d194:	9802      	ldr	r0, [sp, #8]
    d196:	435d      	muls	r5, r3
    d198:	0feb      	lsrs	r3, r5, #31
    d19a:	195d      	adds	r5, r3, r5
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	106d      	asrs	r5, r5, #1
    d1a0:	3301      	adds	r3, #1
    d1a2:	181b      	adds	r3, r3, r0
    d1a4:	42ab      	cmp	r3, r5
    d1a6:	d900      	bls.n	d1aa <__ssputs_r+0x3e>
    d1a8:	001d      	movs	r5, r3
    d1aa:	0553      	lsls	r3, r2, #21
    d1ac:	d532      	bpl.n	d214 <__ssputs_r+0xa8>
    d1ae:	0029      	movs	r1, r5
    d1b0:	0038      	movs	r0, r7
    d1b2:	f7fd fbf3 	bl	a99c <_malloc_r>
    d1b6:	1e06      	subs	r6, r0, #0
    d1b8:	d109      	bne.n	d1ce <__ssputs_r+0x62>
    d1ba:	230c      	movs	r3, #12
    d1bc:	603b      	str	r3, [r7, #0]
    d1be:	2340      	movs	r3, #64	; 0x40
    d1c0:	2001      	movs	r0, #1
    d1c2:	89a2      	ldrh	r2, [r4, #12]
    d1c4:	4240      	negs	r0, r0
    d1c6:	4313      	orrs	r3, r2
    d1c8:	81a3      	strh	r3, [r4, #12]
    d1ca:	b005      	add	sp, #20
    d1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1ce:	9a02      	ldr	r2, [sp, #8]
    d1d0:	6921      	ldr	r1, [r4, #16]
    d1d2:	f7fd fb75 	bl	a8c0 <memcpy>
    d1d6:	89a3      	ldrh	r3, [r4, #12]
    d1d8:	4a14      	ldr	r2, [pc, #80]	; (d22c <__ssputs_r+0xc0>)
    d1da:	401a      	ands	r2, r3
    d1dc:	2380      	movs	r3, #128	; 0x80
    d1de:	4313      	orrs	r3, r2
    d1e0:	81a3      	strh	r3, [r4, #12]
    d1e2:	9b02      	ldr	r3, [sp, #8]
    d1e4:	6126      	str	r6, [r4, #16]
    d1e6:	18f6      	adds	r6, r6, r3
    d1e8:	6026      	str	r6, [r4, #0]
    d1ea:	6165      	str	r5, [r4, #20]
    d1ec:	9e01      	ldr	r6, [sp, #4]
    d1ee:	1aed      	subs	r5, r5, r3
    d1f0:	60a5      	str	r5, [r4, #8]
    d1f2:	9b01      	ldr	r3, [sp, #4]
    d1f4:	42b3      	cmp	r3, r6
    d1f6:	d200      	bcs.n	d1fa <__ssputs_r+0x8e>
    d1f8:	001e      	movs	r6, r3
    d1fa:	0032      	movs	r2, r6
    d1fc:	9903      	ldr	r1, [sp, #12]
    d1fe:	6820      	ldr	r0, [r4, #0]
    d200:	f7fd fb67 	bl	a8d2 <memmove>
    d204:	68a3      	ldr	r3, [r4, #8]
    d206:	2000      	movs	r0, #0
    d208:	1b9b      	subs	r3, r3, r6
    d20a:	60a3      	str	r3, [r4, #8]
    d20c:	6823      	ldr	r3, [r4, #0]
    d20e:	199e      	adds	r6, r3, r6
    d210:	6026      	str	r6, [r4, #0]
    d212:	e7da      	b.n	d1ca <__ssputs_r+0x5e>
    d214:	002a      	movs	r2, r5
    d216:	0038      	movs	r0, r7
    d218:	f000 fb32 	bl	d880 <_realloc_r>
    d21c:	1e06      	subs	r6, r0, #0
    d21e:	d1e0      	bne.n	d1e2 <__ssputs_r+0x76>
    d220:	6921      	ldr	r1, [r4, #16]
    d222:	0038      	movs	r0, r7
    d224:	f7fd fb70 	bl	a908 <_free_r>
    d228:	e7c7      	b.n	d1ba <__ssputs_r+0x4e>
    d22a:	46c0      	nop			; (mov r8, r8)
    d22c:	fffffb7f 	.word	0xfffffb7f

0000d230 <_svfiprintf_r>:
    d230:	b5f0      	push	{r4, r5, r6, r7, lr}
    d232:	b09f      	sub	sp, #124	; 0x7c
    d234:	9002      	str	r0, [sp, #8]
    d236:	9305      	str	r3, [sp, #20]
    d238:	898b      	ldrh	r3, [r1, #12]
    d23a:	000f      	movs	r7, r1
    d23c:	0016      	movs	r6, r2
    d23e:	061b      	lsls	r3, r3, #24
    d240:	d511      	bpl.n	d266 <_svfiprintf_r+0x36>
    d242:	690b      	ldr	r3, [r1, #16]
    d244:	2b00      	cmp	r3, #0
    d246:	d10e      	bne.n	d266 <_svfiprintf_r+0x36>
    d248:	2140      	movs	r1, #64	; 0x40
    d24a:	f7fd fba7 	bl	a99c <_malloc_r>
    d24e:	6038      	str	r0, [r7, #0]
    d250:	6138      	str	r0, [r7, #16]
    d252:	2800      	cmp	r0, #0
    d254:	d105      	bne.n	d262 <_svfiprintf_r+0x32>
    d256:	230c      	movs	r3, #12
    d258:	9a02      	ldr	r2, [sp, #8]
    d25a:	3801      	subs	r0, #1
    d25c:	6013      	str	r3, [r2, #0]
    d25e:	b01f      	add	sp, #124	; 0x7c
    d260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d262:	2340      	movs	r3, #64	; 0x40
    d264:	617b      	str	r3, [r7, #20]
    d266:	2300      	movs	r3, #0
    d268:	ad06      	add	r5, sp, #24
    d26a:	616b      	str	r3, [r5, #20]
    d26c:	3320      	adds	r3, #32
    d26e:	766b      	strb	r3, [r5, #25]
    d270:	3310      	adds	r3, #16
    d272:	76ab      	strb	r3, [r5, #26]
    d274:	0034      	movs	r4, r6
    d276:	7823      	ldrb	r3, [r4, #0]
    d278:	2b00      	cmp	r3, #0
    d27a:	d147      	bne.n	d30c <_svfiprintf_r+0xdc>
    d27c:	1ba3      	subs	r3, r4, r6
    d27e:	9304      	str	r3, [sp, #16]
    d280:	d00d      	beq.n	d29e <_svfiprintf_r+0x6e>
    d282:	1ba3      	subs	r3, r4, r6
    d284:	0032      	movs	r2, r6
    d286:	0039      	movs	r1, r7
    d288:	9802      	ldr	r0, [sp, #8]
    d28a:	f7ff ff6f 	bl	d16c <__ssputs_r>
    d28e:	1c43      	adds	r3, r0, #1
    d290:	d100      	bne.n	d294 <_svfiprintf_r+0x64>
    d292:	e0b5      	b.n	d400 <_svfiprintf_r+0x1d0>
    d294:	696a      	ldr	r2, [r5, #20]
    d296:	9b04      	ldr	r3, [sp, #16]
    d298:	4694      	mov	ip, r2
    d29a:	4463      	add	r3, ip
    d29c:	616b      	str	r3, [r5, #20]
    d29e:	7823      	ldrb	r3, [r4, #0]
    d2a0:	2b00      	cmp	r3, #0
    d2a2:	d100      	bne.n	d2a6 <_svfiprintf_r+0x76>
    d2a4:	e0ac      	b.n	d400 <_svfiprintf_r+0x1d0>
    d2a6:	2201      	movs	r2, #1
    d2a8:	2300      	movs	r3, #0
    d2aa:	4252      	negs	r2, r2
    d2ac:	606a      	str	r2, [r5, #4]
    d2ae:	a902      	add	r1, sp, #8
    d2b0:	3254      	adds	r2, #84	; 0x54
    d2b2:	1852      	adds	r2, r2, r1
    d2b4:	3401      	adds	r4, #1
    d2b6:	602b      	str	r3, [r5, #0]
    d2b8:	60eb      	str	r3, [r5, #12]
    d2ba:	60ab      	str	r3, [r5, #8]
    d2bc:	7013      	strb	r3, [r2, #0]
    d2be:	65ab      	str	r3, [r5, #88]	; 0x58
    d2c0:	4e58      	ldr	r6, [pc, #352]	; (d424 <_svfiprintf_r+0x1f4>)
    d2c2:	2205      	movs	r2, #5
    d2c4:	7821      	ldrb	r1, [r4, #0]
    d2c6:	0030      	movs	r0, r6
    d2c8:	f7ff fc52 	bl	cb70 <memchr>
    d2cc:	1c62      	adds	r2, r4, #1
    d2ce:	2800      	cmp	r0, #0
    d2d0:	d120      	bne.n	d314 <_svfiprintf_r+0xe4>
    d2d2:	6829      	ldr	r1, [r5, #0]
    d2d4:	06cb      	lsls	r3, r1, #27
    d2d6:	d504      	bpl.n	d2e2 <_svfiprintf_r+0xb2>
    d2d8:	2353      	movs	r3, #83	; 0x53
    d2da:	ae02      	add	r6, sp, #8
    d2dc:	3020      	adds	r0, #32
    d2de:	199b      	adds	r3, r3, r6
    d2e0:	7018      	strb	r0, [r3, #0]
    d2e2:	070b      	lsls	r3, r1, #28
    d2e4:	d504      	bpl.n	d2f0 <_svfiprintf_r+0xc0>
    d2e6:	2353      	movs	r3, #83	; 0x53
    d2e8:	202b      	movs	r0, #43	; 0x2b
    d2ea:	ae02      	add	r6, sp, #8
    d2ec:	199b      	adds	r3, r3, r6
    d2ee:	7018      	strb	r0, [r3, #0]
    d2f0:	7823      	ldrb	r3, [r4, #0]
    d2f2:	2b2a      	cmp	r3, #42	; 0x2a
    d2f4:	d016      	beq.n	d324 <_svfiprintf_r+0xf4>
    d2f6:	2000      	movs	r0, #0
    d2f8:	210a      	movs	r1, #10
    d2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d2fc:	7822      	ldrb	r2, [r4, #0]
    d2fe:	3a30      	subs	r2, #48	; 0x30
    d300:	2a09      	cmp	r2, #9
    d302:	d955      	bls.n	d3b0 <_svfiprintf_r+0x180>
    d304:	2800      	cmp	r0, #0
    d306:	d015      	beq.n	d334 <_svfiprintf_r+0x104>
    d308:	9309      	str	r3, [sp, #36]	; 0x24
    d30a:	e013      	b.n	d334 <_svfiprintf_r+0x104>
    d30c:	2b25      	cmp	r3, #37	; 0x25
    d30e:	d0b5      	beq.n	d27c <_svfiprintf_r+0x4c>
    d310:	3401      	adds	r4, #1
    d312:	e7b0      	b.n	d276 <_svfiprintf_r+0x46>
    d314:	2301      	movs	r3, #1
    d316:	1b80      	subs	r0, r0, r6
    d318:	4083      	lsls	r3, r0
    d31a:	6829      	ldr	r1, [r5, #0]
    d31c:	0014      	movs	r4, r2
    d31e:	430b      	orrs	r3, r1
    d320:	602b      	str	r3, [r5, #0]
    d322:	e7cd      	b.n	d2c0 <_svfiprintf_r+0x90>
    d324:	9b05      	ldr	r3, [sp, #20]
    d326:	1d18      	adds	r0, r3, #4
    d328:	681b      	ldr	r3, [r3, #0]
    d32a:	9005      	str	r0, [sp, #20]
    d32c:	2b00      	cmp	r3, #0
    d32e:	db39      	blt.n	d3a4 <_svfiprintf_r+0x174>
    d330:	9309      	str	r3, [sp, #36]	; 0x24
    d332:	0014      	movs	r4, r2
    d334:	7823      	ldrb	r3, [r4, #0]
    d336:	2b2e      	cmp	r3, #46	; 0x2e
    d338:	d10b      	bne.n	d352 <_svfiprintf_r+0x122>
    d33a:	7863      	ldrb	r3, [r4, #1]
    d33c:	1c62      	adds	r2, r4, #1
    d33e:	2b2a      	cmp	r3, #42	; 0x2a
    d340:	d13e      	bne.n	d3c0 <_svfiprintf_r+0x190>
    d342:	9b05      	ldr	r3, [sp, #20]
    d344:	3402      	adds	r4, #2
    d346:	1d1a      	adds	r2, r3, #4
    d348:	681b      	ldr	r3, [r3, #0]
    d34a:	9205      	str	r2, [sp, #20]
    d34c:	2b00      	cmp	r3, #0
    d34e:	db34      	blt.n	d3ba <_svfiprintf_r+0x18a>
    d350:	9307      	str	r3, [sp, #28]
    d352:	4e35      	ldr	r6, [pc, #212]	; (d428 <_svfiprintf_r+0x1f8>)
    d354:	7821      	ldrb	r1, [r4, #0]
    d356:	2203      	movs	r2, #3
    d358:	0030      	movs	r0, r6
    d35a:	f7ff fc09 	bl	cb70 <memchr>
    d35e:	2800      	cmp	r0, #0
    d360:	d006      	beq.n	d370 <_svfiprintf_r+0x140>
    d362:	2340      	movs	r3, #64	; 0x40
    d364:	1b80      	subs	r0, r0, r6
    d366:	4083      	lsls	r3, r0
    d368:	682a      	ldr	r2, [r5, #0]
    d36a:	3401      	adds	r4, #1
    d36c:	4313      	orrs	r3, r2
    d36e:	602b      	str	r3, [r5, #0]
    d370:	7821      	ldrb	r1, [r4, #0]
    d372:	2206      	movs	r2, #6
    d374:	482d      	ldr	r0, [pc, #180]	; (d42c <_svfiprintf_r+0x1fc>)
    d376:	1c66      	adds	r6, r4, #1
    d378:	7629      	strb	r1, [r5, #24]
    d37a:	f7ff fbf9 	bl	cb70 <memchr>
    d37e:	2800      	cmp	r0, #0
    d380:	d046      	beq.n	d410 <_svfiprintf_r+0x1e0>
    d382:	4b2b      	ldr	r3, [pc, #172]	; (d430 <_svfiprintf_r+0x200>)
    d384:	2b00      	cmp	r3, #0
    d386:	d12f      	bne.n	d3e8 <_svfiprintf_r+0x1b8>
    d388:	6829      	ldr	r1, [r5, #0]
    d38a:	9b05      	ldr	r3, [sp, #20]
    d38c:	2207      	movs	r2, #7
    d38e:	05c9      	lsls	r1, r1, #23
    d390:	d528      	bpl.n	d3e4 <_svfiprintf_r+0x1b4>
    d392:	189b      	adds	r3, r3, r2
    d394:	4393      	bics	r3, r2
    d396:	3308      	adds	r3, #8
    d398:	9305      	str	r3, [sp, #20]
    d39a:	696b      	ldr	r3, [r5, #20]
    d39c:	9a03      	ldr	r2, [sp, #12]
    d39e:	189b      	adds	r3, r3, r2
    d3a0:	616b      	str	r3, [r5, #20]
    d3a2:	e767      	b.n	d274 <_svfiprintf_r+0x44>
    d3a4:	425b      	negs	r3, r3
    d3a6:	60eb      	str	r3, [r5, #12]
    d3a8:	2302      	movs	r3, #2
    d3aa:	430b      	orrs	r3, r1
    d3ac:	602b      	str	r3, [r5, #0]
    d3ae:	e7c0      	b.n	d332 <_svfiprintf_r+0x102>
    d3b0:	434b      	muls	r3, r1
    d3b2:	3401      	adds	r4, #1
    d3b4:	189b      	adds	r3, r3, r2
    d3b6:	2001      	movs	r0, #1
    d3b8:	e7a0      	b.n	d2fc <_svfiprintf_r+0xcc>
    d3ba:	2301      	movs	r3, #1
    d3bc:	425b      	negs	r3, r3
    d3be:	e7c7      	b.n	d350 <_svfiprintf_r+0x120>
    d3c0:	2300      	movs	r3, #0
    d3c2:	0014      	movs	r4, r2
    d3c4:	200a      	movs	r0, #10
    d3c6:	001a      	movs	r2, r3
    d3c8:	606b      	str	r3, [r5, #4]
    d3ca:	7821      	ldrb	r1, [r4, #0]
    d3cc:	3930      	subs	r1, #48	; 0x30
    d3ce:	2909      	cmp	r1, #9
    d3d0:	d903      	bls.n	d3da <_svfiprintf_r+0x1aa>
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	d0bd      	beq.n	d352 <_svfiprintf_r+0x122>
    d3d6:	9207      	str	r2, [sp, #28]
    d3d8:	e7bb      	b.n	d352 <_svfiprintf_r+0x122>
    d3da:	4342      	muls	r2, r0
    d3dc:	3401      	adds	r4, #1
    d3de:	1852      	adds	r2, r2, r1
    d3e0:	2301      	movs	r3, #1
    d3e2:	e7f2      	b.n	d3ca <_svfiprintf_r+0x19a>
    d3e4:	3307      	adds	r3, #7
    d3e6:	e7d5      	b.n	d394 <_svfiprintf_r+0x164>
    d3e8:	ab05      	add	r3, sp, #20
    d3ea:	9300      	str	r3, [sp, #0]
    d3ec:	003a      	movs	r2, r7
    d3ee:	4b11      	ldr	r3, [pc, #68]	; (d434 <_svfiprintf_r+0x204>)
    d3f0:	0029      	movs	r1, r5
    d3f2:	9802      	ldr	r0, [sp, #8]
    d3f4:	f7fd fbcc 	bl	ab90 <_printf_float>
    d3f8:	9003      	str	r0, [sp, #12]
    d3fa:	9b03      	ldr	r3, [sp, #12]
    d3fc:	3301      	adds	r3, #1
    d3fe:	d1cc      	bne.n	d39a <_svfiprintf_r+0x16a>
    d400:	89bb      	ldrh	r3, [r7, #12]
    d402:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d404:	065b      	lsls	r3, r3, #25
    d406:	d400      	bmi.n	d40a <_svfiprintf_r+0x1da>
    d408:	e729      	b.n	d25e <_svfiprintf_r+0x2e>
    d40a:	2001      	movs	r0, #1
    d40c:	4240      	negs	r0, r0
    d40e:	e726      	b.n	d25e <_svfiprintf_r+0x2e>
    d410:	ab05      	add	r3, sp, #20
    d412:	9300      	str	r3, [sp, #0]
    d414:	003a      	movs	r2, r7
    d416:	4b07      	ldr	r3, [pc, #28]	; (d434 <_svfiprintf_r+0x204>)
    d418:	0029      	movs	r1, r5
    d41a:	9802      	ldr	r0, [sp, #8]
    d41c:	f7fd fe72 	bl	b104 <_printf_i>
    d420:	e7ea      	b.n	d3f8 <_svfiprintf_r+0x1c8>
    d422:	46c0      	nop			; (mov r8, r8)
    d424:	0001292c 	.word	0x0001292c
    d428:	00012932 	.word	0x00012932
    d42c:	00012936 	.word	0x00012936
    d430:	0000ab91 	.word	0x0000ab91
    d434:	0000d16d 	.word	0x0000d16d

0000d438 <__sfputc_r>:
    d438:	6893      	ldr	r3, [r2, #8]
    d43a:	b510      	push	{r4, lr}
    d43c:	3b01      	subs	r3, #1
    d43e:	6093      	str	r3, [r2, #8]
    d440:	2b00      	cmp	r3, #0
    d442:	da05      	bge.n	d450 <__sfputc_r+0x18>
    d444:	6994      	ldr	r4, [r2, #24]
    d446:	42a3      	cmp	r3, r4
    d448:	db08      	blt.n	d45c <__sfputc_r+0x24>
    d44a:	b2cb      	uxtb	r3, r1
    d44c:	2b0a      	cmp	r3, #10
    d44e:	d005      	beq.n	d45c <__sfputc_r+0x24>
    d450:	6813      	ldr	r3, [r2, #0]
    d452:	1c58      	adds	r0, r3, #1
    d454:	6010      	str	r0, [r2, #0]
    d456:	7019      	strb	r1, [r3, #0]
    d458:	b2c8      	uxtb	r0, r1
    d45a:	bd10      	pop	{r4, pc}
    d45c:	f7fe fa3e 	bl	b8dc <__swbuf_r>
    d460:	e7fb      	b.n	d45a <__sfputc_r+0x22>

0000d462 <__sfputs_r>:
    d462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d464:	0006      	movs	r6, r0
    d466:	000f      	movs	r7, r1
    d468:	0014      	movs	r4, r2
    d46a:	18d5      	adds	r5, r2, r3
    d46c:	42ac      	cmp	r4, r5
    d46e:	d101      	bne.n	d474 <__sfputs_r+0x12>
    d470:	2000      	movs	r0, #0
    d472:	e007      	b.n	d484 <__sfputs_r+0x22>
    d474:	7821      	ldrb	r1, [r4, #0]
    d476:	003a      	movs	r2, r7
    d478:	0030      	movs	r0, r6
    d47a:	f7ff ffdd 	bl	d438 <__sfputc_r>
    d47e:	3401      	adds	r4, #1
    d480:	1c43      	adds	r3, r0, #1
    d482:	d1f3      	bne.n	d46c <__sfputs_r+0xa>
    d484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000d488 <_vfiprintf_r>:
    d488:	b5f0      	push	{r4, r5, r6, r7, lr}
    d48a:	b09f      	sub	sp, #124	; 0x7c
    d48c:	0006      	movs	r6, r0
    d48e:	000f      	movs	r7, r1
    d490:	0014      	movs	r4, r2
    d492:	9305      	str	r3, [sp, #20]
    d494:	2800      	cmp	r0, #0
    d496:	d004      	beq.n	d4a2 <_vfiprintf_r+0x1a>
    d498:	6983      	ldr	r3, [r0, #24]
    d49a:	2b00      	cmp	r3, #0
    d49c:	d101      	bne.n	d4a2 <_vfiprintf_r+0x1a>
    d49e:	f7ff fa59 	bl	c954 <__sinit>
    d4a2:	4b7f      	ldr	r3, [pc, #508]	; (d6a0 <_vfiprintf_r+0x218>)
    d4a4:	429f      	cmp	r7, r3
    d4a6:	d15c      	bne.n	d562 <_vfiprintf_r+0xda>
    d4a8:	6877      	ldr	r7, [r6, #4]
    d4aa:	89bb      	ldrh	r3, [r7, #12]
    d4ac:	071b      	lsls	r3, r3, #28
    d4ae:	d562      	bpl.n	d576 <_vfiprintf_r+0xee>
    d4b0:	693b      	ldr	r3, [r7, #16]
    d4b2:	2b00      	cmp	r3, #0
    d4b4:	d05f      	beq.n	d576 <_vfiprintf_r+0xee>
    d4b6:	2300      	movs	r3, #0
    d4b8:	ad06      	add	r5, sp, #24
    d4ba:	616b      	str	r3, [r5, #20]
    d4bc:	3320      	adds	r3, #32
    d4be:	766b      	strb	r3, [r5, #25]
    d4c0:	3310      	adds	r3, #16
    d4c2:	76ab      	strb	r3, [r5, #26]
    d4c4:	9402      	str	r4, [sp, #8]
    d4c6:	9c02      	ldr	r4, [sp, #8]
    d4c8:	7823      	ldrb	r3, [r4, #0]
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d15d      	bne.n	d58a <_vfiprintf_r+0x102>
    d4ce:	9b02      	ldr	r3, [sp, #8]
    d4d0:	1ae3      	subs	r3, r4, r3
    d4d2:	9304      	str	r3, [sp, #16]
    d4d4:	d00d      	beq.n	d4f2 <_vfiprintf_r+0x6a>
    d4d6:	9b04      	ldr	r3, [sp, #16]
    d4d8:	9a02      	ldr	r2, [sp, #8]
    d4da:	0039      	movs	r1, r7
    d4dc:	0030      	movs	r0, r6
    d4de:	f7ff ffc0 	bl	d462 <__sfputs_r>
    d4e2:	1c43      	adds	r3, r0, #1
    d4e4:	d100      	bne.n	d4e8 <_vfiprintf_r+0x60>
    d4e6:	e0cc      	b.n	d682 <_vfiprintf_r+0x1fa>
    d4e8:	696a      	ldr	r2, [r5, #20]
    d4ea:	9b04      	ldr	r3, [sp, #16]
    d4ec:	4694      	mov	ip, r2
    d4ee:	4463      	add	r3, ip
    d4f0:	616b      	str	r3, [r5, #20]
    d4f2:	7823      	ldrb	r3, [r4, #0]
    d4f4:	2b00      	cmp	r3, #0
    d4f6:	d100      	bne.n	d4fa <_vfiprintf_r+0x72>
    d4f8:	e0c3      	b.n	d682 <_vfiprintf_r+0x1fa>
    d4fa:	2201      	movs	r2, #1
    d4fc:	2300      	movs	r3, #0
    d4fe:	4252      	negs	r2, r2
    d500:	606a      	str	r2, [r5, #4]
    d502:	a902      	add	r1, sp, #8
    d504:	3254      	adds	r2, #84	; 0x54
    d506:	1852      	adds	r2, r2, r1
    d508:	3401      	adds	r4, #1
    d50a:	602b      	str	r3, [r5, #0]
    d50c:	60eb      	str	r3, [r5, #12]
    d50e:	60ab      	str	r3, [r5, #8]
    d510:	7013      	strb	r3, [r2, #0]
    d512:	65ab      	str	r3, [r5, #88]	; 0x58
    d514:	7821      	ldrb	r1, [r4, #0]
    d516:	2205      	movs	r2, #5
    d518:	4862      	ldr	r0, [pc, #392]	; (d6a4 <_vfiprintf_r+0x21c>)
    d51a:	f7ff fb29 	bl	cb70 <memchr>
    d51e:	1c63      	adds	r3, r4, #1
    d520:	469c      	mov	ip, r3
    d522:	2800      	cmp	r0, #0
    d524:	d135      	bne.n	d592 <_vfiprintf_r+0x10a>
    d526:	6829      	ldr	r1, [r5, #0]
    d528:	06cb      	lsls	r3, r1, #27
    d52a:	d504      	bpl.n	d536 <_vfiprintf_r+0xae>
    d52c:	2353      	movs	r3, #83	; 0x53
    d52e:	aa02      	add	r2, sp, #8
    d530:	3020      	adds	r0, #32
    d532:	189b      	adds	r3, r3, r2
    d534:	7018      	strb	r0, [r3, #0]
    d536:	070b      	lsls	r3, r1, #28
    d538:	d504      	bpl.n	d544 <_vfiprintf_r+0xbc>
    d53a:	2353      	movs	r3, #83	; 0x53
    d53c:	202b      	movs	r0, #43	; 0x2b
    d53e:	aa02      	add	r2, sp, #8
    d540:	189b      	adds	r3, r3, r2
    d542:	7018      	strb	r0, [r3, #0]
    d544:	7823      	ldrb	r3, [r4, #0]
    d546:	2b2a      	cmp	r3, #42	; 0x2a
    d548:	d02c      	beq.n	d5a4 <_vfiprintf_r+0x11c>
    d54a:	2000      	movs	r0, #0
    d54c:	210a      	movs	r1, #10
    d54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d550:	7822      	ldrb	r2, [r4, #0]
    d552:	3a30      	subs	r2, #48	; 0x30
    d554:	2a09      	cmp	r2, #9
    d556:	d800      	bhi.n	d55a <_vfiprintf_r+0xd2>
    d558:	e06b      	b.n	d632 <_vfiprintf_r+0x1aa>
    d55a:	2800      	cmp	r0, #0
    d55c:	d02a      	beq.n	d5b4 <_vfiprintf_r+0x12c>
    d55e:	9309      	str	r3, [sp, #36]	; 0x24
    d560:	e028      	b.n	d5b4 <_vfiprintf_r+0x12c>
    d562:	4b51      	ldr	r3, [pc, #324]	; (d6a8 <_vfiprintf_r+0x220>)
    d564:	429f      	cmp	r7, r3
    d566:	d101      	bne.n	d56c <_vfiprintf_r+0xe4>
    d568:	68b7      	ldr	r7, [r6, #8]
    d56a:	e79e      	b.n	d4aa <_vfiprintf_r+0x22>
    d56c:	4b4f      	ldr	r3, [pc, #316]	; (d6ac <_vfiprintf_r+0x224>)
    d56e:	429f      	cmp	r7, r3
    d570:	d19b      	bne.n	d4aa <_vfiprintf_r+0x22>
    d572:	68f7      	ldr	r7, [r6, #12]
    d574:	e799      	b.n	d4aa <_vfiprintf_r+0x22>
    d576:	0039      	movs	r1, r7
    d578:	0030      	movs	r0, r6
    d57a:	f7fe fa11 	bl	b9a0 <__swsetup_r>
    d57e:	2800      	cmp	r0, #0
    d580:	d099      	beq.n	d4b6 <_vfiprintf_r+0x2e>
    d582:	2001      	movs	r0, #1
    d584:	4240      	negs	r0, r0
    d586:	b01f      	add	sp, #124	; 0x7c
    d588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d58a:	2b25      	cmp	r3, #37	; 0x25
    d58c:	d09f      	beq.n	d4ce <_vfiprintf_r+0x46>
    d58e:	3401      	adds	r4, #1
    d590:	e79a      	b.n	d4c8 <_vfiprintf_r+0x40>
    d592:	4b44      	ldr	r3, [pc, #272]	; (d6a4 <_vfiprintf_r+0x21c>)
    d594:	6829      	ldr	r1, [r5, #0]
    d596:	1ac0      	subs	r0, r0, r3
    d598:	2301      	movs	r3, #1
    d59a:	4083      	lsls	r3, r0
    d59c:	430b      	orrs	r3, r1
    d59e:	602b      	str	r3, [r5, #0]
    d5a0:	4664      	mov	r4, ip
    d5a2:	e7b7      	b.n	d514 <_vfiprintf_r+0x8c>
    d5a4:	9b05      	ldr	r3, [sp, #20]
    d5a6:	1d18      	adds	r0, r3, #4
    d5a8:	681b      	ldr	r3, [r3, #0]
    d5aa:	9005      	str	r0, [sp, #20]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	db3a      	blt.n	d626 <_vfiprintf_r+0x19e>
    d5b0:	9309      	str	r3, [sp, #36]	; 0x24
    d5b2:	4664      	mov	r4, ip
    d5b4:	7823      	ldrb	r3, [r4, #0]
    d5b6:	2b2e      	cmp	r3, #46	; 0x2e
    d5b8:	d10b      	bne.n	d5d2 <_vfiprintf_r+0x14a>
    d5ba:	7863      	ldrb	r3, [r4, #1]
    d5bc:	1c62      	adds	r2, r4, #1
    d5be:	2b2a      	cmp	r3, #42	; 0x2a
    d5c0:	d13f      	bne.n	d642 <_vfiprintf_r+0x1ba>
    d5c2:	9b05      	ldr	r3, [sp, #20]
    d5c4:	3402      	adds	r4, #2
    d5c6:	1d1a      	adds	r2, r3, #4
    d5c8:	681b      	ldr	r3, [r3, #0]
    d5ca:	9205      	str	r2, [sp, #20]
    d5cc:	2b00      	cmp	r3, #0
    d5ce:	db35      	blt.n	d63c <_vfiprintf_r+0x1b4>
    d5d0:	9307      	str	r3, [sp, #28]
    d5d2:	7821      	ldrb	r1, [r4, #0]
    d5d4:	2203      	movs	r2, #3
    d5d6:	4836      	ldr	r0, [pc, #216]	; (d6b0 <_vfiprintf_r+0x228>)
    d5d8:	f7ff faca 	bl	cb70 <memchr>
    d5dc:	2800      	cmp	r0, #0
    d5de:	d007      	beq.n	d5f0 <_vfiprintf_r+0x168>
    d5e0:	4b33      	ldr	r3, [pc, #204]	; (d6b0 <_vfiprintf_r+0x228>)
    d5e2:	682a      	ldr	r2, [r5, #0]
    d5e4:	1ac0      	subs	r0, r0, r3
    d5e6:	2340      	movs	r3, #64	; 0x40
    d5e8:	4083      	lsls	r3, r0
    d5ea:	4313      	orrs	r3, r2
    d5ec:	602b      	str	r3, [r5, #0]
    d5ee:	3401      	adds	r4, #1
    d5f0:	7821      	ldrb	r1, [r4, #0]
    d5f2:	1c63      	adds	r3, r4, #1
    d5f4:	2206      	movs	r2, #6
    d5f6:	482f      	ldr	r0, [pc, #188]	; (d6b4 <_vfiprintf_r+0x22c>)
    d5f8:	9302      	str	r3, [sp, #8]
    d5fa:	7629      	strb	r1, [r5, #24]
    d5fc:	f7ff fab8 	bl	cb70 <memchr>
    d600:	2800      	cmp	r0, #0
    d602:	d044      	beq.n	d68e <_vfiprintf_r+0x206>
    d604:	4b2c      	ldr	r3, [pc, #176]	; (d6b8 <_vfiprintf_r+0x230>)
    d606:	2b00      	cmp	r3, #0
    d608:	d12f      	bne.n	d66a <_vfiprintf_r+0x1e2>
    d60a:	6829      	ldr	r1, [r5, #0]
    d60c:	9b05      	ldr	r3, [sp, #20]
    d60e:	2207      	movs	r2, #7
    d610:	05c9      	lsls	r1, r1, #23
    d612:	d528      	bpl.n	d666 <_vfiprintf_r+0x1de>
    d614:	189b      	adds	r3, r3, r2
    d616:	4393      	bics	r3, r2
    d618:	3308      	adds	r3, #8
    d61a:	9305      	str	r3, [sp, #20]
    d61c:	696b      	ldr	r3, [r5, #20]
    d61e:	9a03      	ldr	r2, [sp, #12]
    d620:	189b      	adds	r3, r3, r2
    d622:	616b      	str	r3, [r5, #20]
    d624:	e74f      	b.n	d4c6 <_vfiprintf_r+0x3e>
    d626:	425b      	negs	r3, r3
    d628:	60eb      	str	r3, [r5, #12]
    d62a:	2302      	movs	r3, #2
    d62c:	430b      	orrs	r3, r1
    d62e:	602b      	str	r3, [r5, #0]
    d630:	e7bf      	b.n	d5b2 <_vfiprintf_r+0x12a>
    d632:	434b      	muls	r3, r1
    d634:	3401      	adds	r4, #1
    d636:	189b      	adds	r3, r3, r2
    d638:	2001      	movs	r0, #1
    d63a:	e789      	b.n	d550 <_vfiprintf_r+0xc8>
    d63c:	2301      	movs	r3, #1
    d63e:	425b      	negs	r3, r3
    d640:	e7c6      	b.n	d5d0 <_vfiprintf_r+0x148>
    d642:	2300      	movs	r3, #0
    d644:	0014      	movs	r4, r2
    d646:	200a      	movs	r0, #10
    d648:	001a      	movs	r2, r3
    d64a:	606b      	str	r3, [r5, #4]
    d64c:	7821      	ldrb	r1, [r4, #0]
    d64e:	3930      	subs	r1, #48	; 0x30
    d650:	2909      	cmp	r1, #9
    d652:	d903      	bls.n	d65c <_vfiprintf_r+0x1d4>
    d654:	2b00      	cmp	r3, #0
    d656:	d0bc      	beq.n	d5d2 <_vfiprintf_r+0x14a>
    d658:	9207      	str	r2, [sp, #28]
    d65a:	e7ba      	b.n	d5d2 <_vfiprintf_r+0x14a>
    d65c:	4342      	muls	r2, r0
    d65e:	3401      	adds	r4, #1
    d660:	1852      	adds	r2, r2, r1
    d662:	2301      	movs	r3, #1
    d664:	e7f2      	b.n	d64c <_vfiprintf_r+0x1c4>
    d666:	3307      	adds	r3, #7
    d668:	e7d5      	b.n	d616 <_vfiprintf_r+0x18e>
    d66a:	ab05      	add	r3, sp, #20
    d66c:	9300      	str	r3, [sp, #0]
    d66e:	003a      	movs	r2, r7
    d670:	4b12      	ldr	r3, [pc, #72]	; (d6bc <_vfiprintf_r+0x234>)
    d672:	0029      	movs	r1, r5
    d674:	0030      	movs	r0, r6
    d676:	f7fd fa8b 	bl	ab90 <_printf_float>
    d67a:	9003      	str	r0, [sp, #12]
    d67c:	9b03      	ldr	r3, [sp, #12]
    d67e:	3301      	adds	r3, #1
    d680:	d1cc      	bne.n	d61c <_vfiprintf_r+0x194>
    d682:	89bb      	ldrh	r3, [r7, #12]
    d684:	065b      	lsls	r3, r3, #25
    d686:	d500      	bpl.n	d68a <_vfiprintf_r+0x202>
    d688:	e77b      	b.n	d582 <_vfiprintf_r+0xfa>
    d68a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d68c:	e77b      	b.n	d586 <_vfiprintf_r+0xfe>
    d68e:	ab05      	add	r3, sp, #20
    d690:	9300      	str	r3, [sp, #0]
    d692:	003a      	movs	r2, r7
    d694:	4b09      	ldr	r3, [pc, #36]	; (d6bc <_vfiprintf_r+0x234>)
    d696:	0029      	movs	r1, r5
    d698:	0030      	movs	r0, r6
    d69a:	f7fd fd33 	bl	b104 <_printf_i>
    d69e:	e7ec      	b.n	d67a <_vfiprintf_r+0x1f2>
    d6a0:	000127ec 	.word	0x000127ec
    d6a4:	0001292c 	.word	0x0001292c
    d6a8:	0001280c 	.word	0x0001280c
    d6ac:	000127cc 	.word	0x000127cc
    d6b0:	00012932 	.word	0x00012932
    d6b4:	00012936 	.word	0x00012936
    d6b8:	0000ab91 	.word	0x0000ab91
    d6bc:	0000d463 	.word	0x0000d463

0000d6c0 <_putc_r>:
    d6c0:	b570      	push	{r4, r5, r6, lr}
    d6c2:	0006      	movs	r6, r0
    d6c4:	000d      	movs	r5, r1
    d6c6:	0014      	movs	r4, r2
    d6c8:	2800      	cmp	r0, #0
    d6ca:	d004      	beq.n	d6d6 <_putc_r+0x16>
    d6cc:	6983      	ldr	r3, [r0, #24]
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	d101      	bne.n	d6d6 <_putc_r+0x16>
    d6d2:	f7ff f93f 	bl	c954 <__sinit>
    d6d6:	4b12      	ldr	r3, [pc, #72]	; (d720 <_putc_r+0x60>)
    d6d8:	429c      	cmp	r4, r3
    d6da:	d111      	bne.n	d700 <_putc_r+0x40>
    d6dc:	6874      	ldr	r4, [r6, #4]
    d6de:	68a3      	ldr	r3, [r4, #8]
    d6e0:	3b01      	subs	r3, #1
    d6e2:	60a3      	str	r3, [r4, #8]
    d6e4:	2b00      	cmp	r3, #0
    d6e6:	da05      	bge.n	d6f4 <_putc_r+0x34>
    d6e8:	69a2      	ldr	r2, [r4, #24]
    d6ea:	4293      	cmp	r3, r2
    d6ec:	db12      	blt.n	d714 <_putc_r+0x54>
    d6ee:	b2eb      	uxtb	r3, r5
    d6f0:	2b0a      	cmp	r3, #10
    d6f2:	d00f      	beq.n	d714 <_putc_r+0x54>
    d6f4:	6823      	ldr	r3, [r4, #0]
    d6f6:	b2e8      	uxtb	r0, r5
    d6f8:	1c5a      	adds	r2, r3, #1
    d6fa:	6022      	str	r2, [r4, #0]
    d6fc:	701d      	strb	r5, [r3, #0]
    d6fe:	bd70      	pop	{r4, r5, r6, pc}
    d700:	4b08      	ldr	r3, [pc, #32]	; (d724 <_putc_r+0x64>)
    d702:	429c      	cmp	r4, r3
    d704:	d101      	bne.n	d70a <_putc_r+0x4a>
    d706:	68b4      	ldr	r4, [r6, #8]
    d708:	e7e9      	b.n	d6de <_putc_r+0x1e>
    d70a:	4b07      	ldr	r3, [pc, #28]	; (d728 <_putc_r+0x68>)
    d70c:	429c      	cmp	r4, r3
    d70e:	d1e6      	bne.n	d6de <_putc_r+0x1e>
    d710:	68f4      	ldr	r4, [r6, #12]
    d712:	e7e4      	b.n	d6de <_putc_r+0x1e>
    d714:	0022      	movs	r2, r4
    d716:	0029      	movs	r1, r5
    d718:	0030      	movs	r0, r6
    d71a:	f7fe f8df 	bl	b8dc <__swbuf_r>
    d71e:	e7ee      	b.n	d6fe <_putc_r+0x3e>
    d720:	000127ec 	.word	0x000127ec
    d724:	0001280c 	.word	0x0001280c
    d728:	000127cc 	.word	0x000127cc

0000d72c <__sread>:
    d72c:	b570      	push	{r4, r5, r6, lr}
    d72e:	000c      	movs	r4, r1
    d730:	250e      	movs	r5, #14
    d732:	5f49      	ldrsh	r1, [r1, r5]
    d734:	f000 f8ca 	bl	d8cc <_read_r>
    d738:	2800      	cmp	r0, #0
    d73a:	db03      	blt.n	d744 <__sread+0x18>
    d73c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d73e:	181b      	adds	r3, r3, r0
    d740:	6563      	str	r3, [r4, #84]	; 0x54
    d742:	bd70      	pop	{r4, r5, r6, pc}
    d744:	89a3      	ldrh	r3, [r4, #12]
    d746:	4a02      	ldr	r2, [pc, #8]	; (d750 <__sread+0x24>)
    d748:	4013      	ands	r3, r2
    d74a:	81a3      	strh	r3, [r4, #12]
    d74c:	e7f9      	b.n	d742 <__sread+0x16>
    d74e:	46c0      	nop			; (mov r8, r8)
    d750:	ffffefff 	.word	0xffffefff

0000d754 <__swrite>:
    d754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d756:	001f      	movs	r7, r3
    d758:	898b      	ldrh	r3, [r1, #12]
    d75a:	0005      	movs	r5, r0
    d75c:	000c      	movs	r4, r1
    d75e:	0016      	movs	r6, r2
    d760:	05db      	lsls	r3, r3, #23
    d762:	d505      	bpl.n	d770 <__swrite+0x1c>
    d764:	230e      	movs	r3, #14
    d766:	5ec9      	ldrsh	r1, [r1, r3]
    d768:	2200      	movs	r2, #0
    d76a:	2302      	movs	r3, #2
    d76c:	f000 f874 	bl	d858 <_lseek_r>
    d770:	89a3      	ldrh	r3, [r4, #12]
    d772:	4a05      	ldr	r2, [pc, #20]	; (d788 <__swrite+0x34>)
    d774:	0028      	movs	r0, r5
    d776:	4013      	ands	r3, r2
    d778:	81a3      	strh	r3, [r4, #12]
    d77a:	0032      	movs	r2, r6
    d77c:	230e      	movs	r3, #14
    d77e:	5ee1      	ldrsh	r1, [r4, r3]
    d780:	003b      	movs	r3, r7
    d782:	f000 f81f 	bl	d7c4 <_write_r>
    d786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d788:	ffffefff 	.word	0xffffefff

0000d78c <__sseek>:
    d78c:	b570      	push	{r4, r5, r6, lr}
    d78e:	000c      	movs	r4, r1
    d790:	250e      	movs	r5, #14
    d792:	5f49      	ldrsh	r1, [r1, r5]
    d794:	f000 f860 	bl	d858 <_lseek_r>
    d798:	89a3      	ldrh	r3, [r4, #12]
    d79a:	1c42      	adds	r2, r0, #1
    d79c:	d103      	bne.n	d7a6 <__sseek+0x1a>
    d79e:	4a05      	ldr	r2, [pc, #20]	; (d7b4 <__sseek+0x28>)
    d7a0:	4013      	ands	r3, r2
    d7a2:	81a3      	strh	r3, [r4, #12]
    d7a4:	bd70      	pop	{r4, r5, r6, pc}
    d7a6:	2280      	movs	r2, #128	; 0x80
    d7a8:	0152      	lsls	r2, r2, #5
    d7aa:	4313      	orrs	r3, r2
    d7ac:	81a3      	strh	r3, [r4, #12]
    d7ae:	6560      	str	r0, [r4, #84]	; 0x54
    d7b0:	e7f8      	b.n	d7a4 <__sseek+0x18>
    d7b2:	46c0      	nop			; (mov r8, r8)
    d7b4:	ffffefff 	.word	0xffffefff

0000d7b8 <__sclose>:
    d7b8:	b510      	push	{r4, lr}
    d7ba:	230e      	movs	r3, #14
    d7bc:	5ec9      	ldrsh	r1, [r1, r3]
    d7be:	f000 f815 	bl	d7ec <_close_r>
    d7c2:	bd10      	pop	{r4, pc}

0000d7c4 <_write_r>:
    d7c4:	b570      	push	{r4, r5, r6, lr}
    d7c6:	0005      	movs	r5, r0
    d7c8:	0008      	movs	r0, r1
    d7ca:	0011      	movs	r1, r2
    d7cc:	2200      	movs	r2, #0
    d7ce:	4c06      	ldr	r4, [pc, #24]	; (d7e8 <_write_r+0x24>)
    d7d0:	6022      	str	r2, [r4, #0]
    d7d2:	001a      	movs	r2, r3
    d7d4:	f7f9 ff34 	bl	7640 <_write>
    d7d8:	1c43      	adds	r3, r0, #1
    d7da:	d103      	bne.n	d7e4 <_write_r+0x20>
    d7dc:	6823      	ldr	r3, [r4, #0]
    d7de:	2b00      	cmp	r3, #0
    d7e0:	d000      	beq.n	d7e4 <_write_r+0x20>
    d7e2:	602b      	str	r3, [r5, #0]
    d7e4:	bd70      	pop	{r4, r5, r6, pc}
    d7e6:	46c0      	nop			; (mov r8, r8)
    d7e8:	200007f8 	.word	0x200007f8

0000d7ec <_close_r>:
    d7ec:	2300      	movs	r3, #0
    d7ee:	b570      	push	{r4, r5, r6, lr}
    d7f0:	4c06      	ldr	r4, [pc, #24]	; (d80c <_close_r+0x20>)
    d7f2:	0005      	movs	r5, r0
    d7f4:	0008      	movs	r0, r1
    d7f6:	6023      	str	r3, [r4, #0]
    d7f8:	f7fc feb2 	bl	a560 <_close>
    d7fc:	1c43      	adds	r3, r0, #1
    d7fe:	d103      	bne.n	d808 <_close_r+0x1c>
    d800:	6823      	ldr	r3, [r4, #0]
    d802:	2b00      	cmp	r3, #0
    d804:	d000      	beq.n	d808 <_close_r+0x1c>
    d806:	602b      	str	r3, [r5, #0]
    d808:	bd70      	pop	{r4, r5, r6, pc}
    d80a:	46c0      	nop			; (mov r8, r8)
    d80c:	200007f8 	.word	0x200007f8

0000d810 <_fstat_r>:
    d810:	2300      	movs	r3, #0
    d812:	b570      	push	{r4, r5, r6, lr}
    d814:	4c06      	ldr	r4, [pc, #24]	; (d830 <_fstat_r+0x20>)
    d816:	0005      	movs	r5, r0
    d818:	0008      	movs	r0, r1
    d81a:	0011      	movs	r1, r2
    d81c:	6023      	str	r3, [r4, #0]
    d81e:	f7fc fea2 	bl	a566 <_fstat>
    d822:	1c43      	adds	r3, r0, #1
    d824:	d103      	bne.n	d82e <_fstat_r+0x1e>
    d826:	6823      	ldr	r3, [r4, #0]
    d828:	2b00      	cmp	r3, #0
    d82a:	d000      	beq.n	d82e <_fstat_r+0x1e>
    d82c:	602b      	str	r3, [r5, #0]
    d82e:	bd70      	pop	{r4, r5, r6, pc}
    d830:	200007f8 	.word	0x200007f8

0000d834 <_isatty_r>:
    d834:	2300      	movs	r3, #0
    d836:	b570      	push	{r4, r5, r6, lr}
    d838:	4c06      	ldr	r4, [pc, #24]	; (d854 <_isatty_r+0x20>)
    d83a:	0005      	movs	r5, r0
    d83c:	0008      	movs	r0, r1
    d83e:	6023      	str	r3, [r4, #0]
    d840:	f7fc fe96 	bl	a570 <_isatty>
    d844:	1c43      	adds	r3, r0, #1
    d846:	d103      	bne.n	d850 <_isatty_r+0x1c>
    d848:	6823      	ldr	r3, [r4, #0]
    d84a:	2b00      	cmp	r3, #0
    d84c:	d000      	beq.n	d850 <_isatty_r+0x1c>
    d84e:	602b      	str	r3, [r5, #0]
    d850:	bd70      	pop	{r4, r5, r6, pc}
    d852:	46c0      	nop			; (mov r8, r8)
    d854:	200007f8 	.word	0x200007f8

0000d858 <_lseek_r>:
    d858:	b570      	push	{r4, r5, r6, lr}
    d85a:	0005      	movs	r5, r0
    d85c:	0008      	movs	r0, r1
    d85e:	0011      	movs	r1, r2
    d860:	2200      	movs	r2, #0
    d862:	4c06      	ldr	r4, [pc, #24]	; (d87c <_lseek_r+0x24>)
    d864:	6022      	str	r2, [r4, #0]
    d866:	001a      	movs	r2, r3
    d868:	f7fc fe84 	bl	a574 <_lseek>
    d86c:	1c43      	adds	r3, r0, #1
    d86e:	d103      	bne.n	d878 <_lseek_r+0x20>
    d870:	6823      	ldr	r3, [r4, #0]
    d872:	2b00      	cmp	r3, #0
    d874:	d000      	beq.n	d878 <_lseek_r+0x20>
    d876:	602b      	str	r3, [r5, #0]
    d878:	bd70      	pop	{r4, r5, r6, pc}
    d87a:	46c0      	nop			; (mov r8, r8)
    d87c:	200007f8 	.word	0x200007f8

0000d880 <_realloc_r>:
    d880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d882:	0007      	movs	r7, r0
    d884:	000d      	movs	r5, r1
    d886:	0016      	movs	r6, r2
    d888:	2900      	cmp	r1, #0
    d88a:	d105      	bne.n	d898 <_realloc_r+0x18>
    d88c:	0011      	movs	r1, r2
    d88e:	f7fd f885 	bl	a99c <_malloc_r>
    d892:	0004      	movs	r4, r0
    d894:	0020      	movs	r0, r4
    d896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d898:	2a00      	cmp	r2, #0
    d89a:	d103      	bne.n	d8a4 <_realloc_r+0x24>
    d89c:	f7fd f834 	bl	a908 <_free_r>
    d8a0:	0034      	movs	r4, r6
    d8a2:	e7f7      	b.n	d894 <_realloc_r+0x14>
    d8a4:	f000 f826 	bl	d8f4 <_malloc_usable_size_r>
    d8a8:	002c      	movs	r4, r5
    d8aa:	4286      	cmp	r6, r0
    d8ac:	d9f2      	bls.n	d894 <_realloc_r+0x14>
    d8ae:	0031      	movs	r1, r6
    d8b0:	0038      	movs	r0, r7
    d8b2:	f7fd f873 	bl	a99c <_malloc_r>
    d8b6:	1e04      	subs	r4, r0, #0
    d8b8:	d0ec      	beq.n	d894 <_realloc_r+0x14>
    d8ba:	0029      	movs	r1, r5
    d8bc:	0032      	movs	r2, r6
    d8be:	f7fc ffff 	bl	a8c0 <memcpy>
    d8c2:	0029      	movs	r1, r5
    d8c4:	0038      	movs	r0, r7
    d8c6:	f7fd f81f 	bl	a908 <_free_r>
    d8ca:	e7e3      	b.n	d894 <_realloc_r+0x14>

0000d8cc <_read_r>:
    d8cc:	b570      	push	{r4, r5, r6, lr}
    d8ce:	0005      	movs	r5, r0
    d8d0:	0008      	movs	r0, r1
    d8d2:	0011      	movs	r1, r2
    d8d4:	2200      	movs	r2, #0
    d8d6:	4c06      	ldr	r4, [pc, #24]	; (d8f0 <_read_r+0x24>)
    d8d8:	6022      	str	r2, [r4, #0]
    d8da:	001a      	movs	r2, r3
    d8dc:	f7f9 fe8e 	bl	75fc <_read>
    d8e0:	1c43      	adds	r3, r0, #1
    d8e2:	d103      	bne.n	d8ec <_read_r+0x20>
    d8e4:	6823      	ldr	r3, [r4, #0]
    d8e6:	2b00      	cmp	r3, #0
    d8e8:	d000      	beq.n	d8ec <_read_r+0x20>
    d8ea:	602b      	str	r3, [r5, #0]
    d8ec:	bd70      	pop	{r4, r5, r6, pc}
    d8ee:	46c0      	nop			; (mov r8, r8)
    d8f0:	200007f8 	.word	0x200007f8

0000d8f4 <_malloc_usable_size_r>:
    d8f4:	1f0b      	subs	r3, r1, #4
    d8f6:	681b      	ldr	r3, [r3, #0]
    d8f8:	1f18      	subs	r0, r3, #4
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	da01      	bge.n	d902 <_malloc_usable_size_r+0xe>
    d8fe:	580b      	ldr	r3, [r1, r0]
    d900:	18c0      	adds	r0, r0, r3
    d902:	4770      	bx	lr

0000d904 <__gnu_thumb1_case_uqi>:
    d904:	b402      	push	{r1}
    d906:	4671      	mov	r1, lr
    d908:	0849      	lsrs	r1, r1, #1
    d90a:	0049      	lsls	r1, r1, #1
    d90c:	5c09      	ldrb	r1, [r1, r0]
    d90e:	0049      	lsls	r1, r1, #1
    d910:	448e      	add	lr, r1
    d912:	bc02      	pop	{r1}
    d914:	4770      	bx	lr
    d916:	46c0      	nop			; (mov r8, r8)

0000d918 <__udivsi3>:
    d918:	2200      	movs	r2, #0
    d91a:	0843      	lsrs	r3, r0, #1
    d91c:	428b      	cmp	r3, r1
    d91e:	d374      	bcc.n	da0a <__udivsi3+0xf2>
    d920:	0903      	lsrs	r3, r0, #4
    d922:	428b      	cmp	r3, r1
    d924:	d35f      	bcc.n	d9e6 <__udivsi3+0xce>
    d926:	0a03      	lsrs	r3, r0, #8
    d928:	428b      	cmp	r3, r1
    d92a:	d344      	bcc.n	d9b6 <__udivsi3+0x9e>
    d92c:	0b03      	lsrs	r3, r0, #12
    d92e:	428b      	cmp	r3, r1
    d930:	d328      	bcc.n	d984 <__udivsi3+0x6c>
    d932:	0c03      	lsrs	r3, r0, #16
    d934:	428b      	cmp	r3, r1
    d936:	d30d      	bcc.n	d954 <__udivsi3+0x3c>
    d938:	22ff      	movs	r2, #255	; 0xff
    d93a:	0209      	lsls	r1, r1, #8
    d93c:	ba12      	rev	r2, r2
    d93e:	0c03      	lsrs	r3, r0, #16
    d940:	428b      	cmp	r3, r1
    d942:	d302      	bcc.n	d94a <__udivsi3+0x32>
    d944:	1212      	asrs	r2, r2, #8
    d946:	0209      	lsls	r1, r1, #8
    d948:	d065      	beq.n	da16 <__udivsi3+0xfe>
    d94a:	0b03      	lsrs	r3, r0, #12
    d94c:	428b      	cmp	r3, r1
    d94e:	d319      	bcc.n	d984 <__udivsi3+0x6c>
    d950:	e000      	b.n	d954 <__udivsi3+0x3c>
    d952:	0a09      	lsrs	r1, r1, #8
    d954:	0bc3      	lsrs	r3, r0, #15
    d956:	428b      	cmp	r3, r1
    d958:	d301      	bcc.n	d95e <__udivsi3+0x46>
    d95a:	03cb      	lsls	r3, r1, #15
    d95c:	1ac0      	subs	r0, r0, r3
    d95e:	4152      	adcs	r2, r2
    d960:	0b83      	lsrs	r3, r0, #14
    d962:	428b      	cmp	r3, r1
    d964:	d301      	bcc.n	d96a <__udivsi3+0x52>
    d966:	038b      	lsls	r3, r1, #14
    d968:	1ac0      	subs	r0, r0, r3
    d96a:	4152      	adcs	r2, r2
    d96c:	0b43      	lsrs	r3, r0, #13
    d96e:	428b      	cmp	r3, r1
    d970:	d301      	bcc.n	d976 <__udivsi3+0x5e>
    d972:	034b      	lsls	r3, r1, #13
    d974:	1ac0      	subs	r0, r0, r3
    d976:	4152      	adcs	r2, r2
    d978:	0b03      	lsrs	r3, r0, #12
    d97a:	428b      	cmp	r3, r1
    d97c:	d301      	bcc.n	d982 <__udivsi3+0x6a>
    d97e:	030b      	lsls	r3, r1, #12
    d980:	1ac0      	subs	r0, r0, r3
    d982:	4152      	adcs	r2, r2
    d984:	0ac3      	lsrs	r3, r0, #11
    d986:	428b      	cmp	r3, r1
    d988:	d301      	bcc.n	d98e <__udivsi3+0x76>
    d98a:	02cb      	lsls	r3, r1, #11
    d98c:	1ac0      	subs	r0, r0, r3
    d98e:	4152      	adcs	r2, r2
    d990:	0a83      	lsrs	r3, r0, #10
    d992:	428b      	cmp	r3, r1
    d994:	d301      	bcc.n	d99a <__udivsi3+0x82>
    d996:	028b      	lsls	r3, r1, #10
    d998:	1ac0      	subs	r0, r0, r3
    d99a:	4152      	adcs	r2, r2
    d99c:	0a43      	lsrs	r3, r0, #9
    d99e:	428b      	cmp	r3, r1
    d9a0:	d301      	bcc.n	d9a6 <__udivsi3+0x8e>
    d9a2:	024b      	lsls	r3, r1, #9
    d9a4:	1ac0      	subs	r0, r0, r3
    d9a6:	4152      	adcs	r2, r2
    d9a8:	0a03      	lsrs	r3, r0, #8
    d9aa:	428b      	cmp	r3, r1
    d9ac:	d301      	bcc.n	d9b2 <__udivsi3+0x9a>
    d9ae:	020b      	lsls	r3, r1, #8
    d9b0:	1ac0      	subs	r0, r0, r3
    d9b2:	4152      	adcs	r2, r2
    d9b4:	d2cd      	bcs.n	d952 <__udivsi3+0x3a>
    d9b6:	09c3      	lsrs	r3, r0, #7
    d9b8:	428b      	cmp	r3, r1
    d9ba:	d301      	bcc.n	d9c0 <__udivsi3+0xa8>
    d9bc:	01cb      	lsls	r3, r1, #7
    d9be:	1ac0      	subs	r0, r0, r3
    d9c0:	4152      	adcs	r2, r2
    d9c2:	0983      	lsrs	r3, r0, #6
    d9c4:	428b      	cmp	r3, r1
    d9c6:	d301      	bcc.n	d9cc <__udivsi3+0xb4>
    d9c8:	018b      	lsls	r3, r1, #6
    d9ca:	1ac0      	subs	r0, r0, r3
    d9cc:	4152      	adcs	r2, r2
    d9ce:	0943      	lsrs	r3, r0, #5
    d9d0:	428b      	cmp	r3, r1
    d9d2:	d301      	bcc.n	d9d8 <__udivsi3+0xc0>
    d9d4:	014b      	lsls	r3, r1, #5
    d9d6:	1ac0      	subs	r0, r0, r3
    d9d8:	4152      	adcs	r2, r2
    d9da:	0903      	lsrs	r3, r0, #4
    d9dc:	428b      	cmp	r3, r1
    d9de:	d301      	bcc.n	d9e4 <__udivsi3+0xcc>
    d9e0:	010b      	lsls	r3, r1, #4
    d9e2:	1ac0      	subs	r0, r0, r3
    d9e4:	4152      	adcs	r2, r2
    d9e6:	08c3      	lsrs	r3, r0, #3
    d9e8:	428b      	cmp	r3, r1
    d9ea:	d301      	bcc.n	d9f0 <__udivsi3+0xd8>
    d9ec:	00cb      	lsls	r3, r1, #3
    d9ee:	1ac0      	subs	r0, r0, r3
    d9f0:	4152      	adcs	r2, r2
    d9f2:	0883      	lsrs	r3, r0, #2
    d9f4:	428b      	cmp	r3, r1
    d9f6:	d301      	bcc.n	d9fc <__udivsi3+0xe4>
    d9f8:	008b      	lsls	r3, r1, #2
    d9fa:	1ac0      	subs	r0, r0, r3
    d9fc:	4152      	adcs	r2, r2
    d9fe:	0843      	lsrs	r3, r0, #1
    da00:	428b      	cmp	r3, r1
    da02:	d301      	bcc.n	da08 <__udivsi3+0xf0>
    da04:	004b      	lsls	r3, r1, #1
    da06:	1ac0      	subs	r0, r0, r3
    da08:	4152      	adcs	r2, r2
    da0a:	1a41      	subs	r1, r0, r1
    da0c:	d200      	bcs.n	da10 <__udivsi3+0xf8>
    da0e:	4601      	mov	r1, r0
    da10:	4152      	adcs	r2, r2
    da12:	4610      	mov	r0, r2
    da14:	4770      	bx	lr
    da16:	e7ff      	b.n	da18 <__udivsi3+0x100>
    da18:	b501      	push	{r0, lr}
    da1a:	2000      	movs	r0, #0
    da1c:	f000 f8f0 	bl	dc00 <__aeabi_idiv0>
    da20:	bd02      	pop	{r1, pc}
    da22:	46c0      	nop			; (mov r8, r8)

0000da24 <__aeabi_uidivmod>:
    da24:	2900      	cmp	r1, #0
    da26:	d0f7      	beq.n	da18 <__udivsi3+0x100>
    da28:	e776      	b.n	d918 <__udivsi3>
    da2a:	4770      	bx	lr

0000da2c <__divsi3>:
    da2c:	4603      	mov	r3, r0
    da2e:	430b      	orrs	r3, r1
    da30:	d47f      	bmi.n	db32 <__divsi3+0x106>
    da32:	2200      	movs	r2, #0
    da34:	0843      	lsrs	r3, r0, #1
    da36:	428b      	cmp	r3, r1
    da38:	d374      	bcc.n	db24 <__divsi3+0xf8>
    da3a:	0903      	lsrs	r3, r0, #4
    da3c:	428b      	cmp	r3, r1
    da3e:	d35f      	bcc.n	db00 <__divsi3+0xd4>
    da40:	0a03      	lsrs	r3, r0, #8
    da42:	428b      	cmp	r3, r1
    da44:	d344      	bcc.n	dad0 <__divsi3+0xa4>
    da46:	0b03      	lsrs	r3, r0, #12
    da48:	428b      	cmp	r3, r1
    da4a:	d328      	bcc.n	da9e <__divsi3+0x72>
    da4c:	0c03      	lsrs	r3, r0, #16
    da4e:	428b      	cmp	r3, r1
    da50:	d30d      	bcc.n	da6e <__divsi3+0x42>
    da52:	22ff      	movs	r2, #255	; 0xff
    da54:	0209      	lsls	r1, r1, #8
    da56:	ba12      	rev	r2, r2
    da58:	0c03      	lsrs	r3, r0, #16
    da5a:	428b      	cmp	r3, r1
    da5c:	d302      	bcc.n	da64 <__divsi3+0x38>
    da5e:	1212      	asrs	r2, r2, #8
    da60:	0209      	lsls	r1, r1, #8
    da62:	d065      	beq.n	db30 <__divsi3+0x104>
    da64:	0b03      	lsrs	r3, r0, #12
    da66:	428b      	cmp	r3, r1
    da68:	d319      	bcc.n	da9e <__divsi3+0x72>
    da6a:	e000      	b.n	da6e <__divsi3+0x42>
    da6c:	0a09      	lsrs	r1, r1, #8
    da6e:	0bc3      	lsrs	r3, r0, #15
    da70:	428b      	cmp	r3, r1
    da72:	d301      	bcc.n	da78 <__divsi3+0x4c>
    da74:	03cb      	lsls	r3, r1, #15
    da76:	1ac0      	subs	r0, r0, r3
    da78:	4152      	adcs	r2, r2
    da7a:	0b83      	lsrs	r3, r0, #14
    da7c:	428b      	cmp	r3, r1
    da7e:	d301      	bcc.n	da84 <__divsi3+0x58>
    da80:	038b      	lsls	r3, r1, #14
    da82:	1ac0      	subs	r0, r0, r3
    da84:	4152      	adcs	r2, r2
    da86:	0b43      	lsrs	r3, r0, #13
    da88:	428b      	cmp	r3, r1
    da8a:	d301      	bcc.n	da90 <__divsi3+0x64>
    da8c:	034b      	lsls	r3, r1, #13
    da8e:	1ac0      	subs	r0, r0, r3
    da90:	4152      	adcs	r2, r2
    da92:	0b03      	lsrs	r3, r0, #12
    da94:	428b      	cmp	r3, r1
    da96:	d301      	bcc.n	da9c <__divsi3+0x70>
    da98:	030b      	lsls	r3, r1, #12
    da9a:	1ac0      	subs	r0, r0, r3
    da9c:	4152      	adcs	r2, r2
    da9e:	0ac3      	lsrs	r3, r0, #11
    daa0:	428b      	cmp	r3, r1
    daa2:	d301      	bcc.n	daa8 <__divsi3+0x7c>
    daa4:	02cb      	lsls	r3, r1, #11
    daa6:	1ac0      	subs	r0, r0, r3
    daa8:	4152      	adcs	r2, r2
    daaa:	0a83      	lsrs	r3, r0, #10
    daac:	428b      	cmp	r3, r1
    daae:	d301      	bcc.n	dab4 <__divsi3+0x88>
    dab0:	028b      	lsls	r3, r1, #10
    dab2:	1ac0      	subs	r0, r0, r3
    dab4:	4152      	adcs	r2, r2
    dab6:	0a43      	lsrs	r3, r0, #9
    dab8:	428b      	cmp	r3, r1
    daba:	d301      	bcc.n	dac0 <__divsi3+0x94>
    dabc:	024b      	lsls	r3, r1, #9
    dabe:	1ac0      	subs	r0, r0, r3
    dac0:	4152      	adcs	r2, r2
    dac2:	0a03      	lsrs	r3, r0, #8
    dac4:	428b      	cmp	r3, r1
    dac6:	d301      	bcc.n	dacc <__divsi3+0xa0>
    dac8:	020b      	lsls	r3, r1, #8
    daca:	1ac0      	subs	r0, r0, r3
    dacc:	4152      	adcs	r2, r2
    dace:	d2cd      	bcs.n	da6c <__divsi3+0x40>
    dad0:	09c3      	lsrs	r3, r0, #7
    dad2:	428b      	cmp	r3, r1
    dad4:	d301      	bcc.n	dada <__divsi3+0xae>
    dad6:	01cb      	lsls	r3, r1, #7
    dad8:	1ac0      	subs	r0, r0, r3
    dada:	4152      	adcs	r2, r2
    dadc:	0983      	lsrs	r3, r0, #6
    dade:	428b      	cmp	r3, r1
    dae0:	d301      	bcc.n	dae6 <__divsi3+0xba>
    dae2:	018b      	lsls	r3, r1, #6
    dae4:	1ac0      	subs	r0, r0, r3
    dae6:	4152      	adcs	r2, r2
    dae8:	0943      	lsrs	r3, r0, #5
    daea:	428b      	cmp	r3, r1
    daec:	d301      	bcc.n	daf2 <__divsi3+0xc6>
    daee:	014b      	lsls	r3, r1, #5
    daf0:	1ac0      	subs	r0, r0, r3
    daf2:	4152      	adcs	r2, r2
    daf4:	0903      	lsrs	r3, r0, #4
    daf6:	428b      	cmp	r3, r1
    daf8:	d301      	bcc.n	dafe <__divsi3+0xd2>
    dafa:	010b      	lsls	r3, r1, #4
    dafc:	1ac0      	subs	r0, r0, r3
    dafe:	4152      	adcs	r2, r2
    db00:	08c3      	lsrs	r3, r0, #3
    db02:	428b      	cmp	r3, r1
    db04:	d301      	bcc.n	db0a <__divsi3+0xde>
    db06:	00cb      	lsls	r3, r1, #3
    db08:	1ac0      	subs	r0, r0, r3
    db0a:	4152      	adcs	r2, r2
    db0c:	0883      	lsrs	r3, r0, #2
    db0e:	428b      	cmp	r3, r1
    db10:	d301      	bcc.n	db16 <__divsi3+0xea>
    db12:	008b      	lsls	r3, r1, #2
    db14:	1ac0      	subs	r0, r0, r3
    db16:	4152      	adcs	r2, r2
    db18:	0843      	lsrs	r3, r0, #1
    db1a:	428b      	cmp	r3, r1
    db1c:	d301      	bcc.n	db22 <__divsi3+0xf6>
    db1e:	004b      	lsls	r3, r1, #1
    db20:	1ac0      	subs	r0, r0, r3
    db22:	4152      	adcs	r2, r2
    db24:	1a41      	subs	r1, r0, r1
    db26:	d200      	bcs.n	db2a <__divsi3+0xfe>
    db28:	4601      	mov	r1, r0
    db2a:	4152      	adcs	r2, r2
    db2c:	4610      	mov	r0, r2
    db2e:	4770      	bx	lr
    db30:	e05d      	b.n	dbee <__divsi3+0x1c2>
    db32:	0fca      	lsrs	r2, r1, #31
    db34:	d000      	beq.n	db38 <__divsi3+0x10c>
    db36:	4249      	negs	r1, r1
    db38:	1003      	asrs	r3, r0, #32
    db3a:	d300      	bcc.n	db3e <__divsi3+0x112>
    db3c:	4240      	negs	r0, r0
    db3e:	4053      	eors	r3, r2
    db40:	2200      	movs	r2, #0
    db42:	469c      	mov	ip, r3
    db44:	0903      	lsrs	r3, r0, #4
    db46:	428b      	cmp	r3, r1
    db48:	d32d      	bcc.n	dba6 <__divsi3+0x17a>
    db4a:	0a03      	lsrs	r3, r0, #8
    db4c:	428b      	cmp	r3, r1
    db4e:	d312      	bcc.n	db76 <__divsi3+0x14a>
    db50:	22fc      	movs	r2, #252	; 0xfc
    db52:	0189      	lsls	r1, r1, #6
    db54:	ba12      	rev	r2, r2
    db56:	0a03      	lsrs	r3, r0, #8
    db58:	428b      	cmp	r3, r1
    db5a:	d30c      	bcc.n	db76 <__divsi3+0x14a>
    db5c:	0189      	lsls	r1, r1, #6
    db5e:	1192      	asrs	r2, r2, #6
    db60:	428b      	cmp	r3, r1
    db62:	d308      	bcc.n	db76 <__divsi3+0x14a>
    db64:	0189      	lsls	r1, r1, #6
    db66:	1192      	asrs	r2, r2, #6
    db68:	428b      	cmp	r3, r1
    db6a:	d304      	bcc.n	db76 <__divsi3+0x14a>
    db6c:	0189      	lsls	r1, r1, #6
    db6e:	d03a      	beq.n	dbe6 <__divsi3+0x1ba>
    db70:	1192      	asrs	r2, r2, #6
    db72:	e000      	b.n	db76 <__divsi3+0x14a>
    db74:	0989      	lsrs	r1, r1, #6
    db76:	09c3      	lsrs	r3, r0, #7
    db78:	428b      	cmp	r3, r1
    db7a:	d301      	bcc.n	db80 <__divsi3+0x154>
    db7c:	01cb      	lsls	r3, r1, #7
    db7e:	1ac0      	subs	r0, r0, r3
    db80:	4152      	adcs	r2, r2
    db82:	0983      	lsrs	r3, r0, #6
    db84:	428b      	cmp	r3, r1
    db86:	d301      	bcc.n	db8c <__divsi3+0x160>
    db88:	018b      	lsls	r3, r1, #6
    db8a:	1ac0      	subs	r0, r0, r3
    db8c:	4152      	adcs	r2, r2
    db8e:	0943      	lsrs	r3, r0, #5
    db90:	428b      	cmp	r3, r1
    db92:	d301      	bcc.n	db98 <__divsi3+0x16c>
    db94:	014b      	lsls	r3, r1, #5
    db96:	1ac0      	subs	r0, r0, r3
    db98:	4152      	adcs	r2, r2
    db9a:	0903      	lsrs	r3, r0, #4
    db9c:	428b      	cmp	r3, r1
    db9e:	d301      	bcc.n	dba4 <__divsi3+0x178>
    dba0:	010b      	lsls	r3, r1, #4
    dba2:	1ac0      	subs	r0, r0, r3
    dba4:	4152      	adcs	r2, r2
    dba6:	08c3      	lsrs	r3, r0, #3
    dba8:	428b      	cmp	r3, r1
    dbaa:	d301      	bcc.n	dbb0 <__divsi3+0x184>
    dbac:	00cb      	lsls	r3, r1, #3
    dbae:	1ac0      	subs	r0, r0, r3
    dbb0:	4152      	adcs	r2, r2
    dbb2:	0883      	lsrs	r3, r0, #2
    dbb4:	428b      	cmp	r3, r1
    dbb6:	d301      	bcc.n	dbbc <__divsi3+0x190>
    dbb8:	008b      	lsls	r3, r1, #2
    dbba:	1ac0      	subs	r0, r0, r3
    dbbc:	4152      	adcs	r2, r2
    dbbe:	d2d9      	bcs.n	db74 <__divsi3+0x148>
    dbc0:	0843      	lsrs	r3, r0, #1
    dbc2:	428b      	cmp	r3, r1
    dbc4:	d301      	bcc.n	dbca <__divsi3+0x19e>
    dbc6:	004b      	lsls	r3, r1, #1
    dbc8:	1ac0      	subs	r0, r0, r3
    dbca:	4152      	adcs	r2, r2
    dbcc:	1a41      	subs	r1, r0, r1
    dbce:	d200      	bcs.n	dbd2 <__divsi3+0x1a6>
    dbd0:	4601      	mov	r1, r0
    dbd2:	4663      	mov	r3, ip
    dbd4:	4152      	adcs	r2, r2
    dbd6:	105b      	asrs	r3, r3, #1
    dbd8:	4610      	mov	r0, r2
    dbda:	d301      	bcc.n	dbe0 <__divsi3+0x1b4>
    dbdc:	4240      	negs	r0, r0
    dbde:	2b00      	cmp	r3, #0
    dbe0:	d500      	bpl.n	dbe4 <__divsi3+0x1b8>
    dbe2:	4249      	negs	r1, r1
    dbe4:	4770      	bx	lr
    dbe6:	4663      	mov	r3, ip
    dbe8:	105b      	asrs	r3, r3, #1
    dbea:	d300      	bcc.n	dbee <__divsi3+0x1c2>
    dbec:	4240      	negs	r0, r0
    dbee:	b501      	push	{r0, lr}
    dbf0:	2000      	movs	r0, #0
    dbf2:	f000 f805 	bl	dc00 <__aeabi_idiv0>
    dbf6:	bd02      	pop	{r1, pc}

0000dbf8 <__aeabi_idivmod>:
    dbf8:	2900      	cmp	r1, #0
    dbfa:	d0f8      	beq.n	dbee <__divsi3+0x1c2>
    dbfc:	e716      	b.n	da2c <__divsi3>
    dbfe:	4770      	bx	lr

0000dc00 <__aeabi_idiv0>:
    dc00:	4770      	bx	lr
    dc02:	46c0      	nop			; (mov r8, r8)

0000dc04 <__aeabi_cdrcmple>:
    dc04:	4684      	mov	ip, r0
    dc06:	1c10      	adds	r0, r2, #0
    dc08:	4662      	mov	r2, ip
    dc0a:	468c      	mov	ip, r1
    dc0c:	1c19      	adds	r1, r3, #0
    dc0e:	4663      	mov	r3, ip
    dc10:	e000      	b.n	dc14 <__aeabi_cdcmpeq>
    dc12:	46c0      	nop			; (mov r8, r8)

0000dc14 <__aeabi_cdcmpeq>:
    dc14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    dc16:	f001 f9f7 	bl	f008 <__ledf2>
    dc1a:	2800      	cmp	r0, #0
    dc1c:	d401      	bmi.n	dc22 <__aeabi_cdcmpeq+0xe>
    dc1e:	2100      	movs	r1, #0
    dc20:	42c8      	cmn	r0, r1
    dc22:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000dc24 <__aeabi_dcmpeq>:
    dc24:	b510      	push	{r4, lr}
    dc26:	f001 f951 	bl	eecc <__eqdf2>
    dc2a:	4240      	negs	r0, r0
    dc2c:	3001      	adds	r0, #1
    dc2e:	bd10      	pop	{r4, pc}

0000dc30 <__aeabi_dcmplt>:
    dc30:	b510      	push	{r4, lr}
    dc32:	f001 f9e9 	bl	f008 <__ledf2>
    dc36:	2800      	cmp	r0, #0
    dc38:	db01      	blt.n	dc3e <__aeabi_dcmplt+0xe>
    dc3a:	2000      	movs	r0, #0
    dc3c:	bd10      	pop	{r4, pc}
    dc3e:	2001      	movs	r0, #1
    dc40:	bd10      	pop	{r4, pc}
    dc42:	46c0      	nop			; (mov r8, r8)

0000dc44 <__aeabi_dcmple>:
    dc44:	b510      	push	{r4, lr}
    dc46:	f001 f9df 	bl	f008 <__ledf2>
    dc4a:	2800      	cmp	r0, #0
    dc4c:	dd01      	ble.n	dc52 <__aeabi_dcmple+0xe>
    dc4e:	2000      	movs	r0, #0
    dc50:	bd10      	pop	{r4, pc}
    dc52:	2001      	movs	r0, #1
    dc54:	bd10      	pop	{r4, pc}
    dc56:	46c0      	nop			; (mov r8, r8)

0000dc58 <__aeabi_dcmpgt>:
    dc58:	b510      	push	{r4, lr}
    dc5a:	f001 f971 	bl	ef40 <__gedf2>
    dc5e:	2800      	cmp	r0, #0
    dc60:	dc01      	bgt.n	dc66 <__aeabi_dcmpgt+0xe>
    dc62:	2000      	movs	r0, #0
    dc64:	bd10      	pop	{r4, pc}
    dc66:	2001      	movs	r0, #1
    dc68:	bd10      	pop	{r4, pc}
    dc6a:	46c0      	nop			; (mov r8, r8)

0000dc6c <__aeabi_dcmpge>:
    dc6c:	b510      	push	{r4, lr}
    dc6e:	f001 f967 	bl	ef40 <__gedf2>
    dc72:	2800      	cmp	r0, #0
    dc74:	da01      	bge.n	dc7a <__aeabi_dcmpge+0xe>
    dc76:	2000      	movs	r0, #0
    dc78:	bd10      	pop	{r4, pc}
    dc7a:	2001      	movs	r0, #1
    dc7c:	bd10      	pop	{r4, pc}
    dc7e:	46c0      	nop			; (mov r8, r8)

0000dc80 <__aeabi_lmul>:
    dc80:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc82:	46ce      	mov	lr, r9
    dc84:	4647      	mov	r7, r8
    dc86:	0415      	lsls	r5, r2, #16
    dc88:	0c2d      	lsrs	r5, r5, #16
    dc8a:	002e      	movs	r6, r5
    dc8c:	b580      	push	{r7, lr}
    dc8e:	0407      	lsls	r7, r0, #16
    dc90:	0c14      	lsrs	r4, r2, #16
    dc92:	0c3f      	lsrs	r7, r7, #16
    dc94:	4699      	mov	r9, r3
    dc96:	0c03      	lsrs	r3, r0, #16
    dc98:	437e      	muls	r6, r7
    dc9a:	435d      	muls	r5, r3
    dc9c:	4367      	muls	r7, r4
    dc9e:	4363      	muls	r3, r4
    dca0:	197f      	adds	r7, r7, r5
    dca2:	0c34      	lsrs	r4, r6, #16
    dca4:	19e4      	adds	r4, r4, r7
    dca6:	469c      	mov	ip, r3
    dca8:	42a5      	cmp	r5, r4
    dcaa:	d903      	bls.n	dcb4 <__aeabi_lmul+0x34>
    dcac:	2380      	movs	r3, #128	; 0x80
    dcae:	025b      	lsls	r3, r3, #9
    dcb0:	4698      	mov	r8, r3
    dcb2:	44c4      	add	ip, r8
    dcb4:	464b      	mov	r3, r9
    dcb6:	4351      	muls	r1, r2
    dcb8:	4343      	muls	r3, r0
    dcba:	0436      	lsls	r6, r6, #16
    dcbc:	0c36      	lsrs	r6, r6, #16
    dcbe:	0c25      	lsrs	r5, r4, #16
    dcc0:	0424      	lsls	r4, r4, #16
    dcc2:	4465      	add	r5, ip
    dcc4:	19a4      	adds	r4, r4, r6
    dcc6:	1859      	adds	r1, r3, r1
    dcc8:	1949      	adds	r1, r1, r5
    dcca:	0020      	movs	r0, r4
    dccc:	bc0c      	pop	{r2, r3}
    dcce:	4690      	mov	r8, r2
    dcd0:	4699      	mov	r9, r3
    dcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dcd4 <__aeabi_fdiv>:
    dcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcd6:	4657      	mov	r7, sl
    dcd8:	464e      	mov	r6, r9
    dcda:	46de      	mov	lr, fp
    dcdc:	4645      	mov	r5, r8
    dcde:	b5e0      	push	{r5, r6, r7, lr}
    dce0:	0244      	lsls	r4, r0, #9
    dce2:	0043      	lsls	r3, r0, #1
    dce4:	0fc6      	lsrs	r6, r0, #31
    dce6:	b083      	sub	sp, #12
    dce8:	1c0f      	adds	r7, r1, #0
    dcea:	0a64      	lsrs	r4, r4, #9
    dcec:	0e1b      	lsrs	r3, r3, #24
    dcee:	46b2      	mov	sl, r6
    dcf0:	d053      	beq.n	dd9a <__aeabi_fdiv+0xc6>
    dcf2:	2bff      	cmp	r3, #255	; 0xff
    dcf4:	d027      	beq.n	dd46 <__aeabi_fdiv+0x72>
    dcf6:	2280      	movs	r2, #128	; 0x80
    dcf8:	00e4      	lsls	r4, r4, #3
    dcfa:	04d2      	lsls	r2, r2, #19
    dcfc:	4314      	orrs	r4, r2
    dcfe:	227f      	movs	r2, #127	; 0x7f
    dd00:	4252      	negs	r2, r2
    dd02:	4690      	mov	r8, r2
    dd04:	4498      	add	r8, r3
    dd06:	2300      	movs	r3, #0
    dd08:	4699      	mov	r9, r3
    dd0a:	469b      	mov	fp, r3
    dd0c:	027d      	lsls	r5, r7, #9
    dd0e:	0078      	lsls	r0, r7, #1
    dd10:	0ffb      	lsrs	r3, r7, #31
    dd12:	0a6d      	lsrs	r5, r5, #9
    dd14:	0e00      	lsrs	r0, r0, #24
    dd16:	9300      	str	r3, [sp, #0]
    dd18:	d024      	beq.n	dd64 <__aeabi_fdiv+0x90>
    dd1a:	28ff      	cmp	r0, #255	; 0xff
    dd1c:	d046      	beq.n	ddac <__aeabi_fdiv+0xd8>
    dd1e:	2380      	movs	r3, #128	; 0x80
    dd20:	2100      	movs	r1, #0
    dd22:	00ed      	lsls	r5, r5, #3
    dd24:	04db      	lsls	r3, r3, #19
    dd26:	431d      	orrs	r5, r3
    dd28:	387f      	subs	r0, #127	; 0x7f
    dd2a:	4647      	mov	r7, r8
    dd2c:	1a38      	subs	r0, r7, r0
    dd2e:	464f      	mov	r7, r9
    dd30:	430f      	orrs	r7, r1
    dd32:	00bf      	lsls	r7, r7, #2
    dd34:	46b9      	mov	r9, r7
    dd36:	0033      	movs	r3, r6
    dd38:	9a00      	ldr	r2, [sp, #0]
    dd3a:	4f87      	ldr	r7, [pc, #540]	; (df58 <__aeabi_fdiv+0x284>)
    dd3c:	4053      	eors	r3, r2
    dd3e:	464a      	mov	r2, r9
    dd40:	58ba      	ldr	r2, [r7, r2]
    dd42:	9301      	str	r3, [sp, #4]
    dd44:	4697      	mov	pc, r2
    dd46:	2c00      	cmp	r4, #0
    dd48:	d14e      	bne.n	dde8 <__aeabi_fdiv+0x114>
    dd4a:	2308      	movs	r3, #8
    dd4c:	4699      	mov	r9, r3
    dd4e:	33f7      	adds	r3, #247	; 0xf7
    dd50:	4698      	mov	r8, r3
    dd52:	3bfd      	subs	r3, #253	; 0xfd
    dd54:	469b      	mov	fp, r3
    dd56:	027d      	lsls	r5, r7, #9
    dd58:	0078      	lsls	r0, r7, #1
    dd5a:	0ffb      	lsrs	r3, r7, #31
    dd5c:	0a6d      	lsrs	r5, r5, #9
    dd5e:	0e00      	lsrs	r0, r0, #24
    dd60:	9300      	str	r3, [sp, #0]
    dd62:	d1da      	bne.n	dd1a <__aeabi_fdiv+0x46>
    dd64:	2d00      	cmp	r5, #0
    dd66:	d126      	bne.n	ddb6 <__aeabi_fdiv+0xe2>
    dd68:	2000      	movs	r0, #0
    dd6a:	2101      	movs	r1, #1
    dd6c:	0033      	movs	r3, r6
    dd6e:	9a00      	ldr	r2, [sp, #0]
    dd70:	4f7a      	ldr	r7, [pc, #488]	; (df5c <__aeabi_fdiv+0x288>)
    dd72:	4053      	eors	r3, r2
    dd74:	4642      	mov	r2, r8
    dd76:	1a10      	subs	r0, r2, r0
    dd78:	464a      	mov	r2, r9
    dd7a:	430a      	orrs	r2, r1
    dd7c:	0092      	lsls	r2, r2, #2
    dd7e:	58ba      	ldr	r2, [r7, r2]
    dd80:	001d      	movs	r5, r3
    dd82:	4697      	mov	pc, r2
    dd84:	9b00      	ldr	r3, [sp, #0]
    dd86:	002c      	movs	r4, r5
    dd88:	469a      	mov	sl, r3
    dd8a:	468b      	mov	fp, r1
    dd8c:	465b      	mov	r3, fp
    dd8e:	2b02      	cmp	r3, #2
    dd90:	d131      	bne.n	ddf6 <__aeabi_fdiv+0x122>
    dd92:	4653      	mov	r3, sl
    dd94:	21ff      	movs	r1, #255	; 0xff
    dd96:	2400      	movs	r4, #0
    dd98:	e038      	b.n	de0c <__aeabi_fdiv+0x138>
    dd9a:	2c00      	cmp	r4, #0
    dd9c:	d117      	bne.n	ddce <__aeabi_fdiv+0xfa>
    dd9e:	2304      	movs	r3, #4
    dda0:	4699      	mov	r9, r3
    dda2:	2300      	movs	r3, #0
    dda4:	4698      	mov	r8, r3
    dda6:	3301      	adds	r3, #1
    dda8:	469b      	mov	fp, r3
    ddaa:	e7af      	b.n	dd0c <__aeabi_fdiv+0x38>
    ddac:	20ff      	movs	r0, #255	; 0xff
    ddae:	2d00      	cmp	r5, #0
    ddb0:	d10b      	bne.n	ddca <__aeabi_fdiv+0xf6>
    ddb2:	2102      	movs	r1, #2
    ddb4:	e7da      	b.n	dd6c <__aeabi_fdiv+0x98>
    ddb6:	0028      	movs	r0, r5
    ddb8:	f002 f8c8 	bl	ff4c <__clzsi2>
    ddbc:	1f43      	subs	r3, r0, #5
    ddbe:	409d      	lsls	r5, r3
    ddc0:	2376      	movs	r3, #118	; 0x76
    ddc2:	425b      	negs	r3, r3
    ddc4:	1a18      	subs	r0, r3, r0
    ddc6:	2100      	movs	r1, #0
    ddc8:	e7af      	b.n	dd2a <__aeabi_fdiv+0x56>
    ddca:	2103      	movs	r1, #3
    ddcc:	e7ad      	b.n	dd2a <__aeabi_fdiv+0x56>
    ddce:	0020      	movs	r0, r4
    ddd0:	f002 f8bc 	bl	ff4c <__clzsi2>
    ddd4:	1f43      	subs	r3, r0, #5
    ddd6:	409c      	lsls	r4, r3
    ddd8:	2376      	movs	r3, #118	; 0x76
    ddda:	425b      	negs	r3, r3
    dddc:	1a1b      	subs	r3, r3, r0
    ddde:	4698      	mov	r8, r3
    dde0:	2300      	movs	r3, #0
    dde2:	4699      	mov	r9, r3
    dde4:	469b      	mov	fp, r3
    dde6:	e791      	b.n	dd0c <__aeabi_fdiv+0x38>
    dde8:	230c      	movs	r3, #12
    ddea:	4699      	mov	r9, r3
    ddec:	33f3      	adds	r3, #243	; 0xf3
    ddee:	4698      	mov	r8, r3
    ddf0:	3bfc      	subs	r3, #252	; 0xfc
    ddf2:	469b      	mov	fp, r3
    ddf4:	e78a      	b.n	dd0c <__aeabi_fdiv+0x38>
    ddf6:	2b03      	cmp	r3, #3
    ddf8:	d100      	bne.n	ddfc <__aeabi_fdiv+0x128>
    ddfa:	e0a5      	b.n	df48 <__aeabi_fdiv+0x274>
    ddfc:	4655      	mov	r5, sl
    ddfe:	2b01      	cmp	r3, #1
    de00:	d000      	beq.n	de04 <__aeabi_fdiv+0x130>
    de02:	e081      	b.n	df08 <__aeabi_fdiv+0x234>
    de04:	2301      	movs	r3, #1
    de06:	2100      	movs	r1, #0
    de08:	2400      	movs	r4, #0
    de0a:	402b      	ands	r3, r5
    de0c:	0264      	lsls	r4, r4, #9
    de0e:	05c9      	lsls	r1, r1, #23
    de10:	0a60      	lsrs	r0, r4, #9
    de12:	07db      	lsls	r3, r3, #31
    de14:	4308      	orrs	r0, r1
    de16:	4318      	orrs	r0, r3
    de18:	b003      	add	sp, #12
    de1a:	bc3c      	pop	{r2, r3, r4, r5}
    de1c:	4690      	mov	r8, r2
    de1e:	4699      	mov	r9, r3
    de20:	46a2      	mov	sl, r4
    de22:	46ab      	mov	fp, r5
    de24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de26:	2480      	movs	r4, #128	; 0x80
    de28:	2300      	movs	r3, #0
    de2a:	03e4      	lsls	r4, r4, #15
    de2c:	21ff      	movs	r1, #255	; 0xff
    de2e:	e7ed      	b.n	de0c <__aeabi_fdiv+0x138>
    de30:	21ff      	movs	r1, #255	; 0xff
    de32:	2400      	movs	r4, #0
    de34:	e7ea      	b.n	de0c <__aeabi_fdiv+0x138>
    de36:	2301      	movs	r3, #1
    de38:	1a59      	subs	r1, r3, r1
    de3a:	291b      	cmp	r1, #27
    de3c:	dd66      	ble.n	df0c <__aeabi_fdiv+0x238>
    de3e:	9a01      	ldr	r2, [sp, #4]
    de40:	4013      	ands	r3, r2
    de42:	2100      	movs	r1, #0
    de44:	2400      	movs	r4, #0
    de46:	e7e1      	b.n	de0c <__aeabi_fdiv+0x138>
    de48:	2380      	movs	r3, #128	; 0x80
    de4a:	03db      	lsls	r3, r3, #15
    de4c:	421c      	tst	r4, r3
    de4e:	d038      	beq.n	dec2 <__aeabi_fdiv+0x1ee>
    de50:	421d      	tst	r5, r3
    de52:	d051      	beq.n	def8 <__aeabi_fdiv+0x224>
    de54:	431c      	orrs	r4, r3
    de56:	0264      	lsls	r4, r4, #9
    de58:	0a64      	lsrs	r4, r4, #9
    de5a:	0033      	movs	r3, r6
    de5c:	21ff      	movs	r1, #255	; 0xff
    de5e:	e7d5      	b.n	de0c <__aeabi_fdiv+0x138>
    de60:	0163      	lsls	r3, r4, #5
    de62:	016c      	lsls	r4, r5, #5
    de64:	42a3      	cmp	r3, r4
    de66:	d23b      	bcs.n	dee0 <__aeabi_fdiv+0x20c>
    de68:	261b      	movs	r6, #27
    de6a:	2100      	movs	r1, #0
    de6c:	3801      	subs	r0, #1
    de6e:	2501      	movs	r5, #1
    de70:	001f      	movs	r7, r3
    de72:	0049      	lsls	r1, r1, #1
    de74:	005b      	lsls	r3, r3, #1
    de76:	2f00      	cmp	r7, #0
    de78:	db01      	blt.n	de7e <__aeabi_fdiv+0x1aa>
    de7a:	429c      	cmp	r4, r3
    de7c:	d801      	bhi.n	de82 <__aeabi_fdiv+0x1ae>
    de7e:	1b1b      	subs	r3, r3, r4
    de80:	4329      	orrs	r1, r5
    de82:	3e01      	subs	r6, #1
    de84:	2e00      	cmp	r6, #0
    de86:	d1f3      	bne.n	de70 <__aeabi_fdiv+0x19c>
    de88:	001c      	movs	r4, r3
    de8a:	1e63      	subs	r3, r4, #1
    de8c:	419c      	sbcs	r4, r3
    de8e:	430c      	orrs	r4, r1
    de90:	0001      	movs	r1, r0
    de92:	317f      	adds	r1, #127	; 0x7f
    de94:	2900      	cmp	r1, #0
    de96:	ddce      	ble.n	de36 <__aeabi_fdiv+0x162>
    de98:	0763      	lsls	r3, r4, #29
    de9a:	d004      	beq.n	dea6 <__aeabi_fdiv+0x1d2>
    de9c:	230f      	movs	r3, #15
    de9e:	4023      	ands	r3, r4
    dea0:	2b04      	cmp	r3, #4
    dea2:	d000      	beq.n	dea6 <__aeabi_fdiv+0x1d2>
    dea4:	3404      	adds	r4, #4
    dea6:	0123      	lsls	r3, r4, #4
    dea8:	d503      	bpl.n	deb2 <__aeabi_fdiv+0x1de>
    deaa:	0001      	movs	r1, r0
    deac:	4b2c      	ldr	r3, [pc, #176]	; (df60 <__aeabi_fdiv+0x28c>)
    deae:	3180      	adds	r1, #128	; 0x80
    deb0:	401c      	ands	r4, r3
    deb2:	29fe      	cmp	r1, #254	; 0xfe
    deb4:	dd0d      	ble.n	ded2 <__aeabi_fdiv+0x1fe>
    deb6:	2301      	movs	r3, #1
    deb8:	9a01      	ldr	r2, [sp, #4]
    deba:	21ff      	movs	r1, #255	; 0xff
    debc:	4013      	ands	r3, r2
    debe:	2400      	movs	r4, #0
    dec0:	e7a4      	b.n	de0c <__aeabi_fdiv+0x138>
    dec2:	2380      	movs	r3, #128	; 0x80
    dec4:	03db      	lsls	r3, r3, #15
    dec6:	431c      	orrs	r4, r3
    dec8:	0264      	lsls	r4, r4, #9
    deca:	0a64      	lsrs	r4, r4, #9
    decc:	0033      	movs	r3, r6
    dece:	21ff      	movs	r1, #255	; 0xff
    ded0:	e79c      	b.n	de0c <__aeabi_fdiv+0x138>
    ded2:	2301      	movs	r3, #1
    ded4:	9a01      	ldr	r2, [sp, #4]
    ded6:	01a4      	lsls	r4, r4, #6
    ded8:	0a64      	lsrs	r4, r4, #9
    deda:	b2c9      	uxtb	r1, r1
    dedc:	4013      	ands	r3, r2
    dede:	e795      	b.n	de0c <__aeabi_fdiv+0x138>
    dee0:	1b1b      	subs	r3, r3, r4
    dee2:	261a      	movs	r6, #26
    dee4:	2101      	movs	r1, #1
    dee6:	e7c2      	b.n	de6e <__aeabi_fdiv+0x19a>
    dee8:	9b00      	ldr	r3, [sp, #0]
    deea:	468b      	mov	fp, r1
    deec:	469a      	mov	sl, r3
    deee:	2400      	movs	r4, #0
    def0:	e74c      	b.n	dd8c <__aeabi_fdiv+0xb8>
    def2:	0263      	lsls	r3, r4, #9
    def4:	d5e5      	bpl.n	dec2 <__aeabi_fdiv+0x1ee>
    def6:	2500      	movs	r5, #0
    def8:	2480      	movs	r4, #128	; 0x80
    defa:	03e4      	lsls	r4, r4, #15
    defc:	432c      	orrs	r4, r5
    defe:	0264      	lsls	r4, r4, #9
    df00:	0a64      	lsrs	r4, r4, #9
    df02:	9b00      	ldr	r3, [sp, #0]
    df04:	21ff      	movs	r1, #255	; 0xff
    df06:	e781      	b.n	de0c <__aeabi_fdiv+0x138>
    df08:	9501      	str	r5, [sp, #4]
    df0a:	e7c1      	b.n	de90 <__aeabi_fdiv+0x1bc>
    df0c:	0023      	movs	r3, r4
    df0e:	2020      	movs	r0, #32
    df10:	40cb      	lsrs	r3, r1
    df12:	1a41      	subs	r1, r0, r1
    df14:	408c      	lsls	r4, r1
    df16:	1e61      	subs	r1, r4, #1
    df18:	418c      	sbcs	r4, r1
    df1a:	431c      	orrs	r4, r3
    df1c:	0763      	lsls	r3, r4, #29
    df1e:	d004      	beq.n	df2a <__aeabi_fdiv+0x256>
    df20:	230f      	movs	r3, #15
    df22:	4023      	ands	r3, r4
    df24:	2b04      	cmp	r3, #4
    df26:	d000      	beq.n	df2a <__aeabi_fdiv+0x256>
    df28:	3404      	adds	r4, #4
    df2a:	0163      	lsls	r3, r4, #5
    df2c:	d505      	bpl.n	df3a <__aeabi_fdiv+0x266>
    df2e:	2301      	movs	r3, #1
    df30:	9a01      	ldr	r2, [sp, #4]
    df32:	2101      	movs	r1, #1
    df34:	4013      	ands	r3, r2
    df36:	2400      	movs	r4, #0
    df38:	e768      	b.n	de0c <__aeabi_fdiv+0x138>
    df3a:	2301      	movs	r3, #1
    df3c:	9a01      	ldr	r2, [sp, #4]
    df3e:	01a4      	lsls	r4, r4, #6
    df40:	0a64      	lsrs	r4, r4, #9
    df42:	4013      	ands	r3, r2
    df44:	2100      	movs	r1, #0
    df46:	e761      	b.n	de0c <__aeabi_fdiv+0x138>
    df48:	2380      	movs	r3, #128	; 0x80
    df4a:	03db      	lsls	r3, r3, #15
    df4c:	431c      	orrs	r4, r3
    df4e:	0264      	lsls	r4, r4, #9
    df50:	0a64      	lsrs	r4, r4, #9
    df52:	4653      	mov	r3, sl
    df54:	21ff      	movs	r1, #255	; 0xff
    df56:	e759      	b.n	de0c <__aeabi_fdiv+0x138>
    df58:	00012940 	.word	0x00012940
    df5c:	00012980 	.word	0x00012980
    df60:	f7ffffff 	.word	0xf7ffffff

0000df64 <__aeabi_fmul>:
    df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df66:	4657      	mov	r7, sl
    df68:	464e      	mov	r6, r9
    df6a:	4645      	mov	r5, r8
    df6c:	46de      	mov	lr, fp
    df6e:	b5e0      	push	{r5, r6, r7, lr}
    df70:	0247      	lsls	r7, r0, #9
    df72:	0046      	lsls	r6, r0, #1
    df74:	4688      	mov	r8, r1
    df76:	0a7f      	lsrs	r7, r7, #9
    df78:	0e36      	lsrs	r6, r6, #24
    df7a:	0fc4      	lsrs	r4, r0, #31
    df7c:	2e00      	cmp	r6, #0
    df7e:	d047      	beq.n	e010 <__aeabi_fmul+0xac>
    df80:	2eff      	cmp	r6, #255	; 0xff
    df82:	d024      	beq.n	dfce <__aeabi_fmul+0x6a>
    df84:	00fb      	lsls	r3, r7, #3
    df86:	2780      	movs	r7, #128	; 0x80
    df88:	04ff      	lsls	r7, r7, #19
    df8a:	431f      	orrs	r7, r3
    df8c:	2300      	movs	r3, #0
    df8e:	4699      	mov	r9, r3
    df90:	469a      	mov	sl, r3
    df92:	3e7f      	subs	r6, #127	; 0x7f
    df94:	4643      	mov	r3, r8
    df96:	025d      	lsls	r5, r3, #9
    df98:	0058      	lsls	r0, r3, #1
    df9a:	0fdb      	lsrs	r3, r3, #31
    df9c:	0a6d      	lsrs	r5, r5, #9
    df9e:	0e00      	lsrs	r0, r0, #24
    dfa0:	4698      	mov	r8, r3
    dfa2:	d043      	beq.n	e02c <__aeabi_fmul+0xc8>
    dfa4:	28ff      	cmp	r0, #255	; 0xff
    dfa6:	d03b      	beq.n	e020 <__aeabi_fmul+0xbc>
    dfa8:	00eb      	lsls	r3, r5, #3
    dfaa:	2580      	movs	r5, #128	; 0x80
    dfac:	2200      	movs	r2, #0
    dfae:	04ed      	lsls	r5, r5, #19
    dfb0:	431d      	orrs	r5, r3
    dfb2:	387f      	subs	r0, #127	; 0x7f
    dfb4:	1836      	adds	r6, r6, r0
    dfb6:	1c73      	adds	r3, r6, #1
    dfb8:	4641      	mov	r1, r8
    dfba:	469b      	mov	fp, r3
    dfbc:	464b      	mov	r3, r9
    dfbe:	4061      	eors	r1, r4
    dfc0:	4313      	orrs	r3, r2
    dfc2:	2b0f      	cmp	r3, #15
    dfc4:	d864      	bhi.n	e090 <__aeabi_fmul+0x12c>
    dfc6:	4875      	ldr	r0, [pc, #468]	; (e19c <__aeabi_fmul+0x238>)
    dfc8:	009b      	lsls	r3, r3, #2
    dfca:	58c3      	ldr	r3, [r0, r3]
    dfcc:	469f      	mov	pc, r3
    dfce:	2f00      	cmp	r7, #0
    dfd0:	d142      	bne.n	e058 <__aeabi_fmul+0xf4>
    dfd2:	2308      	movs	r3, #8
    dfd4:	4699      	mov	r9, r3
    dfd6:	3b06      	subs	r3, #6
    dfd8:	26ff      	movs	r6, #255	; 0xff
    dfda:	469a      	mov	sl, r3
    dfdc:	e7da      	b.n	df94 <__aeabi_fmul+0x30>
    dfde:	4641      	mov	r1, r8
    dfe0:	2a02      	cmp	r2, #2
    dfe2:	d028      	beq.n	e036 <__aeabi_fmul+0xd2>
    dfe4:	2a03      	cmp	r2, #3
    dfe6:	d100      	bne.n	dfea <__aeabi_fmul+0x86>
    dfe8:	e0ce      	b.n	e188 <__aeabi_fmul+0x224>
    dfea:	2a01      	cmp	r2, #1
    dfec:	d000      	beq.n	dff0 <__aeabi_fmul+0x8c>
    dfee:	e0ac      	b.n	e14a <__aeabi_fmul+0x1e6>
    dff0:	4011      	ands	r1, r2
    dff2:	2000      	movs	r0, #0
    dff4:	2200      	movs	r2, #0
    dff6:	b2cc      	uxtb	r4, r1
    dff8:	0240      	lsls	r0, r0, #9
    dffa:	05d2      	lsls	r2, r2, #23
    dffc:	0a40      	lsrs	r0, r0, #9
    dffe:	07e4      	lsls	r4, r4, #31
    e000:	4310      	orrs	r0, r2
    e002:	4320      	orrs	r0, r4
    e004:	bc3c      	pop	{r2, r3, r4, r5}
    e006:	4690      	mov	r8, r2
    e008:	4699      	mov	r9, r3
    e00a:	46a2      	mov	sl, r4
    e00c:	46ab      	mov	fp, r5
    e00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e010:	2f00      	cmp	r7, #0
    e012:	d115      	bne.n	e040 <__aeabi_fmul+0xdc>
    e014:	2304      	movs	r3, #4
    e016:	4699      	mov	r9, r3
    e018:	3b03      	subs	r3, #3
    e01a:	2600      	movs	r6, #0
    e01c:	469a      	mov	sl, r3
    e01e:	e7b9      	b.n	df94 <__aeabi_fmul+0x30>
    e020:	20ff      	movs	r0, #255	; 0xff
    e022:	2202      	movs	r2, #2
    e024:	2d00      	cmp	r5, #0
    e026:	d0c5      	beq.n	dfb4 <__aeabi_fmul+0x50>
    e028:	2203      	movs	r2, #3
    e02a:	e7c3      	b.n	dfb4 <__aeabi_fmul+0x50>
    e02c:	2d00      	cmp	r5, #0
    e02e:	d119      	bne.n	e064 <__aeabi_fmul+0x100>
    e030:	2000      	movs	r0, #0
    e032:	2201      	movs	r2, #1
    e034:	e7be      	b.n	dfb4 <__aeabi_fmul+0x50>
    e036:	2401      	movs	r4, #1
    e038:	22ff      	movs	r2, #255	; 0xff
    e03a:	400c      	ands	r4, r1
    e03c:	2000      	movs	r0, #0
    e03e:	e7db      	b.n	dff8 <__aeabi_fmul+0x94>
    e040:	0038      	movs	r0, r7
    e042:	f001 ff83 	bl	ff4c <__clzsi2>
    e046:	2676      	movs	r6, #118	; 0x76
    e048:	1f43      	subs	r3, r0, #5
    e04a:	409f      	lsls	r7, r3
    e04c:	2300      	movs	r3, #0
    e04e:	4276      	negs	r6, r6
    e050:	1a36      	subs	r6, r6, r0
    e052:	4699      	mov	r9, r3
    e054:	469a      	mov	sl, r3
    e056:	e79d      	b.n	df94 <__aeabi_fmul+0x30>
    e058:	230c      	movs	r3, #12
    e05a:	4699      	mov	r9, r3
    e05c:	3b09      	subs	r3, #9
    e05e:	26ff      	movs	r6, #255	; 0xff
    e060:	469a      	mov	sl, r3
    e062:	e797      	b.n	df94 <__aeabi_fmul+0x30>
    e064:	0028      	movs	r0, r5
    e066:	f001 ff71 	bl	ff4c <__clzsi2>
    e06a:	1f43      	subs	r3, r0, #5
    e06c:	409d      	lsls	r5, r3
    e06e:	2376      	movs	r3, #118	; 0x76
    e070:	425b      	negs	r3, r3
    e072:	1a18      	subs	r0, r3, r0
    e074:	2200      	movs	r2, #0
    e076:	e79d      	b.n	dfb4 <__aeabi_fmul+0x50>
    e078:	2080      	movs	r0, #128	; 0x80
    e07a:	2400      	movs	r4, #0
    e07c:	03c0      	lsls	r0, r0, #15
    e07e:	22ff      	movs	r2, #255	; 0xff
    e080:	e7ba      	b.n	dff8 <__aeabi_fmul+0x94>
    e082:	003d      	movs	r5, r7
    e084:	4652      	mov	r2, sl
    e086:	e7ab      	b.n	dfe0 <__aeabi_fmul+0x7c>
    e088:	003d      	movs	r5, r7
    e08a:	0021      	movs	r1, r4
    e08c:	4652      	mov	r2, sl
    e08e:	e7a7      	b.n	dfe0 <__aeabi_fmul+0x7c>
    e090:	0c3b      	lsrs	r3, r7, #16
    e092:	469c      	mov	ip, r3
    e094:	042a      	lsls	r2, r5, #16
    e096:	0c12      	lsrs	r2, r2, #16
    e098:	0c2b      	lsrs	r3, r5, #16
    e09a:	0014      	movs	r4, r2
    e09c:	4660      	mov	r0, ip
    e09e:	4665      	mov	r5, ip
    e0a0:	043f      	lsls	r7, r7, #16
    e0a2:	0c3f      	lsrs	r7, r7, #16
    e0a4:	437c      	muls	r4, r7
    e0a6:	4342      	muls	r2, r0
    e0a8:	435d      	muls	r5, r3
    e0aa:	437b      	muls	r3, r7
    e0ac:	0c27      	lsrs	r7, r4, #16
    e0ae:	189b      	adds	r3, r3, r2
    e0b0:	18ff      	adds	r7, r7, r3
    e0b2:	42ba      	cmp	r2, r7
    e0b4:	d903      	bls.n	e0be <__aeabi_fmul+0x15a>
    e0b6:	2380      	movs	r3, #128	; 0x80
    e0b8:	025b      	lsls	r3, r3, #9
    e0ba:	469c      	mov	ip, r3
    e0bc:	4465      	add	r5, ip
    e0be:	0424      	lsls	r4, r4, #16
    e0c0:	043a      	lsls	r2, r7, #16
    e0c2:	0c24      	lsrs	r4, r4, #16
    e0c4:	1912      	adds	r2, r2, r4
    e0c6:	0193      	lsls	r3, r2, #6
    e0c8:	1e5c      	subs	r4, r3, #1
    e0ca:	41a3      	sbcs	r3, r4
    e0cc:	0c3f      	lsrs	r7, r7, #16
    e0ce:	0e92      	lsrs	r2, r2, #26
    e0d0:	197d      	adds	r5, r7, r5
    e0d2:	431a      	orrs	r2, r3
    e0d4:	01ad      	lsls	r5, r5, #6
    e0d6:	4315      	orrs	r5, r2
    e0d8:	012b      	lsls	r3, r5, #4
    e0da:	d504      	bpl.n	e0e6 <__aeabi_fmul+0x182>
    e0dc:	2301      	movs	r3, #1
    e0de:	465e      	mov	r6, fp
    e0e0:	086a      	lsrs	r2, r5, #1
    e0e2:	401d      	ands	r5, r3
    e0e4:	4315      	orrs	r5, r2
    e0e6:	0032      	movs	r2, r6
    e0e8:	327f      	adds	r2, #127	; 0x7f
    e0ea:	2a00      	cmp	r2, #0
    e0ec:	dd25      	ble.n	e13a <__aeabi_fmul+0x1d6>
    e0ee:	076b      	lsls	r3, r5, #29
    e0f0:	d004      	beq.n	e0fc <__aeabi_fmul+0x198>
    e0f2:	230f      	movs	r3, #15
    e0f4:	402b      	ands	r3, r5
    e0f6:	2b04      	cmp	r3, #4
    e0f8:	d000      	beq.n	e0fc <__aeabi_fmul+0x198>
    e0fa:	3504      	adds	r5, #4
    e0fc:	012b      	lsls	r3, r5, #4
    e0fe:	d503      	bpl.n	e108 <__aeabi_fmul+0x1a4>
    e100:	0032      	movs	r2, r6
    e102:	4b27      	ldr	r3, [pc, #156]	; (e1a0 <__aeabi_fmul+0x23c>)
    e104:	3280      	adds	r2, #128	; 0x80
    e106:	401d      	ands	r5, r3
    e108:	2afe      	cmp	r2, #254	; 0xfe
    e10a:	dc94      	bgt.n	e036 <__aeabi_fmul+0xd2>
    e10c:	2401      	movs	r4, #1
    e10e:	01a8      	lsls	r0, r5, #6
    e110:	0a40      	lsrs	r0, r0, #9
    e112:	b2d2      	uxtb	r2, r2
    e114:	400c      	ands	r4, r1
    e116:	e76f      	b.n	dff8 <__aeabi_fmul+0x94>
    e118:	2080      	movs	r0, #128	; 0x80
    e11a:	03c0      	lsls	r0, r0, #15
    e11c:	4207      	tst	r7, r0
    e11e:	d007      	beq.n	e130 <__aeabi_fmul+0x1cc>
    e120:	4205      	tst	r5, r0
    e122:	d105      	bne.n	e130 <__aeabi_fmul+0x1cc>
    e124:	4328      	orrs	r0, r5
    e126:	0240      	lsls	r0, r0, #9
    e128:	0a40      	lsrs	r0, r0, #9
    e12a:	4644      	mov	r4, r8
    e12c:	22ff      	movs	r2, #255	; 0xff
    e12e:	e763      	b.n	dff8 <__aeabi_fmul+0x94>
    e130:	4338      	orrs	r0, r7
    e132:	0240      	lsls	r0, r0, #9
    e134:	0a40      	lsrs	r0, r0, #9
    e136:	22ff      	movs	r2, #255	; 0xff
    e138:	e75e      	b.n	dff8 <__aeabi_fmul+0x94>
    e13a:	2401      	movs	r4, #1
    e13c:	1aa3      	subs	r3, r4, r2
    e13e:	2b1b      	cmp	r3, #27
    e140:	dd05      	ble.n	e14e <__aeabi_fmul+0x1ea>
    e142:	400c      	ands	r4, r1
    e144:	2200      	movs	r2, #0
    e146:	2000      	movs	r0, #0
    e148:	e756      	b.n	dff8 <__aeabi_fmul+0x94>
    e14a:	465e      	mov	r6, fp
    e14c:	e7cb      	b.n	e0e6 <__aeabi_fmul+0x182>
    e14e:	002a      	movs	r2, r5
    e150:	2020      	movs	r0, #32
    e152:	40da      	lsrs	r2, r3
    e154:	1ac3      	subs	r3, r0, r3
    e156:	409d      	lsls	r5, r3
    e158:	002b      	movs	r3, r5
    e15a:	1e5d      	subs	r5, r3, #1
    e15c:	41ab      	sbcs	r3, r5
    e15e:	4313      	orrs	r3, r2
    e160:	075a      	lsls	r2, r3, #29
    e162:	d004      	beq.n	e16e <__aeabi_fmul+0x20a>
    e164:	220f      	movs	r2, #15
    e166:	401a      	ands	r2, r3
    e168:	2a04      	cmp	r2, #4
    e16a:	d000      	beq.n	e16e <__aeabi_fmul+0x20a>
    e16c:	3304      	adds	r3, #4
    e16e:	015a      	lsls	r2, r3, #5
    e170:	d504      	bpl.n	e17c <__aeabi_fmul+0x218>
    e172:	2401      	movs	r4, #1
    e174:	2201      	movs	r2, #1
    e176:	400c      	ands	r4, r1
    e178:	2000      	movs	r0, #0
    e17a:	e73d      	b.n	dff8 <__aeabi_fmul+0x94>
    e17c:	2401      	movs	r4, #1
    e17e:	019b      	lsls	r3, r3, #6
    e180:	0a58      	lsrs	r0, r3, #9
    e182:	400c      	ands	r4, r1
    e184:	2200      	movs	r2, #0
    e186:	e737      	b.n	dff8 <__aeabi_fmul+0x94>
    e188:	2080      	movs	r0, #128	; 0x80
    e18a:	2401      	movs	r4, #1
    e18c:	03c0      	lsls	r0, r0, #15
    e18e:	4328      	orrs	r0, r5
    e190:	0240      	lsls	r0, r0, #9
    e192:	0a40      	lsrs	r0, r0, #9
    e194:	400c      	ands	r4, r1
    e196:	22ff      	movs	r2, #255	; 0xff
    e198:	e72e      	b.n	dff8 <__aeabi_fmul+0x94>
    e19a:	46c0      	nop			; (mov r8, r8)
    e19c:	000129c0 	.word	0x000129c0
    e1a0:	f7ffffff 	.word	0xf7ffffff

0000e1a4 <__aeabi_i2f>:
    e1a4:	b570      	push	{r4, r5, r6, lr}
    e1a6:	2800      	cmp	r0, #0
    e1a8:	d030      	beq.n	e20c <__aeabi_i2f+0x68>
    e1aa:	17c3      	asrs	r3, r0, #31
    e1ac:	18c4      	adds	r4, r0, r3
    e1ae:	405c      	eors	r4, r3
    e1b0:	0fc5      	lsrs	r5, r0, #31
    e1b2:	0020      	movs	r0, r4
    e1b4:	f001 feca 	bl	ff4c <__clzsi2>
    e1b8:	239e      	movs	r3, #158	; 0x9e
    e1ba:	1a1b      	subs	r3, r3, r0
    e1bc:	2b96      	cmp	r3, #150	; 0x96
    e1be:	dc0d      	bgt.n	e1dc <__aeabi_i2f+0x38>
    e1c0:	2296      	movs	r2, #150	; 0x96
    e1c2:	1ad2      	subs	r2, r2, r3
    e1c4:	4094      	lsls	r4, r2
    e1c6:	002a      	movs	r2, r5
    e1c8:	0264      	lsls	r4, r4, #9
    e1ca:	0a64      	lsrs	r4, r4, #9
    e1cc:	b2db      	uxtb	r3, r3
    e1ce:	0264      	lsls	r4, r4, #9
    e1d0:	05db      	lsls	r3, r3, #23
    e1d2:	0a60      	lsrs	r0, r4, #9
    e1d4:	07d2      	lsls	r2, r2, #31
    e1d6:	4318      	orrs	r0, r3
    e1d8:	4310      	orrs	r0, r2
    e1da:	bd70      	pop	{r4, r5, r6, pc}
    e1dc:	2b99      	cmp	r3, #153	; 0x99
    e1de:	dc19      	bgt.n	e214 <__aeabi_i2f+0x70>
    e1e0:	2299      	movs	r2, #153	; 0x99
    e1e2:	1ad2      	subs	r2, r2, r3
    e1e4:	2a00      	cmp	r2, #0
    e1e6:	dd29      	ble.n	e23c <__aeabi_i2f+0x98>
    e1e8:	4094      	lsls	r4, r2
    e1ea:	0022      	movs	r2, r4
    e1ec:	4c14      	ldr	r4, [pc, #80]	; (e240 <__aeabi_i2f+0x9c>)
    e1ee:	4014      	ands	r4, r2
    e1f0:	0751      	lsls	r1, r2, #29
    e1f2:	d004      	beq.n	e1fe <__aeabi_i2f+0x5a>
    e1f4:	210f      	movs	r1, #15
    e1f6:	400a      	ands	r2, r1
    e1f8:	2a04      	cmp	r2, #4
    e1fa:	d000      	beq.n	e1fe <__aeabi_i2f+0x5a>
    e1fc:	3404      	adds	r4, #4
    e1fe:	0162      	lsls	r2, r4, #5
    e200:	d413      	bmi.n	e22a <__aeabi_i2f+0x86>
    e202:	01a4      	lsls	r4, r4, #6
    e204:	0a64      	lsrs	r4, r4, #9
    e206:	b2db      	uxtb	r3, r3
    e208:	002a      	movs	r2, r5
    e20a:	e7e0      	b.n	e1ce <__aeabi_i2f+0x2a>
    e20c:	2200      	movs	r2, #0
    e20e:	2300      	movs	r3, #0
    e210:	2400      	movs	r4, #0
    e212:	e7dc      	b.n	e1ce <__aeabi_i2f+0x2a>
    e214:	2205      	movs	r2, #5
    e216:	0021      	movs	r1, r4
    e218:	1a12      	subs	r2, r2, r0
    e21a:	40d1      	lsrs	r1, r2
    e21c:	22b9      	movs	r2, #185	; 0xb9
    e21e:	1ad2      	subs	r2, r2, r3
    e220:	4094      	lsls	r4, r2
    e222:	1e62      	subs	r2, r4, #1
    e224:	4194      	sbcs	r4, r2
    e226:	430c      	orrs	r4, r1
    e228:	e7da      	b.n	e1e0 <__aeabi_i2f+0x3c>
    e22a:	4b05      	ldr	r3, [pc, #20]	; (e240 <__aeabi_i2f+0x9c>)
    e22c:	002a      	movs	r2, r5
    e22e:	401c      	ands	r4, r3
    e230:	239f      	movs	r3, #159	; 0x9f
    e232:	01a4      	lsls	r4, r4, #6
    e234:	1a1b      	subs	r3, r3, r0
    e236:	0a64      	lsrs	r4, r4, #9
    e238:	b2db      	uxtb	r3, r3
    e23a:	e7c8      	b.n	e1ce <__aeabi_i2f+0x2a>
    e23c:	0022      	movs	r2, r4
    e23e:	e7d5      	b.n	e1ec <__aeabi_i2f+0x48>
    e240:	fbffffff 	.word	0xfbffffff

0000e244 <__aeabi_dadd>:
    e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e246:	4645      	mov	r5, r8
    e248:	46de      	mov	lr, fp
    e24a:	4657      	mov	r7, sl
    e24c:	464e      	mov	r6, r9
    e24e:	030c      	lsls	r4, r1, #12
    e250:	b5e0      	push	{r5, r6, r7, lr}
    e252:	004e      	lsls	r6, r1, #1
    e254:	0fc9      	lsrs	r1, r1, #31
    e256:	4688      	mov	r8, r1
    e258:	000d      	movs	r5, r1
    e25a:	0a61      	lsrs	r1, r4, #9
    e25c:	0f44      	lsrs	r4, r0, #29
    e25e:	430c      	orrs	r4, r1
    e260:	00c7      	lsls	r7, r0, #3
    e262:	0319      	lsls	r1, r3, #12
    e264:	0058      	lsls	r0, r3, #1
    e266:	0fdb      	lsrs	r3, r3, #31
    e268:	469b      	mov	fp, r3
    e26a:	0a4b      	lsrs	r3, r1, #9
    e26c:	0f51      	lsrs	r1, r2, #29
    e26e:	430b      	orrs	r3, r1
    e270:	0d76      	lsrs	r6, r6, #21
    e272:	0d40      	lsrs	r0, r0, #21
    e274:	0019      	movs	r1, r3
    e276:	00d2      	lsls	r2, r2, #3
    e278:	45d8      	cmp	r8, fp
    e27a:	d100      	bne.n	e27e <__aeabi_dadd+0x3a>
    e27c:	e0ae      	b.n	e3dc <__aeabi_dadd+0x198>
    e27e:	1a35      	subs	r5, r6, r0
    e280:	2d00      	cmp	r5, #0
    e282:	dc00      	bgt.n	e286 <__aeabi_dadd+0x42>
    e284:	e0f6      	b.n	e474 <__aeabi_dadd+0x230>
    e286:	2800      	cmp	r0, #0
    e288:	d10f      	bne.n	e2aa <__aeabi_dadd+0x66>
    e28a:	4313      	orrs	r3, r2
    e28c:	d100      	bne.n	e290 <__aeabi_dadd+0x4c>
    e28e:	e0db      	b.n	e448 <__aeabi_dadd+0x204>
    e290:	1e6b      	subs	r3, r5, #1
    e292:	2b00      	cmp	r3, #0
    e294:	d000      	beq.n	e298 <__aeabi_dadd+0x54>
    e296:	e137      	b.n	e508 <__aeabi_dadd+0x2c4>
    e298:	1aba      	subs	r2, r7, r2
    e29a:	4297      	cmp	r7, r2
    e29c:	41bf      	sbcs	r7, r7
    e29e:	1a64      	subs	r4, r4, r1
    e2a0:	427f      	negs	r7, r7
    e2a2:	1be4      	subs	r4, r4, r7
    e2a4:	2601      	movs	r6, #1
    e2a6:	0017      	movs	r7, r2
    e2a8:	e024      	b.n	e2f4 <__aeabi_dadd+0xb0>
    e2aa:	4bc6      	ldr	r3, [pc, #792]	; (e5c4 <__aeabi_dadd+0x380>)
    e2ac:	429e      	cmp	r6, r3
    e2ae:	d04d      	beq.n	e34c <__aeabi_dadd+0x108>
    e2b0:	2380      	movs	r3, #128	; 0x80
    e2b2:	041b      	lsls	r3, r3, #16
    e2b4:	4319      	orrs	r1, r3
    e2b6:	2d38      	cmp	r5, #56	; 0x38
    e2b8:	dd00      	ble.n	e2bc <__aeabi_dadd+0x78>
    e2ba:	e107      	b.n	e4cc <__aeabi_dadd+0x288>
    e2bc:	2d1f      	cmp	r5, #31
    e2be:	dd00      	ble.n	e2c2 <__aeabi_dadd+0x7e>
    e2c0:	e138      	b.n	e534 <__aeabi_dadd+0x2f0>
    e2c2:	2020      	movs	r0, #32
    e2c4:	1b43      	subs	r3, r0, r5
    e2c6:	469a      	mov	sl, r3
    e2c8:	000b      	movs	r3, r1
    e2ca:	4650      	mov	r0, sl
    e2cc:	4083      	lsls	r3, r0
    e2ce:	4699      	mov	r9, r3
    e2d0:	0013      	movs	r3, r2
    e2d2:	4648      	mov	r0, r9
    e2d4:	40eb      	lsrs	r3, r5
    e2d6:	4318      	orrs	r0, r3
    e2d8:	0003      	movs	r3, r0
    e2da:	4650      	mov	r0, sl
    e2dc:	4082      	lsls	r2, r0
    e2de:	1e50      	subs	r0, r2, #1
    e2e0:	4182      	sbcs	r2, r0
    e2e2:	40e9      	lsrs	r1, r5
    e2e4:	431a      	orrs	r2, r3
    e2e6:	1aba      	subs	r2, r7, r2
    e2e8:	1a61      	subs	r1, r4, r1
    e2ea:	4297      	cmp	r7, r2
    e2ec:	41a4      	sbcs	r4, r4
    e2ee:	0017      	movs	r7, r2
    e2f0:	4264      	negs	r4, r4
    e2f2:	1b0c      	subs	r4, r1, r4
    e2f4:	0223      	lsls	r3, r4, #8
    e2f6:	d562      	bpl.n	e3be <__aeabi_dadd+0x17a>
    e2f8:	0264      	lsls	r4, r4, #9
    e2fa:	0a65      	lsrs	r5, r4, #9
    e2fc:	2d00      	cmp	r5, #0
    e2fe:	d100      	bne.n	e302 <__aeabi_dadd+0xbe>
    e300:	e0df      	b.n	e4c2 <__aeabi_dadd+0x27e>
    e302:	0028      	movs	r0, r5
    e304:	f001 fe22 	bl	ff4c <__clzsi2>
    e308:	0003      	movs	r3, r0
    e30a:	3b08      	subs	r3, #8
    e30c:	2b1f      	cmp	r3, #31
    e30e:	dd00      	ble.n	e312 <__aeabi_dadd+0xce>
    e310:	e0d2      	b.n	e4b8 <__aeabi_dadd+0x274>
    e312:	2220      	movs	r2, #32
    e314:	003c      	movs	r4, r7
    e316:	1ad2      	subs	r2, r2, r3
    e318:	409d      	lsls	r5, r3
    e31a:	40d4      	lsrs	r4, r2
    e31c:	409f      	lsls	r7, r3
    e31e:	4325      	orrs	r5, r4
    e320:	429e      	cmp	r6, r3
    e322:	dd00      	ble.n	e326 <__aeabi_dadd+0xe2>
    e324:	e0c4      	b.n	e4b0 <__aeabi_dadd+0x26c>
    e326:	1b9e      	subs	r6, r3, r6
    e328:	1c73      	adds	r3, r6, #1
    e32a:	2b1f      	cmp	r3, #31
    e32c:	dd00      	ble.n	e330 <__aeabi_dadd+0xec>
    e32e:	e0f1      	b.n	e514 <__aeabi_dadd+0x2d0>
    e330:	2220      	movs	r2, #32
    e332:	0038      	movs	r0, r7
    e334:	0029      	movs	r1, r5
    e336:	1ad2      	subs	r2, r2, r3
    e338:	40d8      	lsrs	r0, r3
    e33a:	4091      	lsls	r1, r2
    e33c:	4097      	lsls	r7, r2
    e33e:	002c      	movs	r4, r5
    e340:	4301      	orrs	r1, r0
    e342:	1e78      	subs	r0, r7, #1
    e344:	4187      	sbcs	r7, r0
    e346:	40dc      	lsrs	r4, r3
    e348:	2600      	movs	r6, #0
    e34a:	430f      	orrs	r7, r1
    e34c:	077b      	lsls	r3, r7, #29
    e34e:	d009      	beq.n	e364 <__aeabi_dadd+0x120>
    e350:	230f      	movs	r3, #15
    e352:	403b      	ands	r3, r7
    e354:	2b04      	cmp	r3, #4
    e356:	d005      	beq.n	e364 <__aeabi_dadd+0x120>
    e358:	1d3b      	adds	r3, r7, #4
    e35a:	42bb      	cmp	r3, r7
    e35c:	41bf      	sbcs	r7, r7
    e35e:	427f      	negs	r7, r7
    e360:	19e4      	adds	r4, r4, r7
    e362:	001f      	movs	r7, r3
    e364:	0223      	lsls	r3, r4, #8
    e366:	d52c      	bpl.n	e3c2 <__aeabi_dadd+0x17e>
    e368:	4b96      	ldr	r3, [pc, #600]	; (e5c4 <__aeabi_dadd+0x380>)
    e36a:	3601      	adds	r6, #1
    e36c:	429e      	cmp	r6, r3
    e36e:	d100      	bne.n	e372 <__aeabi_dadd+0x12e>
    e370:	e09a      	b.n	e4a8 <__aeabi_dadd+0x264>
    e372:	4645      	mov	r5, r8
    e374:	4b94      	ldr	r3, [pc, #592]	; (e5c8 <__aeabi_dadd+0x384>)
    e376:	08ff      	lsrs	r7, r7, #3
    e378:	401c      	ands	r4, r3
    e37a:	0760      	lsls	r0, r4, #29
    e37c:	0576      	lsls	r6, r6, #21
    e37e:	0264      	lsls	r4, r4, #9
    e380:	4307      	orrs	r7, r0
    e382:	0b24      	lsrs	r4, r4, #12
    e384:	0d76      	lsrs	r6, r6, #21
    e386:	2100      	movs	r1, #0
    e388:	0324      	lsls	r4, r4, #12
    e38a:	0b23      	lsrs	r3, r4, #12
    e38c:	0d0c      	lsrs	r4, r1, #20
    e38e:	4a8f      	ldr	r2, [pc, #572]	; (e5cc <__aeabi_dadd+0x388>)
    e390:	0524      	lsls	r4, r4, #20
    e392:	431c      	orrs	r4, r3
    e394:	4014      	ands	r4, r2
    e396:	0533      	lsls	r3, r6, #20
    e398:	4323      	orrs	r3, r4
    e39a:	005b      	lsls	r3, r3, #1
    e39c:	07ed      	lsls	r5, r5, #31
    e39e:	085b      	lsrs	r3, r3, #1
    e3a0:	432b      	orrs	r3, r5
    e3a2:	0038      	movs	r0, r7
    e3a4:	0019      	movs	r1, r3
    e3a6:	bc3c      	pop	{r2, r3, r4, r5}
    e3a8:	4690      	mov	r8, r2
    e3aa:	4699      	mov	r9, r3
    e3ac:	46a2      	mov	sl, r4
    e3ae:	46ab      	mov	fp, r5
    e3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3b2:	4664      	mov	r4, ip
    e3b4:	4304      	orrs	r4, r0
    e3b6:	d100      	bne.n	e3ba <__aeabi_dadd+0x176>
    e3b8:	e211      	b.n	e7de <__aeabi_dadd+0x59a>
    e3ba:	0004      	movs	r4, r0
    e3bc:	4667      	mov	r7, ip
    e3be:	077b      	lsls	r3, r7, #29
    e3c0:	d1c6      	bne.n	e350 <__aeabi_dadd+0x10c>
    e3c2:	4645      	mov	r5, r8
    e3c4:	0760      	lsls	r0, r4, #29
    e3c6:	08ff      	lsrs	r7, r7, #3
    e3c8:	4307      	orrs	r7, r0
    e3ca:	08e4      	lsrs	r4, r4, #3
    e3cc:	4b7d      	ldr	r3, [pc, #500]	; (e5c4 <__aeabi_dadd+0x380>)
    e3ce:	429e      	cmp	r6, r3
    e3d0:	d030      	beq.n	e434 <__aeabi_dadd+0x1f0>
    e3d2:	0324      	lsls	r4, r4, #12
    e3d4:	0576      	lsls	r6, r6, #21
    e3d6:	0b24      	lsrs	r4, r4, #12
    e3d8:	0d76      	lsrs	r6, r6, #21
    e3da:	e7d4      	b.n	e386 <__aeabi_dadd+0x142>
    e3dc:	1a33      	subs	r3, r6, r0
    e3de:	469a      	mov	sl, r3
    e3e0:	2b00      	cmp	r3, #0
    e3e2:	dd78      	ble.n	e4d6 <__aeabi_dadd+0x292>
    e3e4:	2800      	cmp	r0, #0
    e3e6:	d031      	beq.n	e44c <__aeabi_dadd+0x208>
    e3e8:	4876      	ldr	r0, [pc, #472]	; (e5c4 <__aeabi_dadd+0x380>)
    e3ea:	4286      	cmp	r6, r0
    e3ec:	d0ae      	beq.n	e34c <__aeabi_dadd+0x108>
    e3ee:	2080      	movs	r0, #128	; 0x80
    e3f0:	0400      	lsls	r0, r0, #16
    e3f2:	4301      	orrs	r1, r0
    e3f4:	4653      	mov	r3, sl
    e3f6:	2b38      	cmp	r3, #56	; 0x38
    e3f8:	dc00      	bgt.n	e3fc <__aeabi_dadd+0x1b8>
    e3fa:	e0e9      	b.n	e5d0 <__aeabi_dadd+0x38c>
    e3fc:	430a      	orrs	r2, r1
    e3fe:	1e51      	subs	r1, r2, #1
    e400:	418a      	sbcs	r2, r1
    e402:	2100      	movs	r1, #0
    e404:	19d2      	adds	r2, r2, r7
    e406:	42ba      	cmp	r2, r7
    e408:	41bf      	sbcs	r7, r7
    e40a:	1909      	adds	r1, r1, r4
    e40c:	427c      	negs	r4, r7
    e40e:	0017      	movs	r7, r2
    e410:	190c      	adds	r4, r1, r4
    e412:	0223      	lsls	r3, r4, #8
    e414:	d5d3      	bpl.n	e3be <__aeabi_dadd+0x17a>
    e416:	4b6b      	ldr	r3, [pc, #428]	; (e5c4 <__aeabi_dadd+0x380>)
    e418:	3601      	adds	r6, #1
    e41a:	429e      	cmp	r6, r3
    e41c:	d100      	bne.n	e420 <__aeabi_dadd+0x1dc>
    e41e:	e13a      	b.n	e696 <__aeabi_dadd+0x452>
    e420:	2001      	movs	r0, #1
    e422:	4b69      	ldr	r3, [pc, #420]	; (e5c8 <__aeabi_dadd+0x384>)
    e424:	401c      	ands	r4, r3
    e426:	087b      	lsrs	r3, r7, #1
    e428:	4007      	ands	r7, r0
    e42a:	431f      	orrs	r7, r3
    e42c:	07e0      	lsls	r0, r4, #31
    e42e:	4307      	orrs	r7, r0
    e430:	0864      	lsrs	r4, r4, #1
    e432:	e78b      	b.n	e34c <__aeabi_dadd+0x108>
    e434:	0023      	movs	r3, r4
    e436:	433b      	orrs	r3, r7
    e438:	d100      	bne.n	e43c <__aeabi_dadd+0x1f8>
    e43a:	e1cb      	b.n	e7d4 <__aeabi_dadd+0x590>
    e43c:	2280      	movs	r2, #128	; 0x80
    e43e:	0312      	lsls	r2, r2, #12
    e440:	4314      	orrs	r4, r2
    e442:	0324      	lsls	r4, r4, #12
    e444:	0b24      	lsrs	r4, r4, #12
    e446:	e79e      	b.n	e386 <__aeabi_dadd+0x142>
    e448:	002e      	movs	r6, r5
    e44a:	e77f      	b.n	e34c <__aeabi_dadd+0x108>
    e44c:	0008      	movs	r0, r1
    e44e:	4310      	orrs	r0, r2
    e450:	d100      	bne.n	e454 <__aeabi_dadd+0x210>
    e452:	e0b4      	b.n	e5be <__aeabi_dadd+0x37a>
    e454:	1e58      	subs	r0, r3, #1
    e456:	2800      	cmp	r0, #0
    e458:	d000      	beq.n	e45c <__aeabi_dadd+0x218>
    e45a:	e0de      	b.n	e61a <__aeabi_dadd+0x3d6>
    e45c:	18ba      	adds	r2, r7, r2
    e45e:	42ba      	cmp	r2, r7
    e460:	419b      	sbcs	r3, r3
    e462:	1864      	adds	r4, r4, r1
    e464:	425b      	negs	r3, r3
    e466:	18e4      	adds	r4, r4, r3
    e468:	0017      	movs	r7, r2
    e46a:	2601      	movs	r6, #1
    e46c:	0223      	lsls	r3, r4, #8
    e46e:	d5a6      	bpl.n	e3be <__aeabi_dadd+0x17a>
    e470:	2602      	movs	r6, #2
    e472:	e7d5      	b.n	e420 <__aeabi_dadd+0x1dc>
    e474:	2d00      	cmp	r5, #0
    e476:	d16e      	bne.n	e556 <__aeabi_dadd+0x312>
    e478:	1c70      	adds	r0, r6, #1
    e47a:	0540      	lsls	r0, r0, #21
    e47c:	0d40      	lsrs	r0, r0, #21
    e47e:	2801      	cmp	r0, #1
    e480:	dc00      	bgt.n	e484 <__aeabi_dadd+0x240>
    e482:	e0f9      	b.n	e678 <__aeabi_dadd+0x434>
    e484:	1ab8      	subs	r0, r7, r2
    e486:	4684      	mov	ip, r0
    e488:	4287      	cmp	r7, r0
    e48a:	4180      	sbcs	r0, r0
    e48c:	1ae5      	subs	r5, r4, r3
    e48e:	4240      	negs	r0, r0
    e490:	1a2d      	subs	r5, r5, r0
    e492:	0228      	lsls	r0, r5, #8
    e494:	d400      	bmi.n	e498 <__aeabi_dadd+0x254>
    e496:	e089      	b.n	e5ac <__aeabi_dadd+0x368>
    e498:	1bd7      	subs	r7, r2, r7
    e49a:	42ba      	cmp	r2, r7
    e49c:	4192      	sbcs	r2, r2
    e49e:	1b1c      	subs	r4, r3, r4
    e4a0:	4252      	negs	r2, r2
    e4a2:	1aa5      	subs	r5, r4, r2
    e4a4:	46d8      	mov	r8, fp
    e4a6:	e729      	b.n	e2fc <__aeabi_dadd+0xb8>
    e4a8:	4645      	mov	r5, r8
    e4aa:	2400      	movs	r4, #0
    e4ac:	2700      	movs	r7, #0
    e4ae:	e76a      	b.n	e386 <__aeabi_dadd+0x142>
    e4b0:	4c45      	ldr	r4, [pc, #276]	; (e5c8 <__aeabi_dadd+0x384>)
    e4b2:	1af6      	subs	r6, r6, r3
    e4b4:	402c      	ands	r4, r5
    e4b6:	e749      	b.n	e34c <__aeabi_dadd+0x108>
    e4b8:	003d      	movs	r5, r7
    e4ba:	3828      	subs	r0, #40	; 0x28
    e4bc:	4085      	lsls	r5, r0
    e4be:	2700      	movs	r7, #0
    e4c0:	e72e      	b.n	e320 <__aeabi_dadd+0xdc>
    e4c2:	0038      	movs	r0, r7
    e4c4:	f001 fd42 	bl	ff4c <__clzsi2>
    e4c8:	3020      	adds	r0, #32
    e4ca:	e71d      	b.n	e308 <__aeabi_dadd+0xc4>
    e4cc:	430a      	orrs	r2, r1
    e4ce:	1e51      	subs	r1, r2, #1
    e4d0:	418a      	sbcs	r2, r1
    e4d2:	2100      	movs	r1, #0
    e4d4:	e707      	b.n	e2e6 <__aeabi_dadd+0xa2>
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	d000      	beq.n	e4dc <__aeabi_dadd+0x298>
    e4da:	e0f3      	b.n	e6c4 <__aeabi_dadd+0x480>
    e4dc:	1c70      	adds	r0, r6, #1
    e4de:	0543      	lsls	r3, r0, #21
    e4e0:	0d5b      	lsrs	r3, r3, #21
    e4e2:	2b01      	cmp	r3, #1
    e4e4:	dc00      	bgt.n	e4e8 <__aeabi_dadd+0x2a4>
    e4e6:	e0ad      	b.n	e644 <__aeabi_dadd+0x400>
    e4e8:	4b36      	ldr	r3, [pc, #216]	; (e5c4 <__aeabi_dadd+0x380>)
    e4ea:	4298      	cmp	r0, r3
    e4ec:	d100      	bne.n	e4f0 <__aeabi_dadd+0x2ac>
    e4ee:	e0d1      	b.n	e694 <__aeabi_dadd+0x450>
    e4f0:	18ba      	adds	r2, r7, r2
    e4f2:	42ba      	cmp	r2, r7
    e4f4:	41bf      	sbcs	r7, r7
    e4f6:	1864      	adds	r4, r4, r1
    e4f8:	427f      	negs	r7, r7
    e4fa:	19e4      	adds	r4, r4, r7
    e4fc:	07e7      	lsls	r7, r4, #31
    e4fe:	0852      	lsrs	r2, r2, #1
    e500:	4317      	orrs	r7, r2
    e502:	0864      	lsrs	r4, r4, #1
    e504:	0006      	movs	r6, r0
    e506:	e721      	b.n	e34c <__aeabi_dadd+0x108>
    e508:	482e      	ldr	r0, [pc, #184]	; (e5c4 <__aeabi_dadd+0x380>)
    e50a:	4285      	cmp	r5, r0
    e50c:	d100      	bne.n	e510 <__aeabi_dadd+0x2cc>
    e50e:	e093      	b.n	e638 <__aeabi_dadd+0x3f4>
    e510:	001d      	movs	r5, r3
    e512:	e6d0      	b.n	e2b6 <__aeabi_dadd+0x72>
    e514:	0029      	movs	r1, r5
    e516:	3e1f      	subs	r6, #31
    e518:	40f1      	lsrs	r1, r6
    e51a:	2b20      	cmp	r3, #32
    e51c:	d100      	bne.n	e520 <__aeabi_dadd+0x2dc>
    e51e:	e08d      	b.n	e63c <__aeabi_dadd+0x3f8>
    e520:	2240      	movs	r2, #64	; 0x40
    e522:	1ad3      	subs	r3, r2, r3
    e524:	409d      	lsls	r5, r3
    e526:	432f      	orrs	r7, r5
    e528:	1e7d      	subs	r5, r7, #1
    e52a:	41af      	sbcs	r7, r5
    e52c:	2400      	movs	r4, #0
    e52e:	430f      	orrs	r7, r1
    e530:	2600      	movs	r6, #0
    e532:	e744      	b.n	e3be <__aeabi_dadd+0x17a>
    e534:	002b      	movs	r3, r5
    e536:	0008      	movs	r0, r1
    e538:	3b20      	subs	r3, #32
    e53a:	40d8      	lsrs	r0, r3
    e53c:	0003      	movs	r3, r0
    e53e:	2d20      	cmp	r5, #32
    e540:	d100      	bne.n	e544 <__aeabi_dadd+0x300>
    e542:	e07d      	b.n	e640 <__aeabi_dadd+0x3fc>
    e544:	2040      	movs	r0, #64	; 0x40
    e546:	1b45      	subs	r5, r0, r5
    e548:	40a9      	lsls	r1, r5
    e54a:	430a      	orrs	r2, r1
    e54c:	1e51      	subs	r1, r2, #1
    e54e:	418a      	sbcs	r2, r1
    e550:	2100      	movs	r1, #0
    e552:	431a      	orrs	r2, r3
    e554:	e6c7      	b.n	e2e6 <__aeabi_dadd+0xa2>
    e556:	2e00      	cmp	r6, #0
    e558:	d050      	beq.n	e5fc <__aeabi_dadd+0x3b8>
    e55a:	4e1a      	ldr	r6, [pc, #104]	; (e5c4 <__aeabi_dadd+0x380>)
    e55c:	42b0      	cmp	r0, r6
    e55e:	d057      	beq.n	e610 <__aeabi_dadd+0x3cc>
    e560:	2680      	movs	r6, #128	; 0x80
    e562:	426b      	negs	r3, r5
    e564:	4699      	mov	r9, r3
    e566:	0436      	lsls	r6, r6, #16
    e568:	4334      	orrs	r4, r6
    e56a:	464b      	mov	r3, r9
    e56c:	2b38      	cmp	r3, #56	; 0x38
    e56e:	dd00      	ble.n	e572 <__aeabi_dadd+0x32e>
    e570:	e0d6      	b.n	e720 <__aeabi_dadd+0x4dc>
    e572:	2b1f      	cmp	r3, #31
    e574:	dd00      	ble.n	e578 <__aeabi_dadd+0x334>
    e576:	e135      	b.n	e7e4 <__aeabi_dadd+0x5a0>
    e578:	2620      	movs	r6, #32
    e57a:	1af5      	subs	r5, r6, r3
    e57c:	0026      	movs	r6, r4
    e57e:	40ae      	lsls	r6, r5
    e580:	46b2      	mov	sl, r6
    e582:	003e      	movs	r6, r7
    e584:	40de      	lsrs	r6, r3
    e586:	46ac      	mov	ip, r5
    e588:	0035      	movs	r5, r6
    e58a:	4656      	mov	r6, sl
    e58c:	432e      	orrs	r6, r5
    e58e:	4665      	mov	r5, ip
    e590:	40af      	lsls	r7, r5
    e592:	1e7d      	subs	r5, r7, #1
    e594:	41af      	sbcs	r7, r5
    e596:	40dc      	lsrs	r4, r3
    e598:	4337      	orrs	r7, r6
    e59a:	1bd7      	subs	r7, r2, r7
    e59c:	42ba      	cmp	r2, r7
    e59e:	4192      	sbcs	r2, r2
    e5a0:	1b0c      	subs	r4, r1, r4
    e5a2:	4252      	negs	r2, r2
    e5a4:	1aa4      	subs	r4, r4, r2
    e5a6:	0006      	movs	r6, r0
    e5a8:	46d8      	mov	r8, fp
    e5aa:	e6a3      	b.n	e2f4 <__aeabi_dadd+0xb0>
    e5ac:	4664      	mov	r4, ip
    e5ae:	4667      	mov	r7, ip
    e5b0:	432c      	orrs	r4, r5
    e5b2:	d000      	beq.n	e5b6 <__aeabi_dadd+0x372>
    e5b4:	e6a2      	b.n	e2fc <__aeabi_dadd+0xb8>
    e5b6:	2500      	movs	r5, #0
    e5b8:	2600      	movs	r6, #0
    e5ba:	2700      	movs	r7, #0
    e5bc:	e706      	b.n	e3cc <__aeabi_dadd+0x188>
    e5be:	001e      	movs	r6, r3
    e5c0:	e6c4      	b.n	e34c <__aeabi_dadd+0x108>
    e5c2:	46c0      	nop			; (mov r8, r8)
    e5c4:	000007ff 	.word	0x000007ff
    e5c8:	ff7fffff 	.word	0xff7fffff
    e5cc:	800fffff 	.word	0x800fffff
    e5d0:	2b1f      	cmp	r3, #31
    e5d2:	dc63      	bgt.n	e69c <__aeabi_dadd+0x458>
    e5d4:	2020      	movs	r0, #32
    e5d6:	1ac3      	subs	r3, r0, r3
    e5d8:	0008      	movs	r0, r1
    e5da:	4098      	lsls	r0, r3
    e5dc:	469c      	mov	ip, r3
    e5de:	4683      	mov	fp, r0
    e5e0:	4653      	mov	r3, sl
    e5e2:	0010      	movs	r0, r2
    e5e4:	40d8      	lsrs	r0, r3
    e5e6:	0003      	movs	r3, r0
    e5e8:	4658      	mov	r0, fp
    e5ea:	4318      	orrs	r0, r3
    e5ec:	4663      	mov	r3, ip
    e5ee:	409a      	lsls	r2, r3
    e5f0:	1e53      	subs	r3, r2, #1
    e5f2:	419a      	sbcs	r2, r3
    e5f4:	4653      	mov	r3, sl
    e5f6:	4302      	orrs	r2, r0
    e5f8:	40d9      	lsrs	r1, r3
    e5fa:	e703      	b.n	e404 <__aeabi_dadd+0x1c0>
    e5fc:	0026      	movs	r6, r4
    e5fe:	433e      	orrs	r6, r7
    e600:	d006      	beq.n	e610 <__aeabi_dadd+0x3cc>
    e602:	43eb      	mvns	r3, r5
    e604:	4699      	mov	r9, r3
    e606:	2b00      	cmp	r3, #0
    e608:	d0c7      	beq.n	e59a <__aeabi_dadd+0x356>
    e60a:	4e94      	ldr	r6, [pc, #592]	; (e85c <__aeabi_dadd+0x618>)
    e60c:	42b0      	cmp	r0, r6
    e60e:	d1ac      	bne.n	e56a <__aeabi_dadd+0x326>
    e610:	000c      	movs	r4, r1
    e612:	0017      	movs	r7, r2
    e614:	0006      	movs	r6, r0
    e616:	46d8      	mov	r8, fp
    e618:	e698      	b.n	e34c <__aeabi_dadd+0x108>
    e61a:	4b90      	ldr	r3, [pc, #576]	; (e85c <__aeabi_dadd+0x618>)
    e61c:	459a      	cmp	sl, r3
    e61e:	d00b      	beq.n	e638 <__aeabi_dadd+0x3f4>
    e620:	4682      	mov	sl, r0
    e622:	e6e7      	b.n	e3f4 <__aeabi_dadd+0x1b0>
    e624:	2800      	cmp	r0, #0
    e626:	d000      	beq.n	e62a <__aeabi_dadd+0x3e6>
    e628:	e09e      	b.n	e768 <__aeabi_dadd+0x524>
    e62a:	0018      	movs	r0, r3
    e62c:	4310      	orrs	r0, r2
    e62e:	d100      	bne.n	e632 <__aeabi_dadd+0x3ee>
    e630:	e0e9      	b.n	e806 <__aeabi_dadd+0x5c2>
    e632:	001c      	movs	r4, r3
    e634:	0017      	movs	r7, r2
    e636:	46d8      	mov	r8, fp
    e638:	4e88      	ldr	r6, [pc, #544]	; (e85c <__aeabi_dadd+0x618>)
    e63a:	e687      	b.n	e34c <__aeabi_dadd+0x108>
    e63c:	2500      	movs	r5, #0
    e63e:	e772      	b.n	e526 <__aeabi_dadd+0x2e2>
    e640:	2100      	movs	r1, #0
    e642:	e782      	b.n	e54a <__aeabi_dadd+0x306>
    e644:	0023      	movs	r3, r4
    e646:	433b      	orrs	r3, r7
    e648:	2e00      	cmp	r6, #0
    e64a:	d000      	beq.n	e64e <__aeabi_dadd+0x40a>
    e64c:	e0ab      	b.n	e7a6 <__aeabi_dadd+0x562>
    e64e:	2b00      	cmp	r3, #0
    e650:	d100      	bne.n	e654 <__aeabi_dadd+0x410>
    e652:	e0e7      	b.n	e824 <__aeabi_dadd+0x5e0>
    e654:	000b      	movs	r3, r1
    e656:	4313      	orrs	r3, r2
    e658:	d100      	bne.n	e65c <__aeabi_dadd+0x418>
    e65a:	e677      	b.n	e34c <__aeabi_dadd+0x108>
    e65c:	18ba      	adds	r2, r7, r2
    e65e:	42ba      	cmp	r2, r7
    e660:	41bf      	sbcs	r7, r7
    e662:	1864      	adds	r4, r4, r1
    e664:	427f      	negs	r7, r7
    e666:	19e4      	adds	r4, r4, r7
    e668:	0223      	lsls	r3, r4, #8
    e66a:	d400      	bmi.n	e66e <__aeabi_dadd+0x42a>
    e66c:	e0f2      	b.n	e854 <__aeabi_dadd+0x610>
    e66e:	4b7c      	ldr	r3, [pc, #496]	; (e860 <__aeabi_dadd+0x61c>)
    e670:	0017      	movs	r7, r2
    e672:	401c      	ands	r4, r3
    e674:	0006      	movs	r6, r0
    e676:	e669      	b.n	e34c <__aeabi_dadd+0x108>
    e678:	0020      	movs	r0, r4
    e67a:	4338      	orrs	r0, r7
    e67c:	2e00      	cmp	r6, #0
    e67e:	d1d1      	bne.n	e624 <__aeabi_dadd+0x3e0>
    e680:	2800      	cmp	r0, #0
    e682:	d15b      	bne.n	e73c <__aeabi_dadd+0x4f8>
    e684:	001c      	movs	r4, r3
    e686:	4314      	orrs	r4, r2
    e688:	d100      	bne.n	e68c <__aeabi_dadd+0x448>
    e68a:	e0a8      	b.n	e7de <__aeabi_dadd+0x59a>
    e68c:	001c      	movs	r4, r3
    e68e:	0017      	movs	r7, r2
    e690:	46d8      	mov	r8, fp
    e692:	e65b      	b.n	e34c <__aeabi_dadd+0x108>
    e694:	0006      	movs	r6, r0
    e696:	2400      	movs	r4, #0
    e698:	2700      	movs	r7, #0
    e69a:	e697      	b.n	e3cc <__aeabi_dadd+0x188>
    e69c:	4650      	mov	r0, sl
    e69e:	000b      	movs	r3, r1
    e6a0:	3820      	subs	r0, #32
    e6a2:	40c3      	lsrs	r3, r0
    e6a4:	4699      	mov	r9, r3
    e6a6:	4653      	mov	r3, sl
    e6a8:	2b20      	cmp	r3, #32
    e6aa:	d100      	bne.n	e6ae <__aeabi_dadd+0x46a>
    e6ac:	e095      	b.n	e7da <__aeabi_dadd+0x596>
    e6ae:	2340      	movs	r3, #64	; 0x40
    e6b0:	4650      	mov	r0, sl
    e6b2:	1a1b      	subs	r3, r3, r0
    e6b4:	4099      	lsls	r1, r3
    e6b6:	430a      	orrs	r2, r1
    e6b8:	1e51      	subs	r1, r2, #1
    e6ba:	418a      	sbcs	r2, r1
    e6bc:	464b      	mov	r3, r9
    e6be:	2100      	movs	r1, #0
    e6c0:	431a      	orrs	r2, r3
    e6c2:	e69f      	b.n	e404 <__aeabi_dadd+0x1c0>
    e6c4:	2e00      	cmp	r6, #0
    e6c6:	d130      	bne.n	e72a <__aeabi_dadd+0x4e6>
    e6c8:	0026      	movs	r6, r4
    e6ca:	433e      	orrs	r6, r7
    e6cc:	d067      	beq.n	e79e <__aeabi_dadd+0x55a>
    e6ce:	43db      	mvns	r3, r3
    e6d0:	469a      	mov	sl, r3
    e6d2:	2b00      	cmp	r3, #0
    e6d4:	d01c      	beq.n	e710 <__aeabi_dadd+0x4cc>
    e6d6:	4e61      	ldr	r6, [pc, #388]	; (e85c <__aeabi_dadd+0x618>)
    e6d8:	42b0      	cmp	r0, r6
    e6da:	d060      	beq.n	e79e <__aeabi_dadd+0x55a>
    e6dc:	4653      	mov	r3, sl
    e6de:	2b38      	cmp	r3, #56	; 0x38
    e6e0:	dd00      	ble.n	e6e4 <__aeabi_dadd+0x4a0>
    e6e2:	e096      	b.n	e812 <__aeabi_dadd+0x5ce>
    e6e4:	2b1f      	cmp	r3, #31
    e6e6:	dd00      	ble.n	e6ea <__aeabi_dadd+0x4a6>
    e6e8:	e09f      	b.n	e82a <__aeabi_dadd+0x5e6>
    e6ea:	2620      	movs	r6, #32
    e6ec:	1af3      	subs	r3, r6, r3
    e6ee:	0026      	movs	r6, r4
    e6f0:	409e      	lsls	r6, r3
    e6f2:	469c      	mov	ip, r3
    e6f4:	46b3      	mov	fp, r6
    e6f6:	4653      	mov	r3, sl
    e6f8:	003e      	movs	r6, r7
    e6fa:	40de      	lsrs	r6, r3
    e6fc:	0033      	movs	r3, r6
    e6fe:	465e      	mov	r6, fp
    e700:	431e      	orrs	r6, r3
    e702:	4663      	mov	r3, ip
    e704:	409f      	lsls	r7, r3
    e706:	1e7b      	subs	r3, r7, #1
    e708:	419f      	sbcs	r7, r3
    e70a:	4653      	mov	r3, sl
    e70c:	40dc      	lsrs	r4, r3
    e70e:	4337      	orrs	r7, r6
    e710:	18bf      	adds	r7, r7, r2
    e712:	4297      	cmp	r7, r2
    e714:	4192      	sbcs	r2, r2
    e716:	1864      	adds	r4, r4, r1
    e718:	4252      	negs	r2, r2
    e71a:	18a4      	adds	r4, r4, r2
    e71c:	0006      	movs	r6, r0
    e71e:	e678      	b.n	e412 <__aeabi_dadd+0x1ce>
    e720:	4327      	orrs	r7, r4
    e722:	1e7c      	subs	r4, r7, #1
    e724:	41a7      	sbcs	r7, r4
    e726:	2400      	movs	r4, #0
    e728:	e737      	b.n	e59a <__aeabi_dadd+0x356>
    e72a:	4e4c      	ldr	r6, [pc, #304]	; (e85c <__aeabi_dadd+0x618>)
    e72c:	42b0      	cmp	r0, r6
    e72e:	d036      	beq.n	e79e <__aeabi_dadd+0x55a>
    e730:	2680      	movs	r6, #128	; 0x80
    e732:	425b      	negs	r3, r3
    e734:	0436      	lsls	r6, r6, #16
    e736:	469a      	mov	sl, r3
    e738:	4334      	orrs	r4, r6
    e73a:	e7cf      	b.n	e6dc <__aeabi_dadd+0x498>
    e73c:	0018      	movs	r0, r3
    e73e:	4310      	orrs	r0, r2
    e740:	d100      	bne.n	e744 <__aeabi_dadd+0x500>
    e742:	e603      	b.n	e34c <__aeabi_dadd+0x108>
    e744:	1ab8      	subs	r0, r7, r2
    e746:	4684      	mov	ip, r0
    e748:	4567      	cmp	r7, ip
    e74a:	41ad      	sbcs	r5, r5
    e74c:	1ae0      	subs	r0, r4, r3
    e74e:	426d      	negs	r5, r5
    e750:	1b40      	subs	r0, r0, r5
    e752:	0205      	lsls	r5, r0, #8
    e754:	d400      	bmi.n	e758 <__aeabi_dadd+0x514>
    e756:	e62c      	b.n	e3b2 <__aeabi_dadd+0x16e>
    e758:	1bd7      	subs	r7, r2, r7
    e75a:	42ba      	cmp	r2, r7
    e75c:	4192      	sbcs	r2, r2
    e75e:	1b1c      	subs	r4, r3, r4
    e760:	4252      	negs	r2, r2
    e762:	1aa4      	subs	r4, r4, r2
    e764:	46d8      	mov	r8, fp
    e766:	e5f1      	b.n	e34c <__aeabi_dadd+0x108>
    e768:	0018      	movs	r0, r3
    e76a:	4310      	orrs	r0, r2
    e76c:	d100      	bne.n	e770 <__aeabi_dadd+0x52c>
    e76e:	e763      	b.n	e638 <__aeabi_dadd+0x3f4>
    e770:	08f8      	lsrs	r0, r7, #3
    e772:	0767      	lsls	r7, r4, #29
    e774:	4307      	orrs	r7, r0
    e776:	2080      	movs	r0, #128	; 0x80
    e778:	08e4      	lsrs	r4, r4, #3
    e77a:	0300      	lsls	r0, r0, #12
    e77c:	4204      	tst	r4, r0
    e77e:	d008      	beq.n	e792 <__aeabi_dadd+0x54e>
    e780:	08dd      	lsrs	r5, r3, #3
    e782:	4205      	tst	r5, r0
    e784:	d105      	bne.n	e792 <__aeabi_dadd+0x54e>
    e786:	08d2      	lsrs	r2, r2, #3
    e788:	0759      	lsls	r1, r3, #29
    e78a:	4311      	orrs	r1, r2
    e78c:	000f      	movs	r7, r1
    e78e:	002c      	movs	r4, r5
    e790:	46d8      	mov	r8, fp
    e792:	0f7b      	lsrs	r3, r7, #29
    e794:	00e4      	lsls	r4, r4, #3
    e796:	431c      	orrs	r4, r3
    e798:	00ff      	lsls	r7, r7, #3
    e79a:	4e30      	ldr	r6, [pc, #192]	; (e85c <__aeabi_dadd+0x618>)
    e79c:	e5d6      	b.n	e34c <__aeabi_dadd+0x108>
    e79e:	000c      	movs	r4, r1
    e7a0:	0017      	movs	r7, r2
    e7a2:	0006      	movs	r6, r0
    e7a4:	e5d2      	b.n	e34c <__aeabi_dadd+0x108>
    e7a6:	2b00      	cmp	r3, #0
    e7a8:	d038      	beq.n	e81c <__aeabi_dadd+0x5d8>
    e7aa:	000b      	movs	r3, r1
    e7ac:	4313      	orrs	r3, r2
    e7ae:	d100      	bne.n	e7b2 <__aeabi_dadd+0x56e>
    e7b0:	e742      	b.n	e638 <__aeabi_dadd+0x3f4>
    e7b2:	08f8      	lsrs	r0, r7, #3
    e7b4:	0767      	lsls	r7, r4, #29
    e7b6:	4307      	orrs	r7, r0
    e7b8:	2080      	movs	r0, #128	; 0x80
    e7ba:	08e4      	lsrs	r4, r4, #3
    e7bc:	0300      	lsls	r0, r0, #12
    e7be:	4204      	tst	r4, r0
    e7c0:	d0e7      	beq.n	e792 <__aeabi_dadd+0x54e>
    e7c2:	08cb      	lsrs	r3, r1, #3
    e7c4:	4203      	tst	r3, r0
    e7c6:	d1e4      	bne.n	e792 <__aeabi_dadd+0x54e>
    e7c8:	08d2      	lsrs	r2, r2, #3
    e7ca:	0749      	lsls	r1, r1, #29
    e7cc:	4311      	orrs	r1, r2
    e7ce:	000f      	movs	r7, r1
    e7d0:	001c      	movs	r4, r3
    e7d2:	e7de      	b.n	e792 <__aeabi_dadd+0x54e>
    e7d4:	2700      	movs	r7, #0
    e7d6:	2400      	movs	r4, #0
    e7d8:	e5d5      	b.n	e386 <__aeabi_dadd+0x142>
    e7da:	2100      	movs	r1, #0
    e7dc:	e76b      	b.n	e6b6 <__aeabi_dadd+0x472>
    e7de:	2500      	movs	r5, #0
    e7e0:	2700      	movs	r7, #0
    e7e2:	e5f3      	b.n	e3cc <__aeabi_dadd+0x188>
    e7e4:	464e      	mov	r6, r9
    e7e6:	0025      	movs	r5, r4
    e7e8:	3e20      	subs	r6, #32
    e7ea:	40f5      	lsrs	r5, r6
    e7ec:	464b      	mov	r3, r9
    e7ee:	002e      	movs	r6, r5
    e7f0:	2b20      	cmp	r3, #32
    e7f2:	d02d      	beq.n	e850 <__aeabi_dadd+0x60c>
    e7f4:	2540      	movs	r5, #64	; 0x40
    e7f6:	1aed      	subs	r5, r5, r3
    e7f8:	40ac      	lsls	r4, r5
    e7fa:	4327      	orrs	r7, r4
    e7fc:	1e7c      	subs	r4, r7, #1
    e7fe:	41a7      	sbcs	r7, r4
    e800:	2400      	movs	r4, #0
    e802:	4337      	orrs	r7, r6
    e804:	e6c9      	b.n	e59a <__aeabi_dadd+0x356>
    e806:	2480      	movs	r4, #128	; 0x80
    e808:	2500      	movs	r5, #0
    e80a:	0324      	lsls	r4, r4, #12
    e80c:	4e13      	ldr	r6, [pc, #76]	; (e85c <__aeabi_dadd+0x618>)
    e80e:	2700      	movs	r7, #0
    e810:	e5dc      	b.n	e3cc <__aeabi_dadd+0x188>
    e812:	4327      	orrs	r7, r4
    e814:	1e7c      	subs	r4, r7, #1
    e816:	41a7      	sbcs	r7, r4
    e818:	2400      	movs	r4, #0
    e81a:	e779      	b.n	e710 <__aeabi_dadd+0x4cc>
    e81c:	000c      	movs	r4, r1
    e81e:	0017      	movs	r7, r2
    e820:	4e0e      	ldr	r6, [pc, #56]	; (e85c <__aeabi_dadd+0x618>)
    e822:	e593      	b.n	e34c <__aeabi_dadd+0x108>
    e824:	000c      	movs	r4, r1
    e826:	0017      	movs	r7, r2
    e828:	e590      	b.n	e34c <__aeabi_dadd+0x108>
    e82a:	4656      	mov	r6, sl
    e82c:	0023      	movs	r3, r4
    e82e:	3e20      	subs	r6, #32
    e830:	40f3      	lsrs	r3, r6
    e832:	4699      	mov	r9, r3
    e834:	4653      	mov	r3, sl
    e836:	2b20      	cmp	r3, #32
    e838:	d00e      	beq.n	e858 <__aeabi_dadd+0x614>
    e83a:	2340      	movs	r3, #64	; 0x40
    e83c:	4656      	mov	r6, sl
    e83e:	1b9b      	subs	r3, r3, r6
    e840:	409c      	lsls	r4, r3
    e842:	4327      	orrs	r7, r4
    e844:	1e7c      	subs	r4, r7, #1
    e846:	41a7      	sbcs	r7, r4
    e848:	464b      	mov	r3, r9
    e84a:	2400      	movs	r4, #0
    e84c:	431f      	orrs	r7, r3
    e84e:	e75f      	b.n	e710 <__aeabi_dadd+0x4cc>
    e850:	2400      	movs	r4, #0
    e852:	e7d2      	b.n	e7fa <__aeabi_dadd+0x5b6>
    e854:	0017      	movs	r7, r2
    e856:	e5b2      	b.n	e3be <__aeabi_dadd+0x17a>
    e858:	2400      	movs	r4, #0
    e85a:	e7f2      	b.n	e842 <__aeabi_dadd+0x5fe>
    e85c:	000007ff 	.word	0x000007ff
    e860:	ff7fffff 	.word	0xff7fffff

0000e864 <__aeabi_ddiv>:
    e864:	b5f0      	push	{r4, r5, r6, r7, lr}
    e866:	4657      	mov	r7, sl
    e868:	4645      	mov	r5, r8
    e86a:	46de      	mov	lr, fp
    e86c:	464e      	mov	r6, r9
    e86e:	b5e0      	push	{r5, r6, r7, lr}
    e870:	004c      	lsls	r4, r1, #1
    e872:	030e      	lsls	r6, r1, #12
    e874:	b087      	sub	sp, #28
    e876:	4683      	mov	fp, r0
    e878:	4692      	mov	sl, r2
    e87a:	001d      	movs	r5, r3
    e87c:	4680      	mov	r8, r0
    e87e:	0b36      	lsrs	r6, r6, #12
    e880:	0d64      	lsrs	r4, r4, #21
    e882:	0fcf      	lsrs	r7, r1, #31
    e884:	2c00      	cmp	r4, #0
    e886:	d04f      	beq.n	e928 <__aeabi_ddiv+0xc4>
    e888:	4b6f      	ldr	r3, [pc, #444]	; (ea48 <__aeabi_ddiv+0x1e4>)
    e88a:	429c      	cmp	r4, r3
    e88c:	d035      	beq.n	e8fa <__aeabi_ddiv+0x96>
    e88e:	2380      	movs	r3, #128	; 0x80
    e890:	0f42      	lsrs	r2, r0, #29
    e892:	041b      	lsls	r3, r3, #16
    e894:	00f6      	lsls	r6, r6, #3
    e896:	4313      	orrs	r3, r2
    e898:	4333      	orrs	r3, r6
    e89a:	4699      	mov	r9, r3
    e89c:	00c3      	lsls	r3, r0, #3
    e89e:	4698      	mov	r8, r3
    e8a0:	4b6a      	ldr	r3, [pc, #424]	; (ea4c <__aeabi_ddiv+0x1e8>)
    e8a2:	2600      	movs	r6, #0
    e8a4:	469c      	mov	ip, r3
    e8a6:	2300      	movs	r3, #0
    e8a8:	4464      	add	r4, ip
    e8aa:	9303      	str	r3, [sp, #12]
    e8ac:	032b      	lsls	r3, r5, #12
    e8ae:	0b1b      	lsrs	r3, r3, #12
    e8b0:	469b      	mov	fp, r3
    e8b2:	006b      	lsls	r3, r5, #1
    e8b4:	0fed      	lsrs	r5, r5, #31
    e8b6:	4650      	mov	r0, sl
    e8b8:	0d5b      	lsrs	r3, r3, #21
    e8ba:	9501      	str	r5, [sp, #4]
    e8bc:	d05e      	beq.n	e97c <__aeabi_ddiv+0x118>
    e8be:	4a62      	ldr	r2, [pc, #392]	; (ea48 <__aeabi_ddiv+0x1e4>)
    e8c0:	4293      	cmp	r3, r2
    e8c2:	d053      	beq.n	e96c <__aeabi_ddiv+0x108>
    e8c4:	465a      	mov	r2, fp
    e8c6:	00d1      	lsls	r1, r2, #3
    e8c8:	2280      	movs	r2, #128	; 0x80
    e8ca:	0f40      	lsrs	r0, r0, #29
    e8cc:	0412      	lsls	r2, r2, #16
    e8ce:	4302      	orrs	r2, r0
    e8d0:	430a      	orrs	r2, r1
    e8d2:	4693      	mov	fp, r2
    e8d4:	4652      	mov	r2, sl
    e8d6:	00d1      	lsls	r1, r2, #3
    e8d8:	4a5c      	ldr	r2, [pc, #368]	; (ea4c <__aeabi_ddiv+0x1e8>)
    e8da:	4694      	mov	ip, r2
    e8dc:	2200      	movs	r2, #0
    e8de:	4463      	add	r3, ip
    e8e0:	0038      	movs	r0, r7
    e8e2:	4068      	eors	r0, r5
    e8e4:	4684      	mov	ip, r0
    e8e6:	9002      	str	r0, [sp, #8]
    e8e8:	1ae4      	subs	r4, r4, r3
    e8ea:	4316      	orrs	r6, r2
    e8ec:	2e0f      	cmp	r6, #15
    e8ee:	d900      	bls.n	e8f2 <__aeabi_ddiv+0x8e>
    e8f0:	e0b4      	b.n	ea5c <__aeabi_ddiv+0x1f8>
    e8f2:	4b57      	ldr	r3, [pc, #348]	; (ea50 <__aeabi_ddiv+0x1ec>)
    e8f4:	00b6      	lsls	r6, r6, #2
    e8f6:	599b      	ldr	r3, [r3, r6]
    e8f8:	469f      	mov	pc, r3
    e8fa:	0003      	movs	r3, r0
    e8fc:	4333      	orrs	r3, r6
    e8fe:	4699      	mov	r9, r3
    e900:	d16c      	bne.n	e9dc <__aeabi_ddiv+0x178>
    e902:	2300      	movs	r3, #0
    e904:	4698      	mov	r8, r3
    e906:	3302      	adds	r3, #2
    e908:	2608      	movs	r6, #8
    e90a:	9303      	str	r3, [sp, #12]
    e90c:	e7ce      	b.n	e8ac <__aeabi_ddiv+0x48>
    e90e:	46cb      	mov	fp, r9
    e910:	4641      	mov	r1, r8
    e912:	9a03      	ldr	r2, [sp, #12]
    e914:	9701      	str	r7, [sp, #4]
    e916:	2a02      	cmp	r2, #2
    e918:	d165      	bne.n	e9e6 <__aeabi_ddiv+0x182>
    e91a:	9b01      	ldr	r3, [sp, #4]
    e91c:	4c4a      	ldr	r4, [pc, #296]	; (ea48 <__aeabi_ddiv+0x1e4>)
    e91e:	469c      	mov	ip, r3
    e920:	2300      	movs	r3, #0
    e922:	2200      	movs	r2, #0
    e924:	4698      	mov	r8, r3
    e926:	e06b      	b.n	ea00 <__aeabi_ddiv+0x19c>
    e928:	0003      	movs	r3, r0
    e92a:	4333      	orrs	r3, r6
    e92c:	4699      	mov	r9, r3
    e92e:	d04e      	beq.n	e9ce <__aeabi_ddiv+0x16a>
    e930:	2e00      	cmp	r6, #0
    e932:	d100      	bne.n	e936 <__aeabi_ddiv+0xd2>
    e934:	e1bc      	b.n	ecb0 <__aeabi_ddiv+0x44c>
    e936:	0030      	movs	r0, r6
    e938:	f001 fb08 	bl	ff4c <__clzsi2>
    e93c:	0003      	movs	r3, r0
    e93e:	3b0b      	subs	r3, #11
    e940:	2b1c      	cmp	r3, #28
    e942:	dd00      	ble.n	e946 <__aeabi_ddiv+0xe2>
    e944:	e1ac      	b.n	eca0 <__aeabi_ddiv+0x43c>
    e946:	221d      	movs	r2, #29
    e948:	1ad3      	subs	r3, r2, r3
    e94a:	465a      	mov	r2, fp
    e94c:	0001      	movs	r1, r0
    e94e:	40da      	lsrs	r2, r3
    e950:	3908      	subs	r1, #8
    e952:	408e      	lsls	r6, r1
    e954:	0013      	movs	r3, r2
    e956:	4333      	orrs	r3, r6
    e958:	4699      	mov	r9, r3
    e95a:	465b      	mov	r3, fp
    e95c:	408b      	lsls	r3, r1
    e95e:	4698      	mov	r8, r3
    e960:	2300      	movs	r3, #0
    e962:	4c3c      	ldr	r4, [pc, #240]	; (ea54 <__aeabi_ddiv+0x1f0>)
    e964:	2600      	movs	r6, #0
    e966:	1a24      	subs	r4, r4, r0
    e968:	9303      	str	r3, [sp, #12]
    e96a:	e79f      	b.n	e8ac <__aeabi_ddiv+0x48>
    e96c:	4651      	mov	r1, sl
    e96e:	465a      	mov	r2, fp
    e970:	4311      	orrs	r1, r2
    e972:	d129      	bne.n	e9c8 <__aeabi_ddiv+0x164>
    e974:	2200      	movs	r2, #0
    e976:	4693      	mov	fp, r2
    e978:	3202      	adds	r2, #2
    e97a:	e7b1      	b.n	e8e0 <__aeabi_ddiv+0x7c>
    e97c:	4659      	mov	r1, fp
    e97e:	4301      	orrs	r1, r0
    e980:	d01e      	beq.n	e9c0 <__aeabi_ddiv+0x15c>
    e982:	465b      	mov	r3, fp
    e984:	2b00      	cmp	r3, #0
    e986:	d100      	bne.n	e98a <__aeabi_ddiv+0x126>
    e988:	e19e      	b.n	ecc8 <__aeabi_ddiv+0x464>
    e98a:	4658      	mov	r0, fp
    e98c:	f001 fade 	bl	ff4c <__clzsi2>
    e990:	0003      	movs	r3, r0
    e992:	3b0b      	subs	r3, #11
    e994:	2b1c      	cmp	r3, #28
    e996:	dd00      	ble.n	e99a <__aeabi_ddiv+0x136>
    e998:	e18f      	b.n	ecba <__aeabi_ddiv+0x456>
    e99a:	0002      	movs	r2, r0
    e99c:	4659      	mov	r1, fp
    e99e:	3a08      	subs	r2, #8
    e9a0:	4091      	lsls	r1, r2
    e9a2:	468b      	mov	fp, r1
    e9a4:	211d      	movs	r1, #29
    e9a6:	1acb      	subs	r3, r1, r3
    e9a8:	4651      	mov	r1, sl
    e9aa:	40d9      	lsrs	r1, r3
    e9ac:	000b      	movs	r3, r1
    e9ae:	4659      	mov	r1, fp
    e9b0:	430b      	orrs	r3, r1
    e9b2:	4651      	mov	r1, sl
    e9b4:	469b      	mov	fp, r3
    e9b6:	4091      	lsls	r1, r2
    e9b8:	4b26      	ldr	r3, [pc, #152]	; (ea54 <__aeabi_ddiv+0x1f0>)
    e9ba:	2200      	movs	r2, #0
    e9bc:	1a1b      	subs	r3, r3, r0
    e9be:	e78f      	b.n	e8e0 <__aeabi_ddiv+0x7c>
    e9c0:	2300      	movs	r3, #0
    e9c2:	2201      	movs	r2, #1
    e9c4:	469b      	mov	fp, r3
    e9c6:	e78b      	b.n	e8e0 <__aeabi_ddiv+0x7c>
    e9c8:	4651      	mov	r1, sl
    e9ca:	2203      	movs	r2, #3
    e9cc:	e788      	b.n	e8e0 <__aeabi_ddiv+0x7c>
    e9ce:	2300      	movs	r3, #0
    e9d0:	4698      	mov	r8, r3
    e9d2:	3301      	adds	r3, #1
    e9d4:	2604      	movs	r6, #4
    e9d6:	2400      	movs	r4, #0
    e9d8:	9303      	str	r3, [sp, #12]
    e9da:	e767      	b.n	e8ac <__aeabi_ddiv+0x48>
    e9dc:	2303      	movs	r3, #3
    e9de:	46b1      	mov	r9, r6
    e9e0:	9303      	str	r3, [sp, #12]
    e9e2:	260c      	movs	r6, #12
    e9e4:	e762      	b.n	e8ac <__aeabi_ddiv+0x48>
    e9e6:	2a03      	cmp	r2, #3
    e9e8:	d100      	bne.n	e9ec <__aeabi_ddiv+0x188>
    e9ea:	e25c      	b.n	eea6 <__aeabi_ddiv+0x642>
    e9ec:	9b01      	ldr	r3, [sp, #4]
    e9ee:	2a01      	cmp	r2, #1
    e9f0:	d000      	beq.n	e9f4 <__aeabi_ddiv+0x190>
    e9f2:	e1e4      	b.n	edbe <__aeabi_ddiv+0x55a>
    e9f4:	4013      	ands	r3, r2
    e9f6:	469c      	mov	ip, r3
    e9f8:	2300      	movs	r3, #0
    e9fa:	2400      	movs	r4, #0
    e9fc:	2200      	movs	r2, #0
    e9fe:	4698      	mov	r8, r3
    ea00:	2100      	movs	r1, #0
    ea02:	0312      	lsls	r2, r2, #12
    ea04:	0b13      	lsrs	r3, r2, #12
    ea06:	0d0a      	lsrs	r2, r1, #20
    ea08:	0512      	lsls	r2, r2, #20
    ea0a:	431a      	orrs	r2, r3
    ea0c:	0523      	lsls	r3, r4, #20
    ea0e:	4c12      	ldr	r4, [pc, #72]	; (ea58 <__aeabi_ddiv+0x1f4>)
    ea10:	4640      	mov	r0, r8
    ea12:	4022      	ands	r2, r4
    ea14:	4313      	orrs	r3, r2
    ea16:	4662      	mov	r2, ip
    ea18:	005b      	lsls	r3, r3, #1
    ea1a:	07d2      	lsls	r2, r2, #31
    ea1c:	085b      	lsrs	r3, r3, #1
    ea1e:	4313      	orrs	r3, r2
    ea20:	0019      	movs	r1, r3
    ea22:	b007      	add	sp, #28
    ea24:	bc3c      	pop	{r2, r3, r4, r5}
    ea26:	4690      	mov	r8, r2
    ea28:	4699      	mov	r9, r3
    ea2a:	46a2      	mov	sl, r4
    ea2c:	46ab      	mov	fp, r5
    ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea30:	2300      	movs	r3, #0
    ea32:	2280      	movs	r2, #128	; 0x80
    ea34:	469c      	mov	ip, r3
    ea36:	0312      	lsls	r2, r2, #12
    ea38:	4698      	mov	r8, r3
    ea3a:	4c03      	ldr	r4, [pc, #12]	; (ea48 <__aeabi_ddiv+0x1e4>)
    ea3c:	e7e0      	b.n	ea00 <__aeabi_ddiv+0x19c>
    ea3e:	2300      	movs	r3, #0
    ea40:	4c01      	ldr	r4, [pc, #4]	; (ea48 <__aeabi_ddiv+0x1e4>)
    ea42:	2200      	movs	r2, #0
    ea44:	4698      	mov	r8, r3
    ea46:	e7db      	b.n	ea00 <__aeabi_ddiv+0x19c>
    ea48:	000007ff 	.word	0x000007ff
    ea4c:	fffffc01 	.word	0xfffffc01
    ea50:	00012a00 	.word	0x00012a00
    ea54:	fffffc0d 	.word	0xfffffc0d
    ea58:	800fffff 	.word	0x800fffff
    ea5c:	45d9      	cmp	r9, fp
    ea5e:	d900      	bls.n	ea62 <__aeabi_ddiv+0x1fe>
    ea60:	e139      	b.n	ecd6 <__aeabi_ddiv+0x472>
    ea62:	d100      	bne.n	ea66 <__aeabi_ddiv+0x202>
    ea64:	e134      	b.n	ecd0 <__aeabi_ddiv+0x46c>
    ea66:	2300      	movs	r3, #0
    ea68:	4646      	mov	r6, r8
    ea6a:	464d      	mov	r5, r9
    ea6c:	469a      	mov	sl, r3
    ea6e:	3c01      	subs	r4, #1
    ea70:	465b      	mov	r3, fp
    ea72:	0e0a      	lsrs	r2, r1, #24
    ea74:	021b      	lsls	r3, r3, #8
    ea76:	431a      	orrs	r2, r3
    ea78:	020b      	lsls	r3, r1, #8
    ea7a:	0c17      	lsrs	r7, r2, #16
    ea7c:	9303      	str	r3, [sp, #12]
    ea7e:	0413      	lsls	r3, r2, #16
    ea80:	0c1b      	lsrs	r3, r3, #16
    ea82:	0039      	movs	r1, r7
    ea84:	0028      	movs	r0, r5
    ea86:	4690      	mov	r8, r2
    ea88:	9301      	str	r3, [sp, #4]
    ea8a:	f7fe ff45 	bl	d918 <__udivsi3>
    ea8e:	0002      	movs	r2, r0
    ea90:	9b01      	ldr	r3, [sp, #4]
    ea92:	4683      	mov	fp, r0
    ea94:	435a      	muls	r2, r3
    ea96:	0028      	movs	r0, r5
    ea98:	0039      	movs	r1, r7
    ea9a:	4691      	mov	r9, r2
    ea9c:	f7fe ffc2 	bl	da24 <__aeabi_uidivmod>
    eaa0:	0c35      	lsrs	r5, r6, #16
    eaa2:	0409      	lsls	r1, r1, #16
    eaa4:	430d      	orrs	r5, r1
    eaa6:	45a9      	cmp	r9, r5
    eaa8:	d90d      	bls.n	eac6 <__aeabi_ddiv+0x262>
    eaaa:	465b      	mov	r3, fp
    eaac:	4445      	add	r5, r8
    eaae:	3b01      	subs	r3, #1
    eab0:	45a8      	cmp	r8, r5
    eab2:	d900      	bls.n	eab6 <__aeabi_ddiv+0x252>
    eab4:	e13a      	b.n	ed2c <__aeabi_ddiv+0x4c8>
    eab6:	45a9      	cmp	r9, r5
    eab8:	d800      	bhi.n	eabc <__aeabi_ddiv+0x258>
    eaba:	e137      	b.n	ed2c <__aeabi_ddiv+0x4c8>
    eabc:	2302      	movs	r3, #2
    eabe:	425b      	negs	r3, r3
    eac0:	469c      	mov	ip, r3
    eac2:	4445      	add	r5, r8
    eac4:	44e3      	add	fp, ip
    eac6:	464b      	mov	r3, r9
    eac8:	1aeb      	subs	r3, r5, r3
    eaca:	0039      	movs	r1, r7
    eacc:	0018      	movs	r0, r3
    eace:	9304      	str	r3, [sp, #16]
    ead0:	f7fe ff22 	bl	d918 <__udivsi3>
    ead4:	9b01      	ldr	r3, [sp, #4]
    ead6:	0005      	movs	r5, r0
    ead8:	4343      	muls	r3, r0
    eada:	0039      	movs	r1, r7
    eadc:	9804      	ldr	r0, [sp, #16]
    eade:	4699      	mov	r9, r3
    eae0:	f7fe ffa0 	bl	da24 <__aeabi_uidivmod>
    eae4:	0433      	lsls	r3, r6, #16
    eae6:	0409      	lsls	r1, r1, #16
    eae8:	0c1b      	lsrs	r3, r3, #16
    eaea:	430b      	orrs	r3, r1
    eaec:	4599      	cmp	r9, r3
    eaee:	d909      	bls.n	eb04 <__aeabi_ddiv+0x2a0>
    eaf0:	4443      	add	r3, r8
    eaf2:	1e6a      	subs	r2, r5, #1
    eaf4:	4598      	cmp	r8, r3
    eaf6:	d900      	bls.n	eafa <__aeabi_ddiv+0x296>
    eaf8:	e11a      	b.n	ed30 <__aeabi_ddiv+0x4cc>
    eafa:	4599      	cmp	r9, r3
    eafc:	d800      	bhi.n	eb00 <__aeabi_ddiv+0x29c>
    eafe:	e117      	b.n	ed30 <__aeabi_ddiv+0x4cc>
    eb00:	3d02      	subs	r5, #2
    eb02:	4443      	add	r3, r8
    eb04:	464a      	mov	r2, r9
    eb06:	1a9b      	subs	r3, r3, r2
    eb08:	465a      	mov	r2, fp
    eb0a:	0412      	lsls	r2, r2, #16
    eb0c:	432a      	orrs	r2, r5
    eb0e:	9903      	ldr	r1, [sp, #12]
    eb10:	4693      	mov	fp, r2
    eb12:	0c10      	lsrs	r0, r2, #16
    eb14:	0c0a      	lsrs	r2, r1, #16
    eb16:	4691      	mov	r9, r2
    eb18:	0409      	lsls	r1, r1, #16
    eb1a:	465a      	mov	r2, fp
    eb1c:	0c09      	lsrs	r1, r1, #16
    eb1e:	464e      	mov	r6, r9
    eb20:	000d      	movs	r5, r1
    eb22:	0412      	lsls	r2, r2, #16
    eb24:	0c12      	lsrs	r2, r2, #16
    eb26:	4345      	muls	r5, r0
    eb28:	9105      	str	r1, [sp, #20]
    eb2a:	4351      	muls	r1, r2
    eb2c:	4372      	muls	r2, r6
    eb2e:	4370      	muls	r0, r6
    eb30:	1952      	adds	r2, r2, r5
    eb32:	0c0e      	lsrs	r6, r1, #16
    eb34:	18b2      	adds	r2, r6, r2
    eb36:	4295      	cmp	r5, r2
    eb38:	d903      	bls.n	eb42 <__aeabi_ddiv+0x2de>
    eb3a:	2580      	movs	r5, #128	; 0x80
    eb3c:	026d      	lsls	r5, r5, #9
    eb3e:	46ac      	mov	ip, r5
    eb40:	4460      	add	r0, ip
    eb42:	0c15      	lsrs	r5, r2, #16
    eb44:	0409      	lsls	r1, r1, #16
    eb46:	0412      	lsls	r2, r2, #16
    eb48:	0c09      	lsrs	r1, r1, #16
    eb4a:	1828      	adds	r0, r5, r0
    eb4c:	1852      	adds	r2, r2, r1
    eb4e:	4283      	cmp	r3, r0
    eb50:	d200      	bcs.n	eb54 <__aeabi_ddiv+0x2f0>
    eb52:	e0ce      	b.n	ecf2 <__aeabi_ddiv+0x48e>
    eb54:	d100      	bne.n	eb58 <__aeabi_ddiv+0x2f4>
    eb56:	e0c8      	b.n	ecea <__aeabi_ddiv+0x486>
    eb58:	1a1d      	subs	r5, r3, r0
    eb5a:	4653      	mov	r3, sl
    eb5c:	1a9e      	subs	r6, r3, r2
    eb5e:	45b2      	cmp	sl, r6
    eb60:	4192      	sbcs	r2, r2
    eb62:	4252      	negs	r2, r2
    eb64:	1aab      	subs	r3, r5, r2
    eb66:	469a      	mov	sl, r3
    eb68:	4598      	cmp	r8, r3
    eb6a:	d100      	bne.n	eb6e <__aeabi_ddiv+0x30a>
    eb6c:	e117      	b.n	ed9e <__aeabi_ddiv+0x53a>
    eb6e:	0039      	movs	r1, r7
    eb70:	0018      	movs	r0, r3
    eb72:	f7fe fed1 	bl	d918 <__udivsi3>
    eb76:	9b01      	ldr	r3, [sp, #4]
    eb78:	0005      	movs	r5, r0
    eb7a:	4343      	muls	r3, r0
    eb7c:	0039      	movs	r1, r7
    eb7e:	4650      	mov	r0, sl
    eb80:	9304      	str	r3, [sp, #16]
    eb82:	f7fe ff4f 	bl	da24 <__aeabi_uidivmod>
    eb86:	9804      	ldr	r0, [sp, #16]
    eb88:	040b      	lsls	r3, r1, #16
    eb8a:	0c31      	lsrs	r1, r6, #16
    eb8c:	4319      	orrs	r1, r3
    eb8e:	4288      	cmp	r0, r1
    eb90:	d909      	bls.n	eba6 <__aeabi_ddiv+0x342>
    eb92:	4441      	add	r1, r8
    eb94:	1e6b      	subs	r3, r5, #1
    eb96:	4588      	cmp	r8, r1
    eb98:	d900      	bls.n	eb9c <__aeabi_ddiv+0x338>
    eb9a:	e107      	b.n	edac <__aeabi_ddiv+0x548>
    eb9c:	4288      	cmp	r0, r1
    eb9e:	d800      	bhi.n	eba2 <__aeabi_ddiv+0x33e>
    eba0:	e104      	b.n	edac <__aeabi_ddiv+0x548>
    eba2:	3d02      	subs	r5, #2
    eba4:	4441      	add	r1, r8
    eba6:	9b04      	ldr	r3, [sp, #16]
    eba8:	1acb      	subs	r3, r1, r3
    ebaa:	0018      	movs	r0, r3
    ebac:	0039      	movs	r1, r7
    ebae:	9304      	str	r3, [sp, #16]
    ebb0:	f7fe feb2 	bl	d918 <__udivsi3>
    ebb4:	9b01      	ldr	r3, [sp, #4]
    ebb6:	4682      	mov	sl, r0
    ebb8:	4343      	muls	r3, r0
    ebba:	0039      	movs	r1, r7
    ebbc:	9804      	ldr	r0, [sp, #16]
    ebbe:	9301      	str	r3, [sp, #4]
    ebc0:	f7fe ff30 	bl	da24 <__aeabi_uidivmod>
    ebc4:	9801      	ldr	r0, [sp, #4]
    ebc6:	040b      	lsls	r3, r1, #16
    ebc8:	0431      	lsls	r1, r6, #16
    ebca:	0c09      	lsrs	r1, r1, #16
    ebcc:	4319      	orrs	r1, r3
    ebce:	4288      	cmp	r0, r1
    ebd0:	d90d      	bls.n	ebee <__aeabi_ddiv+0x38a>
    ebd2:	4653      	mov	r3, sl
    ebd4:	4441      	add	r1, r8
    ebd6:	3b01      	subs	r3, #1
    ebd8:	4588      	cmp	r8, r1
    ebda:	d900      	bls.n	ebde <__aeabi_ddiv+0x37a>
    ebdc:	e0e8      	b.n	edb0 <__aeabi_ddiv+0x54c>
    ebde:	4288      	cmp	r0, r1
    ebe0:	d800      	bhi.n	ebe4 <__aeabi_ddiv+0x380>
    ebe2:	e0e5      	b.n	edb0 <__aeabi_ddiv+0x54c>
    ebe4:	2302      	movs	r3, #2
    ebe6:	425b      	negs	r3, r3
    ebe8:	469c      	mov	ip, r3
    ebea:	4441      	add	r1, r8
    ebec:	44e2      	add	sl, ip
    ebee:	9b01      	ldr	r3, [sp, #4]
    ebf0:	042d      	lsls	r5, r5, #16
    ebf2:	1ace      	subs	r6, r1, r3
    ebf4:	4651      	mov	r1, sl
    ebf6:	4329      	orrs	r1, r5
    ebf8:	9d05      	ldr	r5, [sp, #20]
    ebfa:	464f      	mov	r7, r9
    ebfc:	002a      	movs	r2, r5
    ebfe:	040b      	lsls	r3, r1, #16
    ec00:	0c08      	lsrs	r0, r1, #16
    ec02:	0c1b      	lsrs	r3, r3, #16
    ec04:	435a      	muls	r2, r3
    ec06:	4345      	muls	r5, r0
    ec08:	437b      	muls	r3, r7
    ec0a:	4378      	muls	r0, r7
    ec0c:	195b      	adds	r3, r3, r5
    ec0e:	0c17      	lsrs	r7, r2, #16
    ec10:	18fb      	adds	r3, r7, r3
    ec12:	429d      	cmp	r5, r3
    ec14:	d903      	bls.n	ec1e <__aeabi_ddiv+0x3ba>
    ec16:	2580      	movs	r5, #128	; 0x80
    ec18:	026d      	lsls	r5, r5, #9
    ec1a:	46ac      	mov	ip, r5
    ec1c:	4460      	add	r0, ip
    ec1e:	0c1d      	lsrs	r5, r3, #16
    ec20:	0412      	lsls	r2, r2, #16
    ec22:	041b      	lsls	r3, r3, #16
    ec24:	0c12      	lsrs	r2, r2, #16
    ec26:	1828      	adds	r0, r5, r0
    ec28:	189b      	adds	r3, r3, r2
    ec2a:	4286      	cmp	r6, r0
    ec2c:	d200      	bcs.n	ec30 <__aeabi_ddiv+0x3cc>
    ec2e:	e093      	b.n	ed58 <__aeabi_ddiv+0x4f4>
    ec30:	d100      	bne.n	ec34 <__aeabi_ddiv+0x3d0>
    ec32:	e08e      	b.n	ed52 <__aeabi_ddiv+0x4ee>
    ec34:	2301      	movs	r3, #1
    ec36:	4319      	orrs	r1, r3
    ec38:	4ba0      	ldr	r3, [pc, #640]	; (eebc <__aeabi_ddiv+0x658>)
    ec3a:	18e3      	adds	r3, r4, r3
    ec3c:	2b00      	cmp	r3, #0
    ec3e:	dc00      	bgt.n	ec42 <__aeabi_ddiv+0x3de>
    ec40:	e099      	b.n	ed76 <__aeabi_ddiv+0x512>
    ec42:	074a      	lsls	r2, r1, #29
    ec44:	d000      	beq.n	ec48 <__aeabi_ddiv+0x3e4>
    ec46:	e09e      	b.n	ed86 <__aeabi_ddiv+0x522>
    ec48:	465a      	mov	r2, fp
    ec4a:	01d2      	lsls	r2, r2, #7
    ec4c:	d506      	bpl.n	ec5c <__aeabi_ddiv+0x3f8>
    ec4e:	465a      	mov	r2, fp
    ec50:	4b9b      	ldr	r3, [pc, #620]	; (eec0 <__aeabi_ddiv+0x65c>)
    ec52:	401a      	ands	r2, r3
    ec54:	2380      	movs	r3, #128	; 0x80
    ec56:	4693      	mov	fp, r2
    ec58:	00db      	lsls	r3, r3, #3
    ec5a:	18e3      	adds	r3, r4, r3
    ec5c:	4a99      	ldr	r2, [pc, #612]	; (eec4 <__aeabi_ddiv+0x660>)
    ec5e:	4293      	cmp	r3, r2
    ec60:	dd68      	ble.n	ed34 <__aeabi_ddiv+0x4d0>
    ec62:	2301      	movs	r3, #1
    ec64:	9a02      	ldr	r2, [sp, #8]
    ec66:	4c98      	ldr	r4, [pc, #608]	; (eec8 <__aeabi_ddiv+0x664>)
    ec68:	401a      	ands	r2, r3
    ec6a:	2300      	movs	r3, #0
    ec6c:	4694      	mov	ip, r2
    ec6e:	4698      	mov	r8, r3
    ec70:	2200      	movs	r2, #0
    ec72:	e6c5      	b.n	ea00 <__aeabi_ddiv+0x19c>
    ec74:	2280      	movs	r2, #128	; 0x80
    ec76:	464b      	mov	r3, r9
    ec78:	0312      	lsls	r2, r2, #12
    ec7a:	4213      	tst	r3, r2
    ec7c:	d00a      	beq.n	ec94 <__aeabi_ddiv+0x430>
    ec7e:	465b      	mov	r3, fp
    ec80:	4213      	tst	r3, r2
    ec82:	d106      	bne.n	ec92 <__aeabi_ddiv+0x42e>
    ec84:	431a      	orrs	r2, r3
    ec86:	0312      	lsls	r2, r2, #12
    ec88:	0b12      	lsrs	r2, r2, #12
    ec8a:	46ac      	mov	ip, r5
    ec8c:	4688      	mov	r8, r1
    ec8e:	4c8e      	ldr	r4, [pc, #568]	; (eec8 <__aeabi_ddiv+0x664>)
    ec90:	e6b6      	b.n	ea00 <__aeabi_ddiv+0x19c>
    ec92:	464b      	mov	r3, r9
    ec94:	431a      	orrs	r2, r3
    ec96:	0312      	lsls	r2, r2, #12
    ec98:	0b12      	lsrs	r2, r2, #12
    ec9a:	46bc      	mov	ip, r7
    ec9c:	4c8a      	ldr	r4, [pc, #552]	; (eec8 <__aeabi_ddiv+0x664>)
    ec9e:	e6af      	b.n	ea00 <__aeabi_ddiv+0x19c>
    eca0:	0003      	movs	r3, r0
    eca2:	465a      	mov	r2, fp
    eca4:	3b28      	subs	r3, #40	; 0x28
    eca6:	409a      	lsls	r2, r3
    eca8:	2300      	movs	r3, #0
    ecaa:	4691      	mov	r9, r2
    ecac:	4698      	mov	r8, r3
    ecae:	e657      	b.n	e960 <__aeabi_ddiv+0xfc>
    ecb0:	4658      	mov	r0, fp
    ecb2:	f001 f94b 	bl	ff4c <__clzsi2>
    ecb6:	3020      	adds	r0, #32
    ecb8:	e640      	b.n	e93c <__aeabi_ddiv+0xd8>
    ecba:	0003      	movs	r3, r0
    ecbc:	4652      	mov	r2, sl
    ecbe:	3b28      	subs	r3, #40	; 0x28
    ecc0:	409a      	lsls	r2, r3
    ecc2:	2100      	movs	r1, #0
    ecc4:	4693      	mov	fp, r2
    ecc6:	e677      	b.n	e9b8 <__aeabi_ddiv+0x154>
    ecc8:	f001 f940 	bl	ff4c <__clzsi2>
    eccc:	3020      	adds	r0, #32
    ecce:	e65f      	b.n	e990 <__aeabi_ddiv+0x12c>
    ecd0:	4588      	cmp	r8, r1
    ecd2:	d200      	bcs.n	ecd6 <__aeabi_ddiv+0x472>
    ecd4:	e6c7      	b.n	ea66 <__aeabi_ddiv+0x202>
    ecd6:	464b      	mov	r3, r9
    ecd8:	07de      	lsls	r6, r3, #31
    ecda:	085d      	lsrs	r5, r3, #1
    ecdc:	4643      	mov	r3, r8
    ecde:	085b      	lsrs	r3, r3, #1
    ece0:	431e      	orrs	r6, r3
    ece2:	4643      	mov	r3, r8
    ece4:	07db      	lsls	r3, r3, #31
    ece6:	469a      	mov	sl, r3
    ece8:	e6c2      	b.n	ea70 <__aeabi_ddiv+0x20c>
    ecea:	2500      	movs	r5, #0
    ecec:	4592      	cmp	sl, r2
    ecee:	d300      	bcc.n	ecf2 <__aeabi_ddiv+0x48e>
    ecf0:	e733      	b.n	eb5a <__aeabi_ddiv+0x2f6>
    ecf2:	9e03      	ldr	r6, [sp, #12]
    ecf4:	4659      	mov	r1, fp
    ecf6:	46b4      	mov	ip, r6
    ecf8:	44e2      	add	sl, ip
    ecfa:	45b2      	cmp	sl, r6
    ecfc:	41ad      	sbcs	r5, r5
    ecfe:	426d      	negs	r5, r5
    ed00:	4445      	add	r5, r8
    ed02:	18eb      	adds	r3, r5, r3
    ed04:	3901      	subs	r1, #1
    ed06:	4598      	cmp	r8, r3
    ed08:	d207      	bcs.n	ed1a <__aeabi_ddiv+0x4b6>
    ed0a:	4298      	cmp	r0, r3
    ed0c:	d900      	bls.n	ed10 <__aeabi_ddiv+0x4ac>
    ed0e:	e07f      	b.n	ee10 <__aeabi_ddiv+0x5ac>
    ed10:	d100      	bne.n	ed14 <__aeabi_ddiv+0x4b0>
    ed12:	e0bc      	b.n	ee8e <__aeabi_ddiv+0x62a>
    ed14:	1a1d      	subs	r5, r3, r0
    ed16:	468b      	mov	fp, r1
    ed18:	e71f      	b.n	eb5a <__aeabi_ddiv+0x2f6>
    ed1a:	4598      	cmp	r8, r3
    ed1c:	d1fa      	bne.n	ed14 <__aeabi_ddiv+0x4b0>
    ed1e:	9d03      	ldr	r5, [sp, #12]
    ed20:	4555      	cmp	r5, sl
    ed22:	d9f2      	bls.n	ed0a <__aeabi_ddiv+0x4a6>
    ed24:	4643      	mov	r3, r8
    ed26:	468b      	mov	fp, r1
    ed28:	1a1d      	subs	r5, r3, r0
    ed2a:	e716      	b.n	eb5a <__aeabi_ddiv+0x2f6>
    ed2c:	469b      	mov	fp, r3
    ed2e:	e6ca      	b.n	eac6 <__aeabi_ddiv+0x262>
    ed30:	0015      	movs	r5, r2
    ed32:	e6e7      	b.n	eb04 <__aeabi_ddiv+0x2a0>
    ed34:	465a      	mov	r2, fp
    ed36:	08c9      	lsrs	r1, r1, #3
    ed38:	0752      	lsls	r2, r2, #29
    ed3a:	430a      	orrs	r2, r1
    ed3c:	055b      	lsls	r3, r3, #21
    ed3e:	4690      	mov	r8, r2
    ed40:	0d5c      	lsrs	r4, r3, #21
    ed42:	465a      	mov	r2, fp
    ed44:	2301      	movs	r3, #1
    ed46:	9902      	ldr	r1, [sp, #8]
    ed48:	0252      	lsls	r2, r2, #9
    ed4a:	4019      	ands	r1, r3
    ed4c:	0b12      	lsrs	r2, r2, #12
    ed4e:	468c      	mov	ip, r1
    ed50:	e656      	b.n	ea00 <__aeabi_ddiv+0x19c>
    ed52:	2b00      	cmp	r3, #0
    ed54:	d100      	bne.n	ed58 <__aeabi_ddiv+0x4f4>
    ed56:	e76f      	b.n	ec38 <__aeabi_ddiv+0x3d4>
    ed58:	4446      	add	r6, r8
    ed5a:	1e4a      	subs	r2, r1, #1
    ed5c:	45b0      	cmp	r8, r6
    ed5e:	d929      	bls.n	edb4 <__aeabi_ddiv+0x550>
    ed60:	0011      	movs	r1, r2
    ed62:	4286      	cmp	r6, r0
    ed64:	d000      	beq.n	ed68 <__aeabi_ddiv+0x504>
    ed66:	e765      	b.n	ec34 <__aeabi_ddiv+0x3d0>
    ed68:	9a03      	ldr	r2, [sp, #12]
    ed6a:	4293      	cmp	r3, r2
    ed6c:	d000      	beq.n	ed70 <__aeabi_ddiv+0x50c>
    ed6e:	e761      	b.n	ec34 <__aeabi_ddiv+0x3d0>
    ed70:	e762      	b.n	ec38 <__aeabi_ddiv+0x3d4>
    ed72:	2101      	movs	r1, #1
    ed74:	4249      	negs	r1, r1
    ed76:	2001      	movs	r0, #1
    ed78:	1ac2      	subs	r2, r0, r3
    ed7a:	2a38      	cmp	r2, #56	; 0x38
    ed7c:	dd21      	ble.n	edc2 <__aeabi_ddiv+0x55e>
    ed7e:	9b02      	ldr	r3, [sp, #8]
    ed80:	4003      	ands	r3, r0
    ed82:	469c      	mov	ip, r3
    ed84:	e638      	b.n	e9f8 <__aeabi_ddiv+0x194>
    ed86:	220f      	movs	r2, #15
    ed88:	400a      	ands	r2, r1
    ed8a:	2a04      	cmp	r2, #4
    ed8c:	d100      	bne.n	ed90 <__aeabi_ddiv+0x52c>
    ed8e:	e75b      	b.n	ec48 <__aeabi_ddiv+0x3e4>
    ed90:	000a      	movs	r2, r1
    ed92:	1d11      	adds	r1, r2, #4
    ed94:	4291      	cmp	r1, r2
    ed96:	4192      	sbcs	r2, r2
    ed98:	4252      	negs	r2, r2
    ed9a:	4493      	add	fp, r2
    ed9c:	e754      	b.n	ec48 <__aeabi_ddiv+0x3e4>
    ed9e:	4b47      	ldr	r3, [pc, #284]	; (eebc <__aeabi_ddiv+0x658>)
    eda0:	18e3      	adds	r3, r4, r3
    eda2:	2b00      	cmp	r3, #0
    eda4:	dde5      	ble.n	ed72 <__aeabi_ddiv+0x50e>
    eda6:	2201      	movs	r2, #1
    eda8:	4252      	negs	r2, r2
    edaa:	e7f2      	b.n	ed92 <__aeabi_ddiv+0x52e>
    edac:	001d      	movs	r5, r3
    edae:	e6fa      	b.n	eba6 <__aeabi_ddiv+0x342>
    edb0:	469a      	mov	sl, r3
    edb2:	e71c      	b.n	ebee <__aeabi_ddiv+0x38a>
    edb4:	42b0      	cmp	r0, r6
    edb6:	d839      	bhi.n	ee2c <__aeabi_ddiv+0x5c8>
    edb8:	d06e      	beq.n	ee98 <__aeabi_ddiv+0x634>
    edba:	0011      	movs	r1, r2
    edbc:	e73a      	b.n	ec34 <__aeabi_ddiv+0x3d0>
    edbe:	9302      	str	r3, [sp, #8]
    edc0:	e73a      	b.n	ec38 <__aeabi_ddiv+0x3d4>
    edc2:	2a1f      	cmp	r2, #31
    edc4:	dc3c      	bgt.n	ee40 <__aeabi_ddiv+0x5dc>
    edc6:	2320      	movs	r3, #32
    edc8:	1a9b      	subs	r3, r3, r2
    edca:	000c      	movs	r4, r1
    edcc:	4658      	mov	r0, fp
    edce:	4099      	lsls	r1, r3
    edd0:	4098      	lsls	r0, r3
    edd2:	1e4b      	subs	r3, r1, #1
    edd4:	4199      	sbcs	r1, r3
    edd6:	465b      	mov	r3, fp
    edd8:	40d4      	lsrs	r4, r2
    edda:	40d3      	lsrs	r3, r2
    eddc:	4320      	orrs	r0, r4
    edde:	4308      	orrs	r0, r1
    ede0:	001a      	movs	r2, r3
    ede2:	0743      	lsls	r3, r0, #29
    ede4:	d009      	beq.n	edfa <__aeabi_ddiv+0x596>
    ede6:	230f      	movs	r3, #15
    ede8:	4003      	ands	r3, r0
    edea:	2b04      	cmp	r3, #4
    edec:	d005      	beq.n	edfa <__aeabi_ddiv+0x596>
    edee:	0001      	movs	r1, r0
    edf0:	1d08      	adds	r0, r1, #4
    edf2:	4288      	cmp	r0, r1
    edf4:	419b      	sbcs	r3, r3
    edf6:	425b      	negs	r3, r3
    edf8:	18d2      	adds	r2, r2, r3
    edfa:	0213      	lsls	r3, r2, #8
    edfc:	d53a      	bpl.n	ee74 <__aeabi_ddiv+0x610>
    edfe:	2301      	movs	r3, #1
    ee00:	9a02      	ldr	r2, [sp, #8]
    ee02:	2401      	movs	r4, #1
    ee04:	401a      	ands	r2, r3
    ee06:	2300      	movs	r3, #0
    ee08:	4694      	mov	ip, r2
    ee0a:	4698      	mov	r8, r3
    ee0c:	2200      	movs	r2, #0
    ee0e:	e5f7      	b.n	ea00 <__aeabi_ddiv+0x19c>
    ee10:	2102      	movs	r1, #2
    ee12:	4249      	negs	r1, r1
    ee14:	468c      	mov	ip, r1
    ee16:	9d03      	ldr	r5, [sp, #12]
    ee18:	44e3      	add	fp, ip
    ee1a:	46ac      	mov	ip, r5
    ee1c:	44e2      	add	sl, ip
    ee1e:	45aa      	cmp	sl, r5
    ee20:	41ad      	sbcs	r5, r5
    ee22:	426d      	negs	r5, r5
    ee24:	4445      	add	r5, r8
    ee26:	18ed      	adds	r5, r5, r3
    ee28:	1a2d      	subs	r5, r5, r0
    ee2a:	e696      	b.n	eb5a <__aeabi_ddiv+0x2f6>
    ee2c:	1e8a      	subs	r2, r1, #2
    ee2e:	9903      	ldr	r1, [sp, #12]
    ee30:	004d      	lsls	r5, r1, #1
    ee32:	428d      	cmp	r5, r1
    ee34:	4189      	sbcs	r1, r1
    ee36:	4249      	negs	r1, r1
    ee38:	4441      	add	r1, r8
    ee3a:	1876      	adds	r6, r6, r1
    ee3c:	9503      	str	r5, [sp, #12]
    ee3e:	e78f      	b.n	ed60 <__aeabi_ddiv+0x4fc>
    ee40:	201f      	movs	r0, #31
    ee42:	4240      	negs	r0, r0
    ee44:	1ac3      	subs	r3, r0, r3
    ee46:	4658      	mov	r0, fp
    ee48:	40d8      	lsrs	r0, r3
    ee4a:	0003      	movs	r3, r0
    ee4c:	2a20      	cmp	r2, #32
    ee4e:	d028      	beq.n	eea2 <__aeabi_ddiv+0x63e>
    ee50:	2040      	movs	r0, #64	; 0x40
    ee52:	465d      	mov	r5, fp
    ee54:	1a82      	subs	r2, r0, r2
    ee56:	4095      	lsls	r5, r2
    ee58:	4329      	orrs	r1, r5
    ee5a:	1e4a      	subs	r2, r1, #1
    ee5c:	4191      	sbcs	r1, r2
    ee5e:	4319      	orrs	r1, r3
    ee60:	2307      	movs	r3, #7
    ee62:	2200      	movs	r2, #0
    ee64:	400b      	ands	r3, r1
    ee66:	d009      	beq.n	ee7c <__aeabi_ddiv+0x618>
    ee68:	230f      	movs	r3, #15
    ee6a:	2200      	movs	r2, #0
    ee6c:	400b      	ands	r3, r1
    ee6e:	0008      	movs	r0, r1
    ee70:	2b04      	cmp	r3, #4
    ee72:	d1bd      	bne.n	edf0 <__aeabi_ddiv+0x58c>
    ee74:	0001      	movs	r1, r0
    ee76:	0753      	lsls	r3, r2, #29
    ee78:	0252      	lsls	r2, r2, #9
    ee7a:	0b12      	lsrs	r2, r2, #12
    ee7c:	08c9      	lsrs	r1, r1, #3
    ee7e:	4319      	orrs	r1, r3
    ee80:	2301      	movs	r3, #1
    ee82:	4688      	mov	r8, r1
    ee84:	9902      	ldr	r1, [sp, #8]
    ee86:	2400      	movs	r4, #0
    ee88:	4019      	ands	r1, r3
    ee8a:	468c      	mov	ip, r1
    ee8c:	e5b8      	b.n	ea00 <__aeabi_ddiv+0x19c>
    ee8e:	4552      	cmp	r2, sl
    ee90:	d8be      	bhi.n	ee10 <__aeabi_ddiv+0x5ac>
    ee92:	468b      	mov	fp, r1
    ee94:	2500      	movs	r5, #0
    ee96:	e660      	b.n	eb5a <__aeabi_ddiv+0x2f6>
    ee98:	9d03      	ldr	r5, [sp, #12]
    ee9a:	429d      	cmp	r5, r3
    ee9c:	d3c6      	bcc.n	ee2c <__aeabi_ddiv+0x5c8>
    ee9e:	0011      	movs	r1, r2
    eea0:	e762      	b.n	ed68 <__aeabi_ddiv+0x504>
    eea2:	2500      	movs	r5, #0
    eea4:	e7d8      	b.n	ee58 <__aeabi_ddiv+0x5f4>
    eea6:	2280      	movs	r2, #128	; 0x80
    eea8:	465b      	mov	r3, fp
    eeaa:	0312      	lsls	r2, r2, #12
    eeac:	431a      	orrs	r2, r3
    eeae:	9b01      	ldr	r3, [sp, #4]
    eeb0:	0312      	lsls	r2, r2, #12
    eeb2:	0b12      	lsrs	r2, r2, #12
    eeb4:	469c      	mov	ip, r3
    eeb6:	4688      	mov	r8, r1
    eeb8:	4c03      	ldr	r4, [pc, #12]	; (eec8 <__aeabi_ddiv+0x664>)
    eeba:	e5a1      	b.n	ea00 <__aeabi_ddiv+0x19c>
    eebc:	000003ff 	.word	0x000003ff
    eec0:	feffffff 	.word	0xfeffffff
    eec4:	000007fe 	.word	0x000007fe
    eec8:	000007ff 	.word	0x000007ff

0000eecc <__eqdf2>:
    eecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    eece:	464f      	mov	r7, r9
    eed0:	4646      	mov	r6, r8
    eed2:	46d6      	mov	lr, sl
    eed4:	005c      	lsls	r4, r3, #1
    eed6:	b5c0      	push	{r6, r7, lr}
    eed8:	031f      	lsls	r7, r3, #12
    eeda:	0fdb      	lsrs	r3, r3, #31
    eedc:	469a      	mov	sl, r3
    eede:	4b17      	ldr	r3, [pc, #92]	; (ef3c <__eqdf2+0x70>)
    eee0:	030e      	lsls	r6, r1, #12
    eee2:	004d      	lsls	r5, r1, #1
    eee4:	4684      	mov	ip, r0
    eee6:	4680      	mov	r8, r0
    eee8:	0b36      	lsrs	r6, r6, #12
    eeea:	0d6d      	lsrs	r5, r5, #21
    eeec:	0fc9      	lsrs	r1, r1, #31
    eeee:	4691      	mov	r9, r2
    eef0:	0b3f      	lsrs	r7, r7, #12
    eef2:	0d64      	lsrs	r4, r4, #21
    eef4:	2001      	movs	r0, #1
    eef6:	429d      	cmp	r5, r3
    eef8:	d008      	beq.n	ef0c <__eqdf2+0x40>
    eefa:	429c      	cmp	r4, r3
    eefc:	d001      	beq.n	ef02 <__eqdf2+0x36>
    eefe:	42a5      	cmp	r5, r4
    ef00:	d00b      	beq.n	ef1a <__eqdf2+0x4e>
    ef02:	bc1c      	pop	{r2, r3, r4}
    ef04:	4690      	mov	r8, r2
    ef06:	4699      	mov	r9, r3
    ef08:	46a2      	mov	sl, r4
    ef0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef0c:	4663      	mov	r3, ip
    ef0e:	4333      	orrs	r3, r6
    ef10:	d1f7      	bne.n	ef02 <__eqdf2+0x36>
    ef12:	42ac      	cmp	r4, r5
    ef14:	d1f5      	bne.n	ef02 <__eqdf2+0x36>
    ef16:	433a      	orrs	r2, r7
    ef18:	d1f3      	bne.n	ef02 <__eqdf2+0x36>
    ef1a:	2001      	movs	r0, #1
    ef1c:	42be      	cmp	r6, r7
    ef1e:	d1f0      	bne.n	ef02 <__eqdf2+0x36>
    ef20:	45c8      	cmp	r8, r9
    ef22:	d1ee      	bne.n	ef02 <__eqdf2+0x36>
    ef24:	4551      	cmp	r1, sl
    ef26:	d007      	beq.n	ef38 <__eqdf2+0x6c>
    ef28:	2d00      	cmp	r5, #0
    ef2a:	d1ea      	bne.n	ef02 <__eqdf2+0x36>
    ef2c:	4663      	mov	r3, ip
    ef2e:	431e      	orrs	r6, r3
    ef30:	0030      	movs	r0, r6
    ef32:	1e46      	subs	r6, r0, #1
    ef34:	41b0      	sbcs	r0, r6
    ef36:	e7e4      	b.n	ef02 <__eqdf2+0x36>
    ef38:	2000      	movs	r0, #0
    ef3a:	e7e2      	b.n	ef02 <__eqdf2+0x36>
    ef3c:	000007ff 	.word	0x000007ff

0000ef40 <__gedf2>:
    ef40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef42:	4645      	mov	r5, r8
    ef44:	46de      	mov	lr, fp
    ef46:	4657      	mov	r7, sl
    ef48:	464e      	mov	r6, r9
    ef4a:	b5e0      	push	{r5, r6, r7, lr}
    ef4c:	031f      	lsls	r7, r3, #12
    ef4e:	0b3d      	lsrs	r5, r7, #12
    ef50:	4f2c      	ldr	r7, [pc, #176]	; (f004 <__gedf2+0xc4>)
    ef52:	030e      	lsls	r6, r1, #12
    ef54:	004c      	lsls	r4, r1, #1
    ef56:	46ab      	mov	fp, r5
    ef58:	005d      	lsls	r5, r3, #1
    ef5a:	4684      	mov	ip, r0
    ef5c:	0b36      	lsrs	r6, r6, #12
    ef5e:	0d64      	lsrs	r4, r4, #21
    ef60:	0fc9      	lsrs	r1, r1, #31
    ef62:	4690      	mov	r8, r2
    ef64:	0d6d      	lsrs	r5, r5, #21
    ef66:	0fdb      	lsrs	r3, r3, #31
    ef68:	42bc      	cmp	r4, r7
    ef6a:	d02a      	beq.n	efc2 <__gedf2+0x82>
    ef6c:	4f25      	ldr	r7, [pc, #148]	; (f004 <__gedf2+0xc4>)
    ef6e:	42bd      	cmp	r5, r7
    ef70:	d02d      	beq.n	efce <__gedf2+0x8e>
    ef72:	2c00      	cmp	r4, #0
    ef74:	d10f      	bne.n	ef96 <__gedf2+0x56>
    ef76:	4330      	orrs	r0, r6
    ef78:	0007      	movs	r7, r0
    ef7a:	4681      	mov	r9, r0
    ef7c:	4278      	negs	r0, r7
    ef7e:	4178      	adcs	r0, r7
    ef80:	b2c0      	uxtb	r0, r0
    ef82:	2d00      	cmp	r5, #0
    ef84:	d117      	bne.n	efb6 <__gedf2+0x76>
    ef86:	465f      	mov	r7, fp
    ef88:	433a      	orrs	r2, r7
    ef8a:	d114      	bne.n	efb6 <__gedf2+0x76>
    ef8c:	464b      	mov	r3, r9
    ef8e:	2000      	movs	r0, #0
    ef90:	2b00      	cmp	r3, #0
    ef92:	d00a      	beq.n	efaa <__gedf2+0x6a>
    ef94:	e006      	b.n	efa4 <__gedf2+0x64>
    ef96:	2d00      	cmp	r5, #0
    ef98:	d102      	bne.n	efa0 <__gedf2+0x60>
    ef9a:	4658      	mov	r0, fp
    ef9c:	4302      	orrs	r2, r0
    ef9e:	d001      	beq.n	efa4 <__gedf2+0x64>
    efa0:	4299      	cmp	r1, r3
    efa2:	d018      	beq.n	efd6 <__gedf2+0x96>
    efa4:	4248      	negs	r0, r1
    efa6:	2101      	movs	r1, #1
    efa8:	4308      	orrs	r0, r1
    efaa:	bc3c      	pop	{r2, r3, r4, r5}
    efac:	4690      	mov	r8, r2
    efae:	4699      	mov	r9, r3
    efb0:	46a2      	mov	sl, r4
    efb2:	46ab      	mov	fp, r5
    efb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efb6:	2800      	cmp	r0, #0
    efb8:	d0f2      	beq.n	efa0 <__gedf2+0x60>
    efba:	2001      	movs	r0, #1
    efbc:	3b01      	subs	r3, #1
    efbe:	4318      	orrs	r0, r3
    efc0:	e7f3      	b.n	efaa <__gedf2+0x6a>
    efc2:	0037      	movs	r7, r6
    efc4:	4307      	orrs	r7, r0
    efc6:	d0d1      	beq.n	ef6c <__gedf2+0x2c>
    efc8:	2002      	movs	r0, #2
    efca:	4240      	negs	r0, r0
    efcc:	e7ed      	b.n	efaa <__gedf2+0x6a>
    efce:	465f      	mov	r7, fp
    efd0:	4317      	orrs	r7, r2
    efd2:	d0ce      	beq.n	ef72 <__gedf2+0x32>
    efd4:	e7f8      	b.n	efc8 <__gedf2+0x88>
    efd6:	42ac      	cmp	r4, r5
    efd8:	dce4      	bgt.n	efa4 <__gedf2+0x64>
    efda:	da03      	bge.n	efe4 <__gedf2+0xa4>
    efdc:	1e48      	subs	r0, r1, #1
    efde:	2101      	movs	r1, #1
    efe0:	4308      	orrs	r0, r1
    efe2:	e7e2      	b.n	efaa <__gedf2+0x6a>
    efe4:	455e      	cmp	r6, fp
    efe6:	d8dd      	bhi.n	efa4 <__gedf2+0x64>
    efe8:	d006      	beq.n	eff8 <__gedf2+0xb8>
    efea:	2000      	movs	r0, #0
    efec:	455e      	cmp	r6, fp
    efee:	d2dc      	bcs.n	efaa <__gedf2+0x6a>
    eff0:	2301      	movs	r3, #1
    eff2:	1e48      	subs	r0, r1, #1
    eff4:	4318      	orrs	r0, r3
    eff6:	e7d8      	b.n	efaa <__gedf2+0x6a>
    eff8:	45c4      	cmp	ip, r8
    effa:	d8d3      	bhi.n	efa4 <__gedf2+0x64>
    effc:	2000      	movs	r0, #0
    effe:	45c4      	cmp	ip, r8
    f000:	d3f6      	bcc.n	eff0 <__gedf2+0xb0>
    f002:	e7d2      	b.n	efaa <__gedf2+0x6a>
    f004:	000007ff 	.word	0x000007ff

0000f008 <__ledf2>:
    f008:	b5f0      	push	{r4, r5, r6, r7, lr}
    f00a:	464e      	mov	r6, r9
    f00c:	4645      	mov	r5, r8
    f00e:	46de      	mov	lr, fp
    f010:	4657      	mov	r7, sl
    f012:	005c      	lsls	r4, r3, #1
    f014:	b5e0      	push	{r5, r6, r7, lr}
    f016:	031f      	lsls	r7, r3, #12
    f018:	0fdb      	lsrs	r3, r3, #31
    f01a:	4699      	mov	r9, r3
    f01c:	4b2a      	ldr	r3, [pc, #168]	; (f0c8 <__ledf2+0xc0>)
    f01e:	030e      	lsls	r6, r1, #12
    f020:	004d      	lsls	r5, r1, #1
    f022:	0fc9      	lsrs	r1, r1, #31
    f024:	4684      	mov	ip, r0
    f026:	0b36      	lsrs	r6, r6, #12
    f028:	0d6d      	lsrs	r5, r5, #21
    f02a:	468b      	mov	fp, r1
    f02c:	4690      	mov	r8, r2
    f02e:	0b3f      	lsrs	r7, r7, #12
    f030:	0d64      	lsrs	r4, r4, #21
    f032:	429d      	cmp	r5, r3
    f034:	d020      	beq.n	f078 <__ledf2+0x70>
    f036:	4b24      	ldr	r3, [pc, #144]	; (f0c8 <__ledf2+0xc0>)
    f038:	429c      	cmp	r4, r3
    f03a:	d022      	beq.n	f082 <__ledf2+0x7a>
    f03c:	2d00      	cmp	r5, #0
    f03e:	d112      	bne.n	f066 <__ledf2+0x5e>
    f040:	4330      	orrs	r0, r6
    f042:	4243      	negs	r3, r0
    f044:	4143      	adcs	r3, r0
    f046:	b2db      	uxtb	r3, r3
    f048:	2c00      	cmp	r4, #0
    f04a:	d01f      	beq.n	f08c <__ledf2+0x84>
    f04c:	2b00      	cmp	r3, #0
    f04e:	d00c      	beq.n	f06a <__ledf2+0x62>
    f050:	464b      	mov	r3, r9
    f052:	2001      	movs	r0, #1
    f054:	3b01      	subs	r3, #1
    f056:	4303      	orrs	r3, r0
    f058:	0018      	movs	r0, r3
    f05a:	bc3c      	pop	{r2, r3, r4, r5}
    f05c:	4690      	mov	r8, r2
    f05e:	4699      	mov	r9, r3
    f060:	46a2      	mov	sl, r4
    f062:	46ab      	mov	fp, r5
    f064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f066:	2c00      	cmp	r4, #0
    f068:	d016      	beq.n	f098 <__ledf2+0x90>
    f06a:	45cb      	cmp	fp, r9
    f06c:	d017      	beq.n	f09e <__ledf2+0x96>
    f06e:	465b      	mov	r3, fp
    f070:	4259      	negs	r1, r3
    f072:	2301      	movs	r3, #1
    f074:	430b      	orrs	r3, r1
    f076:	e7ef      	b.n	f058 <__ledf2+0x50>
    f078:	0031      	movs	r1, r6
    f07a:	2302      	movs	r3, #2
    f07c:	4301      	orrs	r1, r0
    f07e:	d1eb      	bne.n	f058 <__ledf2+0x50>
    f080:	e7d9      	b.n	f036 <__ledf2+0x2e>
    f082:	0039      	movs	r1, r7
    f084:	2302      	movs	r3, #2
    f086:	4311      	orrs	r1, r2
    f088:	d1e6      	bne.n	f058 <__ledf2+0x50>
    f08a:	e7d7      	b.n	f03c <__ledf2+0x34>
    f08c:	433a      	orrs	r2, r7
    f08e:	d1dd      	bne.n	f04c <__ledf2+0x44>
    f090:	2300      	movs	r3, #0
    f092:	2800      	cmp	r0, #0
    f094:	d0e0      	beq.n	f058 <__ledf2+0x50>
    f096:	e7ea      	b.n	f06e <__ledf2+0x66>
    f098:	433a      	orrs	r2, r7
    f09a:	d1e6      	bne.n	f06a <__ledf2+0x62>
    f09c:	e7e7      	b.n	f06e <__ledf2+0x66>
    f09e:	42a5      	cmp	r5, r4
    f0a0:	dce5      	bgt.n	f06e <__ledf2+0x66>
    f0a2:	db05      	blt.n	f0b0 <__ledf2+0xa8>
    f0a4:	42be      	cmp	r6, r7
    f0a6:	d8e2      	bhi.n	f06e <__ledf2+0x66>
    f0a8:	d007      	beq.n	f0ba <__ledf2+0xb2>
    f0aa:	2300      	movs	r3, #0
    f0ac:	42be      	cmp	r6, r7
    f0ae:	d2d3      	bcs.n	f058 <__ledf2+0x50>
    f0b0:	4659      	mov	r1, fp
    f0b2:	2301      	movs	r3, #1
    f0b4:	3901      	subs	r1, #1
    f0b6:	430b      	orrs	r3, r1
    f0b8:	e7ce      	b.n	f058 <__ledf2+0x50>
    f0ba:	45c4      	cmp	ip, r8
    f0bc:	d8d7      	bhi.n	f06e <__ledf2+0x66>
    f0be:	2300      	movs	r3, #0
    f0c0:	45c4      	cmp	ip, r8
    f0c2:	d3f5      	bcc.n	f0b0 <__ledf2+0xa8>
    f0c4:	e7c8      	b.n	f058 <__ledf2+0x50>
    f0c6:	46c0      	nop			; (mov r8, r8)
    f0c8:	000007ff 	.word	0x000007ff

0000f0cc <__aeabi_dmul>:
    f0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0ce:	4657      	mov	r7, sl
    f0d0:	4645      	mov	r5, r8
    f0d2:	46de      	mov	lr, fp
    f0d4:	464e      	mov	r6, r9
    f0d6:	b5e0      	push	{r5, r6, r7, lr}
    f0d8:	030c      	lsls	r4, r1, #12
    f0da:	4698      	mov	r8, r3
    f0dc:	004e      	lsls	r6, r1, #1
    f0de:	0b23      	lsrs	r3, r4, #12
    f0e0:	b087      	sub	sp, #28
    f0e2:	0007      	movs	r7, r0
    f0e4:	4692      	mov	sl, r2
    f0e6:	469b      	mov	fp, r3
    f0e8:	0d76      	lsrs	r6, r6, #21
    f0ea:	0fcd      	lsrs	r5, r1, #31
    f0ec:	2e00      	cmp	r6, #0
    f0ee:	d06b      	beq.n	f1c8 <__aeabi_dmul+0xfc>
    f0f0:	4b6d      	ldr	r3, [pc, #436]	; (f2a8 <__aeabi_dmul+0x1dc>)
    f0f2:	429e      	cmp	r6, r3
    f0f4:	d035      	beq.n	f162 <__aeabi_dmul+0x96>
    f0f6:	2480      	movs	r4, #128	; 0x80
    f0f8:	465b      	mov	r3, fp
    f0fa:	0f42      	lsrs	r2, r0, #29
    f0fc:	0424      	lsls	r4, r4, #16
    f0fe:	00db      	lsls	r3, r3, #3
    f100:	4314      	orrs	r4, r2
    f102:	431c      	orrs	r4, r3
    f104:	00c3      	lsls	r3, r0, #3
    f106:	4699      	mov	r9, r3
    f108:	4b68      	ldr	r3, [pc, #416]	; (f2ac <__aeabi_dmul+0x1e0>)
    f10a:	46a3      	mov	fp, r4
    f10c:	469c      	mov	ip, r3
    f10e:	2300      	movs	r3, #0
    f110:	2700      	movs	r7, #0
    f112:	4466      	add	r6, ip
    f114:	9302      	str	r3, [sp, #8]
    f116:	4643      	mov	r3, r8
    f118:	031c      	lsls	r4, r3, #12
    f11a:	005a      	lsls	r2, r3, #1
    f11c:	0fdb      	lsrs	r3, r3, #31
    f11e:	4650      	mov	r0, sl
    f120:	0b24      	lsrs	r4, r4, #12
    f122:	0d52      	lsrs	r2, r2, #21
    f124:	4698      	mov	r8, r3
    f126:	d100      	bne.n	f12a <__aeabi_dmul+0x5e>
    f128:	e076      	b.n	f218 <__aeabi_dmul+0x14c>
    f12a:	4b5f      	ldr	r3, [pc, #380]	; (f2a8 <__aeabi_dmul+0x1dc>)
    f12c:	429a      	cmp	r2, r3
    f12e:	d06d      	beq.n	f20c <__aeabi_dmul+0x140>
    f130:	2380      	movs	r3, #128	; 0x80
    f132:	0f41      	lsrs	r1, r0, #29
    f134:	041b      	lsls	r3, r3, #16
    f136:	430b      	orrs	r3, r1
    f138:	495c      	ldr	r1, [pc, #368]	; (f2ac <__aeabi_dmul+0x1e0>)
    f13a:	00e4      	lsls	r4, r4, #3
    f13c:	468c      	mov	ip, r1
    f13e:	431c      	orrs	r4, r3
    f140:	00c3      	lsls	r3, r0, #3
    f142:	2000      	movs	r0, #0
    f144:	4462      	add	r2, ip
    f146:	4641      	mov	r1, r8
    f148:	18b6      	adds	r6, r6, r2
    f14a:	4069      	eors	r1, r5
    f14c:	1c72      	adds	r2, r6, #1
    f14e:	9101      	str	r1, [sp, #4]
    f150:	4694      	mov	ip, r2
    f152:	4307      	orrs	r7, r0
    f154:	2f0f      	cmp	r7, #15
    f156:	d900      	bls.n	f15a <__aeabi_dmul+0x8e>
    f158:	e0b0      	b.n	f2bc <__aeabi_dmul+0x1f0>
    f15a:	4a55      	ldr	r2, [pc, #340]	; (f2b0 <__aeabi_dmul+0x1e4>)
    f15c:	00bf      	lsls	r7, r7, #2
    f15e:	59d2      	ldr	r2, [r2, r7]
    f160:	4697      	mov	pc, r2
    f162:	465b      	mov	r3, fp
    f164:	4303      	orrs	r3, r0
    f166:	4699      	mov	r9, r3
    f168:	d000      	beq.n	f16c <__aeabi_dmul+0xa0>
    f16a:	e087      	b.n	f27c <__aeabi_dmul+0x1b0>
    f16c:	2300      	movs	r3, #0
    f16e:	469b      	mov	fp, r3
    f170:	3302      	adds	r3, #2
    f172:	2708      	movs	r7, #8
    f174:	9302      	str	r3, [sp, #8]
    f176:	e7ce      	b.n	f116 <__aeabi_dmul+0x4a>
    f178:	4642      	mov	r2, r8
    f17a:	9201      	str	r2, [sp, #4]
    f17c:	2802      	cmp	r0, #2
    f17e:	d067      	beq.n	f250 <__aeabi_dmul+0x184>
    f180:	2803      	cmp	r0, #3
    f182:	d100      	bne.n	f186 <__aeabi_dmul+0xba>
    f184:	e20e      	b.n	f5a4 <__aeabi_dmul+0x4d8>
    f186:	2801      	cmp	r0, #1
    f188:	d000      	beq.n	f18c <__aeabi_dmul+0xc0>
    f18a:	e162      	b.n	f452 <__aeabi_dmul+0x386>
    f18c:	2300      	movs	r3, #0
    f18e:	2400      	movs	r4, #0
    f190:	2200      	movs	r2, #0
    f192:	4699      	mov	r9, r3
    f194:	9901      	ldr	r1, [sp, #4]
    f196:	4001      	ands	r1, r0
    f198:	b2cd      	uxtb	r5, r1
    f19a:	2100      	movs	r1, #0
    f19c:	0312      	lsls	r2, r2, #12
    f19e:	0d0b      	lsrs	r3, r1, #20
    f1a0:	0b12      	lsrs	r2, r2, #12
    f1a2:	051b      	lsls	r3, r3, #20
    f1a4:	4313      	orrs	r3, r2
    f1a6:	4a43      	ldr	r2, [pc, #268]	; (f2b4 <__aeabi_dmul+0x1e8>)
    f1a8:	0524      	lsls	r4, r4, #20
    f1aa:	4013      	ands	r3, r2
    f1ac:	431c      	orrs	r4, r3
    f1ae:	0064      	lsls	r4, r4, #1
    f1b0:	07ed      	lsls	r5, r5, #31
    f1b2:	0864      	lsrs	r4, r4, #1
    f1b4:	432c      	orrs	r4, r5
    f1b6:	4648      	mov	r0, r9
    f1b8:	0021      	movs	r1, r4
    f1ba:	b007      	add	sp, #28
    f1bc:	bc3c      	pop	{r2, r3, r4, r5}
    f1be:	4690      	mov	r8, r2
    f1c0:	4699      	mov	r9, r3
    f1c2:	46a2      	mov	sl, r4
    f1c4:	46ab      	mov	fp, r5
    f1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1c8:	4303      	orrs	r3, r0
    f1ca:	4699      	mov	r9, r3
    f1cc:	d04f      	beq.n	f26e <__aeabi_dmul+0x1a2>
    f1ce:	465b      	mov	r3, fp
    f1d0:	2b00      	cmp	r3, #0
    f1d2:	d100      	bne.n	f1d6 <__aeabi_dmul+0x10a>
    f1d4:	e189      	b.n	f4ea <__aeabi_dmul+0x41e>
    f1d6:	4658      	mov	r0, fp
    f1d8:	f000 feb8 	bl	ff4c <__clzsi2>
    f1dc:	0003      	movs	r3, r0
    f1de:	3b0b      	subs	r3, #11
    f1e0:	2b1c      	cmp	r3, #28
    f1e2:	dd00      	ble.n	f1e6 <__aeabi_dmul+0x11a>
    f1e4:	e17a      	b.n	f4dc <__aeabi_dmul+0x410>
    f1e6:	221d      	movs	r2, #29
    f1e8:	1ad3      	subs	r3, r2, r3
    f1ea:	003a      	movs	r2, r7
    f1ec:	0001      	movs	r1, r0
    f1ee:	465c      	mov	r4, fp
    f1f0:	40da      	lsrs	r2, r3
    f1f2:	3908      	subs	r1, #8
    f1f4:	408c      	lsls	r4, r1
    f1f6:	0013      	movs	r3, r2
    f1f8:	408f      	lsls	r7, r1
    f1fa:	4323      	orrs	r3, r4
    f1fc:	469b      	mov	fp, r3
    f1fe:	46b9      	mov	r9, r7
    f200:	2300      	movs	r3, #0
    f202:	4e2d      	ldr	r6, [pc, #180]	; (f2b8 <__aeabi_dmul+0x1ec>)
    f204:	2700      	movs	r7, #0
    f206:	1a36      	subs	r6, r6, r0
    f208:	9302      	str	r3, [sp, #8]
    f20a:	e784      	b.n	f116 <__aeabi_dmul+0x4a>
    f20c:	4653      	mov	r3, sl
    f20e:	4323      	orrs	r3, r4
    f210:	d12a      	bne.n	f268 <__aeabi_dmul+0x19c>
    f212:	2400      	movs	r4, #0
    f214:	2002      	movs	r0, #2
    f216:	e796      	b.n	f146 <__aeabi_dmul+0x7a>
    f218:	4653      	mov	r3, sl
    f21a:	4323      	orrs	r3, r4
    f21c:	d020      	beq.n	f260 <__aeabi_dmul+0x194>
    f21e:	2c00      	cmp	r4, #0
    f220:	d100      	bne.n	f224 <__aeabi_dmul+0x158>
    f222:	e157      	b.n	f4d4 <__aeabi_dmul+0x408>
    f224:	0020      	movs	r0, r4
    f226:	f000 fe91 	bl	ff4c <__clzsi2>
    f22a:	0003      	movs	r3, r0
    f22c:	3b0b      	subs	r3, #11
    f22e:	2b1c      	cmp	r3, #28
    f230:	dd00      	ble.n	f234 <__aeabi_dmul+0x168>
    f232:	e149      	b.n	f4c8 <__aeabi_dmul+0x3fc>
    f234:	211d      	movs	r1, #29
    f236:	1acb      	subs	r3, r1, r3
    f238:	4651      	mov	r1, sl
    f23a:	0002      	movs	r2, r0
    f23c:	40d9      	lsrs	r1, r3
    f23e:	4653      	mov	r3, sl
    f240:	3a08      	subs	r2, #8
    f242:	4094      	lsls	r4, r2
    f244:	4093      	lsls	r3, r2
    f246:	430c      	orrs	r4, r1
    f248:	4a1b      	ldr	r2, [pc, #108]	; (f2b8 <__aeabi_dmul+0x1ec>)
    f24a:	1a12      	subs	r2, r2, r0
    f24c:	2000      	movs	r0, #0
    f24e:	e77a      	b.n	f146 <__aeabi_dmul+0x7a>
    f250:	2501      	movs	r5, #1
    f252:	9b01      	ldr	r3, [sp, #4]
    f254:	4c14      	ldr	r4, [pc, #80]	; (f2a8 <__aeabi_dmul+0x1dc>)
    f256:	401d      	ands	r5, r3
    f258:	2300      	movs	r3, #0
    f25a:	2200      	movs	r2, #0
    f25c:	4699      	mov	r9, r3
    f25e:	e79c      	b.n	f19a <__aeabi_dmul+0xce>
    f260:	2400      	movs	r4, #0
    f262:	2200      	movs	r2, #0
    f264:	2001      	movs	r0, #1
    f266:	e76e      	b.n	f146 <__aeabi_dmul+0x7a>
    f268:	4653      	mov	r3, sl
    f26a:	2003      	movs	r0, #3
    f26c:	e76b      	b.n	f146 <__aeabi_dmul+0x7a>
    f26e:	2300      	movs	r3, #0
    f270:	469b      	mov	fp, r3
    f272:	3301      	adds	r3, #1
    f274:	2704      	movs	r7, #4
    f276:	2600      	movs	r6, #0
    f278:	9302      	str	r3, [sp, #8]
    f27a:	e74c      	b.n	f116 <__aeabi_dmul+0x4a>
    f27c:	2303      	movs	r3, #3
    f27e:	4681      	mov	r9, r0
    f280:	270c      	movs	r7, #12
    f282:	9302      	str	r3, [sp, #8]
    f284:	e747      	b.n	f116 <__aeabi_dmul+0x4a>
    f286:	2280      	movs	r2, #128	; 0x80
    f288:	2300      	movs	r3, #0
    f28a:	2500      	movs	r5, #0
    f28c:	0312      	lsls	r2, r2, #12
    f28e:	4699      	mov	r9, r3
    f290:	4c05      	ldr	r4, [pc, #20]	; (f2a8 <__aeabi_dmul+0x1dc>)
    f292:	e782      	b.n	f19a <__aeabi_dmul+0xce>
    f294:	465c      	mov	r4, fp
    f296:	464b      	mov	r3, r9
    f298:	9802      	ldr	r0, [sp, #8]
    f29a:	e76f      	b.n	f17c <__aeabi_dmul+0xb0>
    f29c:	465c      	mov	r4, fp
    f29e:	464b      	mov	r3, r9
    f2a0:	9501      	str	r5, [sp, #4]
    f2a2:	9802      	ldr	r0, [sp, #8]
    f2a4:	e76a      	b.n	f17c <__aeabi_dmul+0xb0>
    f2a6:	46c0      	nop			; (mov r8, r8)
    f2a8:	000007ff 	.word	0x000007ff
    f2ac:	fffffc01 	.word	0xfffffc01
    f2b0:	00012a40 	.word	0x00012a40
    f2b4:	800fffff 	.word	0x800fffff
    f2b8:	fffffc0d 	.word	0xfffffc0d
    f2bc:	464a      	mov	r2, r9
    f2be:	4649      	mov	r1, r9
    f2c0:	0c17      	lsrs	r7, r2, #16
    f2c2:	0c1a      	lsrs	r2, r3, #16
    f2c4:	041b      	lsls	r3, r3, #16
    f2c6:	0c1b      	lsrs	r3, r3, #16
    f2c8:	0408      	lsls	r0, r1, #16
    f2ca:	0019      	movs	r1, r3
    f2cc:	0c00      	lsrs	r0, r0, #16
    f2ce:	4341      	muls	r1, r0
    f2d0:	0015      	movs	r5, r2
    f2d2:	4688      	mov	r8, r1
    f2d4:	0019      	movs	r1, r3
    f2d6:	437d      	muls	r5, r7
    f2d8:	4379      	muls	r1, r7
    f2da:	9503      	str	r5, [sp, #12]
    f2dc:	4689      	mov	r9, r1
    f2de:	0029      	movs	r1, r5
    f2e0:	0015      	movs	r5, r2
    f2e2:	4345      	muls	r5, r0
    f2e4:	444d      	add	r5, r9
    f2e6:	9502      	str	r5, [sp, #8]
    f2e8:	4645      	mov	r5, r8
    f2ea:	0c2d      	lsrs	r5, r5, #16
    f2ec:	46aa      	mov	sl, r5
    f2ee:	9d02      	ldr	r5, [sp, #8]
    f2f0:	4455      	add	r5, sl
    f2f2:	45a9      	cmp	r9, r5
    f2f4:	d906      	bls.n	f304 <__aeabi_dmul+0x238>
    f2f6:	468a      	mov	sl, r1
    f2f8:	2180      	movs	r1, #128	; 0x80
    f2fa:	0249      	lsls	r1, r1, #9
    f2fc:	4689      	mov	r9, r1
    f2fe:	44ca      	add	sl, r9
    f300:	4651      	mov	r1, sl
    f302:	9103      	str	r1, [sp, #12]
    f304:	0c29      	lsrs	r1, r5, #16
    f306:	9104      	str	r1, [sp, #16]
    f308:	4641      	mov	r1, r8
    f30a:	0409      	lsls	r1, r1, #16
    f30c:	042d      	lsls	r5, r5, #16
    f30e:	0c09      	lsrs	r1, r1, #16
    f310:	4688      	mov	r8, r1
    f312:	0029      	movs	r1, r5
    f314:	0c25      	lsrs	r5, r4, #16
    f316:	0424      	lsls	r4, r4, #16
    f318:	4441      	add	r1, r8
    f31a:	0c24      	lsrs	r4, r4, #16
    f31c:	9105      	str	r1, [sp, #20]
    f31e:	0021      	movs	r1, r4
    f320:	4341      	muls	r1, r0
    f322:	4688      	mov	r8, r1
    f324:	0021      	movs	r1, r4
    f326:	4379      	muls	r1, r7
    f328:	468a      	mov	sl, r1
    f32a:	4368      	muls	r0, r5
    f32c:	4641      	mov	r1, r8
    f32e:	4450      	add	r0, sl
    f330:	4681      	mov	r9, r0
    f332:	0c08      	lsrs	r0, r1, #16
    f334:	4448      	add	r0, r9
    f336:	436f      	muls	r7, r5
    f338:	4582      	cmp	sl, r0
    f33a:	d903      	bls.n	f344 <__aeabi_dmul+0x278>
    f33c:	2180      	movs	r1, #128	; 0x80
    f33e:	0249      	lsls	r1, r1, #9
    f340:	4689      	mov	r9, r1
    f342:	444f      	add	r7, r9
    f344:	0c01      	lsrs	r1, r0, #16
    f346:	4689      	mov	r9, r1
    f348:	0039      	movs	r1, r7
    f34a:	4449      	add	r1, r9
    f34c:	9102      	str	r1, [sp, #8]
    f34e:	4641      	mov	r1, r8
    f350:	040f      	lsls	r7, r1, #16
    f352:	9904      	ldr	r1, [sp, #16]
    f354:	0c3f      	lsrs	r7, r7, #16
    f356:	4688      	mov	r8, r1
    f358:	0400      	lsls	r0, r0, #16
    f35a:	19c0      	adds	r0, r0, r7
    f35c:	4480      	add	r8, r0
    f35e:	4641      	mov	r1, r8
    f360:	9104      	str	r1, [sp, #16]
    f362:	4659      	mov	r1, fp
    f364:	0c0f      	lsrs	r7, r1, #16
    f366:	0409      	lsls	r1, r1, #16
    f368:	0c09      	lsrs	r1, r1, #16
    f36a:	4688      	mov	r8, r1
    f36c:	4359      	muls	r1, r3
    f36e:	468a      	mov	sl, r1
    f370:	0039      	movs	r1, r7
    f372:	4351      	muls	r1, r2
    f374:	4689      	mov	r9, r1
    f376:	4641      	mov	r1, r8
    f378:	434a      	muls	r2, r1
    f37a:	4651      	mov	r1, sl
    f37c:	0c09      	lsrs	r1, r1, #16
    f37e:	468b      	mov	fp, r1
    f380:	437b      	muls	r3, r7
    f382:	18d2      	adds	r2, r2, r3
    f384:	445a      	add	r2, fp
    f386:	4293      	cmp	r3, r2
    f388:	d903      	bls.n	f392 <__aeabi_dmul+0x2c6>
    f38a:	2380      	movs	r3, #128	; 0x80
    f38c:	025b      	lsls	r3, r3, #9
    f38e:	469b      	mov	fp, r3
    f390:	44d9      	add	r9, fp
    f392:	4651      	mov	r1, sl
    f394:	0409      	lsls	r1, r1, #16
    f396:	0c09      	lsrs	r1, r1, #16
    f398:	468a      	mov	sl, r1
    f39a:	4641      	mov	r1, r8
    f39c:	4361      	muls	r1, r4
    f39e:	437c      	muls	r4, r7
    f3a0:	0c13      	lsrs	r3, r2, #16
    f3a2:	0412      	lsls	r2, r2, #16
    f3a4:	444b      	add	r3, r9
    f3a6:	4452      	add	r2, sl
    f3a8:	46a1      	mov	r9, r4
    f3aa:	468a      	mov	sl, r1
    f3ac:	003c      	movs	r4, r7
    f3ae:	4641      	mov	r1, r8
    f3b0:	436c      	muls	r4, r5
    f3b2:	434d      	muls	r5, r1
    f3b4:	4651      	mov	r1, sl
    f3b6:	444d      	add	r5, r9
    f3b8:	0c0f      	lsrs	r7, r1, #16
    f3ba:	197d      	adds	r5, r7, r5
    f3bc:	45a9      	cmp	r9, r5
    f3be:	d903      	bls.n	f3c8 <__aeabi_dmul+0x2fc>
    f3c0:	2180      	movs	r1, #128	; 0x80
    f3c2:	0249      	lsls	r1, r1, #9
    f3c4:	4688      	mov	r8, r1
    f3c6:	4444      	add	r4, r8
    f3c8:	9f04      	ldr	r7, [sp, #16]
    f3ca:	9903      	ldr	r1, [sp, #12]
    f3cc:	46b8      	mov	r8, r7
    f3ce:	4441      	add	r1, r8
    f3d0:	468b      	mov	fp, r1
    f3d2:	4583      	cmp	fp, r0
    f3d4:	4180      	sbcs	r0, r0
    f3d6:	4241      	negs	r1, r0
    f3d8:	4688      	mov	r8, r1
    f3da:	4651      	mov	r1, sl
    f3dc:	0408      	lsls	r0, r1, #16
    f3de:	042f      	lsls	r7, r5, #16
    f3e0:	0c00      	lsrs	r0, r0, #16
    f3e2:	183f      	adds	r7, r7, r0
    f3e4:	4658      	mov	r0, fp
    f3e6:	9902      	ldr	r1, [sp, #8]
    f3e8:	1810      	adds	r0, r2, r0
    f3ea:	4689      	mov	r9, r1
    f3ec:	4290      	cmp	r0, r2
    f3ee:	4192      	sbcs	r2, r2
    f3f0:	444f      	add	r7, r9
    f3f2:	46ba      	mov	sl, r7
    f3f4:	4252      	negs	r2, r2
    f3f6:	4699      	mov	r9, r3
    f3f8:	4693      	mov	fp, r2
    f3fa:	44c2      	add	sl, r8
    f3fc:	44d1      	add	r9, sl
    f3fe:	44cb      	add	fp, r9
    f400:	428f      	cmp	r7, r1
    f402:	41bf      	sbcs	r7, r7
    f404:	45c2      	cmp	sl, r8
    f406:	4189      	sbcs	r1, r1
    f408:	4599      	cmp	r9, r3
    f40a:	419b      	sbcs	r3, r3
    f40c:	4593      	cmp	fp, r2
    f40e:	4192      	sbcs	r2, r2
    f410:	427f      	negs	r7, r7
    f412:	4249      	negs	r1, r1
    f414:	0c2d      	lsrs	r5, r5, #16
    f416:	4252      	negs	r2, r2
    f418:	430f      	orrs	r7, r1
    f41a:	425b      	negs	r3, r3
    f41c:	4313      	orrs	r3, r2
    f41e:	197f      	adds	r7, r7, r5
    f420:	18ff      	adds	r7, r7, r3
    f422:	465b      	mov	r3, fp
    f424:	193c      	adds	r4, r7, r4
    f426:	0ddb      	lsrs	r3, r3, #23
    f428:	9a05      	ldr	r2, [sp, #20]
    f42a:	0264      	lsls	r4, r4, #9
    f42c:	431c      	orrs	r4, r3
    f42e:	0243      	lsls	r3, r0, #9
    f430:	4313      	orrs	r3, r2
    f432:	1e5d      	subs	r5, r3, #1
    f434:	41ab      	sbcs	r3, r5
    f436:	465a      	mov	r2, fp
    f438:	0dc0      	lsrs	r0, r0, #23
    f43a:	4303      	orrs	r3, r0
    f43c:	0252      	lsls	r2, r2, #9
    f43e:	4313      	orrs	r3, r2
    f440:	01e2      	lsls	r2, r4, #7
    f442:	d556      	bpl.n	f4f2 <__aeabi_dmul+0x426>
    f444:	2001      	movs	r0, #1
    f446:	085a      	lsrs	r2, r3, #1
    f448:	4003      	ands	r3, r0
    f44a:	4313      	orrs	r3, r2
    f44c:	07e2      	lsls	r2, r4, #31
    f44e:	4313      	orrs	r3, r2
    f450:	0864      	lsrs	r4, r4, #1
    f452:	485a      	ldr	r0, [pc, #360]	; (f5bc <__aeabi_dmul+0x4f0>)
    f454:	4460      	add	r0, ip
    f456:	2800      	cmp	r0, #0
    f458:	dd4d      	ble.n	f4f6 <__aeabi_dmul+0x42a>
    f45a:	075a      	lsls	r2, r3, #29
    f45c:	d009      	beq.n	f472 <__aeabi_dmul+0x3a6>
    f45e:	220f      	movs	r2, #15
    f460:	401a      	ands	r2, r3
    f462:	2a04      	cmp	r2, #4
    f464:	d005      	beq.n	f472 <__aeabi_dmul+0x3a6>
    f466:	1d1a      	adds	r2, r3, #4
    f468:	429a      	cmp	r2, r3
    f46a:	419b      	sbcs	r3, r3
    f46c:	425b      	negs	r3, r3
    f46e:	18e4      	adds	r4, r4, r3
    f470:	0013      	movs	r3, r2
    f472:	01e2      	lsls	r2, r4, #7
    f474:	d504      	bpl.n	f480 <__aeabi_dmul+0x3b4>
    f476:	2080      	movs	r0, #128	; 0x80
    f478:	4a51      	ldr	r2, [pc, #324]	; (f5c0 <__aeabi_dmul+0x4f4>)
    f47a:	00c0      	lsls	r0, r0, #3
    f47c:	4014      	ands	r4, r2
    f47e:	4460      	add	r0, ip
    f480:	4a50      	ldr	r2, [pc, #320]	; (f5c4 <__aeabi_dmul+0x4f8>)
    f482:	4290      	cmp	r0, r2
    f484:	dd00      	ble.n	f488 <__aeabi_dmul+0x3bc>
    f486:	e6e3      	b.n	f250 <__aeabi_dmul+0x184>
    f488:	2501      	movs	r5, #1
    f48a:	08db      	lsrs	r3, r3, #3
    f48c:	0762      	lsls	r2, r4, #29
    f48e:	431a      	orrs	r2, r3
    f490:	0264      	lsls	r4, r4, #9
    f492:	9b01      	ldr	r3, [sp, #4]
    f494:	4691      	mov	r9, r2
    f496:	0b22      	lsrs	r2, r4, #12
    f498:	0544      	lsls	r4, r0, #21
    f49a:	0d64      	lsrs	r4, r4, #21
    f49c:	401d      	ands	r5, r3
    f49e:	e67c      	b.n	f19a <__aeabi_dmul+0xce>
    f4a0:	2280      	movs	r2, #128	; 0x80
    f4a2:	4659      	mov	r1, fp
    f4a4:	0312      	lsls	r2, r2, #12
    f4a6:	4211      	tst	r1, r2
    f4a8:	d008      	beq.n	f4bc <__aeabi_dmul+0x3f0>
    f4aa:	4214      	tst	r4, r2
    f4ac:	d106      	bne.n	f4bc <__aeabi_dmul+0x3f0>
    f4ae:	4322      	orrs	r2, r4
    f4b0:	0312      	lsls	r2, r2, #12
    f4b2:	0b12      	lsrs	r2, r2, #12
    f4b4:	4645      	mov	r5, r8
    f4b6:	4699      	mov	r9, r3
    f4b8:	4c43      	ldr	r4, [pc, #268]	; (f5c8 <__aeabi_dmul+0x4fc>)
    f4ba:	e66e      	b.n	f19a <__aeabi_dmul+0xce>
    f4bc:	465b      	mov	r3, fp
    f4be:	431a      	orrs	r2, r3
    f4c0:	0312      	lsls	r2, r2, #12
    f4c2:	0b12      	lsrs	r2, r2, #12
    f4c4:	4c40      	ldr	r4, [pc, #256]	; (f5c8 <__aeabi_dmul+0x4fc>)
    f4c6:	e668      	b.n	f19a <__aeabi_dmul+0xce>
    f4c8:	0003      	movs	r3, r0
    f4ca:	4654      	mov	r4, sl
    f4cc:	3b28      	subs	r3, #40	; 0x28
    f4ce:	409c      	lsls	r4, r3
    f4d0:	2300      	movs	r3, #0
    f4d2:	e6b9      	b.n	f248 <__aeabi_dmul+0x17c>
    f4d4:	f000 fd3a 	bl	ff4c <__clzsi2>
    f4d8:	3020      	adds	r0, #32
    f4da:	e6a6      	b.n	f22a <__aeabi_dmul+0x15e>
    f4dc:	0003      	movs	r3, r0
    f4de:	3b28      	subs	r3, #40	; 0x28
    f4e0:	409f      	lsls	r7, r3
    f4e2:	2300      	movs	r3, #0
    f4e4:	46bb      	mov	fp, r7
    f4e6:	4699      	mov	r9, r3
    f4e8:	e68a      	b.n	f200 <__aeabi_dmul+0x134>
    f4ea:	f000 fd2f 	bl	ff4c <__clzsi2>
    f4ee:	3020      	adds	r0, #32
    f4f0:	e674      	b.n	f1dc <__aeabi_dmul+0x110>
    f4f2:	46b4      	mov	ip, r6
    f4f4:	e7ad      	b.n	f452 <__aeabi_dmul+0x386>
    f4f6:	2501      	movs	r5, #1
    f4f8:	1a2a      	subs	r2, r5, r0
    f4fa:	2a38      	cmp	r2, #56	; 0x38
    f4fc:	dd06      	ble.n	f50c <__aeabi_dmul+0x440>
    f4fe:	9b01      	ldr	r3, [sp, #4]
    f500:	2400      	movs	r4, #0
    f502:	401d      	ands	r5, r3
    f504:	2300      	movs	r3, #0
    f506:	2200      	movs	r2, #0
    f508:	4699      	mov	r9, r3
    f50a:	e646      	b.n	f19a <__aeabi_dmul+0xce>
    f50c:	2a1f      	cmp	r2, #31
    f50e:	dc21      	bgt.n	f554 <__aeabi_dmul+0x488>
    f510:	2520      	movs	r5, #32
    f512:	0020      	movs	r0, r4
    f514:	1aad      	subs	r5, r5, r2
    f516:	001e      	movs	r6, r3
    f518:	40ab      	lsls	r3, r5
    f51a:	40a8      	lsls	r0, r5
    f51c:	40d6      	lsrs	r6, r2
    f51e:	1e5d      	subs	r5, r3, #1
    f520:	41ab      	sbcs	r3, r5
    f522:	4330      	orrs	r0, r6
    f524:	4318      	orrs	r0, r3
    f526:	40d4      	lsrs	r4, r2
    f528:	0743      	lsls	r3, r0, #29
    f52a:	d009      	beq.n	f540 <__aeabi_dmul+0x474>
    f52c:	230f      	movs	r3, #15
    f52e:	4003      	ands	r3, r0
    f530:	2b04      	cmp	r3, #4
    f532:	d005      	beq.n	f540 <__aeabi_dmul+0x474>
    f534:	0003      	movs	r3, r0
    f536:	1d18      	adds	r0, r3, #4
    f538:	4298      	cmp	r0, r3
    f53a:	419b      	sbcs	r3, r3
    f53c:	425b      	negs	r3, r3
    f53e:	18e4      	adds	r4, r4, r3
    f540:	0223      	lsls	r3, r4, #8
    f542:	d521      	bpl.n	f588 <__aeabi_dmul+0x4bc>
    f544:	2501      	movs	r5, #1
    f546:	9b01      	ldr	r3, [sp, #4]
    f548:	2401      	movs	r4, #1
    f54a:	401d      	ands	r5, r3
    f54c:	2300      	movs	r3, #0
    f54e:	2200      	movs	r2, #0
    f550:	4699      	mov	r9, r3
    f552:	e622      	b.n	f19a <__aeabi_dmul+0xce>
    f554:	251f      	movs	r5, #31
    f556:	0021      	movs	r1, r4
    f558:	426d      	negs	r5, r5
    f55a:	1a28      	subs	r0, r5, r0
    f55c:	40c1      	lsrs	r1, r0
    f55e:	0008      	movs	r0, r1
    f560:	2a20      	cmp	r2, #32
    f562:	d01d      	beq.n	f5a0 <__aeabi_dmul+0x4d4>
    f564:	355f      	adds	r5, #95	; 0x5f
    f566:	1aaa      	subs	r2, r5, r2
    f568:	4094      	lsls	r4, r2
    f56a:	4323      	orrs	r3, r4
    f56c:	1e5c      	subs	r4, r3, #1
    f56e:	41a3      	sbcs	r3, r4
    f570:	2507      	movs	r5, #7
    f572:	4303      	orrs	r3, r0
    f574:	401d      	ands	r5, r3
    f576:	2200      	movs	r2, #0
    f578:	2d00      	cmp	r5, #0
    f57a:	d009      	beq.n	f590 <__aeabi_dmul+0x4c4>
    f57c:	220f      	movs	r2, #15
    f57e:	2400      	movs	r4, #0
    f580:	401a      	ands	r2, r3
    f582:	0018      	movs	r0, r3
    f584:	2a04      	cmp	r2, #4
    f586:	d1d6      	bne.n	f536 <__aeabi_dmul+0x46a>
    f588:	0003      	movs	r3, r0
    f58a:	0765      	lsls	r5, r4, #29
    f58c:	0264      	lsls	r4, r4, #9
    f58e:	0b22      	lsrs	r2, r4, #12
    f590:	08db      	lsrs	r3, r3, #3
    f592:	432b      	orrs	r3, r5
    f594:	2501      	movs	r5, #1
    f596:	4699      	mov	r9, r3
    f598:	9b01      	ldr	r3, [sp, #4]
    f59a:	2400      	movs	r4, #0
    f59c:	401d      	ands	r5, r3
    f59e:	e5fc      	b.n	f19a <__aeabi_dmul+0xce>
    f5a0:	2400      	movs	r4, #0
    f5a2:	e7e2      	b.n	f56a <__aeabi_dmul+0x49e>
    f5a4:	2280      	movs	r2, #128	; 0x80
    f5a6:	2501      	movs	r5, #1
    f5a8:	0312      	lsls	r2, r2, #12
    f5aa:	4322      	orrs	r2, r4
    f5ac:	9901      	ldr	r1, [sp, #4]
    f5ae:	0312      	lsls	r2, r2, #12
    f5b0:	0b12      	lsrs	r2, r2, #12
    f5b2:	400d      	ands	r5, r1
    f5b4:	4699      	mov	r9, r3
    f5b6:	4c04      	ldr	r4, [pc, #16]	; (f5c8 <__aeabi_dmul+0x4fc>)
    f5b8:	e5ef      	b.n	f19a <__aeabi_dmul+0xce>
    f5ba:	46c0      	nop			; (mov r8, r8)
    f5bc:	000003ff 	.word	0x000003ff
    f5c0:	feffffff 	.word	0xfeffffff
    f5c4:	000007fe 	.word	0x000007fe
    f5c8:	000007ff 	.word	0x000007ff

0000f5cc <__aeabi_dsub>:
    f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5ce:	4646      	mov	r6, r8
    f5d0:	46d6      	mov	lr, sl
    f5d2:	464f      	mov	r7, r9
    f5d4:	030c      	lsls	r4, r1, #12
    f5d6:	b5c0      	push	{r6, r7, lr}
    f5d8:	0fcd      	lsrs	r5, r1, #31
    f5da:	004e      	lsls	r6, r1, #1
    f5dc:	0a61      	lsrs	r1, r4, #9
    f5de:	0f44      	lsrs	r4, r0, #29
    f5e0:	430c      	orrs	r4, r1
    f5e2:	00c1      	lsls	r1, r0, #3
    f5e4:	0058      	lsls	r0, r3, #1
    f5e6:	0d40      	lsrs	r0, r0, #21
    f5e8:	4684      	mov	ip, r0
    f5ea:	468a      	mov	sl, r1
    f5ec:	000f      	movs	r7, r1
    f5ee:	0319      	lsls	r1, r3, #12
    f5f0:	0f50      	lsrs	r0, r2, #29
    f5f2:	0a49      	lsrs	r1, r1, #9
    f5f4:	4301      	orrs	r1, r0
    f5f6:	48c6      	ldr	r0, [pc, #792]	; (f910 <__aeabi_dsub+0x344>)
    f5f8:	0d76      	lsrs	r6, r6, #21
    f5fa:	46a8      	mov	r8, r5
    f5fc:	0fdb      	lsrs	r3, r3, #31
    f5fe:	00d2      	lsls	r2, r2, #3
    f600:	4584      	cmp	ip, r0
    f602:	d100      	bne.n	f606 <__aeabi_dsub+0x3a>
    f604:	e0d8      	b.n	f7b8 <__aeabi_dsub+0x1ec>
    f606:	2001      	movs	r0, #1
    f608:	4043      	eors	r3, r0
    f60a:	42ab      	cmp	r3, r5
    f60c:	d100      	bne.n	f610 <__aeabi_dsub+0x44>
    f60e:	e0a6      	b.n	f75e <__aeabi_dsub+0x192>
    f610:	4660      	mov	r0, ip
    f612:	1a35      	subs	r5, r6, r0
    f614:	2d00      	cmp	r5, #0
    f616:	dc00      	bgt.n	f61a <__aeabi_dsub+0x4e>
    f618:	e105      	b.n	f826 <__aeabi_dsub+0x25a>
    f61a:	2800      	cmp	r0, #0
    f61c:	d110      	bne.n	f640 <__aeabi_dsub+0x74>
    f61e:	000b      	movs	r3, r1
    f620:	4313      	orrs	r3, r2
    f622:	d100      	bne.n	f626 <__aeabi_dsub+0x5a>
    f624:	e0d7      	b.n	f7d6 <__aeabi_dsub+0x20a>
    f626:	1e6b      	subs	r3, r5, #1
    f628:	2b00      	cmp	r3, #0
    f62a:	d000      	beq.n	f62e <__aeabi_dsub+0x62>
    f62c:	e14b      	b.n	f8c6 <__aeabi_dsub+0x2fa>
    f62e:	4653      	mov	r3, sl
    f630:	1a9f      	subs	r7, r3, r2
    f632:	45ba      	cmp	sl, r7
    f634:	4180      	sbcs	r0, r0
    f636:	1a64      	subs	r4, r4, r1
    f638:	4240      	negs	r0, r0
    f63a:	1a24      	subs	r4, r4, r0
    f63c:	2601      	movs	r6, #1
    f63e:	e01e      	b.n	f67e <__aeabi_dsub+0xb2>
    f640:	4bb3      	ldr	r3, [pc, #716]	; (f910 <__aeabi_dsub+0x344>)
    f642:	429e      	cmp	r6, r3
    f644:	d048      	beq.n	f6d8 <__aeabi_dsub+0x10c>
    f646:	2380      	movs	r3, #128	; 0x80
    f648:	041b      	lsls	r3, r3, #16
    f64a:	4319      	orrs	r1, r3
    f64c:	2d38      	cmp	r5, #56	; 0x38
    f64e:	dd00      	ble.n	f652 <__aeabi_dsub+0x86>
    f650:	e119      	b.n	f886 <__aeabi_dsub+0x2ba>
    f652:	2d1f      	cmp	r5, #31
    f654:	dd00      	ble.n	f658 <__aeabi_dsub+0x8c>
    f656:	e14c      	b.n	f8f2 <__aeabi_dsub+0x326>
    f658:	2320      	movs	r3, #32
    f65a:	000f      	movs	r7, r1
    f65c:	1b5b      	subs	r3, r3, r5
    f65e:	0010      	movs	r0, r2
    f660:	409a      	lsls	r2, r3
    f662:	409f      	lsls	r7, r3
    f664:	40e8      	lsrs	r0, r5
    f666:	1e53      	subs	r3, r2, #1
    f668:	419a      	sbcs	r2, r3
    f66a:	40e9      	lsrs	r1, r5
    f66c:	4307      	orrs	r7, r0
    f66e:	4317      	orrs	r7, r2
    f670:	4653      	mov	r3, sl
    f672:	1bdf      	subs	r7, r3, r7
    f674:	1a61      	subs	r1, r4, r1
    f676:	45ba      	cmp	sl, r7
    f678:	41a4      	sbcs	r4, r4
    f67a:	4264      	negs	r4, r4
    f67c:	1b0c      	subs	r4, r1, r4
    f67e:	0223      	lsls	r3, r4, #8
    f680:	d400      	bmi.n	f684 <__aeabi_dsub+0xb8>
    f682:	e0c5      	b.n	f810 <__aeabi_dsub+0x244>
    f684:	0264      	lsls	r4, r4, #9
    f686:	0a65      	lsrs	r5, r4, #9
    f688:	2d00      	cmp	r5, #0
    f68a:	d100      	bne.n	f68e <__aeabi_dsub+0xc2>
    f68c:	e0f6      	b.n	f87c <__aeabi_dsub+0x2b0>
    f68e:	0028      	movs	r0, r5
    f690:	f000 fc5c 	bl	ff4c <__clzsi2>
    f694:	0003      	movs	r3, r0
    f696:	3b08      	subs	r3, #8
    f698:	2b1f      	cmp	r3, #31
    f69a:	dd00      	ble.n	f69e <__aeabi_dsub+0xd2>
    f69c:	e0e9      	b.n	f872 <__aeabi_dsub+0x2a6>
    f69e:	2220      	movs	r2, #32
    f6a0:	003c      	movs	r4, r7
    f6a2:	1ad2      	subs	r2, r2, r3
    f6a4:	409d      	lsls	r5, r3
    f6a6:	40d4      	lsrs	r4, r2
    f6a8:	409f      	lsls	r7, r3
    f6aa:	4325      	orrs	r5, r4
    f6ac:	429e      	cmp	r6, r3
    f6ae:	dd00      	ble.n	f6b2 <__aeabi_dsub+0xe6>
    f6b0:	e0db      	b.n	f86a <__aeabi_dsub+0x29e>
    f6b2:	1b9e      	subs	r6, r3, r6
    f6b4:	1c73      	adds	r3, r6, #1
    f6b6:	2b1f      	cmp	r3, #31
    f6b8:	dd00      	ble.n	f6bc <__aeabi_dsub+0xf0>
    f6ba:	e10a      	b.n	f8d2 <__aeabi_dsub+0x306>
    f6bc:	2220      	movs	r2, #32
    f6be:	0038      	movs	r0, r7
    f6c0:	1ad2      	subs	r2, r2, r3
    f6c2:	0029      	movs	r1, r5
    f6c4:	4097      	lsls	r7, r2
    f6c6:	002c      	movs	r4, r5
    f6c8:	4091      	lsls	r1, r2
    f6ca:	40d8      	lsrs	r0, r3
    f6cc:	1e7a      	subs	r2, r7, #1
    f6ce:	4197      	sbcs	r7, r2
    f6d0:	40dc      	lsrs	r4, r3
    f6d2:	2600      	movs	r6, #0
    f6d4:	4301      	orrs	r1, r0
    f6d6:	430f      	orrs	r7, r1
    f6d8:	077b      	lsls	r3, r7, #29
    f6da:	d009      	beq.n	f6f0 <__aeabi_dsub+0x124>
    f6dc:	230f      	movs	r3, #15
    f6de:	403b      	ands	r3, r7
    f6e0:	2b04      	cmp	r3, #4
    f6e2:	d005      	beq.n	f6f0 <__aeabi_dsub+0x124>
    f6e4:	1d3b      	adds	r3, r7, #4
    f6e6:	42bb      	cmp	r3, r7
    f6e8:	41bf      	sbcs	r7, r7
    f6ea:	427f      	negs	r7, r7
    f6ec:	19e4      	adds	r4, r4, r7
    f6ee:	001f      	movs	r7, r3
    f6f0:	0223      	lsls	r3, r4, #8
    f6f2:	d525      	bpl.n	f740 <__aeabi_dsub+0x174>
    f6f4:	4b86      	ldr	r3, [pc, #536]	; (f910 <__aeabi_dsub+0x344>)
    f6f6:	3601      	adds	r6, #1
    f6f8:	429e      	cmp	r6, r3
    f6fa:	d100      	bne.n	f6fe <__aeabi_dsub+0x132>
    f6fc:	e0af      	b.n	f85e <__aeabi_dsub+0x292>
    f6fe:	4b85      	ldr	r3, [pc, #532]	; (f914 <__aeabi_dsub+0x348>)
    f700:	2501      	movs	r5, #1
    f702:	401c      	ands	r4, r3
    f704:	4643      	mov	r3, r8
    f706:	0762      	lsls	r2, r4, #29
    f708:	08ff      	lsrs	r7, r7, #3
    f70a:	0264      	lsls	r4, r4, #9
    f70c:	0576      	lsls	r6, r6, #21
    f70e:	4317      	orrs	r7, r2
    f710:	0b24      	lsrs	r4, r4, #12
    f712:	0d76      	lsrs	r6, r6, #21
    f714:	401d      	ands	r5, r3
    f716:	2100      	movs	r1, #0
    f718:	0324      	lsls	r4, r4, #12
    f71a:	0b23      	lsrs	r3, r4, #12
    f71c:	0d0c      	lsrs	r4, r1, #20
    f71e:	4a7e      	ldr	r2, [pc, #504]	; (f918 <__aeabi_dsub+0x34c>)
    f720:	0524      	lsls	r4, r4, #20
    f722:	431c      	orrs	r4, r3
    f724:	4014      	ands	r4, r2
    f726:	0533      	lsls	r3, r6, #20
    f728:	4323      	orrs	r3, r4
    f72a:	005b      	lsls	r3, r3, #1
    f72c:	07ed      	lsls	r5, r5, #31
    f72e:	085b      	lsrs	r3, r3, #1
    f730:	432b      	orrs	r3, r5
    f732:	0038      	movs	r0, r7
    f734:	0019      	movs	r1, r3
    f736:	bc1c      	pop	{r2, r3, r4}
    f738:	4690      	mov	r8, r2
    f73a:	4699      	mov	r9, r3
    f73c:	46a2      	mov	sl, r4
    f73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f740:	2501      	movs	r5, #1
    f742:	4643      	mov	r3, r8
    f744:	0762      	lsls	r2, r4, #29
    f746:	08ff      	lsrs	r7, r7, #3
    f748:	4317      	orrs	r7, r2
    f74a:	08e4      	lsrs	r4, r4, #3
    f74c:	401d      	ands	r5, r3
    f74e:	4b70      	ldr	r3, [pc, #448]	; (f910 <__aeabi_dsub+0x344>)
    f750:	429e      	cmp	r6, r3
    f752:	d036      	beq.n	f7c2 <__aeabi_dsub+0x1f6>
    f754:	0324      	lsls	r4, r4, #12
    f756:	0576      	lsls	r6, r6, #21
    f758:	0b24      	lsrs	r4, r4, #12
    f75a:	0d76      	lsrs	r6, r6, #21
    f75c:	e7db      	b.n	f716 <__aeabi_dsub+0x14a>
    f75e:	4663      	mov	r3, ip
    f760:	1af3      	subs	r3, r6, r3
    f762:	2b00      	cmp	r3, #0
    f764:	dc00      	bgt.n	f768 <__aeabi_dsub+0x19c>
    f766:	e094      	b.n	f892 <__aeabi_dsub+0x2c6>
    f768:	4660      	mov	r0, ip
    f76a:	2800      	cmp	r0, #0
    f76c:	d035      	beq.n	f7da <__aeabi_dsub+0x20e>
    f76e:	4868      	ldr	r0, [pc, #416]	; (f910 <__aeabi_dsub+0x344>)
    f770:	4286      	cmp	r6, r0
    f772:	d0b1      	beq.n	f6d8 <__aeabi_dsub+0x10c>
    f774:	2780      	movs	r7, #128	; 0x80
    f776:	043f      	lsls	r7, r7, #16
    f778:	4339      	orrs	r1, r7
    f77a:	2b38      	cmp	r3, #56	; 0x38
    f77c:	dc00      	bgt.n	f780 <__aeabi_dsub+0x1b4>
    f77e:	e0fd      	b.n	f97c <__aeabi_dsub+0x3b0>
    f780:	430a      	orrs	r2, r1
    f782:	0017      	movs	r7, r2
    f784:	2100      	movs	r1, #0
    f786:	1e7a      	subs	r2, r7, #1
    f788:	4197      	sbcs	r7, r2
    f78a:	4457      	add	r7, sl
    f78c:	4557      	cmp	r7, sl
    f78e:	4180      	sbcs	r0, r0
    f790:	1909      	adds	r1, r1, r4
    f792:	4244      	negs	r4, r0
    f794:	190c      	adds	r4, r1, r4
    f796:	0223      	lsls	r3, r4, #8
    f798:	d53a      	bpl.n	f810 <__aeabi_dsub+0x244>
    f79a:	4b5d      	ldr	r3, [pc, #372]	; (f910 <__aeabi_dsub+0x344>)
    f79c:	3601      	adds	r6, #1
    f79e:	429e      	cmp	r6, r3
    f7a0:	d100      	bne.n	f7a4 <__aeabi_dsub+0x1d8>
    f7a2:	e14b      	b.n	fa3c <__aeabi_dsub+0x470>
    f7a4:	2201      	movs	r2, #1
    f7a6:	4b5b      	ldr	r3, [pc, #364]	; (f914 <__aeabi_dsub+0x348>)
    f7a8:	401c      	ands	r4, r3
    f7aa:	087b      	lsrs	r3, r7, #1
    f7ac:	4017      	ands	r7, r2
    f7ae:	431f      	orrs	r7, r3
    f7b0:	07e2      	lsls	r2, r4, #31
    f7b2:	4317      	orrs	r7, r2
    f7b4:	0864      	lsrs	r4, r4, #1
    f7b6:	e78f      	b.n	f6d8 <__aeabi_dsub+0x10c>
    f7b8:	0008      	movs	r0, r1
    f7ba:	4310      	orrs	r0, r2
    f7bc:	d000      	beq.n	f7c0 <__aeabi_dsub+0x1f4>
    f7be:	e724      	b.n	f60a <__aeabi_dsub+0x3e>
    f7c0:	e721      	b.n	f606 <__aeabi_dsub+0x3a>
    f7c2:	0023      	movs	r3, r4
    f7c4:	433b      	orrs	r3, r7
    f7c6:	d100      	bne.n	f7ca <__aeabi_dsub+0x1fe>
    f7c8:	e1b9      	b.n	fb3e <__aeabi_dsub+0x572>
    f7ca:	2280      	movs	r2, #128	; 0x80
    f7cc:	0312      	lsls	r2, r2, #12
    f7ce:	4314      	orrs	r4, r2
    f7d0:	0324      	lsls	r4, r4, #12
    f7d2:	0b24      	lsrs	r4, r4, #12
    f7d4:	e79f      	b.n	f716 <__aeabi_dsub+0x14a>
    f7d6:	002e      	movs	r6, r5
    f7d8:	e77e      	b.n	f6d8 <__aeabi_dsub+0x10c>
    f7da:	0008      	movs	r0, r1
    f7dc:	4310      	orrs	r0, r2
    f7de:	d100      	bne.n	f7e2 <__aeabi_dsub+0x216>
    f7e0:	e0ca      	b.n	f978 <__aeabi_dsub+0x3ac>
    f7e2:	1e58      	subs	r0, r3, #1
    f7e4:	4684      	mov	ip, r0
    f7e6:	2800      	cmp	r0, #0
    f7e8:	d000      	beq.n	f7ec <__aeabi_dsub+0x220>
    f7ea:	e0e7      	b.n	f9bc <__aeabi_dsub+0x3f0>
    f7ec:	4452      	add	r2, sl
    f7ee:	4552      	cmp	r2, sl
    f7f0:	4180      	sbcs	r0, r0
    f7f2:	1864      	adds	r4, r4, r1
    f7f4:	4240      	negs	r0, r0
    f7f6:	1824      	adds	r4, r4, r0
    f7f8:	0017      	movs	r7, r2
    f7fa:	2601      	movs	r6, #1
    f7fc:	0223      	lsls	r3, r4, #8
    f7fe:	d507      	bpl.n	f810 <__aeabi_dsub+0x244>
    f800:	2602      	movs	r6, #2
    f802:	e7cf      	b.n	f7a4 <__aeabi_dsub+0x1d8>
    f804:	4664      	mov	r4, ip
    f806:	432c      	orrs	r4, r5
    f808:	d100      	bne.n	f80c <__aeabi_dsub+0x240>
    f80a:	e1b3      	b.n	fb74 <__aeabi_dsub+0x5a8>
    f80c:	002c      	movs	r4, r5
    f80e:	4667      	mov	r7, ip
    f810:	077b      	lsls	r3, r7, #29
    f812:	d000      	beq.n	f816 <__aeabi_dsub+0x24a>
    f814:	e762      	b.n	f6dc <__aeabi_dsub+0x110>
    f816:	0763      	lsls	r3, r4, #29
    f818:	08ff      	lsrs	r7, r7, #3
    f81a:	431f      	orrs	r7, r3
    f81c:	2501      	movs	r5, #1
    f81e:	4643      	mov	r3, r8
    f820:	08e4      	lsrs	r4, r4, #3
    f822:	401d      	ands	r5, r3
    f824:	e793      	b.n	f74e <__aeabi_dsub+0x182>
    f826:	2d00      	cmp	r5, #0
    f828:	d178      	bne.n	f91c <__aeabi_dsub+0x350>
    f82a:	1c75      	adds	r5, r6, #1
    f82c:	056d      	lsls	r5, r5, #21
    f82e:	0d6d      	lsrs	r5, r5, #21
    f830:	2d01      	cmp	r5, #1
    f832:	dc00      	bgt.n	f836 <__aeabi_dsub+0x26a>
    f834:	e0f2      	b.n	fa1c <__aeabi_dsub+0x450>
    f836:	4650      	mov	r0, sl
    f838:	1a80      	subs	r0, r0, r2
    f83a:	4582      	cmp	sl, r0
    f83c:	41bf      	sbcs	r7, r7
    f83e:	1a65      	subs	r5, r4, r1
    f840:	427f      	negs	r7, r7
    f842:	1bed      	subs	r5, r5, r7
    f844:	4684      	mov	ip, r0
    f846:	0228      	lsls	r0, r5, #8
    f848:	d400      	bmi.n	f84c <__aeabi_dsub+0x280>
    f84a:	e08c      	b.n	f966 <__aeabi_dsub+0x39a>
    f84c:	4650      	mov	r0, sl
    f84e:	1a17      	subs	r7, r2, r0
    f850:	42ba      	cmp	r2, r7
    f852:	4192      	sbcs	r2, r2
    f854:	1b0c      	subs	r4, r1, r4
    f856:	4255      	negs	r5, r2
    f858:	1b65      	subs	r5, r4, r5
    f85a:	4698      	mov	r8, r3
    f85c:	e714      	b.n	f688 <__aeabi_dsub+0xbc>
    f85e:	2501      	movs	r5, #1
    f860:	4643      	mov	r3, r8
    f862:	2400      	movs	r4, #0
    f864:	401d      	ands	r5, r3
    f866:	2700      	movs	r7, #0
    f868:	e755      	b.n	f716 <__aeabi_dsub+0x14a>
    f86a:	4c2a      	ldr	r4, [pc, #168]	; (f914 <__aeabi_dsub+0x348>)
    f86c:	1af6      	subs	r6, r6, r3
    f86e:	402c      	ands	r4, r5
    f870:	e732      	b.n	f6d8 <__aeabi_dsub+0x10c>
    f872:	003d      	movs	r5, r7
    f874:	3828      	subs	r0, #40	; 0x28
    f876:	4085      	lsls	r5, r0
    f878:	2700      	movs	r7, #0
    f87a:	e717      	b.n	f6ac <__aeabi_dsub+0xe0>
    f87c:	0038      	movs	r0, r7
    f87e:	f000 fb65 	bl	ff4c <__clzsi2>
    f882:	3020      	adds	r0, #32
    f884:	e706      	b.n	f694 <__aeabi_dsub+0xc8>
    f886:	430a      	orrs	r2, r1
    f888:	0017      	movs	r7, r2
    f88a:	2100      	movs	r1, #0
    f88c:	1e7a      	subs	r2, r7, #1
    f88e:	4197      	sbcs	r7, r2
    f890:	e6ee      	b.n	f670 <__aeabi_dsub+0xa4>
    f892:	2b00      	cmp	r3, #0
    f894:	d000      	beq.n	f898 <__aeabi_dsub+0x2cc>
    f896:	e0e5      	b.n	fa64 <__aeabi_dsub+0x498>
    f898:	1c73      	adds	r3, r6, #1
    f89a:	469c      	mov	ip, r3
    f89c:	055b      	lsls	r3, r3, #21
    f89e:	0d5b      	lsrs	r3, r3, #21
    f8a0:	2b01      	cmp	r3, #1
    f8a2:	dc00      	bgt.n	f8a6 <__aeabi_dsub+0x2da>
    f8a4:	e09f      	b.n	f9e6 <__aeabi_dsub+0x41a>
    f8a6:	4b1a      	ldr	r3, [pc, #104]	; (f910 <__aeabi_dsub+0x344>)
    f8a8:	459c      	cmp	ip, r3
    f8aa:	d100      	bne.n	f8ae <__aeabi_dsub+0x2e2>
    f8ac:	e0c5      	b.n	fa3a <__aeabi_dsub+0x46e>
    f8ae:	4452      	add	r2, sl
    f8b0:	4552      	cmp	r2, sl
    f8b2:	4180      	sbcs	r0, r0
    f8b4:	1864      	adds	r4, r4, r1
    f8b6:	4240      	negs	r0, r0
    f8b8:	1824      	adds	r4, r4, r0
    f8ba:	07e7      	lsls	r7, r4, #31
    f8bc:	0852      	lsrs	r2, r2, #1
    f8be:	4317      	orrs	r7, r2
    f8c0:	0864      	lsrs	r4, r4, #1
    f8c2:	4666      	mov	r6, ip
    f8c4:	e708      	b.n	f6d8 <__aeabi_dsub+0x10c>
    f8c6:	4812      	ldr	r0, [pc, #72]	; (f910 <__aeabi_dsub+0x344>)
    f8c8:	4285      	cmp	r5, r0
    f8ca:	d100      	bne.n	f8ce <__aeabi_dsub+0x302>
    f8cc:	e085      	b.n	f9da <__aeabi_dsub+0x40e>
    f8ce:	001d      	movs	r5, r3
    f8d0:	e6bc      	b.n	f64c <__aeabi_dsub+0x80>
    f8d2:	0029      	movs	r1, r5
    f8d4:	3e1f      	subs	r6, #31
    f8d6:	40f1      	lsrs	r1, r6
    f8d8:	2b20      	cmp	r3, #32
    f8da:	d100      	bne.n	f8de <__aeabi_dsub+0x312>
    f8dc:	e07f      	b.n	f9de <__aeabi_dsub+0x412>
    f8de:	2240      	movs	r2, #64	; 0x40
    f8e0:	1ad3      	subs	r3, r2, r3
    f8e2:	409d      	lsls	r5, r3
    f8e4:	432f      	orrs	r7, r5
    f8e6:	1e7d      	subs	r5, r7, #1
    f8e8:	41af      	sbcs	r7, r5
    f8ea:	2400      	movs	r4, #0
    f8ec:	430f      	orrs	r7, r1
    f8ee:	2600      	movs	r6, #0
    f8f0:	e78e      	b.n	f810 <__aeabi_dsub+0x244>
    f8f2:	002b      	movs	r3, r5
    f8f4:	000f      	movs	r7, r1
    f8f6:	3b20      	subs	r3, #32
    f8f8:	40df      	lsrs	r7, r3
    f8fa:	2d20      	cmp	r5, #32
    f8fc:	d071      	beq.n	f9e2 <__aeabi_dsub+0x416>
    f8fe:	2340      	movs	r3, #64	; 0x40
    f900:	1b5d      	subs	r5, r3, r5
    f902:	40a9      	lsls	r1, r5
    f904:	430a      	orrs	r2, r1
    f906:	1e51      	subs	r1, r2, #1
    f908:	418a      	sbcs	r2, r1
    f90a:	2100      	movs	r1, #0
    f90c:	4317      	orrs	r7, r2
    f90e:	e6af      	b.n	f670 <__aeabi_dsub+0xa4>
    f910:	000007ff 	.word	0x000007ff
    f914:	ff7fffff 	.word	0xff7fffff
    f918:	800fffff 	.word	0x800fffff
    f91c:	2e00      	cmp	r6, #0
    f91e:	d03e      	beq.n	f99e <__aeabi_dsub+0x3d2>
    f920:	4eb3      	ldr	r6, [pc, #716]	; (fbf0 <__aeabi_dsub+0x624>)
    f922:	45b4      	cmp	ip, r6
    f924:	d045      	beq.n	f9b2 <__aeabi_dsub+0x3e6>
    f926:	2680      	movs	r6, #128	; 0x80
    f928:	0436      	lsls	r6, r6, #16
    f92a:	426d      	negs	r5, r5
    f92c:	4334      	orrs	r4, r6
    f92e:	2d38      	cmp	r5, #56	; 0x38
    f930:	dd00      	ble.n	f934 <__aeabi_dsub+0x368>
    f932:	e0a8      	b.n	fa86 <__aeabi_dsub+0x4ba>
    f934:	2d1f      	cmp	r5, #31
    f936:	dd00      	ble.n	f93a <__aeabi_dsub+0x36e>
    f938:	e11f      	b.n	fb7a <__aeabi_dsub+0x5ae>
    f93a:	2620      	movs	r6, #32
    f93c:	0027      	movs	r7, r4
    f93e:	4650      	mov	r0, sl
    f940:	1b76      	subs	r6, r6, r5
    f942:	40b7      	lsls	r7, r6
    f944:	40e8      	lsrs	r0, r5
    f946:	4307      	orrs	r7, r0
    f948:	4650      	mov	r0, sl
    f94a:	40b0      	lsls	r0, r6
    f94c:	1e46      	subs	r6, r0, #1
    f94e:	41b0      	sbcs	r0, r6
    f950:	40ec      	lsrs	r4, r5
    f952:	4338      	orrs	r0, r7
    f954:	1a17      	subs	r7, r2, r0
    f956:	42ba      	cmp	r2, r7
    f958:	4192      	sbcs	r2, r2
    f95a:	1b0c      	subs	r4, r1, r4
    f95c:	4252      	negs	r2, r2
    f95e:	1aa4      	subs	r4, r4, r2
    f960:	4666      	mov	r6, ip
    f962:	4698      	mov	r8, r3
    f964:	e68b      	b.n	f67e <__aeabi_dsub+0xb2>
    f966:	4664      	mov	r4, ip
    f968:	4667      	mov	r7, ip
    f96a:	432c      	orrs	r4, r5
    f96c:	d000      	beq.n	f970 <__aeabi_dsub+0x3a4>
    f96e:	e68b      	b.n	f688 <__aeabi_dsub+0xbc>
    f970:	2500      	movs	r5, #0
    f972:	2600      	movs	r6, #0
    f974:	2700      	movs	r7, #0
    f976:	e6ea      	b.n	f74e <__aeabi_dsub+0x182>
    f978:	001e      	movs	r6, r3
    f97a:	e6ad      	b.n	f6d8 <__aeabi_dsub+0x10c>
    f97c:	2b1f      	cmp	r3, #31
    f97e:	dc60      	bgt.n	fa42 <__aeabi_dsub+0x476>
    f980:	2720      	movs	r7, #32
    f982:	1af8      	subs	r0, r7, r3
    f984:	000f      	movs	r7, r1
    f986:	4684      	mov	ip, r0
    f988:	4087      	lsls	r7, r0
    f98a:	0010      	movs	r0, r2
    f98c:	40d8      	lsrs	r0, r3
    f98e:	4307      	orrs	r7, r0
    f990:	4660      	mov	r0, ip
    f992:	4082      	lsls	r2, r0
    f994:	1e50      	subs	r0, r2, #1
    f996:	4182      	sbcs	r2, r0
    f998:	40d9      	lsrs	r1, r3
    f99a:	4317      	orrs	r7, r2
    f99c:	e6f5      	b.n	f78a <__aeabi_dsub+0x1be>
    f99e:	0026      	movs	r6, r4
    f9a0:	4650      	mov	r0, sl
    f9a2:	4306      	orrs	r6, r0
    f9a4:	d005      	beq.n	f9b2 <__aeabi_dsub+0x3e6>
    f9a6:	43ed      	mvns	r5, r5
    f9a8:	2d00      	cmp	r5, #0
    f9aa:	d0d3      	beq.n	f954 <__aeabi_dsub+0x388>
    f9ac:	4e90      	ldr	r6, [pc, #576]	; (fbf0 <__aeabi_dsub+0x624>)
    f9ae:	45b4      	cmp	ip, r6
    f9b0:	d1bd      	bne.n	f92e <__aeabi_dsub+0x362>
    f9b2:	000c      	movs	r4, r1
    f9b4:	0017      	movs	r7, r2
    f9b6:	4666      	mov	r6, ip
    f9b8:	4698      	mov	r8, r3
    f9ba:	e68d      	b.n	f6d8 <__aeabi_dsub+0x10c>
    f9bc:	488c      	ldr	r0, [pc, #560]	; (fbf0 <__aeabi_dsub+0x624>)
    f9be:	4283      	cmp	r3, r0
    f9c0:	d00b      	beq.n	f9da <__aeabi_dsub+0x40e>
    f9c2:	4663      	mov	r3, ip
    f9c4:	e6d9      	b.n	f77a <__aeabi_dsub+0x1ae>
    f9c6:	2d00      	cmp	r5, #0
    f9c8:	d000      	beq.n	f9cc <__aeabi_dsub+0x400>
    f9ca:	e096      	b.n	fafa <__aeabi_dsub+0x52e>
    f9cc:	0008      	movs	r0, r1
    f9ce:	4310      	orrs	r0, r2
    f9d0:	d100      	bne.n	f9d4 <__aeabi_dsub+0x408>
    f9d2:	e0e2      	b.n	fb9a <__aeabi_dsub+0x5ce>
    f9d4:	000c      	movs	r4, r1
    f9d6:	0017      	movs	r7, r2
    f9d8:	4698      	mov	r8, r3
    f9da:	4e85      	ldr	r6, [pc, #532]	; (fbf0 <__aeabi_dsub+0x624>)
    f9dc:	e67c      	b.n	f6d8 <__aeabi_dsub+0x10c>
    f9de:	2500      	movs	r5, #0
    f9e0:	e780      	b.n	f8e4 <__aeabi_dsub+0x318>
    f9e2:	2100      	movs	r1, #0
    f9e4:	e78e      	b.n	f904 <__aeabi_dsub+0x338>
    f9e6:	0023      	movs	r3, r4
    f9e8:	4650      	mov	r0, sl
    f9ea:	4303      	orrs	r3, r0
    f9ec:	2e00      	cmp	r6, #0
    f9ee:	d000      	beq.n	f9f2 <__aeabi_dsub+0x426>
    f9f0:	e0a8      	b.n	fb44 <__aeabi_dsub+0x578>
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	d100      	bne.n	f9f8 <__aeabi_dsub+0x42c>
    f9f6:	e0de      	b.n	fbb6 <__aeabi_dsub+0x5ea>
    f9f8:	000b      	movs	r3, r1
    f9fa:	4313      	orrs	r3, r2
    f9fc:	d100      	bne.n	fa00 <__aeabi_dsub+0x434>
    f9fe:	e66b      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fa00:	4452      	add	r2, sl
    fa02:	4552      	cmp	r2, sl
    fa04:	4180      	sbcs	r0, r0
    fa06:	1864      	adds	r4, r4, r1
    fa08:	4240      	negs	r0, r0
    fa0a:	1824      	adds	r4, r4, r0
    fa0c:	0017      	movs	r7, r2
    fa0e:	0223      	lsls	r3, r4, #8
    fa10:	d400      	bmi.n	fa14 <__aeabi_dsub+0x448>
    fa12:	e6fd      	b.n	f810 <__aeabi_dsub+0x244>
    fa14:	4b77      	ldr	r3, [pc, #476]	; (fbf4 <__aeabi_dsub+0x628>)
    fa16:	4666      	mov	r6, ip
    fa18:	401c      	ands	r4, r3
    fa1a:	e65d      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fa1c:	0025      	movs	r5, r4
    fa1e:	4650      	mov	r0, sl
    fa20:	4305      	orrs	r5, r0
    fa22:	2e00      	cmp	r6, #0
    fa24:	d1cf      	bne.n	f9c6 <__aeabi_dsub+0x3fa>
    fa26:	2d00      	cmp	r5, #0
    fa28:	d14f      	bne.n	faca <__aeabi_dsub+0x4fe>
    fa2a:	000c      	movs	r4, r1
    fa2c:	4314      	orrs	r4, r2
    fa2e:	d100      	bne.n	fa32 <__aeabi_dsub+0x466>
    fa30:	e0a0      	b.n	fb74 <__aeabi_dsub+0x5a8>
    fa32:	000c      	movs	r4, r1
    fa34:	0017      	movs	r7, r2
    fa36:	4698      	mov	r8, r3
    fa38:	e64e      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fa3a:	4666      	mov	r6, ip
    fa3c:	2400      	movs	r4, #0
    fa3e:	2700      	movs	r7, #0
    fa40:	e685      	b.n	f74e <__aeabi_dsub+0x182>
    fa42:	001f      	movs	r7, r3
    fa44:	0008      	movs	r0, r1
    fa46:	3f20      	subs	r7, #32
    fa48:	40f8      	lsrs	r0, r7
    fa4a:	0007      	movs	r7, r0
    fa4c:	2b20      	cmp	r3, #32
    fa4e:	d100      	bne.n	fa52 <__aeabi_dsub+0x486>
    fa50:	e08e      	b.n	fb70 <__aeabi_dsub+0x5a4>
    fa52:	2040      	movs	r0, #64	; 0x40
    fa54:	1ac3      	subs	r3, r0, r3
    fa56:	4099      	lsls	r1, r3
    fa58:	430a      	orrs	r2, r1
    fa5a:	1e51      	subs	r1, r2, #1
    fa5c:	418a      	sbcs	r2, r1
    fa5e:	2100      	movs	r1, #0
    fa60:	4317      	orrs	r7, r2
    fa62:	e692      	b.n	f78a <__aeabi_dsub+0x1be>
    fa64:	2e00      	cmp	r6, #0
    fa66:	d114      	bne.n	fa92 <__aeabi_dsub+0x4c6>
    fa68:	0026      	movs	r6, r4
    fa6a:	4650      	mov	r0, sl
    fa6c:	4306      	orrs	r6, r0
    fa6e:	d062      	beq.n	fb36 <__aeabi_dsub+0x56a>
    fa70:	43db      	mvns	r3, r3
    fa72:	2b00      	cmp	r3, #0
    fa74:	d15c      	bne.n	fb30 <__aeabi_dsub+0x564>
    fa76:	1887      	adds	r7, r0, r2
    fa78:	4297      	cmp	r7, r2
    fa7a:	4192      	sbcs	r2, r2
    fa7c:	1864      	adds	r4, r4, r1
    fa7e:	4252      	negs	r2, r2
    fa80:	18a4      	adds	r4, r4, r2
    fa82:	4666      	mov	r6, ip
    fa84:	e687      	b.n	f796 <__aeabi_dsub+0x1ca>
    fa86:	4650      	mov	r0, sl
    fa88:	4320      	orrs	r0, r4
    fa8a:	1e44      	subs	r4, r0, #1
    fa8c:	41a0      	sbcs	r0, r4
    fa8e:	2400      	movs	r4, #0
    fa90:	e760      	b.n	f954 <__aeabi_dsub+0x388>
    fa92:	4e57      	ldr	r6, [pc, #348]	; (fbf0 <__aeabi_dsub+0x624>)
    fa94:	45b4      	cmp	ip, r6
    fa96:	d04e      	beq.n	fb36 <__aeabi_dsub+0x56a>
    fa98:	2680      	movs	r6, #128	; 0x80
    fa9a:	0436      	lsls	r6, r6, #16
    fa9c:	425b      	negs	r3, r3
    fa9e:	4334      	orrs	r4, r6
    faa0:	2b38      	cmp	r3, #56	; 0x38
    faa2:	dd00      	ble.n	faa6 <__aeabi_dsub+0x4da>
    faa4:	e07f      	b.n	fba6 <__aeabi_dsub+0x5da>
    faa6:	2b1f      	cmp	r3, #31
    faa8:	dd00      	ble.n	faac <__aeabi_dsub+0x4e0>
    faaa:	e08b      	b.n	fbc4 <__aeabi_dsub+0x5f8>
    faac:	2620      	movs	r6, #32
    faae:	0027      	movs	r7, r4
    fab0:	4650      	mov	r0, sl
    fab2:	1af6      	subs	r6, r6, r3
    fab4:	40b7      	lsls	r7, r6
    fab6:	40d8      	lsrs	r0, r3
    fab8:	4307      	orrs	r7, r0
    faba:	4650      	mov	r0, sl
    fabc:	40b0      	lsls	r0, r6
    fabe:	1e46      	subs	r6, r0, #1
    fac0:	41b0      	sbcs	r0, r6
    fac2:	4307      	orrs	r7, r0
    fac4:	40dc      	lsrs	r4, r3
    fac6:	18bf      	adds	r7, r7, r2
    fac8:	e7d6      	b.n	fa78 <__aeabi_dsub+0x4ac>
    faca:	000d      	movs	r5, r1
    facc:	4315      	orrs	r5, r2
    face:	d100      	bne.n	fad2 <__aeabi_dsub+0x506>
    fad0:	e602      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fad2:	4650      	mov	r0, sl
    fad4:	1a80      	subs	r0, r0, r2
    fad6:	4582      	cmp	sl, r0
    fad8:	41bf      	sbcs	r7, r7
    fada:	1a65      	subs	r5, r4, r1
    fadc:	427f      	negs	r7, r7
    fade:	1bed      	subs	r5, r5, r7
    fae0:	4684      	mov	ip, r0
    fae2:	0228      	lsls	r0, r5, #8
    fae4:	d400      	bmi.n	fae8 <__aeabi_dsub+0x51c>
    fae6:	e68d      	b.n	f804 <__aeabi_dsub+0x238>
    fae8:	4650      	mov	r0, sl
    faea:	1a17      	subs	r7, r2, r0
    faec:	42ba      	cmp	r2, r7
    faee:	4192      	sbcs	r2, r2
    faf0:	1b0c      	subs	r4, r1, r4
    faf2:	4252      	negs	r2, r2
    faf4:	1aa4      	subs	r4, r4, r2
    faf6:	4698      	mov	r8, r3
    faf8:	e5ee      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fafa:	000d      	movs	r5, r1
    fafc:	4315      	orrs	r5, r2
    fafe:	d100      	bne.n	fb02 <__aeabi_dsub+0x536>
    fb00:	e76b      	b.n	f9da <__aeabi_dsub+0x40e>
    fb02:	4650      	mov	r0, sl
    fb04:	0767      	lsls	r7, r4, #29
    fb06:	08c0      	lsrs	r0, r0, #3
    fb08:	4307      	orrs	r7, r0
    fb0a:	2080      	movs	r0, #128	; 0x80
    fb0c:	08e4      	lsrs	r4, r4, #3
    fb0e:	0300      	lsls	r0, r0, #12
    fb10:	4204      	tst	r4, r0
    fb12:	d007      	beq.n	fb24 <__aeabi_dsub+0x558>
    fb14:	08cd      	lsrs	r5, r1, #3
    fb16:	4205      	tst	r5, r0
    fb18:	d104      	bne.n	fb24 <__aeabi_dsub+0x558>
    fb1a:	002c      	movs	r4, r5
    fb1c:	4698      	mov	r8, r3
    fb1e:	08d7      	lsrs	r7, r2, #3
    fb20:	0749      	lsls	r1, r1, #29
    fb22:	430f      	orrs	r7, r1
    fb24:	0f7b      	lsrs	r3, r7, #29
    fb26:	00e4      	lsls	r4, r4, #3
    fb28:	431c      	orrs	r4, r3
    fb2a:	00ff      	lsls	r7, r7, #3
    fb2c:	4e30      	ldr	r6, [pc, #192]	; (fbf0 <__aeabi_dsub+0x624>)
    fb2e:	e5d3      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fb30:	4e2f      	ldr	r6, [pc, #188]	; (fbf0 <__aeabi_dsub+0x624>)
    fb32:	45b4      	cmp	ip, r6
    fb34:	d1b4      	bne.n	faa0 <__aeabi_dsub+0x4d4>
    fb36:	000c      	movs	r4, r1
    fb38:	0017      	movs	r7, r2
    fb3a:	4666      	mov	r6, ip
    fb3c:	e5cc      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fb3e:	2700      	movs	r7, #0
    fb40:	2400      	movs	r4, #0
    fb42:	e5e8      	b.n	f716 <__aeabi_dsub+0x14a>
    fb44:	2b00      	cmp	r3, #0
    fb46:	d039      	beq.n	fbbc <__aeabi_dsub+0x5f0>
    fb48:	000b      	movs	r3, r1
    fb4a:	4313      	orrs	r3, r2
    fb4c:	d100      	bne.n	fb50 <__aeabi_dsub+0x584>
    fb4e:	e744      	b.n	f9da <__aeabi_dsub+0x40e>
    fb50:	08c0      	lsrs	r0, r0, #3
    fb52:	0767      	lsls	r7, r4, #29
    fb54:	4307      	orrs	r7, r0
    fb56:	2080      	movs	r0, #128	; 0x80
    fb58:	08e4      	lsrs	r4, r4, #3
    fb5a:	0300      	lsls	r0, r0, #12
    fb5c:	4204      	tst	r4, r0
    fb5e:	d0e1      	beq.n	fb24 <__aeabi_dsub+0x558>
    fb60:	08cb      	lsrs	r3, r1, #3
    fb62:	4203      	tst	r3, r0
    fb64:	d1de      	bne.n	fb24 <__aeabi_dsub+0x558>
    fb66:	08d7      	lsrs	r7, r2, #3
    fb68:	0749      	lsls	r1, r1, #29
    fb6a:	430f      	orrs	r7, r1
    fb6c:	001c      	movs	r4, r3
    fb6e:	e7d9      	b.n	fb24 <__aeabi_dsub+0x558>
    fb70:	2100      	movs	r1, #0
    fb72:	e771      	b.n	fa58 <__aeabi_dsub+0x48c>
    fb74:	2500      	movs	r5, #0
    fb76:	2700      	movs	r7, #0
    fb78:	e5e9      	b.n	f74e <__aeabi_dsub+0x182>
    fb7a:	002e      	movs	r6, r5
    fb7c:	0027      	movs	r7, r4
    fb7e:	3e20      	subs	r6, #32
    fb80:	40f7      	lsrs	r7, r6
    fb82:	2d20      	cmp	r5, #32
    fb84:	d02f      	beq.n	fbe6 <__aeabi_dsub+0x61a>
    fb86:	2640      	movs	r6, #64	; 0x40
    fb88:	1b75      	subs	r5, r6, r5
    fb8a:	40ac      	lsls	r4, r5
    fb8c:	4650      	mov	r0, sl
    fb8e:	4320      	orrs	r0, r4
    fb90:	1e44      	subs	r4, r0, #1
    fb92:	41a0      	sbcs	r0, r4
    fb94:	2400      	movs	r4, #0
    fb96:	4338      	orrs	r0, r7
    fb98:	e6dc      	b.n	f954 <__aeabi_dsub+0x388>
    fb9a:	2480      	movs	r4, #128	; 0x80
    fb9c:	2500      	movs	r5, #0
    fb9e:	0324      	lsls	r4, r4, #12
    fba0:	4e13      	ldr	r6, [pc, #76]	; (fbf0 <__aeabi_dsub+0x624>)
    fba2:	2700      	movs	r7, #0
    fba4:	e5d3      	b.n	f74e <__aeabi_dsub+0x182>
    fba6:	4650      	mov	r0, sl
    fba8:	4320      	orrs	r0, r4
    fbaa:	0007      	movs	r7, r0
    fbac:	1e78      	subs	r0, r7, #1
    fbae:	4187      	sbcs	r7, r0
    fbb0:	2400      	movs	r4, #0
    fbb2:	18bf      	adds	r7, r7, r2
    fbb4:	e760      	b.n	fa78 <__aeabi_dsub+0x4ac>
    fbb6:	000c      	movs	r4, r1
    fbb8:	0017      	movs	r7, r2
    fbba:	e58d      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fbbc:	000c      	movs	r4, r1
    fbbe:	0017      	movs	r7, r2
    fbc0:	4e0b      	ldr	r6, [pc, #44]	; (fbf0 <__aeabi_dsub+0x624>)
    fbc2:	e589      	b.n	f6d8 <__aeabi_dsub+0x10c>
    fbc4:	001e      	movs	r6, r3
    fbc6:	0027      	movs	r7, r4
    fbc8:	3e20      	subs	r6, #32
    fbca:	40f7      	lsrs	r7, r6
    fbcc:	2b20      	cmp	r3, #32
    fbce:	d00c      	beq.n	fbea <__aeabi_dsub+0x61e>
    fbd0:	2640      	movs	r6, #64	; 0x40
    fbd2:	1af3      	subs	r3, r6, r3
    fbd4:	409c      	lsls	r4, r3
    fbd6:	4650      	mov	r0, sl
    fbd8:	4320      	orrs	r0, r4
    fbda:	1e44      	subs	r4, r0, #1
    fbdc:	41a0      	sbcs	r0, r4
    fbde:	4307      	orrs	r7, r0
    fbe0:	2400      	movs	r4, #0
    fbe2:	18bf      	adds	r7, r7, r2
    fbe4:	e748      	b.n	fa78 <__aeabi_dsub+0x4ac>
    fbe6:	2400      	movs	r4, #0
    fbe8:	e7d0      	b.n	fb8c <__aeabi_dsub+0x5c0>
    fbea:	2400      	movs	r4, #0
    fbec:	e7f3      	b.n	fbd6 <__aeabi_dsub+0x60a>
    fbee:	46c0      	nop			; (mov r8, r8)
    fbf0:	000007ff 	.word	0x000007ff
    fbf4:	ff7fffff 	.word	0xff7fffff

0000fbf8 <__aeabi_dcmpun>:
    fbf8:	b570      	push	{r4, r5, r6, lr}
    fbfa:	4e0e      	ldr	r6, [pc, #56]	; (fc34 <__aeabi_dcmpun+0x3c>)
    fbfc:	030d      	lsls	r5, r1, #12
    fbfe:	031c      	lsls	r4, r3, #12
    fc00:	0049      	lsls	r1, r1, #1
    fc02:	005b      	lsls	r3, r3, #1
    fc04:	0b2d      	lsrs	r5, r5, #12
    fc06:	0d49      	lsrs	r1, r1, #21
    fc08:	0b24      	lsrs	r4, r4, #12
    fc0a:	0d5b      	lsrs	r3, r3, #21
    fc0c:	42b1      	cmp	r1, r6
    fc0e:	d004      	beq.n	fc1a <__aeabi_dcmpun+0x22>
    fc10:	4908      	ldr	r1, [pc, #32]	; (fc34 <__aeabi_dcmpun+0x3c>)
    fc12:	2000      	movs	r0, #0
    fc14:	428b      	cmp	r3, r1
    fc16:	d008      	beq.n	fc2a <__aeabi_dcmpun+0x32>
    fc18:	bd70      	pop	{r4, r5, r6, pc}
    fc1a:	4305      	orrs	r5, r0
    fc1c:	2001      	movs	r0, #1
    fc1e:	2d00      	cmp	r5, #0
    fc20:	d1fa      	bne.n	fc18 <__aeabi_dcmpun+0x20>
    fc22:	4904      	ldr	r1, [pc, #16]	; (fc34 <__aeabi_dcmpun+0x3c>)
    fc24:	2000      	movs	r0, #0
    fc26:	428b      	cmp	r3, r1
    fc28:	d1f6      	bne.n	fc18 <__aeabi_dcmpun+0x20>
    fc2a:	4314      	orrs	r4, r2
    fc2c:	0020      	movs	r0, r4
    fc2e:	1e44      	subs	r4, r0, #1
    fc30:	41a0      	sbcs	r0, r4
    fc32:	e7f1      	b.n	fc18 <__aeabi_dcmpun+0x20>
    fc34:	000007ff 	.word	0x000007ff

0000fc38 <__aeabi_d2iz>:
    fc38:	b530      	push	{r4, r5, lr}
    fc3a:	4d13      	ldr	r5, [pc, #76]	; (fc88 <__aeabi_d2iz+0x50>)
    fc3c:	030a      	lsls	r2, r1, #12
    fc3e:	004b      	lsls	r3, r1, #1
    fc40:	0b12      	lsrs	r2, r2, #12
    fc42:	0d5b      	lsrs	r3, r3, #21
    fc44:	0fc9      	lsrs	r1, r1, #31
    fc46:	2400      	movs	r4, #0
    fc48:	42ab      	cmp	r3, r5
    fc4a:	dd10      	ble.n	fc6e <__aeabi_d2iz+0x36>
    fc4c:	4c0f      	ldr	r4, [pc, #60]	; (fc8c <__aeabi_d2iz+0x54>)
    fc4e:	42a3      	cmp	r3, r4
    fc50:	dc0f      	bgt.n	fc72 <__aeabi_d2iz+0x3a>
    fc52:	2480      	movs	r4, #128	; 0x80
    fc54:	4d0e      	ldr	r5, [pc, #56]	; (fc90 <__aeabi_d2iz+0x58>)
    fc56:	0364      	lsls	r4, r4, #13
    fc58:	4322      	orrs	r2, r4
    fc5a:	1aed      	subs	r5, r5, r3
    fc5c:	2d1f      	cmp	r5, #31
    fc5e:	dd0b      	ble.n	fc78 <__aeabi_d2iz+0x40>
    fc60:	480c      	ldr	r0, [pc, #48]	; (fc94 <__aeabi_d2iz+0x5c>)
    fc62:	1ac3      	subs	r3, r0, r3
    fc64:	40da      	lsrs	r2, r3
    fc66:	4254      	negs	r4, r2
    fc68:	2900      	cmp	r1, #0
    fc6a:	d100      	bne.n	fc6e <__aeabi_d2iz+0x36>
    fc6c:	0014      	movs	r4, r2
    fc6e:	0020      	movs	r0, r4
    fc70:	bd30      	pop	{r4, r5, pc}
    fc72:	4b09      	ldr	r3, [pc, #36]	; (fc98 <__aeabi_d2iz+0x60>)
    fc74:	18cc      	adds	r4, r1, r3
    fc76:	e7fa      	b.n	fc6e <__aeabi_d2iz+0x36>
    fc78:	4c08      	ldr	r4, [pc, #32]	; (fc9c <__aeabi_d2iz+0x64>)
    fc7a:	40e8      	lsrs	r0, r5
    fc7c:	46a4      	mov	ip, r4
    fc7e:	4463      	add	r3, ip
    fc80:	409a      	lsls	r2, r3
    fc82:	4302      	orrs	r2, r0
    fc84:	e7ef      	b.n	fc66 <__aeabi_d2iz+0x2e>
    fc86:	46c0      	nop			; (mov r8, r8)
    fc88:	000003fe 	.word	0x000003fe
    fc8c:	0000041d 	.word	0x0000041d
    fc90:	00000433 	.word	0x00000433
    fc94:	00000413 	.word	0x00000413
    fc98:	7fffffff 	.word	0x7fffffff
    fc9c:	fffffbed 	.word	0xfffffbed

0000fca0 <__aeabi_i2d>:
    fca0:	b570      	push	{r4, r5, r6, lr}
    fca2:	2800      	cmp	r0, #0
    fca4:	d030      	beq.n	fd08 <__aeabi_i2d+0x68>
    fca6:	17c3      	asrs	r3, r0, #31
    fca8:	18c4      	adds	r4, r0, r3
    fcaa:	405c      	eors	r4, r3
    fcac:	0fc5      	lsrs	r5, r0, #31
    fcae:	0020      	movs	r0, r4
    fcb0:	f000 f94c 	bl	ff4c <__clzsi2>
    fcb4:	4b17      	ldr	r3, [pc, #92]	; (fd14 <__aeabi_i2d+0x74>)
    fcb6:	4a18      	ldr	r2, [pc, #96]	; (fd18 <__aeabi_i2d+0x78>)
    fcb8:	1a1b      	subs	r3, r3, r0
    fcba:	1ad2      	subs	r2, r2, r3
    fcbc:	2a1f      	cmp	r2, #31
    fcbe:	dd18      	ble.n	fcf2 <__aeabi_i2d+0x52>
    fcc0:	4a16      	ldr	r2, [pc, #88]	; (fd1c <__aeabi_i2d+0x7c>)
    fcc2:	1ad2      	subs	r2, r2, r3
    fcc4:	4094      	lsls	r4, r2
    fcc6:	2200      	movs	r2, #0
    fcc8:	0324      	lsls	r4, r4, #12
    fcca:	055b      	lsls	r3, r3, #21
    fccc:	0b24      	lsrs	r4, r4, #12
    fcce:	0d5b      	lsrs	r3, r3, #21
    fcd0:	2100      	movs	r1, #0
    fcd2:	0010      	movs	r0, r2
    fcd4:	0324      	lsls	r4, r4, #12
    fcd6:	0d0a      	lsrs	r2, r1, #20
    fcd8:	0b24      	lsrs	r4, r4, #12
    fcda:	0512      	lsls	r2, r2, #20
    fcdc:	4322      	orrs	r2, r4
    fcde:	4c10      	ldr	r4, [pc, #64]	; (fd20 <__aeabi_i2d+0x80>)
    fce0:	051b      	lsls	r3, r3, #20
    fce2:	4022      	ands	r2, r4
    fce4:	4313      	orrs	r3, r2
    fce6:	005b      	lsls	r3, r3, #1
    fce8:	07ed      	lsls	r5, r5, #31
    fcea:	085b      	lsrs	r3, r3, #1
    fcec:	432b      	orrs	r3, r5
    fcee:	0019      	movs	r1, r3
    fcf0:	bd70      	pop	{r4, r5, r6, pc}
    fcf2:	0021      	movs	r1, r4
    fcf4:	4091      	lsls	r1, r2
    fcf6:	000a      	movs	r2, r1
    fcf8:	210b      	movs	r1, #11
    fcfa:	1a08      	subs	r0, r1, r0
    fcfc:	40c4      	lsrs	r4, r0
    fcfe:	055b      	lsls	r3, r3, #21
    fd00:	0324      	lsls	r4, r4, #12
    fd02:	0b24      	lsrs	r4, r4, #12
    fd04:	0d5b      	lsrs	r3, r3, #21
    fd06:	e7e3      	b.n	fcd0 <__aeabi_i2d+0x30>
    fd08:	2500      	movs	r5, #0
    fd0a:	2300      	movs	r3, #0
    fd0c:	2400      	movs	r4, #0
    fd0e:	2200      	movs	r2, #0
    fd10:	e7de      	b.n	fcd0 <__aeabi_i2d+0x30>
    fd12:	46c0      	nop			; (mov r8, r8)
    fd14:	0000041e 	.word	0x0000041e
    fd18:	00000433 	.word	0x00000433
    fd1c:	00000413 	.word	0x00000413
    fd20:	800fffff 	.word	0x800fffff

0000fd24 <__aeabi_ui2d>:
    fd24:	b510      	push	{r4, lr}
    fd26:	1e04      	subs	r4, r0, #0
    fd28:	d028      	beq.n	fd7c <__aeabi_ui2d+0x58>
    fd2a:	f000 f90f 	bl	ff4c <__clzsi2>
    fd2e:	4b15      	ldr	r3, [pc, #84]	; (fd84 <__aeabi_ui2d+0x60>)
    fd30:	4a15      	ldr	r2, [pc, #84]	; (fd88 <__aeabi_ui2d+0x64>)
    fd32:	1a1b      	subs	r3, r3, r0
    fd34:	1ad2      	subs	r2, r2, r3
    fd36:	2a1f      	cmp	r2, #31
    fd38:	dd15      	ble.n	fd66 <__aeabi_ui2d+0x42>
    fd3a:	4a14      	ldr	r2, [pc, #80]	; (fd8c <__aeabi_ui2d+0x68>)
    fd3c:	1ad2      	subs	r2, r2, r3
    fd3e:	4094      	lsls	r4, r2
    fd40:	2200      	movs	r2, #0
    fd42:	0324      	lsls	r4, r4, #12
    fd44:	055b      	lsls	r3, r3, #21
    fd46:	0b24      	lsrs	r4, r4, #12
    fd48:	0d5b      	lsrs	r3, r3, #21
    fd4a:	2100      	movs	r1, #0
    fd4c:	0010      	movs	r0, r2
    fd4e:	0324      	lsls	r4, r4, #12
    fd50:	0d0a      	lsrs	r2, r1, #20
    fd52:	0b24      	lsrs	r4, r4, #12
    fd54:	0512      	lsls	r2, r2, #20
    fd56:	4322      	orrs	r2, r4
    fd58:	4c0d      	ldr	r4, [pc, #52]	; (fd90 <__aeabi_ui2d+0x6c>)
    fd5a:	051b      	lsls	r3, r3, #20
    fd5c:	4022      	ands	r2, r4
    fd5e:	4313      	orrs	r3, r2
    fd60:	005b      	lsls	r3, r3, #1
    fd62:	0859      	lsrs	r1, r3, #1
    fd64:	bd10      	pop	{r4, pc}
    fd66:	0021      	movs	r1, r4
    fd68:	4091      	lsls	r1, r2
    fd6a:	000a      	movs	r2, r1
    fd6c:	210b      	movs	r1, #11
    fd6e:	1a08      	subs	r0, r1, r0
    fd70:	40c4      	lsrs	r4, r0
    fd72:	055b      	lsls	r3, r3, #21
    fd74:	0324      	lsls	r4, r4, #12
    fd76:	0b24      	lsrs	r4, r4, #12
    fd78:	0d5b      	lsrs	r3, r3, #21
    fd7a:	e7e6      	b.n	fd4a <__aeabi_ui2d+0x26>
    fd7c:	2300      	movs	r3, #0
    fd7e:	2400      	movs	r4, #0
    fd80:	2200      	movs	r2, #0
    fd82:	e7e2      	b.n	fd4a <__aeabi_ui2d+0x26>
    fd84:	0000041e 	.word	0x0000041e
    fd88:	00000433 	.word	0x00000433
    fd8c:	00000413 	.word	0x00000413
    fd90:	800fffff 	.word	0x800fffff

0000fd94 <__aeabi_f2d>:
    fd94:	0041      	lsls	r1, r0, #1
    fd96:	0e09      	lsrs	r1, r1, #24
    fd98:	1c4b      	adds	r3, r1, #1
    fd9a:	b570      	push	{r4, r5, r6, lr}
    fd9c:	b2db      	uxtb	r3, r3
    fd9e:	0246      	lsls	r6, r0, #9
    fda0:	0a75      	lsrs	r5, r6, #9
    fda2:	0fc4      	lsrs	r4, r0, #31
    fda4:	2b01      	cmp	r3, #1
    fda6:	dd14      	ble.n	fdd2 <__aeabi_f2d+0x3e>
    fda8:	23e0      	movs	r3, #224	; 0xe0
    fdaa:	009b      	lsls	r3, r3, #2
    fdac:	076d      	lsls	r5, r5, #29
    fdae:	0b36      	lsrs	r6, r6, #12
    fdb0:	18cb      	adds	r3, r1, r3
    fdb2:	2100      	movs	r1, #0
    fdb4:	0d0a      	lsrs	r2, r1, #20
    fdb6:	0028      	movs	r0, r5
    fdb8:	0512      	lsls	r2, r2, #20
    fdba:	4d1c      	ldr	r5, [pc, #112]	; (fe2c <__aeabi_f2d+0x98>)
    fdbc:	4332      	orrs	r2, r6
    fdbe:	055b      	lsls	r3, r3, #21
    fdc0:	402a      	ands	r2, r5
    fdc2:	085b      	lsrs	r3, r3, #1
    fdc4:	4313      	orrs	r3, r2
    fdc6:	005b      	lsls	r3, r3, #1
    fdc8:	07e4      	lsls	r4, r4, #31
    fdca:	085b      	lsrs	r3, r3, #1
    fdcc:	4323      	orrs	r3, r4
    fdce:	0019      	movs	r1, r3
    fdd0:	bd70      	pop	{r4, r5, r6, pc}
    fdd2:	2900      	cmp	r1, #0
    fdd4:	d114      	bne.n	fe00 <__aeabi_f2d+0x6c>
    fdd6:	2d00      	cmp	r5, #0
    fdd8:	d01e      	beq.n	fe18 <__aeabi_f2d+0x84>
    fdda:	0028      	movs	r0, r5
    fddc:	f000 f8b6 	bl	ff4c <__clzsi2>
    fde0:	280a      	cmp	r0, #10
    fde2:	dc1c      	bgt.n	fe1e <__aeabi_f2d+0x8a>
    fde4:	230b      	movs	r3, #11
    fde6:	002a      	movs	r2, r5
    fde8:	1a1b      	subs	r3, r3, r0
    fdea:	40da      	lsrs	r2, r3
    fdec:	0003      	movs	r3, r0
    fdee:	3315      	adds	r3, #21
    fdf0:	409d      	lsls	r5, r3
    fdf2:	4b0f      	ldr	r3, [pc, #60]	; (fe30 <__aeabi_f2d+0x9c>)
    fdf4:	0312      	lsls	r2, r2, #12
    fdf6:	1a1b      	subs	r3, r3, r0
    fdf8:	055b      	lsls	r3, r3, #21
    fdfa:	0b16      	lsrs	r6, r2, #12
    fdfc:	0d5b      	lsrs	r3, r3, #21
    fdfe:	e7d8      	b.n	fdb2 <__aeabi_f2d+0x1e>
    fe00:	2d00      	cmp	r5, #0
    fe02:	d006      	beq.n	fe12 <__aeabi_f2d+0x7e>
    fe04:	0b32      	lsrs	r2, r6, #12
    fe06:	2680      	movs	r6, #128	; 0x80
    fe08:	0336      	lsls	r6, r6, #12
    fe0a:	076d      	lsls	r5, r5, #29
    fe0c:	4316      	orrs	r6, r2
    fe0e:	4b09      	ldr	r3, [pc, #36]	; (fe34 <__aeabi_f2d+0xa0>)
    fe10:	e7cf      	b.n	fdb2 <__aeabi_f2d+0x1e>
    fe12:	4b08      	ldr	r3, [pc, #32]	; (fe34 <__aeabi_f2d+0xa0>)
    fe14:	2600      	movs	r6, #0
    fe16:	e7cc      	b.n	fdb2 <__aeabi_f2d+0x1e>
    fe18:	2300      	movs	r3, #0
    fe1a:	2600      	movs	r6, #0
    fe1c:	e7c9      	b.n	fdb2 <__aeabi_f2d+0x1e>
    fe1e:	0003      	movs	r3, r0
    fe20:	002a      	movs	r2, r5
    fe22:	3b0b      	subs	r3, #11
    fe24:	409a      	lsls	r2, r3
    fe26:	2500      	movs	r5, #0
    fe28:	e7e3      	b.n	fdf2 <__aeabi_f2d+0x5e>
    fe2a:	46c0      	nop			; (mov r8, r8)
    fe2c:	800fffff 	.word	0x800fffff
    fe30:	00000389 	.word	0x00000389
    fe34:	000007ff 	.word	0x000007ff

0000fe38 <__aeabi_d2f>:
    fe38:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe3a:	004c      	lsls	r4, r1, #1
    fe3c:	0d64      	lsrs	r4, r4, #21
    fe3e:	030b      	lsls	r3, r1, #12
    fe40:	1c62      	adds	r2, r4, #1
    fe42:	0f45      	lsrs	r5, r0, #29
    fe44:	0a5b      	lsrs	r3, r3, #9
    fe46:	0552      	lsls	r2, r2, #21
    fe48:	432b      	orrs	r3, r5
    fe4a:	0fc9      	lsrs	r1, r1, #31
    fe4c:	00c5      	lsls	r5, r0, #3
    fe4e:	0d52      	lsrs	r2, r2, #21
    fe50:	2a01      	cmp	r2, #1
    fe52:	dd28      	ble.n	fea6 <__aeabi_d2f+0x6e>
    fe54:	4a3a      	ldr	r2, [pc, #232]	; (ff40 <__aeabi_d2f+0x108>)
    fe56:	18a6      	adds	r6, r4, r2
    fe58:	2efe      	cmp	r6, #254	; 0xfe
    fe5a:	dc1b      	bgt.n	fe94 <__aeabi_d2f+0x5c>
    fe5c:	2e00      	cmp	r6, #0
    fe5e:	dd3e      	ble.n	fede <__aeabi_d2f+0xa6>
    fe60:	0180      	lsls	r0, r0, #6
    fe62:	0002      	movs	r2, r0
    fe64:	1e50      	subs	r0, r2, #1
    fe66:	4182      	sbcs	r2, r0
    fe68:	0f6d      	lsrs	r5, r5, #29
    fe6a:	432a      	orrs	r2, r5
    fe6c:	00db      	lsls	r3, r3, #3
    fe6e:	4313      	orrs	r3, r2
    fe70:	075a      	lsls	r2, r3, #29
    fe72:	d004      	beq.n	fe7e <__aeabi_d2f+0x46>
    fe74:	220f      	movs	r2, #15
    fe76:	401a      	ands	r2, r3
    fe78:	2a04      	cmp	r2, #4
    fe7a:	d000      	beq.n	fe7e <__aeabi_d2f+0x46>
    fe7c:	3304      	adds	r3, #4
    fe7e:	2280      	movs	r2, #128	; 0x80
    fe80:	04d2      	lsls	r2, r2, #19
    fe82:	401a      	ands	r2, r3
    fe84:	d05a      	beq.n	ff3c <__aeabi_d2f+0x104>
    fe86:	3601      	adds	r6, #1
    fe88:	2eff      	cmp	r6, #255	; 0xff
    fe8a:	d003      	beq.n	fe94 <__aeabi_d2f+0x5c>
    fe8c:	019b      	lsls	r3, r3, #6
    fe8e:	0a5b      	lsrs	r3, r3, #9
    fe90:	b2f4      	uxtb	r4, r6
    fe92:	e001      	b.n	fe98 <__aeabi_d2f+0x60>
    fe94:	24ff      	movs	r4, #255	; 0xff
    fe96:	2300      	movs	r3, #0
    fe98:	0258      	lsls	r0, r3, #9
    fe9a:	05e4      	lsls	r4, r4, #23
    fe9c:	0a40      	lsrs	r0, r0, #9
    fe9e:	07c9      	lsls	r1, r1, #31
    fea0:	4320      	orrs	r0, r4
    fea2:	4308      	orrs	r0, r1
    fea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fea6:	2c00      	cmp	r4, #0
    fea8:	d007      	beq.n	feba <__aeabi_d2f+0x82>
    feaa:	431d      	orrs	r5, r3
    feac:	d0f2      	beq.n	fe94 <__aeabi_d2f+0x5c>
    feae:	2080      	movs	r0, #128	; 0x80
    feb0:	00db      	lsls	r3, r3, #3
    feb2:	0480      	lsls	r0, r0, #18
    feb4:	4303      	orrs	r3, r0
    feb6:	26ff      	movs	r6, #255	; 0xff
    feb8:	e7da      	b.n	fe70 <__aeabi_d2f+0x38>
    feba:	432b      	orrs	r3, r5
    febc:	d003      	beq.n	fec6 <__aeabi_d2f+0x8e>
    febe:	2305      	movs	r3, #5
    fec0:	08db      	lsrs	r3, r3, #3
    fec2:	2cff      	cmp	r4, #255	; 0xff
    fec4:	d003      	beq.n	fece <__aeabi_d2f+0x96>
    fec6:	025b      	lsls	r3, r3, #9
    fec8:	0a5b      	lsrs	r3, r3, #9
    feca:	b2e4      	uxtb	r4, r4
    fecc:	e7e4      	b.n	fe98 <__aeabi_d2f+0x60>
    fece:	2b00      	cmp	r3, #0
    fed0:	d032      	beq.n	ff38 <__aeabi_d2f+0x100>
    fed2:	2080      	movs	r0, #128	; 0x80
    fed4:	03c0      	lsls	r0, r0, #15
    fed6:	4303      	orrs	r3, r0
    fed8:	025b      	lsls	r3, r3, #9
    feda:	0a5b      	lsrs	r3, r3, #9
    fedc:	e7dc      	b.n	fe98 <__aeabi_d2f+0x60>
    fede:	0032      	movs	r2, r6
    fee0:	3217      	adds	r2, #23
    fee2:	db14      	blt.n	ff0e <__aeabi_d2f+0xd6>
    fee4:	2280      	movs	r2, #128	; 0x80
    fee6:	271e      	movs	r7, #30
    fee8:	0412      	lsls	r2, r2, #16
    feea:	4313      	orrs	r3, r2
    feec:	1bbf      	subs	r7, r7, r6
    feee:	2f1f      	cmp	r7, #31
    fef0:	dc0f      	bgt.n	ff12 <__aeabi_d2f+0xda>
    fef2:	4a14      	ldr	r2, [pc, #80]	; (ff44 <__aeabi_d2f+0x10c>)
    fef4:	4694      	mov	ip, r2
    fef6:	4464      	add	r4, ip
    fef8:	002a      	movs	r2, r5
    fefa:	40a5      	lsls	r5, r4
    fefc:	002e      	movs	r6, r5
    fefe:	40a3      	lsls	r3, r4
    ff00:	1e75      	subs	r5, r6, #1
    ff02:	41ae      	sbcs	r6, r5
    ff04:	40fa      	lsrs	r2, r7
    ff06:	4333      	orrs	r3, r6
    ff08:	4313      	orrs	r3, r2
    ff0a:	2600      	movs	r6, #0
    ff0c:	e7b0      	b.n	fe70 <__aeabi_d2f+0x38>
    ff0e:	2400      	movs	r4, #0
    ff10:	e7d5      	b.n	febe <__aeabi_d2f+0x86>
    ff12:	2202      	movs	r2, #2
    ff14:	4252      	negs	r2, r2
    ff16:	1b96      	subs	r6, r2, r6
    ff18:	001a      	movs	r2, r3
    ff1a:	40f2      	lsrs	r2, r6
    ff1c:	2f20      	cmp	r7, #32
    ff1e:	d009      	beq.n	ff34 <__aeabi_d2f+0xfc>
    ff20:	4809      	ldr	r0, [pc, #36]	; (ff48 <__aeabi_d2f+0x110>)
    ff22:	4684      	mov	ip, r0
    ff24:	4464      	add	r4, ip
    ff26:	40a3      	lsls	r3, r4
    ff28:	432b      	orrs	r3, r5
    ff2a:	1e5d      	subs	r5, r3, #1
    ff2c:	41ab      	sbcs	r3, r5
    ff2e:	2600      	movs	r6, #0
    ff30:	4313      	orrs	r3, r2
    ff32:	e79d      	b.n	fe70 <__aeabi_d2f+0x38>
    ff34:	2300      	movs	r3, #0
    ff36:	e7f7      	b.n	ff28 <__aeabi_d2f+0xf0>
    ff38:	2300      	movs	r3, #0
    ff3a:	e7ad      	b.n	fe98 <__aeabi_d2f+0x60>
    ff3c:	0034      	movs	r4, r6
    ff3e:	e7bf      	b.n	fec0 <__aeabi_d2f+0x88>
    ff40:	fffffc80 	.word	0xfffffc80
    ff44:	fffffc82 	.word	0xfffffc82
    ff48:	fffffca2 	.word	0xfffffca2

0000ff4c <__clzsi2>:
    ff4c:	211c      	movs	r1, #28
    ff4e:	2301      	movs	r3, #1
    ff50:	041b      	lsls	r3, r3, #16
    ff52:	4298      	cmp	r0, r3
    ff54:	d301      	bcc.n	ff5a <__clzsi2+0xe>
    ff56:	0c00      	lsrs	r0, r0, #16
    ff58:	3910      	subs	r1, #16
    ff5a:	0a1b      	lsrs	r3, r3, #8
    ff5c:	4298      	cmp	r0, r3
    ff5e:	d301      	bcc.n	ff64 <__clzsi2+0x18>
    ff60:	0a00      	lsrs	r0, r0, #8
    ff62:	3908      	subs	r1, #8
    ff64:	091b      	lsrs	r3, r3, #4
    ff66:	4298      	cmp	r0, r3
    ff68:	d301      	bcc.n	ff6e <__clzsi2+0x22>
    ff6a:	0900      	lsrs	r0, r0, #4
    ff6c:	3904      	subs	r1, #4
    ff6e:	a202      	add	r2, pc, #8	; (adr r2, ff78 <__clzsi2+0x2c>)
    ff70:	5c10      	ldrb	r0, [r2, r0]
    ff72:	1840      	adds	r0, r0, r1
    ff74:	4770      	bx	lr
    ff76:	46c0      	nop			; (mov r8, r8)
    ff78:	02020304 	.word	0x02020304
    ff7c:	01010101 	.word	0x01010101
	...
    ff88:	6c696166 	.word	0x6c696166
    ff8c:	74206465 	.word	0x74206465
    ff90:	6e69206f 	.word	0x6e69206f
    ff94:	61697469 	.word	0x61697469
    ff98:	657a696c 	.word	0x657a696c
    ff9c:	43444820 	.word	0x43444820
    ffa0:	30383031 	.word	0x30383031
    ffa4:	69726420 	.word	0x69726420
    ffa8:	2e726576 	.word	0x2e726576
    ffac:	0000000d 	.word	0x0000000d
    ffb0:	6c696166 	.word	0x6c696166
    ffb4:	74206465 	.word	0x74206465
    ffb8:	6573206f 	.word	0x6573206f
    ffbc:	7220646e 	.word	0x7220646e
    ffc0:	73696765 	.word	0x73696765
    ffc4:	20726574 	.word	0x20726574
    ffc8:	61746f70 	.word	0x61746f70
    ffcc:	72206f74 	.word	0x72206f74
    ffd0:	65757165 	.word	0x65757165
    ffd4:	66207473 	.word	0x66207473
    ffd8:	6320726f 	.word	0x6320726f
    ffdc:	616d6d6f 	.word	0x616d6d6f
    ffe0:	3020646e 	.word	0x3020646e
    ffe4:	32302578 	.word	0x32302578
    ffe8:	0a0d2178 	.word	0x0a0d2178
    ffec:	00000000 	.word	0x00000000
    fff0:	6c696166 	.word	0x6c696166
    fff4:	74206465 	.word	0x74206465
    fff8:	6572206f 	.word	0x6572206f
    fffc:	76696563 	.word	0x76696563
   10000:	79622065 	.word	0x79622065
   10004:	20736574 	.word	0x20736574
   10008:	20726f66 	.word	0x20726f66
   1000c:	6d6d6f63 	.word	0x6d6d6f63
   10010:	20646e61 	.word	0x20646e61
   10014:	30257830 	.word	0x30257830
   10018:	0d217832 	.word	0x0d217832
   1001c:	0000000a 	.word	0x0000000a
   10020:	61746164 	.word	0x61746164
   10024:	63617020 	.word	0x63617020
   10028:	3a74656b 	.word	0x3a74656b
   1002c:	25783020 	.word	0x25783020
   10030:	20783230 	.word	0x20783230
   10034:	30257830 	.word	0x30257830
   10038:	30207832 	.word	0x30207832
   1003c:	32302578 	.word	0x32302578
   10040:	000a0d78 	.word	0x000a0d78
   10044:	6f727265 	.word	0x6f727265
   10048:	72742072 	.word	0x72742072
   1004c:	676e6979 	.word	0x676e6979
   10050:	206f7420 	.word	0x206f7420
   10054:	20746573 	.word	0x20746573
   10058:	6f736572 	.word	0x6f736572
   1005c:	6974756c 	.word	0x6974756c
   10060:	0d216e6f 	.word	0x0d216e6f
   10064:	00000000 	.word	0x00000000
   10068:	00000ef0 	.word	0x00000ef0
   1006c:	00000ef8 	.word	0x00000ef8
   10070:	00000f06 	.word	0x00000f06
   10074:	00000f38 	.word	0x00000f38
   10078:	00000f42 	.word	0x00000f42
   1007c:	666e6f63 	.word	0x666e6f63
   10080:	72756769 	.word	0x72756769
   10084:	74685f65 	.word	0x74685f65
   10088:	635f7074 	.word	0x635f7074
   1008c:	6e65696c 	.word	0x6e65696c
   10090:	48203a74 	.word	0x48203a74
   10094:	20505454 	.word	0x20505454
   10098:	65696c63 	.word	0x65696c63
   1009c:	6920746e 	.word	0x6920746e
   100a0:	6974696e 	.word	0x6974696e
   100a4:	7a696c61 	.word	0x7a696c61
   100a8:	6f697461 	.word	0x6f697461
   100ac:	6166206e 	.word	0x6166206e
   100b0:	64656c69 	.word	0x64656c69
   100b4:	72282021 	.word	0x72282021
   100b8:	25207365 	.word	0x25207365
   100bc:	0a0d2964 	.word	0x0a0d2964
   100c0:	00000000 	.word	0x00000000
   100c4:	6c696166 	.word	0x6c696166
   100c8:	74206465 	.word	0x74206465
   100cc:	6e69206f 	.word	0x6e69206f
   100d0:	61697469 	.word	0x61697469
   100d4:	657a696c 	.word	0x657a696c
   100d8:	66697720 	.word	0x66697720
   100dc:	61702069 	.word	0x61702069
   100e0:	656d6172 	.word	0x656d6172
   100e4:	73726574 	.word	0x73726574
   100e8:	0000000d 	.word	0x0000000d
   100ec:	202d2d2d 	.word	0x202d2d2d
   100f0:	636c6557 	.word	0x636c6557
   100f4:	20656d6f 	.word	0x20656d6f
   100f8:	41206f74 	.word	0x41206f74
   100fc:	4e495754 	.word	0x4e495754
   10100:	35312043 	.word	0x35312043
   10104:	43203030 	.word	0x43203030
   10108:	656e6e6f 	.word	0x656e6e6f
   1010c:	6f697463 	.word	0x6f697463
   10110:	6554206e 	.word	0x6554206e
   10114:	2d207473 	.word	0x2d207473
   10118:	000d2d2d 	.word	0x000d2d2d
   1011c:	6e69616d 	.word	0x6e69616d
   10120:	6f63203a 	.word	0x6f63203a
   10124:	63656e6e 	.word	0x63656e6e
   10128:	676e6974 	.word	0x676e6974
   1012c:	206f7420 	.word	0x206f7420
   10130:	69466957 	.word	0x69466957
   10134:	20504120 	.word	0x20504120
   10138:	2e2e7325 	.word	0x2e2e7325
   1013c:	000a0d2e 	.word	0x000a0d2e
   10140:	63637573 	.word	0x63637573
   10144:	66737365 	.word	0x66737365
   10148:	796c6c75 	.word	0x796c6c75
   1014c:	6e6f6320 	.word	0x6e6f6320
   10150:	7463656e 	.word	0x7463656e
   10154:	000d6465 	.word	0x000d6465
   10158:	50726941 	.word	0x50726941
   1015c:	4e6e6e65 	.word	0x4e6e6e65
   10160:	442d7465 	.word	0x442d7465
   10164:	63697665 	.word	0x63697665
   10168:	00000065 	.word	0x00000065
   1016c:	6e6e6570 	.word	0x6e6e6570
   10170:	30343731 	.word	0x30343731
   10174:	69666977 	.word	0x69666977
   10178:	00000000 	.word	0x00000000
   1017c:	70747468 	.word	0x70747468
   10180:	772f2f3a 	.word	0x772f2f3a
   10184:	732e7777 	.word	0x732e7777
   10188:	2e736165 	.word	0x2e736165
   1018c:	6e657075 	.word	0x6e657075
   10190:	64652e6e 	.word	0x64652e6e
   10194:	777e2f75 	.word	0x777e2f75
   10198:	68637261 	.word	0x68637261
   1019c:	652f7265 	.word	0x652f7265
   101a0:	31356573 	.word	0x31356573
   101a4:	656d2f36 	.word	0x656d2f36
   101a8:	61646174 	.word	0x61646174
   101ac:	622e6174 	.word	0x622e6174
   101b0:	00006e69 	.word	0x00006e69
   101b4:	70747468 	.word	0x70747468
   101b8:	772f2f3a 	.word	0x772f2f3a
   101bc:	732e7777 	.word	0x732e7777
   101c0:	2e736165 	.word	0x2e736165
   101c4:	6e657075 	.word	0x6e657075
   101c8:	64652e6e 	.word	0x64652e6e
   101cc:	777e2f75 	.word	0x777e2f75
   101d0:	68637261 	.word	0x68637261
   101d4:	652f7265 	.word	0x652f7265
   101d8:	31356573 	.word	0x31356573
   101dc:	65742f36 	.word	0x65742f36
   101e0:	662d7473 	.word	0x662d7473
   101e4:	776d7269 	.word	0x776d7269
   101e8:	2e657261 	.word	0x2e657261
   101ec:	006e6962 	.word	0x006e6962
   101f0:	70747468 	.word	0x70747468
   101f4:	696c635f 	.word	0x696c635f
   101f8:	5f746e65 	.word	0x5f746e65
   101fc:	6c6c6163 	.word	0x6c6c6163
   10200:	6b636162 	.word	0x6b636162
   10204:	5448203a 	.word	0x5448203a
   10208:	63205054 	.word	0x63205054
   1020c:	6e65696c 	.word	0x6e65696c
   10210:	6f732074 	.word	0x6f732074
   10214:	74656b63 	.word	0x74656b63
   10218:	6e6f6320 	.word	0x6e6f6320
   1021c:	7463656e 	.word	0x7463656e
   10220:	0d2e6465 	.word	0x0d2e6465
   10224:	00000000 	.word	0x00000000
   10228:	70747468 	.word	0x70747468
   1022c:	696c635f 	.word	0x696c635f
   10230:	5f746e65 	.word	0x5f746e65
   10234:	6c6c6163 	.word	0x6c6c6163
   10238:	6b636162 	.word	0x6b636162
   1023c:	6572203a 	.word	0x6572203a
   10240:	73657571 	.word	0x73657571
   10244:	6f632074 	.word	0x6f632074
   10248:	656c706d 	.word	0x656c706d
   1024c:	2e646574 	.word	0x2e646574
   10250:	0000000d 	.word	0x0000000d
   10254:	70747468 	.word	0x70747468
   10258:	696c635f 	.word	0x696c635f
   1025c:	5f746e65 	.word	0x5f746e65
   10260:	6c6c6163 	.word	0x6c6c6163
   10264:	6b636162 	.word	0x6b636162
   10268:	6572203a 	.word	0x6572203a
   1026c:	76696563 	.word	0x76696563
   10270:	72206465 	.word	0x72206465
   10274:	6f707365 	.word	0x6f707365
   10278:	2065736e 	.word	0x2065736e
   1027c:	64207525 	.word	0x64207525
   10280:	20617461 	.word	0x20617461
   10284:	657a6973 	.word	0x657a6973
   10288:	0d752520 	.word	0x0d752520
   1028c:	0000000a 	.word	0x0000000a
   10290:	70747468 	.word	0x70747468
   10294:	696c635f 	.word	0x696c635f
   10298:	5f746e65 	.word	0x5f746e65
   1029c:	6c6c6163 	.word	0x6c6c6163
   102a0:	6b636162 	.word	0x6b636162
   102a4:	6964203a 	.word	0x6964203a
   102a8:	6e6f6373 	.word	0x6e6f6373
   102ac:	7463656e 	.word	0x7463656e
   102b0:	206e6f69 	.word	0x206e6f69
   102b4:	73616572 	.word	0x73616572
   102b8:	253a6e6f 	.word	0x253a6e6f
   102bc:	000a0d64 	.word	0x000a0d64
   102c0:	6f736572 	.word	0x6f736572
   102c4:	5f65766c 	.word	0x5f65766c
   102c8:	203a6263 	.word	0x203a6263
   102cc:	49207325 	.word	0x49207325
   102d0:	64612050 	.word	0x64612050
   102d4:	73657264 	.word	0x73657264
   102d8:	73692073 	.word	0x73692073
   102dc:	2e642520 	.word	0x2e642520
   102e0:	252e6425 	.word	0x252e6425
   102e4:	64252e64 	.word	0x64252e64
   102e8:	0a0d0a0d 	.word	0x0a0d0a0d
   102ec:	00000000 	.word	0x00000000
   102f0:	72617473 	.word	0x72617473
   102f4:	6f645f74 	.word	0x6f645f74
   102f8:	6f6c6e77 	.word	0x6f6c6e77
   102fc:	203a6461 	.word	0x203a6461
   10300:	20434d4d 	.word	0x20434d4d
   10304:	726f7473 	.word	0x726f7473
   10308:	20656761 	.word	0x20656761
   1030c:	20746f6e 	.word	0x20746f6e
   10310:	64616572 	.word	0x64616572
   10314:	000d2e79 	.word	0x000d2e79
   10318:	72617473 	.word	0x72617473
   1031c:	6f645f74 	.word	0x6f645f74
   10320:	6f6c6e77 	.word	0x6f6c6e77
   10324:	203a6461 	.word	0x203a6461
   10328:	462d6957 	.word	0x462d6957
   1032c:	73692069 	.word	0x73692069
   10330:	746f6e20 	.word	0x746f6e20
   10334:	6e6f6320 	.word	0x6e6f6320
   10338:	7463656e 	.word	0x7463656e
   1033c:	0d2e6465 	.word	0x0d2e6465
   10340:	00000000 	.word	0x00000000
   10344:	72617473 	.word	0x72617473
   10348:	6f645f74 	.word	0x6f645f74
   1034c:	6f6c6e77 	.word	0x6f6c6e77
   10350:	203a6461 	.word	0x203a6461
   10354:	75716572 	.word	0x75716572
   10358:	20747365 	.word	0x20747365
   1035c:	73207369 	.word	0x73207369
   10360:	20746e65 	.word	0x20746e65
   10364:	65726c61 	.word	0x65726c61
   10368:	2e796461 	.word	0x2e796461
   1036c:	0000000d 	.word	0x0000000d
   10370:	72617473 	.word	0x72617473
   10374:	6f645f74 	.word	0x6f645f74
   10378:	6f6c6e77 	.word	0x6f6c6e77
   1037c:	203a6461 	.word	0x203a6461
   10380:	6e6e7572 	.word	0x6e6e7572
   10384:	20676e69 	.word	0x20676e69
   10388:	6e776f64 	.word	0x6e776f64
   1038c:	64616f6c 	.word	0x64616f6c
   10390:	726c6120 	.word	0x726c6120
   10394:	79646165 	.word	0x79646165
   10398:	00000d2e 	.word	0x00000d2e
   1039c:	72617473 	.word	0x72617473
   103a0:	6f645f74 	.word	0x6f645f74
   103a4:	6f6c6e77 	.word	0x6f6c6e77
   103a8:	5b206461 	.word	0x5b206461
   103ac:	5f544f4e 	.word	0x5f544f4e
   103b0:	43454843 	.word	0x43454843
   103b4:	5d44454b 	.word	0x5d44454b
   103b8:	6573203a 	.word	0x6573203a
   103bc:	6e69646e 	.word	0x6e69646e
   103c0:	54482067 	.word	0x54482067
   103c4:	72205054 	.word	0x72205054
   103c8:	65757165 	.word	0x65757165
   103cc:	66207473 	.word	0x66207473
   103d0:	6820726f 	.word	0x6820726f
   103d4:	65646165 	.word	0x65646165
   103d8:	00000d72 	.word	0x00000d72
   103dc:	72617473 	.word	0x72617473
   103e0:	6f645f74 	.word	0x6f645f74
   103e4:	6f6c6e77 	.word	0x6f6c6e77
   103e8:	5b206461 	.word	0x5b206461
   103ec:	41445055 	.word	0x41445055
   103f0:	415f4554 	.word	0x415f4554
   103f4:	4c494156 	.word	0x4c494156
   103f8:	454c4241 	.word	0x454c4241
   103fc:	73203a5d 	.word	0x73203a5d
   10400:	69646e65 	.word	0x69646e65
   10404:	4820676e 	.word	0x4820676e
   10408:	20505454 	.word	0x20505454
   1040c:	75716572 	.word	0x75716572
   10410:	20747365 	.word	0x20747365
   10414:	20726f66 	.word	0x20726f66
   10418:	6d726966 	.word	0x6d726966
   1041c:	65726177 	.word	0x65726177
   10420:	0000000d 	.word	0x0000000d
   10424:	72617473 	.word	0x72617473
   10428:	6f645f74 	.word	0x6f645f74
   1042c:	6f6c6e77 	.word	0x6f6c6e77
   10430:	203a6461 	.word	0x203a6461
   10434:	75206f6e 	.word	0x75206f6e
   10438:	74616470 	.word	0x74616470
   1043c:	76612065 	.word	0x76612065
   10440:	616c6961 	.word	0x616c6961
   10444:	0d656c62 	.word	0x0d656c62
   10448:	00000000 	.word	0x00000000
   1044c:	726f7473 	.word	0x726f7473
   10450:	69665f65 	.word	0x69665f65
   10454:	705f656c 	.word	0x705f656c
   10458:	656b6361 	.word	0x656b6361
   1045c:	65203a74 	.word	0x65203a74
   10460:	7974706d 	.word	0x7974706d
   10464:	74616420 	.word	0x74616420
   10468:	000d2e61 	.word	0x000d2e61
   1046c:	726f7473 	.word	0x726f7473
   10470:	69665f65 	.word	0x69665f65
   10474:	705f656c 	.word	0x705f656c
   10478:	656b6361 	.word	0x656b6361
   1047c:	555b2074 	.word	0x555b2074
   10480:	54414450 	.word	0x54414450
   10484:	48435f45 	.word	0x48435f45
   10488:	5d4b4345 	.word	0x5d4b4345
   1048c:	6966203a 	.word	0x6966203a
   10490:	5b20656c 	.word	0x5b20656c
   10494:	62206425 	.word	0x62206425
   10498:	73657479 	.word	0x73657479
   1049c:	6f64205d 	.word	0x6f64205d
   104a0:	6e207365 	.word	0x6e207365
   104a4:	6d20746f 	.word	0x6d20746f
   104a8:	68637461 	.word	0x68637461
   104ac:	61656820 	.word	0x61656820
   104b0:	20726564 	.word	0x20726564
   104b4:	2064255b 	.word	0x2064255b
   104b8:	65747962 	.word	0x65747962
   104bc:	73205d73 	.word	0x73205d73
   104c0:	0d657a69 	.word	0x0d657a69
   104c4:	0000000a 	.word	0x0000000a
   104c8:	2077656e 	.word	0x2077656e
   104cc:	6d726966 	.word	0x6d726966
   104d0:	65726177 	.word	0x65726177
   104d4:	72657620 	.word	0x72657620
   104d8:	6e6f6973 	.word	0x6e6f6973
   104dc:	6425203a 	.word	0x6425203a
   104e0:	00000a0d 	.word	0x00000a0d
   104e4:	2077656e 	.word	0x2077656e
   104e8:	6d726966 	.word	0x6d726966
   104ec:	65726177 	.word	0x65726177
   104f0:	65686320 	.word	0x65686320
   104f4:	75736b63 	.word	0x75736b63
   104f8:	25203a6d 	.word	0x25203a6d
   104fc:	0d783430 	.word	0x0d783430
   10500:	0000000a 	.word	0x0000000a
   10504:	5f315746 	.word	0x5f315746
   10508:	53415245 	.word	0x53415245
   1050c:	44415f45 	.word	0x44415f45
   10510:	203a5244 	.word	0x203a5244
   10514:	0a0d6425 	.word	0x0a0d6425
   10518:	00000000 	.word	0x00000000
   1051c:	726f7473 	.word	0x726f7473
   10520:	69665f65 	.word	0x69665f65
   10524:	705f656c 	.word	0x705f656c
   10528:	656b6361 	.word	0x656b6361
   1052c:	4e203a74 	.word	0x4e203a74
   10530:	6c66206f 	.word	0x6c66206f
   10534:	20687361 	.word	0x20687361
   10538:	70696863 	.word	0x70696863
   1053c:	00000d2e 	.word	0x00000d2e
   10540:	726f7473 	.word	0x726f7473
   10544:	69665f65 	.word	0x69665f65
   10548:	705f656c 	.word	0x705f656c
   1054c:	656b6361 	.word	0x656b6361
   10550:	65203a74 	.word	0x65203a74
   10554:	726f7272 	.word	0x726f7272
   10558:	656c6320 	.word	0x656c6320
   1055c:	6e697261 	.word	0x6e697261
   10560:	65732067 	.word	0x65732067
   10564:	726f7463 	.word	0x726f7463
   10568:	6f727020 	.word	0x6f727020
   1056c:	74636574 	.word	0x74636574
   10570:	20746120 	.word	0x20746120
   10574:	72646461 	.word	0x72646461
   10578:	20737365 	.word	0x20737365
   1057c:	0d206425 	.word	0x0d206425
   10580:	0000000a 	.word	0x0000000a
   10584:	726f7473 	.word	0x726f7473
   10588:	69665f65 	.word	0x69665f65
   1058c:	705f656c 	.word	0x705f656c
   10590:	656b6361 	.word	0x656b6361
   10594:	65203a74 	.word	0x65203a74
   10598:	726f7272 	.word	0x726f7272
   1059c:	61726520 	.word	0x61726520
   105a0:	676e6973 	.word	0x676e6973
   105a4:	63657320 	.word	0x63657320
   105a8:	20726f74 	.word	0x20726f74
   105ac:	61207461 	.word	0x61207461
   105b0:	65726464 	.word	0x65726464
   105b4:	25207373 	.word	0x25207373
   105b8:	0a0d2064 	.word	0x0a0d2064
   105bc:	00000000 	.word	0x00000000
   105c0:	72617473 	.word	0x72617473
   105c4:	676e6974 	.word	0x676e6974
   105c8:	6c617620 	.word	0x6c617620
   105cc:	0000203a 	.word	0x0000203a
   105d0:	726f7473 	.word	0x726f7473
   105d4:	69665f65 	.word	0x69665f65
   105d8:	705f656c 	.word	0x705f656c
   105dc:	656b6361 	.word	0x656b6361
   105e0:	65203a74 	.word	0x65203a74
   105e4:	726f7272 	.word	0x726f7272
   105e8:	69727720 	.word	0x69727720
   105ec:	676e6974 	.word	0x676e6974
   105f0:	776f7220 	.word	0x776f7220
   105f4:	20746120 	.word	0x20746120
   105f8:	72646461 	.word	0x72646461
   105fc:	20737365 	.word	0x20737365
   10600:	0d206425 	.word	0x0d206425
   10604:	0000000a 	.word	0x0000000a
   10608:	726f7473 	.word	0x726f7473
   1060c:	69665f65 	.word	0x69665f65
   10610:	705f656c 	.word	0x705f656c
   10614:	656b6361 	.word	0x656b6361
   10618:	72203a74 	.word	0x72203a74
   1061c:	69656365 	.word	0x69656365
   10620:	5b646576 	.word	0x5b646576
   10624:	5d756c25 	.word	0x5d756c25
   10628:	6966202c 	.word	0x6966202c
   1062c:	7320656c 	.word	0x7320656c
   10630:	5b657a69 	.word	0x5b657a69
   10634:	5d756c25 	.word	0x5d756c25
   10638:	00000a0d 	.word	0x00000a0d
   1063c:	726f7473 	.word	0x726f7473
   10640:	69665f65 	.word	0x69665f65
   10644:	705f656c 	.word	0x705f656c
   10648:	656b6361 	.word	0x656b6361
   1064c:	66203a74 	.word	0x66203a74
   10650:	20656c69 	.word	0x20656c69
   10654:	6e776f64 	.word	0x6e776f64
   10658:	64616f6c 	.word	0x64616f6c
   1065c:	73206465 	.word	0x73206465
   10660:	65636375 	.word	0x65636375
   10664:	75667373 	.word	0x75667373
   10668:	2e796c6c 	.word	0x2e796c6c
   1066c:	0000000d 	.word	0x0000000d
   10670:	726f7473 	.word	0x726f7473
   10674:	69665f65 	.word	0x69665f65
   10678:	705f656c 	.word	0x705f656c
   1067c:	656b6361 	.word	0x656b6361
   10680:	66203a74 	.word	0x66203a74
   10684:	6873616c 	.word	0x6873616c
   10688:	63757320 	.word	0x63757320
   1068c:	73736563 	.word	0x73736563
   10690:	6c6c7566 	.word	0x6c6c7566
   10694:	72772079 	.word	0x72772079
   10698:	65747469 	.word	0x65747469
   1069c:	6977206e 	.word	0x6977206e
   106a0:	6e206874 	.word	0x6e206874
   106a4:	7265206f 	.word	0x7265206f
   106a8:	73726f72 	.word	0x73726f72
   106ac:	0000000d 	.word	0x0000000d
   106b0:	726f7473 	.word	0x726f7473
   106b4:	69665f65 	.word	0x69665f65
   106b8:	705f656c 	.word	0x705f656c
   106bc:	656b6361 	.word	0x656b6361
   106c0:	66203a74 	.word	0x66203a74
   106c4:	6873616c 	.word	0x6873616c
   106c8:	726f6320 	.word	0x726f6320
   106cc:	74707572 	.word	0x74707572
   106d0:	0d2e6465 	.word	0x0d2e6465
   106d4:	00000000 	.word	0x00000000
   106d8:	726f7473 	.word	0x726f7473
   106dc:	69665f65 	.word	0x69665f65
   106e0:	705f656c 	.word	0x705f656c
   106e4:	656b6361 	.word	0x656b6361
   106e8:	66203a74 	.word	0x66203a74
   106ec:	20656c69 	.word	0x20656c69
   106f0:	63656863 	.word	0x63656863
   106f4:	6d75736b 	.word	0x6d75736b
   106f8:	6f642073 	.word	0x6f642073
   106fc:	2074276e 	.word	0x2074276e
   10700:	6374616d 	.word	0x6374616d
   10704:	0a0d2e68 	.word	0x0a0d2e68
   10708:	70784520 	.word	0x70784520
   1070c:	65746365 	.word	0x65746365
   10710:	68632064 	.word	0x68632064
   10714:	736b6365 	.word	0x736b6365
   10718:	25206d75 	.word	0x25206d75
   1071c:	0d783430 	.word	0x0d783430
   10720:	6552200a 	.word	0x6552200a
   10724:	76696563 	.word	0x76696563
   10728:	63206465 	.word	0x63206465
   1072c:	6b636568 	.word	0x6b636568
   10730:	206d7573 	.word	0x206d7573
   10734:	78343025 	.word	0x78343025
   10738:	00000a0d 	.word	0x00000a0d
   1073c:	61647075 	.word	0x61647075
   10740:	625f6574 	.word	0x625f6574
   10744:	5f746f6f 	.word	0x5f746f6f
   10748:	74617473 	.word	0x74617473
   1074c:	203a7375 	.word	0x203a7375
   10750:	5f776f72 	.word	0x5f776f72
   10754:	655f6f74 	.word	0x655f6f74
   10758:	65736172 	.word	0x65736172
   1075c:	6425203a 	.word	0x6425203a
   10760:	00000a0d 	.word	0x00000a0d
   10764:	61647075 	.word	0x61647075
   10768:	625f6574 	.word	0x625f6574
   1076c:	5f746f6f 	.word	0x5f746f6f
   10770:	74617473 	.word	0x74617473
   10774:	203a7375 	.word	0x203a7375
   10778:	65676170 	.word	0x65676170
   1077c:	5f6f745f 	.word	0x5f6f745f
   10780:	74697277 	.word	0x74697277
   10784:	25203a65 	.word	0x25203a65
   10788:	000a0d64 	.word	0x000a0d64
   1078c:	61647075 	.word	0x61647075
   10790:	625f6574 	.word	0x625f6574
   10794:	5f746f6f 	.word	0x5f746f6f
   10798:	74617473 	.word	0x74617473
   1079c:	203a7375 	.word	0x203a7375
   107a0:	5f776f72 	.word	0x5f776f72
   107a4:	72646461 	.word	0x72646461
   107a8:	3a737365 	.word	0x3a737365
   107ac:	0d642520 	.word	0x0d642520
   107b0:	0000000a 	.word	0x0000000a
   107b4:	61647075 	.word	0x61647075
   107b8:	625f6574 	.word	0x625f6574
   107bc:	5f746f6f 	.word	0x5f746f6f
   107c0:	74617473 	.word	0x74617473
   107c4:	203a7375 	.word	0x203a7375
   107c8:	65676170 	.word	0x65676170
   107cc:	66666f5f 	.word	0x66666f5f
   107d0:	3a746573 	.word	0x3a746573
   107d4:	0d642520 	.word	0x0d642520
   107d8:	0000000a 	.word	0x0000000a
   107dc:	3a776f72 	.word	0x3a776f72
   107e0:	34302520 	.word	0x34302520
   107e4:	000a0d78 	.word	0x000a0d78
   107e8:	61647075 	.word	0x61647075
   107ec:	625f6574 	.word	0x625f6574
   107f0:	5f746f6f 	.word	0x5f746f6f
   107f4:	74617473 	.word	0x74617473
   107f8:	77207375 	.word	0x77207375
   107fc:	65746972 	.word	0x65746972
   10800:	6f6f625f 	.word	0x6f6f625f
   10804:	69732e74 	.word	0x69732e74
   10808:	74616e67 	.word	0x74616e67
   1080c:	3a657275 	.word	0x3a657275
   10810:	32302520 	.word	0x32302520
   10814:	000a0d78 	.word	0x000a0d78
   10818:	72617473 	.word	0x72617473
   1081c:	676e6974 	.word	0x676e6974
   10820:	65657320 	.word	0x65657320
   10824:	25203a64 	.word	0x25203a64
   10828:	0d783430 	.word	0x0d783430
   1082c:	0000000a 	.word	0x0000000a
   10830:	69726576 	.word	0x69726576
   10834:	665f7966 	.word	0x665f7966
   10838:	6873616c 	.word	0x6873616c
   1083c:	7265203a 	.word	0x7265203a
   10840:	20726f72 	.word	0x20726f72
   10844:	69797274 	.word	0x69797274
   10848:	7420676e 	.word	0x7420676e
   1084c:	6572206f 	.word	0x6572206f
   10850:	65206461 	.word	0x65206461
   10854:	72657478 	.word	0x72657478
   10858:	206c616e 	.word	0x206c616e
   1085c:	73616c66 	.word	0x73616c66
   10860:	25202e68 	.word	0x25202e68
   10864:	00000064 	.word	0x00000064
   10868:	202e6425 	.word	0x202e6425
   1086c:	69726576 	.word	0x69726576
   10870:	665f7966 	.word	0x665f7966
   10874:	6873616c 	.word	0x6873616c
   10878:	7263203a 	.word	0x7263203a
   1087c:	61765f63 	.word	0x61765f63
   10880:	25203a6c 	.word	0x25203a6c
   10884:	000a0d64 	.word	0x000a0d64
   10888:	69726576 	.word	0x69726576
   1088c:	665f7966 	.word	0x665f7966
   10890:	6873616c 	.word	0x6873616c
   10894:	6572203a 	.word	0x6572203a
   10898:	6e69616d 	.word	0x6e69616d
   1089c:	20676e69 	.word	0x20676e69
   108a0:	65747962 	.word	0x65747962
   108a4:	64252073 	.word	0x64252073
   108a8:	00000a0d 	.word	0x00000a0d
   108ac:	69726576 	.word	0x69726576
   108b0:	665f7966 	.word	0x665f7966
   108b4:	6873616c 	.word	0x6873616c
   108b8:	6163203a 	.word	0x6163203a
   108bc:	6c75636c 	.word	0x6c75636c
   108c0:	64657461 	.word	0x64657461
   108c4:	63726320 	.word	0x63726320
   108c8:	76203233 	.word	0x76203233
   108cc:	203a6c61 	.word	0x203a6c61
   108d0:	0a0d6425 	.word	0x0a0d6425
   108d4:	00000000 	.word	0x00000000
   108d8:	69666977 	.word	0x69666977
   108dc:	6c61635f 	.word	0x6c61635f
   108e0:	6361626c 	.word	0x6361626c
   108e4:	4d5b206b 	.word	0x4d5b206b
   108e8:	575f4d32 	.word	0x575f4d32
   108ec:	5f494649 	.word	0x5f494649
   108f0:	50534552 	.word	0x50534552
   108f4:	4e4f435f 	.word	0x4e4f435f
   108f8:	4154535f 	.word	0x4154535f
   108fc:	435f4554 	.word	0x435f4554
   10900:	474e4148 	.word	0x474e4148
   10904:	3a5d4445 	.word	0x3a5d4445
   10908:	6e6f6320 	.word	0x6e6f6320
   1090c:	7463656e 	.word	0x7463656e
   10910:	0d2e6465 	.word	0x0d2e6465
   10914:	00000000 	.word	0x00000000
   10918:	69666977 	.word	0x69666977
   1091c:	6c61635f 	.word	0x6c61635f
   10920:	6361626c 	.word	0x6361626c
   10924:	4d5b206b 	.word	0x4d5b206b
   10928:	575f4d32 	.word	0x575f4d32
   1092c:	5f494649 	.word	0x5f494649
   10930:	50534552 	.word	0x50534552
   10934:	4e4f435f 	.word	0x4e4f435f
   10938:	4154535f 	.word	0x4154535f
   1093c:	435f4554 	.word	0x435f4554
   10940:	474e4148 	.word	0x474e4148
   10944:	205d4445 	.word	0x205d4445
   10948:	63736964 	.word	0x63736964
   1094c:	656e6e6f 	.word	0x656e6e6f
   10950:	64657463 	.word	0x64657463
   10954:	00000d2e 	.word	0x00000d2e
   10958:	69666977 	.word	0x69666977
   1095c:	6c61635f 	.word	0x6c61635f
   10960:	6361626c 	.word	0x6361626c
   10964:	4d5b206b 	.word	0x4d5b206b
   10968:	575f4d32 	.word	0x575f4d32
   1096c:	5f494649 	.word	0x5f494649
   10970:	5f514552 	.word	0x5f514552
   10974:	50434844 	.word	0x50434844
   10978:	4e4f435f 	.word	0x4e4f435f
   1097c:	203a5d46 	.word	0x203a5d46
   10980:	61205049 	.word	0x61205049
   10984:	65726464 	.word	0x65726464
   10988:	69207373 	.word	0x69207373
   1098c:	75252073 	.word	0x75252073
   10990:	2e75252e 	.word	0x2e75252e
   10994:	252e7525 	.word	0x252e7525
   10998:	000a0d75 	.word	0x000a0d75
   1099c:	69666977 	.word	0x69666977
   109a0:	6c61635f 	.word	0x6c61635f
   109a4:	6361626c 	.word	0x6361626c
   109a8:	645b206b 	.word	0x645b206b
   109ac:	75616665 	.word	0x75616665
   109b0:	3a5d746c 	.word	0x3a5d746c
   109b4:	52524520 	.word	0x52524520
   109b8:	6520524f 	.word	0x6520524f
   109bc:	25207476 	.word	0x25207476
   109c0:	000a0d64 	.word	0x000a0d64
   109c4:	74697277 	.word	0x74697277
   109c8:	69665f65 	.word	0x69665f65
   109cc:	61776d72 	.word	0x61776d72
   109d0:	6d5f6572 	.word	0x6d5f6572
   109d4:	64617465 	.word	0x64617465
   109d8:	3a617461 	.word	0x3a617461
   109dc:	756f6320 	.word	0x756f6320
   109e0:	6e20646c 	.word	0x6e20646c
   109e4:	7720746f 	.word	0x7720746f
   109e8:	65746972 	.word	0x65746972
   109ec:	206f7420 	.word	0x206f7420
   109f0:	73616c66 	.word	0x73616c66
   109f4:	000d2168 	.word	0x000d2168
   109f8:	6c696166 	.word	0x6c696166
   109fc:	74206465 	.word	0x74206465
   10a00:	6e69206f 	.word	0x6e69206f
   10a04:	61697469 	.word	0x61697469
   10a08:	657a696c 	.word	0x657a696c
   10a0c:	4c535420 	.word	0x4c535420
   10a10:	31363532 	.word	0x31363532
   10a14:	69726420 	.word	0x69726420
   10a18:	2e726576 	.word	0x2e726576
   10a1c:	0000000d 	.word	0x0000000d
   10a20:	6c696166 	.word	0x6c696166
   10a24:	74206465 	.word	0x74206465
   10a28:	6573206f 	.word	0x6573206f
   10a2c:	7220646e 	.word	0x7220646e
   10a30:	73696765 	.word	0x73696765
   10a34:	20726574 	.word	0x20726574
   10a38:	75716572 	.word	0x75716572
   10a3c:	20747365 	.word	0x20747365
   10a40:	20726f66 	.word	0x20726f66
   10a44:	6d6d6f63 	.word	0x6d6d6f63
   10a48:	20646e61 	.word	0x20646e61
   10a4c:	30257830 	.word	0x30257830
   10a50:	0d217832 	.word	0x0d217832
   10a54:	0000000a 	.word	0x0000000a
   10a58:	0000156a 	.word	0x0000156a
   10a5c:	00001542 	.word	0x00001542
   10a60:	00001546 	.word	0x00001546
   10a64:	0000154a 	.word	0x0000154a
   10a68:	0000154e 	.word	0x0000154e
   10a6c:	00001552 	.word	0x00001552
   10a70:	00001556 	.word	0x00001556
   10a74:	0000155a 	.word	0x0000155a
   10a78:	0000155e 	.word	0x0000155e
   10a7c:	00001562 	.word	0x00001562
   10a80:	00001608 	.word	0x00001608
   10a84:	000015e0 	.word	0x000015e0
   10a88:	000015e6 	.word	0x000015e6
   10a8c:	000015ec 	.word	0x000015ec
   10a90:	000015ec 	.word	0x000015ec
   10a94:	000015f2 	.word	0x000015f2
   10a98:	000015f2 	.word	0x000015f2
   10a9c:	000015f2 	.word	0x000015f2
   10aa0:	000015f8 	.word	0x000015f8
   10aa4:	000015fe 	.word	0x000015fe
   10aa8:	00000100 	.word	0x00000100
   10aac:	0000170a 	.word	0x0000170a
   10ab0:	000016e2 	.word	0x000016e2
   10ab4:	000016e8 	.word	0x000016e8
   10ab8:	000016ee 	.word	0x000016ee
   10abc:	000016ee 	.word	0x000016ee
   10ac0:	000016f4 	.word	0x000016f4
   10ac4:	000016f4 	.word	0x000016f4
   10ac8:	000016f4 	.word	0x000016f4
   10acc:	000016fa 	.word	0x000016fa
   10ad0:	00001700 	.word	0x00001700
   10ad4:	00001b36 	.word	0x00001b36
   10ad8:	00001b12 	.word	0x00001b12
   10adc:	00001b18 	.word	0x00001b18
   10ae0:	00001b1e 	.word	0x00001b1e
   10ae4:	00001b1e 	.word	0x00001b1e
   10ae8:	00001b24 	.word	0x00001b24
   10aec:	00001b24 	.word	0x00001b24
   10af0:	00001b24 	.word	0x00001b24
   10af4:	00001b2a 	.word	0x00001b2a
   10af8:	00001b30 	.word	0x00001b30

00010afc <__FUNCTION__.14835>:
   10afc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   10b0c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   10b1c:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   10b2c:	6320746c 0000646d 00002e30 00002e00     lt cmd..0.......
   10b3c:	00002df8 00002e10 00002e08 00002e28     .-..........(...
   10b4c:	00002e18 00002e20                       .... ...

00010b54 <__FUNCTION__.13073>:
   10b54:	5f666968 646e6573 00000000              hif_send....

00010b60 <__FUNCTION__.13083>:
   10b60:	5f666968 00727369                       hif_isr.

00010b68 <__FUNCTION__.13089>:
   10b68:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00010b78 <__FUNCTION__.13101>:
   10b78:	5f666968 65636572 00657669              hif_receive.

00010b84 <__FUNCTION__.13117>:
   10b84:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   10b94:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   10ba4:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   10bb4:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   10bc4:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   10bd4:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   10be4:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   10bf4:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   10c04:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   10c14:	6c616320 6361626c 7369206b 746f6e20      callback is not
   10c24:	67657220 65747369 00646572 6b6f6353      registered.Scok
   10c34:	63207465 626c6c61 206b6361 6e207369     et callback is n
   10c44:	7220746f 73696765 65726574 00000064     ot registered...
   10c54:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   10c64:	20746f6e 69676572 72657473 00006465     not registered..
   10c74:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   10c84:	6e207369 7220746f 73696765 65726574     is not registere
   10c94:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   10ca4:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   10cb4:	64657265 00000000 66696828 6e692029     ered....(hif) in
   10cc4:	696c6176 72672064 2070756f 00004449     valid group ID..
   10cd4:	66696828 6f682029 61207473 64207070     (hif) host app d
   10ce4:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   10cf4:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   10d04:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   10d14:	66696828 61462029 2065736c 65746e69     (hif) False inte
   10d24:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   10d34:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   10d44:	7265746e 74707572 67657220 00000000     nterrupt reg....
   10d54:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   10d64:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   10d74:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   10d84:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   10d94:	696c6176 72612064 656d7567 0000746e     valid argument..
   10da4:	20505041 75716552 65747365 69532064     APP Requested Si
   10db4:	6920657a 616c2073 72656772 61687420     ze is larger tha
   10dc4:	6874206e 65722065 65766963 75622064     n the recived bu
   10dd4:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   10de4:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   10df4:	65747365 64412064 73657264 65622073     ested Address be
   10e04:	646e6f79 65687420 63657220 64657669     yond the recived
   10e14:	66756220 20726566 72646461 20737365      buffer address 
   10e24:	20646e61 676e656c 00006874 20705247     and length..GRp 
   10e34:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   10e44:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   10e54:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   10e64:	6b617720 74207075 63206568 00706968      wakup the chip.

00010e74 <__FUNCTION__.13052>:
   10e74:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00010e80 <__FUNCTION__.13081>:
   10e80:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00010e90 <__FUNCTION__.13109>:
   10e90:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   10ea0:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   10eb0:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   10ec0:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   10ed0:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   10ee0:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   10ef0:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   10f00:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   10f10:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   10f20:	20706557 2079656b 65646e69 64252078     Wep key index %d
   10f30:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   10f40:	2079656b 676e656c 25206874 00000a64     key length %d...
   10f50:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   10f60:	656c2079 6874676e 00000000 65646e75     y length....unde
   10f70:	656e6966 65732064 79742063 00006570     fined sec type..
   10f80:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   10f90:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   10fa0:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   10fb0:	69754220 2520646c 69542073 2520656d      Build %s Time %
   10fc0:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   10fd0:	69726420 20726576 20726576 7525203a      driver ver : %u
   10fe0:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   10ff0:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   11000:	333a3531 31313a30 00000000 20727041     15:30:11....Apr 
   11010:	32203432 00383130 76697244 62207265     24 2018.Driver b
   11020:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   11030:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   11040:	65562065 6f697372 0000006e              e Version...

0001104c <__FUNCTION__.12915>:
   1104c:	70696863 6b61775f 00000065              chip_wake...

00011058 <__FUNCTION__.12964>:
   11058:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   11068:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   11078:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   11088:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   11098:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   110a8:	70696863 00000000 76697244 65567265     chip....DriverVe
   110b8:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

000110c8 <__FUNCTION__.12962>:
   110c8:	645f6d6e 695f7672 0074696e              nm_drv_init.

000110d4 <__FUNCTION__.12969>:
   110d4:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   110e4:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   110f4:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   11104:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   11114:	73616c66 69642068 6c626173 61662065     flash disable fa
   11124:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   11134:	6c696166 696e6920 75622074 00000073     fail init bus...
   11144:	6c696166 74206465 6e65206f 656c6261     failed to enable
   11154:	746e6920 75727265 2e737470 0000002e      interrupts.....
   11164:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   11174:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   11184:	20444920 0a786c25 00000000 00003e10      ID %lx......>..
   11194:	00003e10 00003e40 00003dc2 00003de6     .>..@>...=...=..
   111a4:	00003df4 00003e26 00003e26 00003e6e     .=..&>..&>..n>..
   111b4:	00003da6 00003ea8 00003ea8 00003ea8     .=...>...>...>..
   111c4:	00003ea8 00003e02 cac4c9c3              .>...>......

000111d0 <__FUNCTION__.12268>:
   111d0:	5f697073 00646d63                       spi_cmd.

000111d8 <__FUNCTION__.12275>:
   111d8:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000111e8 <__FUNCTION__.12284>:
   111e8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000111f4 <__FUNCTION__.12300>:
   111f4:	5f697073 61746164 6165725f 00000064     spi_data_read...

00011204 <__FUNCTION__.12315>:
   11204:	5f697073 61746164 6972775f 00006574     spi_data_write..

00011214 <__FUNCTION__.12327>:
   11214:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00011224 <__FUNCTION__.12338>:
   11224:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00011234 <__FUNCTION__.12350>:
   11234:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00011244 <__FUNCTION__.12363>:
   11244:	735f6d6e 725f6970 00646165              nm_spi_read.

00011250 <__FUNCTION__.12384>:
   11250:	735f6d6e 695f6970 0074696e              nm_spi_init.

0001125c <crc7_syndrome_table>:
   1125c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1126c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1127c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1128c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1129c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   112ac:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   112bc:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   112cc:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   112dc:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   112ec:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   112fc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1130c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1131c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1132c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1133c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1134c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1135c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1136c:	6e692064 6e726574 72206c61 20646165     d internal read 
   1137c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   1138c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   1139c:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   113ac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   113bc:	6e692064 6e726574 72206c61 20646165     d internal read 
   113cc:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   113dc:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   113ec:	6e726574 77206c61 65746972 6f727020     ternal write pro
   113fc:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   1140c:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   1141c:	20646d63 64616572 69686320 64692070     cmd read chip id
   1142c:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1143c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1144c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1145c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1146c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1147c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1148c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1149c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   114ac:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   114bc:	00000000 65736552 6e612074 65722064     ....Reset and re
   114cc:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   114dc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   114ec:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   114fc:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1150c:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1151c:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1152c:	69727720 62206574 6b636f6c 30252820      write block (%0
   1153c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1154c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1155c:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   1156c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1157c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1158c:	61642064 62206174 6b636f6c 69727720     d data block wri
   1159c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   115ac:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   115bc:	656c6961 61642064 62206174 6b636f6c     ailed data block
   115cc:	63726320 69727720 202c6574 20737562      crc write, bus 
   115dc:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   115ec:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   115fc:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   1160c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1161c:	72206174 6f707365 2065736e 64616572     ta response read
   1162c:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   1163c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1164c:	206b636f 61746164 69727720 2e2e6574     ock data write..
   1165c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1166c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1167c:	73756220 72726520 2e2e726f 0000002e      bus error......
   1168c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1169c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   116ac:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   116bc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   116cc:	656c6961 61642064 72206174 6f707365     ailed data respo
   116dc:	2065736e 64616572 7562202c 72652073     nse read, bus er
   116ec:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   116fc:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1170c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1171c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1172c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1173c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1174c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1175c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1176c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1177c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1178c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1179c:	72202c64 20646165 20676572 38302528     d, read reg (%08
   117ac:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   117bc:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   117cc:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   117dc:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   117ec:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   117fc:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1180c:	6e612074 65722064 20797274 25206425     t and retry %d %
   1181c:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1182c:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   1183c:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   1184c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1185c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   1186c:	74697277 65722065 25282067 29783830     write reg (%08x)
   1187c:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   1188c:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   1189c:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   118ac:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   118bc:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   118cc:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   118dc:	4449206e 25203d20 000a0d64 00005526     n ID = %d...&U..
   118ec:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   118fc:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   1190c:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   1191c:	0000576c 0000576c 0000576c 0000550e     lW..lW..lW...U..
   1192c:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   1193c:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   1194c:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   1195c:	0000576c 0000576c 0000576c 0000551e     lW..lW..lW...U..
   1196c:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   1197c:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   1198c:	0000576c 0000576c 0000576c 0000576c     lW..lW..lW..lW..
   1199c:	0000576c 0000576c 0000576c 00005516     lW..lW..lW...U..
   119ac:	0000552e 000054f6 00005506 000054fe     .U...T...U...T..
   119bc:	00000002 00000003 00000028 00000029     ........(...)...
   119cc:	00000004 00000005 00000006 00000007     ................
   119dc:	0000ffff 0000ffff 00000022 00000023     ........"...#...
   119ec:	0000ffff 0000ffff 0000ffff 0000ffff     ................
   119fc:	00000008 00000009 0000000a 0000000b     ................
   11a0c:	0000661a 00006614 0000660e 00006608     .f...f...f...f..
   11a1c:	00006620 00006628 00006620 00006602      f..(f.. f...f..
   11a2c:	000065fc 00006620 000065f6 000065f6     .e.. f...e...e..
   11a3c:	000065f0 000065ea 00006628 00006692     .e...e..(f...f..
   11a4c:	0000668c 00006686 00006680 00006698     .f...f...f...f..
   11a5c:	000066a0 00006698 0000667a 00006674     .f...f..zf..tf..
   11a6c:	00006698 0000666e 0000666e 00006668     .f..nf..nf..hf..
   11a7c:	00006662 000066a0 0000670c 00006706     bf...f...g...g..
   11a8c:	00006700 000066fa 00006712 00006712     .g...f...g...g..
   11a9c:	00006712 000066f4 000066ee 00006712     .g...f...f...g..
   11aac:	000066e8 000066e8 000066e2 000066dc     .f...f...f...f..
   11abc:	33323130 37363534 62613938 66656463     0123456789abcdef
   11acc:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   11adc:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   11aec:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   11afc:	20544547 00000000 54534f50 00000020     GET ....POST ...
   11b0c:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   11b1c:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   11b2c:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   11b3c:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   11b4c:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   11b5c:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   11b6c:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   11b7c:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   11b8c:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   11b9c:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   11bac:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   11bbc:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   11bcc:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   11bdc:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   11bec:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   11bfc:	42002800                                .(.B

00011c00 <_tcc_apbcmasks>:
   11c00:	00000100 00000200 00000400              ............

00011c0c <_tcc_cc_nums>:
   11c0c:	00020204                                ....

00011c10 <_tcc_gclk_ids>:
   11c10:	001b1a1a                                ....

00011c14 <_tcc_maxs>:
   11c14:	00ffffff 00ffffff 0000ffff              ............

00011c20 <_tcc_ow_nums>:
   11c20:	00020408                                ....

00011c24 <_tcc_intflag>:
   11c24:	00000001 00000002 00000004 00000008     ................
   11c34:	00001000 00002000 00004000 00008000     ..... ...@......
   11c44:	00010000 00020000 00040000 00080000     ................

00011c54 <tcc_interrupt_vectors.12458>:
   11c54:	0011100f 6c696166 206e6f20 206e6970     ....fail on pin 
   11c64:	20434441 206e6163 72727563 6c746e65     ADC can currentl
   11c74:	6e6f2079 6220796c 6f632065 6769666e     y only be config
   11c84:	64657275 206e6f20 25632550 50202e64     ured on P%c%d. P
   11c94:	7361656c 72742065 67612079 2e6e6961     lease try again.
   11ca4:	00000a0d 6c696166 206e6f20 74726f70     ....fail on port
   11cb4:	43444120 6e616320 72756320 746e6572      ADC can current
   11cc4:	6f20796c 20796c6e 63206562 69666e6f     ly only be confi
   11cd4:	65727567 6e6f2064 25632520 50202e64     gured on %c%d. P
   11ce4:	7361656c 72742065 67612079 2e6e6961     lease try again.
   11cf4:	00000a0d 746c6f56 20656761 50207461     ....Voltage at P
   11d04:	64256325 6625203a 00000a0d 796c6e4f     %c%d: %f....Only
   11d14:	25415020 50202c64 2c642541 25425020      PA%d, PA%d, PB%
   11d24:	50202c64 2c642542 206e6163 73206562     d, PB%d,can be s
   11d34:	0a0d7465 00000000 206e6950 63206425     et......Pin %d c
   11d44:	7261656c 0a0d6465 00000000 206e6970     leared......pin 
   11d54:	76206425 65756c61 6425203a 00000a0d     %d value: %d....
   11d64:	206e6950 73206425 68207465 0d686769     Pin %d set high.
   11d74:	0000000a 706c6568 50202d20 746e6972     ....help - Print
   11d84:	6c612073 6874206c 76612065 616c6961     s all the availa
   11d94:	20656c62 6d6d6f63 73646e61 646e6120     ble commands and
   11da4:	73206120 74726f68 6e797320 6973706f      a short synopsi
   11db4:	0a0d2073 5f726576 2d206c62 69725020     s ..ver_bl - Pri
   11dc4:	2073746e 20656874 746f6f62 64616f6c     nts the bootload
   11dd4:	66207265 776d7269 20657261 73726576     er firmware vers
   11de4:	206e6f69 65760a0d 70615f72 202d0970     ion ..ver_app.- 
   11df4:	6e697250 74207374 61206568 696c7070     Prints the appli
   11e04:	69746163 63206e6f 2065646f 6d726966     cation code firm
   11e14:	65726177 72657620 6e6f6973 670a0d20     ware version ..g
   11e24:	5f6f6970 20746573 726f705b 5b205d74     pio_set [port] [
   11e34:	5d6e6970 53202d20 61207465 49504720     pin] - Set a GPI
   11e44:	6970204f 6f74206e 67696820 202f2068     O pin to high / 
   11e54:	0a0d2031 6f697067 656c635f 5b207261     1 ..gpio_clear [
   11e64:	74726f70 705b205d 095d6e69 6553202d     port] [pin].- Se
   11e74:	20612074 4f495047 6e697020 206f7420     t a GPIO pin to 
   11e84:	20776f6c 2030202f 70670a0d 675f6f69     low / 0 ..gpio_g
   11e94:	5b207465 74726f70 705b205d 205d6e69     et [port] [pin] 
   11ea4:	6547202d 74732074 20657461 7320666f     - Get state of s
   11eb4:	69636570 64656966 49504720 6970204f     pecified GPIO pi
   11ec4:	0a0d206e 2063616d 6572202d 6e727574     n ..mac - return
   11ed4:	68742073 616d2065 64612063 73657264     s the mac addres
   11ee4:	666f2073 65687420 76656420 20656369     s of the device 
   11ef4:	70690a0d 72202d20 72757465 7420736e     ..ip - returns t
   11f04:	49206568 20347650 72646461 20737365     he IPv4 address 
   11f14:	65720a0d 3c5f6461 736e6573 203e726f     ..read_<sensor> 
   11f24:	6165725b 676e6964 5b205d73 65746e69     [readings] [inte
   11f34:	6c617672 202d205d 6e697250 61207374     rval] - Prints a
   11f44:	6d756e20 20726562 7220666f 69646165      number of readi
   11f54:	2073676e 74207461 67206568 6e657669     ngs at the given
   11f64:	746e6920 61767265 0a0d206c 5f636461      interval ..adc_
   11f74:	20746567 726f705b 5b205d74 5d6e6970     get [port] [pin]
   11f84:	47202d20 74207465 41206568 76204344      - Get the ADC v
   11f94:	65756c61 20666f20 20656874 65766967     alue of the give
   11fa4:	6970206e 0d202e6e 75636d0a 6d65745f     n pin. ..mcu_tem
   11fb4:	202d2070 6f706552 20737472 20656874     p - Reports the 
   11fc4:	706d6574 74617265 20657275 7420666f     temperature of t
   11fd4:	6d206568 69207563 6543206e 7569736c     he mcu in Celsiu
   11fe4:	0d202e73 6332690a 6163735f 202d206e     s. ..i2c_scan - 
   11ff4:	6e697250 6f207374 61207475 73696c20     Prints out a lis
   12004:	6f632074 63656e6e 20646574 20433249     t connected I2C 
   12014:	76616c73 64612065 73657264 20736573     slave addresses 
   12024:	65720a0d 5f79616c 20746573 7574202d     ..relay_set - tu
   12034:	20736e72 72206e6f 79616c65 720a0d20     rns on relay ..r
   12044:	79616c65 656c635f 2d207261 72757420     elay_clear - tur
   12054:	6f20736e 72206666 79616c65 00000d20     ns off relay ...
   12064:	72646441 20737365 6e756f66 74612064     Address found at
   12074:	58232520 00000a0d 6e616353 676e696e      %#X....Scanning
   12084:	6d657420 75622070 00000d73 6e616353      temp bus...Scan
   12094:	6f632073 656c706d 0d2e6574 00000000     s complete......
   120a4:	706c6568 00000000 5f726576 00006c62     help....ver_bl..
   120b4:	5f726576 00707061 6f697067 7465735f     ver_app.gpio_set
   120c4:	00000000 6f697067 656c635f 00007261     ....gpio_clear..
   120d4:	6f697067 7465675f 00000000 0063616d     gpio_get....mac.
   120e4:	00007069 64616572 00000000 5f636461     ip..read....adc_
   120f4:	00746567 5f75636d 706d6574 00000000     get.mcu_temp....
   12104:	5f633269 6e616373 00000000 6e6e7572     i2c_scan....runn
   12114:	20676e69 5f633269 6e616373 0000000d     ing i2c_scan....
   12124:	616c6572 6f5f3179 0000006e 616c6552     relay1_on...Rela
   12134:	20312079 6e727574 20676e69 0d2e6e6f     y 1 turning on..
   12144:	00000000 616c6572 6f5f3179 00006666     ....relay1_off..
   12154:	616c6552 20312079 6e727574 20676e69     Relay 1 turning 
   12164:	2e66666f 0000000d 616c6572 6f5f3279     off.....relay2_o
   12174:	0000006e 616c6552 20322079 6e727574     n...Relay 2 turn
   12184:	20676e69 0d2e6e6f 00000000 616c6572     ing on......rela
   12194:	6f5f3279 00006666 616c6552 20322079     y2_off..Relay 2 
   121a4:	6e727574 20676e69 2e66666f 0000000d     turning off.....
   121b4:	736f6f62 6e6f5f74 00000000 736f6f42     boost_on....Boos
   121c4:	6f632074 7265766e 20726574 62616e65     t converter enab
   121d4:	2e64656c 0000000d 736f6f62 666f5f74     led.....boost_of
   121e4:	00000066 736f6f42 6f632074 7265766e     f...Boost conver
   121f4:	20726574 61736964 64656c62 00000d2e     ter disabled....
   12204:	3164656c 006e6f5f 3144454c 72757420     led1_on.LED1 tur
   12214:	676e696e 2e6e6f20 0000000d 3164656c     ning on.....led1
   12224:	66666f5f 00000000 3144454c 72757420     _off....LED1 tur
   12234:	676e696e 66666f20 00000d2e 3264656c     ning off....led2
   12244:	006e6f5f 3244454c 72757420 676e696e     _on.LED2 turning
   12254:	2e6e6f20 0000000d 3264656c 66666f5f      on.....led2_off
   12264:	00000000 3244454c 72757420 676e696e     ....LED2 turning
   12274:	66666f20 00000d2e 63656863 6f665f6b      off....check_fo
   12284:	70755f72 65746164 00000000 6e776f64     r_update....down
   12294:	64616f6c 6470755f 00657461 5f6e7572     load_update.run_
   122a4:	706d7570 00000000 61766e49 2064696c     pump....Invalid 
   122b4:	75706e69 53202e74 68206565 20706c65     input. See help 
   122c4:	20726f66 72726f63 20746365 67617375     for correct usag
   122d4:	000d2e65 2e353532 2e353532 2e353532     e...255.255.255.
   122e4:	20353532 0000000d 302e3030 30302e30     255 ....00.00.00
   122f4:	0d30302e 00000000 2055434d 706d6574     .00.....MCU temp
   12304:	74617265 3a657275 43642520 000a0d20     erature: %dC ...
   12314:	6d726966 65726177 63757320 73736563     firmware success
   12324:	6c6c7566 6f642079 6f6c6e77 64656461     fully downloaded
   12334:	00000d21 6e776f64 64616f6c 69616620     !...download fai
   12344:	2e64656c 000d2e2e 61647075 61206574     led.....update a
   12354:	6c696176 656c6261 00000d21 6c206e6f     vailable!...on l
   12364:	73657461 65762074 6f697372 00000d6e     atest version...
   12374:	61766e49 2064696c 626d756e 6f207265     Invalid number o
   12384:	72612066 203a7367 72207325 69757165     f args: %s requi
   12394:	20736572 61206425 6d756772 73746e65     res %d arguments
   123a4:	646e6120 756f7920 6f727020 65646976      and you provide
   123b4:	64252064 2e0a0d20 20656553 706c6568     d %d ...See help
   123c4:	726f6620 726f6d20 6e692065 6d726f66      for more inform
   123d4:	6f697461 0d202e6e 0000000a 72656874     ation. .....ther
   123e4:	61772065 6e612073 72726520 7020726f     e was an error p
   123f4:	69737261 7920676e 2072756f 73677261     arsing your args
   12404:	726f6620 2e732520 65655320 6c656820      for %s. See hel
   12414:	6f662070 6f632072 63657272 73752074     p for correct us
   12424:	2e656761 00000a0d 0078756c 72727543     age.....lux.Curr
   12434:	20746e65 3a78756c 0d642520 0000000a     ent lux: %d.....
   12444:	72727543 20746e65 706d6574 74617265     Current temperat
   12454:	3a657275 2e332520 0a0d6632 72754320     ure: %3.2f.. Cur
   12464:	746e6572 6d756820 74696469 25203a79     rent humidity: %
   12474:	66322e33 00000a0d 73696f6d 65727574     3.2f....moisture
   12484:	00000000 72727543 20746e65 73696f6d     ....Current mois
   12494:	65727574 2e25203a 20663230 0d202525     ture: %.02f %% .
   124a4:	0000000a 2e302e30 00000030 73726556     ....0.0.0...Vers
   124b4:	3a6e6f69 20732520 00000a0d 42000800     ion: %s .......B
   124c4:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   124d4:	42001c00 00009a40 00009a40 00009a1c     ...B@...@.......
   124e4:	00009a40 00009a1c 00009a02 00009a02     @...............
   124f4:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12504:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12514:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12524:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12534:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12544:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12554:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12564:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12574:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12584:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   12594:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   125a4:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   125b4:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   125c4:	00009a40 00009a40 00009a40 00009a40     @...@...@...@...
   125d4:	00009a40 00009a1c 00009a1c 00009a24     @...........$...
   125e4:	00009a24 00009a24 00009a24 00009cca     $...$...$.......
   125f4:	00009cc6 00009cc6 00009d28 00009d28     ........(...(...
   12604:	00009cde 00009cd0 00009ce4 00009d16     ................
   12614:	00009ee8 00009ec8 00009ec8 00009f54     ............T...
   12624:	00009eda 00009ef6 00009ecc 00009f04     ................
   12634:	00009f44 20766564 203a6469 30257830     D...dev id: 0x%0
   12644:	0a0d7832 00000000 65570a0d 6d6f636c     2x........Welcom
   12654:	6f742065 65687420 65764520 65726772     e to the Evergre
   12664:	43206e65 0d2e494c 00000000 0000203e     en CLI......> ..
   12674:	7325203e 00000a0d                       > %s....

0001267c <_global_impure_ptr>:
   1267c:	20000014 4f500043 00584953 4e49002e     ... C.POSIX...IN
   1268c:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
   1269c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   126ac:	32313000 36353433 61393837 65646362     .0123456789abcde
   126bc:	20000066                                         f.

000126be <_ctype_>:
   126be:	20202000 20202020 28282020 20282828     .         ((((( 
   126ce:	20202020 20202020 20202020 20202020                     
   126de:	10108820 10101010 10101010 10101010      ...............
   126ee:	04040410 04040404 10040404 10101010     ................
   126fe:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1270e:	01010101 01010101 01010101 10101010     ................
   1271e:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1272e:	02020202 02020202 02020202 10101010     ................
   1273e:	00000020 00000000 00000000 00000000      ...............
	...
   127be:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

000127cc <__sf_fake_stderr>:
	...

000127ec <__sf_fake_stdin>:
	...

0001280c <__sf_fake_stdout>:
	...

00012830 <__mprec_bigtens>:
   12830:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   12840:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   12850:	7f73bf3c 75154fdd                       <.s..O.u

00012858 <__mprec_tens>:
   12858:	00000000 3ff00000 00000000 40240000     .......?......$@
   12868:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12878:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   12888:	00000000 412e8480 00000000 416312d0     .......A......cA
   12898:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   128a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   128b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   128c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   128d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   128e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   128f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   12908:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   12918:	79d99db4 44ea7843                       ...yCx.D

00012920 <p05.6047>:
   12920:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   12930:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
   12940:	0000de60 0000de30 0000de42 0000dd84     `...0...B.......
   12950:	0000de42 0000de26 0000de42 0000dd84     B...&...B.......
   12960:	0000de30 0000de30 0000de26 0000dd84     0...0...&.......
   12970:	0000dd8c 0000dd8c 0000dd8c 0000de48     ............H...
   12980:	0000de30 0000de30 0000de04 0000dee8     0...0...........
   12990:	0000de04 0000de26 0000de04 0000dee8     ....&...........
   129a0:	0000de30 0000de30 0000de26 0000dee8     0...0...&.......
   129b0:	0000dd8c 0000dd8c 0000dd8c 0000def2     ................
   129c0:	0000e090 0000dfe0 0000dfe0 0000dfde     ................
   129d0:	0000e082 0000e082 0000e078 0000dfde     ........x.......
   129e0:	0000e082 0000e078 0000e082 0000dfde     ....x...........
   129f0:	0000e088 0000e088 0000e088 0000e118     ................
   12a00:	0000ea5c 0000ea3e 0000e9f8 0000e916     \...>...........
   12a10:	0000e9f8 0000ea30 0000e9f8 0000e916     ....0...........
   12a20:	0000ea3e 0000ea3e 0000ea30 0000e916     >...>...0.......
   12a30:	0000e90e 0000e90e 0000e90e 0000ec74     ............t...
   12a40:	0000f2bc 0000f17c 0000f17c 0000f178     ....|...|...x...
   12a50:	0000f294 0000f294 0000f286 0000f178     ............x...
   12a60:	0000f294 0000f286 0000f294 0000f178     ............x...
   12a70:	0000f29c 0000f29c 0000f29c 0000f4a0     ................

00012a80 <_init>:
   12a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a82:	46c0      	nop			; (mov r8, r8)
   12a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12a86:	bc08      	pop	{r3}
   12a88:	469e      	mov	lr, r3
   12a8a:	4770      	bx	lr

00012a8c <__init_array_start>:
   12a8c:	000000dd 	.word	0x000000dd

00012a90 <_fini>:
   12a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a92:	46c0      	nop			; (mov r8, r8)
   12a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12a96:	bc08      	pop	{r3}
   12a98:	469e      	mov	lr, r3
   12a9a:	4770      	bx	lr

00012a9c <__fini_array_start>:
   12a9c:	000000b5 	.word	0x000000b5
