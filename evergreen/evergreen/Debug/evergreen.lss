
evergreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012e38  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00012e38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000868  200001dc  00013014  000301dc  2**2
                  ALLOC
  3 .stack        00002004  20000a44  0001387c  000301dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0008fb15  00000000  00000000  000302ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000b00b  00000000  00000000  000bfde3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001dc3b  00000000  00000000  000cadee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001278  00000000  00000000  000e8a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002180  00000000  00000000  000e9ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000276cb  00000000  00000000  000ebe21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00028a58  00000000  00000000  001134ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097aee  00000000  00000000  0013bf44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004568  00000000  00000000  001d3a34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 2a 00 20 5d 9b 00 00 59 9b 00 00 59 9b 00 00     H*. ]...Y...Y...
	...
      2c:	59 9b 00 00 00 00 00 00 00 00 00 00 59 9b 00 00     Y...........Y...
      3c:	59 9b 00 00 59 9b 00 00 59 9b 00 00 59 9b 00 00     Y...Y...Y...Y...
      4c:	59 9b 00 00 45 5c 00 00 59 9b 00 00 59 9b 00 00     Y...E\..Y...Y...
      5c:	59 9b 00 00 59 9b 00 00 79 5b 00 00 89 5b 00 00     Y...Y...y[...[..
      6c:	99 5b 00 00 a9 5b 00 00 b9 5b 00 00 c9 5b 00 00     .[...[...[...[..
      7c:	99 49 00 00 a9 49 00 00 b9 49 00 00 59 9b 00 00     .I...I...I..Y...
      8c:	59 9b 00 00 59 9b 00 00 00 00 00 00 00 00 00 00     Y...Y...........
      9c:	55 28 00 00 59 9b 00 00 59 9b 00 00 59 9b 00 00     U(..Y...Y...Y...
      ac:	59 9b 00 00 00 00 00 00                             Y.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00012e38 	.word	0x00012e38

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00012e38 	.word	0x00012e38
     10c:	00012e38 	.word	0x00012e38
     110:	00000000 	.word	0x00000000

00000114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b082      	sub	sp, #8
     118:	0005      	movs	r5, r0
     11a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     11c:	2200      	movs	r2, #0
     11e:	466b      	mov	r3, sp
     120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <usart_serial_getchar+0x28>)
     124:	466b      	mov	r3, sp
     126:	1d99      	adds	r1, r3, #6
     128:	0028      	movs	r0, r5
     12a:	47a0      	blx	r4
     12c:	2800      	cmp	r0, #0
     12e:	d1f9      	bne.n	124 <usart_serial_getchar+0x10>

	*c = temp;
     130:	466b      	mov	r3, sp
     132:	3306      	adds	r3, #6
     134:	881b      	ldrh	r3, [r3, #0]
     136:	7033      	strb	r3, [r6, #0]
}
     138:	b002      	add	sp, #8
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00004d39 	.word	0x00004d39

00000140 <usart_serial_putchar>:
{
     140:	b570      	push	{r4, r5, r6, lr}
     142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     144:	b28c      	uxth	r4, r1
     146:	4e03      	ldr	r6, [pc, #12]	; (154 <usart_serial_putchar+0x14>)
     148:	0021      	movs	r1, r4
     14a:	0028      	movs	r0, r5
     14c:	47b0      	blx	r6
     14e:	2800      	cmp	r0, #0
     150:	d1fa      	bne.n	148 <usart_serial_putchar+0x8>
}
     152:	bd70      	pop	{r4, r5, r6, pc}
     154:	00004d0d 	.word	0x00004d0d

00000158 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     15c:	2380      	movs	r3, #128	; 0x80
     15e:	05db      	lsls	r3, r3, #23
     160:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     162:	2300      	movs	r3, #0
     164:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     166:	22ff      	movs	r2, #255	; 0xff
     168:	4669      	mov	r1, sp
     16a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     16c:	2200      	movs	r2, #0
     16e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     170:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     172:	2401      	movs	r4, #1
     174:	2124      	movs	r1, #36	; 0x24
     176:	4668      	mov	r0, sp
     178:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     17a:	3101      	adds	r1, #1
     17c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     17e:	3101      	adds	r1, #1
     180:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     182:	3101      	adds	r1, #1
     184:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     186:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     188:	3105      	adds	r1, #5
     18a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     18c:	3101      	adds	r1, #1
     18e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     190:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     192:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     194:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     196:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     198:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     19a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     19c:	2313      	movs	r3, #19
     19e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     1a0:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200;
     1a2:	23e1      	movs	r3, #225	; 0xe1
     1a4:	025b      	lsls	r3, r3, #9
     1a6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     1a8:	23c4      	movs	r3, #196	; 0xc4
     1aa:	039b      	lsls	r3, r3, #14
     1ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
     1ae:	2301      	movs	r3, #1
     1b0:	425b      	negs	r3, r3
     1b2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
     1b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     1b6:	4b17      	ldr	r3, [pc, #92]	; (214 <configure_usart+0xbc>)
     1b8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
     1ba:	4b17      	ldr	r3, [pc, #92]	; (218 <configure_usart+0xc0>)
     1bc:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     1be:	4d17      	ldr	r5, [pc, #92]	; (21c <configure_usart+0xc4>)
     1c0:	4b17      	ldr	r3, [pc, #92]	; (220 <configure_usart+0xc8>)
     1c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     1c4:	4a17      	ldr	r2, [pc, #92]	; (224 <configure_usart+0xcc>)
     1c6:	4b18      	ldr	r3, [pc, #96]	; (228 <configure_usart+0xd0>)
     1c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     1ca:	4a18      	ldr	r2, [pc, #96]	; (22c <configure_usart+0xd4>)
     1cc:	4b18      	ldr	r3, [pc, #96]	; (230 <configure_usart+0xd8>)
     1ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     1d0:	466a      	mov	r2, sp
     1d2:	4918      	ldr	r1, [pc, #96]	; (234 <configure_usart+0xdc>)
     1d4:	0028      	movs	r0, r5
     1d6:	4b18      	ldr	r3, [pc, #96]	; (238 <configure_usart+0xe0>)
     1d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     1da:	4f18      	ldr	r7, [pc, #96]	; (23c <configure_usart+0xe4>)
     1dc:	683b      	ldr	r3, [r7, #0]
     1de:	6898      	ldr	r0, [r3, #8]
     1e0:	2100      	movs	r1, #0
     1e2:	4e17      	ldr	r6, [pc, #92]	; (240 <configure_usart+0xe8>)
     1e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
     1e6:	683b      	ldr	r3, [r7, #0]
     1e8:	6858      	ldr	r0, [r3, #4]
     1ea:	2100      	movs	r1, #0
     1ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     1ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1f0:	0030      	movs	r0, r6
     1f2:	4b14      	ldr	r3, [pc, #80]	; (244 <configure_usart+0xec>)
     1f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f6:	231f      	movs	r3, #31
     1f8:	4018      	ands	r0, r3
     1fa:	4084      	lsls	r4, r0
     1fc:	4b12      	ldr	r3, [pc, #72]	; (248 <configure_usart+0xf0>)
     1fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     204:	2b00      	cmp	r3, #0
     206:	d1fc      	bne.n	202 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     208:	6833      	ldr	r3, [r6, #0]
     20a:	2202      	movs	r2, #2
     20c:	4313      	orrs	r3, r2
     20e:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);

	usart_enable(&usart_instance);
}
     210:	b011      	add	sp, #68	; 0x44
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
     214:	002a0003 	.word	0x002a0003
     218:	002b0003 	.word	0x002b0003
     21c:	200009ec 	.word	0x200009ec
     220:	20000894 	.word	0x20000894
     224:	00000141 	.word	0x00000141
     228:	20000890 	.word	0x20000890
     22c:	00000115 	.word	0x00000115
     230:	2000088c 	.word	0x2000088c
     234:	42001800 	.word	0x42001800
     238:	000049c9 	.word	0x000049c9
     23c:	2000000c 	.word	0x2000000c
     240:	0000bc91 	.word	0x0000bc91
     244:	00005b49 	.word	0x00005b49
     248:	e000e100 	.word	0xe000e100

0000024c <configure_flash>:
#endif
#ifdef AT25DFX_H
void configure_flash()
{
     24c:	b570      	push	{r4, r5, r6, lr}
     24e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     250:	ac02      	add	r4, sp, #8
     252:	2501      	movs	r5, #1
     254:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     256:	2300      	movs	r3, #0
     258:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     25a:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     25c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     25e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     260:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     262:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     264:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     266:	2224      	movs	r2, #36	; 0x24
     268:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     26a:	3a18      	subs	r2, #24
     26c:	2100      	movs	r1, #0
     26e:	a808      	add	r0, sp, #32
     270:	4b23      	ldr	r3, [pc, #140]	; (300 <configure_flash+0xb4>)
     272:	4798      	blx	r3
	struct at25dfx_chip_config at_chip_config;
	struct spi_config at25dfx_spi_config;

	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
     274:	4b23      	ldr	r3, [pc, #140]	; (304 <configure_flash+0xb8>)
     276:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
     278:	2380      	movs	r3, #128	; 0x80
     27a:	025b      	lsls	r3, r3, #9
     27c:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
     27e:	4b22      	ldr	r3, [pc, #136]	; (308 <configure_flash+0xbc>)
     280:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
     282:	2301      	movs	r3, #1
     284:	425b      	negs	r3, r3
     286:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
     288:	4b20      	ldr	r3, [pc, #128]	; (30c <configure_flash+0xc0>)
     28a:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
     28c:	4b20      	ldr	r3, [pc, #128]	; (310 <configure_flash+0xc4>)
     28e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
     290:	4e20      	ldr	r6, [pc, #128]	; (314 <configure_flash+0xc8>)
     292:	0022      	movs	r2, r4
     294:	4920      	ldr	r1, [pc, #128]	; (318 <configure_flash+0xcc>)
     296:	0030      	movs	r0, r6
     298:	4b20      	ldr	r3, [pc, #128]	; (31c <configure_flash+0xd0>)
     29a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     29c:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     29e:	0020      	movs	r0, r4
     2a0:	4b1f      	ldr	r3, [pc, #124]	; (320 <configure_flash+0xd4>)
     2a2:	4798      	blx	r3
     2a4:	231f      	movs	r3, #31
     2a6:	4018      	ands	r0, r3
     2a8:	4085      	lsls	r5, r0
     2aa:	4b1e      	ldr	r3, [pc, #120]	; (324 <configure_flash+0xd8>)
     2ac:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     2ae:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     2b0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     2b2:	2b00      	cmp	r3, #0
     2b4:	d1fc      	bne.n	2b0 <configure_flash+0x64>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2b6:	6823      	ldr	r3, [r4, #0]
     2b8:	2202      	movs	r2, #2
     2ba:	4313      	orrs	r3, r2
     2bc:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
     2be:	4c1a      	ldr	r4, [pc, #104]	; (328 <configure_flash+0xdc>)
     2c0:	2304      	movs	r3, #4
     2c2:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
     2c4:	3303      	adds	r3, #3
     2c6:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
     2c8:	4b12      	ldr	r3, [pc, #72]	; (314 <configure_flash+0xc8>)
     2ca:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2301      	movs	r3, #1
     2d0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     2d2:	2200      	movs	r2, #0
     2d4:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
     2d6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
     2d8:	2007      	movs	r0, #7
     2da:	4b14      	ldr	r3, [pc, #80]	; (32c <configure_flash+0xe0>)
     2dc:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
     2de:	7962      	ldrb	r2, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2e0:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2e4:	2900      	cmp	r1, #0
     2e6:	d104      	bne.n	2f2 <configure_flash+0xa6>
		return &(ports[port_index]->Group[group_index]);
     2e8:	0953      	lsrs	r3, r2, #5
     2ea:	01db      	lsls	r3, r3, #7
     2ec:	4910      	ldr	r1, [pc, #64]	; (330 <configure_flash+0xe4>)
     2ee:	468c      	mov	ip, r1
     2f0:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2f2:	211f      	movs	r1, #31
     2f4:	4011      	ands	r1, r2
     2f6:	2201      	movs	r2, #1
     2f8:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2fa:	619a      	str	r2, [r3, #24]
	spi_enable(&at25dfx_spi);

	at_chip_config.type = AT25DFX_MEM_TYPE;
	at_chip_config.cs_pin = AT25DFX_CS;
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at_chip_config);
}
     2fc:	b010      	add	sp, #64	; 0x40
     2fe:	bd70      	pop	{r4, r5, r6, pc}
     300:	0000b0fb 	.word	0x0000b0fb
     304:	000f4240 	.word	0x000f4240
     308:	00100002 	.word	0x00100002
     30c:	00120002 	.word	0x00120002
     310:	00130002 	.word	0x00130002
     314:	20000700 	.word	0x20000700
     318:	42000c00 	.word	0x42000c00
     31c:	00004f3d 	.word	0x00004f3d
     320:	00005b49 	.word	0x00005b49
     324:	e000e100 	.word	0xe000e100
     328:	2000060c 	.word	0x2000060c
     32c:	00009325 	.word	0x00009325
     330:	41004400 	.word	0x41004400

00000334 <configure_nvm>:
#endif

#ifdef NVM_H_INCLUDED
void configure_nvm()
{
     334:	b500      	push	{lr}
     336:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
     338:	2200      	movs	r2, #0
     33a:	466b      	mov	r3, sp
     33c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
     33e:	4b07      	ldr	r3, [pc, #28]	; (35c <configure_nvm+0x28>)
     340:	685b      	ldr	r3, [r3, #4]
     342:	06db      	lsls	r3, r3, #27
     344:	0f1b      	lsrs	r3, r3, #28
     346:	4669      	mov	r1, sp
     348:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
     34a:	70ca      	strb	r2, [r1, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
     34c:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;

	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
     34e:	704a      	strb	r2, [r1, #1]

	nvm_set_config(&config_nvm);
     350:	4668      	mov	r0, sp
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <configure_nvm+0x2c>)
     354:	4798      	blx	r3
}
     356:	b003      	add	sp, #12
     358:	bd00      	pop	{pc}
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	41004000 	.word	0x41004000
     360:	00009035 	.word	0x00009035

00000364 <configure_i2c_hdc>:
 **/

#include "hdc_1080.h"

void configure_i2c_hdc()
{
     364:	b510      	push	{r4, lr}
     366:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     368:	aa01      	add	r2, sp, #4
     36a:	2364      	movs	r3, #100	; 0x64
     36c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     36e:	4b1f      	ldr	r3, [pc, #124]	; (3ec <configure_i2c_hdc+0x88>)
     370:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     372:	2300      	movs	r3, #0
     374:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     376:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     378:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     37a:	2180      	movs	r1, #128	; 0x80
     37c:	0389      	lsls	r1, r1, #14
     37e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
     380:	2101      	movs	r1, #1
     382:	4249      	negs	r1, r1
     384:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
     386:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     388:	3125      	adds	r1, #37	; 0x25
     38a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     38c:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     38e:	3108      	adds	r1, #8
     390:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     392:	3101      	adds	r1, #1
     394:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     396:	3101      	adds	r1, #1
     398:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     39a:	33d7      	adds	r3, #215	; 0xd7
     39c:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     39e:	4b14      	ldr	r3, [pc, #80]	; (3f0 <configure_i2c_hdc+0x8c>)
     3a0:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     3a2:	4b14      	ldr	r3, [pc, #80]	; (3f4 <configure_i2c_hdc+0x90>)
     3a4:	6213      	str	r3, [r2, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	enum status_code init_status = i2c_master_init(&i2c_hdc, SERCOM3, &config_i2c_master);
     3a6:	4914      	ldr	r1, [pc, #80]	; (3f8 <configure_i2c_hdc+0x94>)
     3a8:	4814      	ldr	r0, [pc, #80]	; (3fc <configure_i2c_hdc+0x98>)
     3aa:	4b15      	ldr	r3, [pc, #84]	; (400 <configure_i2c_hdc+0x9c>)
     3ac:	4798      	blx	r3
	if (STATUS_OK != init_status) {
     3ae:	2800      	cmp	r0, #0
     3b0:	d116      	bne.n	3e0 <configure_i2c_hdc+0x7c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3b2:	4b12      	ldr	r3, [pc, #72]	; (3fc <configure_i2c_hdc+0x98>)
     3b4:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     3b6:	2107      	movs	r1, #7
     3b8:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
     3ba:	4219      	tst	r1, r3
     3bc:	d1fc      	bne.n	3b8 <configure_i2c_hdc+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     3be:	6813      	ldr	r3, [r2, #0]
     3c0:	2102      	movs	r1, #2
     3c2:	430b      	orrs	r3, r1
     3c4:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     3c6:	4b0d      	ldr	r3, [pc, #52]	; (3fc <configure_i2c_hdc+0x98>)
     3c8:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
     3ca:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     3cc:	2010      	movs	r0, #16
     3ce:	8b51      	ldrh	r1, [r2, #26]
     3d0:	4201      	tst	r1, r0
     3d2:	d108      	bne.n	3e6 <configure_i2c_hdc+0x82>
		timeout_counter++;
     3d4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     3d6:	42a3      	cmp	r3, r4
     3d8:	d3f9      	bcc.n	3ce <configure_i2c_hdc+0x6a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     3da:	2310      	movs	r3, #16
     3dc:	8353      	strh	r3, [r2, #26]
     3de:	e002      	b.n	3e6 <configure_i2c_hdc+0x82>
		printf("failed to initialize HDC1080 driver.\r\n");
     3e0:	4808      	ldr	r0, [pc, #32]	; (404 <configure_i2c_hdc+0xa0>)
     3e2:	4b09      	ldr	r3, [pc, #36]	; (408 <configure_i2c_hdc+0xa4>)
     3e4:	4798      	blx	r3
		return;
	}
	i2c_master_enable(&i2c_hdc);
}
     3e6:	b00e      	add	sp, #56	; 0x38
     3e8:	bd10      	pop	{r4, pc}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	00000d48 	.word	0x00000d48
     3f0:	00160002 	.word	0x00160002
     3f4:	00170002 	.word	0x00170002
     3f8:	42001400 	.word	0x42001400
     3fc:	200002c0 	.word	0x200002c0
     400:	00002a31 	.word	0x00002a31
     404:	000105f4 	.word	0x000105f4
     408:	0000bc59 	.word	0x0000bc59

0000040c <set_resolution>:
//NOTE: bit[10] = 1 for 11 bit temp
//NOTE: bit[9:8] = 00 for 14 bit humidity
//NOTE: bit[9:8] = 01 for 11 bit humidity
//NOTE: bit[9:8] = 10 for 8 bit humidity
void set_resolution(hdc_resolution temp_resolution, hdc_resolution humidity_resolution)
{
     40c:	b570      	push	{r4, r5, r6, lr}
     40e:	b084      	sub	sp, #16
	int8_t data_packet[3];

	data_packet[0] = HDC_SET_RES;
     410:	2202      	movs	r2, #2
     412:	ab03      	add	r3, sp, #12
     414:	701a      	strb	r2, [r3, #0]
	uint8_t write_byte = 0;
	switch (temp_resolution) {
     416:	2801      	cmp	r0, #1
     418:	d003      	beq.n	422 <set_resolution+0x16>
     41a:	2802      	cmp	r0, #2
     41c:	d027      	beq.n	46e <set_resolution+0x62>
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
	if (STATUS_OK != i2c_status)
		printf("error trying to set resolution!\r\n");

	return;
}
     41e:	b004      	add	sp, #16
     420:	bd70      	pop	{r4, r5, r6, pc}
		write_byte = (1 << 2);
     422:	2204      	movs	r2, #4
	switch (humidity_resolution) {
     424:	2901      	cmp	r1, #1
     426:	d024      	beq.n	472 <set_resolution+0x66>
     428:	2900      	cmp	r1, #0
     42a:	d025      	beq.n	478 <set_resolution+0x6c>
     42c:	2902      	cmp	r1, #2
     42e:	d1f6      	bne.n	41e <set_resolution+0x12>
	write_byte |= (1 << 4);
     430:	2310      	movs	r3, #16
     432:	431a      	orrs	r2, r3
	data_packet[1] = write_byte;
     434:	b252      	sxtb	r2, r2
     436:	ad03      	add	r5, sp, #12
     438:	706a      	strb	r2, [r5, #1]
	data_packet[2] = 0x00;
     43a:	2400      	movs	r4, #0
     43c:	70ac      	strb	r4, [r5, #2]
	printf("data packet: 0x%02x 0x%02x 0x%02x\r\n", data_packet[0], data_packet[1], data_packet[2]);
     43e:	2300      	movs	r3, #0
     440:	2102      	movs	r1, #2
     442:	480f      	ldr	r0, [pc, #60]	; (480 <set_resolution+0x74>)
     444:	4e0f      	ldr	r6, [pc, #60]	; (484 <set_resolution+0x78>)
     446:	47b0      	blx	r6
	struct i2c_master_packet packet = {
     448:	2340      	movs	r3, #64	; 0x40
     44a:	466a      	mov	r2, sp
     44c:	8013      	strh	r3, [r2, #0]
     44e:	3b3d      	subs	r3, #61	; 0x3d
     450:	8053      	strh	r3, [r2, #2]
     452:	9501      	str	r5, [sp, #4]
     454:	7214      	strb	r4, [r2, #8]
     456:	7254      	strb	r4, [r2, #9]
     458:	7294      	strb	r4, [r2, #10]
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
     45a:	4669      	mov	r1, sp
     45c:	480a      	ldr	r0, [pc, #40]	; (488 <set_resolution+0x7c>)
     45e:	4b0b      	ldr	r3, [pc, #44]	; (48c <set_resolution+0x80>)
     460:	4798      	blx	r3
	if (STATUS_OK != i2c_status)
     462:	2800      	cmp	r0, #0
     464:	d0db      	beq.n	41e <set_resolution+0x12>
		printf("error trying to set resolution!\r\n");
     466:	480a      	ldr	r0, [pc, #40]	; (490 <set_resolution+0x84>)
     468:	4b0a      	ldr	r3, [pc, #40]	; (494 <set_resolution+0x88>)
     46a:	4798      	blx	r3
     46c:	e7d7      	b.n	41e <set_resolution+0x12>
		write_byte = 0;
     46e:	2200      	movs	r2, #0
     470:	e7d8      	b.n	424 <set_resolution+0x18>
		write_byte |= 1;
     472:	2301      	movs	r3, #1
     474:	431a      	orrs	r2, r3
		break;
     476:	e7db      	b.n	430 <set_resolution+0x24>
		write_byte |= 2;
     478:	2302      	movs	r3, #2
     47a:	431a      	orrs	r2, r3
		break;
     47c:	e7d8      	b.n	430 <set_resolution+0x24>
     47e:	46c0      	nop			; (mov r8, r8)
     480:	0001068c 	.word	0x0001068c
     484:	0000bb3d 	.word	0x0000bb3d
     488:	200002c0 	.word	0x200002c0
     48c:	0000301d 	.word	0x0000301d
     490:	000106b0 	.word	0x000106b0
     494:	0000bc59 	.word	0x0000bc59

00000498 <request_data>:

uint16_t request_data(hdc_request command)
{
     498:	b530      	push	{r4, r5, lr}
     49a:	b087      	sub	sp, #28
     49c:	0004      	movs	r4, r0
	uint8_t received_data[2];
	uint8_t write_buffer = command;
     49e:	2313      	movs	r3, #19
     4a0:	446b      	add	r3, sp
     4a2:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
     4a4:	a901      	add	r1, sp, #4
     4a6:	2240      	movs	r2, #64	; 0x40
     4a8:	800a      	strh	r2, [r1, #0]
     4aa:	3a3f      	subs	r2, #63	; 0x3f
     4ac:	804a      	strh	r2, [r1, #2]
     4ae:	604b      	str	r3, [r1, #4]
     4b0:	2300      	movs	r3, #0
     4b2:	720b      	strb	r3, [r1, #8]
     4b4:	724b      	strb	r3, [r1, #9]
     4b6:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &packet);
     4b8:	4812      	ldr	r0, [pc, #72]	; (504 <request_data+0x6c>)
     4ba:	4b13      	ldr	r3, [pc, #76]	; (508 <request_data+0x70>)
     4bc:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
     4be:	2800      	cmp	r0, #0
     4c0:	d006      	beq.n	4d0 <request_data+0x38>
		printf("failed to send register potato request for command 0x%02x!\r\n", command);
     4c2:	0021      	movs	r1, r4
     4c4:	4811      	ldr	r0, [pc, #68]	; (50c <request_data+0x74>)
     4c6:	4b12      	ldr	r3, [pc, #72]	; (510 <request_data+0x78>)
     4c8:	4798      	blx	r3
		return -1;
     4ca:	4812      	ldr	r0, [pc, #72]	; (514 <request_data+0x7c>)
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
		return -1;
	}
	return (received_data[0] << 8) | received_data[1];
}
     4cc:	b007      	add	sp, #28
     4ce:	bd30      	pop	{r4, r5, pc}
	packet.data = received_data;
     4d0:	ad01      	add	r5, sp, #4
     4d2:	ab05      	add	r3, sp, #20
     4d4:	9302      	str	r3, [sp, #8]
	packet.data_length = 2;
     4d6:	2302      	movs	r3, #2
     4d8:	806b      	strh	r3, [r5, #2]
	delay_ms(35);
     4da:	2023      	movs	r0, #35	; 0x23
     4dc:	4b0e      	ldr	r3, [pc, #56]	; (518 <request_data+0x80>)
     4de:	4798      	blx	r3
	i2c_code = i2c_master_read_packet_wait(&i2c_hdc, &packet);
     4e0:	0029      	movs	r1, r5
     4e2:	4808      	ldr	r0, [pc, #32]	; (504 <request_data+0x6c>)
     4e4:	4b0d      	ldr	r3, [pc, #52]	; (51c <request_data+0x84>)
     4e6:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
     4e8:	2800      	cmp	r0, #0
     4ea:	d105      	bne.n	4f8 <request_data+0x60>
	return (received_data[0] << 8) | received_data[1];
     4ec:	aa05      	add	r2, sp, #20
     4ee:	7813      	ldrb	r3, [r2, #0]
     4f0:	021b      	lsls	r3, r3, #8
     4f2:	7850      	ldrb	r0, [r2, #1]
     4f4:	4318      	orrs	r0, r3
     4f6:	e7e9      	b.n	4cc <request_data+0x34>
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
     4f8:	0021      	movs	r1, r4
     4fa:	4809      	ldr	r0, [pc, #36]	; (520 <request_data+0x88>)
     4fc:	4b04      	ldr	r3, [pc, #16]	; (510 <request_data+0x78>)
     4fe:	4798      	blx	r3
		return -1;
     500:	4804      	ldr	r0, [pc, #16]	; (514 <request_data+0x7c>)
     502:	e7e3      	b.n	4cc <request_data+0x34>
     504:	200002c0 	.word	0x200002c0
     508:	00003031 	.word	0x00003031
     50c:	0001061c 	.word	0x0001061c
     510:	0000bb3d 	.word	0x0000bb3d
     514:	0000ffff 	.word	0x0000ffff
     518:	00005d05 	.word	0x00005d05
     51c:	00003009 	.word	0x00003009
     520:	0001065c 	.word	0x0001065c

00000524 <get_humidity>:
uint16_t get_hdc_device_id()
{
	return request_data(HDC_DEVICE_ID);
}
double get_humidity()
{
     524:	b510      	push	{r4, lr}
	double raw_data = request_data(HDC_HUMIDITY);
     526:	2001      	movs	r0, #1
     528:	4b05      	ldr	r3, [pc, #20]	; (540 <get_humidity+0x1c>)
     52a:	4798      	blx	r3
     52c:	4b05      	ldr	r3, [pc, #20]	; (544 <get_humidity+0x20>)
     52e:	4798      	blx	r3

	raw_data /= 65536.0;
     530:	4c05      	ldr	r4, [pc, #20]	; (548 <get_humidity+0x24>)
     532:	2200      	movs	r2, #0
     534:	4b05      	ldr	r3, [pc, #20]	; (54c <get_humidity+0x28>)
     536:	47a0      	blx	r4
	raw_data *= 100.0;
     538:	2200      	movs	r2, #0
     53a:	4b05      	ldr	r3, [pc, #20]	; (550 <get_humidity+0x2c>)
     53c:	47a0      	blx	r4
	return raw_data;
}
     53e:	bd10      	pop	{r4, pc}
     540:	00000499 	.word	0x00000499
     544:	000104a5 	.word	0x000104a5
     548:	0000f84d 	.word	0x0000f84d
     54c:	3ef00000 	.word	0x3ef00000
     550:	40590000 	.word	0x40590000

00000554 <get_temp>:

double get_temp()
{
     554:	b510      	push	{r4, lr}
	double raw_data = request_data(HDC_TEMP);
     556:	2000      	movs	r0, #0
     558:	4b07      	ldr	r3, [pc, #28]	; (578 <get_temp+0x24>)
     55a:	4798      	blx	r3
     55c:	4b07      	ldr	r3, [pc, #28]	; (57c <get_temp+0x28>)
     55e:	4798      	blx	r3

	raw_data /= 65536.0;
     560:	4c07      	ldr	r4, [pc, #28]	; (580 <get_temp+0x2c>)
     562:	2200      	movs	r2, #0
     564:	4b07      	ldr	r3, [pc, #28]	; (584 <get_temp+0x30>)
     566:	47a0      	blx	r4
	raw_data *= 165.0;
     568:	2200      	movs	r2, #0
     56a:	4b07      	ldr	r3, [pc, #28]	; (588 <get_temp+0x34>)
     56c:	47a0      	blx	r4
	raw_data -= 40.0;
     56e:	2200      	movs	r2, #0
     570:	4b06      	ldr	r3, [pc, #24]	; (58c <get_temp+0x38>)
     572:	4c07      	ldr	r4, [pc, #28]	; (590 <get_temp+0x3c>)
     574:	47a0      	blx	r4
	return raw_data;
}
     576:	bd10      	pop	{r4, pc}
     578:	00000499 	.word	0x00000499
     57c:	000104a5 	.word	0x000104a5
     580:	0000f84d 	.word	0x0000f84d
     584:	3ef00000 	.word	0x3ef00000
     588:	4064a000 	.word	0x4064a000
     58c:	40440000 	.word	0x40440000
     590:	0000fd4d 	.word	0x0000fd4d

00000594 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
     594:	b5f0      	push	{r4, r5, r6, r7, lr}
     596:	46ce      	mov	lr, r9
     598:	4647      	mov	r7, r8
     59a:	b580      	push	{r7, lr}
     59c:	b087      	sub	sp, #28
     59e:	0004      	movs	r4, r0
     5a0:	0015      	movs	r5, r2
	switch (type) {
     5a2:	2901      	cmp	r1, #1
     5a4:	d037      	beq.n	616 <mqtt_callback+0x82>
     5a6:	dd14      	ble.n	5d2 <mqtt_callback+0x3e>
     5a8:	2905      	cmp	r1, #5
     5aa:	d060      	beq.n	66e <mqtt_callback+0xda>
     5ac:	2906      	cmp	r1, #6
     5ae:	d161      	bne.n	674 <mqtt_callback+0xe0>
		}

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
     5b0:	6813      	ldr	r3, [r2, #0]
     5b2:	2b00      	cmp	r3, #0
     5b4:	d05e      	beq.n	674 <mqtt_callback+0xe0>
     5b6:	6893      	ldr	r3, [r2, #8]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d05b      	beq.n	674 <mqtt_callback+0xe0>
			//printf("data->recv_publish.topic: %s\r\n", data->recv_publish.topic);
			//printf("topic name: %s\r\n", registered_request_topics[0].topic_name);
			//printf("data->recv_publish.topic_size: %d\r\n", data->recv_publish.topic_size);
			//printf("data size: %d\r\n", strlen(data->recv_publish.topic));
			//printf("topic size: %d\r\n", strlen(registered_request_topics[0].topic_name));
			for (int i = 0; i < num_registered_request_topics; i++)
     5bc:	4b30      	ldr	r3, [pc, #192]	; (680 <mqtt_callback+0xec>)
     5be:	781b      	ldrb	r3, [r3, #0]
     5c0:	2b00      	cmp	r3, #0
     5c2:	dd57      	ble.n	674 <mqtt_callback+0xe0>
     5c4:	4c2f      	ldr	r4, [pc, #188]	; (684 <mqtt_callback+0xf0>)
     5c6:	2600      	movs	r6, #0
				if (0 == strncmp(data->recv_publish.topic, registered_request_topics[i].topic_name, data->recv_publish.topic_size)) {
     5c8:	4b2f      	ldr	r3, [pc, #188]	; (688 <mqtt_callback+0xf4>)
     5ca:	4699      	mov	r9, r3
					printf("MQTT requested: %s\r\n", data->recv_publish.topic);
     5cc:	4b2f      	ldr	r3, [pc, #188]	; (68c <mqtt_callback+0xf8>)
     5ce:	4698      	mov	r8, r3
     5d0:	e034      	b.n	63c <mqtt_callback+0xa8>
	switch (type) {
     5d2:	2900      	cmp	r1, #0
     5d4:	d14e      	bne.n	674 <mqtt_callback+0xe0>
		if (data->sock_connected.result >= 0) {
     5d6:	6813      	ldr	r3, [r2, #0]
     5d8:	2b00      	cmp	r3, #0
     5da:	db10      	blt.n	5fe <mqtt_callback+0x6a>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, MQTT_USER, NULL, NULL, 0, 0, 0);
     5dc:	2300      	movs	r3, #0
     5de:	9305      	str	r3, [sp, #20]
     5e0:	9304      	str	r3, [sp, #16]
     5e2:	9303      	str	r3, [sp, #12]
     5e4:	9302      	str	r3, [sp, #8]
     5e6:	9301      	str	r3, [sp, #4]
     5e8:	4b29      	ldr	r3, [pc, #164]	; (690 <mqtt_callback+0xfc>)
     5ea:	9300      	str	r3, [sp, #0]
     5ec:	2300      	movs	r3, #0
     5ee:	2200      	movs	r2, #0
     5f0:	2101      	movs	r1, #1
     5f2:	4c28      	ldr	r4, [pc, #160]	; (694 <mqtt_callback+0x100>)
     5f4:	47a0      	blx	r4
			mqtt_connected = 1;
     5f6:	2201      	movs	r2, #1
     5f8:	4b27      	ldr	r3, [pc, #156]	; (698 <mqtt_callback+0x104>)
     5fa:	601a      	str	r2, [r3, #0]
     5fc:	e03a      	b.n	674 <mqtt_callback+0xe0>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", curr_mqtt_config->broker_server);
     5fe:	4d27      	ldr	r5, [pc, #156]	; (69c <mqtt_callback+0x108>)
     600:	682b      	ldr	r3, [r5, #0]
     602:	6919      	ldr	r1, [r3, #16]
     604:	4826      	ldr	r0, [pc, #152]	; (6a0 <mqtt_callback+0x10c>)
     606:	4b21      	ldr	r3, [pc, #132]	; (68c <mqtt_callback+0xf8>)
     608:	4798      	blx	r3
			mqtt_connect(module_inst, curr_mqtt_config->broker_server); /* Retry that. */
     60a:	682b      	ldr	r3, [r5, #0]
     60c:	6919      	ldr	r1, [r3, #16]
     60e:	0020      	movs	r0, r4
     610:	4b24      	ldr	r3, [pc, #144]	; (6a4 <mqtt_callback+0x110>)
     612:	4798      	blx	r3
     614:	e02e      	b.n	674 <mqtt_callback+0xe0>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
     616:	7811      	ldrb	r1, [r2, #0]
     618:	2900      	cmp	r1, #0
     61a:	d105      	bne.n	628 <mqtt_callback+0x94>
			module_inst->busy = 0;
     61c:	2243      	movs	r2, #67	; 0x43
     61e:	5c83      	ldrb	r3, [r0, r2]
     620:	3108      	adds	r1, #8
     622:	438b      	bics	r3, r1
     624:	5483      	strb	r3, [r0, r2]
     626:	e025      	b.n	674 <mqtt_callback+0xe0>
			printf("MQTT broker declined your access! error code %d\r\n", data->connected.result);
     628:	481f      	ldr	r0, [pc, #124]	; (6a8 <mqtt_callback+0x114>)
     62a:	4b18      	ldr	r3, [pc, #96]	; (68c <mqtt_callback+0xf8>)
     62c:	4798      	blx	r3
     62e:	e021      	b.n	674 <mqtt_callback+0xe0>
			for (int i = 0; i < num_registered_request_topics; i++)
     630:	3601      	adds	r6, #1
     632:	3444      	adds	r4, #68	; 0x44
     634:	4b12      	ldr	r3, [pc, #72]	; (680 <mqtt_callback+0xec>)
     636:	781b      	ldrb	r3, [r3, #0]
     638:	42b3      	cmp	r3, r6
     63a:	dd1b      	ble.n	674 <mqtt_callback+0xe0>
				if (0 == strncmp(data->recv_publish.topic, registered_request_topics[i].topic_name, data->recv_publish.topic_size)) {
     63c:	682f      	ldr	r7, [r5, #0]
     63e:	686a      	ldr	r2, [r5, #4]
     640:	0021      	movs	r1, r4
     642:	0038      	movs	r0, r7
     644:	47c8      	blx	r9
     646:	2800      	cmp	r0, #0
     648:	d1f2      	bne.n	630 <mqtt_callback+0x9c>
					printf("MQTT requested: %s\r\n", data->recv_publish.topic);
     64a:	0039      	movs	r1, r7
     64c:	4817      	ldr	r0, [pc, #92]	; (6ac <mqtt_callback+0x118>)
     64e:	47c0      	blx	r8
					printf("options: %s\r\n", data->recv_publish.msg);
     650:	68a9      	ldr	r1, [r5, #8]
     652:	4817      	ldr	r0, [pc, #92]	; (6b0 <mqtt_callback+0x11c>)
     654:	47c0      	blx	r8
					printf("registered_request_topic: %s\r\n", registered_request_topics[0].topic_name);
     656:	490b      	ldr	r1, [pc, #44]	; (684 <mqtt_callback+0xf0>)
     658:	4816      	ldr	r0, [pc, #88]	; (6b4 <mqtt_callback+0x120>)
     65a:	47c0      	blx	r8
					printf("registered_function: %d\r\n", registered_request_topics[i].function);
     65c:	6c21      	ldr	r1, [r4, #64]	; 0x40
     65e:	4816      	ldr	r0, [pc, #88]	; (6b8 <mqtt_callback+0x124>)
     660:	47c0      	blx	r8
					registered_request_topics[i].function(atoi(data->recv_publish.msg));
     662:	6c27      	ldr	r7, [r4, #64]	; 0x40
     664:	68a8      	ldr	r0, [r5, #8]
     666:	4b15      	ldr	r3, [pc, #84]	; (6bc <mqtt_callback+0x128>)
     668:	4798      	blx	r3
     66a:	47b8      	blx	r7
     66c:	e7e0      	b.n	630 <mqtt_callback+0x9c>
		}
		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer */
		printf("MQTT disconnected\r\n");
     66e:	4814      	ldr	r0, [pc, #80]	; (6c0 <mqtt_callback+0x12c>)
     670:	4b14      	ldr	r3, [pc, #80]	; (6c4 <mqtt_callback+0x130>)
     672:	4798      	blx	r3
		break;
	}
}
     674:	b007      	add	sp, #28
     676:	bc0c      	pop	{r2, r3}
     678:	4690      	mov	r8, r2
     67a:	4699      	mov	r9, r3
     67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	200001fc 	.word	0x200001fc
     684:	200003ac 	.word	0x200003ac
     688:	0000bead 	.word	0x0000bead
     68c:	0000bb3d 	.word	0x0000bb3d
     690:	000128fc 	.word	0x000128fc
     694:	0000a511 	.word	0x0000a511
     698:	200001f8 	.word	0x200001f8
     69c:	20000350 	.word	0x20000350
     6a0:	00010774 	.word	0x00010774
     6a4:	0000a3fd 	.word	0x0000a3fd
     6a8:	000107ac 	.word	0x000107ac
     6ac:	000107e0 	.word	0x000107e0
     6b0:	000107f8 	.word	0x000107f8
     6b4:	00010808 	.word	0x00010808
     6b8:	00010828 	.word	0x00010828
     6bc:	0000b049 	.word	0x0000b049
     6c0:	00010844 	.word	0x00010844
     6c4:	0000bc59 	.word	0x0000bc59

000006c8 <socket_resolve_handler>:
{
     6c8:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
     6ca:	4b01      	ldr	r3, [pc, #4]	; (6d0 <socket_resolve_handler+0x8>)
     6cc:	4798      	blx	r3
}
     6ce:	bd10      	pop	{r4, pc}
     6d0:	0000a3a9 	.word	0x0000a3a9

000006d4 <socket_event_handler>:
{
     6d4:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
     6d6:	4b01      	ldr	r3, [pc, #4]	; (6dc <socket_event_handler+0x8>)
     6d8:	4798      	blx	r3
}
     6da:	bd10      	pop	{r4, pc}
     6dc:	0000af49 	.word	0x0000af49

000006e0 <wifi_callback>:
{
     6e0:	b530      	push	{r4, r5, lr}
     6e2:	b083      	sub	sp, #12
	switch (msg_type) {
     6e4:	282c      	cmp	r0, #44	; 0x2c
     6e6:	d003      	beq.n	6f0 <wifi_callback+0x10>
     6e8:	2832      	cmp	r0, #50	; 0x32
     6ea:	d022      	beq.n	732 <wifi_callback+0x52>
}
     6ec:	b003      	add	sp, #12
     6ee:	bd30      	pop	{r4, r5, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
     6f0:	780b      	ldrb	r3, [r1, #0]
     6f2:	2b01      	cmp	r3, #1
     6f4:	d017      	beq.n	726 <wifi_callback+0x46>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
     6f6:	2b00      	cmp	r3, #0
     6f8:	d1f8      	bne.n	6ec <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
     6fa:	4817      	ldr	r0, [pc, #92]	; (758 <wifi_callback+0x78>)
     6fc:	4b17      	ldr	r3, [pc, #92]	; (75c <wifi_callback+0x7c>)
     6fe:	4798      	blx	r3
			m2m_wifi_connect(curr_mqtt_config->ssid, strlen(curr_mqtt_config->ssid),
     700:	4b17      	ldr	r3, [pc, #92]	; (760 <wifi_callback+0x80>)
     702:	681c      	ldr	r4, [r3, #0]
     704:	6825      	ldr	r5, [r4, #0]
     706:	0028      	movs	r0, r5
     708:	4b16      	ldr	r3, [pc, #88]	; (764 <wifi_callback+0x84>)
     70a:	4798      	blx	r3
     70c:	68a3      	ldr	r3, [r4, #8]
     70e:	7922      	ldrb	r2, [r4, #4]
     710:	b2c1      	uxtb	r1, r0
     712:	20ff      	movs	r0, #255	; 0xff
     714:	9000      	str	r0, [sp, #0]
     716:	0028      	movs	r0, r5
     718:	4c13      	ldr	r4, [pc, #76]	; (768 <wifi_callback+0x88>)
     71a:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
     71c:	2101      	movs	r1, #1
     71e:	4813      	ldr	r0, [pc, #76]	; (76c <wifi_callback+0x8c>)
     720:	4b13      	ldr	r3, [pc, #76]	; (770 <wifi_callback+0x90>)
     722:	4798      	blx	r3
     724:	e7e2      	b.n	6ec <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
     726:	4813      	ldr	r0, [pc, #76]	; (774 <wifi_callback+0x94>)
     728:	4b0c      	ldr	r3, [pc, #48]	; (75c <wifi_callback+0x7c>)
     72a:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
     72c:	4b12      	ldr	r3, [pc, #72]	; (778 <wifi_callback+0x98>)
     72e:	4798      	blx	r3
     730:	e7dc      	b.n	6ec <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
     732:	788b      	ldrb	r3, [r1, #2]
     734:	784a      	ldrb	r2, [r1, #1]
     736:	7808      	ldrb	r0, [r1, #0]
     738:	78c9      	ldrb	r1, [r1, #3]
     73a:	9100      	str	r1, [sp, #0]
     73c:	0001      	movs	r1, r0
     73e:	480f      	ldr	r0, [pc, #60]	; (77c <wifi_callback+0x9c>)
     740:	4c0f      	ldr	r4, [pc, #60]	; (780 <wifi_callback+0xa0>)
     742:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, curr_mqtt_config->broker_server);
     744:	4b06      	ldr	r3, [pc, #24]	; (760 <wifi_callback+0x80>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	6919      	ldr	r1, [r3, #16]
     74a:	4808      	ldr	r0, [pc, #32]	; (76c <wifi_callback+0x8c>)
     74c:	4b0d      	ldr	r3, [pc, #52]	; (784 <wifi_callback+0xa4>)
     74e:	4798      	blx	r3
		wifi_connected = 1;
     750:	2201      	movs	r2, #1
     752:	4b0d      	ldr	r3, [pc, #52]	; (788 <wifi_callback+0xa8>)
     754:	601a      	str	r2, [r3, #0]
}
     756:	e7c9      	b.n	6ec <wifi_callback+0xc>
     758:	000109ec 	.word	0x000109ec
     75c:	0000bc59 	.word	0x0000bc59
     760:	20000350 	.word	0x20000350
     764:	0000be9f 	.word	0x0000be9f
     768:	00007101 	.word	0x00007101
     76c:	20000594 	.word	0x20000594
     770:	0000ac09 	.word	0x0000ac09
     774:	000109d8 	.word	0x000109d8
     778:	0000711d 	.word	0x0000711d
     77c:	00010a00 	.word	0x00010a00
     780:	0000bb3d 	.word	0x0000bb3d
     784:	0000a3fd 	.word	0x0000a3fd
     788:	20000200 	.word	0x20000200

0000078c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
void configure_mqtt(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b088      	sub	sp, #32
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
     790:	ac01      	add	r4, sp, #4
     792:	0020      	movs	r0, r4
     794:	4b10      	ldr	r3, [pc, #64]	; (7d8 <configure_mqtt+0x4c>)
     796:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
     798:	4b10      	ldr	r3, [pc, #64]	; (7dc <configure_mqtt+0x50>)
     79a:	6063      	str	r3, [r4, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
     79c:	4b10      	ldr	r3, [pc, #64]	; (7e0 <configure_mqtt+0x54>)
     79e:	60e3      	str	r3, [r4, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
     7a0:	2380      	movs	r3, #128	; 0x80
     7a2:	6123      	str	r3, [r4, #16]
	mqtt_conf.port = curr_mqtt_config->port;
     7a4:	4b0f      	ldr	r3, [pc, #60]	; (7e4 <configure_mqtt+0x58>)
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	899b      	ldrh	r3, [r3, #12]
     7aa:	8023      	strh	r3, [r4, #0]
	//cloudmqtt port 11353

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
     7ac:	0021      	movs	r1, r4
     7ae:	480e      	ldr	r0, [pc, #56]	; (7e8 <configure_mqtt+0x5c>)
     7b0:	4b0e      	ldr	r3, [pc, #56]	; (7ec <configure_mqtt+0x60>)
     7b2:	4798      	blx	r3
     7b4:	1e01      	subs	r1, r0, #0
	if (result < 0) {
     7b6:	db07      	blt.n	7c8 <configure_mqtt+0x3c>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
     7b8:	490d      	ldr	r1, [pc, #52]	; (7f0 <configure_mqtt+0x64>)
     7ba:	480b      	ldr	r0, [pc, #44]	; (7e8 <configure_mqtt+0x5c>)
     7bc:	4b0d      	ldr	r3, [pc, #52]	; (7f4 <configure_mqtt+0x68>)
     7be:	4798      	blx	r3
     7c0:	1e01      	subs	r1, r0, #0
	if (result < 0) {
     7c2:	db05      	blt.n	7d0 <configure_mqtt+0x44>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}
}
     7c4:	b008      	add	sp, #32
     7c6:	bd10      	pop	{r4, pc}
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
     7c8:	480b      	ldr	r0, [pc, #44]	; (7f8 <configure_mqtt+0x6c>)
     7ca:	4b0c      	ldr	r3, [pc, #48]	; (7fc <configure_mqtt+0x70>)
     7cc:	4798      	blx	r3
     7ce:	e7fe      	b.n	7ce <configure_mqtt+0x42>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
     7d0:	480b      	ldr	r0, [pc, #44]	; (800 <configure_mqtt+0x74>)
     7d2:	4b0a      	ldr	r3, [pc, #40]	; (7fc <configure_mqtt+0x70>)
     7d4:	4798      	blx	r3
     7d6:	e7fe      	b.n	7d6 <configure_mqtt+0x4a>
     7d8:	0000a291 	.word	0x0000a291
     7dc:	20000354 	.word	0x20000354
     7e0:	200002cc 	.word	0x200002cc
     7e4:	20000350 	.word	0x20000350
     7e8:	20000594 	.word	0x20000594
     7ec:	0000a2b5 	.word	0x0000a2b5
     7f0:	00000595 	.word	0x00000595
     7f4:	0000a385 	.word	0x0000a385
     7f8:	000106d4 	.word	0x000106d4
     7fc:	0000bb3d 	.word	0x0000bb3d
     800:	00010708 	.word	0x00010708

00000804 <deconfigure_mqtt>:

void deconfigure_mqtt()
{
     804:	b510      	push	{r4, lr}
	uint8_t result;

	result = mqtt_deinit(&mqtt_inst);
     806:	4c09      	ldr	r4, [pc, #36]	; (82c <deconfigure_mqtt+0x28>)
     808:	0020      	movs	r0, r4
     80a:	4b09      	ldr	r3, [pc, #36]	; (830 <deconfigure_mqtt+0x2c>)
     80c:	4798      	blx	r3
		printf("MQTT deinitialization failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}

	result = mqtt_unregister_callback(&mqtt_inst);
     80e:	0020      	movs	r0, r4
     810:	4b08      	ldr	r3, [pc, #32]	; (834 <deconfigure_mqtt+0x30>)
     812:	4798      	blx	r3
	if (result < 0) {
		printf("MQTT unregister callback failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}
	mqtt_disconnect(&mqtt_inst, 1);
     814:	2101      	movs	r1, #1
     816:	0020      	movs	r0, r4
     818:	4b07      	ldr	r3, [pc, #28]	; (838 <deconfigure_mqtt+0x34>)
     81a:	4798      	blx	r3
	socketDeinit();
     81c:	4b07      	ldr	r3, [pc, #28]	; (83c <deconfigure_mqtt+0x38>)
     81e:	4798      	blx	r3
	m2m_wifi_deinit(0);
     820:	2000      	movs	r0, #0
     822:	4b07      	ldr	r3, [pc, #28]	; (840 <deconfigure_mqtt+0x3c>)
     824:	4798      	blx	r3
	nm_bsp_deinit();
     826:	4b07      	ldr	r3, [pc, #28]	; (844 <deconfigure_mqtt+0x40>)
     828:	4798      	blx	r3
}
     82a:	bd10      	pop	{r4, pc}
     82c:	20000594 	.word	0x20000594
     830:	0000a341 	.word	0x0000a341
     834:	0000a395 	.word	0x0000a395
     838:	0000ac09 	.word	0x0000ac09
     83c:	000089a1 	.word	0x000089a1
     840:	00006e49 	.word	0x00006e49
     844:	00005d45 	.word	0x00005d45

00000848 <mqtt_initialize>:
/**
 * \brief Initialize the WiFi
 */
int mqtt_initialize(mqtt_inst_config *new_mqtt_conf)
{
     848:	b510      	push	{r4, lr}
     84a:	b088      	sub	sp, #32
	tstrWifiInitParam param;
	int8_t ret;
	curr_mqtt_config = new_mqtt_conf;
     84c:	4b1c      	ldr	r3, [pc, #112]	; (8c0 <mqtt_initialize+0x78>)
     84e:	6018      	str	r0, [r3, #0]
	sw_timer_get_config_defaults(&swt_conf);
     850:	a801      	add	r0, sp, #4
     852:	4b1c      	ldr	r3, [pc, #112]	; (8c4 <mqtt_initialize+0x7c>)
     854:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
     856:	4c1c      	ldr	r4, [pc, #112]	; (8c8 <mqtt_initialize+0x80>)
     858:	a901      	add	r1, sp, #4
     85a:	0020      	movs	r0, r4
     85c:	4b1b      	ldr	r3, [pc, #108]	; (8cc <mqtt_initialize+0x84>)
     85e:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
     860:	0020      	movs	r0, r4
     862:	4b1b      	ldr	r3, [pc, #108]	; (8d0 <mqtt_initialize+0x88>)
     864:	4798      	blx	r3
	printf("Timer enabled.\r\n");
     866:	481b      	ldr	r0, [pc, #108]	; (8d4 <mqtt_initialize+0x8c>)
     868:	4c1b      	ldr	r4, [pc, #108]	; (8d8 <mqtt_initialize+0x90>)
     86a:	47a0      	blx	r4
	/* Initialize the Timer. */
	configure_timer();

	/* Initialize the MQTT service. */
	configure_mqtt();
     86c:	4b1b      	ldr	r3, [pc, #108]	; (8dc <mqtt_initialize+0x94>)
     86e:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
     870:	4b1b      	ldr	r3, [pc, #108]	; (8e0 <mqtt_initialize+0x98>)
     872:	4798      	blx	r3

	printf("MQTT Configured.\r\n");
     874:	481b      	ldr	r0, [pc, #108]	; (8e4 <mqtt_initialize+0x9c>)
     876:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     878:	2218      	movs	r2, #24
     87a:	2100      	movs	r1, #0
     87c:	a802      	add	r0, sp, #8
     87e:	4b1a      	ldr	r3, [pc, #104]	; (8e8 <mqtt_initialize+0xa0>)
     880:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
     882:	4b1a      	ldr	r3, [pc, #104]	; (8ec <mqtt_initialize+0xa4>)
     884:	9302      	str	r3, [sp, #8]
	printf("Initializing...\r\n");
     886:	481a      	ldr	r0, [pc, #104]	; (8f0 <mqtt_initialize+0xa8>)
     888:	47a0      	blx	r4
	ret = m2m_wifi_init(&param);
     88a:	a802      	add	r0, sp, #8
     88c:	4b19      	ldr	r3, [pc, #100]	; (8f4 <mqtt_initialize+0xac>)
     88e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
     890:	2800      	cmp	r0, #0
     892:	d10f      	bne.n	8b4 <mqtt_initialize+0x6c>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
		return 1;
	}
	printf("main: m2m_wifi_init call success!(%d)\r\n", ret);
     894:	2100      	movs	r1, #0
     896:	4818      	ldr	r0, [pc, #96]	; (8f8 <mqtt_initialize+0xb0>)
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <mqtt_initialize+0xb4>)
     89a:	4798      	blx	r3

	/* Initialize socket interface. */
	socketInit();
     89c:	4b18      	ldr	r3, [pc, #96]	; (900 <mqtt_initialize+0xb8>)
     89e:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
     8a0:	4918      	ldr	r1, [pc, #96]	; (904 <mqtt_initialize+0xbc>)
     8a2:	4819      	ldr	r0, [pc, #100]	; (908 <mqtt_initialize+0xc0>)
     8a4:	4b19      	ldr	r3, [pc, #100]	; (90c <mqtt_initialize+0xc4>)
     8a6:	4798      	blx	r3
	printf("Sockets initialized.\r\n");
     8a8:	4819      	ldr	r0, [pc, #100]	; (910 <mqtt_initialize+0xc8>)
     8aa:	4b0b      	ldr	r3, [pc, #44]	; (8d8 <mqtt_initialize+0x90>)
     8ac:	4798      	blx	r3

	return 0;
     8ae:	2000      	movs	r0, #0
}
     8b0:	b008      	add	sp, #32
     8b2:	bd10      	pop	{r4, pc}
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
     8b4:	0001      	movs	r1, r0
     8b6:	4817      	ldr	r0, [pc, #92]	; (914 <mqtt_initialize+0xcc>)
     8b8:	4b10      	ldr	r3, [pc, #64]	; (8fc <mqtt_initialize+0xb4>)
     8ba:	4798      	blx	r3
		return 1;
     8bc:	2001      	movs	r0, #1
     8be:	e7f7      	b.n	8b0 <mqtt_initialize+0x68>
     8c0:	20000350 	.word	0x20000350
     8c4:	000041bd 	.word	0x000041bd
     8c8:	20000354 	.word	0x20000354
     8cc:	000041c9 	.word	0x000041c9
     8d0:	00004275 	.word	0x00004275
     8d4:	00010858 	.word	0x00010858
     8d8:	0000bc59 	.word	0x0000bc59
     8dc:	0000078d 	.word	0x0000078d
     8e0:	00005db5 	.word	0x00005db5
     8e4:	00010868 	.word	0x00010868
     8e8:	0000b0fb 	.word	0x0000b0fb
     8ec:	000006e1 	.word	0x000006e1
     8f0:	0001087c 	.word	0x0001087c
     8f4:	00006d15 	.word	0x00006d15
     8f8:	000108b8 	.word	0x000108b8
     8fc:	0000bb3d 	.word	0x0000bb3d
     900:	0000895d 	.word	0x0000895d
     904:	000006c9 	.word	0x000006c9
     908:	000006d5 	.word	0x000006d5
     90c:	000089dd 	.word	0x000089dd
     910:	000108e0 	.word	0x000108e0
     914:	00010890 	.word	0x00010890

00000918 <register_request_topic>:

void register_request_topic(char topic_name[MQTT_SEND_BUFFER_SIZE], char wildcard, void (*function))
{
     918:	b5f0      	push	{r4, r5, r6, r7, lr}
     91a:	b0a5      	sub	sp, #148	; 0x94
     91c:	0005      	movs	r5, r0
     91e:	000f      	movs	r7, r1
     920:	0016      	movs	r6, r2
	if (num_registered_request_topics < MAX_TOPICS) {
     922:	4b21      	ldr	r3, [pc, #132]	; (9a8 <register_request_topic+0x90>)
     924:	781b      	ldrb	r3, [r3, #0]
     926:	2b06      	cmp	r3, #6
     928:	d839      	bhi.n	99e <register_request_topic+0x86>
		topic_struct new_topic;
		uint32_t topic_name_len = strlen(topic_name);
     92a:	4b20      	ldr	r3, [pc, #128]	; (9ac <register_request_topic+0x94>)
     92c:	4798      	blx	r3
     92e:	0004      	movs	r4, r0
		strcpy(new_topic.topic_name, topic_name);
     930:	9501      	str	r5, [sp, #4]
     932:	0029      	movs	r1, r5
     934:	a813      	add	r0, sp, #76	; 0x4c
     936:	4d1e      	ldr	r5, [pc, #120]	; (9b0 <register_request_topic+0x98>)
     938:	47a8      	blx	r5
		printf("new_topic.topic_name: %s\r\n", new_topic.topic_name);
     93a:	ab13      	add	r3, sp, #76	; 0x4c
     93c:	0019      	movs	r1, r3
     93e:	481d      	ldr	r0, [pc, #116]	; (9b4 <register_request_topic+0x9c>)
     940:	4b1d      	ldr	r3, [pc, #116]	; (9b8 <register_request_topic+0xa0>)
     942:	4798      	blx	r3
		char topic_subscribe_str[MQTT_SEND_BUFFER_SIZE+1];
		strcpy(topic_subscribe_str, topic_name);
     944:	9901      	ldr	r1, [sp, #4]
     946:	a802      	add	r0, sp, #8
     948:	47a8      	blx	r5
		topic_subscribe_str[topic_name_len] = wildcard;
     94a:	ab02      	add	r3, sp, #8
     94c:	551f      	strb	r7, [r3, r4]
		topic_subscribe_str[topic_name_len+1] = '\0';
     94e:	469c      	mov	ip, r3
     950:	4464      	add	r4, ip
     952:	2300      	movs	r3, #0
     954:	7063      	strb	r3, [r4, #1]
		
		if(mqtt_subscribe(&mqtt_inst, topic_subscribe_str, 0)) {
     956:	2200      	movs	r2, #0
     958:	4661      	mov	r1, ip
     95a:	4818      	ldr	r0, [pc, #96]	; (9bc <register_request_topic+0xa4>)
     95c:	4b18      	ldr	r3, [pc, #96]	; (9c0 <register_request_topic+0xa8>)
     95e:	4798      	blx	r3
     960:	2800      	cmp	r0, #0
     962:	d004      	beq.n	96e <register_request_topic+0x56>
			printf("failed to subscribe topic: %s\r\n", topic_subscribe_str);
     964:	a902      	add	r1, sp, #8
     966:	4817      	ldr	r0, [pc, #92]	; (9c4 <register_request_topic+0xac>)
     968:	4b13      	ldr	r3, [pc, #76]	; (9b8 <register_request_topic+0xa0>)
     96a:	4798      	blx	r3
     96c:	e01a      	b.n	9a4 <register_request_topic+0x8c>
			return;	
		}
		new_topic.function = function;
     96e:	9623      	str	r6, [sp, #140]	; 0x8c
		memcpy((int) &registered_request_topics[num_registered_request_topics++], &new_topic, sizeof(topic_struct));
     970:	4a0d      	ldr	r2, [pc, #52]	; (9a8 <register_request_topic+0x90>)
     972:	7813      	ldrb	r3, [r2, #0]
     974:	1c5c      	adds	r4, r3, #1
     976:	b2e4      	uxtb	r4, r4
     978:	7014      	strb	r4, [r2, #0]
     97a:	4d13      	ldr	r5, [pc, #76]	; (9c8 <register_request_topic+0xb0>)
     97c:	0118      	lsls	r0, r3, #4
     97e:	18c0      	adds	r0, r0, r3
     980:	0080      	lsls	r0, r0, #2
     982:	1828      	adds	r0, r5, r0
     984:	2244      	movs	r2, #68	; 0x44
     986:	a913      	add	r1, sp, #76	; 0x4c
     988:	4b10      	ldr	r3, [pc, #64]	; (9cc <register_request_topic+0xb4>)
     98a:	4798      	blx	r3
		printf("[register_request_topic] successfully registered request topic %s and callback!\r\n", registered_request_topics[num_registered_request_topics-1].topic_name);
     98c:	3c01      	subs	r4, #1
     98e:	0121      	lsls	r1, r4, #4
     990:	1909      	adds	r1, r1, r4
     992:	0089      	lsls	r1, r1, #2
     994:	1949      	adds	r1, r1, r5
     996:	480e      	ldr	r0, [pc, #56]	; (9d0 <register_request_topic+0xb8>)
     998:	4b07      	ldr	r3, [pc, #28]	; (9b8 <register_request_topic+0xa0>)
     99a:	4798      	blx	r3
     99c:	e002      	b.n	9a4 <register_request_topic+0x8c>
	} else {
		printf("[register_request_topic] max number of topics already registered.\r\n");
     99e:	480d      	ldr	r0, [pc, #52]	; (9d4 <register_request_topic+0xbc>)
     9a0:	4b0d      	ldr	r3, [pc, #52]	; (9d8 <register_request_topic+0xc0>)
     9a2:	4798      	blx	r3
	}
}
     9a4:	b025      	add	sp, #148	; 0x94
     9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9a8:	200001fc 	.word	0x200001fc
     9ac:	0000be9f 	.word	0x0000be9f
     9b0:	0000be55 	.word	0x0000be55
     9b4:	00010904 	.word	0x00010904
     9b8:	0000bb3d 	.word	0x0000bb3d
     9bc:	20000594 	.word	0x20000594
     9c0:	0000a969 	.word	0x0000a969
     9c4:	00010920 	.word	0x00010920
     9c8:	200003ac 	.word	0x200003ac
     9cc:	0000b0c5 	.word	0x0000b0c5
     9d0:	00010940 	.word	0x00010940
     9d4:	00010994 	.word	0x00010994
     9d8:	0000bc59 	.word	0x0000bc59

000009dc <publish_to_topic>:


void publish_to_topic(char topic[MAIN_MQTT_BUFFER_SIZE], uint8_t data[MQTT_SEND_BUFFER_SIZE], uint32_t data_len) {
     9dc:	b570      	push	{r4, r5, r6, lr}
     9de:	b082      	sub	sp, #8
     9e0:	0004      	movs	r4, r0
     9e2:	000d      	movs	r5, r1
     9e4:	0013      	movs	r3, r2
	mqtt_publish(&mqtt_inst, topic, data, data_len, 0, 0);
     9e6:	2100      	movs	r1, #0
     9e8:	9101      	str	r1, [sp, #4]
     9ea:	9100      	str	r1, [sp, #0]
     9ec:	002a      	movs	r2, r5
     9ee:	0001      	movs	r1, r0
     9f0:	4804      	ldr	r0, [pc, #16]	; (a04 <publish_to_topic+0x28>)
     9f2:	4e05      	ldr	r6, [pc, #20]	; (a08 <publish_to_topic+0x2c>)
     9f4:	47b0      	blx	r6
	printf("%s, %s\r\n", topic, data);
     9f6:	002a      	movs	r2, r5
     9f8:	0021      	movs	r1, r4
     9fa:	4804      	ldr	r0, [pc, #16]	; (a0c <publish_to_topic+0x30>)
     9fc:	4b04      	ldr	r3, [pc, #16]	; (a10 <publish_to_topic+0x34>)
     9fe:	4798      	blx	r3
}
     a00:	b002      	add	sp, #8
     a02:	bd70      	pop	{r4, r5, r6, pc}
     a04:	20000594 	.word	0x20000594
     a08:	0000a7c1 	.word	0x0000a7c1
     a0c:	000108f8 	.word	0x000108f8
     a10:	0000bb3d 	.word	0x0000bb3d

00000a14 <get_mqtt_config_defaults>:

void get_mqtt_config_defaults(mqtt_inst_config *mqtt_conf)
{
	mqtt_conf->ssid = "AirPennNet-Device";
     a14:	4b05      	ldr	r3, [pc, #20]	; (a2c <get_mqtt_config_defaults+0x18>)
     a16:	6003      	str	r3, [r0, #0]
	mqtt_conf->auth = M2M_WIFI_SEC_WPA_PSK;
     a18:	2302      	movs	r3, #2
     a1a:	6043      	str	r3, [r0, #4]
	mqtt_conf->password = "penn1740wifi";
     a1c:	4b04      	ldr	r3, [pc, #16]	; (a30 <get_mqtt_config_defaults+0x1c>)
     a1e:	6083      	str	r3, [r0, #8]
	mqtt_conf->port = 1883;
     a20:	4b04      	ldr	r3, [pc, #16]	; (a34 <get_mqtt_config_defaults+0x20>)
     a22:	8183      	strh	r3, [r0, #12]
	mqtt_conf->broker_server = "deet.seas.upenn.edu";
     a24:	4b04      	ldr	r3, [pc, #16]	; (a38 <get_mqtt_config_defaults+0x24>)
     a26:	6103      	str	r3, [r0, #16]
}
     a28:	4770      	bx	lr
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	0001073c 	.word	0x0001073c
     a30:	00010750 	.word	0x00010750
     a34:	0000075b 	.word	0x0000075b
     a38:	00010760 	.word	0x00010760

00000a3c <clear_state>:
 *
 */
//TODO: check and see if it will only clear on mask
static void clear_state(download_state mask)
{
	down_state &= ~mask;
     a3c:	4a02      	ldr	r2, [pc, #8]	; (a48 <clear_state+0xc>)
     a3e:	8813      	ldrh	r3, [r2, #0]
     a40:	4383      	bics	r3, r0
     a42:	8013      	strh	r3, [r2, #0]
}
     a44:	4770      	bx	lr
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	20000614 	.word	0x20000614

00000a4c <add_state>:
/**
 * add a given state to the global download_state @ref down_state
 * @param mask add given state
 */
static void add_state(download_state mask)
{
     a4c:	b510      	push	{r4, lr}
	down_state |= mask;
     a4e:	4a0a      	ldr	r2, [pc, #40]	; (a78 <add_state+0x2c>)
     a50:	8813      	ldrh	r3, [r2, #0]
     a52:	4303      	orrs	r3, r0
     a54:	8013      	strh	r3, [r2, #0]
	if (mask == CANCELED || mask == COMPLETED)
     a56:	0002      	movs	r2, r0
     a58:	3a10      	subs	r2, #16
     a5a:	4b08      	ldr	r3, [pc, #32]	; (a7c <add_state+0x30>)
     a5c:	421a      	tst	r2, r3
     a5e:	d002      	beq.n	a66 <add_state+0x1a>
		at25dfx_chip_sleep(&at25dfx_chip);
	else if (mask == DOWNLOADING)
     a60:	2808      	cmp	r0, #8
     a62:	d004      	beq.n	a6e <add_state+0x22>
		at25dfx_chip_wake(&at25dfx_chip);
}
     a64:	bd10      	pop	{r4, pc}
		at25dfx_chip_sleep(&at25dfx_chip);
     a66:	4806      	ldr	r0, [pc, #24]	; (a80 <add_state+0x34>)
     a68:	4b06      	ldr	r3, [pc, #24]	; (a84 <add_state+0x38>)
     a6a:	4798      	blx	r3
     a6c:	e7fa      	b.n	a64 <add_state+0x18>
		at25dfx_chip_wake(&at25dfx_chip);
     a6e:	4804      	ldr	r0, [pc, #16]	; (a80 <add_state+0x34>)
     a70:	4b05      	ldr	r3, [pc, #20]	; (a88 <add_state+0x3c>)
     a72:	4798      	blx	r3
}
     a74:	e7f6      	b.n	a64 <add_state+0x18>
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	20000614 	.word	0x20000614
     a7c:	0000ffef 	.word	0x0000ffef
     a80:	2000060c 	.word	0x2000060c
     a84:	000022cd 	.word	0x000022cd
     a88:	00002359 	.word	0x00002359

00000a8c <write_firmware_metadata>:
		return;
	}
}

static void write_firmware_metadata(uint32_t firmware_address, uint16_t firmware_version, uint32_t firmware_checksum, uint32_t fw_size)
{
     a8c:	b570      	push	{r4, r5, r6, lr}
     a8e:	b0c4      	sub	sp, #272	; 0x110
	if (FW1_ADDR == firmware_address)
     a90:	2480      	movs	r4, #128	; 0x80
     a92:	01a4      	lsls	r4, r4, #6
     a94:	42a0      	cmp	r0, r4
     a96:	d01b      	beq.n	ad0 <write_firmware_metadata+0x44>
		firmware_address = FW1_HEADER_ADDR;
	else if (FW2_ADDR == firmware_address)
     a98:	2482      	movs	r4, #130	; 0x82
     a9a:	02e4      	lsls	r4, r4, #11
     a9c:	42a0      	cmp	r0, r4
     a9e:	d001      	beq.n	aa4 <write_firmware_metadata+0x18>
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
	if (STATUS_OK != write_code) {
		printf("write_firmware_metadata: could not write to flash!\r\n");
		return;
	}
}
     aa0:	b044      	add	sp, #272	; 0x110
     aa2:	bd70      	pop	{r4, r5, r6, pc}
		firmware_address = FW2_HEADER_ADDR;
     aa4:	2480      	movs	r4, #128	; 0x80
     aa6:	02e4      	lsls	r4, r4, #11
	fw_header_t new_firmware_header = { .fw_version = firmware_version, .checksum = firmware_checksum, .size = fw_size };
     aa8:	a841      	add	r0, sp, #260	; 0x104
     aaa:	8001      	strh	r1, [r0, #0]
     aac:	9242      	str	r2, [sp, #264]	; 0x108
     aae:	9343      	str	r3, [sp, #268]	; 0x10c
	memcpy(write_buffer, &new_firmware_header, sizeof(fw_header_t));
     ab0:	aa01      	add	r2, sp, #4
     ab2:	0013      	movs	r3, r2
     ab4:	c862      	ldmia	r0!, {r1, r5, r6}
     ab6:	c362      	stmia	r3!, {r1, r5, r6}
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
     ab8:	2380      	movs	r3, #128	; 0x80
     aba:	005b      	lsls	r3, r3, #1
     abc:	0021      	movs	r1, r4
     abe:	4806      	ldr	r0, [pc, #24]	; (ad8 <write_firmware_metadata+0x4c>)
     ac0:	4c06      	ldr	r4, [pc, #24]	; (adc <write_firmware_metadata+0x50>)
     ac2:	47a0      	blx	r4
	if (STATUS_OK != write_code) {
     ac4:	2800      	cmp	r0, #0
     ac6:	d0eb      	beq.n	aa0 <write_firmware_metadata+0x14>
		printf("write_firmware_metadata: could not write to flash!\r\n");
     ac8:	4805      	ldr	r0, [pc, #20]	; (ae0 <write_firmware_metadata+0x54>)
     aca:	4b06      	ldr	r3, [pc, #24]	; (ae4 <write_firmware_metadata+0x58>)
     acc:	4798      	blx	r3
		return;
     ace:	e7e7      	b.n	aa0 <write_firmware_metadata+0x14>
		firmware_address = FW1_HEADER_ADDR;
     ad0:	2480      	movs	r4, #128	; 0x80
     ad2:	0164      	lsls	r4, r4, #5
     ad4:	e7e8      	b.n	aa8 <write_firmware_metadata+0x1c>
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	2000060c 	.word	0x2000060c
     adc:	00001b89 	.word	0x00001b89
     ae0:	00011354 	.word	0x00011354
     ae4:	0000bc59 	.word	0x0000bc59

00000ae8 <update_boot_status>:

/**
 * update the boot status struct in internal memory
 */
static void update_boot_status()
{
     ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aea:	b0c7      	sub	sp, #284	; 0x11c
	struct nvm_parameters nvm_information;

	nvm_get_parameters(&nvm_information);
     aec:	a843      	add	r0, sp, #268	; 0x10c
     aee:	4b2b      	ldr	r3, [pc, #172]	; (b9c <update_boot_status+0xb4>)
     af0:	4798      	blx	r3
	uint16_t num_pages = nvm_information.nvm_number_of_pages;
	int page_to_write = BOOT_STATUS_ADDR / NVMCTRL_PAGE_SIZE;
	int row_to_erase = page_to_write / NVMCTRL_ROW_PAGES;
	printf("update_boot_status: row_to_erase: %d\r\n", row_to_erase);
     af2:	213f      	movs	r1, #63	; 0x3f
     af4:	482a      	ldr	r0, [pc, #168]	; (ba0 <update_boot_status+0xb8>)
     af6:	4d2b      	ldr	r5, [pc, #172]	; (ba4 <update_boot_status+0xbc>)
     af8:	47a8      	blx	r5
	printf("update_boot_status: page_to_write: %d\r\n", page_to_write);
     afa:	21ff      	movs	r1, #255	; 0xff
     afc:	482a      	ldr	r0, [pc, #168]	; (ba8 <update_boot_status+0xc0>)
     afe:	47a8      	blx	r5
	uint8_t page_offset = page_to_write - (row_to_erase * NVMCTRL_ROW_PAGES);
	int row_address = row_to_erase * NVMCTRL_ROW_SIZE;
	printf("update_boot_status: row_address: %d\r\n", row_address);
     b00:	24fc      	movs	r4, #252	; 0xfc
     b02:	01a4      	lsls	r4, r4, #6
     b04:	0021      	movs	r1, r4
     b06:	4829      	ldr	r0, [pc, #164]	; (bac <update_boot_status+0xc4>)
     b08:	47a8      	blx	r5
	printf("update_boot_status: page_offset: %d\r\n", page_offset);
     b0a:	2103      	movs	r1, #3
     b0c:	4828      	ldr	r0, [pc, #160]	; (bb0 <update_boot_status+0xc8>)
     b0e:	47a8      	blx	r5
	uint8_t row_buffer[NVMCTRL_ROW_SIZE];
	enum status_code read_nvm_code;
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		int offset = i * NVMCTRL_PAGE_SIZE;
		do
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
     b10:	4e28      	ldr	r6, [pc, #160]	; (bb4 <update_boot_status+0xcc>)
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     b12:	2780      	movs	r7, #128	; 0x80
     b14:	01ff      	lsls	r7, r7, #7
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
     b16:	4b28      	ldr	r3, [pc, #160]	; (bb8 <update_boot_status+0xd0>)
     b18:	18e5      	adds	r5, r4, r3
     b1a:	ab03      	add	r3, sp, #12
     b1c:	469c      	mov	ip, r3
     b1e:	4465      	add	r5, ip
     b20:	2240      	movs	r2, #64	; 0x40
     b22:	0029      	movs	r1, r5
     b24:	0020      	movs	r0, r4
     b26:	47b0      	blx	r6
		while (STATUS_OK != read_nvm_code);
     b28:	2800      	cmp	r0, #0
     b2a:	d1f9      	bne.n	b20 <update_boot_status+0x38>
     b2c:	3440      	adds	r4, #64	; 0x40
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     b2e:	42bc      	cmp	r4, r7
     b30:	d1f1      	bne.n	b16 <update_boot_status+0x2e>
	}
	printf("row: %04x\r\n", row_buffer);
     b32:	a903      	add	r1, sp, #12
     b34:	4821      	ldr	r0, [pc, #132]	; (bbc <update_boot_status+0xd4>)
     b36:	4b1b      	ldr	r3, [pc, #108]	; (ba4 <update_boot_status+0xbc>)
     b38:	4798      	blx	r3
	do
		read_nvm_code = nvm_erase_row(row_address);
     b3a:	25fc      	movs	r5, #252	; 0xfc
     b3c:	01ad      	lsls	r5, r5, #6
     b3e:	4c20      	ldr	r4, [pc, #128]	; (bc0 <update_boot_status+0xd8>)
     b40:	0028      	movs	r0, r5
     b42:	47a0      	blx	r4
	while (STATUS_OK != read_nvm_code);
     b44:	2800      	cmp	r0, #0
     b46:	d1fb      	bne.n	b40 <update_boot_status+0x58>

	fw_status_t write_boot;
	memcpy(&write_boot, row_buffer + page_offset * NVMCTRL_PAGE_SIZE, sizeof(fw_status_t));
     b48:	ac01      	add	r4, sp, #4
     b4a:	ad33      	add	r5, sp, #204	; 0xcc
     b4c:	0023      	movs	r3, r4
     b4e:	002a      	movs	r2, r5
     b50:	ca03      	ldmia	r2!, {r0, r1}
     b52:	c303      	stmia	r3!, {r0, r1}
	write_boot.new_image_ready = 1;
     b54:	2301      	movs	r3, #1
     b56:	70e3      	strb	r3, [r4, #3]
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[0]);
     b58:	7821      	ldrb	r1, [r4, #0]
     b5a:	481a      	ldr	r0, [pc, #104]	; (bc4 <update_boot_status+0xdc>)
     b5c:	4f11      	ldr	r7, [pc, #68]	; (ba4 <update_boot_status+0xbc>)
     b5e:	47b8      	blx	r7
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[1]);
     b60:	7861      	ldrb	r1, [r4, #1]
     b62:	4818      	ldr	r0, [pc, #96]	; (bc4 <update_boot_status+0xdc>)
     b64:	47b8      	blx	r7
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[2]);
     b66:	78a1      	ldrb	r1, [r4, #2]
     b68:	4816      	ldr	r0, [pc, #88]	; (bc4 <update_boot_status+0xdc>)
     b6a:	47b8      	blx	r7
	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));

	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));
     b6c:	cc0c      	ldmia	r4!, {r2, r3}
     b6e:	c50c      	stmia	r5!, {r2, r3}
     b70:	24fc      	movs	r4, #252	; 0xfc
     b72:	01a4      	lsls	r4, r4, #6
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		int offset = i * NVMCTRL_PAGE_SIZE;
		do
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
     b74:	4e14      	ldr	r6, [pc, #80]	; (bc8 <update_boot_status+0xe0>)
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     b76:	2780      	movs	r7, #128	; 0x80
     b78:	01ff      	lsls	r7, r7, #7
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
     b7a:	4b0f      	ldr	r3, [pc, #60]	; (bb8 <update_boot_status+0xd0>)
     b7c:	18e5      	adds	r5, r4, r3
     b7e:	ab03      	add	r3, sp, #12
     b80:	469c      	mov	ip, r3
     b82:	4465      	add	r5, ip
     b84:	2240      	movs	r2, #64	; 0x40
     b86:	0029      	movs	r1, r5
     b88:	0020      	movs	r0, r4
     b8a:	47b0      	blx	r6
		while (STATUS_OK != read_nvm_code);
     b8c:	2800      	cmp	r0, #0
     b8e:	d1f9      	bne.n	b84 <update_boot_status+0x9c>
     b90:	3440      	adds	r4, #64	; 0x40
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     b92:	42bc      	cmp	r4, r7
     b94:	d1f1      	bne.n	b7a <update_boot_status+0x92>
	}
}
     b96:	b047      	add	sp, #284	; 0x11c
     b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	000092cd 	.word	0x000092cd
     ba0:	000110cc 	.word	0x000110cc
     ba4:	0000bb3d 	.word	0x0000bb3d
     ba8:	000110f4 	.word	0x000110f4
     bac:	0001111c 	.word	0x0001111c
     bb0:	00011144 	.word	0x00011144
     bb4:	00009205 	.word	0x00009205
     bb8:	ffffc100 	.word	0xffffc100
     bbc:	0001116c 	.word	0x0001116c
     bc0:	00009271 	.word	0x00009271
     bc4:	00011178 	.word	0x00011178
     bc8:	0000915d 	.word	0x0000915d

00000bcc <socket_callback>:
 * @param sock    open socket
 * @param evt     event change that pulled callback
 * @param evt_msg event data
 */
void socket_callback(SOCKET sock, uint8_t evt, void *evt_msg)
{
     bcc:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, evt, evt_msg);
     bce:	4b01      	ldr	r3, [pc, #4]	; (bd4 <socket_callback+0x8>)
     bd0:	4798      	blx	r3
}
     bd2:	bd10      	pop	{r4, pc}
     bd4:	00003f5d 	.word	0x00003f5d

00000bd8 <resolve_cb>:
 * callback to resolve http address to an IP address
 * @param pu8DomainName unknown??
 * @param u32ServerIP   unknown??
 */
void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	b082      	sub	sp, #8
     bdc:	0005      	movs	r5, r0
     bde:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	       (int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
     be0:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
     be2:	21ff      	movs	r1, #255	; 0xff
     be4:	400b      	ands	r3, r1
     be6:	000a      	movs	r2, r1
     be8:	4022      	ands	r2, r4
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
     bea:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
     bec:	9001      	str	r0, [sp, #4]
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
     bee:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
     bf0:	4001      	ands	r1, r0
     bf2:	9100      	str	r1, [sp, #0]
     bf4:	0029      	movs	r1, r5
     bf6:	4804      	ldr	r0, [pc, #16]	; (c08 <resolve_cb+0x30>)
     bf8:	4e04      	ldr	r6, [pc, #16]	; (c0c <resolve_cb+0x34>)
     bfa:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
     bfc:	0021      	movs	r1, r4
     bfe:	0028      	movs	r0, r5
     c00:	4b03      	ldr	r3, [pc, #12]	; (c10 <resolve_cb+0x38>)
     c02:	4798      	blx	r3
}
     c04:	b002      	add	sp, #8
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	00010c50 	.word	0x00010c50
     c0c:	0000bb3d 	.word	0x0000bb3d
     c10:	0000330d 	.word	0x0000330d

00000c14 <start_download>:
{
     c14:	b510      	push	{r4, lr}
     c16:	b082      	sub	sp, #8
	return (down_state & mask) != 0;
     c18:	4b20      	ldr	r3, [pc, #128]	; (c9c <start_download+0x88>)
     c1a:	881b      	ldrh	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
     c1c:	07da      	lsls	r2, r3, #31
     c1e:	d512      	bpl.n	c46 <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
     c20:	079a      	lsls	r2, r3, #30
     c22:	d515      	bpl.n	c50 <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
     c24:	075a      	lsls	r2, r3, #29
     c26:	d417      	bmi.n	c58 <start_download+0x44>
	if (is_state_set(DOWNLOADING)) {
     c28:	071a      	lsls	r2, r3, #28
     c2a:	d419      	bmi.n	c60 <start_download+0x4c>
	if (is_state_set(NOT_CHECKED)) {
     c2c:	065a      	lsls	r2, r3, #25
     c2e:	d41b      	bmi.n	c68 <start_download+0x54>
	if (is_state_set(UPDATE_AVAILABLE)) {
     c30:	061a      	lsls	r2, r3, #24
     c32:	d426      	bmi.n	c82 <start_download+0x6e>
	if (is_state_set(UPDATE_NOT_AVAILABLE)) {
     c34:	05db      	lsls	r3, r3, #23
     c36:	d509      	bpl.n	c4c <start_download+0x38>
		printf("start_download: no update available\r\n");
     c38:	4819      	ldr	r0, [pc, #100]	; (ca0 <start_download+0x8c>)
     c3a:	4b1a      	ldr	r3, [pc, #104]	; (ca4 <start_download+0x90>)
     c3c:	4798      	blx	r3
		add_state(COMPLETED);
     c3e:	2010      	movs	r0, #16
     c40:	4b19      	ldr	r3, [pc, #100]	; (ca8 <start_download+0x94>)
     c42:	4798      	blx	r3
		return;
     c44:	e002      	b.n	c4c <start_download+0x38>
		printf("start_download: MMC storage not ready.\r\n");
     c46:	4819      	ldr	r0, [pc, #100]	; (cac <start_download+0x98>)
     c48:	4b16      	ldr	r3, [pc, #88]	; (ca4 <start_download+0x90>)
     c4a:	4798      	blx	r3
}
     c4c:	b002      	add	sp, #8
     c4e:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
     c50:	4817      	ldr	r0, [pc, #92]	; (cb0 <start_download+0x9c>)
     c52:	4b14      	ldr	r3, [pc, #80]	; (ca4 <start_download+0x90>)
     c54:	4798      	blx	r3
		return;
     c56:	e7f9      	b.n	c4c <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
     c58:	4816      	ldr	r0, [pc, #88]	; (cb4 <start_download+0xa0>)
     c5a:	4b12      	ldr	r3, [pc, #72]	; (ca4 <start_download+0x90>)
     c5c:	4798      	blx	r3
		return;
     c5e:	e7f5      	b.n	c4c <start_download+0x38>
		printf("start_download: running download already.\r\n");
     c60:	4815      	ldr	r0, [pc, #84]	; (cb8 <start_download+0xa4>)
     c62:	4b10      	ldr	r3, [pc, #64]	; (ca4 <start_download+0x90>)
     c64:	4798      	blx	r3
		return;
     c66:	e7f1      	b.n	c4c <start_download+0x38>
		printf("start_download [NOT_CHECKED]: sending HTTP request for header\r\n");
     c68:	4814      	ldr	r0, [pc, #80]	; (cbc <start_download+0xa8>)
     c6a:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <start_download+0x90>)
     c6c:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_header_http_address, HTTP_METHOD_GET, NULL, NULL);
     c6e:	4b14      	ldr	r3, [pc, #80]	; (cc0 <start_download+0xac>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	68d9      	ldr	r1, [r3, #12]
     c74:	2300      	movs	r3, #0
     c76:	9300      	str	r3, [sp, #0]
     c78:	2201      	movs	r2, #1
     c7a:	4812      	ldr	r0, [pc, #72]	; (cc4 <start_download+0xb0>)
     c7c:	4c12      	ldr	r4, [pc, #72]	; (cc8 <start_download+0xb4>)
     c7e:	47a0      	blx	r4
		return;
     c80:	e7e4      	b.n	c4c <start_download+0x38>
		printf("start_download [UPDATE_AVAILABLE]: sending HTTP request for firmware\r\n");
     c82:	4812      	ldr	r0, [pc, #72]	; (ccc <start_download+0xb8>)
     c84:	4b07      	ldr	r3, [pc, #28]	; (ca4 <start_download+0x90>)
     c86:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_http_address, HTTP_METHOD_GET, NULL, NULL);
     c88:	4b0d      	ldr	r3, [pc, #52]	; (cc0 <start_download+0xac>)
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	6919      	ldr	r1, [r3, #16]
     c8e:	2300      	movs	r3, #0
     c90:	9300      	str	r3, [sp, #0]
     c92:	2201      	movs	r2, #1
     c94:	480b      	ldr	r0, [pc, #44]	; (cc4 <start_download+0xb0>)
     c96:	4c0c      	ldr	r4, [pc, #48]	; (cc8 <start_download+0xb4>)
     c98:	47a0      	blx	r4
		return;
     c9a:	e7d7      	b.n	c4c <start_download+0x38>
     c9c:	20000614 	.word	0x20000614
     ca0:	00010db4 	.word	0x00010db4
     ca4:	0000bc59 	.word	0x0000bc59
     ca8:	00000a4d 	.word	0x00000a4d
     cac:	00010c80 	.word	0x00010c80
     cb0:	00010ca8 	.word	0x00010ca8
     cb4:	00010cd4 	.word	0x00010cd4
     cb8:	00010d00 	.word	0x00010d00
     cbc:	00010d2c 	.word	0x00010d2c
     cc0:	20000744 	.word	0x20000744
     cc4:	20000618 	.word	0x20000618
     cc8:	00003861 	.word	0x00003861
     ccc:	00010d6c 	.word	0x00010d6c

00000cd0 <wifi_callback>:
 * Callback for wifi state changes
 * @param evt     event change
 * @param evt_msg information about wifi state change
 */
void wifi_callback(uint8_t evt, void *evt_msg)
{
     cd0:	b530      	push	{r4, r5, lr}
     cd2:	b083      	sub	sp, #12
	switch (evt) {
     cd4:	282c      	cmp	r0, #44	; 0x2c
     cd6:	d006      	beq.n	ce6 <wifi_callback+0x16>
     cd8:	2832      	cmp	r0, #50	; 0x32
     cda:	d034      	beq.n	d46 <wifi_callback+0x76>
		add_state(WIFI_CONNECTED);
		start_download();
		break;
	}
	default:
		printf("wifi_callback [default]: ERROR evt %d\r\n", evt);
     cdc:	0001      	movs	r1, r0
     cde:	4822      	ldr	r0, [pc, #136]	; (d68 <wifi_callback+0x98>)
     ce0:	4b22      	ldr	r3, [pc, #136]	; (d6c <wifi_callback+0x9c>)
     ce2:	4798      	blx	r3
	}
}
     ce4:	e03d      	b.n	d62 <wifi_callback+0x92>
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     ce6:	780b      	ldrb	r3, [r1, #0]
     ce8:	2b01      	cmp	r3, #1
     cea:	d01e      	beq.n	d2a <wifi_callback+0x5a>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     cec:	2b00      	cmp	r3, #0
     cee:	d138      	bne.n	d62 <wifi_callback+0x92>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED] disconnected.\r\n");
     cf0:	481f      	ldr	r0, [pc, #124]	; (d70 <wifi_callback+0xa0>)
     cf2:	4b20      	ldr	r3, [pc, #128]	; (d74 <wifi_callback+0xa4>)
     cf4:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
     cf6:	2002      	movs	r0, #2
     cf8:	4b1f      	ldr	r3, [pc, #124]	; (d78 <wifi_callback+0xa8>)
     cfa:	4798      	blx	r3
	return (down_state & mask) != 0;
     cfc:	4b1f      	ldr	r3, [pc, #124]	; (d7c <wifi_callback+0xac>)
     cfe:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(DOWNLOADING))
     d00:	071b      	lsls	r3, r3, #28
     d02:	d418      	bmi.n	d36 <wifi_callback+0x66>
	return (down_state & mask) != 0;
     d04:	4b1d      	ldr	r3, [pc, #116]	; (d7c <wifi_callback+0xac>)
     d06:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED))
     d08:	075b      	lsls	r3, r3, #29
     d0a:	d418      	bmi.n	d3e <wifi_callback+0x6e>
			m2m_wifi_connect(current_wifi_config->ssid, strlen(current_wifi_config->ssid), current_wifi_config->auth_type, current_wifi_config->password, M2M_WIFI_CH_ALL);
     d0c:	4b1c      	ldr	r3, [pc, #112]	; (d80 <wifi_callback+0xb0>)
     d0e:	681c      	ldr	r4, [r3, #0]
     d10:	6825      	ldr	r5, [r4, #0]
     d12:	0028      	movs	r0, r5
     d14:	4b1b      	ldr	r3, [pc, #108]	; (d84 <wifi_callback+0xb4>)
     d16:	4798      	blx	r3
     d18:	68a3      	ldr	r3, [r4, #8]
     d1a:	7922      	ldrb	r2, [r4, #4]
     d1c:	b2c1      	uxtb	r1, r0
     d1e:	20ff      	movs	r0, #255	; 0xff
     d20:	9000      	str	r0, [sp, #0]
     d22:	0028      	movs	r0, r5
     d24:	4c18      	ldr	r4, [pc, #96]	; (d88 <wifi_callback+0xb8>)
     d26:	47a0      	blx	r4
     d28:	e01b      	b.n	d62 <wifi_callback+0x92>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED]: connected.\r\n");
     d2a:	4818      	ldr	r0, [pc, #96]	; (d8c <wifi_callback+0xbc>)
     d2c:	4b11      	ldr	r3, [pc, #68]	; (d74 <wifi_callback+0xa4>)
     d2e:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
     d30:	4b17      	ldr	r3, [pc, #92]	; (d90 <wifi_callback+0xc0>)
     d32:	4798      	blx	r3
     d34:	e015      	b.n	d62 <wifi_callback+0x92>
				clear_state(DOWNLOADING);
     d36:	2008      	movs	r0, #8
     d38:	4b0f      	ldr	r3, [pc, #60]	; (d78 <wifi_callback+0xa8>)
     d3a:	4798      	blx	r3
     d3c:	e7e2      	b.n	d04 <wifi_callback+0x34>
				clear_state(GET_REQUESTED);
     d3e:	2004      	movs	r0, #4
     d40:	4b0d      	ldr	r3, [pc, #52]	; (d78 <wifi_callback+0xa8>)
     d42:	4798      	blx	r3
     d44:	e7e2      	b.n	d0c <wifi_callback+0x3c>
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
     d46:	788b      	ldrb	r3, [r1, #2]
     d48:	784a      	ldrb	r2, [r1, #1]
     d4a:	7808      	ldrb	r0, [r1, #0]
     d4c:	78c9      	ldrb	r1, [r1, #3]
     d4e:	9100      	str	r1, [sp, #0]
     d50:	0001      	movs	r1, r0
     d52:	4810      	ldr	r0, [pc, #64]	; (d94 <wifi_callback+0xc4>)
     d54:	4c05      	ldr	r4, [pc, #20]	; (d6c <wifi_callback+0x9c>)
     d56:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
     d58:	2002      	movs	r0, #2
     d5a:	4b0f      	ldr	r3, [pc, #60]	; (d98 <wifi_callback+0xc8>)
     d5c:	4798      	blx	r3
		start_download();
     d5e:	4b0f      	ldr	r3, [pc, #60]	; (d9c <wifi_callback+0xcc>)
     d60:	4798      	blx	r3
}
     d62:	b003      	add	sp, #12
     d64:	bd30      	pop	{r4, r5, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	0001132c 	.word	0x0001132c
     d6c:	0000bb3d 	.word	0x0000bb3d
     d70:	000112a8 	.word	0x000112a8
     d74:	0000bc59 	.word	0x0000bc59
     d78:	00000a3d 	.word	0x00000a3d
     d7c:	20000614 	.word	0x20000614
     d80:	20000744 	.word	0x20000744
     d84:	0000be9f 	.word	0x0000be9f
     d88:	00007101 	.word	0x00007101
     d8c:	00011268 	.word	0x00011268
     d90:	0000711d 	.word	0x0000711d
     d94:	000112e8 	.word	0x000112e8
     d98:	00000a4d 	.word	0x00000a4d
     d9c:	00000c15 	.word	0x00000c15

00000da0 <verify_flash>:
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	46c6      	mov	lr, r8
     da4:	b500      	push	{lr}
     da6:	b084      	sub	sp, #16
     da8:	9001      	str	r0, [sp, #4]
	crc32_t flash_checksum = 0;
     daa:	2300      	movs	r3, #0
     dac:	9303      	str	r3, [sp, #12]
	printf("starting seed: %04x\r\n", flash_checksum);
     dae:	2100      	movs	r1, #0
     db0:	482e      	ldr	r0, [pc, #184]	; (e6c <verify_flash+0xcc>)
     db2:	4b2f      	ldr	r3, [pc, #188]	; (e70 <verify_flash+0xd0>)
     db4:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
     db6:	4b2f      	ldr	r3, [pc, #188]	; (e74 <verify_flash+0xd4>)
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	2bff      	cmp	r3, #255	; 0xff
     dbc:	d930      	bls.n	e20 <verify_flash+0x80>
     dbe:	2482      	movs	r4, #130	; 0x82
     dc0:	02e4      	lsls	r4, r4, #11
     dc2:	2700      	movs	r7, #0
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW2_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
     dc4:	4d2c      	ldr	r5, [pc, #176]	; (e78 <verify_flash+0xd8>)
     dc6:	4e2d      	ldr	r6, [pc, #180]	; (e7c <verify_flash+0xdc>)
     dc8:	e018      	b.n	dfc <verify_flash+0x5c>
			printf("verify_flash: error trying to read external flash. %d", read_status);
     dca:	0001      	movs	r1, r0
     dcc:	482c      	ldr	r0, [pc, #176]	; (e80 <verify_flash+0xe0>)
     dce:	4b28      	ldr	r3, [pc, #160]	; (e70 <verify_flash+0xd0>)
     dd0:	4798      	blx	r3
			return false;
     dd2:	2000      	movs	r0, #0
     dd4:	e045      	b.n	e62 <verify_flash+0xc2>
			crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &flash_checksum);
     dd6:	aa03      	add	r2, sp, #12
     dd8:	2180      	movs	r1, #128	; 0x80
     dda:	0049      	lsls	r1, r1, #1
     ddc:	4826      	ldr	r0, [pc, #152]	; (e78 <verify_flash+0xd8>)
     dde:	4b29      	ldr	r3, [pc, #164]	; (e84 <verify_flash+0xe4>)
     de0:	4798      	blx	r3
		printf("%d. verify_flash: crc_val: %d\r\n", i, flash_checksum);
     de2:	9a03      	ldr	r2, [sp, #12]
     de4:	0039      	movs	r1, r7
     de6:	4828      	ldr	r0, [pc, #160]	; (e88 <verify_flash+0xe8>)
     de8:	4b21      	ldr	r3, [pc, #132]	; (e70 <verify_flash+0xd0>)
     dea:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
     dec:	3701      	adds	r7, #1
     dee:	4b21      	ldr	r3, [pc, #132]	; (e74 <verify_flash+0xd4>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	3401      	adds	r4, #1
     df4:	34ff      	adds	r4, #255	; 0xff
     df6:	0a1a      	lsrs	r2, r3, #8
     df8:	42ba      	cmp	r2, r7
     dfa:	d911      	bls.n	e20 <verify_flash+0x80>
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW2_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
     dfc:	2380      	movs	r3, #128	; 0x80
     dfe:	005b      	lsls	r3, r3, #1
     e00:	002a      	movs	r2, r5
     e02:	0021      	movs	r1, r4
     e04:	4821      	ldr	r0, [pc, #132]	; (e8c <verify_flash+0xec>)
     e06:	47b0      	blx	r6
		if (STATUS_OK != read_status) {
     e08:	2800      	cmp	r0, #0
     e0a:	d1de      	bne.n	dca <verify_flash+0x2a>
		if (!flash_checksum)
     e0c:	9b03      	ldr	r3, [sp, #12]
     e0e:	2b00      	cmp	r3, #0
     e10:	d1e1      	bne.n	dd6 <verify_flash+0x36>
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;

	return crc32_recalculate(data, length, crc);
     e12:	aa03      	add	r2, sp, #12
     e14:	2180      	movs	r1, #128	; 0x80
     e16:	0049      	lsls	r1, r1, #1
     e18:	4817      	ldr	r0, [pc, #92]	; (e78 <verify_flash+0xd8>)
     e1a:	4b1a      	ldr	r3, [pc, #104]	; (e84 <verify_flash+0xe4>)
     e1c:	4798      	blx	r3
     e1e:	e7e0      	b.n	de2 <verify_flash+0x42>
	int remaining_bytes = total_bytes_written % FLASH_ROW_SIZE;
     e20:	24ff      	movs	r4, #255	; 0xff
     e22:	401c      	ands	r4, r3
	printf("verify_flash: remaining bytes %d\r\n", remaining_bytes);
     e24:	0021      	movs	r1, r4
     e26:	481a      	ldr	r0, [pc, #104]	; (e90 <verify_flash+0xf0>)
     e28:	4f11      	ldr	r7, [pc, #68]	; (e70 <verify_flash+0xd0>)
     e2a:	47b8      	blx	r7
	read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW2_ADDR + (total_bytes_written - remaining_bytes), write_row_buffer, remaining_bytes);
     e2c:	b2a3      	uxth	r3, r4
     e2e:	4d12      	ldr	r5, [pc, #72]	; (e78 <verify_flash+0xd8>)
     e30:	4a10      	ldr	r2, [pc, #64]	; (e74 <verify_flash+0xd4>)
     e32:	6811      	ldr	r1, [r2, #0]
     e34:	2282      	movs	r2, #130	; 0x82
     e36:	02d2      	lsls	r2, r2, #11
     e38:	4694      	mov	ip, r2
     e3a:	4461      	add	r1, ip
     e3c:	1b09      	subs	r1, r1, r4
     e3e:	002a      	movs	r2, r5
     e40:	4812      	ldr	r0, [pc, #72]	; (e8c <verify_flash+0xec>)
     e42:	4e0e      	ldr	r6, [pc, #56]	; (e7c <verify_flash+0xdc>)
     e44:	47b0      	blx	r6
	crc32_recalculate(write_row_buffer, remaining_bytes, &flash_checksum);
     e46:	aa03      	add	r2, sp, #12
     e48:	0021      	movs	r1, r4
     e4a:	0028      	movs	r0, r5
     e4c:	4b0d      	ldr	r3, [pc, #52]	; (e84 <verify_flash+0xe4>)
     e4e:	4798      	blx	r3
	printf("verify_flash: calculated crc32 val: %d\r\n", flash_checksum);
     e50:	9903      	ldr	r1, [sp, #12]
     e52:	4810      	ldr	r0, [pc, #64]	; (e94 <verify_flash+0xf4>)
     e54:	47b8      	blx	r7
	return flash_checksum == known_checksum;
     e56:	9b03      	ldr	r3, [sp, #12]
     e58:	9a01      	ldr	r2, [sp, #4]
     e5a:	1a9e      	subs	r6, r3, r2
     e5c:	4270      	negs	r0, r6
     e5e:	4170      	adcs	r0, r6
     e60:	b2c0      	uxtb	r0, r0
}
     e62:	b004      	add	sp, #16
     e64:	bc04      	pop	{r2}
     e66:	4690      	mov	r8, r2
     e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	000111a8 	.word	0x000111a8
     e70:	0000bb3d 	.word	0x0000bb3d
     e74:	20000608 	.word	0x20000608
     e78:	20000748 	.word	0x20000748
     e7c:	00001a91 	.word	0x00001a91
     e80:	000111c0 	.word	0x000111c0
     e84:	00008f5d 	.word	0x00008f5d
     e88:	000111f8 	.word	0x000111f8
     e8c:	2000060c 	.word	0x2000060c
     e90:	00011218 	.word	0x00011218
     e94:	0001123c 	.word	0x0001123c

00000e98 <store_file_packet>:
{
     e98:	b5f0      	push	{r4, r5, r6, r7, lr}
     e9a:	46de      	mov	lr, fp
     e9c:	4657      	mov	r7, sl
     e9e:	464e      	mov	r6, r9
     ea0:	4645      	mov	r5, r8
     ea2:	b5e0      	push	{r5, r6, r7, lr}
     ea4:	b085      	sub	sp, #20
     ea6:	4680      	mov	r8, r0
     ea8:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
     eaa:	2800      	cmp	r0, #0
     eac:	d00c      	beq.n	ec8 <store_file_packet+0x30>
     eae:	2900      	cmp	r1, #0
     eb0:	d00a      	beq.n	ec8 <store_file_packet+0x30>
	return (down_state & mask) != 0;
     eb2:	4bbb      	ldr	r3, [pc, #748]	; (11a0 <store_file_packet+0x308>)
     eb4:	881b      	ldrh	r3, [r3, #0]
	if (is_state_set(NOT_CHECKED)) {
     eb6:	065a      	lsls	r2, r3, #25
     eb8:	d53d      	bpl.n	f36 <store_file_packet+0x9e>
		if (6 != length) {
     eba:	2906      	cmp	r1, #6
     ebc:	d00e      	beq.n	edc <store_file_packet+0x44>
			printf("store_file_packet [UPDATE_CHECK]: file [%d bytes] does not match header [%d bytes] size\r\n", length, sizeof(fw_header_t));
     ebe:	220c      	movs	r2, #12
     ec0:	48b8      	ldr	r0, [pc, #736]	; (11a4 <store_file_packet+0x30c>)
     ec2:	4bb9      	ldr	r3, [pc, #740]	; (11a8 <store_file_packet+0x310>)
     ec4:	4798      	blx	r3
			return;
     ec6:	e002      	b.n	ece <store_file_packet+0x36>
		printf("store_file_packet: empty data.\r\n");
     ec8:	48b8      	ldr	r0, [pc, #736]	; (11ac <store_file_packet+0x314>)
     eca:	4bb9      	ldr	r3, [pc, #740]	; (11b0 <store_file_packet+0x318>)
     ecc:	4798      	blx	r3
}
     ece:	b005      	add	sp, #20
     ed0:	bc3c      	pop	{r2, r3, r4, r5}
     ed2:	4690      	mov	r8, r2
     ed4:	4699      	mov	r9, r3
     ed6:	46a2      	mov	sl, r4
     ed8:	46ab      	mov	fp, r5
     eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&firmware_header.fw_version, data, 2);
     edc:	ac01      	add	r4, sp, #4
     ede:	2202      	movs	r2, #2
     ee0:	0001      	movs	r1, r0
     ee2:	0020      	movs	r0, r4
     ee4:	4db3      	ldr	r5, [pc, #716]	; (11b4 <store_file_packet+0x31c>)
     ee6:	47a8      	blx	r5
		memcpy(&firmware_header.checksum, data + 2, 4);
     ee8:	4641      	mov	r1, r8
     eea:	3102      	adds	r1, #2
     eec:	2204      	movs	r2, #4
     eee:	a802      	add	r0, sp, #8
     ef0:	47a8      	blx	r5
     ef2:	8824      	ldrh	r4, [r4, #0]
     ef4:	9e02      	ldr	r6, [sp, #8]
	printf("new firmware version: %d\r\n", firmware_header.fw_version);
     ef6:	0021      	movs	r1, r4
     ef8:	48af      	ldr	r0, [pc, #700]	; (11b8 <store_file_packet+0x320>)
     efa:	4dab      	ldr	r5, [pc, #684]	; (11a8 <store_file_packet+0x310>)
     efc:	47a8      	blx	r5
	printf("new firmware checksum: %04x\r\n", firmware_header.checksum);
     efe:	0031      	movs	r1, r6
     f00:	48ae      	ldr	r0, [pc, #696]	; (11bc <store_file_packet+0x324>)
     f02:	47a8      	blx	r5
	if (firmware_header.fw_version > FW_VERSION) {
     f04:	2c00      	cmp	r4, #0
     f06:	d109      	bne.n	f1c <store_file_packet+0x84>
		clear_state(NOT_CHECKED & GET_REQUESTED);
     f08:	2000      	movs	r0, #0
     f0a:	4bad      	ldr	r3, [pc, #692]	; (11c0 <store_file_packet+0x328>)
     f0c:	4798      	blx	r3
		add_state(UPDATE_NOT_AVAILABLE & COMPLETED);
     f0e:	2000      	movs	r0, #0
     f10:	4bac      	ldr	r3, [pc, #688]	; (11c4 <store_file_packet+0x32c>)
     f12:	4798      	blx	r3
		add_state(COMPLETED);
     f14:	2010      	movs	r0, #16
     f16:	4bab      	ldr	r3, [pc, #684]	; (11c4 <store_file_packet+0x32c>)
     f18:	4798      	blx	r3
		return;
     f1a:	e7d8      	b.n	ece <store_file_packet+0x36>
		clear_state(GET_REQUESTED);
     f1c:	2004      	movs	r0, #4
     f1e:	4da8      	ldr	r5, [pc, #672]	; (11c0 <store_file_packet+0x328>)
     f20:	47a8      	blx	r5
		clear_state(NOT_CHECKED);
     f22:	2040      	movs	r0, #64	; 0x40
     f24:	47a8      	blx	r5
		add_state(UPDATE_AVAILABLE);
     f26:	2080      	movs	r0, #128	; 0x80
     f28:	4ba6      	ldr	r3, [pc, #664]	; (11c4 <store_file_packet+0x32c>)
     f2a:	4798      	blx	r3
		new_firmware_checksum = firmware_header.checksum;
     f2c:	4ba6      	ldr	r3, [pc, #664]	; (11c8 <store_file_packet+0x330>)
     f2e:	601e      	str	r6, [r3, #0]
		new_firmware_version = firmware_header.fw_version;
     f30:	4ba6      	ldr	r3, [pc, #664]	; (11cc <store_file_packet+0x334>)
     f32:	801c      	strh	r4, [r3, #0]
     f34:	e7ee      	b.n	f14 <store_file_packet+0x7c>
	} else if (is_state_set(UPDATE_AVAILABLE)) {
     f36:	061a      	lsls	r2, r3, #24
     f38:	d5c9      	bpl.n	ece <store_file_packet+0x36>
		if (!is_state_set(DOWNLOADING)) {
     f3a:	071b      	lsls	r3, r3, #28
     f3c:	d506      	bpl.n	f4c <store_file_packet+0xb4>
{
     f3e:	2500      	movs	r5, #0
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
     f40:	4ba3      	ldr	r3, [pc, #652]	; (11d0 <store_file_packet+0x338>)
     f42:	469a      	mov	sl, r3
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
     f44:	469b      	mov	fp, r3
     f46:	4ba3      	ldr	r3, [pc, #652]	; (11d4 <store_file_packet+0x33c>)
     f48:	4699      	mov	r9, r3
     f4a:	e0dc      	b.n	1106 <store_file_packet+0x26e>
	printf("FW1_ERASE_ADDR: %d\r\n", firmware_starter_address);
     f4c:	49a2      	ldr	r1, [pc, #648]	; (11d8 <store_file_packet+0x340>)
     f4e:	48a3      	ldr	r0, [pc, #652]	; (11dc <store_file_packet+0x344>)
     f50:	4b95      	ldr	r3, [pc, #596]	; (11a8 <store_file_packet+0x310>)
     f52:	4798      	blx	r3
	at25dfx_chip_wake(&at25dfx_chip);
     f54:	4ca2      	ldr	r4, [pc, #648]	; (11e0 <store_file_packet+0x348>)
     f56:	0020      	movs	r0, r4
     f58:	4ba2      	ldr	r3, [pc, #648]	; (11e4 <store_file_packet+0x34c>)
     f5a:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
     f5c:	0020      	movs	r0, r4
     f5e:	4ba2      	ldr	r3, [pc, #648]	; (11e8 <store_file_packet+0x350>)
     f60:	4798      	blx	r3
     f62:	2800      	cmp	r0, #0
     f64:	d145      	bne.n	ff2 <store_file_packet+0x15a>
	status_val = at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
     f66:	2100      	movs	r1, #0
     f68:	489d      	ldr	r0, [pc, #628]	; (11e0 <store_file_packet+0x348>)
     f6a:	4ba0      	ldr	r3, [pc, #640]	; (11ec <store_file_packet+0x354>)
     f6c:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     f6e:	2800      	cmp	r0, #0
     f70:	d156      	bne.n	1020 <store_file_packet+0x188>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address, AT25DFX_BLOCK_SIZE_64KB);
     f72:	2202      	movs	r2, #2
     f74:	4998      	ldr	r1, [pc, #608]	; (11d8 <store_file_packet+0x340>)
     f76:	489a      	ldr	r0, [pc, #616]	; (11e0 <store_file_packet+0x348>)
     f78:	4b9d      	ldr	r3, [pc, #628]	; (11f0 <store_file_packet+0x358>)
     f7a:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     f7c:	2800      	cmp	r0, #0
     f7e:	d157      	bne.n	1030 <store_file_packet+0x198>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 1), AT25DFX_BLOCK_SIZE_64KB);
     f80:	2202      	movs	r2, #2
     f82:	499c      	ldr	r1, [pc, #624]	; (11f4 <store_file_packet+0x35c>)
     f84:	4896      	ldr	r0, [pc, #600]	; (11e0 <store_file_packet+0x348>)
     f86:	4b9a      	ldr	r3, [pc, #616]	; (11f0 <store_file_packet+0x358>)
     f88:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     f8a:	2800      	cmp	r0, #0
     f8c:	d158      	bne.n	1040 <store_file_packet+0x1a8>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2), AT25DFX_BLOCK_SIZE_64KB);
     f8e:	2202      	movs	r2, #2
     f90:	4999      	ldr	r1, [pc, #612]	; (11f8 <store_file_packet+0x360>)
     f92:	4893      	ldr	r0, [pc, #588]	; (11e0 <store_file_packet+0x348>)
     f94:	4b96      	ldr	r3, [pc, #600]	; (11f0 <store_file_packet+0x358>)
     f96:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     f98:	2800      	cmp	r0, #0
     f9a:	d156      	bne.n	104a <store_file_packet+0x1b2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0), AT25DFX_BLOCK_SIZE_32KB);
     f9c:	2201      	movs	r2, #1
     f9e:	4997      	ldr	r1, [pc, #604]	; (11fc <store_file_packet+0x364>)
     fa0:	488f      	ldr	r0, [pc, #572]	; (11e0 <store_file_packet+0x348>)
     fa2:	4b93      	ldr	r3, [pc, #588]	; (11f0 <store_file_packet+0x358>)
     fa4:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     fa6:	2800      	cmp	r0, #0
     fa8:	d157      	bne.n	105a <store_file_packet+0x1c2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0), AT25DFX_BLOCK_SIZE_4KB);
     faa:	2200      	movs	r2, #0
     fac:	4994      	ldr	r1, [pc, #592]	; (1200 <store_file_packet+0x368>)
     fae:	488c      	ldr	r0, [pc, #560]	; (11e0 <store_file_packet+0x348>)
     fb0:	4b8f      	ldr	r3, [pc, #572]	; (11f0 <store_file_packet+0x358>)
     fb2:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     fb4:	2800      	cmp	r0, #0
     fb6:	d158      	bne.n	106a <store_file_packet+0x1d2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1), AT25DFX_BLOCK_SIZE_4KB);
     fb8:	2200      	movs	r2, #0
     fba:	4992      	ldr	r1, [pc, #584]	; (1204 <store_file_packet+0x36c>)
     fbc:	4888      	ldr	r0, [pc, #544]	; (11e0 <store_file_packet+0x348>)
     fbe:	4b8c      	ldr	r3, [pc, #560]	; (11f0 <store_file_packet+0x358>)
     fc0:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     fc2:	2800      	cmp	r0, #0
     fc4:	d159      	bne.n	107a <store_file_packet+0x1e2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2), AT25DFX_BLOCK_SIZE_4KB);
     fc6:	2200      	movs	r2, #0
     fc8:	498f      	ldr	r1, [pc, #572]	; (1208 <store_file_packet+0x370>)
     fca:	4885      	ldr	r0, [pc, #532]	; (11e0 <store_file_packet+0x348>)
     fcc:	4b88      	ldr	r3, [pc, #544]	; (11f0 <store_file_packet+0x358>)
     fce:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     fd0:	2800      	cmp	r0, #0
     fd2:	d15a      	bne.n	108a <store_file_packet+0x1f2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3), AT25DFX_BLOCK_SIZE_4KB);
     fd4:	2200      	movs	r2, #0
     fd6:	498d      	ldr	r1, [pc, #564]	; (120c <store_file_packet+0x374>)
     fd8:	4881      	ldr	r0, [pc, #516]	; (11e0 <store_file_packet+0x348>)
     fda:	4b85      	ldr	r3, [pc, #532]	; (11f0 <store_file_packet+0x358>)
     fdc:	4798      	blx	r3
	if (STATUS_OK != status_val) {
     fde:	2800      	cmp	r0, #0
     fe0:	d05b      	beq.n	109a <store_file_packet+0x202>
		add_state(CANCELED);
     fe2:	2020      	movs	r0, #32
     fe4:	4b77      	ldr	r3, [pc, #476]	; (11c4 <store_file_packet+0x32c>)
     fe6:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
     fe8:	4988      	ldr	r1, [pc, #544]	; (120c <store_file_packet+0x374>)
     fea:	4889      	ldr	r0, [pc, #548]	; (1210 <store_file_packet+0x378>)
     fec:	4b6e      	ldr	r3, [pc, #440]	; (11a8 <store_file_packet+0x310>)
     fee:	4798      	blx	r3
     ff0:	e002      	b.n	ff8 <store_file_packet+0x160>
		printf("store_file_packet: No flash chip.\r\n");
     ff2:	4888      	ldr	r0, [pc, #544]	; (1214 <store_file_packet+0x37c>)
     ff4:	4b6e      	ldr	r3, [pc, #440]	; (11b0 <store_file_packet+0x318>)
     ff6:	4798      	blx	r3
			received_file_size = 0;
     ff8:	2300      	movs	r3, #0
     ffa:	4a87      	ldr	r2, [pc, #540]	; (1218 <store_file_packet+0x380>)
     ffc:	6013      	str	r3, [r2, #0]
			write_address = FW2_ADDR; //TODO: MAKE GENERIC SO CAN OTA CLI
     ffe:	2182      	movs	r1, #130	; 0x82
    1000:	02c9      	lsls	r1, r1, #11
    1002:	4a86      	ldr	r2, [pc, #536]	; (121c <store_file_packet+0x384>)
    1004:	6011      	str	r1, [r2, #0]
			buffer_cursor = 0;
    1006:	4a72      	ldr	r2, [pc, #456]	; (11d0 <store_file_packet+0x338>)
    1008:	7013      	strb	r3, [r2, #0]
			total_bytes_written = 0;
    100a:	4a85      	ldr	r2, [pc, #532]	; (1220 <store_file_packet+0x388>)
    100c:	6013      	str	r3, [r2, #0]
			printf("starting val: ", crc_val);
    100e:	4b85      	ldr	r3, [pc, #532]	; (1224 <store_file_packet+0x38c>)
    1010:	6819      	ldr	r1, [r3, #0]
    1012:	4885      	ldr	r0, [pc, #532]	; (1228 <store_file_packet+0x390>)
    1014:	4b64      	ldr	r3, [pc, #400]	; (11a8 <store_file_packet+0x310>)
    1016:	4798      	blx	r3
			add_state(DOWNLOADING);
    1018:	2008      	movs	r0, #8
    101a:	4b6a      	ldr	r3, [pc, #424]	; (11c4 <store_file_packet+0x32c>)
    101c:	4798      	blx	r3
    101e:	e78e      	b.n	f3e <store_file_packet+0xa6>
		add_state(CANCELED);
    1020:	2020      	movs	r0, #32
    1022:	4b68      	ldr	r3, [pc, #416]	; (11c4 <store_file_packet+0x32c>)
    1024:	4798      	blx	r3
		printf("store_file_packet: error clearing sector protect at address %d \r\n", SIXTY_FOUR_KB);
    1026:	4981      	ldr	r1, [pc, #516]	; (122c <store_file_packet+0x394>)
    1028:	4881      	ldr	r0, [pc, #516]	; (1230 <store_file_packet+0x398>)
    102a:	4b5f      	ldr	r3, [pc, #380]	; (11a8 <store_file_packet+0x310>)
    102c:	4798      	blx	r3
    102e:	e7e3      	b.n	ff8 <store_file_packet+0x160>
		add_state(CANCELED);
    1030:	2020      	movs	r0, #32
    1032:	4b64      	ldr	r3, [pc, #400]	; (11c4 <store_file_packet+0x32c>)
    1034:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address);
    1036:	4968      	ldr	r1, [pc, #416]	; (11d8 <store_file_packet+0x340>)
    1038:	4875      	ldr	r0, [pc, #468]	; (1210 <store_file_packet+0x378>)
    103a:	4b5b      	ldr	r3, [pc, #364]	; (11a8 <store_file_packet+0x310>)
    103c:	4798      	blx	r3
    103e:	e7db      	b.n	ff8 <store_file_packet+0x160>
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 1));
    1040:	496c      	ldr	r1, [pc, #432]	; (11f4 <store_file_packet+0x35c>)
    1042:	4873      	ldr	r0, [pc, #460]	; (1210 <store_file_packet+0x378>)
    1044:	4b58      	ldr	r3, [pc, #352]	; (11a8 <store_file_packet+0x310>)
    1046:	4798      	blx	r3
    1048:	e7d6      	b.n	ff8 <store_file_packet+0x160>
		add_state(CANCELED);
    104a:	2020      	movs	r0, #32
    104c:	4b5d      	ldr	r3, [pc, #372]	; (11c4 <store_file_packet+0x32c>)
    104e:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2));
    1050:	4969      	ldr	r1, [pc, #420]	; (11f8 <store_file_packet+0x360>)
    1052:	486f      	ldr	r0, [pc, #444]	; (1210 <store_file_packet+0x378>)
    1054:	4b54      	ldr	r3, [pc, #336]	; (11a8 <store_file_packet+0x310>)
    1056:	4798      	blx	r3
    1058:	e7ce      	b.n	ff8 <store_file_packet+0x160>
		add_state(CANCELED);
    105a:	2020      	movs	r0, #32
    105c:	4b59      	ldr	r3, [pc, #356]	; (11c4 <store_file_packet+0x32c>)
    105e:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0));
    1060:	4966      	ldr	r1, [pc, #408]	; (11fc <store_file_packet+0x364>)
    1062:	486b      	ldr	r0, [pc, #428]	; (1210 <store_file_packet+0x378>)
    1064:	4b50      	ldr	r3, [pc, #320]	; (11a8 <store_file_packet+0x310>)
    1066:	4798      	blx	r3
    1068:	e7c6      	b.n	ff8 <store_file_packet+0x160>
		add_state(CANCELED);
    106a:	2020      	movs	r0, #32
    106c:	4b55      	ldr	r3, [pc, #340]	; (11c4 <store_file_packet+0x32c>)
    106e:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0));
    1070:	4963      	ldr	r1, [pc, #396]	; (1200 <store_file_packet+0x368>)
    1072:	4867      	ldr	r0, [pc, #412]	; (1210 <store_file_packet+0x378>)
    1074:	4b4c      	ldr	r3, [pc, #304]	; (11a8 <store_file_packet+0x310>)
    1076:	4798      	blx	r3
    1078:	e7be      	b.n	ff8 <store_file_packet+0x160>
		add_state(CANCELED);
    107a:	2020      	movs	r0, #32
    107c:	4b51      	ldr	r3, [pc, #324]	; (11c4 <store_file_packet+0x32c>)
    107e:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1));
    1080:	4960      	ldr	r1, [pc, #384]	; (1204 <store_file_packet+0x36c>)
    1082:	4863      	ldr	r0, [pc, #396]	; (1210 <store_file_packet+0x378>)
    1084:	4b48      	ldr	r3, [pc, #288]	; (11a8 <store_file_packet+0x310>)
    1086:	4798      	blx	r3
    1088:	e7b6      	b.n	ff8 <store_file_packet+0x160>
		add_state(CANCELED);
    108a:	2020      	movs	r0, #32
    108c:	4b4d      	ldr	r3, [pc, #308]	; (11c4 <store_file_packet+0x32c>)
    108e:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2));
    1090:	495d      	ldr	r1, [pc, #372]	; (1208 <store_file_packet+0x370>)
    1092:	485f      	ldr	r0, [pc, #380]	; (1210 <store_file_packet+0x378>)
    1094:	4b44      	ldr	r3, [pc, #272]	; (11a8 <store_file_packet+0x310>)
    1096:	4798      	blx	r3
    1098:	e7ae      	b.n	ff8 <store_file_packet+0x160>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4), AT25DFX_BLOCK_SIZE_4KB);
    109a:	2200      	movs	r2, #0
    109c:	4965      	ldr	r1, [pc, #404]	; (1234 <store_file_packet+0x39c>)
    109e:	4850      	ldr	r0, [pc, #320]	; (11e0 <store_file_packet+0x348>)
    10a0:	4b53      	ldr	r3, [pc, #332]	; (11f0 <store_file_packet+0x358>)
    10a2:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    10a4:	2800      	cmp	r0, #0
    10a6:	d115      	bne.n	10d4 <store_file_packet+0x23c>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5), AT25DFX_BLOCK_SIZE_4KB);
    10a8:	2200      	movs	r2, #0
    10aa:	4963      	ldr	r1, [pc, #396]	; (1238 <store_file_packet+0x3a0>)
    10ac:	484c      	ldr	r0, [pc, #304]	; (11e0 <store_file_packet+0x348>)
    10ae:	4b50      	ldr	r3, [pc, #320]	; (11f0 <store_file_packet+0x358>)
    10b0:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    10b2:	2800      	cmp	r0, #0
    10b4:	d116      	bne.n	10e4 <store_file_packet+0x24c>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 6), AT25DFX_BLOCK_SIZE_4KB);
    10b6:	2200      	movs	r2, #0
    10b8:	4960      	ldr	r1, [pc, #384]	; (123c <store_file_packet+0x3a4>)
    10ba:	4849      	ldr	r0, [pc, #292]	; (11e0 <store_file_packet+0x348>)
    10bc:	4b4c      	ldr	r3, [pc, #304]	; (11f0 <store_file_packet+0x358>)
    10be:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    10c0:	2800      	cmp	r0, #0
    10c2:	d017      	beq.n	10f4 <store_file_packet+0x25c>
		add_state(CANCELED);
    10c4:	2020      	movs	r0, #32
    10c6:	4b3f      	ldr	r3, [pc, #252]	; (11c4 <store_file_packet+0x32c>)
    10c8:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    10ca:	4950      	ldr	r1, [pc, #320]	; (120c <store_file_packet+0x374>)
    10cc:	4850      	ldr	r0, [pc, #320]	; (1210 <store_file_packet+0x378>)
    10ce:	4b36      	ldr	r3, [pc, #216]	; (11a8 <store_file_packet+0x310>)
    10d0:	4798      	blx	r3
    10d2:	e791      	b.n	ff8 <store_file_packet+0x160>
		add_state(CANCELED);
    10d4:	2020      	movs	r0, #32
    10d6:	4b3b      	ldr	r3, [pc, #236]	; (11c4 <store_file_packet+0x32c>)
    10d8:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4));
    10da:	4956      	ldr	r1, [pc, #344]	; (1234 <store_file_packet+0x39c>)
    10dc:	484c      	ldr	r0, [pc, #304]	; (1210 <store_file_packet+0x378>)
    10de:	4b32      	ldr	r3, [pc, #200]	; (11a8 <store_file_packet+0x310>)
    10e0:	4798      	blx	r3
    10e2:	e789      	b.n	ff8 <store_file_packet+0x160>
		add_state(CANCELED);
    10e4:	2020      	movs	r0, #32
    10e6:	4b37      	ldr	r3, [pc, #220]	; (11c4 <store_file_packet+0x32c>)
    10e8:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5));
    10ea:	4953      	ldr	r1, [pc, #332]	; (1238 <store_file_packet+0x3a0>)
    10ec:	4848      	ldr	r0, [pc, #288]	; (1210 <store_file_packet+0x378>)
    10ee:	4b2e      	ldr	r3, [pc, #184]	; (11a8 <store_file_packet+0x310>)
    10f0:	4798      	blx	r3
    10f2:	e781      	b.n	ff8 <store_file_packet+0x160>
	at25dfx_chip_sleep(&at25dfx_chip);
    10f4:	483a      	ldr	r0, [pc, #232]	; (11e0 <store_file_packet+0x348>)
    10f6:	4b52      	ldr	r3, [pc, #328]	; (1240 <store_file_packet+0x3a8>)
    10f8:	4798      	blx	r3
    10fa:	e77d      	b.n	ff8 <store_file_packet+0x160>
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    10fc:	1b77      	subs	r7, r6, r5
    10fe:	b2bf      	uxth	r7, r7
    1100:	e00f      	b.n	1122 <store_file_packet+0x28a>
				if (buffer_cursor == (FLASH_ROW_SIZE - 1)) {
    1102:	2cff      	cmp	r4, #255	; 0xff
    1104:	d01f      	beq.n	1146 <store_file_packet+0x2ae>
			while (bytes_written < length) {
    1106:	0029      	movs	r1, r5
    1108:	42ae      	cmp	r6, r5
    110a:	d800      	bhi.n	110e <store_file_packet+0x276>
    110c:	e0a0      	b.n	1250 <store_file_packet+0x3b8>
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    110e:	002b      	movs	r3, r5
    1110:	33ff      	adds	r3, #255	; 0xff
    1112:	429e      	cmp	r6, r3
    1114:	d9f2      	bls.n	10fc <store_file_packet+0x264>
    1116:	4653      	mov	r3, sl
    1118:	781a      	ldrb	r2, [r3, #0]
    111a:	2480      	movs	r4, #128	; 0x80
    111c:	0064      	lsls	r4, r4, #1
    111e:	1aa4      	subs	r4, r4, r2
    1120:	b2a7      	uxth	r7, r4
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    1122:	465b      	mov	r3, fp
    1124:	781c      	ldrb	r4, [r3, #0]
    1126:	464b      	mov	r3, r9
    1128:	18e0      	adds	r0, r4, r3
				unsigned int data_cursor = data + bytes_written;
    112a:	4441      	add	r1, r8
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    112c:	003a      	movs	r2, r7
    112e:	4b21      	ldr	r3, [pc, #132]	; (11b4 <store_file_packet+0x31c>)
    1130:	4798      	blx	r3
				bytes_written += num_bytes_to_buffer;
    1132:	19ed      	adds	r5, r5, r7
				buffer_cursor = buffer_cursor + num_bytes_to_buffer;
    1134:	19e4      	adds	r4, r4, r7
    1136:	b2e4      	uxtb	r4, r4
    1138:	465b      	mov	r3, fp
    113a:	701c      	strb	r4, [r3, #0]
				if (buffer_cursor == 0)
    113c:	2c00      	cmp	r4, #0
    113e:	d1e0      	bne.n	1102 <store_file_packet+0x26a>
					buffer_cursor = (FLASH_ROW_SIZE - 1);
    1140:	22ff      	movs	r2, #255	; 0xff
    1142:	4b23      	ldr	r3, [pc, #140]	; (11d0 <store_file_packet+0x338>)
    1144:	701a      	strb	r2, [r3, #0]
					status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, FLASH_ROW_SIZE);
    1146:	4b35      	ldr	r3, [pc, #212]	; (121c <store_file_packet+0x384>)
    1148:	6819      	ldr	r1, [r3, #0]
    114a:	2380      	movs	r3, #128	; 0x80
    114c:	005b      	lsls	r3, r3, #1
    114e:	4a21      	ldr	r2, [pc, #132]	; (11d4 <store_file_packet+0x33c>)
    1150:	4823      	ldr	r0, [pc, #140]	; (11e0 <store_file_packet+0x348>)
    1152:	4c3c      	ldr	r4, [pc, #240]	; (1244 <store_file_packet+0x3ac>)
    1154:	47a0      	blx	r4
					if (STATUS_OK != status_val) {
    1156:	2800      	cmp	r0, #0
    1158:	d112      	bne.n	1180 <store_file_packet+0x2e8>
					buffer_cursor = 0;
    115a:	2200      	movs	r2, #0
    115c:	4b1c      	ldr	r3, [pc, #112]	; (11d0 <store_file_packet+0x338>)
    115e:	701a      	strb	r2, [r3, #0]
					write_address += FLASH_ROW_SIZE;
    1160:	4a2e      	ldr	r2, [pc, #184]	; (121c <store_file_packet+0x384>)
    1162:	6813      	ldr	r3, [r2, #0]
    1164:	3301      	adds	r3, #1
    1166:	33ff      	adds	r3, #255	; 0xff
    1168:	6013      	str	r3, [r2, #0]
					if (!crc_val)
    116a:	4b2e      	ldr	r3, [pc, #184]	; (1224 <store_file_packet+0x38c>)
    116c:	681b      	ldr	r3, [r3, #0]
    116e:	2b00      	cmp	r3, #0
    1170:	d10f      	bne.n	1192 <store_file_packet+0x2fa>
    1172:	4a2c      	ldr	r2, [pc, #176]	; (1224 <store_file_packet+0x38c>)
    1174:	2180      	movs	r1, #128	; 0x80
    1176:	0049      	lsls	r1, r1, #1
    1178:	4816      	ldr	r0, [pc, #88]	; (11d4 <store_file_packet+0x33c>)
    117a:	4b33      	ldr	r3, [pc, #204]	; (1248 <store_file_packet+0x3b0>)
    117c:	4798      	blx	r3
    117e:	e7c2      	b.n	1106 <store_file_packet+0x26e>
						add_state(CANCELED);
    1180:	2020      	movs	r0, #32
    1182:	4b10      	ldr	r3, [pc, #64]	; (11c4 <store_file_packet+0x32c>)
    1184:	4798      	blx	r3
						printf("store_file_packet: error writing row at address %d \r\n", write_address);
    1186:	4b25      	ldr	r3, [pc, #148]	; (121c <store_file_packet+0x384>)
    1188:	6819      	ldr	r1, [r3, #0]
    118a:	4830      	ldr	r0, [pc, #192]	; (124c <store_file_packet+0x3b4>)
    118c:	4b06      	ldr	r3, [pc, #24]	; (11a8 <store_file_packet+0x310>)
    118e:	4798      	blx	r3
						return;
    1190:	e69d      	b.n	ece <store_file_packet+0x36>
						crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &crc_val);
    1192:	4a24      	ldr	r2, [pc, #144]	; (1224 <store_file_packet+0x38c>)
    1194:	2180      	movs	r1, #128	; 0x80
    1196:	0049      	lsls	r1, r1, #1
    1198:	480e      	ldr	r0, [pc, #56]	; (11d4 <store_file_packet+0x33c>)
    119a:	4b2b      	ldr	r3, [pc, #172]	; (1248 <store_file_packet+0x3b0>)
    119c:	4798      	blx	r3
    119e:	e7b2      	b.n	1106 <store_file_packet+0x26e>
    11a0:	20000614 	.word	0x20000614
    11a4:	00010dfc 	.word	0x00010dfc
    11a8:	0000bb3d 	.word	0x0000bb3d
    11ac:	00010ddc 	.word	0x00010ddc
    11b0:	0000bc59 	.word	0x0000bc59
    11b4:	0000b0c5 	.word	0x0000b0c5
    11b8:	00010e58 	.word	0x00010e58
    11bc:	00010e74 	.word	0x00010e74
    11c0:	00000a3d 	.word	0x00000a3d
    11c4:	00000a4d 	.word	0x00000a4d
    11c8:	2000020c 	.word	0x2000020c
    11cc:	20000210 	.word	0x20000210
    11d0:	20000740 	.word	0x20000740
    11d4:	20000748 	.word	0x20000748
    11d8:	0003fffc 	.word	0x0003fffc
    11dc:	00010e94 	.word	0x00010e94
    11e0:	2000060c 	.word	0x2000060c
    11e4:	00002359 	.word	0x00002359
    11e8:	00001985 	.word	0x00001985
    11ec:	000021dd 	.word	0x000021dd
    11f0:	00001fc5 	.word	0x00001fc5
    11f4:	0004fffb 	.word	0x0004fffb
    11f8:	0005fffa 	.word	0x0005fffa
    11fc:	0006fff9 	.word	0x0006fff9
    1200:	00067ff9 	.word	0x00067ff9
    1204:	00068ff8 	.word	0x00068ff8
    1208:	00069ff7 	.word	0x00069ff7
    120c:	0006aff6 	.word	0x0006aff6
    1210:	00010f14 	.word	0x00010f14
    1214:	00010eac 	.word	0x00010eac
    1218:	20000214 	.word	0x20000214
    121c:	2000073c 	.word	0x2000073c
    1220:	20000608 	.word	0x20000608
    1224:	20000204 	.word	0x20000204
    1228:	00010f50 	.word	0x00010f50
    122c:	0000ffff 	.word	0x0000ffff
    1230:	00010ed0 	.word	0x00010ed0
    1234:	0006bff5 	.word	0x0006bff5
    1238:	0006cff4 	.word	0x0006cff4
    123c:	0006dff3 	.word	0x0006dff3
    1240:	000022cd 	.word	0x000022cd
    1244:	00001b89 	.word	0x00001b89
    1248:	00008f5d 	.word	0x00008f5d
    124c:	00010f60 	.word	0x00010f60
			total_bytes_written += bytes_written;
    1250:	4b2d      	ldr	r3, [pc, #180]	; (1308 <store_file_packet+0x470>)
    1252:	681a      	ldr	r2, [r3, #0]
    1254:	4694      	mov	ip, r2
    1256:	4461      	add	r1, ip
    1258:	6019      	str	r1, [r3, #0]
			received_file_size += length;
    125a:	4c2c      	ldr	r4, [pc, #176]	; (130c <store_file_packet+0x474>)
    125c:	6823      	ldr	r3, [r4, #0]
    125e:	18f1      	adds	r1, r6, r3
    1260:	6021      	str	r1, [r4, #0]
			printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    1262:	4d2b      	ldr	r5, [pc, #172]	; (1310 <store_file_packet+0x478>)
    1264:	682a      	ldr	r2, [r5, #0]
    1266:	482b      	ldr	r0, [pc, #172]	; (1314 <store_file_packet+0x47c>)
    1268:	4b2b      	ldr	r3, [pc, #172]	; (1318 <store_file_packet+0x480>)
    126a:	4798      	blx	r3
			if (received_file_size >= http_file_size) {
    126c:	6822      	ldr	r2, [r4, #0]
    126e:	682b      	ldr	r3, [r5, #0]
    1270:	429a      	cmp	r2, r3
    1272:	d200      	bcs.n	1276 <store_file_packet+0x3de>
    1274:	e62b      	b.n	ece <store_file_packet+0x36>
				status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, buffer_cursor);
    1276:	4b29      	ldr	r3, [pc, #164]	; (131c <store_file_packet+0x484>)
    1278:	781b      	ldrb	r3, [r3, #0]
    127a:	4a29      	ldr	r2, [pc, #164]	; (1320 <store_file_packet+0x488>)
    127c:	6811      	ldr	r1, [r2, #0]
    127e:	4a29      	ldr	r2, [pc, #164]	; (1324 <store_file_packet+0x48c>)
    1280:	4829      	ldr	r0, [pc, #164]	; (1328 <store_file_packet+0x490>)
    1282:	4c2a      	ldr	r4, [pc, #168]	; (132c <store_file_packet+0x494>)
    1284:	47a0      	blx	r4
				if (STATUS_OK != status_val) {
    1286:	2800      	cmp	r0, #0
    1288:	d11e      	bne.n	12c8 <store_file_packet+0x430>
				crc32_recalculate(write_row_buffer, buffer_cursor, &crc_val);
    128a:	4c29      	ldr	r4, [pc, #164]	; (1330 <store_file_packet+0x498>)
    128c:	4b23      	ldr	r3, [pc, #140]	; (131c <store_file_packet+0x484>)
    128e:	7819      	ldrb	r1, [r3, #0]
    1290:	0022      	movs	r2, r4
    1292:	4824      	ldr	r0, [pc, #144]	; (1324 <store_file_packet+0x48c>)
    1294:	4b27      	ldr	r3, [pc, #156]	; (1334 <store_file_packet+0x49c>)
    1296:	4798      	blx	r3
				printf("store_file_packet: file downloaded successfully.\r\n");
    1298:	4827      	ldr	r0, [pc, #156]	; (1338 <store_file_packet+0x4a0>)
    129a:	4b28      	ldr	r3, [pc, #160]	; (133c <store_file_packet+0x4a4>)
    129c:	4798      	blx	r3
				if (verify_flash(crc_val)) {
    129e:	6820      	ldr	r0, [r4, #0]
    12a0:	4b27      	ldr	r3, [pc, #156]	; (1340 <store_file_packet+0x4a8>)
    12a2:	4798      	blx	r3
    12a4:	2800      	cmp	r0, #0
    12a6:	d018      	beq.n	12da <store_file_packet+0x442>
					printf("store_file_packet: flash successfully written with no errors\r\n");
    12a8:	4826      	ldr	r0, [pc, #152]	; (1344 <store_file_packet+0x4ac>)
    12aa:	4b24      	ldr	r3, [pc, #144]	; (133c <store_file_packet+0x4a4>)
    12ac:	4798      	blx	r3
				if (crc_val != new_firmware_checksum) {
    12ae:	4b20      	ldr	r3, [pc, #128]	; (1330 <store_file_packet+0x498>)
    12b0:	681a      	ldr	r2, [r3, #0]
    12b2:	4b25      	ldr	r3, [pc, #148]	; (1348 <store_file_packet+0x4b0>)
    12b4:	6819      	ldr	r1, [r3, #0]
    12b6:	428a      	cmp	r2, r1
    12b8:	d016      	beq.n	12e8 <store_file_packet+0x450>
					printf("store_file_packet: file checksums don't match.\r\n Expected checksum %04x\r\n Received checksum %04x\r\n", new_firmware_checksum, crc_val);
    12ba:	4824      	ldr	r0, [pc, #144]	; (134c <store_file_packet+0x4b4>)
    12bc:	4b16      	ldr	r3, [pc, #88]	; (1318 <store_file_packet+0x480>)
    12be:	4798      	blx	r3
					add_state(CANCELED);
    12c0:	2020      	movs	r0, #32
    12c2:	4b23      	ldr	r3, [pc, #140]	; (1350 <store_file_packet+0x4b8>)
    12c4:	4798      	blx	r3
					return;
    12c6:	e602      	b.n	ece <store_file_packet+0x36>
					add_state(CANCELED);
    12c8:	2020      	movs	r0, #32
    12ca:	4b21      	ldr	r3, [pc, #132]	; (1350 <store_file_packet+0x4b8>)
    12cc:	4798      	blx	r3
					printf("store_file_packet: error writing row at address %d \r\n", write_address);
    12ce:	4b14      	ldr	r3, [pc, #80]	; (1320 <store_file_packet+0x488>)
    12d0:	6819      	ldr	r1, [r3, #0]
    12d2:	4820      	ldr	r0, [pc, #128]	; (1354 <store_file_packet+0x4bc>)
    12d4:	4b10      	ldr	r3, [pc, #64]	; (1318 <store_file_packet+0x480>)
    12d6:	4798      	blx	r3
					return;
    12d8:	e5f9      	b.n	ece <store_file_packet+0x36>
					printf("store_file_packet: flash corrupted.\r\n");
    12da:	481f      	ldr	r0, [pc, #124]	; (1358 <store_file_packet+0x4c0>)
    12dc:	4b17      	ldr	r3, [pc, #92]	; (133c <store_file_packet+0x4a4>)
    12de:	4798      	blx	r3
					add_state(CANCELED);
    12e0:	2020      	movs	r0, #32
    12e2:	4b1b      	ldr	r3, [pc, #108]	; (1350 <store_file_packet+0x4b8>)
    12e4:	4798      	blx	r3
					return;
    12e6:	e5f2      	b.n	ece <store_file_packet+0x36>
					update_boot_status();
    12e8:	4b1c      	ldr	r3, [pc, #112]	; (135c <store_file_packet+0x4c4>)
    12ea:	4798      	blx	r3
					write_firmware_metadata(FW1_ADDR, new_firmware_version, new_firmware_checksum, received_file_size);
    12ec:	4b07      	ldr	r3, [pc, #28]	; (130c <store_file_packet+0x474>)
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	4a15      	ldr	r2, [pc, #84]	; (1348 <store_file_packet+0x4b0>)
    12f2:	6812      	ldr	r2, [r2, #0]
    12f4:	491a      	ldr	r1, [pc, #104]	; (1360 <store_file_packet+0x4c8>)
    12f6:	8809      	ldrh	r1, [r1, #0]
    12f8:	2080      	movs	r0, #128	; 0x80
    12fa:	0180      	lsls	r0, r0, #6
    12fc:	4c19      	ldr	r4, [pc, #100]	; (1364 <store_file_packet+0x4cc>)
    12fe:	47a0      	blx	r4
					add_state(COMPLETED);
    1300:	2010      	movs	r0, #16
    1302:	4b13      	ldr	r3, [pc, #76]	; (1350 <store_file_packet+0x4b8>)
    1304:	4798      	blx	r3
				return;
    1306:	e5e2      	b.n	ece <store_file_packet+0x36>
    1308:	20000608 	.word	0x20000608
    130c:	20000214 	.word	0x20000214
    1310:	20000208 	.word	0x20000208
    1314:	00010f98 	.word	0x00010f98
    1318:	0000bb3d 	.word	0x0000bb3d
    131c:	20000740 	.word	0x20000740
    1320:	2000073c 	.word	0x2000073c
    1324:	20000748 	.word	0x20000748
    1328:	2000060c 	.word	0x2000060c
    132c:	00001b89 	.word	0x00001b89
    1330:	20000204 	.word	0x20000204
    1334:	00008f5d 	.word	0x00008f5d
    1338:	00010fcc 	.word	0x00010fcc
    133c:	0000bc59 	.word	0x0000bc59
    1340:	00000da1 	.word	0x00000da1
    1344:	00011000 	.word	0x00011000
    1348:	2000020c 	.word	0x2000020c
    134c:	00011068 	.word	0x00011068
    1350:	00000a4d 	.word	0x00000a4d
    1354:	00010f60 	.word	0x00010f60
    1358:	00011040 	.word	0x00011040
    135c:	00000ae9 	.word	0x00000ae9
    1360:	20000210 	.word	0x20000210
    1364:	00000a8d 	.word	0x00000a8d

00001368 <http_client_callback>:
{
    1368:	b510      	push	{r4, lr}
    136a:	0014      	movs	r4, r2
	switch (evt) {
    136c:	2904      	cmp	r1, #4
    136e:	d806      	bhi.n	137e <http_client_callback+0x16>
    1370:	0089      	lsls	r1, r1, #2
    1372:	4b21      	ldr	r3, [pc, #132]	; (13f8 <http_client_callback+0x90>)
    1374:	585b      	ldr	r3, [r3, r1]
    1376:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    1378:	4820      	ldr	r0, [pc, #128]	; (13fc <http_client_callback+0x94>)
    137a:	4b21      	ldr	r3, [pc, #132]	; (1400 <http_client_callback+0x98>)
    137c:	4798      	blx	r3
}
    137e:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    1380:	4820      	ldr	r0, [pc, #128]	; (1404 <http_client_callback+0x9c>)
    1382:	4b1f      	ldr	r3, [pc, #124]	; (1400 <http_client_callback+0x98>)
    1384:	4798      	blx	r3
		add_state(GET_REQUESTED);
    1386:	2004      	movs	r0, #4
    1388:	4b1f      	ldr	r3, [pc, #124]	; (1408 <http_client_callback+0xa0>)
    138a:	4798      	blx	r3
		break;
    138c:	e7f7      	b.n	137e <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    138e:	8811      	ldrh	r1, [r2, #0]
    1390:	6852      	ldr	r2, [r2, #4]
    1392:	481e      	ldr	r0, [pc, #120]	; (140c <http_client_callback+0xa4>)
    1394:	4b1e      	ldr	r3, [pc, #120]	; (1410 <http_client_callback+0xa8>)
    1396:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    1398:	8823      	ldrh	r3, [r4, #0]
    139a:	2bc8      	cmp	r3, #200	; 0xc8
    139c:	d10c      	bne.n	13b8 <http_client_callback+0x50>
			http_file_size = data->recv_response.content_length;
    139e:	6861      	ldr	r1, [r4, #4]
    13a0:	4b1c      	ldr	r3, [pc, #112]	; (1414 <http_client_callback+0xac>)
    13a2:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    13a4:	2200      	movs	r2, #0
    13a6:	4b1c      	ldr	r3, [pc, #112]	; (1418 <http_client_callback+0xb0>)
    13a8:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MTU_HTTP)
    13aa:	4b1c      	ldr	r3, [pc, #112]	; (141c <http_client_callback+0xb4>)
    13ac:	4299      	cmp	r1, r3
    13ae:	d8e6      	bhi.n	137e <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    13b0:	68a0      	ldr	r0, [r4, #8]
    13b2:	4b1b      	ldr	r3, [pc, #108]	; (1420 <http_client_callback+0xb8>)
    13b4:	4798      	blx	r3
    13b6:	e7e2      	b.n	137e <http_client_callback+0x16>
			add_state(CANCELED);
    13b8:	2020      	movs	r0, #32
    13ba:	4b13      	ldr	r3, [pc, #76]	; (1408 <http_client_callback+0xa0>)
    13bc:	4798      	blx	r3
			return;
    13be:	e7de      	b.n	137e <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    13c0:	6811      	ldr	r1, [r2, #0]
    13c2:	6850      	ldr	r0, [r2, #4]
    13c4:	4b16      	ldr	r3, [pc, #88]	; (1420 <http_client_callback+0xb8>)
    13c6:	4798      	blx	r3
		break;
    13c8:	e7d9      	b.n	137e <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    13ca:	6811      	ldr	r1, [r2, #0]
    13cc:	4815      	ldr	r0, [pc, #84]	; (1424 <http_client_callback+0xbc>)
    13ce:	4b10      	ldr	r3, [pc, #64]	; (1410 <http_client_callback+0xa8>)
    13d0:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    13d2:	6823      	ldr	r3, [r4, #0]
    13d4:	330b      	adds	r3, #11
    13d6:	d1d2      	bne.n	137e <http_client_callback+0x16>
	return (down_state & mask) != 0;
    13d8:	4b13      	ldr	r3, [pc, #76]	; (1428 <http_client_callback+0xc0>)
    13da:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(DOWNLOADING))
    13dc:	071b      	lsls	r3, r3, #28
    13de:	d407      	bmi.n	13f0 <http_client_callback+0x88>
	return (down_state & mask) != 0;
    13e0:	4b11      	ldr	r3, [pc, #68]	; (1428 <http_client_callback+0xc0>)
    13e2:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED))
    13e4:	075b      	lsls	r3, r3, #29
    13e6:	d5ca      	bpl.n	137e <http_client_callback+0x16>
				clear_state(GET_REQUESTED);
    13e8:	2004      	movs	r0, #4
    13ea:	4b10      	ldr	r3, [pc, #64]	; (142c <http_client_callback+0xc4>)
    13ec:	4798      	blx	r3
    13ee:	e7c6      	b.n	137e <http_client_callback+0x16>
				clear_state(DOWNLOADING);
    13f0:	2008      	movs	r0, #8
    13f2:	4b0e      	ldr	r3, [pc, #56]	; (142c <http_client_callback+0xc4>)
    13f4:	4798      	blx	r3
    13f6:	e7f3      	b.n	13e0 <http_client_callback+0x78>
    13f8:	00010a1c 	.word	0x00010a1c
    13fc:	00010b80 	.word	0x00010b80
    1400:	0000bc59 	.word	0x0000bc59
    1404:	00010bb8 	.word	0x00010bb8
    1408:	00000a4d 	.word	0x00000a4d
    140c:	00010be4 	.word	0x00010be4
    1410:	0000bb3d 	.word	0x0000bb3d
    1414:	20000208 	.word	0x20000208
    1418:	20000214 	.word	0x20000214
    141c:	000005dc 	.word	0x000005dc
    1420:	00000e99 	.word	0x00000e99
    1424:	00010c20 	.word	0x00010c20
    1428:	20000614 	.word	0x20000614
    142c:	00000a3d 	.word	0x00000a3d

00001430 <configure_http_client>:
{
    1430:	b500      	push	{lr}
    1432:	b089      	sub	sp, #36	; 0x24
	http_client_get_config_defaults(&httpc_conf);
    1434:	a801      	add	r0, sp, #4
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <configure_http_client+0x34>)
    1438:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MTU_HTTP;
    143a:	4b0b      	ldr	r3, [pc, #44]	; (1468 <configure_http_client+0x38>)
    143c:	9305      	str	r3, [sp, #20]
	httpc_conf.timer_inst = &swt_module_inst;
    143e:	4b0b      	ldr	r3, [pc, #44]	; (146c <configure_http_client+0x3c>)
    1440:	9302      	str	r3, [sp, #8]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    1442:	a901      	add	r1, sp, #4
    1444:	480a      	ldr	r0, [pc, #40]	; (1470 <configure_http_client+0x40>)
    1446:	4b0b      	ldr	r3, [pc, #44]	; (1474 <configure_http_client+0x44>)
    1448:	4798      	blx	r3
    144a:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    144c:	db05      	blt.n	145a <configure_http_client+0x2a>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    144e:	490a      	ldr	r1, [pc, #40]	; (1478 <configure_http_client+0x48>)
    1450:	4807      	ldr	r0, [pc, #28]	; (1470 <configure_http_client+0x40>)
    1452:	4b0a      	ldr	r3, [pc, #40]	; (147c <configure_http_client+0x4c>)
    1454:	4798      	blx	r3
}
    1456:	b009      	add	sp, #36	; 0x24
    1458:	bd00      	pop	{pc}
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    145a:	4809      	ldr	r0, [pc, #36]	; (1480 <configure_http_client+0x50>)
    145c:	4b09      	ldr	r3, [pc, #36]	; (1484 <configure_http_client+0x54>)
    145e:	4798      	blx	r3
    1460:	e7fe      	b.n	1460 <configure_http_client+0x30>
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	00003145 	.word	0x00003145
    1468:	000005dc 	.word	0x000005dc
    146c:	20000354 	.word	0x20000354
    1470:	20000618 	.word	0x20000618
    1474:	0000316d 	.word	0x0000316d
    1478:	00001369 	.word	0x00001369
    147c:	00003261 	.word	0x00003261
    1480:	00010a30 	.word	0x00010a30
    1484:	0000bb3d 	.word	0x0000bb3d

00001488 <get_default_wifi_config>:
	sw_timer_enable(&swt_module_inst);
}

void get_default_wifi_config(wifi_config *wifi_configuration)
{
	wifi_configuration->ssid = "AirPennNet-Device";
    1488:	4b05      	ldr	r3, [pc, #20]	; (14a0 <get_default_wifi_config+0x18>)
    148a:	6003      	str	r3, [r0, #0]
	wifi_configuration->auth_type = M2M_WIFI_SEC_WPA_PSK;
    148c:	2302      	movs	r3, #2
    148e:	6043      	str	r3, [r0, #4]
	wifi_configuration->password = "penn1740wifi";
    1490:	4b04      	ldr	r3, [pc, #16]	; (14a4 <get_default_wifi_config+0x1c>)
    1492:	6083      	str	r3, [r0, #8]
	wifi_configuration->firmware_header_http_address = "http://www.seas.upenn.edu/~warcher/ese516/metadata.bin";
    1494:	4b04      	ldr	r3, [pc, #16]	; (14a8 <get_default_wifi_config+0x20>)
    1496:	60c3      	str	r3, [r0, #12]
	wifi_configuration->firmware_http_address = "http://www.seas.upenn.edu/~warcher/ese516/test-firmware.bin";
    1498:	4b04      	ldr	r3, [pc, #16]	; (14ac <get_default_wifi_config+0x24>)
    149a:	6103      	str	r3, [r0, #16]
}
    149c:	4770      	bx	lr
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	0001073c 	.word	0x0001073c
    14a4:	00010750 	.word	0x00010750
    14a8:	00010b0c 	.word	0x00010b0c
    14ac:	00010b44 	.word	0x00010b44

000014b0 <configure_wifi_module>:
void configure_wifi_module(wifi_config *wifi_configuration)
{
    14b0:	b530      	push	{r4, r5, lr}
    14b2:	b08b      	sub	sp, #44	; 0x2c
    14b4:	0004      	movs	r4, r0
	down_state = NOT_READY;
    14b6:	2200      	movs	r2, #0
    14b8:	4b24      	ldr	r3, [pc, #144]	; (154c <configure_wifi_module+0x9c>)
    14ba:	801a      	strh	r2, [r3, #0]
	add_state(NOT_CHECKED);
    14bc:	2040      	movs	r0, #64	; 0x40
    14be:	4d24      	ldr	r5, [pc, #144]	; (1550 <configure_wifi_module+0xa0>)
    14c0:	47a8      	blx	r5
	init_state();
	add_state(STORAGE_READY);
    14c2:	2001      	movs	r0, #1
    14c4:	47a8      	blx	r5
	sw_timer_get_config_defaults(&swt_conf);
    14c6:	a803      	add	r0, sp, #12
    14c8:	4b22      	ldr	r3, [pc, #136]	; (1554 <configure_wifi_module+0xa4>)
    14ca:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    14cc:	4d22      	ldr	r5, [pc, #136]	; (1558 <configure_wifi_module+0xa8>)
    14ce:	a903      	add	r1, sp, #12
    14d0:	0028      	movs	r0, r5
    14d2:	4b22      	ldr	r3, [pc, #136]	; (155c <configure_wifi_module+0xac>)
    14d4:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    14d6:	0028      	movs	r0, r5
    14d8:	4b21      	ldr	r3, [pc, #132]	; (1560 <configure_wifi_module+0xb0>)
    14da:	4798      	blx	r3
	configure_timer();
	configure_http_client();
    14dc:	4b21      	ldr	r3, [pc, #132]	; (1564 <configure_wifi_module+0xb4>)
    14de:	4798      	blx	r3
	nm_bsp_init();
    14e0:	4b21      	ldr	r3, [pc, #132]	; (1568 <configure_wifi_module+0xb8>)
    14e2:	4798      	blx	r3

	tstrWifiInitParam wifi_params;
	memset((uint8_t *)&wifi_params, 0, sizeof(tstrWifiInitParam));
    14e4:	2218      	movs	r2, #24
    14e6:	2100      	movs	r1, #0
    14e8:	a804      	add	r0, sp, #16
    14ea:	4b20      	ldr	r3, [pc, #128]	; (156c <configure_wifi_module+0xbc>)
    14ec:	4798      	blx	r3
	wifi_params.pfAppWifiCb = wifi_callback;
    14ee:	4b20      	ldr	r3, [pc, #128]	; (1570 <configure_wifi_module+0xc0>)
    14f0:	9304      	str	r3, [sp, #16]
	int8_t ret = m2m_wifi_init(&wifi_params); // NOTE: m2m = machine to machine
    14f2:	a804      	add	r0, sp, #16
    14f4:	4b1f      	ldr	r3, [pc, #124]	; (1574 <configure_wifi_module+0xc4>)
    14f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    14f8:	2800      	cmp	r0, #0
    14fa:	d11c      	bne.n	1536 <configure_wifi_module+0x86>
		printf("failed to initialize wifi parameters\r\n");
		return 0;
	}

	socketInit();
    14fc:	4b1e      	ldr	r3, [pc, #120]	; (1578 <configure_wifi_module+0xc8>)
    14fe:	4798      	blx	r3
	registerSocketCallback(socket_callback, resolve_cb);
    1500:	491e      	ldr	r1, [pc, #120]	; (157c <configure_wifi_module+0xcc>)
    1502:	481f      	ldr	r0, [pc, #124]	; (1580 <configure_wifi_module+0xd0>)
    1504:	4b1f      	ldr	r3, [pc, #124]	; (1584 <configure_wifi_module+0xd4>)
    1506:	4798      	blx	r3
	printf("--- Welcome to ATWINC 1500 Connection Test ---\r\n");
    1508:	481f      	ldr	r0, [pc, #124]	; (1588 <configure_wifi_module+0xd8>)
    150a:	4b20      	ldr	r3, [pc, #128]	; (158c <configure_wifi_module+0xdc>)
    150c:	4798      	blx	r3
	printf("main: connecting to WiFi AP %s...\r\n", wifi_configuration->ssid);
    150e:	6821      	ldr	r1, [r4, #0]
    1510:	481f      	ldr	r0, [pc, #124]	; (1590 <configure_wifi_module+0xe0>)
    1512:	4b20      	ldr	r3, [pc, #128]	; (1594 <configure_wifi_module+0xe4>)
    1514:	4798      	blx	r3
	ret = m2m_wifi_connect(wifi_configuration->ssid, strlen(wifi_configuration->ssid), wifi_configuration->auth_type, wifi_configuration->password, M2M_WIFI_CH_ALL);
    1516:	6825      	ldr	r5, [r4, #0]
    1518:	0028      	movs	r0, r5
    151a:	4b1f      	ldr	r3, [pc, #124]	; (1598 <configure_wifi_module+0xe8>)
    151c:	4798      	blx	r3
    151e:	7922      	ldrb	r2, [r4, #4]
    1520:	b2c1      	uxtb	r1, r0
    1522:	23ff      	movs	r3, #255	; 0xff
    1524:	9300      	str	r3, [sp, #0]
    1526:	68a3      	ldr	r3, [r4, #8]
    1528:	0028      	movs	r0, r5
    152a:	4d1c      	ldr	r5, [pc, #112]	; (159c <configure_wifi_module+0xec>)
    152c:	47a8      	blx	r5
	if (M2M_SUCCESS == ret) {
    152e:	2800      	cmp	r0, #0
    1530:	d005      	beq.n	153e <configure_wifi_module+0x8e>
		printf("successfully connected\r\n");
		current_wifi_config = wifi_configuration;
	}
}
    1532:	b00b      	add	sp, #44	; 0x2c
    1534:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize wifi parameters\r\n");
    1536:	481a      	ldr	r0, [pc, #104]	; (15a0 <configure_wifi_module+0xf0>)
    1538:	4b14      	ldr	r3, [pc, #80]	; (158c <configure_wifi_module+0xdc>)
    153a:	4798      	blx	r3
    153c:	e7f9      	b.n	1532 <configure_wifi_module+0x82>
		printf("successfully connected\r\n");
    153e:	4819      	ldr	r0, [pc, #100]	; (15a4 <configure_wifi_module+0xf4>)
    1540:	4b12      	ldr	r3, [pc, #72]	; (158c <configure_wifi_module+0xdc>)
    1542:	4798      	blx	r3
		current_wifi_config = wifi_configuration;
    1544:	4b18      	ldr	r3, [pc, #96]	; (15a8 <configure_wifi_module+0xf8>)
    1546:	601c      	str	r4, [r3, #0]
    1548:	e7f3      	b.n	1532 <configure_wifi_module+0x82>
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	20000614 	.word	0x20000614
    1550:	00000a4d 	.word	0x00000a4d
    1554:	000041bd 	.word	0x000041bd
    1558:	20000354 	.word	0x20000354
    155c:	000041c9 	.word	0x000041c9
    1560:	00004275 	.word	0x00004275
    1564:	00001431 	.word	0x00001431
    1568:	00005db5 	.word	0x00005db5
    156c:	0000b0fb 	.word	0x0000b0fb
    1570:	00000cd1 	.word	0x00000cd1
    1574:	00006d15 	.word	0x00006d15
    1578:	0000895d 	.word	0x0000895d
    157c:	00000bd9 	.word	0x00000bd9
    1580:	00000bcd 	.word	0x00000bcd
    1584:	000089dd 	.word	0x000089dd
    1588:	00010aa0 	.word	0x00010aa0
    158c:	0000bc59 	.word	0x0000bc59
    1590:	00010ad0 	.word	0x00010ad0
    1594:	0000bb3d 	.word	0x0000bb3d
    1598:	0000be9f 	.word	0x0000be9f
    159c:	00007101 	.word	0x00007101
    15a0:	00010a78 	.word	0x00010a78
    15a4:	00010af4 	.word	0x00010af4
    15a8:	20000744 	.word	0x20000744

000015ac <deconfigure_wifi_module>:

void deconfigure_wifi_module() {
    15ac:	b510      	push	{r4, lr}
	socketDeinit();
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <deconfigure_wifi_module+0x28>)
    15b0:	4798      	blx	r3
	http_client_unregister_callback(&http_client_module_inst);
    15b2:	4c09      	ldr	r4, [pc, #36]	; (15d8 <deconfigure_wifi_module+0x2c>)
    15b4:	0020      	movs	r0, r4
    15b6:	4b09      	ldr	r3, [pc, #36]	; (15dc <deconfigure_wifi_module+0x30>)
    15b8:	4798      	blx	r3
	http_client_close(&http_client_module_inst);
    15ba:	0020      	movs	r0, r4
    15bc:	4b08      	ldr	r3, [pc, #32]	; (15e0 <deconfigure_wifi_module+0x34>)
    15be:	4798      	blx	r3
	http_client_deinit(&http_client_module_inst);
    15c0:	0020      	movs	r0, r4
    15c2:	4b08      	ldr	r3, [pc, #32]	; (15e4 <deconfigure_wifi_module+0x38>)
    15c4:	4798      	blx	r3
	m2m_wifi_deinit(0);
    15c6:	2000      	movs	r0, #0
    15c8:	4b07      	ldr	r3, [pc, #28]	; (15e8 <deconfigure_wifi_module+0x3c>)
    15ca:	4798      	blx	r3
	nm_bsp_deinit();
    15cc:	4b07      	ldr	r3, [pc, #28]	; (15ec <deconfigure_wifi_module+0x40>)
    15ce:	4798      	blx	r3
}
    15d0:	bd10      	pop	{r4, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	000089a1 	.word	0x000089a1
    15d8:	20000618 	.word	0x20000618
    15dc:	00003271 	.word	0x00003271
    15e0:	0000339d 	.word	0x0000339d
    15e4:	00003221 	.word	0x00003221
    15e8:	00006e49 	.word	0x00006e49
    15ec:	00005d45 	.word	0x00005d45

000015f0 <check_for_update>:

bool check_for_update()
{
    15f0:	b570      	push	{r4, r5, r6, lr}
	m2m_wifi_request_dhcp_client();
    15f2:	4b0e      	ldr	r3, [pc, #56]	; (162c <check_for_update+0x3c>)
    15f4:	4798      	blx	r3
	return (down_state & mask) != 0;
    15f6:	4b0e      	ldr	r3, [pc, #56]	; (1630 <check_for_update+0x40>)
    15f8:	881b      	ldrh	r3, [r3, #0]
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    15fa:	2230      	movs	r2, #48	; 0x30
    15fc:	421a      	tst	r2, r3
    15fe:	d10b      	bne.n	1618 <check_for_update+0x28>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    1600:	4e0c      	ldr	r6, [pc, #48]	; (1634 <check_for_update+0x44>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    1602:	4c0d      	ldr	r4, [pc, #52]	; (1638 <check_for_update+0x48>)
    1604:	4d0d      	ldr	r5, [pc, #52]	; (163c <check_for_update+0x4c>)
		m2m_wifi_handle_events(NULL);
    1606:	2000      	movs	r0, #0
    1608:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    160a:	0020      	movs	r0, r4
    160c:	47a8      	blx	r5
	return (down_state & mask) != 0;
    160e:	4b08      	ldr	r3, [pc, #32]	; (1630 <check_for_update+0x40>)
    1610:	881b      	ldrh	r3, [r3, #0]
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    1612:	2230      	movs	r2, #48	; 0x30
    1614:	421a      	tst	r2, r3
    1616:	d0f6      	beq.n	1606 <check_for_update+0x16>
	}
	if (is_state_set(UPDATE_AVAILABLE)) {
		clear_state(COMPLETED);
		return true;
	} else {
		return false;
    1618:	2000      	movs	r0, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    161a:	061b      	lsls	r3, r3, #24
    161c:	d400      	bmi.n	1620 <check_for_update+0x30>
	}
}
    161e:	bd70      	pop	{r4, r5, r6, pc}
		clear_state(COMPLETED);
    1620:	3010      	adds	r0, #16
    1622:	4b07      	ldr	r3, [pc, #28]	; (1640 <check_for_update+0x50>)
    1624:	4798      	blx	r3
		return true;
    1626:	2001      	movs	r0, #1
    1628:	e7f9      	b.n	161e <check_for_update+0x2e>
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	0000711d 	.word	0x0000711d
    1630:	20000614 	.word	0x20000614
    1634:	00006e65 	.word	0x00006e65
    1638:	20000354 	.word	0x20000354
    163c:	0000430d 	.word	0x0000430d
    1640:	00000a3d 	.word	0x00000a3d

00001644 <download_firmware>:
bool download_firmware()
{
    1644:	b570      	push	{r4, r5, r6, lr}
	return (down_state & mask) != 0;
    1646:	4b11      	ldr	r3, [pc, #68]	; (168c <download_firmware+0x48>)
    1648:	881b      	ldrh	r3, [r3, #0]
		if (is_state_set(COMPLETED))
			return true;
		else
			return false;
	} else {
		return false;
    164a:	2000      	movs	r0, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    164c:	061b      	lsls	r3, r3, #24
    164e:	d400      	bmi.n	1652 <download_firmware+0xe>
	}
}
    1650:	bd70      	pop	{r4, r5, r6, pc}
		start_download();
    1652:	4b0f      	ldr	r3, [pc, #60]	; (1690 <download_firmware+0x4c>)
    1654:	4798      	blx	r3
	return (down_state & mask) != 0;
    1656:	4b0d      	ldr	r3, [pc, #52]	; (168c <download_firmware+0x48>)
    1658:	881b      	ldrh	r3, [r3, #0]
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    165a:	2230      	movs	r2, #48	; 0x30
    165c:	421a      	tst	r2, r3
    165e:	d111      	bne.n	1684 <download_firmware+0x40>
			m2m_wifi_handle_events(NULL);
    1660:	4e0c      	ldr	r6, [pc, #48]	; (1694 <download_firmware+0x50>)
			sw_timer_task(&swt_module_inst);
    1662:	4c0d      	ldr	r4, [pc, #52]	; (1698 <download_firmware+0x54>)
    1664:	4d0d      	ldr	r5, [pc, #52]	; (169c <download_firmware+0x58>)
			m2m_wifi_handle_events(NULL);
    1666:	2000      	movs	r0, #0
    1668:	47b0      	blx	r6
			sw_timer_task(&swt_module_inst);
    166a:	0020      	movs	r0, r4
    166c:	47a8      	blx	r5
	return (down_state & mask) != 0;
    166e:	4b07      	ldr	r3, [pc, #28]	; (168c <download_firmware+0x48>)
    1670:	8818      	ldrh	r0, [r3, #0]
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    1672:	2330      	movs	r3, #48	; 0x30
    1674:	4203      	tst	r3, r0
    1676:	d0f6      	beq.n	1666 <download_firmware+0x22>
	return (down_state & mask) != 0;
    1678:	3b20      	subs	r3, #32
    167a:	4018      	ands	r0, r3
		if (is_state_set(COMPLETED))
    167c:	1e43      	subs	r3, r0, #1
    167e:	4198      	sbcs	r0, r3
    1680:	b2c0      	uxtb	r0, r0
    1682:	e7e5      	b.n	1650 <download_firmware+0xc>
	return (down_state & mask) != 0;
    1684:	2010      	movs	r0, #16
    1686:	4018      	ands	r0, r3
    1688:	e7f8      	b.n	167c <download_firmware+0x38>
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	20000614 	.word	0x20000614
    1690:	00000c15 	.word	0x00000c15
    1694:	00006e65 	.word	0x00006e65
    1698:	20000354 	.word	0x20000354
    169c:	0000430d 	.word	0x0000430d

000016a0 <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
    16a0:	b530      	push	{r4, r5, lr}
    16a2:	b08f      	sub	sp, #60	; 0x3c
    16a4:	0004      	movs	r4, r0
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    16a6:	aa01      	add	r2, sp, #4
    16a8:	2364      	movs	r3, #100	; 0x64
    16aa:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    16ac:	4b1f      	ldr	r3, [pc, #124]	; (172c <configure_i2c_tsl2561+0x8c>)
    16ae:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    16b0:	2300      	movs	r3, #0
    16b2:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    16b4:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    16b6:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    16b8:	2180      	movs	r1, #128	; 0x80
    16ba:	0389      	lsls	r1, r1, #14
    16bc:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    16be:	2101      	movs	r1, #1
    16c0:	4249      	negs	r1, r1
    16c2:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    16c4:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    16c6:	3125      	adds	r1, #37	; 0x25
    16c8:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    16ca:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    16cc:	3108      	adds	r1, #8
    16ce:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    16d0:	3101      	adds	r1, #1
    16d2:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    16d4:	3101      	adds	r1, #1
    16d6:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    16d8:	33d7      	adds	r3, #215	; 0xd7
    16da:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    16dc:	4b14      	ldr	r3, [pc, #80]	; (1730 <configure_i2c_tsl2561+0x90>)
    16de:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    16e0:	4b14      	ldr	r3, [pc, #80]	; (1734 <configure_i2c_tsl2561+0x94>)
    16e2:	6213      	str	r3, [r2, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
    16e4:	4914      	ldr	r1, [pc, #80]	; (1738 <configure_i2c_tsl2561+0x98>)
    16e6:	4815      	ldr	r0, [pc, #84]	; (173c <configure_i2c_tsl2561+0x9c>)
    16e8:	4b15      	ldr	r3, [pc, #84]	; (1740 <configure_i2c_tsl2561+0xa0>)
    16ea:	4798      	blx	r3
	if (STATUS_OK != init_status) {
    16ec:	2800      	cmp	r0, #0
    16ee:	d119      	bne.n	1724 <configure_i2c_tsl2561+0x84>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16f0:	4b12      	ldr	r3, [pc, #72]	; (173c <configure_i2c_tsl2561+0x9c>)
    16f2:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    16f4:	2107      	movs	r1, #7
    16f6:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    16f8:	4219      	tst	r1, r3
    16fa:	d1fc      	bne.n	16f6 <configure_i2c_tsl2561+0x56>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    16fc:	6813      	ldr	r3, [r2, #0]
    16fe:	2102      	movs	r1, #2
    1700:	430b      	orrs	r3, r1
    1702:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1704:	4b0d      	ldr	r3, [pc, #52]	; (173c <configure_i2c_tsl2561+0x9c>)
    1706:	88dd      	ldrh	r5, [r3, #6]
	uint32_t timeout_counter = 0;
    1708:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    170a:	2010      	movs	r0, #16
    170c:	8b51      	ldrh	r1, [r2, #26]
    170e:	4201      	tst	r1, r0
    1710:	d104      	bne.n	171c <configure_i2c_tsl2561+0x7c>
		timeout_counter++;
    1712:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1714:	42ab      	cmp	r3, r5
    1716:	d3f9      	bcc.n	170c <configure_i2c_tsl2561+0x6c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1718:	2310      	movs	r3, #16
    171a:	8353      	strh	r3, [r2, #26]
		printf("failed to initialize TSL2561 driver.\r\n");
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
	tsl2561_addr = addr;
    171c:	4b09      	ldr	r3, [pc, #36]	; (1744 <configure_i2c_tsl2561+0xa4>)
    171e:	701c      	strb	r4, [r3, #0]
}
    1720:	b00f      	add	sp, #60	; 0x3c
    1722:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize TSL2561 driver.\r\n");
    1724:	4808      	ldr	r0, [pc, #32]	; (1748 <configure_i2c_tsl2561+0xa8>)
    1726:	4b09      	ldr	r3, [pc, #36]	; (174c <configure_i2c_tsl2561+0xac>)
    1728:	4798      	blx	r3
    172a:	e7f9      	b.n	1720 <configure_i2c_tsl2561+0x80>
    172c:	00000d48 	.word	0x00000d48
    1730:	00080002 	.word	0x00080002
    1734:	00090002 	.word	0x00090002
    1738:	42000800 	.word	0x42000800
    173c:	20000588 	.word	0x20000588
    1740:	00002a31 	.word	0x00002a31
    1744:	20000218 	.word	0x20000218
    1748:	00011388 	.word	0x00011388
    174c:	0000bc59 	.word	0x0000bc59

00001750 <read_byte>:


uint8_t read_byte(tsl2561_registers reg)
{
    1750:	b500      	push	{lr}
    1752:	b085      	sub	sp, #20
	uint8_t received_data;
	uint8_t write_buffer = reg;
    1754:	230e      	movs	r3, #14
    1756:	446b      	add	r3, sp
    1758:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
    175a:	4a18      	ldr	r2, [pc, #96]	; (17bc <read_byte+0x6c>)
    175c:	7812      	ldrb	r2, [r2, #0]
    175e:	4669      	mov	r1, sp
    1760:	800a      	strh	r2, [r1, #0]
    1762:	2201      	movs	r2, #1
    1764:	804a      	strh	r2, [r1, #2]
    1766:	9301      	str	r3, [sp, #4]
    1768:	2300      	movs	r3, #0
    176a:	720b      	strb	r3, [r1, #8]
    176c:	724b      	strb	r3, [r1, #9]
    176e:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait(&i2c_tsl2561, &packet);
    1770:	4813      	ldr	r0, [pc, #76]	; (17c0 <read_byte+0x70>)
    1772:	4b14      	ldr	r3, [pc, #80]	; (17c4 <read_byte+0x74>)
    1774:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
    1776:	2800      	cmp	r0, #0
    1778:	d008      	beq.n	178c <read_byte+0x3c>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
    177a:	230e      	movs	r3, #14
    177c:	446b      	add	r3, sp
    177e:	7819      	ldrb	r1, [r3, #0]
    1780:	4811      	ldr	r0, [pc, #68]	; (17c8 <read_byte+0x78>)
    1782:	4b12      	ldr	r3, [pc, #72]	; (17cc <read_byte+0x7c>)
    1784:	4798      	blx	r3
		return -1;
    1786:	20ff      	movs	r0, #255	; 0xff
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
		return -1;
	}
	return received_data;
}
    1788:	b005      	add	sp, #20
    178a:	bd00      	pop	{pc}
	packet.data = &received_data;
    178c:	230f      	movs	r3, #15
    178e:	446b      	add	r3, sp
    1790:	9301      	str	r3, [sp, #4]
	packet.data_length = 1;
    1792:	2301      	movs	r3, #1
    1794:	466a      	mov	r2, sp
    1796:	8053      	strh	r3, [r2, #2]
	i2c_code = i2c_master_read_packet_wait(&i2c_tsl2561, &packet);
    1798:	4669      	mov	r1, sp
    179a:	4809      	ldr	r0, [pc, #36]	; (17c0 <read_byte+0x70>)
    179c:	4b0c      	ldr	r3, [pc, #48]	; (17d0 <read_byte+0x80>)
    179e:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
    17a0:	2800      	cmp	r0, #0
    17a2:	d103      	bne.n	17ac <read_byte+0x5c>
	return received_data;
    17a4:	230f      	movs	r3, #15
    17a6:	446b      	add	r3, sp
    17a8:	7818      	ldrb	r0, [r3, #0]
    17aa:	e7ed      	b.n	1788 <read_byte+0x38>
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
    17ac:	230e      	movs	r3, #14
    17ae:	446b      	add	r3, sp
    17b0:	7819      	ldrb	r1, [r3, #0]
    17b2:	4808      	ldr	r0, [pc, #32]	; (17d4 <read_byte+0x84>)
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <read_byte+0x7c>)
    17b6:	4798      	blx	r3
		return -1;
    17b8:	20ff      	movs	r0, #255	; 0xff
    17ba:	e7e5      	b.n	1788 <read_byte+0x38>
    17bc:	20000218 	.word	0x20000218
    17c0:	20000588 	.word	0x20000588
    17c4:	0000301d 	.word	0x0000301d
    17c8:	000113b0 	.word	0x000113b0
    17cc:	0000bb3d 	.word	0x0000bb3d
    17d0:	00003009 	.word	0x00003009
    17d4:	0001065c 	.word	0x0001065c

000017d8 <write_byte>:

void write_byte(tsl2561_registers reg, uint8_t data_byte)
{
    17d8:	b500      	push	{lr}
    17da:	b085      	sub	sp, #20
	uint8_t write_buffer[2] = { reg, data_byte };
    17dc:	ab03      	add	r3, sp, #12
    17de:	7018      	strb	r0, [r3, #0]
    17e0:	7059      	strb	r1, [r3, #1]
	struct i2c_master_packet packet = {
    17e2:	4a0c      	ldr	r2, [pc, #48]	; (1814 <write_byte+0x3c>)
    17e4:	7812      	ldrb	r2, [r2, #0]
    17e6:	4669      	mov	r1, sp
    17e8:	800a      	strh	r2, [r1, #0]
    17ea:	2202      	movs	r2, #2
    17ec:	804a      	strh	r2, [r1, #2]
    17ee:	9301      	str	r3, [sp, #4]
    17f0:	2300      	movs	r3, #0
    17f2:	720b      	strb	r3, [r1, #8]
    17f4:	724b      	strb	r3, [r1, #9]
    17f6:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &packet);
    17f8:	4807      	ldr	r0, [pc, #28]	; (1818 <write_byte+0x40>)
    17fa:	4b08      	ldr	r3, [pc, #32]	; (181c <write_byte+0x44>)
    17fc:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
    17fe:	2800      	cmp	r0, #0
    1800:	d101      	bne.n	1806 <write_byte+0x2e>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer[1]);
		return;
	}
}
    1802:	b005      	add	sp, #20
    1804:	bd00      	pop	{pc}
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer[1]);
    1806:	ab03      	add	r3, sp, #12
    1808:	7859      	ldrb	r1, [r3, #1]
    180a:	4805      	ldr	r0, [pc, #20]	; (1820 <write_byte+0x48>)
    180c:	4b05      	ldr	r3, [pc, #20]	; (1824 <write_byte+0x4c>)
    180e:	4798      	blx	r3
    1810:	e7f7      	b.n	1802 <write_byte+0x2a>
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	20000218 	.word	0x20000218
    1818:	20000588 	.word	0x20000588
    181c:	00003031 	.word	0x00003031
    1820:	000113b0 	.word	0x000113b0
    1824:	0000bb3d 	.word	0x0000bb3d

00001828 <set_gain>:
 * For now the integration time will always be 402ms. Will update once decide
 * if we need faster readings
 * @param new_gain new gain multiplier
 */
void set_gain(tsl2561_gains new_gain)
{
    1828:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | TIMING_REG, (INTEGRATE_402MS | new_gain));
    182a:	2102      	movs	r1, #2
    182c:	4301      	orrs	r1, r0
    182e:	2081      	movs	r0, #129	; 0x81
    1830:	4b01      	ldr	r3, [pc, #4]	; (1838 <set_gain+0x10>)
    1832:	4798      	blx	r3
}
    1834:	bd10      	pop	{r4, pc}
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	000017d9 	.word	0x000017d9

0000183c <power_on_tsl2561>:

void power_on_tsl2561()
{
    183c:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x03);
    183e:	2103      	movs	r1, #3
    1840:	2080      	movs	r0, #128	; 0x80
    1842:	4b03      	ldr	r3, [pc, #12]	; (1850 <power_on_tsl2561+0x14>)
    1844:	4798      	blx	r3
	set_gain(GAIN_16X);
    1846:	2010      	movs	r0, #16
    1848:	4b02      	ldr	r3, [pc, #8]	; (1854 <power_on_tsl2561+0x18>)
    184a:	4798      	blx	r3
}
    184c:	bd10      	pop	{r4, pc}
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	000017d9 	.word	0x000017d9
    1854:	00001829 	.word	0x00001829

00001858 <power_off_tsl2561>:

void power_off_tsl2561()
{
    1858:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x0);
    185a:	2100      	movs	r1, #0
    185c:	2080      	movs	r0, #128	; 0x80
    185e:	4b01      	ldr	r3, [pc, #4]	; (1864 <power_off_tsl2561+0xc>)
    1860:	4798      	blx	r3
}
    1862:	bd10      	pop	{r4, pc}
    1864:	000017d9 	.word	0x000017d9

00001868 <get_tsl2561_device_id>:

//SHOULD RETURN 0x50
uint8_t get_tsl2561_device_id()
{
    1868:	b510      	push	{r4, lr}
	return read_byte(CMD_BIT | ID_REG);
    186a:	208a      	movs	r0, #138	; 0x8a
    186c:	4b01      	ldr	r3, [pc, #4]	; (1874 <get_tsl2561_device_id+0xc>)
    186e:	4798      	blx	r3
}
    1870:	bd10      	pop	{r4, pc}
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	00001751 	.word	0x00001751

00001878 <get_chan0>:

uint16_t get_chan0()
{
    1878:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(443);
    187a:	20bc      	movs	r0, #188	; 0xbc
    187c:	30ff      	adds	r0, #255	; 0xff
    187e:	4b06      	ldr	r3, [pc, #24]	; (1898 <get_chan0+0x20>)
    1880:	4798      	blx	r3
	//HAVE TO READ LOW REGISTER BEFORE HIGH REG PER DATASHEET
	return read_byte(CMD_BIT | CHAN0_LOW_REG) | (read_byte(CMD_BIT | CHAN0_HIGH_REG) << 8);
    1882:	208c      	movs	r0, #140	; 0x8c
    1884:	4c05      	ldr	r4, [pc, #20]	; (189c <get_chan0+0x24>)
    1886:	47a0      	blx	r4
    1888:	0005      	movs	r5, r0
    188a:	208d      	movs	r0, #141	; 0x8d
    188c:	47a0      	blx	r4
    188e:	0200      	lsls	r0, r0, #8
    1890:	4328      	orrs	r0, r5
    1892:	b280      	uxth	r0, r0
}
    1894:	bd70      	pop	{r4, r5, r6, pc}
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	00005d05 	.word	0x00005d05
    189c:	00001751 	.word	0x00001751

000018a0 <get_chan1>:

uint16_t get_chan1()
{
    18a0:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(443);
    18a2:	20bc      	movs	r0, #188	; 0xbc
    18a4:	30ff      	adds	r0, #255	; 0xff
    18a6:	4b06      	ldr	r3, [pc, #24]	; (18c0 <get_chan1+0x20>)
    18a8:	4798      	blx	r3
	return read_byte(CMD_BIT | CHAN1_LOW_REG) | (read_byte(CMD_BIT | CHAN1_HIGH_REG) << 8);
    18aa:	208e      	movs	r0, #142	; 0x8e
    18ac:	4c05      	ldr	r4, [pc, #20]	; (18c4 <get_chan1+0x24>)
    18ae:	47a0      	blx	r4
    18b0:	0005      	movs	r5, r0
    18b2:	208f      	movs	r0, #143	; 0x8f
    18b4:	47a0      	blx	r4
    18b6:	0200      	lsls	r0, r0, #8
    18b8:	4328      	orrs	r0, r5
    18ba:	b280      	uxth	r0, r0
}
    18bc:	bd70      	pop	{r4, r5, r6, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	00005d05 	.word	0x00005d05
    18c4:	00001751 	.word	0x00001751

000018c8 <get_lux>:

uint32_t get_lux()
{
    18c8:	b570      	push	{r4, r5, r6, lr}
	uint16_t chan0 = get_chan0();
    18ca:	4b26      	ldr	r3, [pc, #152]	; (1964 <get_lux+0x9c>)
    18cc:	4798      	blx	r3
    18ce:	0004      	movs	r4, r0
	uint16_t chan1 = get_chan1();
    18d0:	4b25      	ldr	r3, [pc, #148]	; (1968 <get_lux+0xa0>)
    18d2:	4798      	blx	r3
    18d4:	0005      	movs	r5, r0
		printf("get_lux: TSL2561 light is saturated");
		return -1;
	}

	unsigned long ratio10 = 0;
	if(chan0 != 0) {
    18d6:	2c00      	cmp	r4, #0
    18d8:	d01b      	beq.n	1912 <get_lux+0x4a>
		 ratio10 = (chan1 << (TSL2561_LUX_RATIOSCALE + 1)) / chan0;
    18da:	0280      	lsls	r0, r0, #10
    18dc:	0021      	movs	r1, r4
    18de:	4b23      	ldr	r3, [pc, #140]	; (196c <get_lux+0xa4>)
    18e0:	4798      	blx	r3
	}
	ratio10 = (ratio10 + 1) >> 1;
    18e2:	3001      	adds	r0, #1
    18e4:	0840      	lsrs	r0, r0, #1
	unsigned int b, m;

	if ((ratio10 >= 0) && (ratio10 <= TSL2561_LUX_K1T)) {
    18e6:	2840      	cmp	r0, #64	; 0x40
    18e8:	d920      	bls.n	192c <get_lux+0x64>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
	} else if (ratio10 <= TSL2561_LUX_K2T) {
    18ea:	2880      	cmp	r0, #128	; 0x80
    18ec:	d923      	bls.n	1936 <get_lux+0x6e>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
	} else if (ratio10 <= TSL2561_LUX_K3T) {
    18ee:	28c0      	cmp	r0, #192	; 0xc0
    18f0:	d925      	bls.n	193e <get_lux+0x76>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
	} else if (ratio10 <= TSL2561_LUX_K4T) {
    18f2:	2380      	movs	r3, #128	; 0x80
    18f4:	005b      	lsls	r3, r3, #1
    18f6:	4298      	cmp	r0, r3
    18f8:	d924      	bls.n	1944 <get_lux+0x7c>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
	} else if (ratio10 <= TSL2561_LUX_K5T) {
    18fa:	3338      	adds	r3, #56	; 0x38
    18fc:	4298      	cmp	r0, r3
    18fe:	d925      	bls.n	194c <get_lux+0x84>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
	} else if (ratio10 <= TSL2561_LUX_K6T) {
    1900:	3362      	adds	r3, #98	; 0x62
    1902:	4298      	cmp	r0, r3
    1904:	d927      	bls.n	1956 <get_lux+0x8e>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
	} else if (ratio10 <= TSL2561_LUX_K7T) {
    1906:	4b1a      	ldr	r3, [pc, #104]	; (1970 <get_lux+0xa8>)
    1908:	4298      	cmp	r0, r3
    190a:	d927      	bls.n	195c <get_lux+0x94>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
	} else if (ratio10 > TSL2561_LUX_K8T) {
		b = TSL2561_LUX_B8T; m = TSL2561_LUX_M8T;
    190c:	2300      	movs	r3, #0
    190e:	2000      	movs	r0, #0
    1910:	e003      	b.n	191a <get_lux+0x52>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
    1912:	23df      	movs	r3, #223	; 0xdf
    1914:	005b      	lsls	r3, r3, #1
    1916:	20f9      	movs	r0, #249	; 0xf9
    1918:	0040      	lsls	r0, r0, #1
	}
	
	
	unsigned long temp = ((chan0 * b) - (chan1 * m));
    191a:	4360      	muls	r0, r4
	temp = (temp) ? temp : 0; // no negative lux
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
    191c:	2280      	movs	r2, #128	; 0x80
    191e:	0192      	lsls	r2, r2, #6
    1920:	4694      	mov	ip, r2
    1922:	4460      	add	r0, ip
	unsigned long temp = ((chan0 * b) - (chan1 * m));
    1924:	435d      	muls	r5, r3
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
    1926:	1b40      	subs	r0, r0, r5
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
    1928:	0b80      	lsrs	r0, r0, #14
	return lux;
}
    192a:	bd70      	pop	{r4, r5, r6, pc}
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
    192c:	23df      	movs	r3, #223	; 0xdf
    192e:	005b      	lsls	r3, r3, #1
    1930:	20f9      	movs	r0, #249	; 0xf9
    1932:	0040      	lsls	r0, r0, #1
    1934:	e7f1      	b.n	191a <get_lux+0x52>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
    1936:	4b0f      	ldr	r3, [pc, #60]	; (1974 <get_lux+0xac>)
    1938:	2085      	movs	r0, #133	; 0x85
    193a:	0080      	lsls	r0, r0, #2
    193c:	e7ed      	b.n	191a <get_lux+0x52>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
    193e:	4b0e      	ldr	r3, [pc, #56]	; (1978 <get_lux+0xb0>)
    1940:	480e      	ldr	r0, [pc, #56]	; (197c <get_lux+0xb4>)
    1942:	e7ea      	b.n	191a <get_lux+0x52>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
    1944:	4b0e      	ldr	r3, [pc, #56]	; (1980 <get_lux+0xb8>)
    1946:	209c      	movs	r0, #156	; 0x9c
    1948:	0080      	lsls	r0, r0, #2
    194a:	e7e6      	b.n	191a <get_lux+0x52>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
    194c:	23fe      	movs	r3, #254	; 0xfe
    194e:	005b      	lsls	r3, r3, #1
    1950:	2070      	movs	r0, #112	; 0x70
    1952:	30ff      	adds	r0, #255	; 0xff
    1954:	e7e1      	b.n	191a <get_lux+0x52>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
    1956:	23fb      	movs	r3, #251	; 0xfb
    1958:	20d2      	movs	r0, #210	; 0xd2
    195a:	e7de      	b.n	191a <get_lux+0x52>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
    195c:	2312      	movs	r3, #18
    195e:	2018      	movs	r0, #24
    1960:	e7db      	b.n	191a <get_lux+0x52>
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	00001879 	.word	0x00001879
    1968:	000018a1 	.word	0x000018a1
    196c:	0000e1ad 	.word	0x0000e1ad
    1970:	0000029a 	.word	0x0000029a
    1974:	000002d1 	.word	0x000002d1
    1978:	0000037b 	.word	0x0000037b
    197c:	0000023f 	.word	0x0000023f
    1980:	000003fe 	.word	0x000003fe

00001984 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    1984:	b530      	push	{r4, r5, lr}
    1986:	b085      	sub	sp, #20
    1988:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    198a:	2300      	movs	r3, #0
    198c:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    198e:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    1990:	4b2f      	ldr	r3, [pc, #188]	; (1a50 <at25dfx_chip_check_presence+0xcc>)
    1992:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    1994:	792b      	ldrb	r3, [r5, #4]
    1996:	2b00      	cmp	r3, #0
    1998:	d156      	bne.n	1a48 <at25dfx_chip_check_presence+0xc4>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    199a:	3301      	adds	r3, #1
    199c:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    199e:	4b2d      	ldr	r3, [pc, #180]	; (1a54 <at25dfx_chip_check_presence+0xd0>)
    19a0:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    19a2:	229f      	movs	r2, #159	; 0x9f
    19a4:	ab01      	add	r3, sp, #4
    19a6:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    19a8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    19aa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    19ac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    19ae:	2900      	cmp	r1, #0
    19b0:	d104      	bne.n	19bc <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    19b2:	0953      	lsrs	r3, r2, #5
    19b4:	01db      	lsls	r3, r3, #7
    19b6:	4928      	ldr	r1, [pc, #160]	; (1a58 <at25dfx_chip_check_presence+0xd4>)
    19b8:	468c      	mov	ip, r1
    19ba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    19bc:	211f      	movs	r1, #31
    19be:	4011      	ands	r1, r2
    19c0:	2201      	movs	r2, #1
    19c2:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
    19c4:	615a      	str	r2, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    19c6:	2201      	movs	r2, #1
    19c8:	a901      	add	r1, sp, #4
    19ca:	6820      	ldr	r0, [r4, #0]
    19cc:	4b23      	ldr	r3, [pc, #140]	; (1a5c <at25dfx_chip_check_presence+0xd8>)
    19ce:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    19d0:	2300      	movs	r3, #0
    19d2:	2203      	movs	r2, #3
    19d4:	a903      	add	r1, sp, #12
    19d6:	6820      	ldr	r0, [r4, #0]
    19d8:	4d21      	ldr	r5, [pc, #132]	; (1a60 <at25dfx_chip_check_presence+0xdc>)
    19da:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    19dc:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    19de:	09d1      	lsrs	r1, r2, #7
		return NULL;
    19e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    19e2:	2900      	cmp	r1, #0
    19e4:	d104      	bne.n	19f0 <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    19e6:	0953      	lsrs	r3, r2, #5
    19e8:	01db      	lsls	r3, r3, #7
    19ea:	491b      	ldr	r1, [pc, #108]	; (1a58 <at25dfx_chip_check_presence+0xd4>)
    19ec:	468c      	mov	ip, r1
    19ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    19f0:	211f      	movs	r1, #31
    19f2:	4011      	ands	r1, r2
    19f4:	2201      	movs	r2, #1
    19f6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    19f8:	619a      	str	r2, [r3, #24]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    19fa:	2300      	movs	r3, #0
    19fc:	6822      	ldr	r2, [r4, #0]
    19fe:	7113      	strb	r3, [r2, #4]
	switch (type) {
    1a00:	7923      	ldrb	r3, [r4, #4]
    1a02:	2b09      	cmp	r3, #9
    1a04:	d815      	bhi.n	1a32 <at25dfx_chip_check_presence+0xae>
    1a06:	009b      	lsls	r3, r3, #2
    1a08:	4a16      	ldr	r2, [pc, #88]	; (1a64 <at25dfx_chip_check_presence+0xe0>)
    1a0a:	58d3      	ldr	r3, [r2, r3]
    1a0c:	469f      	mov	pc, r3
		return 0x00431f;
    1a0e:	4b16      	ldr	r3, [pc, #88]	; (1a68 <at25dfx_chip_check_presence+0xe4>)
    1a10:	e012      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x01441f;
    1a12:	4b16      	ldr	r3, [pc, #88]	; (1a6c <at25dfx_chip_check_presence+0xe8>)
    1a14:	e010      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x02451f;
    1a16:	4b16      	ldr	r3, [pc, #88]	; (1a70 <at25dfx_chip_check_presence+0xec>)
    1a18:	e00e      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x01451f;
    1a1a:	4b16      	ldr	r3, [pc, #88]	; (1a74 <at25dfx_chip_check_presence+0xf0>)
    1a1c:	e00c      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
    1a1e:	4b16      	ldr	r3, [pc, #88]	; (1a78 <at25dfx_chip_check_presence+0xf4>)
    1a20:	e00a      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
    1a22:	4b16      	ldr	r3, [pc, #88]	; (1a7c <at25dfx_chip_check_presence+0xf8>)
    1a24:	e008      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
    1a26:	4b16      	ldr	r3, [pc, #88]	; (1a80 <at25dfx_chip_check_presence+0xfc>)
    1a28:	e006      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
    1a2a:	4b16      	ldr	r3, [pc, #88]	; (1a84 <at25dfx_chip_check_presence+0x100>)
    1a2c:	e004      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
    1a2e:	4b16      	ldr	r3, [pc, #88]	; (1a88 <at25dfx_chip_check_presence+0x104>)
    1a30:	e002      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0;
    1a32:	2300      	movs	r3, #0
    1a34:	e000      	b.n	1a38 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
    1a36:	4b15      	ldr	r3, [pc, #84]	; (1a8c <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    1a38:	9a03      	ldr	r2, [sp, #12]
    1a3a:	429a      	cmp	r2, r3
    1a3c:	d002      	beq.n	1a44 <at25dfx_chip_check_presence+0xc0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    1a3e:	2014      	movs	r0, #20
	}
}
    1a40:	b005      	add	sp, #20
    1a42:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    1a44:	2000      	movs	r0, #0
    1a46:	e7fb      	b.n	1a40 <at25dfx_chip_check_presence+0xbc>
    1a48:	4b02      	ldr	r3, [pc, #8]	; (1a54 <at25dfx_chip_check_presence+0xd0>)
    1a4a:	4798      	blx	r3
		return status;
    1a4c:	2005      	movs	r0, #5
    1a4e:	e7f7      	b.n	1a40 <at25dfx_chip_check_presence+0xbc>
    1a50:	0000934d 	.word	0x0000934d
    1a54:	0000938d 	.word	0x0000938d
    1a58:	41004400 	.word	0x41004400
    1a5c:	00005361 	.word	0x00005361
    1a60:	00005151 	.word	0x00005151
    1a64:	000113e8 	.word	0x000113e8
    1a68:	0000431f 	.word	0x0000431f
    1a6c:	0001441f 	.word	0x0001441f
    1a70:	0002451f 	.word	0x0002451f
    1a74:	0001451f 	.word	0x0001451f
    1a78:	0002461f 	.word	0x0002461f
    1a7c:	0003461f 	.word	0x0003461f
    1a80:	0000861f 	.word	0x0000861f
    1a84:	0001471f 	.word	0x0001471f
    1a88:	0000481f 	.word	0x0000481f
    1a8c:	0000651f 	.word	0x0000651f

00001a90 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    1a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a92:	b085      	sub	sp, #20
    1a94:	0004      	movs	r4, r0
    1a96:	000e      	movs	r6, r1
    1a98:	9201      	str	r2, [sp, #4]
    1a9a:	001f      	movs	r7, r3
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1a9c:	185a      	adds	r2, r3, r1
	switch (type) {
    1a9e:	7903      	ldrb	r3, [r0, #4]
    1aa0:	2b09      	cmp	r3, #9
    1aa2:	d815      	bhi.n	1ad0 <at25dfx_chip_read_buffer+0x40>
    1aa4:	009b      	lsls	r3, r3, #2
    1aa6:	4932      	ldr	r1, [pc, #200]	; (1b70 <at25dfx_chip_read_buffer+0xe0>)
    1aa8:	58cb      	ldr	r3, [r1, r3]
    1aaa:	469f      	mov	pc, r3
		return 256 * 1024UL;
    1aac:	2380      	movs	r3, #128	; 0x80
    1aae:	02db      	lsls	r3, r3, #11
    1ab0:	e012      	b.n	1ad8 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
    1ab2:	2380      	movs	r3, #128	; 0x80
    1ab4:	031b      	lsls	r3, r3, #12
    1ab6:	e00f      	b.n	1ad8 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
    1ab8:	2380      	movs	r3, #128	; 0x80
    1aba:	035b      	lsls	r3, r3, #13
    1abc:	e00c      	b.n	1ad8 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
    1abe:	2380      	movs	r3, #128	; 0x80
    1ac0:	039b      	lsls	r3, r3, #14
    1ac2:	e009      	b.n	1ad8 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
    1ac4:	2380      	movs	r3, #128	; 0x80
    1ac6:	03db      	lsls	r3, r3, #15
    1ac8:	e006      	b.n	1ad8 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
    1aca:	2380      	movs	r3, #128	; 0x80
    1acc:	041b      	lsls	r3, r3, #16
    1ace:	e003      	b.n	1ad8 <at25dfx_chip_read_buffer+0x48>
		return 0;
    1ad0:	2300      	movs	r3, #0
    1ad2:	e001      	b.n	1ad8 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
    1ad4:	2380      	movs	r3, #128	; 0x80
    1ad6:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    1ad8:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1ada:	429a      	cmp	r2, r3
    1adc:	d901      	bls.n	1ae2 <at25dfx_chip_read_buffer+0x52>
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
    1ade:	b005      	add	sp, #20
    1ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    1ae2:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    1ae4:	4b23      	ldr	r3, [pc, #140]	; (1b74 <at25dfx_chip_read_buffer+0xe4>)
    1ae6:	4798      	blx	r3
	if (module->locked) {
    1ae8:	792b      	ldrb	r3, [r5, #4]
    1aea:	2b00      	cmp	r3, #0
    1aec:	d13c      	bne.n	1b68 <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
    1aee:	3301      	adds	r3, #1
    1af0:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    1af2:	4b21      	ldr	r3, [pc, #132]	; (1b78 <at25dfx_chip_read_buffer+0xe8>)
    1af4:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    1af6:	230b      	movs	r3, #11
    1af8:	aa02      	add	r2, sp, #8
    1afa:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    1afc:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1afe:	0a33      	lsrs	r3, r6, #8
    1b00:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1b02:	0c36      	lsrs	r6, r6, #16
    1b04:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    1b06:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1b08:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1b0a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b0c:	2900      	cmp	r1, #0
    1b0e:	d104      	bne.n	1b1a <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
    1b10:	0953      	lsrs	r3, r2, #5
    1b12:	01db      	lsls	r3, r3, #7
    1b14:	4919      	ldr	r1, [pc, #100]	; (1b7c <at25dfx_chip_read_buffer+0xec>)
    1b16:	468c      	mov	ip, r1
    1b18:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b1a:	211f      	movs	r1, #31
    1b1c:	4011      	ands	r1, r2
    1b1e:	2201      	movs	r2, #1
    1b20:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1b22:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1b24:	2205      	movs	r2, #5
    1b26:	a902      	add	r1, sp, #8
    1b28:	6820      	ldr	r0, [r4, #0]
    1b2a:	4b15      	ldr	r3, [pc, #84]	; (1b80 <at25dfx_chip_read_buffer+0xf0>)
    1b2c:	4798      	blx	r3
	if (cmd.length) {
    1b2e:	2f00      	cmp	r7, #0
    1b30:	d113      	bne.n	1b5a <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
    1b32:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    1b34:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1b36:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b38:	2900      	cmp	r1, #0
    1b3a:	d104      	bne.n	1b46 <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
    1b3c:	0953      	lsrs	r3, r2, #5
    1b3e:	01db      	lsls	r3, r3, #7
    1b40:	490e      	ldr	r1, [pc, #56]	; (1b7c <at25dfx_chip_read_buffer+0xec>)
    1b42:	468c      	mov	ip, r1
    1b44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b46:	211f      	movs	r1, #31
    1b48:	4011      	ands	r1, r2
    1b4a:	2201      	movs	r2, #1
    1b4c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1b4e:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
    1b50:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    1b52:	2200      	movs	r2, #0
    1b54:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
    1b56:	2000      	movs	r0, #0
    1b58:	e7c1      	b.n	1ade <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    1b5a:	2300      	movs	r3, #0
    1b5c:	003a      	movs	r2, r7
    1b5e:	9901      	ldr	r1, [sp, #4]
    1b60:	6820      	ldr	r0, [r4, #0]
    1b62:	4d08      	ldr	r5, [pc, #32]	; (1b84 <at25dfx_chip_read_buffer+0xf4>)
    1b64:	47a8      	blx	r5
    1b66:	e7e4      	b.n	1b32 <at25dfx_chip_read_buffer+0xa2>
    1b68:	4b03      	ldr	r3, [pc, #12]	; (1b78 <at25dfx_chip_read_buffer+0xe8>)
    1b6a:	4798      	blx	r3
		return status;
    1b6c:	2005      	movs	r0, #5
    1b6e:	e7b6      	b.n	1ade <at25dfx_chip_read_buffer+0x4e>
    1b70:	00011410 	.word	0x00011410
    1b74:	0000934d 	.word	0x0000934d
    1b78:	0000938d 	.word	0x0000938d
    1b7c:	41004400 	.word	0x41004400
    1b80:	00005361 	.word	0x00005361
    1b84:	00005151 	.word	0x00005151

00001b88 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    1b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b8a:	46de      	mov	lr, fp
    1b8c:	4657      	mov	r7, sl
    1b8e:	464e      	mov	r6, r9
    1b90:	4645      	mov	r5, r8
    1b92:	b5e0      	push	{r5, r6, r7, lr}
    1b94:	b085      	sub	sp, #20
    1b96:	0005      	movs	r5, r0
    1b98:	000e      	movs	r6, r1
    1b9a:	9201      	str	r2, [sp, #4]
    1b9c:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1b9e:	185a      	adds	r2, r3, r1
	switch (type) {
    1ba0:	7903      	ldrb	r3, [r0, #4]
    1ba2:	2b09      	cmp	r3, #9
    1ba4:	d815      	bhi.n	1bd2 <at25dfx_chip_write_buffer+0x4a>
    1ba6:	009b      	lsls	r3, r3, #2
    1ba8:	49ae      	ldr	r1, [pc, #696]	; (1e64 <at25dfx_chip_write_buffer+0x2dc>)
    1baa:	58cb      	ldr	r3, [r1, r3]
    1bac:	469f      	mov	pc, r3
		return 256 * 1024UL;
    1bae:	2380      	movs	r3, #128	; 0x80
    1bb0:	02db      	lsls	r3, r3, #11
    1bb2:	e012      	b.n	1bda <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    1bb4:	2380      	movs	r3, #128	; 0x80
    1bb6:	031b      	lsls	r3, r3, #12
    1bb8:	e00f      	b.n	1bda <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    1bba:	2380      	movs	r3, #128	; 0x80
    1bbc:	035b      	lsls	r3, r3, #13
    1bbe:	e00c      	b.n	1bda <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    1bc0:	2380      	movs	r3, #128	; 0x80
    1bc2:	039b      	lsls	r3, r3, #14
    1bc4:	e009      	b.n	1bda <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    1bc6:	2380      	movs	r3, #128	; 0x80
    1bc8:	03db      	lsls	r3, r3, #15
    1bca:	e006      	b.n	1bda <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    1bcc:	2380      	movs	r3, #128	; 0x80
    1bce:	041b      	lsls	r3, r3, #16
    1bd0:	e003      	b.n	1bda <at25dfx_chip_write_buffer+0x52>
		return 0;
    1bd2:	2300      	movs	r3, #0
    1bd4:	e001      	b.n	1bda <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    1bd6:	2380      	movs	r3, #128	; 0x80
    1bd8:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    1bda:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1bdc:	429a      	cmp	r2, r3
    1bde:	d906      	bls.n	1bee <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    1be0:	b005      	add	sp, #20
    1be2:	bc3c      	pop	{r2, r3, r4, r5}
    1be4:	4690      	mov	r8, r2
    1be6:	4699      	mov	r9, r3
    1be8:	46a2      	mov	sl, r4
    1bea:	46ab      	mov	fp, r5
    1bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    1bee:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
    1bf0:	4b9d      	ldr	r3, [pc, #628]	; (1e68 <at25dfx_chip_write_buffer+0x2e0>)
    1bf2:	4798      	blx	r3
	if (module->locked) {
    1bf4:	7923      	ldrb	r3, [r4, #4]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d000      	beq.n	1bfc <at25dfx_chip_write_buffer+0x74>
    1bfa:	e12e      	b.n	1e5a <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
    1bfc:	3301      	adds	r3, #1
    1bfe:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
    1c00:	4b9a      	ldr	r3, [pc, #616]	; (1e6c <at25dfx_chip_write_buffer+0x2e4>)
    1c02:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    1c04:	2306      	movs	r3, #6
    1c06:	aa02      	add	r2, sp, #8
    1c08:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    1c0a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1c0c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1c0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c10:	2900      	cmp	r1, #0
    1c12:	d104      	bne.n	1c1e <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    1c14:	0953      	lsrs	r3, r2, #5
    1c16:	01db      	lsls	r3, r3, #7
    1c18:	4995      	ldr	r1, [pc, #596]	; (1e70 <at25dfx_chip_write_buffer+0x2e8>)
    1c1a:	468c      	mov	ip, r1
    1c1c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c1e:	211f      	movs	r1, #31
    1c20:	4011      	ands	r1, r2
    1c22:	2201      	movs	r2, #1
    1c24:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1c26:	615a      	str	r2, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1c28:	2201      	movs	r2, #1
    1c2a:	a902      	add	r1, sp, #8
    1c2c:	6828      	ldr	r0, [r5, #0]
    1c2e:	4b91      	ldr	r3, [pc, #580]	; (1e74 <at25dfx_chip_write_buffer+0x2ec>)
    1c30:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    1c32:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1c34:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1c36:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c38:	2900      	cmp	r1, #0
    1c3a:	d104      	bne.n	1c46 <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1c3c:	0953      	lsrs	r3, r2, #5
    1c3e:	01db      	lsls	r3, r3, #7
    1c40:	498b      	ldr	r1, [pc, #556]	; (1e70 <at25dfx_chip_write_buffer+0x2e8>)
    1c42:	468c      	mov	ip, r1
    1c44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c46:	211f      	movs	r1, #31
    1c48:	4011      	ands	r1, r2
    1c4a:	2201      	movs	r2, #1
    1c4c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1c4e:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    1c50:	22ff      	movs	r2, #255	; 0xff
    1c52:	4032      	ands	r2, r6
    1c54:	2380      	movs	r3, #128	; 0x80
    1c56:	005b      	lsls	r3, r3, #1
    1c58:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    1c5a:	1c1a      	adds	r2, r3, #0
    1c5c:	b29b      	uxth	r3, r3
    1c5e:	42bb      	cmp	r3, r7
    1c60:	d900      	bls.n	1c64 <at25dfx_chip_write_buffer+0xdc>
    1c62:	1c3a      	adds	r2, r7, #0
    1c64:	b293      	uxth	r3, r2
    1c66:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    1c68:	2302      	movs	r3, #2
    1c6a:	aa02      	add	r2, sp, #8
    1c6c:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    1c6e:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1c70:	0a33      	lsrs	r3, r6, #8
    1c72:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1c74:	0c33      	lsrs	r3, r6, #16
    1c76:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    1c78:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1c7a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1c7c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c7e:	2900      	cmp	r1, #0
    1c80:	d104      	bne.n	1c8c <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
    1c82:	0953      	lsrs	r3, r2, #5
    1c84:	01db      	lsls	r3, r3, #7
    1c86:	497a      	ldr	r1, [pc, #488]	; (1e70 <at25dfx_chip_write_buffer+0x2e8>)
    1c88:	468c      	mov	ip, r1
    1c8a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c8c:	211f      	movs	r1, #31
    1c8e:	4011      	ands	r1, r2
    1c90:	2201      	movs	r2, #1
    1c92:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1c94:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1c96:	2204      	movs	r2, #4
    1c98:	a902      	add	r1, sp, #8
    1c9a:	6828      	ldr	r0, [r5, #0]
    1c9c:	4b75      	ldr	r3, [pc, #468]	; (1e74 <at25dfx_chip_write_buffer+0x2ec>)
    1c9e:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    1ca0:	4653      	mov	r3, sl
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d145      	bne.n	1d32 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    1ca6:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1ca8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1caa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1cac:	2900      	cmp	r1, #0
    1cae:	d104      	bne.n	1cba <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    1cb0:	0953      	lsrs	r3, r2, #5
    1cb2:	01db      	lsls	r3, r3, #7
    1cb4:	496e      	ldr	r1, [pc, #440]	; (1e70 <at25dfx_chip_write_buffer+0x2e8>)
    1cb6:	468c      	mov	ip, r1
    1cb8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1cba:	211f      	movs	r1, #31
    1cbc:	4011      	ands	r1, r2
    1cbe:	2201      	movs	r2, #1
    1cc0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1cc2:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1cc4:	682b      	ldr	r3, [r5, #0]
    1cc6:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    1cc8:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1cca:	7e0b      	ldrb	r3, [r1, #24]
    1ccc:	4213      	tst	r3, r2
    1cce:	d0fc      	beq.n	1cca <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
    1cd0:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1cd2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1cd4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1cd6:	2900      	cmp	r1, #0
    1cd8:	d104      	bne.n	1ce4 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    1cda:	0953      	lsrs	r3, r2, #5
    1cdc:	01db      	lsls	r3, r3, #7
    1cde:	4964      	ldr	r1, [pc, #400]	; (1e70 <at25dfx_chip_write_buffer+0x2e8>)
    1ce0:	468c      	mov	ip, r1
    1ce2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ce4:	211f      	movs	r1, #31
    1ce6:	4011      	ands	r1, r2
    1ce8:	2201      	movs	r2, #1
    1cea:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1cec:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1cee:	682b      	ldr	r3, [r5, #0]
    1cf0:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1cf2:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1cf4:	07d2      	lsls	r2, r2, #31
    1cf6:	d501      	bpl.n	1cfc <at25dfx_chip_write_buffer+0x174>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1cf8:	2205      	movs	r2, #5
    1cfa:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    1cfc:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1cfe:	6802      	ldr	r2, [r0, #0]
    1d00:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1d02:	7e13      	ldrb	r3, [r2, #24]
    1d04:	420b      	tst	r3, r1
    1d06:	d0fc      	beq.n	1d02 <at25dfx_chip_write_buffer+0x17a>
    1d08:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    1d0a:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1d0c:	075b      	lsls	r3, r3, #29
    1d0e:	d509      	bpl.n	1d24 <at25dfx_chip_write_buffer+0x19c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1d10:	8b53      	ldrh	r3, [r2, #26]
    1d12:	075b      	lsls	r3, r3, #29
    1d14:	d501      	bpl.n	1d1a <at25dfx_chip_write_buffer+0x192>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d16:	2304      	movs	r3, #4
    1d18:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d1a:	7983      	ldrb	r3, [r0, #6]
    1d1c:	2b01      	cmp	r3, #1
    1d1e:	d00e      	beq.n	1d3e <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1d20:	6a94      	ldr	r4, [r2, #40]	; 0x28
    1d22:	b2e4      	uxtb	r4, r4

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    1d24:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1d26:	2300      	movs	r3, #0
    1d28:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    1d2a:	2004      	movs	r0, #4
    1d2c:	46b4      	mov	ip, r6
    1d2e:	002e      	movs	r6, r5
    1d30:	e010      	b.n	1d54 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    1d32:	4652      	mov	r2, sl
    1d34:	9901      	ldr	r1, [sp, #4]
    1d36:	6828      	ldr	r0, [r5, #0]
    1d38:	4b4e      	ldr	r3, [pc, #312]	; (1e74 <at25dfx_chip_write_buffer+0x2ec>)
    1d3a:	4798      	blx	r3
    1d3c:	e7b3      	b.n	1ca6 <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1d3e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d40:	05db      	lsls	r3, r3, #23
    1d42:	0ddc      	lsrs	r4, r3, #23
    1d44:	e7ee      	b.n	1d24 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d46:	79ab      	ldrb	r3, [r5, #6]
    1d48:	2b01      	cmp	r3, #1
    1d4a:	d01a      	beq.n	1d82 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1d4c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    1d4e:	b2e4      	uxtb	r4, r4
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    1d50:	4221      	tst	r1, r4
    1d52:	d01a      	beq.n	1d8a <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d54:	6833      	ldr	r3, [r6, #0]
    1d56:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1d58:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    1d5a:	420b      	tst	r3, r1
    1d5c:	d0fc      	beq.n	1d58 <at25dfx_chip_write_buffer+0x1d0>
    1d5e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1d60:	420b      	tst	r3, r1
    1d62:	d001      	beq.n	1d68 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1d64:	4643      	mov	r3, r8
    1d66:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    1d68:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d6a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1d6c:	7e13      	ldrb	r3, [r2, #24]
    1d6e:	4203      	tst	r3, r0
    1d70:	d0fc      	beq.n	1d6c <at25dfx_chip_write_buffer+0x1e4>
    1d72:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    1d74:	4203      	tst	r3, r0
    1d76:	d0eb      	beq.n	1d50 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1d78:	8b53      	ldrh	r3, [r2, #26]
    1d7a:	4203      	tst	r3, r0
    1d7c:	d0e3      	beq.n	1d46 <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d7e:	8350      	strh	r0, [r2, #26]
    1d80:	e7e1      	b.n	1d46 <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1d82:	6a94      	ldr	r4, [r2, #40]	; 0x28
    1d84:	05e4      	lsls	r4, r4, #23
    1d86:	0de4      	lsrs	r4, r4, #23
    1d88:	e7e2      	b.n	1d50 <at25dfx_chip_write_buffer+0x1c8>
    1d8a:	0035      	movs	r5, r6
    1d8c:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
    1d8e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1d90:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1d92:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d94:	2900      	cmp	r1, #0
    1d96:	d104      	bne.n	1da2 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
    1d98:	0953      	lsrs	r3, r2, #5
    1d9a:	01db      	lsls	r3, r3, #7
    1d9c:	4934      	ldr	r1, [pc, #208]	; (1e70 <at25dfx_chip_write_buffer+0x2e8>)
    1d9e:	468c      	mov	ip, r1
    1da0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1da2:	211f      	movs	r1, #31
    1da4:	4011      	ands	r1, r2
    1da6:	2201      	movs	r2, #1
    1da8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1daa:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    1dac:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
    1dae:	06a3      	lsls	r3, r4, #26
    1db0:	d44f      	bmi.n	1e52 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
    1db2:	4653      	mov	r3, sl
    1db4:	1aff      	subs	r7, r7, r3
    1db6:	b2bb      	uxth	r3, r7
    1db8:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
    1dba:	9a01      	ldr	r2, [sp, #4]
    1dbc:	4691      	mov	r9, r2
	}
	return STATUS_OK;
    1dbe:	2000      	movs	r0, #0
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d046      	beq.n	1e52 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1dc4:	231f      	movs	r3, #31
    1dc6:	469b      	mov	fp, r3
    1dc8:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1dca:	4b2a      	ldr	r3, [pc, #168]	; (1e74 <at25dfx_chip_write_buffer+0x2ec>)
    1dcc:	4698      	mov	r8, r3
    1dce:	4653      	mov	r3, sl
    1dd0:	9301      	str	r3, [sp, #4]
    1dd2:	468a      	mov	sl, r1
    1dd4:	e058      	b.n	1e88 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    1dd6:	001a      	movs	r2, r3
    1dd8:	4649      	mov	r1, r9
    1dda:	6828      	ldr	r0, [r5, #0]
    1ddc:	4b25      	ldr	r3, [pc, #148]	; (1e74 <at25dfx_chip_write_buffer+0x2ec>)
    1dde:	4798      	blx	r3
    1de0:	e0a4      	b.n	1f2c <at25dfx_chip_write_buffer+0x3a4>
    1de2:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1de4:	05c0      	lsls	r0, r0, #23
    1de6:	0dc0      	lsrs	r0, r0, #23
    1de8:	e0e1      	b.n	1fae <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1dea:	79bb      	ldrb	r3, [r7, #6]
    1dec:	2b01      	cmp	r3, #1
    1dee:	d01a      	beq.n	1e26 <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1df0:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1df2:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
    1df4:	4204      	tst	r4, r0
    1df6:	d01a      	beq.n	1e2e <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1df8:	682b      	ldr	r3, [r5, #0]
    1dfa:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1dfc:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    1dfe:	4223      	tst	r3, r4
    1e00:	d0fc      	beq.n	1dfc <at25dfx_chip_write_buffer+0x274>
    1e02:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1e04:	4223      	tst	r3, r4
    1e06:	d001      	beq.n	1e0c <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1e08:	2300      	movs	r3, #0
    1e0a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    1e0c:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e0e:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1e10:	7e13      	ldrb	r3, [r2, #24]
    1e12:	420b      	tst	r3, r1
    1e14:	d0fc      	beq.n	1e10 <at25dfx_chip_write_buffer+0x288>
    1e16:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    1e18:	420b      	tst	r3, r1
    1e1a:	d0eb      	beq.n	1df4 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1e1c:	8b53      	ldrh	r3, [r2, #26]
    1e1e:	420b      	tst	r3, r1
    1e20:	d0e3      	beq.n	1dea <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1e22:	8351      	strh	r1, [r2, #26]
    1e24:	e7e1      	b.n	1dea <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1e26:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1e28:	05c0      	lsls	r0, r0, #23
    1e2a:	0dc0      	lsrs	r0, r0, #23
    1e2c:	e7e2      	b.n	1df4 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
    1e2e:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1e30:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1e32:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1e34:	2900      	cmp	r1, #0
    1e36:	d104      	bne.n	1e42 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
    1e38:	095a      	lsrs	r2, r3, #5
    1e3a:	01d2      	lsls	r2, r2, #7
    1e3c:	490c      	ldr	r1, [pc, #48]	; (1e70 <at25dfx_chip_write_buffer+0x2e8>)
    1e3e:	468c      	mov	ip, r1
    1e40:	4462      	add	r2, ip
    1e42:	4659      	mov	r1, fp
    1e44:	400b      	ands	r3, r1
    1e46:	0021      	movs	r1, r4
    1e48:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1e4a:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    1e4c:	0683      	lsls	r3, r0, #26
    1e4e:	d513      	bpl.n	1e78 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
    1e50:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    1e52:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
    1e54:	2200      	movs	r2, #0
    1e56:	711a      	strb	r2, [r3, #4]
	return status;
    1e58:	e6c2      	b.n	1be0 <at25dfx_chip_write_buffer+0x58>
    1e5a:	4b04      	ldr	r3, [pc, #16]	; (1e6c <at25dfx_chip_write_buffer+0x2e4>)
    1e5c:	4798      	blx	r3
		return status;
    1e5e:	2005      	movs	r0, #5
    1e60:	e6be      	b.n	1be0 <at25dfx_chip_write_buffer+0x58>
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	0001143c 	.word	0x0001143c
    1e68:	0000934d 	.word	0x0000934d
    1e6c:	0000938d 	.word	0x0000938d
    1e70:	41004400 	.word	0x41004400
    1e74:	00005361 	.word	0x00005361
		length -= cmd.length;
    1e78:	4653      	mov	r3, sl
    1e7a:	9a01      	ldr	r2, [sp, #4]
    1e7c:	1a9b      	subs	r3, r3, r2
    1e7e:	b29b      	uxth	r3, r3
    1e80:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
    1e82:	2b00      	cmp	r3, #0
    1e84:	d100      	bne.n	1e88 <at25dfx_chip_write_buffer+0x300>
    1e86:	e094      	b.n	1fb2 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
    1e88:	ab02      	add	r3, sp, #8
    1e8a:	2206      	movs	r2, #6
    1e8c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    1e8e:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1e90:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1e92:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1e94:	2900      	cmp	r1, #0
    1e96:	d104      	bne.n	1ea2 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    1e98:	095a      	lsrs	r2, r3, #5
    1e9a:	01d2      	lsls	r2, r2, #7
    1e9c:	4946      	ldr	r1, [pc, #280]	; (1fb8 <at25dfx_chip_write_buffer+0x430>)
    1e9e:	468c      	mov	ip, r1
    1ea0:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ea2:	4659      	mov	r1, fp
    1ea4:	400b      	ands	r3, r1
    1ea6:	0021      	movs	r1, r4
    1ea8:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    1eaa:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1eac:	0022      	movs	r2, r4
    1eae:	a902      	add	r1, sp, #8
    1eb0:	6828      	ldr	r0, [r5, #0]
    1eb2:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
    1eb4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1eb6:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1eb8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1eba:	2900      	cmp	r1, #0
    1ebc:	d104      	bne.n	1ec8 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
    1ebe:	095a      	lsrs	r2, r3, #5
    1ec0:	01d2      	lsls	r2, r2, #7
    1ec2:	493d      	ldr	r1, [pc, #244]	; (1fb8 <at25dfx_chip_write_buffer+0x430>)
    1ec4:	468c      	mov	ip, r1
    1ec6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ec8:	4659      	mov	r1, fp
    1eca:	400b      	ands	r3, r1
    1ecc:	0021      	movs	r1, r4
    1ece:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1ed0:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    1ed2:	9a01      	ldr	r2, [sp, #4]
    1ed4:	4694      	mov	ip, r2
    1ed6:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
    1ed8:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    1eda:	4657      	mov	r7, sl
    1edc:	2380      	movs	r3, #128	; 0x80
    1ede:	005b      	lsls	r3, r3, #1
    1ee0:	459a      	cmp	sl, r3
    1ee2:	d901      	bls.n	1ee8 <at25dfx_chip_write_buffer+0x360>
    1ee4:	4b35      	ldr	r3, [pc, #212]	; (1fbc <at25dfx_chip_write_buffer+0x434>)
    1ee6:	881f      	ldrh	r7, [r3, #0]
    1ee8:	b2bb      	uxth	r3, r7
    1eea:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    1eec:	2302      	movs	r3, #2
    1eee:	aa02      	add	r2, sp, #8
    1ef0:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    1ef2:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1ef4:	0a33      	lsrs	r3, r6, #8
    1ef6:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1ef8:	0c33      	lsrs	r3, r6, #16
    1efa:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    1efc:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1efe:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1f00:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1f02:	2900      	cmp	r1, #0
    1f04:	d104      	bne.n	1f10 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
    1f06:	095a      	lsrs	r2, r3, #5
    1f08:	01d2      	lsls	r2, r2, #7
    1f0a:	492b      	ldr	r1, [pc, #172]	; (1fb8 <at25dfx_chip_write_buffer+0x430>)
    1f0c:	468c      	mov	ip, r1
    1f0e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1f10:	4659      	mov	r1, fp
    1f12:	400b      	ands	r3, r1
    1f14:	0021      	movs	r1, r4
    1f16:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    1f18:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1f1a:	2204      	movs	r2, #4
    1f1c:	a902      	add	r1, sp, #8
    1f1e:	6828      	ldr	r0, [r5, #0]
    1f20:	4b27      	ldr	r3, [pc, #156]	; (1fc0 <at25dfx_chip_write_buffer+0x438>)
    1f22:	4798      	blx	r3
	if (cmd.length) {
    1f24:	9b01      	ldr	r3, [sp, #4]
    1f26:	2b00      	cmp	r3, #0
    1f28:	d000      	beq.n	1f2c <at25dfx_chip_write_buffer+0x3a4>
    1f2a:	e754      	b.n	1dd6 <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
    1f2c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1f2e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1f30:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1f32:	2900      	cmp	r1, #0
    1f34:	d104      	bne.n	1f40 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
    1f36:	095a      	lsrs	r2, r3, #5
    1f38:	01d2      	lsls	r2, r2, #7
    1f3a:	491f      	ldr	r1, [pc, #124]	; (1fb8 <at25dfx_chip_write_buffer+0x430>)
    1f3c:	468c      	mov	ip, r1
    1f3e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1f40:	4659      	mov	r1, fp
    1f42:	400b      	ands	r3, r1
    1f44:	0021      	movs	r1, r4
    1f46:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1f48:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f4a:	682b      	ldr	r3, [r5, #0]
    1f4c:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1f4e:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    1f50:	4223      	tst	r3, r4
    1f52:	d0fc      	beq.n	1f4e <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
    1f54:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    1f56:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1f58:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1f5a:	2900      	cmp	r1, #0
    1f5c:	d104      	bne.n	1f68 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
    1f5e:	095a      	lsrs	r2, r3, #5
    1f60:	01d2      	lsls	r2, r2, #7
    1f62:	4915      	ldr	r1, [pc, #84]	; (1fb8 <at25dfx_chip_write_buffer+0x430>)
    1f64:	468c      	mov	ip, r1
    1f66:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1f68:	4659      	mov	r1, fp
    1f6a:	400b      	ands	r3, r1
    1f6c:	0021      	movs	r1, r4
    1f6e:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    1f70:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f72:	682b      	ldr	r3, [r5, #0]
    1f74:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1f76:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1f78:	4222      	tst	r2, r4
    1f7a:	d001      	beq.n	1f80 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1f7c:	2205      	movs	r2, #5
    1f7e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    1f80:	682b      	ldr	r3, [r5, #0]
    1f82:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f84:	681a      	ldr	r2, [r3, #0]
    1f86:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1f88:	7e13      	ldrb	r3, [r2, #24]
    1f8a:	420b      	tst	r3, r1
    1f8c:	d0fc      	beq.n	1f88 <at25dfx_chip_write_buffer+0x400>
    1f8e:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    1f90:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    1f92:	075b      	lsls	r3, r3, #29
    1f94:	d50b      	bpl.n	1fae <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f96:	8b53      	ldrh	r3, [r2, #26]
    1f98:	075b      	lsls	r3, r3, #29
    1f9a:	d501      	bpl.n	1fa0 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1f9c:	2304      	movs	r3, #4
    1f9e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1fa0:	4663      	mov	r3, ip
    1fa2:	799b      	ldrb	r3, [r3, #6]
    1fa4:	2b01      	cmp	r3, #1
    1fa6:	d100      	bne.n	1faa <at25dfx_chip_write_buffer+0x422>
    1fa8:	e71b      	b.n	1de2 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1faa:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1fac:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
    1fae:	2104      	movs	r1, #4
    1fb0:	e722      	b.n	1df8 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
    1fb2:	2000      	movs	r0, #0
    1fb4:	e74d      	b.n	1e52 <at25dfx_chip_write_buffer+0x2ca>
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	41004400 	.word	0x41004400
    1fbc:	00011438 	.word	0x00011438
    1fc0:	00005361 	.word	0x00005361

00001fc4 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    1fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fc6:	b083      	sub	sp, #12
    1fc8:	0004      	movs	r4, r0
    1fca:	000e      	movs	r6, r1
    1fcc:	0015      	movs	r5, r2
	switch (type) {
    1fce:	7903      	ldrb	r3, [r0, #4]
    1fd0:	2b09      	cmp	r3, #9
    1fd2:	d900      	bls.n	1fd6 <at25dfx_chip_erase_block+0x12>
    1fd4:	e0f2      	b.n	21bc <STACK_SIZE+0x1bc>
    1fd6:	009b      	lsls	r3, r3, #2
    1fd8:	4a7b      	ldr	r2, [pc, #492]	; (21c8 <STACK_SIZE+0x1c8>)
    1fda:	58d3      	ldr	r3, [r2, r3]
    1fdc:	469f      	mov	pc, r3
		return 256 * 1024UL;
    1fde:	2380      	movs	r3, #128	; 0x80
    1fe0:	02db      	lsls	r3, r3, #11
    1fe2:	e010      	b.n	2006 <STACK_SIZE+0x6>
		return 512 * 1024UL;
    1fe4:	2380      	movs	r3, #128	; 0x80
    1fe6:	031b      	lsls	r3, r3, #12
    1fe8:	e00d      	b.n	2006 <STACK_SIZE+0x6>
		return 1024 * 1024UL;
    1fea:	2380      	movs	r3, #128	; 0x80
    1fec:	035b      	lsls	r3, r3, #13
    1fee:	e00a      	b.n	2006 <STACK_SIZE+0x6>
		return 2048 * 1024UL;
    1ff0:	2380      	movs	r3, #128	; 0x80
    1ff2:	039b      	lsls	r3, r3, #14
    1ff4:	e007      	b.n	2006 <STACK_SIZE+0x6>
		return 4096 * 1024UL;
    1ff6:	2380      	movs	r3, #128	; 0x80
    1ff8:	03db      	lsls	r3, r3, #15
    1ffa:	e004      	b.n	2006 <STACK_SIZE+0x6>
		return 8192 * 1024UL;
    1ffc:	2380      	movs	r3, #128	; 0x80
    1ffe:	041b      	lsls	r3, r3, #16
    2000:	e001      	b.n	2006 <STACK_SIZE+0x6>
		return 64 * 1024UL;
    2002:	2380      	movs	r3, #128	; 0x80
    2004:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    2006:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    2008:	42b3      	cmp	r3, r6
    200a:	d801      	bhi.n	2010 <STACK_SIZE+0x10>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    200c:	b003      	add	sp, #12
    200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    2010:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    2012:	4b6e      	ldr	r3, [pc, #440]	; (21cc <STACK_SIZE+0x1cc>)
    2014:	4798      	blx	r3
	if (module->locked) {
    2016:	793b      	ldrb	r3, [r7, #4]
    2018:	2b00      	cmp	r3, #0
    201a:	d000      	beq.n	201e <STACK_SIZE+0x1e>
    201c:	e0d0      	b.n	21c0 <STACK_SIZE+0x1c0>
		module->locked = true;
    201e:	3301      	adds	r3, #1
    2020:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    2022:	4b6b      	ldr	r3, [pc, #428]	; (21d0 <STACK_SIZE+0x1d0>)
    2024:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    2026:	2306      	movs	r3, #6
    2028:	466a      	mov	r2, sp
    202a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    202c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    202e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2030:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2032:	2900      	cmp	r1, #0
    2034:	d104      	bne.n	2040 <STACK_SIZE+0x40>
		return &(ports[port_index]->Group[group_index]);
    2036:	0953      	lsrs	r3, r2, #5
    2038:	01db      	lsls	r3, r3, #7
    203a:	4966      	ldr	r1, [pc, #408]	; (21d4 <STACK_SIZE+0x1d4>)
    203c:	468c      	mov	ip, r1
    203e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2040:	211f      	movs	r1, #31
    2042:	4011      	ands	r1, r2
    2044:	2201      	movs	r2, #1
    2046:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2048:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    204a:	2201      	movs	r2, #1
    204c:	4669      	mov	r1, sp
    204e:	6820      	ldr	r0, [r4, #0]
    2050:	4b61      	ldr	r3, [pc, #388]	; (21d8 <STACK_SIZE+0x1d8>)
    2052:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    2054:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    2056:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2058:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    205a:	2900      	cmp	r1, #0
    205c:	d104      	bne.n	2068 <STACK_SIZE+0x68>
		return &(ports[port_index]->Group[group_index]);
    205e:	0953      	lsrs	r3, r2, #5
    2060:	01db      	lsls	r3, r3, #7
    2062:	495c      	ldr	r1, [pc, #368]	; (21d4 <STACK_SIZE+0x1d4>)
    2064:	468c      	mov	ip, r1
    2066:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2068:	211f      	movs	r1, #31
    206a:	4011      	ands	r1, r2
    206c:	2201      	movs	r2, #1
    206e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2070:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    2072:	2d01      	cmp	r5, #1
    2074:	d006      	beq.n	2084 <STACK_SIZE+0x84>
    2076:	2d00      	cmp	r5, #0
    2078:	d063      	beq.n	2142 <STACK_SIZE+0x142>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    207a:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    207c:	2d02      	cmp	r5, #2
    207e:	d002      	beq.n	2086 <STACK_SIZE+0x86>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    2080:	2300      	movs	r3, #0
    2082:	e000      	b.n	2086 <STACK_SIZE+0x86>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    2084:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    2086:	466a      	mov	r2, sp
    2088:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    208a:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    208c:	0a33      	lsrs	r3, r6, #8
    208e:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    2090:	0c36      	lsrs	r6, r6, #16
    2092:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    2094:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    2096:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2098:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    209a:	2900      	cmp	r1, #0
    209c:	d104      	bne.n	20a8 <STACK_SIZE+0xa8>
		return &(ports[port_index]->Group[group_index]);
    209e:	0953      	lsrs	r3, r2, #5
    20a0:	01db      	lsls	r3, r3, #7
    20a2:	494c      	ldr	r1, [pc, #304]	; (21d4 <STACK_SIZE+0x1d4>)
    20a4:	468c      	mov	ip, r1
    20a6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20a8:	211f      	movs	r1, #31
    20aa:	4011      	ands	r1, r2
    20ac:	2201      	movs	r2, #1
    20ae:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    20b0:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    20b2:	2204      	movs	r2, #4
    20b4:	4669      	mov	r1, sp
    20b6:	6820      	ldr	r0, [r4, #0]
    20b8:	4b47      	ldr	r3, [pc, #284]	; (21d8 <STACK_SIZE+0x1d8>)
    20ba:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    20bc:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    20be:	09d1      	lsrs	r1, r2, #7
		return NULL;
    20c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    20c2:	2900      	cmp	r1, #0
    20c4:	d104      	bne.n	20d0 <STACK_SIZE+0xd0>
		return &(ports[port_index]->Group[group_index]);
    20c6:	0953      	lsrs	r3, r2, #5
    20c8:	01db      	lsls	r3, r3, #7
    20ca:	4942      	ldr	r1, [pc, #264]	; (21d4 <STACK_SIZE+0x1d4>)
    20cc:	468c      	mov	ip, r1
    20ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20d0:	211f      	movs	r1, #31
    20d2:	4011      	ands	r1, r2
    20d4:	2201      	movs	r2, #1
    20d6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    20d8:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20da:	6823      	ldr	r3, [r4, #0]
    20dc:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
    20de:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20e0:	7e0b      	ldrb	r3, [r1, #24]
    20e2:	4213      	tst	r3, r2
    20e4:	d0fc      	beq.n	20e0 <STACK_SIZE+0xe0>
	port_pin_set_output_level(chip->cs_pin, false);
    20e6:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    20e8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    20ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    20ec:	2900      	cmp	r1, #0
    20ee:	d104      	bne.n	20fa <STACK_SIZE+0xfa>
		return &(ports[port_index]->Group[group_index]);
    20f0:	0953      	lsrs	r3, r2, #5
    20f2:	01db      	lsls	r3, r3, #7
    20f4:	4937      	ldr	r1, [pc, #220]	; (21d4 <STACK_SIZE+0x1d4>)
    20f6:	468c      	mov	ip, r1
    20f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20fa:	211f      	movs	r1, #31
    20fc:	4011      	ands	r1, r2
    20fe:	2201      	movs	r2, #1
    2100:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2102:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2104:	6823      	ldr	r3, [r4, #0]
    2106:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2108:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    210a:	07d2      	lsls	r2, r2, #31
    210c:	d501      	bpl.n	2112 <STACK_SIZE+0x112>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    210e:	2205      	movs	r2, #5
    2110:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    2112:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2114:	6802      	ldr	r2, [r0, #0]
    2116:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2118:	7e13      	ldrb	r3, [r2, #24]
    211a:	420b      	tst	r3, r1
    211c:	d0fc      	beq.n	2118 <STACK_SIZE+0x118>
    211e:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    2120:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    2122:	075b      	lsls	r3, r3, #29
    2124:	d509      	bpl.n	213a <STACK_SIZE+0x13a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2126:	8b53      	ldrh	r3, [r2, #26]
    2128:	075b      	lsls	r3, r3, #29
    212a:	d501      	bpl.n	2130 <STACK_SIZE+0x130>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    212c:	2304      	movs	r3, #4
    212e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2130:	7983      	ldrb	r3, [r0, #6]
    2132:	2b01      	cmp	r3, #1
    2134:	d007      	beq.n	2146 <STACK_SIZE+0x146>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2136:	6a95      	ldr	r5, [r2, #40]	; 0x28
    2138:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
    213a:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    213c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
    213e:	2004      	movs	r0, #4
    2140:	e00c      	b.n	215c <STACK_SIZE+0x15c>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    2142:	2320      	movs	r3, #32
    2144:	e79f      	b.n	2086 <STACK_SIZE+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2146:	6a95      	ldr	r5, [r2, #40]	; 0x28
    2148:	05ed      	lsls	r5, r5, #23
    214a:	0ded      	lsrs	r5, r5, #23
    214c:	e7f5      	b.n	213a <STACK_SIZE+0x13a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    214e:	79b3      	ldrb	r3, [r6, #6]
    2150:	2b01      	cmp	r3, #1
    2152:	d019      	beq.n	2188 <STACK_SIZE+0x188>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2154:	6a95      	ldr	r5, [r2, #40]	; 0x28
    2156:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
    2158:	4229      	tst	r1, r5
    215a:	d019      	beq.n	2190 <STACK_SIZE+0x190>
	SercomSpi *const spi_module = &(module->hw->SPI);
    215c:	6823      	ldr	r3, [r4, #0]
    215e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2160:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    2162:	420b      	tst	r3, r1
    2164:	d0fc      	beq.n	2160 <STACK_SIZE+0x160>
    2166:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    2168:	420b      	tst	r3, r1
    216a:	d000      	beq.n	216e <STACK_SIZE+0x16e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    216c:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    216e:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2170:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2172:	7e13      	ldrb	r3, [r2, #24]
    2174:	4203      	tst	r3, r0
    2176:	d0fc      	beq.n	2172 <STACK_SIZE+0x172>
    2178:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    217a:	4203      	tst	r3, r0
    217c:	d0ec      	beq.n	2158 <STACK_SIZE+0x158>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    217e:	8b53      	ldrh	r3, [r2, #26]
    2180:	4203      	tst	r3, r0
    2182:	d0e4      	beq.n	214e <STACK_SIZE+0x14e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2184:	8350      	strh	r0, [r2, #26]
    2186:	e7e2      	b.n	214e <STACK_SIZE+0x14e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2188:	6a95      	ldr	r5, [r2, #40]	; 0x28
    218a:	05ed      	lsls	r5, r5, #23
    218c:	0ded      	lsrs	r5, r5, #23
    218e:	e7e3      	b.n	2158 <STACK_SIZE+0x158>
	port_pin_set_output_level(chip->cs_pin, true);
    2190:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    2192:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2194:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2196:	2900      	cmp	r1, #0
    2198:	d104      	bne.n	21a4 <STACK_SIZE+0x1a4>
		return &(ports[port_index]->Group[group_index]);
    219a:	0953      	lsrs	r3, r2, #5
    219c:	01db      	lsls	r3, r3, #7
    219e:	490d      	ldr	r1, [pc, #52]	; (21d4 <STACK_SIZE+0x1d4>)
    21a0:	468c      	mov	ip, r1
    21a2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21a4:	211f      	movs	r1, #31
    21a6:	4011      	ands	r1, r2
    21a8:	2201      	movs	r2, #1
    21aa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    21ac:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    21ae:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
    21b0:	0fc0      	lsrs	r0, r0, #31
    21b2:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    21b4:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    21b6:	2200      	movs	r2, #0
    21b8:	711a      	strb	r2, [r3, #4]
	return status;
    21ba:	e727      	b.n	200c <STACK_SIZE+0xc>
		return STATUS_ERR_INVALID_ARG;
    21bc:	2017      	movs	r0, #23
    21be:	e725      	b.n	200c <STACK_SIZE+0xc>
    21c0:	4b03      	ldr	r3, [pc, #12]	; (21d0 <STACK_SIZE+0x1d0>)
    21c2:	4798      	blx	r3
		return status;
    21c4:	2005      	movs	r0, #5
    21c6:	e721      	b.n	200c <STACK_SIZE+0xc>
    21c8:	00011464 	.word	0x00011464
    21cc:	0000934d 	.word	0x0000934d
    21d0:	0000938d 	.word	0x0000938d
    21d4:	41004400 	.word	0x41004400
    21d8:	00005361 	.word	0x00005361

000021dc <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    21dc:	b570      	push	{r4, r5, r6, lr}
    21de:	b082      	sub	sp, #8
    21e0:	0004      	movs	r4, r0
    21e2:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    21e4:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
    21e6:	4b35      	ldr	r3, [pc, #212]	; (22bc <at25dfx_chip_set_global_sector_protect+0xe0>)
    21e8:	4798      	blx	r3
	if (module->locked) {
    21ea:	7933      	ldrb	r3, [r6, #4]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d160      	bne.n	22b2 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
    21f0:	3301      	adds	r3, #1
    21f2:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
    21f4:	4b32      	ldr	r3, [pc, #200]	; (22c0 <at25dfx_chip_set_global_sector_protect+0xe4>)
    21f6:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    21f8:	2306      	movs	r3, #6
    21fa:	466a      	mov	r2, sp
    21fc:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    21fe:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    2200:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2202:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2204:	2900      	cmp	r1, #0
    2206:	d104      	bne.n	2212 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    2208:	0953      	lsrs	r3, r2, #5
    220a:	01db      	lsls	r3, r3, #7
    220c:	492d      	ldr	r1, [pc, #180]	; (22c4 <at25dfx_chip_set_global_sector_protect+0xe8>)
    220e:	468c      	mov	ip, r1
    2210:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2212:	211f      	movs	r1, #31
    2214:	4011      	ands	r1, r2
    2216:	2201      	movs	r2, #1
    2218:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    221a:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    221c:	2201      	movs	r2, #1
    221e:	4669      	mov	r1, sp
    2220:	6820      	ldr	r0, [r4, #0]
    2222:	4b29      	ldr	r3, [pc, #164]	; (22c8 <at25dfx_chip_set_global_sector_protect+0xec>)
    2224:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    2226:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    2228:	09d1      	lsrs	r1, r2, #7
		return NULL;
    222a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    222c:	2900      	cmp	r1, #0
    222e:	d104      	bne.n	223a <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2230:	0953      	lsrs	r3, r2, #5
    2232:	01db      	lsls	r3, r3, #7
    2234:	4923      	ldr	r1, [pc, #140]	; (22c4 <at25dfx_chip_set_global_sector_protect+0xe8>)
    2236:	468c      	mov	ip, r1
    2238:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    223a:	211f      	movs	r1, #31
    223c:	4011      	ands	r1, r2
    223e:	2201      	movs	r2, #1
    2240:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2242:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    2244:	233c      	movs	r3, #60	; 0x3c
    2246:	1e6a      	subs	r2, r5, #1
    2248:	4195      	sbcs	r5, r2
    224a:	426d      	negs	r5, r5
    224c:	402b      	ands	r3, r5
    224e:	466a      	mov	r2, sp
    2250:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
    2252:	2301      	movs	r3, #1
    2254:	466a      	mov	r2, sp
    2256:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    2258:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    225a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    225c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    225e:	2900      	cmp	r1, #0
    2260:	d104      	bne.n	226c <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    2262:	0953      	lsrs	r3, r2, #5
    2264:	01db      	lsls	r3, r3, #7
    2266:	4917      	ldr	r1, [pc, #92]	; (22c4 <at25dfx_chip_set_global_sector_protect+0xe8>)
    2268:	468c      	mov	ip, r1
    226a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    226c:	211f      	movs	r1, #31
    226e:	4011      	ands	r1, r2
    2270:	2201      	movs	r2, #1
    2272:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2274:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    2276:	2201      	movs	r2, #1
    2278:	4669      	mov	r1, sp
    227a:	6820      	ldr	r0, [r4, #0]
    227c:	4d12      	ldr	r5, [pc, #72]	; (22c8 <at25dfx_chip_set_global_sector_protect+0xec>)
    227e:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    2280:	2201      	movs	r2, #1
    2282:	466b      	mov	r3, sp
    2284:	1dd9      	adds	r1, r3, #7
    2286:	6820      	ldr	r0, [r4, #0]
    2288:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    228a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    228c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    228e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2290:	2900      	cmp	r1, #0
    2292:	d104      	bne.n	229e <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    2294:	0953      	lsrs	r3, r2, #5
    2296:	01db      	lsls	r3, r3, #7
    2298:	490a      	ldr	r1, [pc, #40]	; (22c4 <at25dfx_chip_set_global_sector_protect+0xe8>)
    229a:	468c      	mov	ip, r1
    229c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    229e:	211f      	movs	r1, #31
    22a0:	4011      	ands	r1, r2
    22a2:	2201      	movs	r2, #1
    22a4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    22a6:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    22a8:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    22aa:	2200      	movs	r2, #0
    22ac:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    22ae:	2000      	movs	r0, #0
    22b0:	e002      	b.n	22b8 <at25dfx_chip_set_global_sector_protect+0xdc>
    22b2:	4b03      	ldr	r3, [pc, #12]	; (22c0 <at25dfx_chip_set_global_sector_protect+0xe4>)
    22b4:	4798      	blx	r3
		return status;
    22b6:	2005      	movs	r0, #5
}
    22b8:	b002      	add	sp, #8
    22ba:	bd70      	pop	{r4, r5, r6, pc}
    22bc:	0000934d 	.word	0x0000934d
    22c0:	0000938d 	.word	0x0000938d
    22c4:	41004400 	.word	0x41004400
    22c8:	00005361 	.word	0x00005361

000022cc <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    22cc:	b530      	push	{r4, r5, lr}
    22ce:	b083      	sub	sp, #12
    22d0:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    22d2:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    22d4:	4b1c      	ldr	r3, [pc, #112]	; (2348 <at25dfx_chip_sleep+0x7c>)
    22d6:	4798      	blx	r3
	if (module->locked) {
    22d8:	792b      	ldrb	r3, [r5, #4]
    22da:	2b00      	cmp	r3, #0
    22dc:	d12e      	bne.n	233c <at25dfx_chip_sleep+0x70>
		module->locked = true;
    22de:	3301      	adds	r3, #1
    22e0:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    22e2:	4b1a      	ldr	r3, [pc, #104]	; (234c <at25dfx_chip_sleep+0x80>)
    22e4:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    22e6:	23b9      	movs	r3, #185	; 0xb9
    22e8:	466a      	mov	r2, sp
    22ea:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    22ec:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    22ee:	09d1      	lsrs	r1, r2, #7
		return NULL;
    22f0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    22f2:	2900      	cmp	r1, #0
    22f4:	d104      	bne.n	2300 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    22f6:	0953      	lsrs	r3, r2, #5
    22f8:	01db      	lsls	r3, r3, #7
    22fa:	4915      	ldr	r1, [pc, #84]	; (2350 <at25dfx_chip_sleep+0x84>)
    22fc:	468c      	mov	ip, r1
    22fe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2300:	211f      	movs	r1, #31
    2302:	4011      	ands	r1, r2
    2304:	2201      	movs	r2, #1
    2306:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2308:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    230a:	2201      	movs	r2, #1
    230c:	4669      	mov	r1, sp
    230e:	6820      	ldr	r0, [r4, #0]
    2310:	4b10      	ldr	r3, [pc, #64]	; (2354 <at25dfx_chip_sleep+0x88>)
    2312:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    2314:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    2316:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2318:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    231a:	2900      	cmp	r1, #0
    231c:	d104      	bne.n	2328 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    231e:	0953      	lsrs	r3, r2, #5
    2320:	01db      	lsls	r3, r3, #7
    2322:	490b      	ldr	r1, [pc, #44]	; (2350 <at25dfx_chip_sleep+0x84>)
    2324:	468c      	mov	ip, r1
    2326:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2328:	211f      	movs	r1, #31
    232a:	4011      	ands	r1, r2
    232c:	2201      	movs	r2, #1
    232e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2330:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    2332:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    2334:	2200      	movs	r2, #0
    2336:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    2338:	2000      	movs	r0, #0
    233a:	e002      	b.n	2342 <at25dfx_chip_sleep+0x76>
    233c:	4b03      	ldr	r3, [pc, #12]	; (234c <at25dfx_chip_sleep+0x80>)
    233e:	4798      	blx	r3
		return status;
    2340:	2005      	movs	r0, #5
}
    2342:	b003      	add	sp, #12
    2344:	bd30      	pop	{r4, r5, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	0000934d 	.word	0x0000934d
    234c:	0000938d 	.word	0x0000938d
    2350:	41004400 	.word	0x41004400
    2354:	00005361 	.word	0x00005361

00002358 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    2358:	b530      	push	{r4, r5, lr}
    235a:	b083      	sub	sp, #12
    235c:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    235e:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    2360:	4b1c      	ldr	r3, [pc, #112]	; (23d4 <at25dfx_chip_wake+0x7c>)
    2362:	4798      	blx	r3
	if (module->locked) {
    2364:	792b      	ldrb	r3, [r5, #4]
    2366:	2b00      	cmp	r3, #0
    2368:	d12e      	bne.n	23c8 <at25dfx_chip_wake+0x70>
		module->locked = true;
    236a:	3301      	adds	r3, #1
    236c:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    236e:	4b1a      	ldr	r3, [pc, #104]	; (23d8 <at25dfx_chip_wake+0x80>)
    2370:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    2372:	23ab      	movs	r3, #171	; 0xab
    2374:	466a      	mov	r2, sp
    2376:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    2378:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    237a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    237c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    237e:	2900      	cmp	r1, #0
    2380:	d104      	bne.n	238c <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    2382:	0953      	lsrs	r3, r2, #5
    2384:	01db      	lsls	r3, r3, #7
    2386:	4915      	ldr	r1, [pc, #84]	; (23dc <at25dfx_chip_wake+0x84>)
    2388:	468c      	mov	ip, r1
    238a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    238c:	211f      	movs	r1, #31
    238e:	4011      	ands	r1, r2
    2390:	2201      	movs	r2, #1
    2392:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2394:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    2396:	2201      	movs	r2, #1
    2398:	4669      	mov	r1, sp
    239a:	6820      	ldr	r0, [r4, #0]
    239c:	4b10      	ldr	r3, [pc, #64]	; (23e0 <at25dfx_chip_wake+0x88>)
    239e:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    23a0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    23a2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    23a4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    23a6:	2900      	cmp	r1, #0
    23a8:	d104      	bne.n	23b4 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    23aa:	0953      	lsrs	r3, r2, #5
    23ac:	01db      	lsls	r3, r3, #7
    23ae:	490b      	ldr	r1, [pc, #44]	; (23dc <at25dfx_chip_wake+0x84>)
    23b0:	468c      	mov	ip, r1
    23b2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    23b4:	211f      	movs	r1, #31
    23b6:	4011      	ands	r1, r2
    23b8:	2201      	movs	r2, #1
    23ba:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    23bc:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    23be:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    23c0:	2200      	movs	r2, #0
    23c2:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    23c4:	2000      	movs	r0, #0
    23c6:	e002      	b.n	23ce <at25dfx_chip_wake+0x76>
    23c8:	4b03      	ldr	r3, [pc, #12]	; (23d8 <at25dfx_chip_wake+0x80>)
    23ca:	4798      	blx	r3
		return status;
    23cc:	2005      	movs	r0, #5
    23ce:	b003      	add	sp, #12
    23d0:	bd30      	pop	{r4, r5, pc}
    23d2:	46c0      	nop			; (mov r8, r8)
    23d4:	0000934d 	.word	0x0000934d
    23d8:	0000938d 	.word	0x0000938d
    23dc:	41004400 	.word	0x41004400
    23e0:	00005361 	.word	0x00005361

000023e4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    23e4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    23e6:	2200      	movs	r2, #0
    23e8:	2300      	movs	r3, #0
    23ea:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    23ec:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    23ee:	2100      	movs	r1, #0
    23f0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    23f2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    23f4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    23f6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    23f8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    23fa:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    23fc:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    23fe:	24c0      	movs	r4, #192	; 0xc0
    2400:	0164      	lsls	r4, r4, #5
    2402:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2404:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2406:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    2408:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    240a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    240c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    240e:	242a      	movs	r4, #42	; 0x2a
    2410:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    2412:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    2414:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    2416:	3c06      	subs	r4, #6
    2418:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    241a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    241c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    241e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    2420:	232b      	movs	r3, #43	; 0x2b
    2422:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    2424:	3301      	adds	r3, #1
    2426:	54c1      	strb	r1, [r0, r3]
}
    2428:	bd10      	pop	{r4, pc}
	...

0000242c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    242c:	b5f0      	push	{r4, r5, r6, r7, lr}
    242e:	46d6      	mov	lr, sl
    2430:	464f      	mov	r7, r9
    2432:	4646      	mov	r6, r8
    2434:	b5c0      	push	{r6, r7, lr}
    2436:	b096      	sub	sp, #88	; 0x58
    2438:	0007      	movs	r7, r0
    243a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    243c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    243e:	4ac6      	ldr	r2, [pc, #792]	; (2758 <adc_init+0x32c>)
    2440:	6a10      	ldr	r0, [r2, #32]
    2442:	2380      	movs	r3, #128	; 0x80
    2444:	025b      	lsls	r3, r3, #9
    2446:	4303      	orrs	r3, r0
    2448:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    244a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    244c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    244e:	07db      	lsls	r3, r3, #31
    2450:	d505      	bpl.n	245e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    2452:	b016      	add	sp, #88	; 0x58
    2454:	bc1c      	pop	{r2, r3, r4}
    2456:	4690      	mov	r8, r2
    2458:	4699      	mov	r9, r3
    245a:	46a2      	mov	sl, r4
    245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    245e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    2460:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2462:	079b      	lsls	r3, r3, #30
    2464:	d4f5      	bmi.n	2452 <adc_init+0x26>
	module_inst->reference = config->reference;
    2466:	7873      	ldrb	r3, [r6, #1]
    2468:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    246a:	2b00      	cmp	r3, #0
    246c:	d104      	bne.n	2478 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    246e:	4abb      	ldr	r2, [pc, #748]	; (275c <adc_init+0x330>)
    2470:	6c13      	ldr	r3, [r2, #64]	; 0x40
    2472:	2104      	movs	r1, #4
    2474:	430b      	orrs	r3, r1
    2476:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    2478:	2300      	movs	r3, #0
    247a:	60bb      	str	r3, [r7, #8]
    247c:	60fb      	str	r3, [r7, #12]
    247e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    2480:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    2482:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    2484:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    2486:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    2488:	4bb5      	ldr	r3, [pc, #724]	; (2760 <adc_init+0x334>)
    248a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    248c:	232a      	movs	r3, #42	; 0x2a
    248e:	5cf3      	ldrb	r3, [r6, r3]
    2490:	2b00      	cmp	r3, #0
    2492:	d105      	bne.n	24a0 <adc_init+0x74>
    2494:	7d33      	ldrb	r3, [r6, #20]
    2496:	2b00      	cmp	r3, #0
    2498:	d102      	bne.n	24a0 <adc_init+0x74>
		module_inst->software_trigger = true;
    249a:	3301      	adds	r3, #1
    249c:	777b      	strb	r3, [r7, #29]
    249e:	e001      	b.n	24a4 <adc_init+0x78>
		module_inst->software_trigger = false;
    24a0:	2300      	movs	r3, #0
    24a2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    24a4:	683b      	ldr	r3, [r7, #0]
    24a6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    24a8:	7833      	ldrb	r3, [r6, #0]
    24aa:	466a      	mov	r2, sp
    24ac:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    24ae:	4669      	mov	r1, sp
    24b0:	201e      	movs	r0, #30
    24b2:	4bac      	ldr	r3, [pc, #688]	; (2764 <adc_init+0x338>)
    24b4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    24b6:	201e      	movs	r0, #30
    24b8:	4bab      	ldr	r3, [pc, #684]	; (2768 <adc_init+0x33c>)
    24ba:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    24bc:	232c      	movs	r3, #44	; 0x2c
    24be:	5cf2      	ldrb	r2, [r6, r3]
    24c0:	2a00      	cmp	r2, #0
    24c2:	d054      	beq.n	256e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    24c4:	3b01      	subs	r3, #1
    24c6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    24c8:	7b33      	ldrb	r3, [r6, #12]
    24ca:	18eb      	adds	r3, r5, r3
    24cc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    24ce:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    24d0:	b2c9      	uxtb	r1, r1
    24d2:	428b      	cmp	r3, r1
    24d4:	d221      	bcs.n	251a <adc_init+0xee>
    24d6:	1952      	adds	r2, r2, r5
    24d8:	b2d3      	uxtb	r3, r2
    24da:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    24dc:	4ba3      	ldr	r3, [pc, #652]	; (276c <adc_init+0x340>)
    24de:	469a      	mov	sl, r3
    24e0:	e003      	b.n	24ea <adc_init+0xbe>
			offset++;
    24e2:	3501      	adds	r5, #1
    24e4:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    24e6:	454d      	cmp	r5, r9
    24e8:	d017      	beq.n	251a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    24ea:	240f      	movs	r4, #15
    24ec:	402c      	ands	r4, r5
    24ee:	7b33      	ldrb	r3, [r6, #12]
    24f0:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    24f2:	2250      	movs	r2, #80	; 0x50
    24f4:	499e      	ldr	r1, [pc, #632]	; (2770 <adc_init+0x344>)
    24f6:	a802      	add	r0, sp, #8
    24f8:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    24fa:	2c13      	cmp	r4, #19
    24fc:	d8f1      	bhi.n	24e2 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    24fe:	00a4      	lsls	r4, r4, #2
    2500:	ab02      	add	r3, sp, #8
    2502:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2504:	a901      	add	r1, sp, #4
    2506:	2300      	movs	r3, #0
    2508:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    250a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    250c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    250e:	3301      	adds	r3, #1
    2510:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2512:	b2c0      	uxtb	r0, r0
    2514:	4b97      	ldr	r3, [pc, #604]	; (2774 <adc_init+0x348>)
    2516:	4798      	blx	r3
    2518:	e7e3      	b.n	24e2 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    251a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    251c:	2250      	movs	r2, #80	; 0x50
    251e:	4994      	ldr	r1, [pc, #592]	; (2770 <adc_init+0x344>)
    2520:	a802      	add	r0, sp, #8
    2522:	4b92      	ldr	r3, [pc, #584]	; (276c <adc_init+0x340>)
    2524:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    2526:	2c13      	cmp	r4, #19
    2528:	d913      	bls.n	2552 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    252a:	7d73      	ldrb	r3, [r6, #21]
    252c:	009b      	lsls	r3, r3, #2
    252e:	b2db      	uxtb	r3, r3
    2530:	4642      	mov	r2, r8
    2532:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2534:	7db3      	ldrb	r3, [r6, #22]
    2536:	01db      	lsls	r3, r3, #7
    2538:	7872      	ldrb	r2, [r6, #1]
    253a:	4313      	orrs	r3, r2
    253c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    253e:	4642      	mov	r2, r8
    2540:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    2542:	7933      	ldrb	r3, [r6, #4]
    2544:	2b34      	cmp	r3, #52	; 0x34
    2546:	d900      	bls.n	254a <adc_init+0x11e>
    2548:	e17b      	b.n	2842 <adc_init+0x416>
    254a:	009b      	lsls	r3, r3, #2
    254c:	4a8a      	ldr	r2, [pc, #552]	; (2778 <adc_init+0x34c>)
    254e:	58d3      	ldr	r3, [r2, r3]
    2550:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2552:	00a4      	lsls	r4, r4, #2
    2554:	ab02      	add	r3, sp, #8
    2556:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2558:	a901      	add	r1, sp, #4
    255a:	2300      	movs	r3, #0
    255c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    255e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2560:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2562:	3301      	adds	r3, #1
    2564:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2566:	b2c0      	uxtb	r0, r0
    2568:	4b82      	ldr	r3, [pc, #520]	; (2774 <adc_init+0x348>)
    256a:	4798      	blx	r3
    256c:	e7dd      	b.n	252a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    256e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    2570:	2250      	movs	r2, #80	; 0x50
    2572:	497f      	ldr	r1, [pc, #508]	; (2770 <adc_init+0x344>)
    2574:	a802      	add	r0, sp, #8
    2576:	4b7d      	ldr	r3, [pc, #500]	; (276c <adc_init+0x340>)
    2578:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    257a:	2c13      	cmp	r4, #19
    257c:	d915      	bls.n	25aa <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    257e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    2580:	2250      	movs	r2, #80	; 0x50
    2582:	497b      	ldr	r1, [pc, #492]	; (2770 <adc_init+0x344>)
    2584:	a802      	add	r0, sp, #8
    2586:	4b79      	ldr	r3, [pc, #484]	; (276c <adc_init+0x340>)
    2588:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    258a:	2c13      	cmp	r4, #19
    258c:	d8cd      	bhi.n	252a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    258e:	00a4      	lsls	r4, r4, #2
    2590:	ab02      	add	r3, sp, #8
    2592:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2594:	a901      	add	r1, sp, #4
    2596:	2300      	movs	r3, #0
    2598:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    259a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    259c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    259e:	3301      	adds	r3, #1
    25a0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    25a2:	b2c0      	uxtb	r0, r0
    25a4:	4b73      	ldr	r3, [pc, #460]	; (2774 <adc_init+0x348>)
    25a6:	4798      	blx	r3
    25a8:	e7bf      	b.n	252a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    25aa:	00a4      	lsls	r4, r4, #2
    25ac:	ab02      	add	r3, sp, #8
    25ae:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    25b0:	a901      	add	r1, sp, #4
    25b2:	2300      	movs	r3, #0
    25b4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    25b6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    25b8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    25ba:	3301      	adds	r3, #1
    25bc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    25be:	b2c0      	uxtb	r0, r0
    25c0:	4b6c      	ldr	r3, [pc, #432]	; (2774 <adc_init+0x348>)
    25c2:	4798      	blx	r3
    25c4:	e7db      	b.n	257e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    25c6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    25c8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    25ca:	2102      	movs	r1, #2
    25cc:	e01a      	b.n	2604 <adc_init+0x1d8>
		adjres = config->divide_result;
    25ce:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    25d0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    25d2:	2410      	movs	r4, #16
    25d4:	e016      	b.n	2604 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    25d6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    25d8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    25da:	2101      	movs	r1, #1
    25dc:	e012      	b.n	2604 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    25de:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    25e0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    25e2:	2100      	movs	r1, #0
    25e4:	e00e      	b.n	2604 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    25e6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    25e8:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    25ea:	2100      	movs	r1, #0
    25ec:	e00a      	b.n	2604 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    25ee:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    25f0:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    25f2:	2100      	movs	r1, #0
    25f4:	e006      	b.n	2604 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    25f6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    25f8:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    25fa:	2100      	movs	r1, #0
    25fc:	e002      	b.n	2604 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    25fe:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    2600:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2602:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2604:	0109      	lsls	r1, r1, #4
    2606:	2270      	movs	r2, #112	; 0x70
    2608:	400a      	ands	r2, r1
    260a:	4313      	orrs	r3, r2
    260c:	4642      	mov	r2, r8
    260e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    2610:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    2612:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    2614:	2b3f      	cmp	r3, #63	; 0x3f
    2616:	d900      	bls.n	261a <adc_init+0x1ee>
    2618:	e71b      	b.n	2452 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    261a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    261c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    261e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2620:	b25b      	sxtb	r3, r3
    2622:	2b00      	cmp	r3, #0
    2624:	dbfb      	blt.n	261e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    2626:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2628:	8872      	ldrh	r2, [r6, #2]
    262a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    262c:	2224      	movs	r2, #36	; 0x24
    262e:	5cb2      	ldrb	r2, [r6, r2]
    2630:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2632:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2634:	7d32      	ldrb	r2, [r6, #20]
    2636:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2638:	4313      	orrs	r3, r2
    263a:	7cb2      	ldrb	r2, [r6, #18]
    263c:	0052      	lsls	r2, r2, #1
    263e:	4313      	orrs	r3, r2
    2640:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    2642:	4642      	mov	r2, r8
    2644:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    2646:	7e33      	ldrb	r3, [r6, #24]
    2648:	2b00      	cmp	r3, #0
    264a:	d020      	beq.n	268e <adc_init+0x262>
		switch (resolution) {
    264c:	2c10      	cmp	r4, #16
    264e:	d100      	bne.n	2652 <adc_init+0x226>
    2650:	e0d9      	b.n	2806 <adc_init+0x3da>
    2652:	d800      	bhi.n	2656 <adc_init+0x22a>
    2654:	e098      	b.n	2788 <adc_init+0x35c>
    2656:	2c20      	cmp	r4, #32
    2658:	d100      	bne.n	265c <adc_init+0x230>
    265a:	e0b6      	b.n	27ca <adc_init+0x39e>
    265c:	2c30      	cmp	r4, #48	; 0x30
    265e:	d116      	bne.n	268e <adc_init+0x262>
			if (config->differential_mode &&
    2660:	7cf2      	ldrb	r2, [r6, #19]
    2662:	2a00      	cmp	r2, #0
    2664:	d00a      	beq.n	267c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    2666:	69f2      	ldr	r2, [r6, #28]
    2668:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    266a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    266c:	2aff      	cmp	r2, #255	; 0xff
    266e:	d900      	bls.n	2672 <adc_init+0x246>
    2670:	e6ef      	b.n	2452 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    2672:	6a32      	ldr	r2, [r6, #32]
    2674:	3280      	adds	r2, #128	; 0x80
    2676:	2aff      	cmp	r2, #255	; 0xff
    2678:	d900      	bls.n	267c <adc_init+0x250>
    267a:	e6ea      	b.n	2452 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    267c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    267e:	69f2      	ldr	r2, [r6, #28]
    2680:	2aff      	cmp	r2, #255	; 0xff
    2682:	dd00      	ble.n	2686 <adc_init+0x25a>
    2684:	e6e5      	b.n	2452 <adc_init+0x26>
    2686:	6a32      	ldr	r2, [r6, #32]
    2688:	2aff      	cmp	r2, #255	; 0xff
    268a:	dd00      	ble.n	268e <adc_init+0x262>
    268c:	e6e1      	b.n	2452 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    268e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2690:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2692:	b252      	sxtb	r2, r2
    2694:	2a00      	cmp	r2, #0
    2696:	dbfb      	blt.n	2690 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    2698:	4642      	mov	r2, r8
    269a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    269c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    269e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    26a0:	b25b      	sxtb	r3, r3
    26a2:	2b00      	cmp	r3, #0
    26a4:	dbfb      	blt.n	269e <adc_init+0x272>
	adc_module->WINLT.reg =
    26a6:	8bb3      	ldrh	r3, [r6, #28]
    26a8:	4642      	mov	r2, r8
    26aa:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    26ac:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    26ae:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    26b0:	b25b      	sxtb	r3, r3
    26b2:	2b00      	cmp	r3, #0
    26b4:	dbfb      	blt.n	26ae <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    26b6:	8c33      	ldrh	r3, [r6, #32]
    26b8:	4642      	mov	r2, r8
    26ba:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    26bc:	232c      	movs	r3, #44	; 0x2c
    26be:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    26c0:	2b00      	cmp	r3, #0
    26c2:	d005      	beq.n	26d0 <adc_init+0x2a4>
		inputs_to_scan--;
    26c4:	3b01      	subs	r3, #1
    26c6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    26c8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    26ca:	2b0f      	cmp	r3, #15
    26cc:	d900      	bls.n	26d0 <adc_init+0x2a4>
    26ce:	e6c0      	b.n	2452 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    26d0:	222b      	movs	r2, #43	; 0x2b
    26d2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    26d4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    26d6:	290f      	cmp	r1, #15
    26d8:	d900      	bls.n	26dc <adc_init+0x2b0>
    26da:	e6ba      	b.n	2452 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    26dc:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    26de:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    26e0:	b252      	sxtb	r2, r2
    26e2:	2a00      	cmp	r2, #0
    26e4:	dbfb      	blt.n	26de <adc_init+0x2b2>
			config->negative_input |
    26e6:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    26e8:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    26ea:	4302      	orrs	r2, r0
    26ec:	68b0      	ldr	r0, [r6, #8]
    26ee:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    26f0:	0509      	lsls	r1, r1, #20
			config->negative_input |
    26f2:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    26f4:	041b      	lsls	r3, r3, #16
			config->negative_input |
    26f6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    26f8:	4642      	mov	r2, r8
    26fa:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    26fc:	232a      	movs	r3, #42	; 0x2a
    26fe:	5cf3      	ldrb	r3, [r6, r3]
    2700:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    2702:	230f      	movs	r3, #15
    2704:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    2706:	3315      	adds	r3, #21
    2708:	5cf3      	ldrb	r3, [r6, r3]
    270a:	2b00      	cmp	r3, #0
    270c:	d012      	beq.n	2734 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    270e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    2710:	4a1a      	ldr	r2, [pc, #104]	; (277c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    2712:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2714:	4293      	cmp	r3, r2
    2716:	d900      	bls.n	271a <adc_init+0x2ee>
    2718:	e69b      	b.n	2452 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    271a:	4642      	mov	r2, r8
    271c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    271e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    2720:	2380      	movs	r3, #128	; 0x80
    2722:	011b      	lsls	r3, r3, #4
    2724:	18d3      	adds	r3, r2, r3
    2726:	4915      	ldr	r1, [pc, #84]	; (277c <adc_init+0x350>)
    2728:	b29b      	uxth	r3, r3
    272a:	428b      	cmp	r3, r1
    272c:	d900      	bls.n	2730 <adc_init+0x304>
    272e:	e690      	b.n	2452 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2730:	4643      	mov	r3, r8
    2732:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    2734:	4b12      	ldr	r3, [pc, #72]	; (2780 <adc_init+0x354>)
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	015b      	lsls	r3, r3, #5
    273a:	22e0      	movs	r2, #224	; 0xe0
    273c:	00d2      	lsls	r2, r2, #3
    273e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    2740:	4a10      	ldr	r2, [pc, #64]	; (2784 <adc_init+0x358>)
    2742:	6851      	ldr	r1, [r2, #4]
    2744:	0149      	lsls	r1, r1, #5
    2746:	6812      	ldr	r2, [r2, #0]
    2748:	0ed2      	lsrs	r2, r2, #27
    274a:	430a      	orrs	r2, r1
    274c:	b2d2      	uxtb	r2, r2
			) |
    274e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    2750:	4642      	mov	r2, r8
    2752:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    2754:	2000      	movs	r0, #0
    2756:	e67c      	b.n	2452 <adc_init+0x26>
    2758:	40000400 	.word	0x40000400
    275c:	40000800 	.word	0x40000800
    2760:	20000848 	.word	0x20000848
    2764:	00009a01 	.word	0x00009a01
    2768:	00009975 	.word	0x00009975
    276c:	0000b0c5 	.word	0x0000b0c5
    2770:	00011560 	.word	0x00011560
    2774:	00009af9 	.word	0x00009af9
    2778:	0001148c 	.word	0x0001148c
    277c:	00000fff 	.word	0x00000fff
    2780:	00806024 	.word	0x00806024
    2784:	00806020 	.word	0x00806020
		switch (resolution) {
    2788:	2c00      	cmp	r4, #0
    278a:	d000      	beq.n	278e <adc_init+0x362>
    278c:	e77f      	b.n	268e <adc_init+0x262>
			if (config->differential_mode &&
    278e:	7cf2      	ldrb	r2, [r6, #19]
    2790:	2a00      	cmp	r2, #0
    2792:	d00f      	beq.n	27b4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    2794:	69f2      	ldr	r2, [r6, #28]
    2796:	2180      	movs	r1, #128	; 0x80
    2798:	0109      	lsls	r1, r1, #4
    279a:	468c      	mov	ip, r1
    279c:	4462      	add	r2, ip
			if (config->differential_mode &&
    279e:	492a      	ldr	r1, [pc, #168]	; (2848 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    27a0:	2017      	movs	r0, #23
			if (config->differential_mode &&
    27a2:	428a      	cmp	r2, r1
    27a4:	d900      	bls.n	27a8 <adc_init+0x37c>
    27a6:	e654      	b.n	2452 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    27a8:	6a32      	ldr	r2, [r6, #32]
    27aa:	4462      	add	r2, ip
    27ac:	4926      	ldr	r1, [pc, #152]	; (2848 <adc_init+0x41c>)
    27ae:	428a      	cmp	r2, r1
    27b0:	d900      	bls.n	27b4 <adc_init+0x388>
    27b2:	e64e      	b.n	2452 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    27b4:	4a24      	ldr	r2, [pc, #144]	; (2848 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    27b6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    27b8:	69f1      	ldr	r1, [r6, #28]
    27ba:	4291      	cmp	r1, r2
    27bc:	dd00      	ble.n	27c0 <adc_init+0x394>
    27be:	e648      	b.n	2452 <adc_init+0x26>
    27c0:	6a31      	ldr	r1, [r6, #32]
    27c2:	4291      	cmp	r1, r2
    27c4:	dd00      	ble.n	27c8 <adc_init+0x39c>
    27c6:	e644      	b.n	2452 <adc_init+0x26>
    27c8:	e761      	b.n	268e <adc_init+0x262>
			if (config->differential_mode &&
    27ca:	7cf2      	ldrb	r2, [r6, #19]
    27cc:	2a00      	cmp	r2, #0
    27ce:	d00f      	beq.n	27f0 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    27d0:	69f2      	ldr	r2, [r6, #28]
    27d2:	2180      	movs	r1, #128	; 0x80
    27d4:	0089      	lsls	r1, r1, #2
    27d6:	468c      	mov	ip, r1
    27d8:	4462      	add	r2, ip
			if (config->differential_mode &&
    27da:	491c      	ldr	r1, [pc, #112]	; (284c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    27dc:	2017      	movs	r0, #23
			if (config->differential_mode &&
    27de:	428a      	cmp	r2, r1
    27e0:	d900      	bls.n	27e4 <adc_init+0x3b8>
    27e2:	e636      	b.n	2452 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    27e4:	6a32      	ldr	r2, [r6, #32]
    27e6:	4462      	add	r2, ip
    27e8:	4918      	ldr	r1, [pc, #96]	; (284c <adc_init+0x420>)
    27ea:	428a      	cmp	r2, r1
    27ec:	d900      	bls.n	27f0 <adc_init+0x3c4>
    27ee:	e630      	b.n	2452 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    27f0:	4a16      	ldr	r2, [pc, #88]	; (284c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    27f2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    27f4:	69f1      	ldr	r1, [r6, #28]
    27f6:	4291      	cmp	r1, r2
    27f8:	dd00      	ble.n	27fc <adc_init+0x3d0>
    27fa:	e62a      	b.n	2452 <adc_init+0x26>
    27fc:	6a31      	ldr	r1, [r6, #32]
    27fe:	4291      	cmp	r1, r2
    2800:	dd00      	ble.n	2804 <adc_init+0x3d8>
    2802:	e626      	b.n	2452 <adc_init+0x26>
    2804:	e743      	b.n	268e <adc_init+0x262>
			if (config->differential_mode &&
    2806:	7cf2      	ldrb	r2, [r6, #19]
    2808:	2a00      	cmp	r2, #0
    280a:	d00f      	beq.n	282c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    280c:	69f2      	ldr	r2, [r6, #28]
    280e:	2180      	movs	r1, #128	; 0x80
    2810:	0209      	lsls	r1, r1, #8
    2812:	468c      	mov	ip, r1
    2814:	4462      	add	r2, ip
			if (config->differential_mode &&
    2816:	490e      	ldr	r1, [pc, #56]	; (2850 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    2818:	2017      	movs	r0, #23
			if (config->differential_mode &&
    281a:	428a      	cmp	r2, r1
    281c:	d900      	bls.n	2820 <adc_init+0x3f4>
    281e:	e618      	b.n	2452 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    2820:	6a32      	ldr	r2, [r6, #32]
    2822:	4462      	add	r2, ip
    2824:	490a      	ldr	r1, [pc, #40]	; (2850 <adc_init+0x424>)
    2826:	428a      	cmp	r2, r1
    2828:	d900      	bls.n	282c <adc_init+0x400>
    282a:	e612      	b.n	2452 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    282c:	4a08      	ldr	r2, [pc, #32]	; (2850 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    282e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    2830:	69f1      	ldr	r1, [r6, #28]
    2832:	4291      	cmp	r1, r2
    2834:	dd00      	ble.n	2838 <adc_init+0x40c>
    2836:	e60c      	b.n	2452 <adc_init+0x26>
    2838:	6a31      	ldr	r1, [r6, #32]
    283a:	4291      	cmp	r1, r2
    283c:	dd00      	ble.n	2840 <adc_init+0x414>
    283e:	e608      	b.n	2452 <adc_init+0x26>
    2840:	e725      	b.n	268e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    2842:	2017      	movs	r0, #23
    2844:	e605      	b.n	2452 <adc_init+0x26>
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	00000fff 	.word	0x00000fff
    284c:	000003ff 	.word	0x000003ff
    2850:	0000ffff 	.word	0x0000ffff

00002854 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    2854:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    2856:	4b2e      	ldr	r3, [pc, #184]	; (2910 <ADC_Handler+0xbc>)
    2858:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    285a:	6823      	ldr	r3, [r4, #0]
    285c:	7e1d      	ldrb	r5, [r3, #24]
    285e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    2860:	07ea      	lsls	r2, r5, #31
    2862:	d505      	bpl.n	2870 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    2864:	7ee2      	ldrb	r2, [r4, #27]
    2866:	07d2      	lsls	r2, r2, #31
    2868:	d502      	bpl.n	2870 <ADC_Handler+0x1c>
    286a:	7ea2      	ldrb	r2, [r4, #26]
    286c:	07d2      	lsls	r2, r2, #31
    286e:	d416      	bmi.n	289e <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    2870:	076b      	lsls	r3, r5, #29
    2872:	d508      	bpl.n	2886 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2874:	2304      	movs	r3, #4
    2876:	6822      	ldr	r2, [r4, #0]
    2878:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    287a:	7ee3      	ldrb	r3, [r4, #27]
    287c:	079b      	lsls	r3, r3, #30
    287e:	d502      	bpl.n	2886 <ADC_Handler+0x32>
    2880:	7ea3      	ldrb	r3, [r4, #26]
    2882:	079b      	lsls	r3, r3, #30
    2884:	d43c      	bmi.n	2900 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    2886:	07ab      	lsls	r3, r5, #30
    2888:	d508      	bpl.n	289c <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    288a:	2302      	movs	r3, #2
    288c:	6822      	ldr	r2, [r4, #0]
    288e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2890:	7ee3      	ldrb	r3, [r4, #27]
    2892:	075b      	lsls	r3, r3, #29
    2894:	d502      	bpl.n	289c <ADC_Handler+0x48>
    2896:	7ea3      	ldrb	r3, [r4, #26]
    2898:	075b      	lsls	r3, r3, #29
    289a:	d435      	bmi.n	2908 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    289c:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    289e:	2201      	movs	r2, #1
    28a0:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    28a2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    28a4:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    28a6:	b25b      	sxtb	r3, r3
    28a8:	2b00      	cmp	r3, #0
    28aa:	dbfb      	blt.n	28a4 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    28ac:	6961      	ldr	r1, [r4, #20]
    28ae:	1c8b      	adds	r3, r1, #2
    28b0:	6163      	str	r3, [r4, #20]
    28b2:	8b53      	ldrh	r3, [r2, #26]
    28b4:	b29b      	uxth	r3, r3
    28b6:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    28b8:	8b23      	ldrh	r3, [r4, #24]
    28ba:	3b01      	subs	r3, #1
    28bc:	b29b      	uxth	r3, r3
    28be:	8323      	strh	r3, [r4, #24]
    28c0:	2b00      	cmp	r3, #0
    28c2:	d011      	beq.n	28e8 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    28c4:	7f63      	ldrb	r3, [r4, #29]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d0d2      	beq.n	2870 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    28ca:	6822      	ldr	r2, [r4, #0]
    28cc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    28ce:	b25b      	sxtb	r3, r3
    28d0:	2b00      	cmp	r3, #0
    28d2:	dbfb      	blt.n	28cc <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    28d4:	7b13      	ldrb	r3, [r2, #12]
    28d6:	2102      	movs	r1, #2
    28d8:	430b      	orrs	r3, r1
    28da:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    28dc:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    28de:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    28e0:	b25b      	sxtb	r3, r3
    28e2:	2b00      	cmp	r3, #0
    28e4:	dbfb      	blt.n	28de <ADC_Handler+0x8a>
    28e6:	e7c3      	b.n	2870 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    28e8:	7f23      	ldrb	r3, [r4, #28]
    28ea:	2b05      	cmp	r3, #5
    28ec:	d1c0      	bne.n	2870 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    28ee:	2300      	movs	r3, #0
    28f0:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    28f2:	3301      	adds	r3, #1
    28f4:	6822      	ldr	r2, [r4, #0]
    28f6:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    28f8:	0020      	movs	r0, r4
    28fa:	68a3      	ldr	r3, [r4, #8]
    28fc:	4798      	blx	r3
    28fe:	e7b7      	b.n	2870 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2900:	0020      	movs	r0, r4
    2902:	68e3      	ldr	r3, [r4, #12]
    2904:	4798      	blx	r3
    2906:	e7be      	b.n	2886 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2908:	6923      	ldr	r3, [r4, #16]
    290a:	0020      	movs	r0, r4
    290c:	4798      	blx	r3
}
    290e:	e7c5      	b.n	289c <ADC_Handler+0x48>
    2910:	20000848 	.word	0x20000848

00002914 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2914:	4a04      	ldr	r2, [pc, #16]	; (2928 <_extint_enable+0x14>)
    2916:	7813      	ldrb	r3, [r2, #0]
    2918:	2102      	movs	r1, #2
    291a:	430b      	orrs	r3, r1
    291c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    291e:	7853      	ldrb	r3, [r2, #1]
    2920:	b25b      	sxtb	r3, r3
    2922:	2b00      	cmp	r3, #0
    2924:	dbfb      	blt.n	291e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2926:	4770      	bx	lr
    2928:	40001800 	.word	0x40001800

0000292c <_system_extint_init>:
{
    292c:	b500      	push	{lr}
    292e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    2930:	4a12      	ldr	r2, [pc, #72]	; (297c <_system_extint_init+0x50>)
    2932:	6993      	ldr	r3, [r2, #24]
    2934:	2140      	movs	r1, #64	; 0x40
    2936:	430b      	orrs	r3, r1
    2938:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    293a:	a901      	add	r1, sp, #4
    293c:	2300      	movs	r3, #0
    293e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2940:	2005      	movs	r0, #5
    2942:	4b0f      	ldr	r3, [pc, #60]	; (2980 <_system_extint_init+0x54>)
    2944:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2946:	2005      	movs	r0, #5
    2948:	4b0e      	ldr	r3, [pc, #56]	; (2984 <_system_extint_init+0x58>)
    294a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    294c:	4a0e      	ldr	r2, [pc, #56]	; (2988 <_system_extint_init+0x5c>)
    294e:	7813      	ldrb	r3, [r2, #0]
    2950:	2101      	movs	r1, #1
    2952:	430b      	orrs	r3, r1
    2954:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2956:	7853      	ldrb	r3, [r2, #1]
    2958:	b25b      	sxtb	r3, r3
    295a:	2b00      	cmp	r3, #0
    295c:	dbfb      	blt.n	2956 <_system_extint_init+0x2a>
    295e:	4b0b      	ldr	r3, [pc, #44]	; (298c <_system_extint_init+0x60>)
    2960:	0019      	movs	r1, r3
    2962:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2964:	2200      	movs	r2, #0
    2966:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2968:	4299      	cmp	r1, r3
    296a:	d1fc      	bne.n	2966 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    296c:	2210      	movs	r2, #16
    296e:	4b08      	ldr	r3, [pc, #32]	; (2990 <_system_extint_init+0x64>)
    2970:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2972:	4b08      	ldr	r3, [pc, #32]	; (2994 <_system_extint_init+0x68>)
    2974:	4798      	blx	r3
}
    2976:	b003      	add	sp, #12
    2978:	bd00      	pop	{pc}
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	40000400 	.word	0x40000400
    2980:	00009a01 	.word	0x00009a01
    2984:	00009975 	.word	0x00009975
    2988:	40001800 	.word	0x40001800
    298c:	2000084c 	.word	0x2000084c
    2990:	e000e100 	.word	0xe000e100
    2994:	00002915 	.word	0x00002915

00002998 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2998:	2300      	movs	r3, #0
    299a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    299c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    299e:	2201      	movs	r2, #1
    29a0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    29a2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    29a4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    29a6:	3302      	adds	r3, #2
    29a8:	72c3      	strb	r3, [r0, #11]
}
    29aa:	4770      	bx	lr

000029ac <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    29ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ae:	b083      	sub	sp, #12
    29b0:	0005      	movs	r5, r0
    29b2:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    29b4:	a901      	add	r1, sp, #4
    29b6:	2300      	movs	r3, #0
    29b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    29ba:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    29bc:	7923      	ldrb	r3, [r4, #4]
    29be:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    29c0:	7a23      	ldrb	r3, [r4, #8]
    29c2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    29c4:	7820      	ldrb	r0, [r4, #0]
    29c6:	4b15      	ldr	r3, [pc, #84]	; (2a1c <extint_chan_set_config+0x70>)
    29c8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    29ca:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    29cc:	2d1f      	cmp	r5, #31
    29ce:	d800      	bhi.n	29d2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    29d0:	4813      	ldr	r0, [pc, #76]	; (2a20 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    29d2:	2207      	movs	r2, #7
    29d4:	402a      	ands	r2, r5
    29d6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    29d8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    29da:	7aa3      	ldrb	r3, [r4, #10]
    29dc:	2b00      	cmp	r3, #0
    29de:	d001      	beq.n	29e4 <extint_chan_set_config+0x38>
    29e0:	2308      	movs	r3, #8
    29e2:	431f      	orrs	r7, r3
    29e4:	08eb      	lsrs	r3, r5, #3
    29e6:	009b      	lsls	r3, r3, #2
    29e8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    29ea:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    29ec:	260f      	movs	r6, #15
    29ee:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    29f0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    29f2:	4097      	lsls	r7, r2
    29f4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    29f6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    29f8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    29fa:	7a63      	ldrb	r3, [r4, #9]
    29fc:	2b00      	cmp	r3, #0
    29fe:	d106      	bne.n	2a0e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    2a00:	6943      	ldr	r3, [r0, #20]
    2a02:	2201      	movs	r2, #1
    2a04:	40aa      	lsls	r2, r5
    2a06:	4393      	bics	r3, r2
    2a08:	6143      	str	r3, [r0, #20]
	}
}
    2a0a:	b003      	add	sp, #12
    2a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    2a0e:	6942      	ldr	r2, [r0, #20]
    2a10:	2301      	movs	r3, #1
    2a12:	40ab      	lsls	r3, r5
    2a14:	4313      	orrs	r3, r2
    2a16:	6143      	str	r3, [r0, #20]
    2a18:	e7f7      	b.n	2a0a <extint_chan_set_config+0x5e>
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	00009af9 	.word	0x00009af9
    2a20:	40001800 	.word	0x40001800

00002a24 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2a24:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2a26:	2207      	movs	r2, #7
    2a28:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    2a2a:	421a      	tst	r2, r3
    2a2c:	d1fc      	bne.n	2a28 <_i2c_master_wait_for_sync+0x4>
}
    2a2e:	4770      	bx	lr

00002a30 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    2a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a32:	46d6      	mov	lr, sl
    2a34:	464f      	mov	r7, r9
    2a36:	4646      	mov	r6, r8
    2a38:	b5c0      	push	{r6, r7, lr}
    2a3a:	b08a      	sub	sp, #40	; 0x28
    2a3c:	0006      	movs	r6, r0
    2a3e:	000f      	movs	r7, r1
    2a40:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    2a42:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a44:	0008      	movs	r0, r1
    2a46:	4b97      	ldr	r3, [pc, #604]	; (2ca4 <i2c_master_init+0x274>)
    2a48:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    2a4a:	4a97      	ldr	r2, [pc, #604]	; (2ca8 <i2c_master_init+0x278>)
    2a4c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2a4e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2a50:	2301      	movs	r3, #1
    2a52:	40ab      	lsls	r3, r5
    2a54:	430b      	orrs	r3, r1
    2a56:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2a58:	a909      	add	r1, sp, #36	; 0x24
    2a5a:	7b23      	ldrb	r3, [r4, #12]
    2a5c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2a5e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2a60:	b2c5      	uxtb	r5, r0
    2a62:	0028      	movs	r0, r5
    2a64:	4b91      	ldr	r3, [pc, #580]	; (2cac <i2c_master_init+0x27c>)
    2a66:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2a68:	0028      	movs	r0, r5
    2a6a:	4b91      	ldr	r3, [pc, #580]	; (2cb0 <i2c_master_init+0x280>)
    2a6c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2a6e:	7b20      	ldrb	r0, [r4, #12]
    2a70:	2100      	movs	r1, #0
    2a72:	4b90      	ldr	r3, [pc, #576]	; (2cb4 <i2c_master_init+0x284>)
    2a74:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    2a76:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    2a78:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    2a7a:	079b      	lsls	r3, r3, #30
    2a7c:	d505      	bpl.n	2a8a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    2a7e:	b00a      	add	sp, #40	; 0x28
    2a80:	bc1c      	pop	{r2, r3, r4}
    2a82:	4690      	mov	r8, r2
    2a84:	4699      	mov	r9, r3
    2a86:	46a2      	mov	sl, r4
    2a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    2a8a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    2a8c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    2a8e:	07db      	lsls	r3, r3, #31
    2a90:	d4f5      	bmi.n	2a7e <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    2a92:	2314      	movs	r3, #20
    2a94:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2a96:	6833      	ldr	r3, [r6, #0]
    2a98:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    2a9a:	0018      	movs	r0, r3
    2a9c:	4b81      	ldr	r3, [pc, #516]	; (2ca4 <i2c_master_init+0x274>)
    2a9e:	4798      	blx	r3
    2aa0:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2aa2:	2380      	movs	r3, #128	; 0x80
    2aa4:	aa08      	add	r2, sp, #32
    2aa6:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2aa8:	2300      	movs	r3, #0
    2aaa:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2aac:	2201      	movs	r2, #1
    2aae:	a908      	add	r1, sp, #32
    2ab0:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    2ab2:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    2ab4:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    2ab6:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    2ab8:	2800      	cmp	r0, #0
    2aba:	d100      	bne.n	2abe <i2c_master_init+0x8e>
    2abc:	e0af      	b.n	2c1e <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    2abe:	ab08      	add	r3, sp, #32
    2ac0:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2ac2:	2302      	movs	r3, #2
    2ac4:	aa08      	add	r2, sp, #32
    2ac6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    2ac8:	0c00      	lsrs	r0, r0, #16
    2aca:	b2c0      	uxtb	r0, r0
    2acc:	0011      	movs	r1, r2
    2ace:	4b7a      	ldr	r3, [pc, #488]	; (2cb8 <i2c_master_init+0x288>)
    2ad0:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    2ad2:	2f00      	cmp	r7, #0
    2ad4:	d100      	bne.n	2ad8 <i2c_master_init+0xa8>
    2ad6:	e0a7      	b.n	2c28 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    2ad8:	ab08      	add	r3, sp, #32
    2ada:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2adc:	2302      	movs	r3, #2
    2ade:	aa08      	add	r2, sp, #32
    2ae0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    2ae2:	0c3f      	lsrs	r7, r7, #16
    2ae4:	b2f8      	uxtb	r0, r7
    2ae6:	0011      	movs	r1, r2
    2ae8:	4b73      	ldr	r3, [pc, #460]	; (2cb8 <i2c_master_init+0x288>)
    2aea:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    2aec:	8aa3      	ldrh	r3, [r4, #20]
    2aee:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    2af0:	8ae3      	ldrh	r3, [r4, #22]
    2af2:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    2af4:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    2af6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    2af8:	2b00      	cmp	r3, #0
    2afa:	d104      	bne.n	2b06 <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2afc:	4b6f      	ldr	r3, [pc, #444]	; (2cbc <i2c_master_init+0x28c>)
    2afe:	789b      	ldrb	r3, [r3, #2]
    2b00:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    2b02:	0fdb      	lsrs	r3, r3, #31
    2b04:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    2b06:	68a1      	ldr	r1, [r4, #8]
    2b08:	6923      	ldr	r3, [r4, #16]
    2b0a:	430b      	orrs	r3, r1
    2b0c:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    2b0e:	2224      	movs	r2, #36	; 0x24
    2b10:	5ca2      	ldrb	r2, [r4, r2]
    2b12:	2a00      	cmp	r2, #0
    2b14:	d002      	beq.n	2b1c <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    2b16:	2280      	movs	r2, #128	; 0x80
    2b18:	05d2      	lsls	r2, r2, #23
    2b1a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    2b1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2b1e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    2b20:	222c      	movs	r2, #44	; 0x2c
    2b22:	5ca2      	ldrb	r2, [r4, r2]
    2b24:	2a00      	cmp	r2, #0
    2b26:	d103      	bne.n	2b30 <i2c_master_init+0x100>
    2b28:	2280      	movs	r2, #128	; 0x80
    2b2a:	0492      	lsls	r2, r2, #18
    2b2c:	4291      	cmp	r1, r2
    2b2e:	d102      	bne.n	2b36 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    2b30:	2280      	movs	r2, #128	; 0x80
    2b32:	0512      	lsls	r2, r2, #20
    2b34:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    2b36:	222d      	movs	r2, #45	; 0x2d
    2b38:	5ca2      	ldrb	r2, [r4, r2]
    2b3a:	2a00      	cmp	r2, #0
    2b3c:	d002      	beq.n	2b44 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    2b3e:	2280      	movs	r2, #128	; 0x80
    2b40:	0412      	lsls	r2, r2, #16
    2b42:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    2b44:	222e      	movs	r2, #46	; 0x2e
    2b46:	5ca2      	ldrb	r2, [r4, r2]
    2b48:	2a00      	cmp	r2, #0
    2b4a:	d002      	beq.n	2b52 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    2b4c:	2280      	movs	r2, #128	; 0x80
    2b4e:	03d2      	lsls	r2, r2, #15
    2b50:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    2b52:	4642      	mov	r2, r8
    2b54:	6812      	ldr	r2, [r2, #0]
    2b56:	4313      	orrs	r3, r2
    2b58:	4642      	mov	r2, r8
    2b5a:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    2b5c:	2380      	movs	r3, #128	; 0x80
    2b5e:	005b      	lsls	r3, r3, #1
    2b60:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    2b62:	0028      	movs	r0, r5
    2b64:	3014      	adds	r0, #20
    2b66:	b2c0      	uxtb	r0, r0
    2b68:	4b55      	ldr	r3, [pc, #340]	; (2cc0 <i2c_master_init+0x290>)
    2b6a:	4798      	blx	r3
    2b6c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    2b6e:	23fa      	movs	r3, #250	; 0xfa
    2b70:	009b      	lsls	r3, r3, #2
    2b72:	6822      	ldr	r2, [r4, #0]
    2b74:	435a      	muls	r2, r3
    2b76:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    2b78:	6863      	ldr	r3, [r4, #4]
    2b7a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    2b7c:	4d51      	ldr	r5, [pc, #324]	; (2cc4 <i2c_master_init+0x294>)
    2b7e:	47a8      	blx	r5
    2b80:	9000      	str	r0, [sp, #0]
    2b82:	9101      	str	r1, [sp, #4]
    2b84:	464b      	mov	r3, r9
    2b86:	0058      	lsls	r0, r3, #1
    2b88:	47a8      	blx	r5
    2b8a:	9002      	str	r0, [sp, #8]
    2b8c:	9103      	str	r1, [sp, #12]
    2b8e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    2b90:	47a8      	blx	r5
    2b92:	9004      	str	r0, [sp, #16]
    2b94:	9105      	str	r1, [sp, #20]
    2b96:	4f4c      	ldr	r7, [pc, #304]	; (2cc8 <i2c_master_init+0x298>)
    2b98:	4a4c      	ldr	r2, [pc, #304]	; (2ccc <i2c_master_init+0x29c>)
    2b9a:	4b4d      	ldr	r3, [pc, #308]	; (2cd0 <i2c_master_init+0x2a0>)
    2b9c:	9800      	ldr	r0, [sp, #0]
    2b9e:	9901      	ldr	r1, [sp, #4]
    2ba0:	47b8      	blx	r7
    2ba2:	0002      	movs	r2, r0
    2ba4:	000b      	movs	r3, r1
    2ba6:	9804      	ldr	r0, [sp, #16]
    2ba8:	9905      	ldr	r1, [sp, #20]
    2baa:	47b8      	blx	r7
    2bac:	4e49      	ldr	r6, [pc, #292]	; (2cd4 <i2c_master_init+0x2a4>)
    2bae:	2200      	movs	r2, #0
    2bb0:	4b49      	ldr	r3, [pc, #292]	; (2cd8 <i2c_master_init+0x2a8>)
    2bb2:	47b0      	blx	r6
    2bb4:	9004      	str	r0, [sp, #16]
    2bb6:	9105      	str	r1, [sp, #20]
    2bb8:	4648      	mov	r0, r9
    2bba:	47a8      	blx	r5
    2bbc:	0002      	movs	r2, r0
    2bbe:	000b      	movs	r3, r1
    2bc0:	9804      	ldr	r0, [sp, #16]
    2bc2:	9905      	ldr	r1, [sp, #20]
    2bc4:	47b8      	blx	r7
    2bc6:	0002      	movs	r2, r0
    2bc8:	000b      	movs	r3, r1
    2bca:	4d44      	ldr	r5, [pc, #272]	; (2cdc <i2c_master_init+0x2ac>)
    2bcc:	9800      	ldr	r0, [sp, #0]
    2bce:	9901      	ldr	r1, [sp, #4]
    2bd0:	47a8      	blx	r5
    2bd2:	9a02      	ldr	r2, [sp, #8]
    2bd4:	9b03      	ldr	r3, [sp, #12]
    2bd6:	47b0      	blx	r6
    2bd8:	2200      	movs	r2, #0
    2bda:	4b41      	ldr	r3, [pc, #260]	; (2ce0 <i2c_master_init+0x2b0>)
    2bdc:	47a8      	blx	r5
    2bde:	9a02      	ldr	r2, [sp, #8]
    2be0:	9b03      	ldr	r3, [sp, #12]
    2be2:	4d40      	ldr	r5, [pc, #256]	; (2ce4 <i2c_master_init+0x2b4>)
    2be4:	47a8      	blx	r5
    2be6:	4b40      	ldr	r3, [pc, #256]	; (2ce8 <i2c_master_init+0x2b8>)
    2be8:	4798      	blx	r3
    2bea:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    2bec:	2380      	movs	r3, #128	; 0x80
    2bee:	049b      	lsls	r3, r3, #18
    2bf0:	68a2      	ldr	r2, [r4, #8]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d01e      	beq.n	2c34 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2bf6:	0003      	movs	r3, r0
    2bf8:	2040      	movs	r0, #64	; 0x40
    2bfa:	2dff      	cmp	r5, #255	; 0xff
    2bfc:	d900      	bls.n	2c00 <i2c_master_init+0x1d0>
    2bfe:	e73e      	b.n	2a7e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    2c00:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    2c02:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    2c04:	25ff      	movs	r5, #255	; 0xff
    2c06:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    2c08:	0624      	lsls	r4, r4, #24
    2c0a:	4325      	orrs	r5, r4
    2c0c:	0400      	lsls	r0, r0, #16
    2c0e:	23ff      	movs	r3, #255	; 0xff
    2c10:	041b      	lsls	r3, r3, #16
    2c12:	4018      	ands	r0, r3
    2c14:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    2c16:	4643      	mov	r3, r8
    2c18:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    2c1a:	2000      	movs	r0, #0
    2c1c:	e72f      	b.n	2a7e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    2c1e:	2100      	movs	r1, #0
    2c20:	4640      	mov	r0, r8
    2c22:	4b32      	ldr	r3, [pc, #200]	; (2cec <i2c_master_init+0x2bc>)
    2c24:	4798      	blx	r3
    2c26:	e74a      	b.n	2abe <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    2c28:	2101      	movs	r1, #1
    2c2a:	4640      	mov	r0, r8
    2c2c:	4b2f      	ldr	r3, [pc, #188]	; (2cec <i2c_master_init+0x2bc>)
    2c2e:	4798      	blx	r3
    2c30:	0007      	movs	r7, r0
    2c32:	e751      	b.n	2ad8 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    2c34:	26fa      	movs	r6, #250	; 0xfa
    2c36:	00b6      	lsls	r6, r6, #2
    2c38:	4653      	mov	r3, sl
    2c3a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    2c3c:	9800      	ldr	r0, [sp, #0]
    2c3e:	9901      	ldr	r1, [sp, #4]
    2c40:	0002      	movs	r2, r0
    2c42:	000b      	movs	r3, r1
    2c44:	4c23      	ldr	r4, [pc, #140]	; (2cd4 <i2c_master_init+0x2a4>)
    2c46:	47a0      	blx	r4
    2c48:	9000      	str	r0, [sp, #0]
    2c4a:	9101      	str	r1, [sp, #4]
    2c4c:	0030      	movs	r0, r6
    2c4e:	4b1d      	ldr	r3, [pc, #116]	; (2cc4 <i2c_master_init+0x294>)
    2c50:	4798      	blx	r3
    2c52:	2200      	movs	r2, #0
    2c54:	4b26      	ldr	r3, [pc, #152]	; (2cf0 <i2c_master_init+0x2c0>)
    2c56:	47b8      	blx	r7
    2c58:	0002      	movs	r2, r0
    2c5a:	000b      	movs	r3, r1
    2c5c:	9800      	ldr	r0, [sp, #0]
    2c5e:	9901      	ldr	r1, [sp, #4]
    2c60:	4c20      	ldr	r4, [pc, #128]	; (2ce4 <i2c_master_init+0x2b4>)
    2c62:	47a0      	blx	r4
    2c64:	2200      	movs	r2, #0
    2c66:	4b1e      	ldr	r3, [pc, #120]	; (2ce0 <i2c_master_init+0x2b0>)
    2c68:	4c1c      	ldr	r4, [pc, #112]	; (2cdc <i2c_master_init+0x2ac>)
    2c6a:	47a0      	blx	r4
    2c6c:	4b1e      	ldr	r3, [pc, #120]	; (2ce8 <i2c_master_init+0x2b8>)
    2c6e:	4798      	blx	r3
    2c70:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    2c72:	d00c      	beq.n	2c8e <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    2c74:	0031      	movs	r1, r6
    2c76:	9807      	ldr	r0, [sp, #28]
    2c78:	4b1e      	ldr	r3, [pc, #120]	; (2cf4 <i2c_master_init+0x2c4>)
    2c7a:	4798      	blx	r3
    2c7c:	3802      	subs	r0, #2
    2c7e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2c80:	002b      	movs	r3, r5
    2c82:	2dff      	cmp	r5, #255	; 0xff
    2c84:	d80c      	bhi.n	2ca0 <i2c_master_init+0x270>
    2c86:	28ff      	cmp	r0, #255	; 0xff
    2c88:	d9bc      	bls.n	2c04 <i2c_master_init+0x1d4>
    2c8a:	2040      	movs	r0, #64	; 0x40
    2c8c:	e6f7      	b.n	2a7e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    2c8e:	0071      	lsls	r1, r6, #1
    2c90:	1e48      	subs	r0, r1, #1
    2c92:	9b07      	ldr	r3, [sp, #28]
    2c94:	469c      	mov	ip, r3
    2c96:	4460      	add	r0, ip
    2c98:	4b16      	ldr	r3, [pc, #88]	; (2cf4 <i2c_master_init+0x2c4>)
    2c9a:	4798      	blx	r3
    2c9c:	3801      	subs	r0, #1
    2c9e:	e7ef      	b.n	2c80 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    2ca0:	2040      	movs	r0, #64	; 0x40
    2ca2:	e6ec      	b.n	2a7e <i2c_master_init+0x4e>
    2ca4:	00005ad1 	.word	0x00005ad1
    2ca8:	40000400 	.word	0x40000400
    2cac:	00009a01 	.word	0x00009a01
    2cb0:	00009975 	.word	0x00009975
    2cb4:	0000590d 	.word	0x0000590d
    2cb8:	00009af9 	.word	0x00009af9
    2cbc:	41002000 	.word	0x41002000
    2cc0:	00009a1d 	.word	0x00009a1d
    2cc4:	000104a5 	.word	0x000104a5
    2cc8:	0000f84d 	.word	0x0000f84d
    2ccc:	e826d695 	.word	0xe826d695
    2cd0:	3e112e0b 	.word	0x3e112e0b
    2cd4:	0000e9c5 	.word	0x0000e9c5
    2cd8:	40240000 	.word	0x40240000
    2cdc:	0000fd4d 	.word	0x0000fd4d
    2ce0:	3ff00000 	.word	0x3ff00000
    2ce4:	0000efe5 	.word	0x0000efe5
    2ce8:	000103b9 	.word	0x000103b9
    2cec:	00005959 	.word	0x00005959
    2cf0:	40080000 	.word	0x40080000
    2cf4:	0000e099 	.word	0x0000e099

00002cf8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2cf8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    2cfa:	7e1a      	ldrb	r2, [r3, #24]
    2cfc:	0792      	lsls	r2, r2, #30
    2cfe:	d507      	bpl.n	2d10 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2d00:	2202      	movs	r2, #2
    2d02:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    2d04:	8b5b      	ldrh	r3, [r3, #26]
    2d06:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    2d08:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    2d0a:	17db      	asrs	r3, r3, #31
    2d0c:	4018      	ands	r0, r3
}
    2d0e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2d10:	8b5a      	ldrh	r2, [r3, #26]
    2d12:	0752      	lsls	r2, r2, #29
    2d14:	d506      	bpl.n	2d24 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2d16:	6859      	ldr	r1, [r3, #4]
    2d18:	22c0      	movs	r2, #192	; 0xc0
    2d1a:	0292      	lsls	r2, r2, #10
    2d1c:	430a      	orrs	r2, r1
    2d1e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    2d20:	2018      	movs	r0, #24
    2d22:	e7f4      	b.n	2d0e <_i2c_master_address_response+0x16>
	return STATUS_OK;
    2d24:	2000      	movs	r0, #0
    2d26:	e7f2      	b.n	2d0e <_i2c_master_address_response+0x16>

00002d28 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    2d28:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d2a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    2d2c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2d2e:	2401      	movs	r4, #1
    2d30:	2502      	movs	r5, #2
    2d32:	7e11      	ldrb	r1, [r2, #24]
    2d34:	4221      	tst	r1, r4
    2d36:	d10b      	bne.n	2d50 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    2d38:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2d3a:	4229      	tst	r1, r5
    2d3c:	d106      	bne.n	2d4c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    2d3e:	3301      	adds	r3, #1
    2d40:	b29b      	uxth	r3, r3
    2d42:	8901      	ldrh	r1, [r0, #8]
    2d44:	4299      	cmp	r1, r3
    2d46:	d8f4      	bhi.n	2d32 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    2d48:	2012      	movs	r0, #18
    2d4a:	e002      	b.n	2d52 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    2d4c:	2000      	movs	r0, #0
    2d4e:	e000      	b.n	2d52 <_i2c_master_wait_for_bus+0x2a>
    2d50:	2000      	movs	r0, #0
}
    2d52:	bd30      	pop	{r4, r5, pc}

00002d54 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    2d54:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d56:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2d58:	6862      	ldr	r2, [r4, #4]
    2d5a:	2380      	movs	r3, #128	; 0x80
    2d5c:	02db      	lsls	r3, r3, #11
    2d5e:	4313      	orrs	r3, r2
    2d60:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    2d62:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2d64:	4b02      	ldr	r3, [pc, #8]	; (2d70 <_i2c_master_send_hs_master_code+0x1c>)
    2d66:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    2d68:	2301      	movs	r3, #1
    2d6a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    2d6c:	bd10      	pop	{r4, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	00002d29 	.word	0x00002d29

00002d74 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d76:	46de      	mov	lr, fp
    2d78:	4657      	mov	r7, sl
    2d7a:	464e      	mov	r6, r9
    2d7c:	4645      	mov	r5, r8
    2d7e:	b5e0      	push	{r5, r6, r7, lr}
    2d80:	b083      	sub	sp, #12
    2d82:	0006      	movs	r6, r0
    2d84:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d86:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    2d88:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    2d8a:	682b      	ldr	r3, [r5, #0]
    2d8c:	011b      	lsls	r3, r3, #4
    2d8e:	0fdb      	lsrs	r3, r3, #31
    2d90:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2d92:	7a4b      	ldrb	r3, [r1, #9]
    2d94:	2b00      	cmp	r3, #0
    2d96:	d12b      	bne.n	2df0 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2d98:	686b      	ldr	r3, [r5, #4]
    2d9a:	4a58      	ldr	r2, [pc, #352]	; (2efc <_i2c_master_read_packet+0x188>)
    2d9c:	4013      	ands	r3, r2
    2d9e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    2da0:	464b      	mov	r3, r9
    2da2:	7a1b      	ldrb	r3, [r3, #8]
    2da4:	2b00      	cmp	r3, #0
    2da6:	d127      	bne.n	2df8 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    2da8:	464b      	mov	r3, r9
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    2dae:	464a      	mov	r2, r9
    2db0:	7a52      	ldrb	r2, [r2, #9]
    2db2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    2db4:	4313      	orrs	r3, r2
    2db6:	2201      	movs	r2, #1
    2db8:	4313      	orrs	r3, r2
    2dba:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2dbc:	0030      	movs	r0, r6
    2dbe:	4b50      	ldr	r3, [pc, #320]	; (2f00 <_i2c_master_read_packet+0x18c>)
    2dc0:	4798      	blx	r3
    2dc2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    2dc4:	4653      	mov	r3, sl
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d003      	beq.n	2dd2 <_i2c_master_read_packet+0x5e>
    2dca:	464b      	mov	r3, r9
    2dcc:	885b      	ldrh	r3, [r3, #2]
    2dce:	2b01      	cmp	r3, #1
    2dd0:	d03b      	beq.n	2e4a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    2dd2:	686b      	ldr	r3, [r5, #4]
    2dd4:	4a49      	ldr	r2, [pc, #292]	; (2efc <_i2c_master_read_packet+0x188>)
    2dd6:	4013      	ands	r3, r2
    2dd8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    2dda:	9b01      	ldr	r3, [sp, #4]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d03a      	beq.n	2e56 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    2de0:	9801      	ldr	r0, [sp, #4]
    2de2:	b003      	add	sp, #12
    2de4:	bc3c      	pop	{r2, r3, r4, r5}
    2de6:	4690      	mov	r8, r2
    2de8:	4699      	mov	r9, r3
    2dea:	46a2      	mov	sl, r4
    2dec:	46ab      	mov	fp, r5
    2dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    2df0:	7a89      	ldrb	r1, [r1, #10]
    2df2:	4b44      	ldr	r3, [pc, #272]	; (2f04 <_i2c_master_read_packet+0x190>)
    2df4:	4798      	blx	r3
    2df6:	e7cf      	b.n	2d98 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    2df8:	464b      	mov	r3, r9
    2dfa:	881b      	ldrh	r3, [r3, #0]
    2dfc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2dfe:	464a      	mov	r2, r9
    2e00:	7a52      	ldrb	r2, [r2, #9]
    2e02:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    2e04:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2e06:	2280      	movs	r2, #128	; 0x80
    2e08:	0212      	lsls	r2, r2, #8
    2e0a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    2e0c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    2e0e:	0030      	movs	r0, r6
    2e10:	4b3b      	ldr	r3, [pc, #236]	; (2f00 <_i2c_master_read_packet+0x18c>)
    2e12:	4798      	blx	r3
    2e14:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2e16:	686b      	ldr	r3, [r5, #4]
    2e18:	4a38      	ldr	r2, [pc, #224]	; (2efc <_i2c_master_read_packet+0x188>)
    2e1a:	4013      	ands	r3, r2
    2e1c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    2e1e:	2800      	cmp	r0, #0
    2e20:	d1de      	bne.n	2de0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    2e22:	0030      	movs	r0, r6
    2e24:	4b38      	ldr	r3, [pc, #224]	; (2f08 <_i2c_master_read_packet+0x194>)
    2e26:	4798      	blx	r3
    2e28:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    2e2a:	2800      	cmp	r0, #0
    2e2c:	d1d8      	bne.n	2de0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    2e2e:	464b      	mov	r3, r9
    2e30:	881b      	ldrh	r3, [r3, #0]
    2e32:	0a1b      	lsrs	r3, r3, #8
    2e34:	2278      	movs	r2, #120	; 0x78
    2e36:	4313      	orrs	r3, r2
    2e38:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2e3a:	464a      	mov	r2, r9
    2e3c:	7a52      	ldrb	r2, [r2, #9]
    2e3e:	0392      	lsls	r2, r2, #14
    2e40:	2101      	movs	r1, #1
    2e42:	430a      	orrs	r2, r1
    2e44:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    2e46:	626b      	str	r3, [r5, #36]	; 0x24
    2e48:	e7b8      	b.n	2dbc <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2e4a:	686a      	ldr	r2, [r5, #4]
    2e4c:	2380      	movs	r3, #128	; 0x80
    2e4e:	02db      	lsls	r3, r3, #11
    2e50:	4313      	orrs	r3, r2
    2e52:	606b      	str	r3, [r5, #4]
    2e54:	e7c1      	b.n	2dda <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    2e56:	0030      	movs	r0, r6
    2e58:	4b2b      	ldr	r3, [pc, #172]	; (2f08 <_i2c_master_read_packet+0x194>)
    2e5a:	4798      	blx	r3
    2e5c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    2e5e:	2800      	cmp	r0, #0
    2e60:	d1be      	bne.n	2de0 <_i2c_master_read_packet+0x6c>
    2e62:	3c01      	subs	r4, #1
    2e64:	b2a4      	uxth	r4, r4
    2e66:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    2e68:	4b28      	ldr	r3, [pc, #160]	; (2f0c <_i2c_master_read_packet+0x198>)
    2e6a:	469b      	mov	fp, r3
    2e6c:	e015      	b.n	2e9a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    2e6e:	2c01      	cmp	r4, #1
    2e70:	d020      	beq.n	2eb4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    2e72:	0030      	movs	r0, r6
    2e74:	4b26      	ldr	r3, [pc, #152]	; (2f10 <_i2c_master_read_packet+0x19c>)
    2e76:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    2e78:	4643      	mov	r3, r8
    2e7a:	1c5f      	adds	r7, r3, #1
    2e7c:	b2bf      	uxth	r7, r7
    2e7e:	2328      	movs	r3, #40	; 0x28
    2e80:	5ceb      	ldrb	r3, [r5, r3]
    2e82:	464a      	mov	r2, r9
    2e84:	6852      	ldr	r2, [r2, #4]
    2e86:	4641      	mov	r1, r8
    2e88:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    2e8a:	0030      	movs	r0, r6
    2e8c:	4b1c      	ldr	r3, [pc, #112]	; (2f00 <_i2c_master_read_packet+0x18c>)
    2e8e:	4798      	blx	r3
    2e90:	3c01      	subs	r4, #1
    2e92:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    2e94:	2800      	cmp	r0, #0
    2e96:	d115      	bne.n	2ec4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    2e98:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    2e9a:	455c      	cmp	r4, fp
    2e9c:	d014      	beq.n	2ec8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2e9e:	8b6b      	ldrh	r3, [r5, #26]
    2ea0:	069b      	lsls	r3, r3, #26
    2ea2:	d527      	bpl.n	2ef4 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    2ea4:	7af3      	ldrb	r3, [r6, #11]
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d0e3      	beq.n	2e72 <_i2c_master_read_packet+0xfe>
    2eaa:	4653      	mov	r3, sl
    2eac:	2b00      	cmp	r3, #0
    2eae:	d1de      	bne.n	2e6e <_i2c_master_read_packet+0xfa>
    2eb0:	2c00      	cmp	r4, #0
    2eb2:	d1de      	bne.n	2e72 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2eb4:	686a      	ldr	r2, [r5, #4]
    2eb6:	2380      	movs	r3, #128	; 0x80
    2eb8:	02db      	lsls	r3, r3, #11
    2eba:	4313      	orrs	r3, r2
    2ebc:	606b      	str	r3, [r5, #4]
    2ebe:	3c01      	subs	r4, #1
    2ec0:	b2a4      	uxth	r4, r4
    2ec2:	e7ea      	b.n	2e9a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    2ec4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    2ec6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    2ec8:	7ab3      	ldrb	r3, [r6, #10]
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d109      	bne.n	2ee2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    2ece:	0030      	movs	r0, r6
    2ed0:	4b0f      	ldr	r3, [pc, #60]	; (2f10 <_i2c_master_read_packet+0x19c>)
    2ed2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    2ed4:	2328      	movs	r3, #40	; 0x28
    2ed6:	5cea      	ldrb	r2, [r5, r3]
    2ed8:	464b      	mov	r3, r9
    2eda:	685b      	ldr	r3, [r3, #4]
    2edc:	4641      	mov	r1, r8
    2ede:	545a      	strb	r2, [r3, r1]
    2ee0:	e77e      	b.n	2de0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    2ee2:	0030      	movs	r0, r6
    2ee4:	4b0a      	ldr	r3, [pc, #40]	; (2f10 <_i2c_master_read_packet+0x19c>)
    2ee6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2ee8:	686a      	ldr	r2, [r5, #4]
    2eea:	23c0      	movs	r3, #192	; 0xc0
    2eec:	029b      	lsls	r3, r3, #10
    2eee:	4313      	orrs	r3, r2
    2ef0:	606b      	str	r3, [r5, #4]
    2ef2:	e7ec      	b.n	2ece <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    2ef4:	2341      	movs	r3, #65	; 0x41
    2ef6:	9301      	str	r3, [sp, #4]
    2ef8:	e772      	b.n	2de0 <_i2c_master_read_packet+0x6c>
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	fffbffff 	.word	0xfffbffff
    2f00:	00002d29 	.word	0x00002d29
    2f04:	00002d55 	.word	0x00002d55
    2f08:	00002cf9 	.word	0x00002cf9
    2f0c:	0000ffff 	.word	0x0000ffff
    2f10:	00002a25 	.word	0x00002a25

00002f14 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f16:	46de      	mov	lr, fp
    2f18:	4657      	mov	r7, sl
    2f1a:	464e      	mov	r6, r9
    2f1c:	4645      	mov	r5, r8
    2f1e:	b5e0      	push	{r5, r6, r7, lr}
    2f20:	b083      	sub	sp, #12
    2f22:	0006      	movs	r6, r0
    2f24:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2f26:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    2f28:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    2f2a:	4b32      	ldr	r3, [pc, #200]	; (2ff4 <_i2c_master_write_packet+0xe0>)
    2f2c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2f2e:	7a7b      	ldrb	r3, [r7, #9]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d11d      	bne.n	2f70 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2f34:	686b      	ldr	r3, [r5, #4]
    2f36:	4a30      	ldr	r2, [pc, #192]	; (2ff8 <_i2c_master_write_packet+0xe4>)
    2f38:	4013      	ands	r3, r2
    2f3a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    2f3c:	7a3b      	ldrb	r3, [r7, #8]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d01b      	beq.n	2f7a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2f42:	883b      	ldrh	r3, [r7, #0]
    2f44:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2f46:	7a7a      	ldrb	r2, [r7, #9]
    2f48:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2f4a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2f4c:	2280      	movs	r2, #128	; 0x80
    2f4e:	0212      	lsls	r2, r2, #8
    2f50:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2f52:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2f54:	0030      	movs	r0, r6
    2f56:	4b29      	ldr	r3, [pc, #164]	; (2ffc <_i2c_master_write_packet+0xe8>)
    2f58:	4798      	blx	r3
    2f5a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    2f5c:	2800      	cmp	r0, #0
    2f5e:	d013      	beq.n	2f88 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    2f60:	9801      	ldr	r0, [sp, #4]
    2f62:	b003      	add	sp, #12
    2f64:	bc3c      	pop	{r2, r3, r4, r5}
    2f66:	4690      	mov	r8, r2
    2f68:	4699      	mov	r9, r3
    2f6a:	46a2      	mov	sl, r4
    2f6c:	46ab      	mov	fp, r5
    2f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    2f70:	7ab9      	ldrb	r1, [r7, #10]
    2f72:	0030      	movs	r0, r6
    2f74:	4b22      	ldr	r3, [pc, #136]	; (3000 <_i2c_master_write_packet+0xec>)
    2f76:	4798      	blx	r3
    2f78:	e7dc      	b.n	2f34 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2f7a:	883b      	ldrh	r3, [r7, #0]
    2f7c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    2f7e:	7a7a      	ldrb	r2, [r7, #9]
    2f80:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2f82:	4313      	orrs	r3, r2
    2f84:	626b      	str	r3, [r5, #36]	; 0x24
    2f86:	e7e5      	b.n	2f54 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    2f88:	0030      	movs	r0, r6
    2f8a:	4b1e      	ldr	r3, [pc, #120]	; (3004 <_i2c_master_write_packet+0xf0>)
    2f8c:	4798      	blx	r3
    2f8e:	1e03      	subs	r3, r0, #0
    2f90:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    2f92:	d1e5      	bne.n	2f60 <_i2c_master_write_packet+0x4c>
    2f94:	46a0      	mov	r8, r4
    2f96:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2f98:	3320      	adds	r3, #32
    2f9a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    2f9c:	4b15      	ldr	r3, [pc, #84]	; (2ff4 <_i2c_master_write_packet+0xe0>)
    2f9e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    2fa0:	4b16      	ldr	r3, [pc, #88]	; (2ffc <_i2c_master_write_packet+0xe8>)
    2fa2:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    2fa4:	4544      	cmp	r4, r8
    2fa6:	d015      	beq.n	2fd4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2fa8:	8b6b      	ldrh	r3, [r5, #26]
    2faa:	464a      	mov	r2, r9
    2fac:	4213      	tst	r3, r2
    2fae:	d01d      	beq.n	2fec <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    2fb0:	0030      	movs	r0, r6
    2fb2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    2fb4:	687b      	ldr	r3, [r7, #4]
    2fb6:	5d1a      	ldrb	r2, [r3, r4]
    2fb8:	2328      	movs	r3, #40	; 0x28
    2fba:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    2fbc:	0030      	movs	r0, r6
    2fbe:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    2fc0:	2800      	cmp	r0, #0
    2fc2:	d106      	bne.n	2fd2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2fc4:	8b6b      	ldrh	r3, [r5, #26]
    2fc6:	3401      	adds	r4, #1
    2fc8:	075b      	lsls	r3, r3, #29
    2fca:	d5eb      	bpl.n	2fa4 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    2fcc:	231e      	movs	r3, #30
    2fce:	9301      	str	r3, [sp, #4]
    2fd0:	e000      	b.n	2fd4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    2fd2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    2fd4:	7ab3      	ldrb	r3, [r6, #10]
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d0c2      	beq.n	2f60 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    2fda:	0030      	movs	r0, r6
    2fdc:	4b05      	ldr	r3, [pc, #20]	; (2ff4 <_i2c_master_write_packet+0xe0>)
    2fde:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2fe0:	686a      	ldr	r2, [r5, #4]
    2fe2:	23c0      	movs	r3, #192	; 0xc0
    2fe4:	029b      	lsls	r3, r3, #10
    2fe6:	4313      	orrs	r3, r2
    2fe8:	606b      	str	r3, [r5, #4]
    2fea:	e7b9      	b.n	2f60 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    2fec:	2341      	movs	r3, #65	; 0x41
    2fee:	9301      	str	r3, [sp, #4]
    2ff0:	e7b6      	b.n	2f60 <_i2c_master_write_packet+0x4c>
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	00002a25 	.word	0x00002a25
    2ff8:	fffbffff 	.word	0xfffbffff
    2ffc:	00002d29 	.word	0x00002d29
    3000:	00002d55 	.word	0x00002d55
    3004:	00002cf9 	.word	0x00002cf9

00003008 <i2c_master_read_packet_wait>:
{
    3008:	b510      	push	{r4, lr}
	module->send_stop = true;
    300a:	2301      	movs	r3, #1
    300c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    300e:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    3010:	4b01      	ldr	r3, [pc, #4]	; (3018 <i2c_master_read_packet_wait+0x10>)
    3012:	4798      	blx	r3
}
    3014:	bd10      	pop	{r4, pc}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	00002d75 	.word	0x00002d75

0000301c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    301c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    301e:	2301      	movs	r3, #1
    3020:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3022:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    3024:	4b01      	ldr	r3, [pc, #4]	; (302c <i2c_master_write_packet_wait+0x10>)
    3026:	4798      	blx	r3
}
    3028:	bd10      	pop	{r4, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	00002f15 	.word	0x00002f15

00003030 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3030:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    3032:	2300      	movs	r3, #0
    3034:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3036:	3301      	adds	r3, #1
    3038:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    303a:	4b01      	ldr	r3, [pc, #4]	; (3040 <i2c_master_write_packet_wait_no_stop+0x10>)
    303c:	4798      	blx	r3
}
    303e:	bd10      	pop	{r4, pc}
    3040:	00002f15 	.word	0x00002f15

00003044 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3044:	b5f0      	push	{r4, r5, r6, r7, lr}
    3046:	46c6      	mov	lr, r8
    3048:	b500      	push	{lr}
    304a:	000c      	movs	r4, r1
    304c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    304e:	2800      	cmp	r0, #0
    3050:	d10f      	bne.n	3072 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3052:	2a00      	cmp	r2, #0
    3054:	dd11      	ble.n	307a <_read+0x36>
    3056:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3058:	4e09      	ldr	r6, [pc, #36]	; (3080 <_read+0x3c>)
    305a:	4d0a      	ldr	r5, [pc, #40]	; (3084 <_read+0x40>)
    305c:	6830      	ldr	r0, [r6, #0]
    305e:	0021      	movs	r1, r4
    3060:	682b      	ldr	r3, [r5, #0]
    3062:	4798      	blx	r3
		ptr++;
    3064:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3066:	42bc      	cmp	r4, r7
    3068:	d1f8      	bne.n	305c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    306a:	4640      	mov	r0, r8
    306c:	bc04      	pop	{r2}
    306e:	4690      	mov	r8, r2
    3070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3072:	2301      	movs	r3, #1
    3074:	425b      	negs	r3, r3
    3076:	4698      	mov	r8, r3
    3078:	e7f7      	b.n	306a <_read+0x26>
	for (; len > 0; --len) {
    307a:	4680      	mov	r8, r0
    307c:	e7f5      	b.n	306a <_read+0x26>
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	20000894 	.word	0x20000894
    3084:	2000088c 	.word	0x2000088c

00003088 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3088:	b5f0      	push	{r4, r5, r6, r7, lr}
    308a:	46c6      	mov	lr, r8
    308c:	b500      	push	{lr}
    308e:	000e      	movs	r6, r1
    3090:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3092:	3801      	subs	r0, #1
    3094:	2802      	cmp	r0, #2
    3096:	d810      	bhi.n	30ba <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3098:	2a00      	cmp	r2, #0
    309a:	d011      	beq.n	30c0 <_write+0x38>
    309c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    309e:	4b0c      	ldr	r3, [pc, #48]	; (30d0 <_write+0x48>)
    30a0:	4698      	mov	r8, r3
    30a2:	4f0c      	ldr	r7, [pc, #48]	; (30d4 <_write+0x4c>)
    30a4:	4643      	mov	r3, r8
    30a6:	6818      	ldr	r0, [r3, #0]
    30a8:	5d31      	ldrb	r1, [r6, r4]
    30aa:	683b      	ldr	r3, [r7, #0]
    30ac:	4798      	blx	r3
    30ae:	2800      	cmp	r0, #0
    30b0:	db08      	blt.n	30c4 <_write+0x3c>
			return -1;
		}
		++nChars;
    30b2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    30b4:	42a5      	cmp	r5, r4
    30b6:	d1f5      	bne.n	30a4 <_write+0x1c>
    30b8:	e006      	b.n	30c8 <_write+0x40>
		return -1;
    30ba:	2401      	movs	r4, #1
    30bc:	4264      	negs	r4, r4
    30be:	e003      	b.n	30c8 <_write+0x40>
	for (; len != 0; --len) {
    30c0:	0014      	movs	r4, r2
    30c2:	e001      	b.n	30c8 <_write+0x40>
			return -1;
    30c4:	2401      	movs	r4, #1
    30c6:	4264      	negs	r4, r4
	}
	return nChars;
}
    30c8:	0020      	movs	r0, r4
    30ca:	bc04      	pop	{r2}
    30cc:	4690      	mov	r8, r2
    30ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30d0:	20000894 	.word	0x20000894
    30d4:	20000890 	.word	0x20000890

000030d8 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    30d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30da:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    30dc:	2041      	movs	r0, #65	; 0x41
    30de:	5c23      	ldrb	r3, [r4, r0]
    30e0:	2501      	movs	r5, #1
    30e2:	432b      	orrs	r3, r5
    30e4:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    30e6:	b292      	uxth	r2, r2
    30e8:	2000      	movs	r0, #0
    30ea:	5620      	ldrsb	r0, [r4, r0]
    30ec:	2300      	movs	r3, #0
    30ee:	4d12      	ldr	r5, [pc, #72]	; (3138 <_http_client_send_wait+0x60>)
    30f0:	47a8      	blx	r5
    30f2:	2800      	cmp	r0, #0
    30f4:	db16      	blt.n	3124 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    30f6:	2341      	movs	r3, #65	; 0x41
    30f8:	5ce3      	ldrb	r3, [r4, r3]
    30fa:	07db      	lsls	r3, r3, #31
    30fc:	d518      	bpl.n	3130 <_http_client_send_wait+0x58>
    30fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    3100:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    3102:	2b02      	cmp	r3, #2
    3104:	d917      	bls.n	3136 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    3106:	4f0d      	ldr	r7, [pc, #52]	; (313c <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    3108:	4e0d      	ldr	r6, [pc, #52]	; (3140 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    310a:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    310c:	2000      	movs	r0, #0
    310e:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    3110:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3112:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    3114:	5d63      	ldrb	r3, [r4, r5]
    3116:	07db      	lsls	r3, r3, #31
    3118:	d50c      	bpl.n	3134 <_http_client_send_wait+0x5c>
    311a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    311c:	2b02      	cmp	r3, #2
    311e:	d8f5      	bhi.n	310c <_http_client_send_wait+0x34>
	return 0;
    3120:	2000      	movs	r0, #0
    3122:	e008      	b.n	3136 <_http_client_send_wait+0x5e>
		module->sending = 0;
    3124:	2241      	movs	r2, #65	; 0x41
    3126:	5ca3      	ldrb	r3, [r4, r2]
    3128:	2101      	movs	r1, #1
    312a:	438b      	bics	r3, r1
    312c:	54a3      	strb	r3, [r4, r2]
		return result;
    312e:	e002      	b.n	3136 <_http_client_send_wait+0x5e>
	return 0;
    3130:	2000      	movs	r0, #0
    3132:	e000      	b.n	3136 <_http_client_send_wait+0x5e>
    3134:	2000      	movs	r0, #0
}
    3136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3138:	00008c05 	.word	0x00008c05
    313c:	00006e65 	.word	0x00006e65
    3140:	0000430d 	.word	0x0000430d

00003144 <http_client_get_config_defaults>:
	config->port = 80;
    3144:	2350      	movs	r3, #80	; 0x50
    3146:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    3148:	2300      	movs	r3, #0
    314a:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    314c:	4a05      	ldr	r2, [pc, #20]	; (3164 <http_client_get_config_defaults+0x20>)
    314e:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    3150:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    3152:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    3154:	3301      	adds	r3, #1
    3156:	33ff      	adds	r3, #255	; 0xff
    3158:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    315a:	3bae      	subs	r3, #174	; 0xae
    315c:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    315e:	4b02      	ldr	r3, [pc, #8]	; (3168 <http_client_get_config_defaults+0x24>)
    3160:	6183      	str	r3, [r0, #24]
}
    3162:	4770      	bx	lr
    3164:	00004e20 	.word	0x00004e20
    3168:	00011778 	.word	0x00011778

0000316c <http_client_init>:
{
    316c:	b570      	push	{r4, r5, r6, lr}
    316e:	0004      	movs	r4, r0
    3170:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    3172:	2800      	cmp	r0, #0
    3174:	d038      	beq.n	31e8 <http_client_init+0x7c>
    3176:	2900      	cmp	r1, #0
    3178:	d039      	beq.n	31ee <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    317a:	690b      	ldr	r3, [r1, #16]
    317c:	2b00      	cmp	r3, #0
    317e:	d039      	beq.n	31f4 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    3180:	684b      	ldr	r3, [r1, #4]
    3182:	2b00      	cmp	r3, #0
    3184:	d039      	beq.n	31fa <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    3186:	694b      	ldr	r3, [r1, #20]
    3188:	2b51      	cmp	r3, #81	; 0x51
    318a:	d939      	bls.n	3200 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    318c:	22e8      	movs	r2, #232	; 0xe8
    318e:	2100      	movs	r1, #0
    3190:	4b1e      	ldr	r3, [pc, #120]	; (320c <http_client_init+0xa0>)
    3192:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    3194:	0020      	movs	r0, r4
    3196:	3050      	adds	r0, #80	; 0x50
    3198:	221c      	movs	r2, #28
    319a:	0029      	movs	r1, r5
    319c:	4b1c      	ldr	r3, [pc, #112]	; (3210 <http_client_init+0xa4>)
    319e:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    31a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    31a2:	2b00      	cmp	r3, #0
    31a4:	d008      	beq.n	31b8 <http_client_init+0x4c>
	if (config->timeout > 0) {
    31a6:	892b      	ldrh	r3, [r5, #8]
    31a8:	2b00      	cmp	r3, #0
    31aa:	d111      	bne.n	31d0 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    31ac:	2300      	movs	r3, #0
    31ae:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    31b0:	22d8      	movs	r2, #216	; 0xd8
    31b2:	50a3      	str	r3, [r4, r2]
	return 0;
    31b4:	2000      	movs	r0, #0
}
    31b6:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    31b8:	6928      	ldr	r0, [r5, #16]
    31ba:	4b16      	ldr	r3, [pc, #88]	; (3214 <http_client_init+0xa8>)
    31bc:	4798      	blx	r3
    31be:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    31c0:	2800      	cmp	r0, #0
    31c2:	d020      	beq.n	3206 <http_client_init+0x9a>
		module->alloc_buffer = 1;
    31c4:	2241      	movs	r2, #65	; 0x41
    31c6:	5ca3      	ldrb	r3, [r4, r2]
    31c8:	2104      	movs	r1, #4
    31ca:	430b      	orrs	r3, r1
    31cc:	54a3      	strb	r3, [r4, r2]
    31ce:	e7ea      	b.n	31a6 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    31d0:	6868      	ldr	r0, [r5, #4]
    31d2:	2300      	movs	r3, #0
    31d4:	0022      	movs	r2, r4
    31d6:	4910      	ldr	r1, [pc, #64]	; (3218 <http_client_init+0xac>)
    31d8:	4d10      	ldr	r5, [pc, #64]	; (321c <http_client_init+0xb0>)
    31da:	47a8      	blx	r5
    31dc:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    31de:	2800      	cmp	r0, #0
    31e0:	dae4      	bge.n	31ac <http_client_init+0x40>
			return -ENOSPC;
    31e2:	201c      	movs	r0, #28
    31e4:	4240      	negs	r0, r0
    31e6:	e7e6      	b.n	31b6 <http_client_init+0x4a>
		return -EINVAL;
    31e8:	2016      	movs	r0, #22
    31ea:	4240      	negs	r0, r0
    31ec:	e7e3      	b.n	31b6 <http_client_init+0x4a>
    31ee:	2016      	movs	r0, #22
    31f0:	4240      	negs	r0, r0
    31f2:	e7e0      	b.n	31b6 <http_client_init+0x4a>
		return -EINVAL;
    31f4:	2016      	movs	r0, #22
    31f6:	4240      	negs	r0, r0
    31f8:	e7dd      	b.n	31b6 <http_client_init+0x4a>
		return -EINVAL;
    31fa:	2016      	movs	r0, #22
    31fc:	4240      	negs	r0, r0
    31fe:	e7da      	b.n	31b6 <http_client_init+0x4a>
		return -EINVAL;
    3200:	2016      	movs	r0, #22
    3202:	4240      	negs	r0, r0
    3204:	e7d7      	b.n	31b6 <http_client_init+0x4a>
			return -ENOMEM;
    3206:	200c      	movs	r0, #12
    3208:	4240      	negs	r0, r0
    320a:	e7d4      	b.n	31b6 <http_client_init+0x4a>
    320c:	0000b0fb 	.word	0x0000b0fb
    3210:	0000b0c5 	.word	0x0000b0c5
    3214:	0000b09d 	.word	0x0000b09d
    3218:	00003385 	.word	0x00003385
    321c:	00004289 	.word	0x00004289

00003220 <http_client_deinit>:
{
    3220:	b510      	push	{r4, lr}
    3222:	1e04      	subs	r4, r0, #0
	if (module == NULL) {
    3224:	d014      	beq.n	3250 <http_client_deinit+0x30>
	if (module->alloc_buffer != 0) {
    3226:	2341      	movs	r3, #65	; 0x41
    3228:	5cc3      	ldrb	r3, [r0, r3]
    322a:	075b      	lsls	r3, r3, #29
    322c:	d40c      	bmi.n	3248 <http_client_deinit+0x28>
	if (module->req.ext_header != NULL) {
    322e:	23d4      	movs	r3, #212	; 0xd4
    3230:	58e0      	ldr	r0, [r4, r3]
    3232:	2800      	cmp	r0, #0
    3234:	d001      	beq.n	323a <http_client_deinit+0x1a>
		free(module->req.ext_header);
    3236:	4b08      	ldr	r3, [pc, #32]	; (3258 <http_client_deinit+0x38>)
    3238:	4798      	blx	r3
	memset(module, 0, sizeof(struct http_client_module));
    323a:	22e8      	movs	r2, #232	; 0xe8
    323c:	2100      	movs	r1, #0
    323e:	0020      	movs	r0, r4
    3240:	4b06      	ldr	r3, [pc, #24]	; (325c <http_client_deinit+0x3c>)
    3242:	4798      	blx	r3
	return 0;
    3244:	2000      	movs	r0, #0
}
    3246:	bd10      	pop	{r4, pc}
		free(module->config.recv_buffer);
    3248:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    324a:	4b03      	ldr	r3, [pc, #12]	; (3258 <http_client_deinit+0x38>)
    324c:	4798      	blx	r3
    324e:	e7ee      	b.n	322e <http_client_deinit+0xe>
		return -EINVAL;
    3250:	2016      	movs	r0, #22
    3252:	4240      	negs	r0, r0
    3254:	e7f7      	b.n	3246 <http_client_deinit+0x26>
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	0000b0b1 	.word	0x0000b0b1
    325c:	0000b0fb 	.word	0x0000b0fb

00003260 <http_client_register_callback>:
	if (module == NULL) {
    3260:	2800      	cmp	r0, #0
    3262:	d002      	beq.n	326a <http_client_register_callback+0xa>
	module->cb = callback;
    3264:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    3266:	2000      	movs	r0, #0
}
    3268:	4770      	bx	lr
		return -EINVAL;
    326a:	2016      	movs	r0, #22
    326c:	4240      	negs	r0, r0
    326e:	e7fb      	b.n	3268 <http_client_register_callback+0x8>

00003270 <http_client_unregister_callback>:
	if (module == NULL) {
    3270:	2800      	cmp	r0, #0
    3272:	d003      	beq.n	327c <http_client_unregister_callback+0xc>
	module->cb = NULL;
    3274:	2300      	movs	r3, #0
    3276:	64c3      	str	r3, [r0, #76]	; 0x4c
	return 0;
    3278:	2000      	movs	r0, #0
}
    327a:	4770      	bx	lr
		return -EINVAL;
    327c:	2016      	movs	r0, #22
    327e:	4240      	negs	r0, r0
    3280:	e7fb      	b.n	327a <http_client_unregister_callback+0xa>
	...

00003284 <_http_client_clear_conn>:
{
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	b085      	sub	sp, #20
    3288:	0004      	movs	r4, r0
    328a:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    328c:	23c0      	movs	r3, #192	; 0xc0
    328e:	58c3      	ldr	r3, [r0, r3]
    3290:	2b00      	cmp	r3, #0
    3292:	d002      	beq.n	329a <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    3294:	22c4      	movs	r2, #196	; 0xc4
    3296:	5880      	ldr	r0, [r0, r2]
    3298:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    329a:	0020      	movs	r0, r4
    329c:	30b0      	adds	r0, #176	; 0xb0
    329e:	2218      	movs	r2, #24
    32a0:	2100      	movs	r1, #0
    32a2:	4b17      	ldr	r3, [pc, #92]	; (3300 <_http_client_clear_conn+0x7c>)
    32a4:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    32a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    32a8:	2b00      	cmp	r3, #0
    32aa:	d124      	bne.n	32f6 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    32ac:	2300      	movs	r3, #0
    32ae:	56e3      	ldrsb	r3, [r4, r3]
    32b0:	009b      	lsls	r3, r3, #2
    32b2:	2500      	movs	r5, #0
    32b4:	4a13      	ldr	r2, [pc, #76]	; (3304 <_http_client_clear_conn+0x80>)
    32b6:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    32b8:	0020      	movs	r0, r4
    32ba:	306c      	adds	r0, #108	; 0x6c
    32bc:	226c      	movs	r2, #108	; 0x6c
    32be:	2100      	movs	r1, #0
    32c0:	4f0f      	ldr	r7, [pc, #60]	; (3300 <_http_client_clear_conn+0x7c>)
    32c2:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    32c4:	0020      	movs	r0, r4
    32c6:	30d8      	adds	r0, #216	; 0xd8
    32c8:	2210      	movs	r2, #16
    32ca:	2100      	movs	r1, #0
    32cc:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    32ce:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    32d0:	23d8      	movs	r3, #216	; 0xd8
    32d2:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    32d4:	2241      	movs	r2, #65	; 0x41
    32d6:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    32d8:	2101      	movs	r1, #1
    32da:	438b      	bics	r3, r1
    32dc:	3101      	adds	r1, #1
    32de:	438b      	bics	r3, r1
    32e0:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    32e2:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    32e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    32e6:	2b00      	cmp	r3, #0
    32e8:	d003      	beq.n	32f2 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    32ea:	aa01      	add	r2, sp, #4
    32ec:	3102      	adds	r1, #2
    32ee:	0020      	movs	r0, r4
    32f0:	4798      	blx	r3
}
    32f2:	b005      	add	sp, #20
    32f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    32f6:	2000      	movs	r0, #0
    32f8:	5620      	ldrsb	r0, [r4, r0]
    32fa:	4b03      	ldr	r3, [pc, #12]	; (3308 <_http_client_clear_conn+0x84>)
    32fc:	4798      	blx	r3
    32fe:	e7d5      	b.n	32ac <_http_client_clear_conn+0x28>
    3300:	0000b0fb 	.word	0x0000b0fb
    3304:	2000021c 	.word	0x2000021c
    3308:	00008d31 	.word	0x00008d31

0000330c <http_client_socket_resolve_handler>:
{
    330c:	b5f0      	push	{r4, r5, r6, r7, lr}
    330e:	b087      	sub	sp, #28
    3310:	9000      	str	r0, [sp, #0]
    3312:	9101      	str	r1, [sp, #4]
    3314:	4c17      	ldr	r4, [pc, #92]	; (3374 <http_client_socket_resolve_handler+0x68>)
    3316:	0026      	movs	r6, r4
    3318:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    331a:	4f17      	ldr	r7, [pc, #92]	; (3378 <http_client_socket_resolve_handler+0x6c>)
    331c:	e015      	b.n	334a <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    331e:	2302      	movs	r3, #2
    3320:	aa02      	add	r2, sp, #8
    3322:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    3324:	334e      	adds	r3, #78	; 0x4e
    3326:	5aeb      	ldrh	r3, [r5, r3]
    3328:	021a      	lsls	r2, r3, #8
    332a:	0a1b      	lsrs	r3, r3, #8
    332c:	4313      	orrs	r3, r2
    332e:	aa02      	add	r2, sp, #8
    3330:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    3336:	2000      	movs	r0, #0
    3338:	5628      	ldrsb	r0, [r5, r0]
    333a:	2210      	movs	r2, #16
    333c:	a902      	add	r1, sp, #8
    333e:	4b0f      	ldr	r3, [pc, #60]	; (337c <http_client_socket_resolve_handler+0x70>)
    3340:	4798      	blx	r3
				return;
    3342:	e015      	b.n	3370 <http_client_socket_resolve_handler+0x64>
    3344:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    3346:	42b4      	cmp	r4, r6
    3348:	d012      	beq.n	3370 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    334a:	6825      	ldr	r5, [r4, #0]
    334c:	2d00      	cmp	r5, #0
    334e:	d0f9      	beq.n	3344 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    3350:	1c69      	adds	r1, r5, #1
    3352:	9800      	ldr	r0, [sp, #0]
    3354:	47b8      	blx	r7
    3356:	2800      	cmp	r0, #0
    3358:	d1f4      	bne.n	3344 <http_client_socket_resolve_handler+0x38>
    335a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    335c:	2b01      	cmp	r3, #1
    335e:	d1f1      	bne.n	3344 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    3360:	9b01      	ldr	r3, [sp, #4]
    3362:	2b00      	cmp	r3, #0
    3364:	d1db      	bne.n	331e <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    3366:	2176      	movs	r1, #118	; 0x76
    3368:	4249      	negs	r1, r1
    336a:	0028      	movs	r0, r5
    336c:	4b04      	ldr	r3, [pc, #16]	; (3380 <http_client_socket_resolve_handler+0x74>)
    336e:	4798      	blx	r3
}
    3370:	b007      	add	sp, #28
    3372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3374:	2000021c 	.word	0x2000021c
    3378:	0000be41 	.word	0x0000be41
    337c:	00008b75 	.word	0x00008b75
    3380:	00003285 	.word	0x00003285

00003384 <http_client_timer_callback>:
{
    3384:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    3386:	2a00      	cmp	r2, #0
    3388:	d004      	beq.n	3394 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    338a:	213e      	movs	r1, #62	; 0x3e
    338c:	4249      	negs	r1, r1
    338e:	0010      	movs	r0, r2
    3390:	4b01      	ldr	r3, [pc, #4]	; (3398 <http_client_timer_callback+0x14>)
    3392:	4798      	blx	r3
}
    3394:	bd10      	pop	{r4, pc}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	00003285 	.word	0x00003285

0000339c <http_client_close>:
{
    339c:	b510      	push	{r4, lr}
	if (module == NULL) {
    339e:	2800      	cmp	r0, #0
    33a0:	d007      	beq.n	33b2 <http_client_close+0x16>
	if (module->req.state < STATE_SOCK_CONNECTED) {
    33a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    33a4:	2b01      	cmp	r3, #1
    33a6:	d907      	bls.n	33b8 <http_client_close+0x1c>
	_http_client_clear_conn(module, 0);
    33a8:	2100      	movs	r1, #0
    33aa:	4b04      	ldr	r3, [pc, #16]	; (33bc <http_client_close+0x20>)
    33ac:	4798      	blx	r3
	return 0;
    33ae:	2000      	movs	r0, #0
}
    33b0:	bd10      	pop	{r4, pc}
		return -EINVAL;
    33b2:	2016      	movs	r0, #22
    33b4:	4240      	negs	r0, r0
    33b6:	e7fb      	b.n	33b0 <http_client_close+0x14>
		return 0;
    33b8:	2000      	movs	r0, #0
    33ba:	e7f9      	b.n	33b0 <http_client_close+0x14>
    33bc:	00003285 	.word	0x00003285

000033c0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    33c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33c2:	46de      	mov	lr, fp
    33c4:	4657      	mov	r7, sl
    33c6:	b580      	push	{r7, lr}
    33c8:	b095      	sub	sp, #84	; 0x54
    33ca:	af02      	add	r7, sp, #8
    33cc:	0004      	movs	r4, r0
    33ce:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    33d0:	2310      	movs	r3, #16
    33d2:	2208      	movs	r2, #8
    33d4:	18ba      	adds	r2, r7, r2
    33d6:	18d2      	adds	r2, r2, r3
    33d8:	4bb1      	ldr	r3, [pc, #708]	; (36a0 <_http_client_request+0x2e0>)
    33da:	cb23      	ldmia	r3!, {r0, r1, r5}
    33dc:	c223      	stmia	r2!, {r0, r1, r5}
    33de:	681b      	ldr	r3, [r3, #0]
    33e0:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    33e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    33e4:	1dd3      	adds	r3, r2, #7
    33e6:	08db      	lsrs	r3, r3, #3
    33e8:	00db      	lsls	r3, r3, #3
    33ea:	4669      	mov	r1, sp
    33ec:	1acb      	subs	r3, r1, r3
    33ee:	469d      	mov	sp, r3
    33f0:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    33f2:	2c00      	cmp	r4, #0
    33f4:	d100      	bne.n	33f8 <_http_client_request+0x38>
    33f6:	e1f0      	b.n	37da <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    33f8:	2341      	movs	r3, #65	; 0x41
    33fa:	5ce3      	ldrb	r3, [r4, r3]
    33fc:	07db      	lsls	r3, r3, #31
    33fe:	d500      	bpl.n	3402 <_http_client_request+0x42>
    3400:	e1eb      	b.n	37da <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    3402:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    3404:	2b03      	cmp	r3, #3
    3406:	d004      	beq.n	3412 <_http_client_request+0x52>
    3408:	2b04      	cmp	r3, #4
    340a:	d100      	bne.n	340e <_http_client_request+0x4e>
    340c:	e120      	b.n	3650 <_http_client_request+0x290>
    340e:	46dd      	mov	sp, fp
    3410:	e1e4      	b.n	37dc <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    3412:	2300      	movs	r3, #0
    3414:	21cc      	movs	r1, #204	; 0xcc
    3416:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    3418:	3104      	adds	r1, #4
    341a:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    341c:	9400      	str	r4, [sp, #0]
    341e:	4ba1      	ldr	r3, [pc, #644]	; (36a4 <_http_client_request+0x2e4>)
    3420:	0031      	movs	r1, r6
    3422:	202c      	movs	r0, #44	; 0x2c
    3424:	2508      	movs	r5, #8
    3426:	46ac      	mov	ip, r5
    3428:	44bc      	add	ip, r7
    342a:	4460      	add	r0, ip
    342c:	4d9e      	ldr	r5, [pc, #632]	; (36a8 <_http_client_request+0x2e8>)
    342e:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    3430:	23c8      	movs	r3, #200	; 0xc8
    3432:	5ce3      	ldrb	r3, [r4, r3]
    3434:	2b01      	cmp	r3, #1
    3436:	d100      	bne.n	343a <_http_client_request+0x7a>
    3438:	e0a9      	b.n	358e <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    343a:	2b02      	cmp	r3, #2
    343c:	d100      	bne.n	3440 <_http_client_request+0x80>
    343e:	e0af      	b.n	35a0 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    3440:	2b03      	cmp	r3, #3
    3442:	d100      	bne.n	3446 <_http_client_request+0x86>
    3444:	e0b5      	b.n	35b2 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    3446:	2b04      	cmp	r3, #4
    3448:	d100      	bne.n	344c <_http_client_request+0x8c>
    344a:	e0bb      	b.n	35c4 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    344c:	2b05      	cmp	r3, #5
    344e:	d100      	bne.n	3452 <_http_client_request+0x92>
    3450:	e0c1      	b.n	35d6 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    3452:	2b06      	cmp	r3, #6
    3454:	d100      	bne.n	3458 <_http_client_request+0x98>
    3456:	e0c7      	b.n	35e8 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    3458:	0025      	movs	r5, r4
    345a:	3570      	adds	r5, #112	; 0x70
    345c:	0028      	movs	r0, r5
    345e:	4b93      	ldr	r3, [pc, #588]	; (36ac <_http_client_request+0x2ec>)
    3460:	469a      	mov	sl, r3
    3462:	4798      	blx	r3
    3464:	0002      	movs	r2, r0
    3466:	0029      	movs	r1, r5
    3468:	232c      	movs	r3, #44	; 0x2c
    346a:	2008      	movs	r0, #8
    346c:	1838      	adds	r0, r7, r0
    346e:	18c0      	adds	r0, r0, r3
    3470:	4d8f      	ldr	r5, [pc, #572]	; (36b0 <_http_client_request+0x2f0>)
    3472:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    3474:	220b      	movs	r2, #11
    3476:	498f      	ldr	r1, [pc, #572]	; (36b4 <_http_client_request+0x2f4>)
    3478:	232c      	movs	r3, #44	; 0x2c
    347a:	2008      	movs	r0, #8
    347c:	1838      	adds	r0, r7, r0
    347e:	18c0      	adds	r0, r0, r3
    3480:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    3482:	220c      	movs	r2, #12
    3484:	498c      	ldr	r1, [pc, #560]	; (36b8 <_http_client_request+0x2f8>)
    3486:	232c      	movs	r3, #44	; 0x2c
    3488:	2008      	movs	r0, #8
    348a:	1838      	adds	r0, r7, r0
    348c:	18c0      	adds	r0, r0, r3
    348e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    3490:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    3492:	607b      	str	r3, [r7, #4]
    3494:	0018      	movs	r0, r3
    3496:	47d0      	blx	sl
    3498:	0002      	movs	r2, r0
    349a:	6879      	ldr	r1, [r7, #4]
    349c:	232c      	movs	r3, #44	; 0x2c
    349e:	2008      	movs	r0, #8
    34a0:	1838      	adds	r0, r7, r0
    34a2:	18c0      	adds	r0, r0, r3
    34a4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    34a6:	2202      	movs	r2, #2
    34a8:	4984      	ldr	r1, [pc, #528]	; (36bc <_http_client_request+0x2fc>)
    34aa:	232c      	movs	r3, #44	; 0x2c
    34ac:	2008      	movs	r0, #8
    34ae:	1838      	adds	r0, r7, r0
    34b0:	18c0      	adds	r0, r0, r3
    34b2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    34b4:	2206      	movs	r2, #6
    34b6:	4982      	ldr	r1, [pc, #520]	; (36c0 <_http_client_request+0x300>)
    34b8:	232c      	movs	r3, #44	; 0x2c
    34ba:	2008      	movs	r0, #8
    34bc:	1838      	adds	r0, r7, r0
    34be:	18c0      	adds	r0, r0, r3
    34c0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    34c2:	1c63      	adds	r3, r4, #1
    34c4:	607b      	str	r3, [r7, #4]
    34c6:	0018      	movs	r0, r3
    34c8:	47d0      	blx	sl
    34ca:	0002      	movs	r2, r0
    34cc:	6879      	ldr	r1, [r7, #4]
    34ce:	232c      	movs	r3, #44	; 0x2c
    34d0:	2008      	movs	r0, #8
    34d2:	1838      	adds	r0, r7, r0
    34d4:	18c0      	adds	r0, r0, r3
    34d6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    34d8:	2202      	movs	r2, #2
    34da:	4978      	ldr	r1, [pc, #480]	; (36bc <_http_client_request+0x2fc>)
    34dc:	232c      	movs	r3, #44	; 0x2c
    34de:	2008      	movs	r0, #8
    34e0:	1838      	adds	r0, r7, r0
    34e2:	18c0      	adds	r0, r0, r3
    34e4:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    34e6:	2218      	movs	r2, #24
    34e8:	4976      	ldr	r1, [pc, #472]	; (36c4 <_http_client_request+0x304>)
    34ea:	232c      	movs	r3, #44	; 0x2c
    34ec:	2008      	movs	r0, #8
    34ee:	1838      	adds	r0, r7, r0
    34f0:	18c0      	adds	r0, r0, r3
    34f2:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    34f4:	2213      	movs	r2, #19
    34f6:	4974      	ldr	r1, [pc, #464]	; (36c8 <_http_client_request+0x308>)
    34f8:	232c      	movs	r3, #44	; 0x2c
    34fa:	2008      	movs	r0, #8
    34fc:	1838      	adds	r0, r7, r0
    34fe:	18c0      	adds	r0, r0, r3
    3500:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    3502:	2217      	movs	r2, #23
    3504:	4971      	ldr	r1, [pc, #452]	; (36cc <_http_client_request+0x30c>)
    3506:	232c      	movs	r3, #44	; 0x2c
    3508:	2008      	movs	r0, #8
    350a:	1838      	adds	r0, r7, r0
    350c:	18c0      	adds	r0, r0, r3
    350e:	47a8      	blx	r5

		if (entity->read != NULL) {
    3510:	0023      	movs	r3, r4
    3512:	33b0      	adds	r3, #176	; 0xb0
    3514:	68db      	ldr	r3, [r3, #12]
    3516:	2b00      	cmp	r3, #0
    3518:	d07b      	beq.n	3612 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    351a:	23b0      	movs	r3, #176	; 0xb0
    351c:	5ce3      	ldrb	r3, [r4, r3]
    351e:	2b00      	cmp	r3, #0
    3520:	d16b      	bne.n	35fa <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    3522:	0023      	movs	r3, r4
    3524:	33b0      	adds	r3, #176	; 0xb0
    3526:	689b      	ldr	r3, [r3, #8]
    3528:	2b00      	cmp	r3, #0
    352a:	d072      	beq.n	3612 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    352c:	0022      	movs	r2, r4
    352e:	32b0      	adds	r2, #176	; 0xb0
    3530:	6950      	ldr	r0, [r2, #20]
    3532:	4798      	blx	r3
    3534:	23cc      	movs	r3, #204	; 0xcc
    3536:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    3538:	2800      	cmp	r0, #0
    353a:	da00      	bge.n	353e <_http_client_request+0x17e>
    353c:	e0ac      	b.n	3698 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    353e:	0002      	movs	r2, r0
    3540:	4963      	ldr	r1, [pc, #396]	; (36d0 <_http_client_request+0x310>)
    3542:	2320      	movs	r3, #32
    3544:	2008      	movs	r0, #8
    3546:	1838      	adds	r0, r7, r0
    3548:	18c0      	adds	r0, r0, r3
    354a:	4b62      	ldr	r3, [pc, #392]	; (36d4 <_http_client_request+0x314>)
    354c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    354e:	2210      	movs	r2, #16
    3550:	4961      	ldr	r1, [pc, #388]	; (36d8 <_http_client_request+0x318>)
    3552:	232c      	movs	r3, #44	; 0x2c
    3554:	2008      	movs	r0, #8
    3556:	1838      	adds	r0, r7, r0
    3558:	18c0      	adds	r0, r0, r3
    355a:	4d55      	ldr	r5, [pc, #340]	; (36b0 <_http_client_request+0x2f0>)
    355c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    355e:	2320      	movs	r3, #32
    3560:	2208      	movs	r2, #8
    3562:	18ba      	adds	r2, r7, r2
    3564:	18d0      	adds	r0, r2, r3
    3566:	4b51      	ldr	r3, [pc, #324]	; (36ac <_http_client_request+0x2ec>)
    3568:	4798      	blx	r3
    356a:	0002      	movs	r2, r0
    356c:	2320      	movs	r3, #32
    356e:	2108      	movs	r1, #8
    3570:	1879      	adds	r1, r7, r1
    3572:	18c9      	adds	r1, r1, r3
    3574:	330c      	adds	r3, #12
    3576:	2008      	movs	r0, #8
    3578:	1838      	adds	r0, r7, r0
    357a:	18c0      	adds	r0, r0, r3
    357c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    357e:	2202      	movs	r2, #2
    3580:	494e      	ldr	r1, [pc, #312]	; (36bc <_http_client_request+0x2fc>)
    3582:	232c      	movs	r3, #44	; 0x2c
    3584:	2008      	movs	r0, #8
    3586:	1838      	adds	r0, r7, r0
    3588:	18c0      	adds	r0, r0, r3
    358a:	47a8      	blx	r5
    358c:	e041      	b.n	3612 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    358e:	2204      	movs	r2, #4
    3590:	4952      	ldr	r1, [pc, #328]	; (36dc <_http_client_request+0x31c>)
    3592:	332b      	adds	r3, #43	; 0x2b
    3594:	2008      	movs	r0, #8
    3596:	1838      	adds	r0, r7, r0
    3598:	18c0      	adds	r0, r0, r3
    359a:	4b45      	ldr	r3, [pc, #276]	; (36b0 <_http_client_request+0x2f0>)
    359c:	4798      	blx	r3
    359e:	e75b      	b.n	3458 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    35a0:	2205      	movs	r2, #5
    35a2:	494f      	ldr	r1, [pc, #316]	; (36e0 <_http_client_request+0x320>)
    35a4:	332a      	adds	r3, #42	; 0x2a
    35a6:	2008      	movs	r0, #8
    35a8:	1838      	adds	r0, r7, r0
    35aa:	18c0      	adds	r0, r0, r3
    35ac:	4b40      	ldr	r3, [pc, #256]	; (36b0 <_http_client_request+0x2f0>)
    35ae:	4798      	blx	r3
    35b0:	e752      	b.n	3458 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    35b2:	2207      	movs	r2, #7
    35b4:	494b      	ldr	r1, [pc, #300]	; (36e4 <_http_client_request+0x324>)
    35b6:	3329      	adds	r3, #41	; 0x29
    35b8:	2008      	movs	r0, #8
    35ba:	1838      	adds	r0, r7, r0
    35bc:	18c0      	adds	r0, r0, r3
    35be:	4b3c      	ldr	r3, [pc, #240]	; (36b0 <_http_client_request+0x2f0>)
    35c0:	4798      	blx	r3
    35c2:	e749      	b.n	3458 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    35c4:	2204      	movs	r2, #4
    35c6:	4948      	ldr	r1, [pc, #288]	; (36e8 <_http_client_request+0x328>)
    35c8:	3328      	adds	r3, #40	; 0x28
    35ca:	2008      	movs	r0, #8
    35cc:	1838      	adds	r0, r7, r0
    35ce:	18c0      	adds	r0, r0, r3
    35d0:	4b37      	ldr	r3, [pc, #220]	; (36b0 <_http_client_request+0x2f0>)
    35d2:	4798      	blx	r3
    35d4:	e740      	b.n	3458 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    35d6:	2208      	movs	r2, #8
    35d8:	4944      	ldr	r1, [pc, #272]	; (36ec <_http_client_request+0x32c>)
    35da:	3327      	adds	r3, #39	; 0x27
    35dc:	2008      	movs	r0, #8
    35de:	1838      	adds	r0, r7, r0
    35e0:	18c0      	adds	r0, r0, r3
    35e2:	4b33      	ldr	r3, [pc, #204]	; (36b0 <_http_client_request+0x2f0>)
    35e4:	4798      	blx	r3
    35e6:	e737      	b.n	3458 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    35e8:	2205      	movs	r2, #5
    35ea:	4941      	ldr	r1, [pc, #260]	; (36f0 <_http_client_request+0x330>)
    35ec:	3326      	adds	r3, #38	; 0x26
    35ee:	2008      	movs	r0, #8
    35f0:	1838      	adds	r0, r7, r0
    35f2:	18c0      	adds	r0, r0, r3
    35f4:	4b2e      	ldr	r3, [pc, #184]	; (36b0 <_http_client_request+0x2f0>)
    35f6:	4798      	blx	r3
    35f8:	e72e      	b.n	3458 <_http_client_request+0x98>
				module->req.content_length = -1;
    35fa:	2201      	movs	r2, #1
    35fc:	4252      	negs	r2, r2
    35fe:	23cc      	movs	r3, #204	; 0xcc
    3600:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    3602:	321d      	adds	r2, #29
    3604:	493b      	ldr	r1, [pc, #236]	; (36f4 <_http_client_request+0x334>)
    3606:	3ba0      	subs	r3, #160	; 0xa0
    3608:	2008      	movs	r0, #8
    360a:	1838      	adds	r0, r7, r0
    360c:	18c0      	adds	r0, r0, r3
    360e:	4b28      	ldr	r3, [pc, #160]	; (36b0 <_http_client_request+0x2f0>)
    3610:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    3612:	23d4      	movs	r3, #212	; 0xd4
    3614:	58e5      	ldr	r5, [r4, r3]
    3616:	2d00      	cmp	r5, #0
    3618:	d00a      	beq.n	3630 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    361a:	0028      	movs	r0, r5
    361c:	4b23      	ldr	r3, [pc, #140]	; (36ac <_http_client_request+0x2ec>)
    361e:	4798      	blx	r3
    3620:	0002      	movs	r2, r0
    3622:	0029      	movs	r1, r5
    3624:	232c      	movs	r3, #44	; 0x2c
    3626:	2008      	movs	r0, #8
    3628:	1838      	adds	r0, r7, r0
    362a:	18c0      	adds	r0, r0, r3
    362c:	4b20      	ldr	r3, [pc, #128]	; (36b0 <_http_client_request+0x2f0>)
    362e:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    3630:	2202      	movs	r2, #2
    3632:	4922      	ldr	r1, [pc, #136]	; (36bc <_http_client_request+0x2fc>)
    3634:	232c      	movs	r3, #44	; 0x2c
    3636:	2008      	movs	r0, #8
    3638:	1838      	adds	r0, r7, r0
    363a:	18c0      	adds	r0, r0, r3
    363c:	4b1c      	ldr	r3, [pc, #112]	; (36b0 <_http_client_request+0x2f0>)
    363e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    3640:	232c      	movs	r3, #44	; 0x2c
    3642:	2208      	movs	r2, #8
    3644:	18ba      	adds	r2, r7, r2
    3646:	18d0      	adds	r0, r2, r3
    3648:	4b2b      	ldr	r3, [pc, #172]	; (36f8 <_http_client_request+0x338>)
    364a:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    364c:	2304      	movs	r3, #4
    364e:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    3650:	23cc      	movs	r3, #204	; 0xcc
    3652:	58e2      	ldr	r2, [r4, r3]
    3654:	2a00      	cmp	r2, #0
    3656:	db51      	blt.n	36fc <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    3658:	dc00      	bgt.n	365c <_http_client_request+0x29c>
    365a:	e0f0      	b.n	383e <_http_client_request+0x47e>
    365c:	0023      	movs	r3, r4
    365e:	33b0      	adds	r3, #176	; 0xb0
    3660:	68dd      	ldr	r5, [r3, #12]
    3662:	2d00      	cmp	r5, #0
    3664:	d100      	bne.n	3668 <_http_client_request+0x2a8>
    3666:	e0ea      	b.n	383e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    3668:	23d0      	movs	r3, #208	; 0xd0
    366a:	58e3      	ldr	r3, [r4, r3]
    366c:	429a      	cmp	r2, r3
    366e:	dd00      	ble.n	3672 <_http_client_request+0x2b2>
    3670:	e0ba      	b.n	37e8 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    3672:	23c0      	movs	r3, #192	; 0xc0
    3674:	58e3      	ldr	r3, [r4, r3]
    3676:	2b00      	cmp	r3, #0
    3678:	d002      	beq.n	3680 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    367a:	22c4      	movs	r2, #196	; 0xc4
    367c:	58a0      	ldr	r0, [r4, r2]
    367e:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    3680:	2302      	movs	r3, #2
    3682:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    3684:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3686:	2b00      	cmp	r3, #0
    3688:	d100      	bne.n	368c <_http_client_request+0x2cc>
    368a:	e6c0      	b.n	340e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    368c:	220c      	movs	r2, #12
    368e:	18ba      	adds	r2, r7, r2
    3690:	2101      	movs	r1, #1
    3692:	0020      	movs	r0, r4
    3694:	4798      	blx	r3
    3696:	e6ba      	b.n	340e <_http_client_request+0x4e>
					module->req.content_length = 0;
    3698:	2200      	movs	r2, #0
    369a:	50e2      	str	r2, [r4, r3]
    369c:	e7b9      	b.n	3612 <_http_client_request+0x252>
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	00011660 	.word	0x00011660
    36a4:	000030d9 	.word	0x000030d9
    36a8:	0000411d 	.word	0x0000411d
    36ac:	0000be9f 	.word	0x0000be9f
    36b0:	00004189 	.word	0x00004189
    36b4:	000116d4 	.word	0x000116d4
    36b8:	000116e0 	.word	0x000116e0
    36bc:	0001287c 	.word	0x0001287c
    36c0:	000116f0 	.word	0x000116f0
    36c4:	000116f8 	.word	0x000116f8
    36c8:	00011714 	.word	0x00011714
    36cc:	00011728 	.word	0x00011728
    36d0:	00011760 	.word	0x00011760
    36d4:	0000bdfd 	.word	0x0000bdfd
    36d8:	00011764 	.word	0x00011764
    36dc:	000116a0 	.word	0x000116a0
    36e0:	000116a8 	.word	0x000116a8
    36e4:	000116b0 	.word	0x000116b0
    36e8:	000116b8 	.word	0x000116b8
    36ec:	000116c0 	.word	0x000116c0
    36f0:	000116cc 	.word	0x000116cc
    36f4:	00011740 	.word	0x00011740
    36f8:	0000412d 	.word	0x0000412d
		if (module->req.content_length < 0 && entity->read) {
    36fc:	0023      	movs	r3, r4
    36fe:	33b0      	adds	r3, #176	; 0xb0
    3700:	68dd      	ldr	r5, [r3, #12]
    3702:	2d00      	cmp	r5, #0
    3704:	d100      	bne.n	3708 <_http_client_request+0x348>
    3706:	e09a      	b.n	383e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    3708:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    370a:	58e3      	ldr	r3, [r4, r3]
    370c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    370e:	3a07      	subs	r2, #7
    3710:	1d71      	adds	r1, r6, #5
    3712:	0020      	movs	r0, r4
    3714:	30b0      	adds	r0, #176	; 0xb0
    3716:	6940      	ldr	r0, [r0, #20]
    3718:	47a8      	blx	r5
    371a:	0005      	movs	r5, r0
    371c:	43c3      	mvns	r3, r0
    371e:	17db      	asrs	r3, r3, #31
    3720:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    3722:	220a      	movs	r2, #10
    3724:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    3726:	210d      	movs	r1, #13
    3728:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    372a:	1973      	adds	r3, r6, r5
    372c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    372e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    3730:	230f      	movs	r3, #15
    3732:	402b      	ands	r3, r5
    3734:	3206      	adds	r2, #6
    3736:	3905      	subs	r1, #5
    3738:	468c      	mov	ip, r1
    373a:	44bc      	add	ip, r7
    373c:	4462      	add	r2, ip
    373e:	5cd3      	ldrb	r3, [r2, r3]
    3740:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    3742:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    3744:	2d0f      	cmp	r5, #15
    3746:	dd0d      	ble.n	3764 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    3748:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    374a:	17eb      	asrs	r3, r5, #31
    374c:	220f      	movs	r2, #15
    374e:	4013      	ands	r3, r2
    3750:	195b      	adds	r3, r3, r5
    3752:	111b      	asrs	r3, r3, #4
    3754:	4013      	ands	r3, r2
    3756:	3201      	adds	r2, #1
    3758:	2008      	movs	r0, #8
    375a:	4684      	mov	ip, r0
    375c:	44bc      	add	ip, r7
    375e:	4462      	add	r2, ip
    3760:	5cd3      	ldrb	r3, [r2, r3]
    3762:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    3764:	2dff      	cmp	r5, #255	; 0xff
    3766:	dd0d      	ble.n	3784 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    3768:	17ea      	asrs	r2, r5, #31
    376a:	23ff      	movs	r3, #255	; 0xff
    376c:	4013      	ands	r3, r2
    376e:	195b      	adds	r3, r3, r5
    3770:	051b      	lsls	r3, r3, #20
    3772:	0f1b      	lsrs	r3, r3, #28
    3774:	2210      	movs	r2, #16
    3776:	2108      	movs	r1, #8
    3778:	468c      	mov	ip, r1
    377a:	44bc      	add	ip, r7
    377c:	4462      	add	r2, ip
    377e:	5cd3      	ldrb	r3, [r2, r3]
    3780:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    3782:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    3784:	1cca      	adds	r2, r1, #3
    3786:	1b92      	subs	r2, r2, r6
    3788:	1d2b      	adds	r3, r5, #4
    378a:	18d2      	adds	r2, r2, r3
    378c:	b292      	uxth	r2, r2
    378e:	2000      	movs	r0, #0
    3790:	5620      	ldrsb	r0, [r4, r0]
    3792:	2300      	movs	r3, #0
    3794:	4e30      	ldr	r6, [pc, #192]	; (3858 <_http_client_request+0x498>)
    3796:	47b0      	blx	r6
    3798:	2800      	cmp	r0, #0
    379a:	db19      	blt.n	37d0 <_http_client_request+0x410>
			module->req.sent_length += size;
    379c:	22d0      	movs	r2, #208	; 0xd0
    379e:	58a3      	ldr	r3, [r4, r2]
    37a0:	195b      	adds	r3, r3, r5
    37a2:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    37a4:	2d00      	cmp	r5, #0
    37a6:	d000      	beq.n	37aa <_http_client_request+0x3ea>
    37a8:	e631      	b.n	340e <_http_client_request+0x4e>
				if (module->req.entity.close) {
    37aa:	23c0      	movs	r3, #192	; 0xc0
    37ac:	58e3      	ldr	r3, [r4, r3]
    37ae:	2b00      	cmp	r3, #0
    37b0:	d002      	beq.n	37b8 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    37b2:	3a0c      	subs	r2, #12
    37b4:	58a0      	ldr	r0, [r4, r2]
    37b6:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    37b8:	2302      	movs	r3, #2
    37ba:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    37bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    37be:	2b00      	cmp	r3, #0
    37c0:	d100      	bne.n	37c4 <_http_client_request+0x404>
    37c2:	e624      	b.n	340e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    37c4:	220c      	movs	r2, #12
    37c6:	18ba      	adds	r2, r7, r2
    37c8:	2101      	movs	r1, #1
    37ca:	0020      	movs	r0, r4
    37cc:	4798      	blx	r3
    37ce:	e61e      	b.n	340e <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    37d0:	2105      	movs	r1, #5
    37d2:	4249      	negs	r1, r1
    37d4:	0020      	movs	r0, r4
    37d6:	4b21      	ldr	r3, [pc, #132]	; (385c <_http_client_request+0x49c>)
    37d8:	4798      	blx	r3
    37da:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    37dc:	46bd      	mov	sp, r7
    37de:	b013      	add	sp, #76	; 0x4c
    37e0:	bc0c      	pop	{r2, r3}
    37e2:	4692      	mov	sl, r2
    37e4:	469b      	mov	fp, r3
    37e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    37e8:	0022      	movs	r2, r4
    37ea:	32b0      	adds	r2, #176	; 0xb0
    37ec:	6950      	ldr	r0, [r2, #20]
    37ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
    37f0:	0031      	movs	r1, r6
    37f2:	47a8      	blx	r5
			if (size < 0) {
    37f4:	2800      	cmp	r0, #0
    37f6:	db16      	blt.n	3826 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    37f8:	23cc      	movs	r3, #204	; 0xcc
    37fa:	58e5      	ldr	r5, [r4, r3]
    37fc:	3304      	adds	r3, #4
    37fe:	58e3      	ldr	r3, [r4, r3]
    3800:	1aed      	subs	r5, r5, r3
    3802:	4285      	cmp	r5, r0
    3804:	dd00      	ble.n	3808 <_http_client_request+0x448>
    3806:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    3808:	b2aa      	uxth	r2, r5
    380a:	2000      	movs	r0, #0
    380c:	5620      	ldrsb	r0, [r4, r0]
    380e:	2300      	movs	r3, #0
    3810:	0031      	movs	r1, r6
    3812:	4e11      	ldr	r6, [pc, #68]	; (3858 <_http_client_request+0x498>)
    3814:	47b0      	blx	r6
    3816:	2800      	cmp	r0, #0
    3818:	db0b      	blt.n	3832 <_http_client_request+0x472>
				module->req.sent_length += size;
    381a:	23d0      	movs	r3, #208	; 0xd0
    381c:	58e2      	ldr	r2, [r4, r3]
    381e:	4694      	mov	ip, r2
    3820:	4465      	add	r5, ip
    3822:	50e5      	str	r5, [r4, r3]
    3824:	e5f3      	b.n	340e <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    3826:	2105      	movs	r1, #5
    3828:	4249      	negs	r1, r1
    382a:	0020      	movs	r0, r4
    382c:	4b0b      	ldr	r3, [pc, #44]	; (385c <_http_client_request+0x49c>)
    382e:	4798      	blx	r3
    3830:	e5ed      	b.n	340e <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    3832:	2105      	movs	r1, #5
    3834:	4249      	negs	r1, r1
    3836:	0020      	movs	r0, r4
    3838:	4b08      	ldr	r3, [pc, #32]	; (385c <_http_client_request+0x49c>)
    383a:	4798      	blx	r3
					return;
    383c:	e7cd      	b.n	37da <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    383e:	2302      	movs	r3, #2
    3840:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    3842:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3844:	2b00      	cmp	r3, #0
    3846:	d100      	bne.n	384a <_http_client_request+0x48a>
    3848:	e5e1      	b.n	340e <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    384a:	220c      	movs	r2, #12
    384c:	18ba      	adds	r2, r7, r2
    384e:	2101      	movs	r1, #1
    3850:	0020      	movs	r0, r4
    3852:	4798      	blx	r3
    3854:	e5db      	b.n	340e <_http_client_request+0x4e>
    3856:	46c0      	nop			; (mov r8, r8)
    3858:	00008c05 	.word	0x00008c05
    385c:	00003285 	.word	0x00003285

00003860 <http_client_send_request>:
{
    3860:	b5f0      	push	{r4, r5, r6, r7, lr}
    3862:	46d6      	mov	lr, sl
    3864:	b500      	push	{lr}
    3866:	b088      	sub	sp, #32
    3868:	0004      	movs	r4, r0
    386a:	000f      	movs	r7, r1
    386c:	4692      	mov	sl, r2
    386e:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    3870:	2800      	cmp	r0, #0
    3872:	d100      	bne.n	3876 <http_client_send_request+0x16>
    3874:	e0d3      	b.n	3a1e <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    3876:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    3878:	2b02      	cmp	r3, #2
    387a:	d900      	bls.n	387e <http_client_send_request+0x1e>
    387c:	e0d3      	b.n	3a26 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    387e:	2207      	movs	r2, #7
    3880:	4981      	ldr	r1, [pc, #516]	; (3a88 <http_client_send_request+0x228>)
    3882:	0038      	movs	r0, r7
    3884:	4b81      	ldr	r3, [pc, #516]	; (3a8c <http_client_send_request+0x22c>)
    3886:	4798      	blx	r3
		i = 7;
    3888:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    388a:	2800      	cmp	r0, #0
    388c:	d007      	beq.n	389e <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    388e:	2208      	movs	r2, #8
    3890:	497f      	ldr	r1, [pc, #508]	; (3a90 <http_client_send_request+0x230>)
    3892:	0038      	movs	r0, r7
    3894:	4b7d      	ldr	r3, [pc, #500]	; (3a8c <http_client_send_request+0x22c>)
    3896:	4798      	blx	r3
		i = 8;
    3898:	4246      	negs	r6, r0
    389a:	4146      	adcs	r6, r0
    389c:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    389e:	1c63      	adds	r3, r4, #1
    38a0:	19bd      	adds	r5, r7, r6
    38a2:	9302      	str	r3, [sp, #8]
    38a4:	0018      	movs	r0, r3
    38a6:	4b7b      	ldr	r3, [pc, #492]	; (3a94 <http_client_send_request+0x234>)
    38a8:	4798      	blx	r3
    38aa:	0002      	movs	r2, r0
    38ac:	0029      	movs	r1, r5
    38ae:	9802      	ldr	r0, [sp, #8]
    38b0:	4b76      	ldr	r3, [pc, #472]	; (3a8c <http_client_send_request+0x22c>)
    38b2:	4798      	blx	r3
    38b4:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    38b6:	782b      	ldrb	r3, [r5, #0]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d052      	beq.n	3962 <http_client_send_request+0x102>
    38bc:	2b2f      	cmp	r3, #47	; 0x2f
    38be:	d052      	beq.n	3966 <http_client_send_request+0x106>
    38c0:	1c71      	adds	r1, r6, #1
    38c2:	1879      	adds	r1, r7, r1
    38c4:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    38c6:	3201      	adds	r2, #1
    38c8:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    38ca:	000d      	movs	r5, r1
    38cc:	780b      	ldrb	r3, [r1, #0]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d002      	beq.n	38d8 <http_client_send_request+0x78>
    38d2:	3101      	adds	r1, #1
    38d4:	2b2f      	cmp	r3, #47	; 0x2f
    38d6:	d1f6      	bne.n	38c6 <http_client_send_request+0x66>
	module->host[j] = '\0';
    38d8:	18a2      	adds	r2, r4, r2
    38da:	2300      	movs	r3, #0
    38dc:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    38de:	7863      	ldrb	r3, [r4, #1]
    38e0:	2b00      	cmp	r3, #0
    38e2:	d100      	bne.n	38e6 <http_client_send_request+0x86>
    38e4:	e0a3      	b.n	3a2e <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    38e6:	0028      	movs	r0, r5
    38e8:	4b6a      	ldr	r3, [pc, #424]	; (3a94 <http_client_send_request+0x234>)
    38ea:	4798      	blx	r3
    38ec:	283f      	cmp	r0, #63	; 0x3f
    38ee:	d900      	bls.n	38f2 <http_client_send_request+0x92>
    38f0:	e0a1      	b.n	3a36 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    38f2:	23d4      	movs	r3, #212	; 0xd4
    38f4:	58e0      	ldr	r0, [r4, r3]
    38f6:	2800      	cmp	r0, #0
    38f8:	d001      	beq.n	38fe <http_client_send_request+0x9e>
		free(module->req.ext_header);
    38fa:	4b67      	ldr	r3, [pc, #412]	; (3a98 <http_client_send_request+0x238>)
    38fc:	4798      	blx	r3
	if (ext_header != NULL) {
    38fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3900:	2b00      	cmp	r3, #0
    3902:	d032      	beq.n	396a <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    3904:	0018      	movs	r0, r3
    3906:	4b65      	ldr	r3, [pc, #404]	; (3a9c <http_client_send_request+0x23c>)
    3908:	4798      	blx	r3
    390a:	23d4      	movs	r3, #212	; 0xd4
    390c:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    390e:	2800      	cmp	r0, #0
    3910:	d100      	bne.n	3914 <http_client_send_request+0xb4>
    3912:	e094      	b.n	3a3e <http_client_send_request+0x1de>
	module->sending = 0;
    3914:	2241      	movs	r2, #65	; 0x41
    3916:	5ca3      	ldrb	r3, [r4, r2]
    3918:	2101      	movs	r1, #1
    391a:	438b      	bics	r3, r1
    391c:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    391e:	2300      	movs	r3, #0
    3920:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    3922:	782b      	ldrb	r3, [r5, #0]
    3924:	2b2f      	cmp	r3, #47	; 0x2f
    3926:	d024      	beq.n	3972 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    3928:	222f      	movs	r2, #47	; 0x2f
    392a:	2370      	movs	r3, #112	; 0x70
    392c:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    392e:	782b      	ldrb	r3, [r5, #0]
    3930:	2b00      	cmp	r3, #0
    3932:	d124      	bne.n	397e <http_client_send_request+0x11e>
	if (entity != NULL) {
    3934:	9b03      	ldr	r3, [sp, #12]
    3936:	2b00      	cmp	r3, #0
    3938:	d027      	beq.n	398a <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    393a:	0020      	movs	r0, r4
    393c:	30b0      	adds	r0, #176	; 0xb0
    393e:	2218      	movs	r2, #24
    3940:	0019      	movs	r1, r3
    3942:	4b57      	ldr	r3, [pc, #348]	; (3aa0 <http_client_send_request+0x240>)
    3944:	4798      	blx	r3
	module->req.method = method;
    3946:	23c8      	movs	r3, #200	; 0xc8
    3948:	4652      	mov	r2, sl
    394a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    394c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    394e:	2b01      	cmp	r3, #1
    3950:	d022      	beq.n	3998 <http_client_send_request+0x138>
    3952:	2b00      	cmp	r3, #0
    3954:	d027      	beq.n	39a6 <http_client_send_request+0x146>
    3956:	2b02      	cmp	r3, #2
    3958:	d03a      	beq.n	39d0 <http_client_send_request+0x170>
		return -EAGAIN;
    395a:	230b      	movs	r3, #11
    395c:	425b      	negs	r3, r3
    395e:	9301      	str	r3, [sp, #4]
    3960:	e08d      	b.n	3a7e <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    3962:	2200      	movs	r2, #0
    3964:	e7b8      	b.n	38d8 <http_client_send_request+0x78>
    3966:	2200      	movs	r2, #0
    3968:	e7b6      	b.n	38d8 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    396a:	2200      	movs	r2, #0
    396c:	23d4      	movs	r3, #212	; 0xd4
    396e:	50e2      	str	r2, [r4, r3]
    3970:	e7d0      	b.n	3914 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    3972:	0020      	movs	r0, r4
    3974:	3070      	adds	r0, #112	; 0x70
    3976:	0029      	movs	r1, r5
    3978:	4b4a      	ldr	r3, [pc, #296]	; (3aa4 <http_client_send_request+0x244>)
    397a:	4798      	blx	r3
    397c:	e7da      	b.n	3934 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    397e:	0029      	movs	r1, r5
    3980:	0020      	movs	r0, r4
    3982:	3071      	adds	r0, #113	; 0x71
    3984:	4b47      	ldr	r3, [pc, #284]	; (3aa4 <http_client_send_request+0x244>)
    3986:	4798      	blx	r3
    3988:	e7d4      	b.n	3934 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    398a:	0020      	movs	r0, r4
    398c:	30b0      	adds	r0, #176	; 0xb0
    398e:	2218      	movs	r2, #24
    3990:	2100      	movs	r1, #0
    3992:	4b45      	ldr	r3, [pc, #276]	; (3aa8 <http_client_send_request+0x248>)
    3994:	4798      	blx	r3
    3996:	e7d6      	b.n	3946 <http_client_send_request+0xe6>
		if (!reconnect) {
    3998:	9b01      	ldr	r3, [sp, #4]
    399a:	2b00      	cmp	r3, #0
    399c:	d06f      	beq.n	3a7e <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    399e:	2100      	movs	r1, #0
    39a0:	0020      	movs	r0, r4
    39a2:	4b42      	ldr	r3, [pc, #264]	; (3aac <http_client_send_request+0x24c>)
    39a4:	4798      	blx	r3
		if (module->config.tls) {
    39a6:	2352      	movs	r3, #82	; 0x52
    39a8:	5ce2      	ldrb	r2, [r4, r3]
    39aa:	1e53      	subs	r3, r2, #1
    39ac:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    39ae:	b2d2      	uxtb	r2, r2
    39b0:	2101      	movs	r1, #1
    39b2:	2002      	movs	r0, #2
    39b4:	4b3e      	ldr	r3, [pc, #248]	; (3ab0 <http_client_send_request+0x250>)
    39b6:	4798      	blx	r3
    39b8:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    39ba:	2800      	cmp	r0, #0
    39bc:	db43      	blt.n	3a46 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    39be:	0080      	lsls	r0, r0, #2
    39c0:	4b3c      	ldr	r3, [pc, #240]	; (3ab4 <http_client_send_request+0x254>)
    39c2:	50c4      	str	r4, [r0, r3]
    39c4:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    39c6:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    39c8:	2620      	movs	r6, #32
			isv6 = 1;
    39ca:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    39cc:	2730      	movs	r7, #48	; 0x30
    39ce:	e00c      	b.n	39ea <http_client_send_request+0x18a>
		if (!reconnect) {
    39d0:	9b01      	ldr	r3, [sp, #4]
    39d2:	2b00      	cmp	r3, #0
    39d4:	d1e3      	bne.n	399e <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    39d6:	3303      	adds	r3, #3
    39d8:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    39da:	0020      	movs	r0, r4
    39dc:	4b36      	ldr	r3, [pc, #216]	; (3ab8 <http_client_send_request+0x258>)
    39de:	4798      	blx	r3
			break;
    39e0:	e04d      	b.n	3a7e <http_client_send_request+0x21e>
			if (isv6) {
    39e2:	2900      	cmp	r1, #0
    39e4:	d001      	beq.n	39ea <http_client_send_request+0x18a>
    39e6:	e012      	b.n	3a0e <http_client_send_request+0x1ae>
			isv6 = 1;
    39e8:	0001      	movs	r1, r0
	while (*host != '\0') {
    39ea:	782a      	ldrb	r2, [r5, #0]
    39ec:	2a00      	cmp	r2, #0
    39ee:	d02e      	beq.n	3a4e <http_client_send_request+0x1ee>
		ch = *host++;
    39f0:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    39f2:	0013      	movs	r3, r2
    39f4:	43b3      	bics	r3, r6
    39f6:	3b41      	subs	r3, #65	; 0x41
    39f8:	2b05      	cmp	r3, #5
    39fa:	d9f5      	bls.n	39e8 <http_client_send_request+0x188>
    39fc:	2a3a      	cmp	r2, #58	; 0x3a
    39fe:	d00a      	beq.n	3a16 <http_client_send_request+0x1b6>
    3a00:	2a2f      	cmp	r2, #47	; 0x2f
    3a02:	d00a      	beq.n	3a1a <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    3a04:	2a2e      	cmp	r2, #46	; 0x2e
    3a06:	d0ec      	beq.n	39e2 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    3a08:	403a      	ands	r2, r7
    3a0a:	2a30      	cmp	r2, #48	; 0x30
    3a0c:	d0ed      	beq.n	39ea <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    3a0e:	9802      	ldr	r0, [sp, #8]
    3a10:	4b2a      	ldr	r3, [pc, #168]	; (3abc <http_client_send_request+0x25c>)
    3a12:	4798      	blx	r3
    3a14:	e02f      	b.n	3a76 <http_client_send_request+0x216>
			isv6 = 1;
    3a16:	0001      	movs	r1, r0
    3a18:	e7e7      	b.n	39ea <http_client_send_request+0x18a>
    3a1a:	0001      	movs	r1, r0
    3a1c:	e7e5      	b.n	39ea <http_client_send_request+0x18a>
		return -EINVAL;
    3a1e:	2316      	movs	r3, #22
    3a20:	425b      	negs	r3, r3
    3a22:	9301      	str	r3, [sp, #4]
    3a24:	e02b      	b.n	3a7e <http_client_send_request+0x21e>
		return -EBUSY;
    3a26:	2310      	movs	r3, #16
    3a28:	425b      	negs	r3, r3
    3a2a:	9301      	str	r3, [sp, #4]
    3a2c:	e027      	b.n	3a7e <http_client_send_request+0x21e>
		return -EINVAL;
    3a2e:	2316      	movs	r3, #22
    3a30:	425b      	negs	r3, r3
    3a32:	9301      	str	r3, [sp, #4]
    3a34:	e023      	b.n	3a7e <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    3a36:	235b      	movs	r3, #91	; 0x5b
    3a38:	425b      	negs	r3, r3
    3a3a:	9301      	str	r3, [sp, #4]
    3a3c:	e01f      	b.n	3a7e <http_client_send_request+0x21e>
			return -ENOMEM;
    3a3e:	230c      	movs	r3, #12
    3a40:	425b      	negs	r3, r3
    3a42:	9301      	str	r3, [sp, #4]
    3a44:	e01b      	b.n	3a7e <http_client_send_request+0x21e>
			return -ENOSPC;
    3a46:	231c      	movs	r3, #28
    3a48:	425b      	negs	r3, r3
    3a4a:	9301      	str	r3, [sp, #4]
    3a4c:	e017      	b.n	3a7e <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    3a4e:	2302      	movs	r3, #2
    3a50:	aa04      	add	r2, sp, #16
    3a52:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    3a54:	334e      	adds	r3, #78	; 0x4e
    3a56:	5ae3      	ldrh	r3, [r4, r3]
    3a58:	021a      	lsls	r2, r3, #8
    3a5a:	0a1b      	lsrs	r3, r3, #8
    3a5c:	4313      	orrs	r3, r2
    3a5e:	aa04      	add	r2, sp, #16
    3a60:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    3a62:	9802      	ldr	r0, [sp, #8]
    3a64:	4b16      	ldr	r3, [pc, #88]	; (3ac0 <http_client_send_request+0x260>)
    3a66:	4798      	blx	r3
    3a68:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    3a6a:	2000      	movs	r0, #0
    3a6c:	5620      	ldrsb	r0, [r4, r0]
    3a6e:	2210      	movs	r2, #16
    3a70:	a904      	add	r1, sp, #16
    3a72:	4b14      	ldr	r3, [pc, #80]	; (3ac4 <http_client_send_request+0x264>)
    3a74:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    3a76:	2301      	movs	r3, #1
    3a78:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    3a7a:	2300      	movs	r3, #0
    3a7c:	9301      	str	r3, [sp, #4]
}
    3a7e:	9801      	ldr	r0, [sp, #4]
    3a80:	b008      	add	sp, #32
    3a82:	bc04      	pop	{r2}
    3a84:	4692      	mov	sl, r2
    3a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a88:	00011784 	.word	0x00011784
    3a8c:	0000bead 	.word	0x0000bead
    3a90:	0001178c 	.word	0x0001178c
    3a94:	0000be9f 	.word	0x0000be9f
    3a98:	0000b0b1 	.word	0x0000b0b1
    3a9c:	0000be65 	.word	0x0000be65
    3aa0:	0000b0c5 	.word	0x0000b0c5
    3aa4:	0000be55 	.word	0x0000be55
    3aa8:	0000b0fb 	.word	0x0000b0fb
    3aac:	00003285 	.word	0x00003285
    3ab0:	000089f1 	.word	0x000089f1
    3ab4:	2000021c 	.word	0x2000021c
    3ab8:	000033c1 	.word	0x000033c1
    3abc:	00008e39 	.word	0x00008e39
    3ac0:	00008dcd 	.word	0x00008dcd
    3ac4:	00008b75 	.word	0x00008b75

00003ac8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    3ac8:	b510      	push	{r4, lr}
	if (module == NULL) {
    3aca:	2800      	cmp	r0, #0
    3acc:	d00d      	beq.n	3aea <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    3ace:	6c41      	ldr	r1, [r0, #68]	; 0x44
    3ad0:	6e02      	ldr	r2, [r0, #96]	; 0x60
    3ad2:	4291      	cmp	r1, r2
    3ad4:	d20a      	bcs.n	3aec <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    3ad6:	1a52      	subs	r2, r2, r1
    3ad8:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    3ada:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    3adc:	469c      	mov	ip, r3
    3ade:	4461      	add	r1, ip
	recv(module->sock,
    3ae0:	7800      	ldrb	r0, [r0, #0]
    3ae2:	b240      	sxtb	r0, r0
    3ae4:	2300      	movs	r3, #0
    3ae6:	4c04      	ldr	r4, [pc, #16]	; (3af8 <_http_client_recv_packet+0x30>)
    3ae8:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    3aea:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    3aec:	218b      	movs	r1, #139	; 0x8b
    3aee:	4249      	negs	r1, r1
    3af0:	4b02      	ldr	r3, [pc, #8]	; (3afc <_http_client_recv_packet+0x34>)
    3af2:	4798      	blx	r3
		return;
    3af4:	e7f9      	b.n	3aea <_http_client_recv_packet+0x22>
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	00008c9d 	.word	0x00008c9d
    3afc:	00003285 	.word	0x00003285

00003b00 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    3b00:	b570      	push	{r4, r5, r6, lr}
    3b02:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    3b04:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    3b06:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3b08:	1a5c      	subs	r4, r3, r1
    3b0a:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    3b0c:	2c00      	cmp	r4, #0
    3b0e:	dc02      	bgt.n	3b16 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    3b10:	2300      	movs	r3, #0
    3b12:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    3b14:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    3b16:	0022      	movs	r2, r4
    3b18:	4b01      	ldr	r3, [pc, #4]	; (3b20 <_http_client_move_buffer+0x20>)
    3b1a:	4798      	blx	r3
		module->recved_size = remain;
    3b1c:	646c      	str	r4, [r5, #68]	; 0x44
    3b1e:	e7f9      	b.n	3b14 <_http_client_move_buffer+0x14>
    3b20:	0000b0d7 	.word	0x0000b0d7

00003b24 <_http_client_handle_header>:
{
    3b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b26:	46ce      	mov	lr, r9
    3b28:	b500      	push	{lr}
    3b2a:	b084      	sub	sp, #16
    3b2c:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    3b2e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    3b30:	4b62      	ldr	r3, [pc, #392]	; (3cbc <_http_client_handle_header+0x198>)
    3b32:	4699      	mov	r9, r3
    3b34:	e049      	b.n	3bca <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    3b36:	0021      	movs	r1, r4
    3b38:	0038      	movs	r0, r7
    3b3a:	4b61      	ldr	r3, [pc, #388]	; (3cc0 <_http_client_handle_header+0x19c>)
    3b3c:	4798      	blx	r3
			return 0;
    3b3e:	2600      	movs	r6, #0
}
    3b40:	0030      	movs	r0, r6
    3b42:	b004      	add	sp, #16
    3b44:	bc04      	pop	{r2}
    3b46:	4691      	mov	r9, r2
    3b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    3b4a:	1ca1      	adds	r1, r4, #2
    3b4c:	0038      	movs	r0, r7
    3b4e:	4b5c      	ldr	r3, [pc, #368]	; (3cc0 <_http_client_handle_header+0x19c>)
    3b50:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    3b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3b54:	2b00      	cmp	r3, #0
    3b56:	d00a      	beq.n	3b6e <_http_client_handle_header+0x4a>
    3b58:	22e4      	movs	r2, #228	; 0xe4
    3b5a:	5ab9      	ldrh	r1, [r7, r2]
    3b5c:	2900      	cmp	r1, #0
    3b5e:	d006      	beq.n	3b6e <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    3b60:	3a08      	subs	r2, #8
    3b62:	58b8      	ldr	r0, [r7, r2]
    3b64:	2800      	cmp	r0, #0
    3b66:	db07      	blt.n	3b78 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    3b68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3b6a:	4290      	cmp	r0, r2
    3b6c:	dc10      	bgt.n	3b90 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    3b6e:	2201      	movs	r2, #1
    3b70:	23d8      	movs	r3, #216	; 0xd8
    3b72:	50fa      	str	r2, [r7, r3]
			return 1;
    3b74:	2601      	movs	r6, #1
    3b76:	e7e3      	b.n	3b40 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    3b78:	aa01      	add	r2, sp, #4
    3b7a:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    3b7c:	2101      	movs	r1, #1
    3b7e:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    3b80:	2100      	movs	r1, #0
    3b82:	20e0      	movs	r0, #224	; 0xe0
    3b84:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    3b86:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    3b88:	3102      	adds	r1, #2
    3b8a:	0038      	movs	r0, r7
    3b8c:	4798      	blx	r3
    3b8e:	e7ee      	b.n	3b6e <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    3b90:	aa01      	add	r2, sp, #4
    3b92:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    3b94:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    3b96:	2100      	movs	r1, #0
    3b98:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    3b9a:	20e0      	movs	r0, #224	; 0xe0
    3b9c:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    3b9e:	3102      	adds	r1, #2
    3ba0:	0038      	movs	r0, r7
    3ba2:	4798      	blx	r3
    3ba4:	e7e3      	b.n	3b6e <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    3ba6:	0020      	movs	r0, r4
    3ba8:	3010      	adds	r0, #16
    3baa:	4b46      	ldr	r3, [pc, #280]	; (3cc4 <_http_client_handle_header+0x1a0>)
    3bac:	4798      	blx	r3
    3bae:	23dc      	movs	r3, #220	; 0xdc
    3bb0:	50f8      	str	r0, [r7, r3]
    3bb2:	e009      	b.n	3bc8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    3bb4:	3201      	adds	r2, #1
    3bb6:	4295      	cmp	r5, r2
    3bb8:	d006      	beq.n	3bc8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    3bba:	7813      	ldrb	r3, [r2, #0]
    3bbc:	2b20      	cmp	r3, #32
    3bbe:	d12b      	bne.n	3c18 <_http_client_handle_header+0xf4>
    3bc0:	e7f8      	b.n	3bb4 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    3bc2:	3a21      	subs	r2, #33	; 0x21
    3bc4:	3389      	adds	r3, #137	; 0x89
    3bc6:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    3bc8:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    3bca:	493f      	ldr	r1, [pc, #252]	; (3cc8 <_http_client_handle_header+0x1a4>)
    3bcc:	0020      	movs	r0, r4
    3bce:	47c8      	blx	r9
    3bd0:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    3bd2:	d0b0      	beq.n	3b36 <_http_client_handle_header+0x12>
    3bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3bd8:	4694      	mov	ip, r2
    3bda:	4463      	add	r3, ip
    3bdc:	4298      	cmp	r0, r3
    3bde:	d2aa      	bcs.n	3b36 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    3be0:	2202      	movs	r2, #2
    3be2:	4939      	ldr	r1, [pc, #228]	; (3cc8 <_http_client_handle_header+0x1a4>)
    3be4:	0020      	movs	r0, r4
    3be6:	4b39      	ldr	r3, [pc, #228]	; (3ccc <_http_client_handle_header+0x1a8>)
    3be8:	4798      	blx	r3
    3bea:	2800      	cmp	r0, #0
    3bec:	d0ad      	beq.n	3b4a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    3bee:	2210      	movs	r2, #16
    3bf0:	4937      	ldr	r1, [pc, #220]	; (3cd0 <_http_client_handle_header+0x1ac>)
    3bf2:	0020      	movs	r0, r4
    3bf4:	4b35      	ldr	r3, [pc, #212]	; (3ccc <_http_client_handle_header+0x1a8>)
    3bf6:	4798      	blx	r3
    3bf8:	2800      	cmp	r0, #0
    3bfa:	d0d4      	beq.n	3ba6 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    3bfc:	2213      	movs	r2, #19
    3bfe:	4935      	ldr	r1, [pc, #212]	; (3cd4 <_http_client_handle_header+0x1b0>)
    3c00:	0020      	movs	r0, r4
    3c02:	4b32      	ldr	r3, [pc, #200]	; (3ccc <_http_client_handle_header+0x1a8>)
    3c04:	4798      	blx	r3
    3c06:	1e06      	subs	r6, r0, #0
    3c08:	d110      	bne.n	3c2c <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    3c0a:	0022      	movs	r2, r4
    3c0c:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    3c0e:	4295      	cmp	r5, r2
    3c10:	d9da      	bls.n	3bc8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    3c12:	7ce3      	ldrb	r3, [r4, #19]
    3c14:	2b20      	cmp	r3, #32
    3c16:	d0cd      	beq.n	3bb4 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    3c18:	2220      	movs	r2, #32
    3c1a:	4393      	bics	r3, r2
    3c1c:	2b43      	cmp	r3, #67	; 0x43
    3c1e:	d0d0      	beq.n	3bc2 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    3c20:	2186      	movs	r1, #134	; 0x86
    3c22:	4249      	negs	r1, r1
    3c24:	0038      	movs	r0, r7
    3c26:	4b2c      	ldr	r3, [pc, #176]	; (3cd8 <_http_client_handle_header+0x1b4>)
    3c28:	4798      	blx	r3
					return 0;
    3c2a:	e789      	b.n	3b40 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    3c2c:	220c      	movs	r2, #12
    3c2e:	492b      	ldr	r1, [pc, #172]	; (3cdc <_http_client_handle_header+0x1b8>)
    3c30:	0020      	movs	r0, r4
    3c32:	4b26      	ldr	r3, [pc, #152]	; (3ccc <_http_client_handle_header+0x1a8>)
    3c34:	4798      	blx	r3
    3c36:	2800      	cmp	r0, #0
    3c38:	d11d      	bne.n	3c76 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    3c3a:	0022      	movs	r2, r4
    3c3c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    3c3e:	4295      	cmp	r5, r2
    3c40:	d9c2      	bls.n	3bc8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    3c42:	7b23      	ldrb	r3, [r4, #12]
    3c44:	2b20      	cmp	r3, #32
    3c46:	d009      	beq.n	3c5c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    3c48:	2220      	movs	r2, #32
    3c4a:	4393      	bics	r3, r2
    3c4c:	2b4b      	cmp	r3, #75	; 0x4b
    3c4e:	d00c      	beq.n	3c6a <_http_client_handle_header+0x146>
					module->permanent = 0;
    3c50:	2241      	movs	r2, #65	; 0x41
    3c52:	5cbb      	ldrb	r3, [r7, r2]
    3c54:	2102      	movs	r1, #2
    3c56:	438b      	bics	r3, r1
    3c58:	54bb      	strb	r3, [r7, r2]
    3c5a:	e7b5      	b.n	3bc8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    3c5c:	3201      	adds	r2, #1
    3c5e:	4295      	cmp	r5, r2
    3c60:	d0b2      	beq.n	3bc8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    3c62:	7813      	ldrb	r3, [r2, #0]
    3c64:	2b20      	cmp	r3, #32
    3c66:	d1ef      	bne.n	3c48 <_http_client_handle_header+0x124>
    3c68:	e7f8      	b.n	3c5c <_http_client_handle_header+0x138>
					module->permanent = 1;
    3c6a:	3221      	adds	r2, #33	; 0x21
    3c6c:	5cbb      	ldrb	r3, [r7, r2]
    3c6e:	2102      	movs	r1, #2
    3c70:	430b      	orrs	r3, r1
    3c72:	54bb      	strb	r3, [r7, r2]
    3c74:	e7a8      	b.n	3bc8 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    3c76:	2205      	movs	r2, #5
    3c78:	4919      	ldr	r1, [pc, #100]	; (3ce0 <_http_client_handle_header+0x1bc>)
    3c7a:	0020      	movs	r0, r4
    3c7c:	4b13      	ldr	r3, [pc, #76]	; (3ccc <_http_client_handle_header+0x1a8>)
    3c7e:	4798      	blx	r3
    3c80:	2800      	cmp	r0, #0
    3c82:	d1a1      	bne.n	3bc8 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    3c84:	0020      	movs	r0, r4
    3c86:	3009      	adds	r0, #9
    3c88:	4b0e      	ldr	r3, [pc, #56]	; (3cc4 <_http_client_handle_header+0x1a0>)
    3c8a:	4798      	blx	r3
    3c8c:	23e4      	movs	r3, #228	; 0xe4
    3c8e:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    3c90:	2200      	movs	r2, #0
    3c92:	3b08      	subs	r3, #8
    3c94:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    3c96:	7963      	ldrb	r3, [r4, #5]
    3c98:	2b31      	cmp	r3, #49	; 0x31
    3c9a:	d802      	bhi.n	3ca2 <_http_client_handle_header+0x17e>
    3c9c:	79e3      	ldrb	r3, [r4, #7]
    3c9e:	2b30      	cmp	r3, #48	; 0x30
    3ca0:	d905      	bls.n	3cae <_http_client_handle_header+0x18a>
				module->permanent = 1;
    3ca2:	2241      	movs	r2, #65	; 0x41
    3ca4:	5cbb      	ldrb	r3, [r7, r2]
    3ca6:	2102      	movs	r1, #2
    3ca8:	430b      	orrs	r3, r1
    3caa:	54bb      	strb	r3, [r7, r2]
    3cac:	e78c      	b.n	3bc8 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    3cae:	2241      	movs	r2, #65	; 0x41
    3cb0:	5cbb      	ldrb	r3, [r7, r2]
    3cb2:	2102      	movs	r1, #2
    3cb4:	438b      	bics	r3, r1
    3cb6:	54bb      	strb	r3, [r7, r2]
    3cb8:	e786      	b.n	3bc8 <_http_client_handle_header+0xa4>
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	0000becf 	.word	0x0000becf
    3cc0:	00003b01 	.word	0x00003b01
    3cc4:	0000b049 	.word	0x0000b049
    3cc8:	0001287c 	.word	0x0001287c
    3ccc:	0000bead 	.word	0x0000bead
    3cd0:	00011764 	.word	0x00011764
    3cd4:	00011674 	.word	0x00011674
    3cd8:	00003285 	.word	0x00003285
    3cdc:	00011688 	.word	0x00011688
    3ce0:	00011698 	.word	0x00011698

00003ce4 <_http_client_handle_entity>:
{
    3ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ce6:	46ce      	mov	lr, r9
    3ce8:	b500      	push	{lr}
    3cea:	b086      	sub	sp, #24
    3cec:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    3cee:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    3cf0:	23dc      	movs	r3, #220	; 0xdc
    3cf2:	58c3      	ldr	r3, [r0, r3]
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	db69      	blt.n	3dcc <_http_client_handle_entity+0xe8>
    3cf8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    3cfa:	4293      	cmp	r3, r2
    3cfc:	dc2b      	bgt.n	3d56 <_http_client_handle_entity+0x72>
	return 0;
    3cfe:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    3d00:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3d02:	4293      	cmp	r3, r2
    3d04:	dc4e      	bgt.n	3da4 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    3d06:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    3d08:	2e00      	cmp	r6, #0
    3d0a:	d003      	beq.n	3d14 <_http_client_handle_entity+0x30>
    3d0c:	22e4      	movs	r2, #228	; 0xe4
    3d0e:	5aa1      	ldrh	r1, [r4, r2]
    3d10:	2900      	cmp	r1, #0
    3d12:	d10e      	bne.n	3d32 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    3d14:	2300      	movs	r3, #0
    3d16:	22d8      	movs	r2, #216	; 0xd8
    3d18:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    3d1a:	320c      	adds	r2, #12
    3d1c:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    3d1e:	3341      	adds	r3, #65	; 0x41
    3d20:	5ce3      	ldrb	r3, [r4, r3]
    3d22:	079b      	lsls	r3, r3, #30
    3d24:	d40f      	bmi.n	3d46 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    3d26:	2100      	movs	r1, #0
    3d28:	0020      	movs	r0, r4
    3d2a:	4b71      	ldr	r3, [pc, #452]	; (3ef0 <_http_client_handle_entity+0x20c>)
    3d2c:	4798      	blx	r3
	return 0;
    3d2e:	2000      	movs	r0, #0
    3d30:	e038      	b.n	3da4 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    3d32:	aa03      	add	r2, sp, #12
    3d34:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    3d36:	2100      	movs	r1, #0
    3d38:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    3d3a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    3d3c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    3d3e:	3102      	adds	r1, #2
    3d40:	0020      	movs	r0, r4
    3d42:	47b0      	blx	r6
    3d44:	e7e6      	b.n	3d14 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    3d46:	23dc      	movs	r3, #220	; 0xdc
    3d48:	58e1      	ldr	r1, [r4, r3]
    3d4a:	1869      	adds	r1, r5, r1
    3d4c:	0020      	movs	r0, r4
    3d4e:	4b69      	ldr	r3, [pc, #420]	; (3ef4 <_http_client_handle_entity+0x210>)
    3d50:	4798      	blx	r3
				return module->recved_size;
    3d52:	6c60      	ldr	r0, [r4, #68]	; 0x44
    3d54:	e026      	b.n	3da4 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    3d56:	6c42      	ldr	r2, [r0, #68]	; 0x44
    3d58:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    3d5a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    3d5c:	21e0      	movs	r1, #224	; 0xe0
    3d5e:	5840      	ldr	r0, [r0, r1]
    3d60:	4684      	mov	ip, r0
    3d62:	4462      	add	r2, ip
    3d64:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    3d66:	4293      	cmp	r3, r2
    3d68:	dc20      	bgt.n	3dac <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    3d6a:	2300      	movs	r3, #0
    3d6c:	22d8      	movs	r2, #216	; 0xd8
    3d6e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    3d70:	320c      	adds	r2, #12
    3d72:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    3d74:	3ae3      	subs	r2, #227	; 0xe3
    3d76:	ab03      	add	r3, sp, #12
    3d78:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    3d7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d007      	beq.n	3d90 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    3d80:	ae03      	add	r6, sp, #12
    3d82:	0032      	movs	r2, r6
    3d84:	2103      	movs	r1, #3
    3d86:	0020      	movs	r0, r4
    3d88:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    3d8a:	7a33      	ldrb	r3, [r6, #8]
    3d8c:	2b01      	cmp	r3, #1
    3d8e:	d103      	bne.n	3d98 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    3d90:	2341      	movs	r3, #65	; 0x41
    3d92:	5ce3      	ldrb	r3, [r4, r3]
    3d94:	079b      	lsls	r3, r3, #30
    3d96:	d510      	bpl.n	3dba <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    3d98:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3d9a:	18e9      	adds	r1, r5, r3
    3d9c:	0020      	movs	r0, r4
    3d9e:	4b55      	ldr	r3, [pc, #340]	; (3ef4 <_http_client_handle_entity+0x210>)
    3da0:	4798      	blx	r3
	return 0;
    3da2:	2000      	movs	r0, #0
}
    3da4:	b006      	add	sp, #24
    3da6:	bc04      	pop	{r2}
    3da8:	4691      	mov	r9, r2
    3daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    3dac:	2200      	movs	r2, #0
    3dae:	ab03      	add	r3, sp, #12
    3db0:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    3db2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3db4:	2b00      	cmp	r3, #0
    3db6:	d0ef      	beq.n	3d98 <_http_client_handle_entity+0xb4>
    3db8:	e7e2      	b.n	3d80 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    3dba:	484f      	ldr	r0, [pc, #316]	; (3ef8 <_http_client_handle_entity+0x214>)
    3dbc:	4b4f      	ldr	r3, [pc, #316]	; (3efc <_http_client_handle_entity+0x218>)
    3dbe:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    3dc0:	2100      	movs	r1, #0
    3dc2:	0020      	movs	r0, r4
    3dc4:	4b4a      	ldr	r3, [pc, #296]	; (3ef0 <_http_client_handle_entity+0x20c>)
    3dc6:	4798      	blx	r3
					return 0;
    3dc8:	2000      	movs	r0, #0
    3dca:	e7eb      	b.n	3da4 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    3dcc:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    3dce:	2300      	movs	r3, #0
    3dd0:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    3dd2:	26e0      	movs	r6, #224	; 0xe0
    3dd4:	e00a      	b.n	3dec <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    3dd6:	2341      	movs	r3, #65	; 0x41
    3dd8:	5ce3      	ldrb	r3, [r4, r3]
    3dda:	079b      	lsls	r3, r3, #30
    3ddc:	d51b      	bpl.n	3e16 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    3dde:	1ca9      	adds	r1, r5, #2
    3de0:	0020      	movs	r0, r4
    3de2:	4b44      	ldr	r3, [pc, #272]	; (3ef4 <_http_client_handle_entity+0x210>)
    3de4:	4798      	blx	r3
	} while(module->recved_size > 0);
    3de6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3de8:	2b00      	cmp	r3, #0
    3dea:	d073      	beq.n	3ed4 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    3dec:	59a3      	ldr	r3, [r4, r6]
    3dee:	2b00      	cmp	r3, #0
    3df0:	db30      	blt.n	3e54 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    3df2:	d116      	bne.n	3e22 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    3df4:	22d8      	movs	r2, #216	; 0xd8
    3df6:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    3df8:	320c      	adds	r2, #12
    3dfa:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    3dfc:	3ae3      	subs	r2, #227	; 0xe3
    3dfe:	4669      	mov	r1, sp
    3e00:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    3e02:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    3e04:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    3e06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3e08:	2b00      	cmp	r3, #0
    3e0a:	d0e4      	beq.n	3dd6 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    3e0c:	466a      	mov	r2, sp
    3e0e:	2103      	movs	r1, #3
    3e10:	0020      	movs	r0, r4
    3e12:	4798      	blx	r3
    3e14:	e7df      	b.n	3dd6 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    3e16:	2100      	movs	r1, #0
    3e18:	0020      	movs	r0, r4
    3e1a:	4b35      	ldr	r3, [pc, #212]	; (3ef0 <_http_client_handle_entity+0x20c>)
    3e1c:	4798      	blx	r3
	return 0;
    3e1e:	2000      	movs	r0, #0
    3e20:	e7c0      	b.n	3da4 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    3e22:	42bb      	cmp	r3, r7
    3e24:	dcdf      	bgt.n	3de6 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    3e26:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    3e28:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    3e2a:	2300      	movs	r3, #0
    3e2c:	466a      	mov	r2, sp
    3e2e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    3e30:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3e32:	2b00      	cmp	r3, #0
    3e34:	d002      	beq.n	3e3c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    3e36:	2103      	movs	r1, #3
    3e38:	0020      	movs	r0, r4
    3e3a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    3e3c:	59a3      	ldr	r3, [r4, r6]
    3e3e:	1c99      	adds	r1, r3, #2
    3e40:	1869      	adds	r1, r5, r1
    3e42:	0020      	movs	r0, r4
    3e44:	4b2b      	ldr	r3, [pc, #172]	; (3ef4 <_http_client_handle_entity+0x210>)
    3e46:	4798      	blx	r3
				length = (int)module->recved_size;
    3e48:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    3e4a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    3e4c:	2301      	movs	r3, #1
    3e4e:	425b      	negs	r3, r3
    3e50:	51a3      	str	r3, [r4, r6]
    3e52:	e7c8      	b.n	3de6 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    3e54:	2300      	movs	r3, #0
    3e56:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    3e58:	2f00      	cmp	r7, #0
    3e5a:	dd04      	ble.n	3e66 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    3e5c:	782b      	ldrb	r3, [r5, #0]
    3e5e:	2b0a      	cmp	r3, #10
    3e60:	d11c      	bne.n	3e9c <_http_client_handle_entity+0x1b8>
					buffer++;
    3e62:	3501      	adds	r5, #1
					length--;
    3e64:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    3e66:	59a3      	ldr	r3, [r4, r6]
    3e68:	6e22      	ldr	r2, [r4, #96]	; 0x60
    3e6a:	4293      	cmp	r3, r2
    3e6c:	dc39      	bgt.n	3ee2 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    3e6e:	2f00      	cmp	r7, #0
    3e70:	d1b9      	bne.n	3de6 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    3e72:	2201      	movs	r2, #1
    3e74:	4252      	negs	r2, r2
    3e76:	23e0      	movs	r3, #224	; 0xe0
    3e78:	50e2      	str	r2, [r4, r3]
    3e7a:	e7d0      	b.n	3e1e <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    3e7c:	001a      	movs	r2, r3
    3e7e:	3a61      	subs	r2, #97	; 0x61
    3e80:	2a05      	cmp	r2, #5
    3e82:	d818      	bhi.n	3eb6 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    3e84:	59a2      	ldr	r2, [r4, r6]
    3e86:	0112      	lsls	r2, r2, #4
    3e88:	18d3      	adds	r3, r2, r3
    3e8a:	3b61      	subs	r3, #97	; 0x61
    3e8c:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    3e8e:	3501      	adds	r5, #1
    3e90:	3f01      	subs	r7, #1
    3e92:	2f00      	cmp	r7, #0
    3e94:	d020      	beq.n	3ed8 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    3e96:	782b      	ldrb	r3, [r5, #0]
    3e98:	2b0a      	cmp	r3, #10
    3e9a:	d0e2      	beq.n	3e62 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    3e9c:	464a      	mov	r2, r9
    3e9e:	2a00      	cmp	r2, #0
    3ea0:	d1f5      	bne.n	3e8e <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    3ea2:	001a      	movs	r2, r3
    3ea4:	3a30      	subs	r2, #48	; 0x30
    3ea6:	2a09      	cmp	r2, #9
    3ea8:	d8e8      	bhi.n	3e7c <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    3eaa:	59a2      	ldr	r2, [r4, r6]
    3eac:	0112      	lsls	r2, r2, #4
    3eae:	18d3      	adds	r3, r2, r3
    3eb0:	3b30      	subs	r3, #48	; 0x30
    3eb2:	51a3      	str	r3, [r4, r6]
    3eb4:	e7eb      	b.n	3e8e <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    3eb6:	001a      	movs	r2, r3
    3eb8:	3a41      	subs	r2, #65	; 0x41
    3eba:	2a05      	cmp	r2, #5
    3ebc:	d805      	bhi.n	3eca <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    3ebe:	59a2      	ldr	r2, [r4, r6]
    3ec0:	0112      	lsls	r2, r2, #4
    3ec2:	18d3      	adds	r3, r2, r3
    3ec4:	3b41      	subs	r3, #65	; 0x41
    3ec6:	51a3      	str	r3, [r4, r6]
    3ec8:	e7e1      	b.n	3e8e <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    3eca:	3b3b      	subs	r3, #59	; 0x3b
    3ecc:	425a      	negs	r2, r3
    3ece:	415a      	adcs	r2, r3
    3ed0:	4691      	mov	r9, r2
    3ed2:	e7dc      	b.n	3e8e <_http_client_handle_entity+0x1aa>
	return 0;
    3ed4:	2000      	movs	r0, #0
    3ed6:	e765      	b.n	3da4 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    3ed8:	23e0      	movs	r3, #224	; 0xe0
    3eda:	58e3      	ldr	r3, [r4, r3]
    3edc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    3ede:	4293      	cmp	r3, r2
    3ee0:	ddc7      	ble.n	3e72 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    3ee2:	218b      	movs	r1, #139	; 0x8b
    3ee4:	4249      	negs	r1, r1
    3ee6:	0020      	movs	r0, r4
    3ee8:	4b01      	ldr	r3, [pc, #4]	; (3ef0 <_http_client_handle_entity+0x20c>)
    3eea:	4798      	blx	r3
    3eec:	e797      	b.n	3e1e <_http_client_handle_entity+0x13a>
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	00003285 	.word	0x00003285
    3ef4:	00003b01 	.word	0x00003b01
    3ef8:	00011670 	.word	0x00011670
    3efc:	0000bc59 	.word	0x0000bc59

00003f00 <_http_client_handle_response>:
{
    3f00:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    3f02:	23d8      	movs	r3, #216	; 0xd8
    3f04:	58c3      	ldr	r3, [r0, r3]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d003      	beq.n	3f12 <_http_client_handle_response+0x12>
    3f0a:	2b01      	cmp	r3, #1
    3f0c:	d004      	beq.n	3f18 <_http_client_handle_response+0x18>
	return 0;
    3f0e:	2000      	movs	r0, #0
    3f10:	e001      	b.n	3f16 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    3f12:	4b03      	ldr	r3, [pc, #12]	; (3f20 <_http_client_handle_response+0x20>)
    3f14:	4798      	blx	r3
}
    3f16:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    3f18:	4b02      	ldr	r3, [pc, #8]	; (3f24 <_http_client_handle_response+0x24>)
    3f1a:	4798      	blx	r3
    3f1c:	e7fb      	b.n	3f16 <_http_client_handle_response+0x16>
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	00003b25 	.word	0x00003b25
    3f24:	00003ce5 	.word	0x00003ce5

00003f28 <_http_client_recved_packet>:
{
    3f28:	b570      	push	{r4, r5, r6, lr}
    3f2a:	0004      	movs	r4, r0
	module->recved_size += read_len;
    3f2c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    3f2e:	469c      	mov	ip, r3
    3f30:	4461      	add	r1, ip
    3f32:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    3f34:	2358      	movs	r3, #88	; 0x58
    3f36:	5ac3      	ldrh	r3, [r0, r3]
    3f38:	2b00      	cmp	r3, #0
    3f3a:	d105      	bne.n	3f48 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    3f3c:	4d05      	ldr	r5, [pc, #20]	; (3f54 <_http_client_recved_packet+0x2c>)
    3f3e:	0020      	movs	r0, r4
    3f40:	47a8      	blx	r5
    3f42:	2800      	cmp	r0, #0
    3f44:	d1fb      	bne.n	3f3e <_http_client_recved_packet+0x16>
}
    3f46:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    3f48:	6c81      	ldr	r1, [r0, #72]	; 0x48
    3f4a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3f4c:	4b02      	ldr	r3, [pc, #8]	; (3f58 <_http_client_recved_packet+0x30>)
    3f4e:	4798      	blx	r3
    3f50:	e7f4      	b.n	3f3c <_http_client_recved_packet+0x14>
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	00003f01 	.word	0x00003f01
    3f58:	000042fd 	.word	0x000042fd

00003f5c <http_client_socket_event_handler>:
{
    3f5c:	b510      	push	{r4, lr}
    3f5e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    3f60:	0080      	lsls	r0, r0, #2
    3f62:	4b65      	ldr	r3, [pc, #404]	; (40f8 <http_client_socket_event_handler+0x19c>)
    3f64:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    3f66:	2c00      	cmp	r4, #0
    3f68:	d006      	beq.n	3f78 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    3f6a:	2906      	cmp	r1, #6
    3f6c:	d051      	beq.n	4012 <http_client_socket_event_handler+0xb6>
    3f6e:	2907      	cmp	r1, #7
    3f70:	d100      	bne.n	3f74 <http_client_socket_event_handler+0x18>
    3f72:	e08a      	b.n	408a <http_client_socket_event_handler+0x12e>
    3f74:	2905      	cmp	r1, #5
    3f76:	d001      	beq.n	3f7c <http_client_socket_event_handler+0x20>
}
    3f78:	b004      	add	sp, #16
    3f7a:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    3f7c:	2301      	movs	r3, #1
    3f7e:	56d3      	ldrsb	r3, [r2, r3]
    3f80:	1e1a      	subs	r2, r3, #0
    3f82:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    3f84:	db15      	blt.n	3fb2 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    3f86:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d003      	beq.n	3f94 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    3f8c:	aa01      	add	r2, sp, #4
    3f8e:	2100      	movs	r1, #0
    3f90:	0020      	movs	r0, r4
    3f92:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    3f94:	2303      	movs	r3, #3
    3f96:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    3f98:	3355      	adds	r3, #85	; 0x55
    3f9a:	5ae2      	ldrh	r2, [r4, r3]
    3f9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    3f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3fa0:	4b56      	ldr	r3, [pc, #344]	; (40fc <http_client_socket_event_handler+0x1a0>)
    3fa2:	4798      	blx	r3
    		_http_client_recv_packet(module);
    3fa4:	0020      	movs	r0, r4
    3fa6:	4b56      	ldr	r3, [pc, #344]	; (4100 <http_client_socket_event_handler+0x1a4>)
    3fa8:	4798      	blx	r3
			_http_client_request(module);
    3faa:	0020      	movs	r0, r4
    3fac:	4b55      	ldr	r3, [pc, #340]	; (4104 <http_client_socket_event_handler+0x1a8>)
    3fae:	4798      	blx	r3
    3fb0:	e7e2      	b.n	3f78 <http_client_socket_event_handler+0x1c>
	switch (err) {
    3fb2:	330e      	adds	r3, #14
    3fb4:	b2d9      	uxtb	r1, r3
    3fb6:	290e      	cmp	r1, #14
    3fb8:	d81e      	bhi.n	3ff8 <http_client_socket_event_handler+0x9c>
    3fba:	008b      	lsls	r3, r1, #2
    3fbc:	4952      	ldr	r1, [pc, #328]	; (4108 <http_client_socket_event_handler+0x1ac>)
    3fbe:	58cb      	ldr	r3, [r1, r3]
    3fc0:	469f      	mov	pc, r3
			return -ENOENT;
    3fc2:	2102      	movs	r1, #2
    3fc4:	4249      	negs	r1, r1
    3fc6:	e01d      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    3fc8:	2170      	movs	r1, #112	; 0x70
    3fca:	4249      	negs	r1, r1
    3fcc:	e01a      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    3fce:	210c      	movs	r1, #12
    3fd0:	4249      	negs	r1, r1
    3fd2:	e017      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    3fd4:	2116      	movs	r1, #22
    3fd6:	4249      	negs	r1, r1
    3fd8:	e014      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    3fda:	210c      	movs	r1, #12
    3fdc:	4249      	negs	r1, r1
    3fde:	e011      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    3fe0:	2179      	movs	r1, #121	; 0x79
    3fe2:	4249      	negs	r1, r1
    3fe4:	e00e      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    3fe6:	2168      	movs	r1, #104	; 0x68
    3fe8:	4249      	negs	r1, r1
    3fea:	e00b      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    3fec:	210b      	movs	r1, #11
    3fee:	4249      	negs	r1, r1
    3ff0:	e008      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    3ff2:	2110      	movs	r1, #16
    3ff4:	4249      	negs	r1, r1
    3ff6:	e005      	b.n	4004 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    3ff8:	2a00      	cmp	r2, #0
    3ffa:	db07      	blt.n	400c <http_client_socket_event_handler+0xb0>
			return 0;
    3ffc:	2100      	movs	r1, #0
    3ffe:	e001      	b.n	4004 <http_client_socket_event_handler+0xa8>
			return -EIO;
    4000:	2105      	movs	r1, #5
    4002:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    4004:	0020      	movs	r0, r4
    4006:	4b41      	ldr	r3, [pc, #260]	; (410c <http_client_socket_event_handler+0x1b0>)
    4008:	4798      	blx	r3
    400a:	e7b5      	b.n	3f78 <http_client_socket_event_handler+0x1c>
				return -EIO;
    400c:	2105      	movs	r1, #5
    400e:	4249      	negs	r1, r1
    4010:	e7f8      	b.n	4004 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    4012:	2304      	movs	r3, #4
    4014:	5ed1      	ldrsh	r1, [r2, r3]
    4016:	2900      	cmp	r1, #0
    4018:	dd06      	ble.n	4028 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    401a:	0020      	movs	r0, r4
    401c:	4b3c      	ldr	r3, [pc, #240]	; (4110 <http_client_socket_event_handler+0x1b4>)
    401e:	4798      	blx	r3
		_http_client_recv_packet(module);
    4020:	0020      	movs	r0, r4
    4022:	4b37      	ldr	r3, [pc, #220]	; (4100 <http_client_socket_event_handler+0x1a4>)
    4024:	4798      	blx	r3
		break;
    4026:	e7a7      	b.n	3f78 <http_client_socket_event_handler+0x1c>
	switch (err) {
    4028:	000b      	movs	r3, r1
    402a:	330e      	adds	r3, #14
    402c:	b29a      	uxth	r2, r3
    402e:	2a0e      	cmp	r2, #14
    4030:	d81e      	bhi.n	4070 <http_client_socket_event_handler+0x114>
    4032:	0093      	lsls	r3, r2, #2
    4034:	4a37      	ldr	r2, [pc, #220]	; (4114 <http_client_socket_event_handler+0x1b8>)
    4036:	58d3      	ldr	r3, [r2, r3]
    4038:	469f      	mov	pc, r3
			return -ENOENT;
    403a:	2102      	movs	r1, #2
    403c:	4249      	negs	r1, r1
    403e:	e01d      	b.n	407c <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    4040:	2170      	movs	r1, #112	; 0x70
    4042:	4249      	negs	r1, r1
    4044:	e01a      	b.n	407c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    4046:	210c      	movs	r1, #12
    4048:	4249      	negs	r1, r1
    404a:	e017      	b.n	407c <http_client_socket_event_handler+0x120>
			return -EINVAL;
    404c:	2116      	movs	r1, #22
    404e:	4249      	negs	r1, r1
    4050:	e014      	b.n	407c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    4052:	210c      	movs	r1, #12
    4054:	4249      	negs	r1, r1
    4056:	e011      	b.n	407c <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    4058:	2179      	movs	r1, #121	; 0x79
    405a:	4249      	negs	r1, r1
    405c:	e00e      	b.n	407c <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    405e:	2168      	movs	r1, #104	; 0x68
    4060:	4249      	negs	r1, r1
    4062:	e00b      	b.n	407c <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    4064:	210b      	movs	r1, #11
    4066:	4249      	negs	r1, r1
    4068:	e008      	b.n	407c <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    406a:	2110      	movs	r1, #16
    406c:	4249      	negs	r1, r1
    406e:	e005      	b.n	407c <http_client_socket_event_handler+0x120>
			if (err < 0) {
    4070:	2900      	cmp	r1, #0
    4072:	db07      	blt.n	4084 <http_client_socket_event_handler+0x128>
			return 0;
    4074:	2100      	movs	r1, #0
    4076:	e001      	b.n	407c <http_client_socket_event_handler+0x120>
			return -EIO;
    4078:	2105      	movs	r1, #5
    407a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    407c:	0020      	movs	r0, r4
    407e:	4b23      	ldr	r3, [pc, #140]	; (410c <http_client_socket_event_handler+0x1b0>)
    4080:	4798      	blx	r3
    4082:	e7cd      	b.n	4020 <http_client_socket_event_handler+0xc4>
				return -EIO;
    4084:	2105      	movs	r1, #5
    4086:	4249      	negs	r1, r1
    4088:	e7f8      	b.n	407c <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    408a:	2300      	movs	r3, #0
    408c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    408e:	2b00      	cmp	r3, #0
    4090:	db08      	blt.n	40a4 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    4092:	0020      	movs	r0, r4
    4094:	4b1b      	ldr	r3, [pc, #108]	; (4104 <http_client_socket_event_handler+0x1a8>)
    4096:	4798      	blx	r3
		module->sending = 0;
    4098:	2241      	movs	r2, #65	; 0x41
    409a:	5ca3      	ldrb	r3, [r4, r2]
    409c:	2101      	movs	r1, #1
    409e:	438b      	bics	r3, r1
    40a0:	54a3      	strb	r3, [r4, r2]
    	break;
    40a2:	e769      	b.n	3f78 <http_client_socket_event_handler+0x1c>
	switch (err) {
    40a4:	330e      	adds	r3, #14
    40a6:	b29a      	uxth	r2, r3
    40a8:	2a0d      	cmp	r2, #13
    40aa:	d81e      	bhi.n	40ea <http_client_socket_event_handler+0x18e>
    40ac:	0093      	lsls	r3, r2, #2
    40ae:	4a1a      	ldr	r2, [pc, #104]	; (4118 <http_client_socket_event_handler+0x1bc>)
    40b0:	58d3      	ldr	r3, [r2, r3]
    40b2:	469f      	mov	pc, r3
			return -ENOENT;
    40b4:	2102      	movs	r1, #2
    40b6:	4249      	negs	r1, r1
    40b8:	e019      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    40ba:	2170      	movs	r1, #112	; 0x70
    40bc:	4249      	negs	r1, r1
    40be:	e016      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    40c0:	210c      	movs	r1, #12
    40c2:	4249      	negs	r1, r1
    40c4:	e013      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -EINVAL;
    40c6:	2116      	movs	r1, #22
    40c8:	4249      	negs	r1, r1
    40ca:	e010      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    40cc:	210c      	movs	r1, #12
    40ce:	4249      	negs	r1, r1
    40d0:	e00d      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    40d2:	2179      	movs	r1, #121	; 0x79
    40d4:	4249      	negs	r1, r1
    40d6:	e00a      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    40d8:	2168      	movs	r1, #104	; 0x68
    40da:	4249      	negs	r1, r1
    40dc:	e007      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    40de:	210b      	movs	r1, #11
    40e0:	4249      	negs	r1, r1
    40e2:	e004      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    40e4:	2110      	movs	r1, #16
    40e6:	4249      	negs	r1, r1
    40e8:	e001      	b.n	40ee <http_client_socket_event_handler+0x192>
			return -EIO;
    40ea:	2105      	movs	r1, #5
    40ec:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    40ee:	0020      	movs	r0, r4
    40f0:	4b06      	ldr	r3, [pc, #24]	; (410c <http_client_socket_event_handler+0x1b0>)
    40f2:	4798      	blx	r3
    40f4:	e7d0      	b.n	4098 <http_client_socket_event_handler+0x13c>
    40f6:	46c0      	nop			; (mov r8, r8)
    40f8:	2000021c 	.word	0x2000021c
    40fc:	000042d1 	.word	0x000042d1
    4100:	00003ac9 	.word	0x00003ac9
    4104:	000033c1 	.word	0x000033c1
    4108:	000115b0 	.word	0x000115b0
    410c:	00003285 	.word	0x00003285
    4110:	00003f29 	.word	0x00003f29
    4114:	000115ec 	.word	0x000115ec
    4118:	00011628 	.word	0x00011628

0000411c <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    411c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    411e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    4120:	2200      	movs	r2, #0
    4122:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    4124:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    4126:	9b00      	ldr	r3, [sp, #0]
    4128:	60c3      	str	r3, [r0, #12]
}
    412a:	4770      	bx	lr

0000412c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    412c:	b510      	push	{r4, lr}
    412e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    4130:	6842      	ldr	r2, [r0, #4]
    4132:	2a00      	cmp	r2, #0
    4134:	d100      	bne.n	4138 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    4136:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    4138:	6901      	ldr	r1, [r0, #16]
    413a:	68c0      	ldr	r0, [r0, #12]
    413c:	68a3      	ldr	r3, [r4, #8]
    413e:	4798      	blx	r3
		writer->written = 0;
    4140:	2300      	movs	r3, #0
    4142:	6063      	str	r3, [r4, #4]
}
    4144:	e7f7      	b.n	4136 <stream_writer_send_remain+0xa>
	...

00004148 <stream_writer_send_8>:
{
    4148:	b570      	push	{r4, r5, r6, lr}
    414a:	0004      	movs	r4, r0
    414c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    414e:	6803      	ldr	r3, [r0, #0]
    4150:	6842      	ldr	r2, [r0, #4]
    4152:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    4154:	2b00      	cmp	r3, #0
    4156:	dd05      	ble.n	4164 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    4158:	6922      	ldr	r2, [r4, #16]
    415a:	6863      	ldr	r3, [r4, #4]
    415c:	1c59      	adds	r1, r3, #1
    415e:	6061      	str	r1, [r4, #4]
    4160:	54d5      	strb	r5, [r2, r3]
}
    4162:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    4164:	4b01      	ldr	r3, [pc, #4]	; (416c <stream_writer_send_8+0x24>)
    4166:	4798      	blx	r3
    4168:	e7f6      	b.n	4158 <stream_writer_send_8+0x10>
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	0000412d 	.word	0x0000412d

00004170 <stream_writer_send_16BE>:
{
    4170:	b570      	push	{r4, r5, r6, lr}
    4172:	0006      	movs	r6, r0
    4174:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    4176:	1209      	asrs	r1, r1, #8
    4178:	4d02      	ldr	r5, [pc, #8]	; (4184 <stream_writer_send_16BE+0x14>)
    417a:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    417c:	b261      	sxtb	r1, r4
    417e:	0030      	movs	r0, r6
    4180:	47a8      	blx	r5
}
    4182:	bd70      	pop	{r4, r5, r6, pc}
    4184:	00004149 	.word	0x00004149

00004188 <stream_writer_send_buffer>:
{
    4188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    418a:	0006      	movs	r6, r0
    418c:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    418e:	2a00      	cmp	r2, #0
    4190:	d008      	beq.n	41a4 <stream_writer_send_buffer+0x1c>
    4192:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    4194:	4f04      	ldr	r7, [pc, #16]	; (41a8 <stream_writer_send_buffer+0x20>)
    4196:	2100      	movs	r1, #0
    4198:	5661      	ldrsb	r1, [r4, r1]
    419a:	0030      	movs	r0, r6
    419c:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    419e:	3401      	adds	r4, #1
    41a0:	42a5      	cmp	r5, r4
    41a2:	d1f8      	bne.n	4196 <stream_writer_send_buffer+0xe>
}
    41a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	00004149 	.word	0x00004149

000041ac <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    41ac:	4a02      	ldr	r2, [pc, #8]	; (41b8 <sw_timer_tcc_callback+0xc>)
    41ae:	6813      	ldr	r3, [r2, #0]
    41b0:	3301      	adds	r3, #1
    41b2:	6013      	str	r3, [r2, #0]
}
    41b4:	4770      	bx	lr
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	20000238 	.word	0x20000238

000041bc <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    41bc:	2364      	movs	r3, #100	; 0x64
    41be:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    41c0:	2300      	movs	r3, #0
    41c2:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    41c4:	7043      	strb	r3, [r0, #1]
}
    41c6:	4770      	bx	lr

000041c8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    41c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ca:	46c6      	mov	lr, r8
    41cc:	b500      	push	{lr}
    41ce:	b0ac      	sub	sp, #176	; 0xb0
    41d0:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    41d2:	466e      	mov	r6, sp
    41d4:	4b1d      	ldr	r3, [pc, #116]	; (424c <sw_timer_init+0x84>)
    41d6:	466a      	mov	r2, sp
    41d8:	cb92      	ldmia	r3!, {r1, r4, r7}
    41da:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    41dc:	886b      	ldrh	r3, [r5, #2]
    41de:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    41e0:	3014      	adds	r0, #20
    41e2:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    41e4:	782b      	ldrb	r3, [r5, #0]
    41e6:	009b      	lsls	r3, r3, #2
    41e8:	5999      	ldr	r1, [r3, r6]
    41ea:	0017      	movs	r7, r2
    41ec:	0010      	movs	r0, r2
    41ee:	4b18      	ldr	r3, [pc, #96]	; (4250 <sw_timer_init+0x88>)
    41f0:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    41f2:	2000      	movs	r0, #0
    41f4:	4b17      	ldr	r3, [pc, #92]	; (4254 <sw_timer_init+0x8c>)
    41f6:	4798      	blx	r3
    41f8:	4b17      	ldr	r3, [pc, #92]	; (4258 <sw_timer_init+0x90>)
    41fa:	7a1b      	ldrb	r3, [r3, #8]
    41fc:	b2db      	uxtb	r3, r3
    41fe:	40d8      	lsrs	r0, r3
    4200:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    4202:	8869      	ldrh	r1, [r5, #2]
    4204:	20fa      	movs	r0, #250	; 0xfa
    4206:	0200      	lsls	r0, r0, #8
    4208:	4b14      	ldr	r3, [pc, #80]	; (425c <sw_timer_init+0x94>)
    420a:	4798      	blx	r3
    420c:	0001      	movs	r1, r0
    420e:	4640      	mov	r0, r8
    4210:	4b13      	ldr	r3, [pc, #76]	; (4260 <sw_timer_init+0x98>)
    4212:	4798      	blx	r3
    4214:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    4216:	2305      	movs	r3, #5
    4218:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    421a:	782b      	ldrb	r3, [r5, #0]
    421c:	009b      	lsls	r3, r3, #2
    421e:	5999      	ldr	r1, [r3, r6]
    4220:	003a      	movs	r2, r7
    4222:	0020      	movs	r0, r4
    4224:	4b0f      	ldr	r3, [pc, #60]	; (4264 <sw_timer_init+0x9c>)
    4226:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    4228:	786a      	ldrb	r2, [r5, #1]
    422a:	3208      	adds	r2, #8
    422c:	b2d2      	uxtb	r2, r2
    422e:	490e      	ldr	r1, [pc, #56]	; (4268 <sw_timer_init+0xa0>)
    4230:	0020      	movs	r0, r4
    4232:	4b0e      	ldr	r3, [pc, #56]	; (426c <sw_timer_init+0xa4>)
    4234:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    4236:	7869      	ldrb	r1, [r5, #1]
    4238:	3108      	adds	r1, #8
    423a:	b2c9      	uxtb	r1, r1
    423c:	0020      	movs	r0, r4
    423e:	4b0c      	ldr	r3, [pc, #48]	; (4270 <sw_timer_init+0xa8>)
    4240:	4798      	blx	r3
}
    4242:	b02c      	add	sp, #176	; 0xb0
    4244:	bc04      	pop	{r2}
    4246:	4690      	mov	r8, r2
    4248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    424a:	46c0      	nop			; (mov r8, r8)
    424c:	00011798 	.word	0x00011798
    4250:	0000439d 	.word	0x0000439d
    4254:	000098e9 	.word	0x000098e9
    4258:	40000400 	.word	0x40000400
    425c:	0000e1ad 	.word	0x0000e1ad
    4260:	0000e099 	.word	0x0000e099
    4264:	000044e9 	.word	0x000044e9
    4268:	000041ad 	.word	0x000041ad
    426c:	000048f5 	.word	0x000048f5
    4270:	0000490d 	.word	0x0000490d

00004274 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    4274:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    4276:	2102      	movs	r1, #2
    4278:	6893      	ldr	r3, [r2, #8]
    427a:	4219      	tst	r1, r3
    427c:	d1fc      	bne.n	4278 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    427e:	6813      	ldr	r3, [r2, #0]
    4280:	2102      	movs	r1, #2
    4282:	430b      	orrs	r3, r1
    4284:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    4286:	4770      	bx	lr

00004288 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    4288:	b570      	push	{r4, r5, r6, lr}
    428a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    428c:	7805      	ldrb	r5, [r0, #0]
    428e:	07e8      	lsls	r0, r5, #31
    4290:	d502      	bpl.n	4298 <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    4292:	2001      	movs	r0, #1
    4294:	4240      	negs	r0, r0
}
    4296:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    4298:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    429a:	0029      	movs	r1, r5
    429c:	2002      	movs	r0, #2
    429e:	4381      	bics	r1, r0
    42a0:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    42a2:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    42a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    42a6:	0018      	movs	r0, r3
    42a8:	4b04      	ldr	r3, [pc, #16]	; (42bc <sw_timer_register_callback+0x34>)
    42aa:	4798      	blx	r3
    42ac:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    42ae:	7823      	ldrb	r3, [r4, #0]
    42b0:	2201      	movs	r2, #1
    42b2:	4313      	orrs	r3, r2
    42b4:	7023      	strb	r3, [r4, #0]
			return index;
    42b6:	2000      	movs	r0, #0
    42b8:	e7ed      	b.n	4296 <sw_timer_register_callback+0xe>
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	0000e099 	.word	0x0000e099

000042c0 <sw_timer_unregister_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->used = 0;
    42c0:	008b      	lsls	r3, r1, #2
    42c2:	1859      	adds	r1, r3, r1
    42c4:	0089      	lsls	r1, r1, #2
    42c6:	5c0b      	ldrb	r3, [r1, r0]
    42c8:	2201      	movs	r2, #1
    42ca:	4393      	bics	r3, r2
    42cc:	540b      	strb	r3, [r1, r0]
}
    42ce:	4770      	bx	lr

000042d0 <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    42d0:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    42d2:	008b      	lsls	r3, r1, #2
    42d4:	185d      	adds	r5, r3, r1
    42d6:	00ad      	lsls	r5, r5, #2
    42d8:	5c29      	ldrb	r1, [r5, r0]
    42da:	2602      	movs	r6, #2
    42dc:	4331      	orrs	r1, r6
    42de:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    42e0:	1944      	adds	r4, r0, r5
    42e2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    42e4:	0010      	movs	r0, r2
    42e6:	4b03      	ldr	r3, [pc, #12]	; (42f4 <sw_timer_enable_callback+0x24>)
    42e8:	4798      	blx	r3
    42ea:	4b03      	ldr	r3, [pc, #12]	; (42f8 <sw_timer_enable_callback+0x28>)
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	18c0      	adds	r0, r0, r3
    42f0:	6120      	str	r0, [r4, #16]
}
    42f2:	bd70      	pop	{r4, r5, r6, pc}
    42f4:	0000e099 	.word	0x0000e099
    42f8:	20000238 	.word	0x20000238

000042fc <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    42fc:	008b      	lsls	r3, r1, #2
    42fe:	1859      	adds	r1, r3, r1
    4300:	0089      	lsls	r1, r1, #2
    4302:	5c0b      	ldrb	r3, [r1, r0]
    4304:	2202      	movs	r2, #2
    4306:	4393      	bics	r3, r2
    4308:	540b      	strb	r3, [r1, r0]
}
    430a:	4770      	bx	lr

0000430c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    430c:	b570      	push	{r4, r5, r6, lr}
    430e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    4310:	7803      	ldrb	r3, [r0, #0]
    4312:	07db      	lsls	r3, r3, #31
    4314:	d507      	bpl.n	4326 <sw_timer_task+0x1a>
    4316:	7803      	ldrb	r3, [r0, #0]
    4318:	079b      	lsls	r3, r3, #30
    431a:	d504      	bpl.n	4326 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    431c:	4b11      	ldr	r3, [pc, #68]	; (4364 <sw_timer_task+0x58>)
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	6902      	ldr	r2, [r0, #16]
    4322:	1ad3      	subs	r3, r2, r3
    4324:	d400      	bmi.n	4328 <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    4326:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    4328:	7803      	ldrb	r3, [r0, #0]
    432a:	075b      	lsls	r3, r3, #29
    432c:	d4fb      	bmi.n	4326 <sw_timer_task+0x1a>
				handler->busy = 1;
    432e:	7803      	ldrb	r3, [r0, #0]
    4330:	2204      	movs	r2, #4
    4332:	4313      	orrs	r3, r2
    4334:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    4336:	68c3      	ldr	r3, [r0, #12]
    4338:	6882      	ldr	r2, [r0, #8]
    433a:	2100      	movs	r1, #0
    433c:	6845      	ldr	r5, [r0, #4]
    433e:	47a8      	blx	r5
				if (handler->period > 0) {
    4340:	68e3      	ldr	r3, [r4, #12]
    4342:	2b00      	cmp	r3, #0
    4344:	d008      	beq.n	4358 <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    4346:	4a07      	ldr	r2, [pc, #28]	; (4364 <sw_timer_task+0x58>)
    4348:	6812      	ldr	r2, [r2, #0]
    434a:	18d3      	adds	r3, r2, r3
    434c:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    434e:	7823      	ldrb	r3, [r4, #0]
    4350:	2204      	movs	r2, #4
    4352:	4393      	bics	r3, r2
    4354:	7023      	strb	r3, [r4, #0]
}
    4356:	e7e6      	b.n	4326 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    4358:	7823      	ldrb	r3, [r4, #0]
    435a:	2202      	movs	r2, #2
    435c:	4393      	bics	r3, r2
    435e:	7023      	strb	r3, [r4, #0]
    4360:	e7f5      	b.n	434e <sw_timer_task+0x42>
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	20000238 	.word	0x20000238

00004368 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    4368:	4b09      	ldr	r3, [pc, #36]	; (4390 <_tcc_get_inst_index+0x28>)
    436a:	4298      	cmp	r0, r3
    436c:	d00c      	beq.n	4388 <_tcc_get_inst_index+0x20>
    436e:	4b09      	ldr	r3, [pc, #36]	; (4394 <_tcc_get_inst_index+0x2c>)
    4370:	4298      	cmp	r0, r3
    4372:	d007      	beq.n	4384 <_tcc_get_inst_index+0x1c>
    4374:	4a08      	ldr	r2, [pc, #32]	; (4398 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4376:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    4378:	4290      	cmp	r0, r2
    437a:	d001      	beq.n	4380 <_tcc_get_inst_index+0x18>
}
    437c:	0018      	movs	r0, r3
    437e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4380:	3302      	adds	r3, #2
    4382:	e002      	b.n	438a <_tcc_get_inst_index+0x22>
    4384:	2301      	movs	r3, #1
    4386:	e000      	b.n	438a <_tcc_get_inst_index+0x22>
    4388:	2300      	movs	r3, #0
			return i;
    438a:	b2db      	uxtb	r3, r3
    438c:	e7f6      	b.n	437c <_tcc_get_inst_index+0x14>
    438e:	46c0      	nop			; (mov r8, r8)
    4390:	42002000 	.word	0x42002000
    4394:	42002400 	.word	0x42002400
    4398:	42002800 	.word	0x42002800

0000439c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    439c:	b510      	push	{r4, lr}
    439e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    43a0:	0008      	movs	r0, r1
    43a2:	4b4f      	ldr	r3, [pc, #316]	; (44e0 <tcc_get_config_defaults+0x144>)
    43a4:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    43a6:	2300      	movs	r3, #0
    43a8:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    43aa:	0080      	lsls	r0, r0, #2
    43ac:	4a4d      	ldr	r2, [pc, #308]	; (44e4 <tcc_get_config_defaults+0x148>)
    43ae:	5882      	ldr	r2, [r0, r2]
    43b0:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    43b2:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    43b4:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    43b6:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    43b8:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    43ba:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    43bc:	61e3      	str	r3, [r4, #28]
    43be:	6223      	str	r3, [r4, #32]
    43c0:	6263      	str	r3, [r4, #36]	; 0x24
    43c2:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    43c4:	7523      	strb	r3, [r4, #20]
    43c6:	7563      	strb	r3, [r4, #21]
    43c8:	75a3      	strb	r3, [r4, #22]
    43ca:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    43cc:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    43ce:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    43d0:	7423      	strb	r3, [r4, #16]
    43d2:	7463      	strb	r3, [r4, #17]
    43d4:	74a3      	strb	r3, [r4, #18]
    43d6:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    43d8:	222c      	movs	r2, #44	; 0x2c
    43da:	54a3      	strb	r3, [r4, r2]
    43dc:	3201      	adds	r2, #1
    43de:	54a3      	strb	r3, [r4, r2]
    43e0:	3201      	adds	r2, #1
    43e2:	54a3      	strb	r3, [r4, r2]
    43e4:	3201      	adds	r2, #1
    43e6:	54a3      	strb	r3, [r4, r2]
    43e8:	3201      	adds	r2, #1
    43ea:	54a3      	strb	r3, [r4, r2]
    43ec:	3201      	adds	r2, #1
    43ee:	54a3      	strb	r3, [r4, r2]
    43f0:	3201      	adds	r2, #1
    43f2:	54a3      	strb	r3, [r4, r2]
    43f4:	3201      	adds	r2, #1
    43f6:	54a3      	strb	r3, [r4, r2]
    43f8:	3201      	adds	r2, #1
    43fa:	54a3      	strb	r3, [r4, r2]
    43fc:	3201      	adds	r2, #1
    43fe:	54a3      	strb	r3, [r4, r2]
    4400:	3201      	adds	r2, #1
    4402:	54a3      	strb	r3, [r4, r2]
    4404:	3201      	adds	r2, #1
    4406:	54a3      	strb	r3, [r4, r2]
    4408:	3201      	adds	r2, #1
    440a:	54a3      	strb	r3, [r4, r2]
    440c:	3201      	adds	r2, #1
    440e:	54a3      	strb	r3, [r4, r2]
    4410:	3201      	adds	r2, #1
    4412:	54a3      	strb	r3, [r4, r2]
    4414:	3201      	adds	r2, #1
    4416:	54a3      	strb	r3, [r4, r2]
    4418:	3201      	adds	r2, #1
    441a:	54a3      	strb	r3, [r4, r2]
    441c:	3201      	adds	r2, #1
    441e:	54a3      	strb	r3, [r4, r2]
    4420:	3201      	adds	r2, #1
    4422:	54a3      	strb	r3, [r4, r2]
    4424:	3201      	adds	r2, #1
    4426:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4428:	3201      	adds	r2, #1
    442a:	54a3      	strb	r3, [r4, r2]
    442c:	3201      	adds	r2, #1
    442e:	54a3      	strb	r3, [r4, r2]
    4430:	3201      	adds	r2, #1
    4432:	54a3      	strb	r3, [r4, r2]
    4434:	3201      	adds	r2, #1
    4436:	54a3      	strb	r3, [r4, r2]
    4438:	3201      	adds	r2, #1
    443a:	54a3      	strb	r3, [r4, r2]
    443c:	3201      	adds	r2, #1
    443e:	54a3      	strb	r3, [r4, r2]
    4440:	3201      	adds	r2, #1
    4442:	54a3      	strb	r3, [r4, r2]
    4444:	3201      	adds	r2, #1
    4446:	54a3      	strb	r3, [r4, r2]
    4448:	3201      	adds	r2, #1
    444a:	54a3      	strb	r3, [r4, r2]
    444c:	3201      	adds	r2, #1
    444e:	54a3      	strb	r3, [r4, r2]
    4450:	3201      	adds	r2, #1
    4452:	54a3      	strb	r3, [r4, r2]
    4454:	3201      	adds	r2, #1
    4456:	54a3      	strb	r3, [r4, r2]
    4458:	3201      	adds	r2, #1
    445a:	54a3      	strb	r3, [r4, r2]
    445c:	3201      	adds	r2, #1
    445e:	54a3      	strb	r3, [r4, r2]
    4460:	3201      	adds	r2, #1
    4462:	54a3      	strb	r3, [r4, r2]
    4464:	3201      	adds	r2, #1
    4466:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4468:	3201      	adds	r2, #1
    446a:	54a3      	strb	r3, [r4, r2]
    446c:	3201      	adds	r2, #1
    446e:	54a3      	strb	r3, [r4, r2]
    4470:	3201      	adds	r2, #1
    4472:	54a3      	strb	r3, [r4, r2]
    4474:	3201      	adds	r2, #1
    4476:	54a3      	strb	r3, [r4, r2]
    4478:	3201      	adds	r2, #1
    447a:	54a3      	strb	r3, [r4, r2]
    447c:	3201      	adds	r2, #1
    447e:	54a3      	strb	r3, [r4, r2]
    4480:	3201      	adds	r2, #1
    4482:	54a3      	strb	r3, [r4, r2]
    4484:	3201      	adds	r2, #1
    4486:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4488:	3241      	adds	r2, #65	; 0x41
    448a:	54a3      	strb	r3, [r4, r2]
    448c:	65a3      	str	r3, [r4, #88]	; 0x58
    448e:	67a3      	str	r3, [r4, #120]	; 0x78
    4490:	3201      	adds	r2, #1
    4492:	54a3      	strb	r3, [r4, r2]
    4494:	65e3      	str	r3, [r4, #92]	; 0x5c
    4496:	67e3      	str	r3, [r4, #124]	; 0x7c
    4498:	3201      	adds	r2, #1
    449a:	54a3      	strb	r3, [r4, r2]
    449c:	6623      	str	r3, [r4, #96]	; 0x60
    449e:	3a1a      	subs	r2, #26
    44a0:	50a3      	str	r3, [r4, r2]
    44a2:	321b      	adds	r2, #27
    44a4:	54a3      	strb	r3, [r4, r2]
    44a6:	6663      	str	r3, [r4, #100]	; 0x64
    44a8:	3a17      	subs	r2, #23
    44aa:	50a3      	str	r3, [r4, r2]
    44ac:	3218      	adds	r2, #24
    44ae:	54a3      	strb	r3, [r4, r2]
    44b0:	66a3      	str	r3, [r4, #104]	; 0x68
    44b2:	3a14      	subs	r2, #20
    44b4:	50a3      	str	r3, [r4, r2]
    44b6:	3215      	adds	r2, #21
    44b8:	54a3      	strb	r3, [r4, r2]
    44ba:	66e3      	str	r3, [r4, #108]	; 0x6c
    44bc:	3a11      	subs	r2, #17
    44be:	50a3      	str	r3, [r4, r2]
    44c0:	3212      	adds	r2, #18
    44c2:	54a3      	strb	r3, [r4, r2]
    44c4:	6723      	str	r3, [r4, #112]	; 0x70
    44c6:	3a0e      	subs	r2, #14
    44c8:	50a3      	str	r3, [r4, r2]
    44ca:	320f      	adds	r2, #15
    44cc:	54a3      	strb	r3, [r4, r2]
    44ce:	6763      	str	r3, [r4, #116]	; 0x74
    44d0:	3a0b      	subs	r2, #11
    44d2:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    44d4:	2101      	movs	r1, #1
    44d6:	320c      	adds	r2, #12
    44d8:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    44da:	3201      	adds	r2, #1
    44dc:	54a3      	strb	r3, [r4, r2]
}
    44de:	bd10      	pop	{r4, pc}
    44e0:	00004369 	.word	0x00004369
    44e4:	000117b8 	.word	0x000117b8

000044e8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    44e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ea:	46de      	mov	lr, fp
    44ec:	4657      	mov	r7, sl
    44ee:	464e      	mov	r6, r9
    44f0:	4645      	mov	r5, r8
    44f2:	b5e0      	push	{r5, r6, r7, lr}
    44f4:	b091      	sub	sp, #68	; 0x44
    44f6:	9001      	str	r0, [sp, #4]
    44f8:	000c      	movs	r4, r1
    44fa:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    44fc:	0008      	movs	r0, r1
    44fe:	4bc3      	ldr	r3, [pc, #780]	; (480c <tcc_init+0x324>)
    4500:	4798      	blx	r3
    4502:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    4504:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    4506:	48c2      	ldr	r0, [pc, #776]	; (4810 <tcc_init+0x328>)
    4508:	6a02      	ldr	r2, [r0, #32]
    450a:	009e      	lsls	r6, r3, #2
    450c:	4fc1      	ldr	r7, [pc, #772]	; (4814 <tcc_init+0x32c>)
    450e:	59f7      	ldr	r7, [r6, r7]
    4510:	433a      	orrs	r2, r7
    4512:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4514:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    4516:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4518:	0792      	lsls	r2, r2, #30
    451a:	d506      	bpl.n	452a <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    451c:	b011      	add	sp, #68	; 0x44
    451e:	bc3c      	pop	{r2, r3, r4, r5}
    4520:	4690      	mov	r8, r2
    4522:	4699      	mov	r9, r3
    4524:	46a2      	mov	sl, r4
    4526:	46ab      	mov	fp, r5
    4528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    452a:	6822      	ldr	r2, [r4, #0]
    452c:	2701      	movs	r7, #1
    452e:	4017      	ands	r7, r2
    4530:	d1f4      	bne.n	451c <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    4532:	48b9      	ldr	r0, [pc, #740]	; (4818 <tcc_init+0x330>)
    4534:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    4536:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    4538:	682e      	ldr	r6, [r5, #0]
    453a:	42b2      	cmp	r2, r6
    453c:	d3ee      	bcc.n	451c <tcc_init+0x34>
		|| (config->counter.period > count_max)
    453e:	686e      	ldr	r6, [r5, #4]
    4540:	42b2      	cmp	r2, r6
    4542:	d3eb      	bcc.n	451c <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    4544:	69e8      	ldr	r0, [r5, #28]
    4546:	4282      	cmp	r2, r0
    4548:	d200      	bcs.n	454c <tcc_init+0x64>
    454a:	e1b9      	b.n	48c0 <tcc_init+0x3d8>
    454c:	6a28      	ldr	r0, [r5, #32]
    454e:	4282      	cmp	r2, r0
    4550:	d200      	bcs.n	4554 <tcc_init+0x6c>
    4552:	e1b7      	b.n	48c4 <tcc_init+0x3dc>
    4554:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4556:	4282      	cmp	r2, r0
    4558:	d200      	bcs.n	455c <tcc_init+0x74>
    455a:	e1b5      	b.n	48c8 <tcc_init+0x3e0>
    455c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    455e:	4282      	cmp	r2, r0
    4560:	d200      	bcs.n	4564 <tcc_init+0x7c>
    4562:	e1b3      	b.n	48cc <tcc_init+0x3e4>
    4564:	2298      	movs	r2, #152	; 0x98
    4566:	4694      	mov	ip, r2
    4568:	44ac      	add	ip, r5
    456a:	4662      	mov	r2, ip
    456c:	9208      	str	r2, [sp, #32]
    456e:	2000      	movs	r0, #0
    4570:	e003      	b.n	457a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4572:	3001      	adds	r0, #1
    4574:	3201      	adds	r2, #1
    4576:	2808      	cmp	r0, #8
    4578:	d008      	beq.n	458c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    457a:	7816      	ldrb	r6, [r2, #0]
    457c:	2e00      	cmp	r6, #0
    457e:	d0f8      	beq.n	4572 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    4580:	4ea6      	ldr	r6, [pc, #664]	; (481c <tcc_init+0x334>)
    4582:	5c76      	ldrb	r6, [r6, r1]
    4584:	4286      	cmp	r6, r0
    4586:	dcf4      	bgt.n	4572 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    4588:	2017      	movs	r0, #23
    458a:	e7c7      	b.n	451c <tcc_init+0x34>
    458c:	2200      	movs	r2, #0
    458e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4590:	2080      	movs	r0, #128	; 0x80
    4592:	0440      	lsls	r0, r0, #17
    4594:	4684      	mov	ip, r0
    4596:	e002      	b.n	459e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4598:	3201      	adds	r2, #1
    459a:	2a04      	cmp	r2, #4
    459c:	d00e      	beq.n	45bc <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    459e:	18a8      	adds	r0, r5, r2
    45a0:	7c00      	ldrb	r0, [r0, #16]
    45a2:	2801      	cmp	r0, #1
    45a4:	d1f8      	bne.n	4598 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    45a6:	489e      	ldr	r0, [pc, #632]	; (4820 <tcc_init+0x338>)
    45a8:	5c40      	ldrb	r0, [r0, r1]
    45aa:	4290      	cmp	r0, r2
    45ac:	da00      	bge.n	45b0 <tcc_init+0xc8>
    45ae:	e18f      	b.n	48d0 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    45b0:	4660      	mov	r0, ip
    45b2:	4090      	lsls	r0, r2
    45b4:	9e02      	ldr	r6, [sp, #8]
    45b6:	4306      	orrs	r6, r0
    45b8:	9602      	str	r6, [sp, #8]
    45ba:	e7ed      	b.n	4598 <tcc_init+0xb0>
	if (config->run_in_standby) {
    45bc:	329d      	adds	r2, #157	; 0x9d
    45be:	5caa      	ldrb	r2, [r5, r2]
    45c0:	2a00      	cmp	r2, #0
    45c2:	d004      	beq.n	45ce <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    45c4:	2280      	movs	r2, #128	; 0x80
    45c6:	0112      	lsls	r2, r2, #4
    45c8:	9902      	ldr	r1, [sp, #8]
    45ca:	4311      	orrs	r1, r2
    45cc:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    45ce:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    45d0:	1e51      	subs	r1, r2, #1
    45d2:	418a      	sbcs	r2, r1
    45d4:	0092      	lsls	r2, r2, #2
    45d6:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    45d8:	7a6a      	ldrb	r2, [r5, #9]
    45da:	2a01      	cmp	r2, #1
    45dc:	d022      	beq.n	4624 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    45de:	4a90      	ldr	r2, [pc, #576]	; (4820 <tcc_init+0x338>)
    45e0:	5cd2      	ldrb	r2, [r2, r3]
    45e2:	0011      	movs	r1, r2
    45e4:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    45e6:	2235      	movs	r2, #53	; 0x35
    45e8:	5caa      	ldrb	r2, [r5, r2]
    45ea:	428a      	cmp	r2, r1
    45ec:	d300      	bcc.n	45f0 <tcc_init+0x108>
    45ee:	e179      	b.n	48e4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    45f0:	212c      	movs	r1, #44	; 0x2c
    45f2:	5c69      	ldrb	r1, [r5, r1]
    45f4:	290f      	cmp	r1, #15
    45f6:	d900      	bls.n	45fa <tcc_init+0x112>
    45f8:	e174      	b.n	48e4 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    45fa:	7b28      	ldrb	r0, [r5, #12]
    45fc:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    45fe:	7ae8      	ldrb	r0, [r5, #11]
    4600:	900b      	str	r0, [sp, #44]	; 0x2c
    4602:	202d      	movs	r0, #45	; 0x2d
    4604:	4682      	mov	sl, r0
    4606:	44aa      	add	sl, r5
    4608:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    460a:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    460c:	ae0e      	add	r6, sp, #56	; 0x38
    460e:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4610:	26c0      	movs	r6, #192	; 0xc0
    4612:	0136      	lsls	r6, r6, #4
    4614:	46b1      	mov	r9, r6
    4616:	4684      	mov	ip, r0
    4618:	46a0      	mov	r8, r4
    461a:	0028      	movs	r0, r5
    461c:	4655      	mov	r5, sl
    461e:	9309      	str	r3, [sp, #36]	; 0x24
    4620:	4682      	mov	sl, r0
    4622:	e035      	b.n	4690 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    4624:	9906      	ldr	r1, [sp, #24]
    4626:	4311      	orrs	r1, r2
    4628:	9106      	str	r1, [sp, #24]
    462a:	e7d8      	b.n	45de <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    462c:	0292      	lsls	r2, r2, #10
    462e:	464f      	mov	r7, r9
    4630:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4632:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    4634:	7919      	ldrb	r1, [r3, #4]
    4636:	468b      	mov	fp, r1
    4638:	2103      	movs	r1, #3
    463a:	465f      	mov	r7, fp
    463c:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    463e:	430a      	orrs	r2, r1
    4640:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    4642:	795a      	ldrb	r2, [r3, #5]
    4644:	0152      	lsls	r2, r2, #5
    4646:	2160      	movs	r1, #96	; 0x60
    4648:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    464a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    464c:	7999      	ldrb	r1, [r3, #6]
    464e:	0209      	lsls	r1, r1, #8
    4650:	26c0      	movs	r6, #192	; 0xc0
    4652:	00b6      	lsls	r6, r6, #2
    4654:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4656:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    4658:	79da      	ldrb	r2, [r3, #7]
    465a:	0312      	lsls	r2, r2, #12
    465c:	21e0      	movs	r1, #224	; 0xe0
    465e:	01c9      	lsls	r1, r1, #7
    4660:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4662:	4316      	orrs	r6, r2
    4664:	4334      	orrs	r4, r6
    4666:	9a03      	ldr	r2, [sp, #12]
    4668:	4314      	orrs	r4, r2
    466a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    466c:	4662      	mov	r2, ip
    466e:	9907      	ldr	r1, [sp, #28]
    4670:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    4672:	2a04      	cmp	r2, #4
    4674:	d02a      	beq.n	46cc <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    4676:	7c9a      	ldrb	r2, [r3, #18]
    4678:	9905      	ldr	r1, [sp, #20]
    467a:	4291      	cmp	r1, r2
    467c:	d800      	bhi.n	4680 <tcc_init+0x198>
    467e:	e131      	b.n	48e4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    4680:	7a59      	ldrb	r1, [r3, #9]
    4682:	350a      	adds	r5, #10
    4684:	2304      	movs	r3, #4
    4686:	469b      	mov	fp, r3
    4688:	44dc      	add	ip, fp
    468a:	290f      	cmp	r1, #15
    468c:	d900      	bls.n	4690 <tcc_init+0x1a8>
    468e:	e129      	b.n	48e4 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4690:	0609      	lsls	r1, r1, #24
    4692:	23f0      	movs	r3, #240	; 0xf0
    4694:	051b      	lsls	r3, r3, #20
    4696:	4019      	ands	r1, r3
    4698:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    469a:	782e      	ldrb	r6, [r5, #0]
    469c:	0436      	lsls	r6, r6, #16
    469e:	20ff      	movs	r0, #255	; 0xff
    46a0:	0400      	lsls	r0, r0, #16
    46a2:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    46a4:	7868      	ldrb	r0, [r5, #1]
    46a6:	2480      	movs	r4, #128	; 0x80
    46a8:	2800      	cmp	r0, #0
    46aa:	d100      	bne.n	46ae <tcc_init+0x1c6>
    46ac:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    46ae:	7898      	ldrb	r0, [r3, #2]
    46b0:	2708      	movs	r7, #8
    46b2:	9703      	str	r7, [sp, #12]
    46b4:	2800      	cmp	r0, #0
    46b6:	d101      	bne.n	46bc <tcc_init+0x1d4>
    46b8:	9804      	ldr	r0, [sp, #16]
    46ba:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    46bc:	78d8      	ldrb	r0, [r3, #3]
    46be:	4683      	mov	fp, r0
    46c0:	2010      	movs	r0, #16
    46c2:	465f      	mov	r7, fp
    46c4:	2f00      	cmp	r7, #0
    46c6:	d1b1      	bne.n	462c <tcc_init+0x144>
    46c8:	9804      	ldr	r0, [sp, #16]
    46ca:	e7af      	b.n	462c <tcc_init+0x144>
    46cc:	4644      	mov	r4, r8
    46ce:	4655      	mov	r5, sl
    46d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    46d2:	4a52      	ldr	r2, [pc, #328]	; (481c <tcc_init+0x334>)
    46d4:	5cd2      	ldrb	r2, [r2, r3]
    46d6:	4691      	mov	r9, r2
    46d8:	4651      	mov	r1, sl
    46da:	3150      	adds	r1, #80	; 0x50
    46dc:	4650      	mov	r0, sl
    46de:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    46e0:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    46e2:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    46e4:	2601      	movs	r6, #1
    46e6:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    46e8:	2602      	movs	r6, #2
    46ea:	36ff      	adds	r6, #255	; 0xff
    46ec:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    46ee:	2680      	movs	r6, #128	; 0x80
    46f0:	0276      	lsls	r6, r6, #9
    46f2:	46b0      	mov	r8, r6
    46f4:	46a4      	mov	ip, r4
    46f6:	001c      	movs	r4, r3
    46f8:	464b      	mov	r3, r9
    46fa:	e00f      	b.n	471c <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    46fc:	7806      	ldrb	r6, [r0, #0]
    46fe:	2e00      	cmp	r6, #0
    4700:	d007      	beq.n	4712 <tcc_init+0x22a>
			if (i >= ow_num) {
    4702:	4293      	cmp	r3, r2
    4704:	d800      	bhi.n	4708 <tcc_init+0x220>
    4706:	e0e7      	b.n	48d8 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    4708:	2e02      	cmp	r6, #2
    470a:	d014      	beq.n	4736 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    470c:	4656      	mov	r6, sl
    470e:	4096      	lsls	r6, r2
    4710:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4712:	3201      	adds	r2, #1
    4714:	3101      	adds	r1, #1
    4716:	3002      	adds	r0, #2
    4718:	2a08      	cmp	r2, #8
    471a:	d010      	beq.n	473e <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    471c:	780e      	ldrb	r6, [r1, #0]
    471e:	2e00      	cmp	r6, #0
    4720:	d0ec      	beq.n	46fc <tcc_init+0x214>
			if (i >= ow_num) {
    4722:	4293      	cmp	r3, r2
    4724:	d800      	bhi.n	4728 <tcc_init+0x240>
    4726:	e0d5      	b.n	48d4 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4728:	4646      	mov	r6, r8
    472a:	4096      	lsls	r6, r2
    472c:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    472e:	7806      	ldrb	r6, [r0, #0]
    4730:	2e00      	cmp	r6, #0
    4732:	d1e9      	bne.n	4708 <tcc_init+0x220>
    4734:	e7ed      	b.n	4712 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4736:	465e      	mov	r6, fp
    4738:	4096      	lsls	r6, r2
    473a:	4337      	orrs	r7, r6
    473c:	e7e9      	b.n	4712 <tcc_init+0x22a>
    473e:	4699      	mov	r9, r3
    4740:	0023      	movs	r3, r4
    4742:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4744:	7e6a      	ldrb	r2, [r5, #25]
    4746:	0112      	lsls	r2, r2, #4
    4748:	2130      	movs	r1, #48	; 0x30
    474a:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    474c:	7e28      	ldrb	r0, [r5, #24]
    474e:	2207      	movs	r2, #7
    4750:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4752:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4754:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    4756:	2080      	movs	r0, #128	; 0x80
    4758:	0240      	lsls	r0, r0, #9
    475a:	000e      	movs	r6, r1
    475c:	e002      	b.n	4764 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    475e:	3201      	adds	r2, #1
    4760:	2a04      	cmp	r2, #4
    4762:	d00b      	beq.n	477c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    4764:	18a9      	adds	r1, r5, r2
    4766:	7d09      	ldrb	r1, [r1, #20]
    4768:	2900      	cmp	r1, #0
    476a:	d0f8      	beq.n	475e <tcc_init+0x276>
			if (n >= cc_num) {
    476c:	9905      	ldr	r1, [sp, #20]
    476e:	4291      	cmp	r1, r2
    4770:	dc00      	bgt.n	4774 <tcc_init+0x28c>
    4772:	e0b3      	b.n	48dc <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    4774:	0001      	movs	r1, r0
    4776:	4091      	lsls	r1, r2
    4778:	430e      	orrs	r6, r1
    477a:	e7f0      	b.n	475e <tcc_init+0x276>
    477c:	46b2      	mov	sl, r6
    477e:	9801      	ldr	r0, [sp, #4]
    4780:	0002      	movs	r2, r0
    4782:	3204      	adds	r2, #4
    4784:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    4786:	2100      	movs	r1, #0
    4788:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    478a:	4282      	cmp	r2, r0
    478c:	d1fc      	bne.n	4788 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    478e:	2200      	movs	r2, #0
    4790:	9801      	ldr	r0, [sp, #4]
    4792:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    4794:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    4796:	0099      	lsls	r1, r3, #2
    4798:	4a22      	ldr	r2, [pc, #136]	; (4824 <tcc_init+0x33c>)
    479a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    479c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    479e:	22a0      	movs	r2, #160	; 0xa0
    47a0:	5ca9      	ldrb	r1, [r5, r2]
    47a2:	3a64      	subs	r2, #100	; 0x64
    47a4:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    47a6:	a90d      	add	r1, sp, #52	; 0x34
    47a8:	7aaa      	ldrb	r2, [r5, #10]
    47aa:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    47ac:	4a1e      	ldr	r2, [pc, #120]	; (4828 <tcc_init+0x340>)
    47ae:	5cd6      	ldrb	r6, [r2, r3]
    47b0:	0030      	movs	r0, r6
    47b2:	4b1e      	ldr	r3, [pc, #120]	; (482c <tcc_init+0x344>)
    47b4:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    47b6:	0030      	movs	r0, r6
    47b8:	4b1d      	ldr	r3, [pc, #116]	; (4830 <tcc_init+0x348>)
    47ba:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    47bc:	464b      	mov	r3, r9
    47be:	2b00      	cmp	r3, #0
    47c0:	dd3c      	ble.n	483c <tcc_init+0x354>
    47c2:	002e      	movs	r6, r5
    47c4:	3658      	adds	r6, #88	; 0x58
    47c6:	3398      	adds	r3, #152	; 0x98
    47c8:	4698      	mov	r8, r3
    47ca:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    47cc:	2301      	movs	r3, #1
    47ce:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    47d0:	46ab      	mov	fp, r5
    47d2:	4645      	mov	r5, r8
    47d4:	46a0      	mov	r8, r4
    47d6:	9c08      	ldr	r4, [sp, #32]
    47d8:	e003      	b.n	47e2 <tcc_init+0x2fa>
    47da:	3401      	adds	r4, #1
    47dc:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    47de:	42ac      	cmp	r4, r5
    47e0:	d02a      	beq.n	4838 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    47e2:	7823      	ldrb	r3, [r4, #0]
    47e4:	2b00      	cmp	r3, #0
    47e6:	d0f8      	beq.n	47da <tcc_init+0x2f2>
    47e8:	ab0c      	add	r3, sp, #48	; 0x30
    47ea:	464a      	mov	r2, r9
    47ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    47ee:	2300      	movs	r3, #0
    47f0:	aa0c      	add	r2, sp, #48	; 0x30
    47f2:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    47f4:	0013      	movs	r3, r2
    47f6:	2220      	movs	r2, #32
    47f8:	18b2      	adds	r2, r6, r2
    47fa:	7812      	ldrb	r2, [r2, #0]
    47fc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    47fe:	464a      	mov	r2, r9
    4800:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    4802:	7830      	ldrb	r0, [r6, #0]
    4804:	0019      	movs	r1, r3
    4806:	4b0b      	ldr	r3, [pc, #44]	; (4834 <tcc_init+0x34c>)
    4808:	4798      	blx	r3
    480a:	e7e6      	b.n	47da <tcc_init+0x2f2>
    480c:	00004369 	.word	0x00004369
    4810:	40000400 	.word	0x40000400
    4814:	000117a4 	.word	0x000117a4
    4818:	000117b8 	.word	0x000117b8
    481c:	000117c4 	.word	0x000117c4
    4820:	000117b0 	.word	0x000117b0
    4824:	20000898 	.word	0x20000898
    4828:	000117b4 	.word	0x000117b4
    482c:	00009a01 	.word	0x00009a01
    4830:	00009975 	.word	0x00009975
    4834:	00009af9 	.word	0x00009af9
    4838:	4644      	mov	r4, r8
    483a:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    483c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    483e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4842:	0212      	lsls	r2, r2, #8
    4844:	4313      	orrs	r3, r2
    4846:	9a02      	ldr	r2, [sp, #8]
    4848:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    484a:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    484c:	2204      	movs	r2, #4
    484e:	68a3      	ldr	r3, [r4, #8]
    4850:	421a      	tst	r2, r3
    4852:	d1fc      	bne.n	484e <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    4854:	23ff      	movs	r3, #255	; 0xff
    4856:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    4858:	2204      	movs	r2, #4
    485a:	68a3      	ldr	r3, [r4, #8]
    485c:	421a      	tst	r2, r3
    485e:	d1fc      	bne.n	485a <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    4860:	466b      	mov	r3, sp
    4862:	7e1b      	ldrb	r3, [r3, #24]
    4864:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    4866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4868:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    486a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    486c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    486e:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    4870:	4a1d      	ldr	r2, [pc, #116]	; (48e8 <tcc_init+0x400>)
    4872:	68a3      	ldr	r3, [r4, #8]
    4874:	4213      	tst	r3, r2
    4876:	d1fc      	bne.n	4872 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    4878:	4653      	mov	r3, sl
    487a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    487c:	2210      	movs	r2, #16
    487e:	68a3      	ldr	r3, [r4, #8]
    4880:	421a      	tst	r2, r3
    4882:	d1fc      	bne.n	487e <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    4884:	682b      	ldr	r3, [r5, #0]
    4886:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    4888:	4a18      	ldr	r2, [pc, #96]	; (48ec <tcc_init+0x404>)
    488a:	68a3      	ldr	r3, [r4, #8]
    488c:	4213      	tst	r3, r2
    488e:	d1fc      	bne.n	488a <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    4890:	686b      	ldr	r3, [r5, #4]
    4892:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    4894:	9805      	ldr	r0, [sp, #20]
    4896:	2800      	cmp	r0, #0
    4898:	dd22      	ble.n	48e0 <tcc_init+0x3f8>
    489a:	351c      	adds	r5, #28
    489c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    489e:	4e14      	ldr	r6, [pc, #80]	; (48f0 <tcc_init+0x408>)
    48a0:	0032      	movs	r2, r6
    48a2:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    48a4:	68a3      	ldr	r3, [r4, #8]
    48a6:	421a      	tst	r2, r3
    48a8:	d1fc      	bne.n	48a4 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    48aa:	cd04      	ldmia	r5!, {r2}
    48ac:	000b      	movs	r3, r1
    48ae:	3310      	adds	r3, #16
    48b0:	009b      	lsls	r3, r3, #2
    48b2:	18e3      	adds	r3, r4, r3
    48b4:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    48b6:	3101      	adds	r1, #1
    48b8:	4288      	cmp	r0, r1
    48ba:	dcf1      	bgt.n	48a0 <tcc_init+0x3b8>
	return STATUS_OK;
    48bc:	2000      	movs	r0, #0
    48be:	e62d      	b.n	451c <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    48c0:	2017      	movs	r0, #23
    48c2:	e62b      	b.n	451c <tcc_init+0x34>
    48c4:	2017      	movs	r0, #23
    48c6:	e629      	b.n	451c <tcc_init+0x34>
    48c8:	2017      	movs	r0, #23
    48ca:	e627      	b.n	451c <tcc_init+0x34>
    48cc:	2017      	movs	r0, #23
    48ce:	e625      	b.n	451c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    48d0:	2017      	movs	r0, #23
    48d2:	e623      	b.n	451c <tcc_init+0x34>
			if (i >= ow_num) {
    48d4:	2017      	movs	r0, #23
    48d6:	e621      	b.n	451c <tcc_init+0x34>
			if (i >= ow_num) {
    48d8:	2017      	movs	r0, #23
    48da:	e61f      	b.n	451c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    48dc:	2017      	movs	r0, #23
    48de:	e61d      	b.n	451c <tcc_init+0x34>
	return STATUS_OK;
    48e0:	2000      	movs	r0, #0
    48e2:	e61b      	b.n	451c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    48e4:	2017      	movs	r0, #23
    48e6:	e619      	b.n	451c <tcc_init+0x34>
    48e8:	00020040 	.word	0x00020040
    48ec:	00040080 	.word	0x00040080
    48f0:	00080100 	.word	0x00080100

000048f4 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    48f4:	0092      	lsls	r2, r2, #2
    48f6:	1883      	adds	r3, r0, r2
    48f8:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    48fa:	4b03      	ldr	r3, [pc, #12]	; (4908 <tcc_register_callback+0x14>)
    48fc:	58d3      	ldr	r3, [r2, r3]
    48fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4900:	4313      	orrs	r3, r2
    4902:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    4904:	2000      	movs	r0, #0
    4906:	4770      	bx	lr
    4908:	000117c8 	.word	0x000117c8

0000490c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    490c:	b570      	push	{r4, r5, r6, lr}
    490e:	0004      	movs	r4, r0
    4910:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    4912:	6800      	ldr	r0, [r0, #0]
    4914:	4b09      	ldr	r3, [pc, #36]	; (493c <tcc_enable_callback+0x30>)
    4916:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    4918:	4b09      	ldr	r3, [pc, #36]	; (4940 <tcc_enable_callback+0x34>)
    491a:	5c1b      	ldrb	r3, [r3, r0]
    491c:	221f      	movs	r2, #31
    491e:	401a      	ands	r2, r3
    4920:	2301      	movs	r3, #1
    4922:	4093      	lsls	r3, r2
    4924:	4a07      	ldr	r2, [pc, #28]	; (4944 <tcc_enable_callback+0x38>)
    4926:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    4928:	00ad      	lsls	r5, r5, #2
    492a:	4b07      	ldr	r3, [pc, #28]	; (4948 <tcc_enable_callback+0x3c>)
    492c:	58ea      	ldr	r2, [r5, r3]
    492e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4930:	4313      	orrs	r3, r2
    4932:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    4934:	6823      	ldr	r3, [r4, #0]
    4936:	629a      	str	r2, [r3, #40]	; 0x28
}
    4938:	bd70      	pop	{r4, r5, r6, pc}
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	00004369 	.word	0x00004369
    4940:	000117f8 	.word	0x000117f8
    4944:	e000e100 	.word	0xe000e100
    4948:	000117c8 	.word	0x000117c8

0000494c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    494c:	b5f0      	push	{r4, r5, r6, r7, lr}
    494e:	46c6      	mov	lr, r8
    4950:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    4952:	0080      	lsls	r0, r0, #2
    4954:	4b0e      	ldr	r3, [pc, #56]	; (4990 <_tcc_interrupt_handler+0x44>)
    4956:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    4958:	683b      	ldr	r3, [r7, #0]
    495a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    495e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4960:	4013      	ands	r3, r2
    4962:	401e      	ands	r6, r3
    4964:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    4966:	4b0b      	ldr	r3, [pc, #44]	; (4994 <_tcc_interrupt_handler+0x48>)
    4968:	4698      	mov	r8, r3
    496a:	e002      	b.n	4972 <_tcc_interrupt_handler+0x26>
    496c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    496e:	2c30      	cmp	r4, #48	; 0x30
    4970:	d00a      	beq.n	4988 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    4972:	4643      	mov	r3, r8
    4974:	58e5      	ldr	r5, [r4, r3]
    4976:	4235      	tst	r5, r6
    4978:	d0f8      	beq.n	496c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    497a:	193b      	adds	r3, r7, r4
    497c:	685b      	ldr	r3, [r3, #4]
    497e:	0038      	movs	r0, r7
    4980:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    4982:	683b      	ldr	r3, [r7, #0]
    4984:	62dd      	str	r5, [r3, #44]	; 0x2c
    4986:	e7f1      	b.n	496c <_tcc_interrupt_handler+0x20>
		}
	}
}
    4988:	bc04      	pop	{r2}
    498a:	4690      	mov	r8, r2
    498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    498e:	46c0      	nop			; (mov r8, r8)
    4990:	20000898 	.word	0x20000898
    4994:	000117c8 	.word	0x000117c8

00004998 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    4998:	b510      	push	{r4, lr}
    499a:	2000      	movs	r0, #0
    499c:	4b01      	ldr	r3, [pc, #4]	; (49a4 <TCC0_Handler+0xc>)
    499e:	4798      	blx	r3
    49a0:	bd10      	pop	{r4, pc}
    49a2:	46c0      	nop			; (mov r8, r8)
    49a4:	0000494d 	.word	0x0000494d

000049a8 <TCC1_Handler>:
    49a8:	b510      	push	{r4, lr}
    49aa:	2001      	movs	r0, #1
    49ac:	4b01      	ldr	r3, [pc, #4]	; (49b4 <TCC1_Handler+0xc>)
    49ae:	4798      	blx	r3
    49b0:	bd10      	pop	{r4, pc}
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	0000494d 	.word	0x0000494d

000049b8 <TCC2_Handler>:
    49b8:	b510      	push	{r4, lr}
    49ba:	2002      	movs	r0, #2
    49bc:	4b01      	ldr	r3, [pc, #4]	; (49c4 <TCC2_Handler+0xc>)
    49be:	4798      	blx	r3
    49c0:	bd10      	pop	{r4, pc}
    49c2:	46c0      	nop			; (mov r8, r8)
    49c4:	0000494d 	.word	0x0000494d

000049c8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    49c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ca:	46de      	mov	lr, fp
    49cc:	4657      	mov	r7, sl
    49ce:	464e      	mov	r6, r9
    49d0:	4645      	mov	r5, r8
    49d2:	b5e0      	push	{r5, r6, r7, lr}
    49d4:	b091      	sub	sp, #68	; 0x44
    49d6:	0005      	movs	r5, r0
    49d8:	000c      	movs	r4, r1
    49da:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    49dc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    49de:	0008      	movs	r0, r1
    49e0:	4bbc      	ldr	r3, [pc, #752]	; (4cd4 <usart_init+0x30c>)
    49e2:	4798      	blx	r3
    49e4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    49e6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    49e8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    49ea:	07db      	lsls	r3, r3, #31
    49ec:	d506      	bpl.n	49fc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    49ee:	b011      	add	sp, #68	; 0x44
    49f0:	bc3c      	pop	{r2, r3, r4, r5}
    49f2:	4690      	mov	r8, r2
    49f4:	4699      	mov	r9, r3
    49f6:	46a2      	mov	sl, r4
    49f8:	46ab      	mov	fp, r5
    49fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    49fc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    49fe:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4a00:	079b      	lsls	r3, r3, #30
    4a02:	d4f4      	bmi.n	49ee <usart_init+0x26>
    4a04:	49b4      	ldr	r1, [pc, #720]	; (4cd8 <usart_init+0x310>)
    4a06:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4a08:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4a0a:	2301      	movs	r3, #1
    4a0c:	40bb      	lsls	r3, r7
    4a0e:	4303      	orrs	r3, r0
    4a10:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4a12:	a90f      	add	r1, sp, #60	; 0x3c
    4a14:	272d      	movs	r7, #45	; 0x2d
    4a16:	5df3      	ldrb	r3, [r6, r7]
    4a18:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a1a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4a1c:	b2d3      	uxtb	r3, r2
    4a1e:	9302      	str	r3, [sp, #8]
    4a20:	0018      	movs	r0, r3
    4a22:	4bae      	ldr	r3, [pc, #696]	; (4cdc <usart_init+0x314>)
    4a24:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4a26:	9802      	ldr	r0, [sp, #8]
    4a28:	4bad      	ldr	r3, [pc, #692]	; (4ce0 <usart_init+0x318>)
    4a2a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4a2c:	5df0      	ldrb	r0, [r6, r7]
    4a2e:	2100      	movs	r1, #0
    4a30:	4bac      	ldr	r3, [pc, #688]	; (4ce4 <usart_init+0x31c>)
    4a32:	4798      	blx	r3
	module->character_size = config->character_size;
    4a34:	7af3      	ldrb	r3, [r6, #11]
    4a36:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4a38:	2324      	movs	r3, #36	; 0x24
    4a3a:	5cf3      	ldrb	r3, [r6, r3]
    4a3c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4a3e:	2325      	movs	r3, #37	; 0x25
    4a40:	5cf3      	ldrb	r3, [r6, r3]
    4a42:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4a44:	7ef3      	ldrb	r3, [r6, #27]
    4a46:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4a48:	7f33      	ldrb	r3, [r6, #28]
    4a4a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a4c:	682b      	ldr	r3, [r5, #0]
    4a4e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4a50:	0018      	movs	r0, r3
    4a52:	4ba0      	ldr	r3, [pc, #640]	; (4cd4 <usart_init+0x30c>)
    4a54:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a56:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    4a58:	2200      	movs	r2, #0
    4a5a:	230e      	movs	r3, #14
    4a5c:	a906      	add	r1, sp, #24
    4a5e:	468c      	mov	ip, r1
    4a60:	4463      	add	r3, ip
    4a62:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    4a64:	8a32      	ldrh	r2, [r6, #16]
    4a66:	9202      	str	r2, [sp, #8]
    4a68:	2380      	movs	r3, #128	; 0x80
    4a6a:	01db      	lsls	r3, r3, #7
    4a6c:	429a      	cmp	r2, r3
    4a6e:	d100      	bne.n	4a72 <usart_init+0xaa>
    4a70:	e09e      	b.n	4bb0 <usart_init+0x1e8>
    4a72:	d90f      	bls.n	4a94 <usart_init+0xcc>
    4a74:	23c0      	movs	r3, #192	; 0xc0
    4a76:	01db      	lsls	r3, r3, #7
    4a78:	9a02      	ldr	r2, [sp, #8]
    4a7a:	429a      	cmp	r2, r3
    4a7c:	d100      	bne.n	4a80 <usart_init+0xb8>
    4a7e:	e092      	b.n	4ba6 <usart_init+0x1de>
    4a80:	2380      	movs	r3, #128	; 0x80
    4a82:	021b      	lsls	r3, r3, #8
    4a84:	429a      	cmp	r2, r3
    4a86:	d000      	beq.n	4a8a <usart_init+0xc2>
    4a88:	e11f      	b.n	4cca <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4a8a:	2303      	movs	r3, #3
    4a8c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4a8e:	2300      	movs	r3, #0
    4a90:	9307      	str	r3, [sp, #28]
    4a92:	e008      	b.n	4aa6 <usart_init+0xde>
	switch (config->sample_rate) {
    4a94:	2380      	movs	r3, #128	; 0x80
    4a96:	019b      	lsls	r3, r3, #6
    4a98:	429a      	cmp	r2, r3
    4a9a:	d000      	beq.n	4a9e <usart_init+0xd6>
    4a9c:	e115      	b.n	4cca <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4a9e:	2310      	movs	r3, #16
    4aa0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4aa2:	3b0f      	subs	r3, #15
    4aa4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    4aa6:	6833      	ldr	r3, [r6, #0]
    4aa8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4aaa:	68f3      	ldr	r3, [r6, #12]
    4aac:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4aae:	6973      	ldr	r3, [r6, #20]
    4ab0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4ab2:	7e33      	ldrb	r3, [r6, #24]
    4ab4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4ab6:	2326      	movs	r3, #38	; 0x26
    4ab8:	5cf3      	ldrb	r3, [r6, r3]
    4aba:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4abc:	6873      	ldr	r3, [r6, #4]
    4abe:	4699      	mov	r9, r3
	switch (transfer_mode)
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d100      	bne.n	4ac6 <usart_init+0xfe>
    4ac4:	e0a0      	b.n	4c08 <usart_init+0x240>
    4ac6:	2380      	movs	r3, #128	; 0x80
    4ac8:	055b      	lsls	r3, r3, #21
    4aca:	4599      	cmp	r9, r3
    4acc:	d100      	bne.n	4ad0 <usart_init+0x108>
    4ace:	e084      	b.n	4bda <usart_init+0x212>
	if(config->encoding_format_enable) {
    4ad0:	7e73      	ldrb	r3, [r6, #25]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d002      	beq.n	4adc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4ad6:	7eb3      	ldrb	r3, [r6, #26]
    4ad8:	4642      	mov	r2, r8
    4ada:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4adc:	682a      	ldr	r2, [r5, #0]
    4ade:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    4ae0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d1fc      	bne.n	4ae0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    4ae6:	330e      	adds	r3, #14
    4ae8:	aa06      	add	r2, sp, #24
    4aea:	4694      	mov	ip, r2
    4aec:	4463      	add	r3, ip
    4aee:	881b      	ldrh	r3, [r3, #0]
    4af0:	4642      	mov	r2, r8
    4af2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4af4:	9b05      	ldr	r3, [sp, #20]
    4af6:	9a03      	ldr	r2, [sp, #12]
    4af8:	4313      	orrs	r3, r2
    4afa:	9a04      	ldr	r2, [sp, #16]
    4afc:	4313      	orrs	r3, r2
    4afe:	464a      	mov	r2, r9
    4b00:	4313      	orrs	r3, r2
    4b02:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4b04:	465b      	mov	r3, fp
    4b06:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4b08:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4b0a:	4653      	mov	r3, sl
    4b0c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4b0e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4b10:	2327      	movs	r3, #39	; 0x27
    4b12:	5cf3      	ldrb	r3, [r6, r3]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d101      	bne.n	4b1c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4b18:	3304      	adds	r3, #4
    4b1a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4b1c:	7e73      	ldrb	r3, [r6, #25]
    4b1e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4b20:	7f32      	ldrb	r2, [r6, #28]
    4b22:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4b24:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4b26:	7f72      	ldrb	r2, [r6, #29]
    4b28:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4b2a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4b2c:	2224      	movs	r2, #36	; 0x24
    4b2e:	5cb2      	ldrb	r2, [r6, r2]
    4b30:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4b32:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4b34:	2225      	movs	r2, #37	; 0x25
    4b36:	5cb2      	ldrb	r2, [r6, r2]
    4b38:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4b3a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4b3c:	7ab1      	ldrb	r1, [r6, #10]
    4b3e:	7af2      	ldrb	r2, [r6, #11]
    4b40:	4311      	orrs	r1, r2
    4b42:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4b44:	8933      	ldrh	r3, [r6, #8]
    4b46:	2bff      	cmp	r3, #255	; 0xff
    4b48:	d100      	bne.n	4b4c <usart_init+0x184>
    4b4a:	e081      	b.n	4c50 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4b4c:	2280      	movs	r2, #128	; 0x80
    4b4e:	0452      	lsls	r2, r2, #17
    4b50:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4b52:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4b54:	232c      	movs	r3, #44	; 0x2c
    4b56:	5cf3      	ldrb	r3, [r6, r3]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d103      	bne.n	4b64 <usart_init+0x19c>
    4b5c:	4b62      	ldr	r3, [pc, #392]	; (4ce8 <usart_init+0x320>)
    4b5e:	789b      	ldrb	r3, [r3, #2]
    4b60:	079b      	lsls	r3, r3, #30
    4b62:	d501      	bpl.n	4b68 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4b64:	2380      	movs	r3, #128	; 0x80
    4b66:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b68:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4b6a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d1fc      	bne.n	4b6a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4b70:	4643      	mov	r3, r8
    4b72:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b74:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4b76:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d1fc      	bne.n	4b76 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4b7c:	4643      	mov	r3, r8
    4b7e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4b80:	ab0e      	add	r3, sp, #56	; 0x38
    4b82:	2280      	movs	r2, #128	; 0x80
    4b84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b86:	2200      	movs	r2, #0
    4b88:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4b8a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4b8c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4b8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4b90:	930a      	str	r3, [sp, #40]	; 0x28
    4b92:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4b94:	930b      	str	r3, [sp, #44]	; 0x2c
    4b96:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4b98:	930c      	str	r3, [sp, #48]	; 0x30
    4b9a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4b9c:	9302      	str	r3, [sp, #8]
    4b9e:	930d      	str	r3, [sp, #52]	; 0x34
    4ba0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4ba2:	ae0a      	add	r6, sp, #40	; 0x28
    4ba4:	e063      	b.n	4c6e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4ba6:	2308      	movs	r3, #8
    4ba8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4baa:	3b07      	subs	r3, #7
    4bac:	9307      	str	r3, [sp, #28]
    4bae:	e77a      	b.n	4aa6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4bb0:	6833      	ldr	r3, [r6, #0]
    4bb2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4bb4:	68f3      	ldr	r3, [r6, #12]
    4bb6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4bb8:	6973      	ldr	r3, [r6, #20]
    4bba:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4bbc:	7e33      	ldrb	r3, [r6, #24]
    4bbe:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4bc0:	2326      	movs	r3, #38	; 0x26
    4bc2:	5cf3      	ldrb	r3, [r6, r3]
    4bc4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4bc6:	6873      	ldr	r3, [r6, #4]
    4bc8:	4699      	mov	r9, r3
	switch (transfer_mode)
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d018      	beq.n	4c00 <usart_init+0x238>
    4bce:	2380      	movs	r3, #128	; 0x80
    4bd0:	055b      	lsls	r3, r3, #21
    4bd2:	4599      	cmp	r9, r3
    4bd4:	d001      	beq.n	4bda <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    4bd6:	2000      	movs	r0, #0
    4bd8:	e025      	b.n	4c26 <usart_init+0x25e>
			if (!config->use_external_clock) {
    4bda:	2327      	movs	r3, #39	; 0x27
    4bdc:	5cf3      	ldrb	r3, [r6, r3]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d000      	beq.n	4be4 <usart_init+0x21c>
    4be2:	e775      	b.n	4ad0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4be4:	6a33      	ldr	r3, [r6, #32]
    4be6:	001f      	movs	r7, r3
    4be8:	b2c0      	uxtb	r0, r0
    4bea:	4b40      	ldr	r3, [pc, #256]	; (4cec <usart_init+0x324>)
    4bec:	4798      	blx	r3
    4bee:	0001      	movs	r1, r0
    4bf0:	220e      	movs	r2, #14
    4bf2:	ab06      	add	r3, sp, #24
    4bf4:	469c      	mov	ip, r3
    4bf6:	4462      	add	r2, ip
    4bf8:	0038      	movs	r0, r7
    4bfa:	4b3d      	ldr	r3, [pc, #244]	; (4cf0 <usart_init+0x328>)
    4bfc:	4798      	blx	r3
    4bfe:	e012      	b.n	4c26 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4c00:	2308      	movs	r3, #8
    4c02:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4c04:	2300      	movs	r3, #0
    4c06:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4c08:	2327      	movs	r3, #39	; 0x27
    4c0a:	5cf3      	ldrb	r3, [r6, r3]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d00e      	beq.n	4c2e <usart_init+0x266>
				status_code =
    4c10:	9b06      	ldr	r3, [sp, #24]
    4c12:	9300      	str	r3, [sp, #0]
    4c14:	9b07      	ldr	r3, [sp, #28]
    4c16:	220e      	movs	r2, #14
    4c18:	a906      	add	r1, sp, #24
    4c1a:	468c      	mov	ip, r1
    4c1c:	4462      	add	r2, ip
    4c1e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4c20:	6a30      	ldr	r0, [r6, #32]
    4c22:	4f34      	ldr	r7, [pc, #208]	; (4cf4 <usart_init+0x32c>)
    4c24:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    4c26:	2800      	cmp	r0, #0
    4c28:	d000      	beq.n	4c2c <usart_init+0x264>
    4c2a:	e6e0      	b.n	49ee <usart_init+0x26>
    4c2c:	e750      	b.n	4ad0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    4c2e:	6a33      	ldr	r3, [r6, #32]
    4c30:	001f      	movs	r7, r3
    4c32:	b2c0      	uxtb	r0, r0
    4c34:	4b2d      	ldr	r3, [pc, #180]	; (4cec <usart_init+0x324>)
    4c36:	4798      	blx	r3
    4c38:	0001      	movs	r1, r0
				status_code =
    4c3a:	9b06      	ldr	r3, [sp, #24]
    4c3c:	9300      	str	r3, [sp, #0]
    4c3e:	9b07      	ldr	r3, [sp, #28]
    4c40:	220e      	movs	r2, #14
    4c42:	a806      	add	r0, sp, #24
    4c44:	4684      	mov	ip, r0
    4c46:	4462      	add	r2, ip
    4c48:	0038      	movs	r0, r7
    4c4a:	4f2a      	ldr	r7, [pc, #168]	; (4cf4 <usart_init+0x32c>)
    4c4c:	47b8      	blx	r7
    4c4e:	e7ea      	b.n	4c26 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    4c50:	7ef3      	ldrb	r3, [r6, #27]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d100      	bne.n	4c58 <usart_init+0x290>
    4c56:	e77d      	b.n	4b54 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4c58:	2380      	movs	r3, #128	; 0x80
    4c5a:	04db      	lsls	r3, r3, #19
    4c5c:	431f      	orrs	r7, r3
    4c5e:	e779      	b.n	4b54 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4c60:	0020      	movs	r0, r4
    4c62:	4b25      	ldr	r3, [pc, #148]	; (4cf8 <usart_init+0x330>)
    4c64:	4798      	blx	r3
    4c66:	e007      	b.n	4c78 <usart_init+0x2b0>
    4c68:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4c6a:	2f04      	cmp	r7, #4
    4c6c:	d00d      	beq.n	4c8a <usart_init+0x2c2>
    4c6e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4c70:	00bb      	lsls	r3, r7, #2
    4c72:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4c74:	2800      	cmp	r0, #0
    4c76:	d0f3      	beq.n	4c60 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    4c78:	1c43      	adds	r3, r0, #1
    4c7a:	d0f5      	beq.n	4c68 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4c7c:	a90e      	add	r1, sp, #56	; 0x38
    4c7e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4c80:	0c00      	lsrs	r0, r0, #16
    4c82:	b2c0      	uxtb	r0, r0
    4c84:	4b1d      	ldr	r3, [pc, #116]	; (4cfc <usart_init+0x334>)
    4c86:	4798      	blx	r3
    4c88:	e7ee      	b.n	4c68 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    4c8a:	2300      	movs	r3, #0
    4c8c:	60eb      	str	r3, [r5, #12]
    4c8e:	612b      	str	r3, [r5, #16]
    4c90:	616b      	str	r3, [r5, #20]
    4c92:	61ab      	str	r3, [r5, #24]
    4c94:	61eb      	str	r3, [r5, #28]
    4c96:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4c98:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4c9a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4c9c:	2200      	movs	r2, #0
    4c9e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4ca0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4ca2:	3330      	adds	r3, #48	; 0x30
    4ca4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4ca6:	3301      	adds	r3, #1
    4ca8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4caa:	3301      	adds	r3, #1
    4cac:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4cae:	3301      	adds	r3, #1
    4cb0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4cb2:	6828      	ldr	r0, [r5, #0]
    4cb4:	4b07      	ldr	r3, [pc, #28]	; (4cd4 <usart_init+0x30c>)
    4cb6:	4798      	blx	r3
    4cb8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4cba:	4911      	ldr	r1, [pc, #68]	; (4d00 <usart_init+0x338>)
    4cbc:	4b11      	ldr	r3, [pc, #68]	; (4d04 <usart_init+0x33c>)
    4cbe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4cc0:	00a4      	lsls	r4, r4, #2
    4cc2:	4b11      	ldr	r3, [pc, #68]	; (4d08 <usart_init+0x340>)
    4cc4:	50e5      	str	r5, [r4, r3]
	return status_code;
    4cc6:	2000      	movs	r0, #0
    4cc8:	e691      	b.n	49ee <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4cca:	2310      	movs	r3, #16
    4ccc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4cce:	2300      	movs	r3, #0
    4cd0:	9307      	str	r3, [sp, #28]
    4cd2:	e6e8      	b.n	4aa6 <usart_init+0xde>
    4cd4:	00005ad1 	.word	0x00005ad1
    4cd8:	40000400 	.word	0x40000400
    4cdc:	00009a01 	.word	0x00009a01
    4ce0:	00009975 	.word	0x00009975
    4ce4:	0000590d 	.word	0x0000590d
    4ce8:	41002000 	.word	0x41002000
    4cec:	00009a1d 	.word	0x00009a1d
    4cf0:	0000584f 	.word	0x0000584f
    4cf4:	00005879 	.word	0x00005879
    4cf8:	00005959 	.word	0x00005959
    4cfc:	00009af9 	.word	0x00009af9
    4d00:	00004da9 	.word	0x00004da9
    4d04:	00005b0d 	.word	0x00005b0d
    4d08:	200008a8 	.word	0x200008a8

00004d0c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4d0c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4d0e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4d10:	2a00      	cmp	r2, #0
    4d12:	d101      	bne.n	4d18 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4d14:	0018      	movs	r0, r3
    4d16:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4d18:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4d1a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4d1c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4d1e:	2a00      	cmp	r2, #0
    4d20:	d1f8      	bne.n	4d14 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d22:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    4d24:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4d26:	2a00      	cmp	r2, #0
    4d28:	d1fc      	bne.n	4d24 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    4d2a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4d2c:	2102      	movs	r1, #2
    4d2e:	7e1a      	ldrb	r2, [r3, #24]
    4d30:	420a      	tst	r2, r1
    4d32:	d0fc      	beq.n	4d2e <usart_write_wait+0x22>
	return STATUS_OK;
    4d34:	2300      	movs	r3, #0
    4d36:	e7ed      	b.n	4d14 <usart_write_wait+0x8>

00004d38 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4d38:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4d3a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4d3c:	2a00      	cmp	r2, #0
    4d3e:	d101      	bne.n	4d44 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4d40:	0018      	movs	r0, r3
    4d42:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    4d44:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4d46:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4d48:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4d4a:	2a00      	cmp	r2, #0
    4d4c:	d1f8      	bne.n	4d40 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d4e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4d50:	7e10      	ldrb	r0, [r2, #24]
    4d52:	0740      	lsls	r0, r0, #29
    4d54:	d5f4      	bpl.n	4d40 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    4d56:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d1fc      	bne.n	4d56 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4d5c:	8b53      	ldrh	r3, [r2, #26]
    4d5e:	b2db      	uxtb	r3, r3
	if (error_code) {
    4d60:	0698      	lsls	r0, r3, #26
    4d62:	d01d      	beq.n	4da0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4d64:	0798      	lsls	r0, r3, #30
    4d66:	d503      	bpl.n	4d70 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4d68:	2302      	movs	r3, #2
    4d6a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4d6c:	3318      	adds	r3, #24
    4d6e:	e7e7      	b.n	4d40 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4d70:	0758      	lsls	r0, r3, #29
    4d72:	d503      	bpl.n	4d7c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4d74:	2304      	movs	r3, #4
    4d76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4d78:	331a      	adds	r3, #26
    4d7a:	e7e1      	b.n	4d40 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4d7c:	07d8      	lsls	r0, r3, #31
    4d7e:	d503      	bpl.n	4d88 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4d80:	2301      	movs	r3, #1
    4d82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4d84:	3312      	adds	r3, #18
    4d86:	e7db      	b.n	4d40 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4d88:	06d8      	lsls	r0, r3, #27
    4d8a:	d503      	bpl.n	4d94 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4d8c:	2310      	movs	r3, #16
    4d8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4d90:	3332      	adds	r3, #50	; 0x32
    4d92:	e7d5      	b.n	4d40 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4d94:	069b      	lsls	r3, r3, #26
    4d96:	d503      	bpl.n	4da0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4d98:	2320      	movs	r3, #32
    4d9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4d9c:	3321      	adds	r3, #33	; 0x21
    4d9e:	e7cf      	b.n	4d40 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4da0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4da2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4da4:	2300      	movs	r3, #0
    4da6:	e7cb      	b.n	4d40 <usart_read_wait+0x8>

00004da8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4daa:	0080      	lsls	r0, r0, #2
    4dac:	4b62      	ldr	r3, [pc, #392]	; (4f38 <_usart_interrupt_handler+0x190>)
    4dae:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4db0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4db2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4db4:	2b00      	cmp	r3, #0
    4db6:	d1fc      	bne.n	4db2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4db8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4dba:	7da6      	ldrb	r6, [r4, #22]
    4dbc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4dbe:	2330      	movs	r3, #48	; 0x30
    4dc0:	5ceb      	ldrb	r3, [r5, r3]
    4dc2:	2231      	movs	r2, #49	; 0x31
    4dc4:	5caf      	ldrb	r7, [r5, r2]
    4dc6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4dc8:	07f3      	lsls	r3, r6, #31
    4dca:	d522      	bpl.n	4e12 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4dcc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4dce:	b29b      	uxth	r3, r3
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	d01c      	beq.n	4e0e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4dd4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4dd6:	7813      	ldrb	r3, [r2, #0]
    4dd8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4dda:	1c51      	adds	r1, r2, #1
    4ddc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4dde:	7969      	ldrb	r1, [r5, #5]
    4de0:	2901      	cmp	r1, #1
    4de2:	d00e      	beq.n	4e02 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4de4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4de6:	05db      	lsls	r3, r3, #23
    4de8:	0ddb      	lsrs	r3, r3, #23
    4dea:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4dec:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4dee:	3b01      	subs	r3, #1
    4df0:	b29b      	uxth	r3, r3
    4df2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4df4:	2b00      	cmp	r3, #0
    4df6:	d10c      	bne.n	4e12 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4df8:	3301      	adds	r3, #1
    4dfa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4dfc:	3301      	adds	r3, #1
    4dfe:	75a3      	strb	r3, [r4, #22]
    4e00:	e007      	b.n	4e12 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4e02:	7851      	ldrb	r1, [r2, #1]
    4e04:	0209      	lsls	r1, r1, #8
    4e06:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4e08:	3202      	adds	r2, #2
    4e0a:	62aa      	str	r2, [r5, #40]	; 0x28
    4e0c:	e7eb      	b.n	4de6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4e0e:	2301      	movs	r3, #1
    4e10:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4e12:	07b3      	lsls	r3, r6, #30
    4e14:	d506      	bpl.n	4e24 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4e16:	2302      	movs	r3, #2
    4e18:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4e1a:	2200      	movs	r2, #0
    4e1c:	3331      	adds	r3, #49	; 0x31
    4e1e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4e20:	07fb      	lsls	r3, r7, #31
    4e22:	d41a      	bmi.n	4e5a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4e24:	0773      	lsls	r3, r6, #29
    4e26:	d565      	bpl.n	4ef4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4e28:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4e2a:	b29b      	uxth	r3, r3
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d05f      	beq.n	4ef0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4e30:	8b63      	ldrh	r3, [r4, #26]
    4e32:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4e34:	071a      	lsls	r2, r3, #28
    4e36:	d414      	bmi.n	4e62 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4e38:	223f      	movs	r2, #63	; 0x3f
    4e3a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4e3c:	2b00      	cmp	r3, #0
    4e3e:	d034      	beq.n	4eaa <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4e40:	079a      	lsls	r2, r3, #30
    4e42:	d511      	bpl.n	4e68 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4e44:	221a      	movs	r2, #26
    4e46:	2332      	movs	r3, #50	; 0x32
    4e48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4e4a:	3b30      	subs	r3, #48	; 0x30
    4e4c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4e4e:	077b      	lsls	r3, r7, #29
    4e50:	d550      	bpl.n	4ef4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4e52:	0028      	movs	r0, r5
    4e54:	696b      	ldr	r3, [r5, #20]
    4e56:	4798      	blx	r3
    4e58:	e04c      	b.n	4ef4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4e5a:	0028      	movs	r0, r5
    4e5c:	68eb      	ldr	r3, [r5, #12]
    4e5e:	4798      	blx	r3
    4e60:	e7e0      	b.n	4e24 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4e62:	2237      	movs	r2, #55	; 0x37
    4e64:	4013      	ands	r3, r2
    4e66:	e7e9      	b.n	4e3c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4e68:	075a      	lsls	r2, r3, #29
    4e6a:	d505      	bpl.n	4e78 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4e6c:	221e      	movs	r2, #30
    4e6e:	2332      	movs	r3, #50	; 0x32
    4e70:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4e72:	3b2e      	subs	r3, #46	; 0x2e
    4e74:	8363      	strh	r3, [r4, #26]
    4e76:	e7ea      	b.n	4e4e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4e78:	07da      	lsls	r2, r3, #31
    4e7a:	d505      	bpl.n	4e88 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    4e7c:	2213      	movs	r2, #19
    4e7e:	2332      	movs	r3, #50	; 0x32
    4e80:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4e82:	3b31      	subs	r3, #49	; 0x31
    4e84:	8363      	strh	r3, [r4, #26]
    4e86:	e7e2      	b.n	4e4e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4e88:	06da      	lsls	r2, r3, #27
    4e8a:	d505      	bpl.n	4e98 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4e8c:	2242      	movs	r2, #66	; 0x42
    4e8e:	2332      	movs	r3, #50	; 0x32
    4e90:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4e92:	3b22      	subs	r3, #34	; 0x22
    4e94:	8363      	strh	r3, [r4, #26]
    4e96:	e7da      	b.n	4e4e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4e98:	2220      	movs	r2, #32
    4e9a:	421a      	tst	r2, r3
    4e9c:	d0d7      	beq.n	4e4e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4e9e:	3221      	adds	r2, #33	; 0x21
    4ea0:	2332      	movs	r3, #50	; 0x32
    4ea2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4ea4:	3b12      	subs	r3, #18
    4ea6:	8363      	strh	r3, [r4, #26]
    4ea8:	e7d1      	b.n	4e4e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4eaa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4eac:	05db      	lsls	r3, r3, #23
    4eae:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4eb0:	b2da      	uxtb	r2, r3
    4eb2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4eb4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4eb6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4eb8:	1c51      	adds	r1, r2, #1
    4eba:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4ebc:	7969      	ldrb	r1, [r5, #5]
    4ebe:	2901      	cmp	r1, #1
    4ec0:	d010      	beq.n	4ee4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4ec2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4ec4:	3b01      	subs	r3, #1
    4ec6:	b29b      	uxth	r3, r3
    4ec8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4eca:	2b00      	cmp	r3, #0
    4ecc:	d112      	bne.n	4ef4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4ece:	3304      	adds	r3, #4
    4ed0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4ed2:	2200      	movs	r2, #0
    4ed4:	332e      	adds	r3, #46	; 0x2e
    4ed6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4ed8:	07bb      	lsls	r3, r7, #30
    4eda:	d50b      	bpl.n	4ef4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4edc:	0028      	movs	r0, r5
    4ede:	692b      	ldr	r3, [r5, #16]
    4ee0:	4798      	blx	r3
    4ee2:	e007      	b.n	4ef4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4ee4:	0a1b      	lsrs	r3, r3, #8
    4ee6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4ee8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4eea:	3301      	adds	r3, #1
    4eec:	626b      	str	r3, [r5, #36]	; 0x24
    4eee:	e7e8      	b.n	4ec2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4ef0:	2304      	movs	r3, #4
    4ef2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4ef4:	06f3      	lsls	r3, r6, #27
    4ef6:	d504      	bpl.n	4f02 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4ef8:	2310      	movs	r3, #16
    4efa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4efc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4efe:	06fb      	lsls	r3, r7, #27
    4f00:	d40e      	bmi.n	4f20 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4f02:	06b3      	lsls	r3, r6, #26
    4f04:	d504      	bpl.n	4f10 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4f06:	2320      	movs	r3, #32
    4f08:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4f0a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4f0c:	073b      	lsls	r3, r7, #28
    4f0e:	d40b      	bmi.n	4f28 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4f10:	0733      	lsls	r3, r6, #28
    4f12:	d504      	bpl.n	4f1e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4f14:	2308      	movs	r3, #8
    4f16:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4f18:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4f1a:	06bb      	lsls	r3, r7, #26
    4f1c:	d408      	bmi.n	4f30 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4f20:	0028      	movs	r0, r5
    4f22:	69eb      	ldr	r3, [r5, #28]
    4f24:	4798      	blx	r3
    4f26:	e7ec      	b.n	4f02 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4f28:	0028      	movs	r0, r5
    4f2a:	69ab      	ldr	r3, [r5, #24]
    4f2c:	4798      	blx	r3
    4f2e:	e7ef      	b.n	4f10 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4f30:	6a2b      	ldr	r3, [r5, #32]
    4f32:	0028      	movs	r0, r5
    4f34:	4798      	blx	r3
}
    4f36:	e7f2      	b.n	4f1e <_usart_interrupt_handler+0x176>
    4f38:	200008a8 	.word	0x200008a8

00004f3c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f3e:	b08b      	sub	sp, #44	; 0x2c
    4f40:	0005      	movs	r5, r0
    4f42:	000c      	movs	r4, r1
    4f44:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4f46:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4f48:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4f4a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4f4c:	079b      	lsls	r3, r3, #30
    4f4e:	d501      	bpl.n	4f54 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4f50:	b00b      	add	sp, #44	; 0x2c
    4f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4f54:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4f56:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4f58:	07db      	lsls	r3, r3, #31
    4f5a:	d4f9      	bmi.n	4f50 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4f5c:	0008      	movs	r0, r1
    4f5e:	4b6f      	ldr	r3, [pc, #444]	; (511c <spi_init+0x1e0>)
    4f60:	4798      	blx	r3
    4f62:	4a6f      	ldr	r2, [pc, #444]	; (5120 <spi_init+0x1e4>)
    4f64:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4f66:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4f68:	2301      	movs	r3, #1
    4f6a:	40bb      	lsls	r3, r7
    4f6c:	430b      	orrs	r3, r1
    4f6e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4f70:	a909      	add	r1, sp, #36	; 0x24
    4f72:	2724      	movs	r7, #36	; 0x24
    4f74:	5df3      	ldrb	r3, [r6, r7]
    4f76:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4f78:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4f7a:	b2c3      	uxtb	r3, r0
    4f7c:	9301      	str	r3, [sp, #4]
    4f7e:	0018      	movs	r0, r3
    4f80:	4b68      	ldr	r3, [pc, #416]	; (5124 <spi_init+0x1e8>)
    4f82:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4f84:	9801      	ldr	r0, [sp, #4]
    4f86:	4b68      	ldr	r3, [pc, #416]	; (5128 <spi_init+0x1ec>)
    4f88:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4f8a:	5df0      	ldrb	r0, [r6, r7]
    4f8c:	2100      	movs	r1, #0
    4f8e:	4b67      	ldr	r3, [pc, #412]	; (512c <spi_init+0x1f0>)
    4f90:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4f92:	7833      	ldrb	r3, [r6, #0]
    4f94:	2b01      	cmp	r3, #1
    4f96:	d03f      	beq.n	5018 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    4f98:	7833      	ldrb	r3, [r6, #0]
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d103      	bne.n	4fa6 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    4f9e:	6823      	ldr	r3, [r4, #0]
    4fa0:	2208      	movs	r2, #8
    4fa2:	4313      	orrs	r3, r2
    4fa4:	6023      	str	r3, [r4, #0]
    4fa6:	002b      	movs	r3, r5
    4fa8:	330c      	adds	r3, #12
    4faa:	0029      	movs	r1, r5
    4fac:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4fae:	2200      	movs	r2, #0
    4fb0:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4fb2:	428b      	cmp	r3, r1
    4fb4:	d1fc      	bne.n	4fb0 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    4fb6:	2300      	movs	r3, #0
    4fb8:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4fba:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4fbc:	2400      	movs	r4, #0
    4fbe:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4fc0:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4fc2:	3336      	adds	r3, #54	; 0x36
    4fc4:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4fc6:	3301      	adds	r3, #1
    4fc8:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4fca:	3301      	adds	r3, #1
    4fcc:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4fce:	3b35      	subs	r3, #53	; 0x35
    4fd0:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4fd2:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4fd4:	6828      	ldr	r0, [r5, #0]
    4fd6:	4b51      	ldr	r3, [pc, #324]	; (511c <spi_init+0x1e0>)
    4fd8:	4798      	blx	r3
    4fda:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4fdc:	4954      	ldr	r1, [pc, #336]	; (5130 <spi_init+0x1f4>)
    4fde:	4b55      	ldr	r3, [pc, #340]	; (5134 <spi_init+0x1f8>)
    4fe0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4fe2:	00bf      	lsls	r7, r7, #2
    4fe4:	4b54      	ldr	r3, [pc, #336]	; (5138 <spi_init+0x1fc>)
    4fe6:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fe8:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4fea:	ab04      	add	r3, sp, #16
    4fec:	2280      	movs	r2, #128	; 0x80
    4fee:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4ff0:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4ff2:	3a7f      	subs	r2, #127	; 0x7f
    4ff4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4ff6:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4ff8:	7833      	ldrb	r3, [r6, #0]
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d102      	bne.n	5004 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4ffe:	2200      	movs	r2, #0
    5000:	ab04      	add	r3, sp, #16
    5002:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5004:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5006:	9305      	str	r3, [sp, #20]
    5008:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    500a:	9306      	str	r3, [sp, #24]
    500c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    500e:	9307      	str	r3, [sp, #28]
    5010:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5012:	9308      	str	r3, [sp, #32]
    5014:	2400      	movs	r4, #0
    5016:	e00b      	b.n	5030 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5018:	6823      	ldr	r3, [r4, #0]
    501a:	220c      	movs	r2, #12
    501c:	4313      	orrs	r3, r2
    501e:	6023      	str	r3, [r4, #0]
    5020:	e7ba      	b.n	4f98 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5022:	0038      	movs	r0, r7
    5024:	4b45      	ldr	r3, [pc, #276]	; (513c <spi_init+0x200>)
    5026:	4798      	blx	r3
    5028:	e00a      	b.n	5040 <spi_init+0x104>
    502a:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    502c:	2c04      	cmp	r4, #4
    502e:	d010      	beq.n	5052 <spi_init+0x116>
    5030:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5032:	00a3      	lsls	r3, r4, #2
    5034:	aa02      	add	r2, sp, #8
    5036:	200c      	movs	r0, #12
    5038:	1812      	adds	r2, r2, r0
    503a:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    503c:	2800      	cmp	r0, #0
    503e:	d0f0      	beq.n	5022 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    5040:	1c43      	adds	r3, r0, #1
    5042:	d0f2      	beq.n	502a <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5044:	a904      	add	r1, sp, #16
    5046:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5048:	0c00      	lsrs	r0, r0, #16
    504a:	b2c0      	uxtb	r0, r0
    504c:	4b3c      	ldr	r3, [pc, #240]	; (5140 <spi_init+0x204>)
    504e:	4798      	blx	r3
    5050:	e7eb      	b.n	502a <spi_init+0xee>
	module->mode             = config->mode;
    5052:	7833      	ldrb	r3, [r6, #0]
    5054:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    5056:	7c33      	ldrb	r3, [r6, #16]
    5058:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    505a:	7cb3      	ldrb	r3, [r6, #18]
    505c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    505e:	7d33      	ldrb	r3, [r6, #20]
    5060:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    5062:	2200      	movs	r2, #0
    5064:	ab02      	add	r3, sp, #8
    5066:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5068:	7833      	ldrb	r3, [r6, #0]
    506a:	2b01      	cmp	r3, #1
    506c:	d012      	beq.n	5094 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    506e:	7833      	ldrb	r3, [r6, #0]
    5070:	2b00      	cmp	r3, #0
    5072:	d126      	bne.n	50c2 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    5074:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5076:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    5078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    507a:	7ff1      	ldrb	r1, [r6, #31]
    507c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    507e:	7fb4      	ldrb	r4, [r6, #30]
    5080:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    5082:	4319      	orrs	r1, r3
    5084:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5086:	2320      	movs	r3, #32
    5088:	5cf3      	ldrb	r3, [r6, r3]
    508a:	2b00      	cmp	r3, #0
    508c:	d01b      	beq.n	50c6 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    508e:	2340      	movs	r3, #64	; 0x40
    5090:	431a      	orrs	r2, r3
    5092:	e018      	b.n	50c6 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5094:	6828      	ldr	r0, [r5, #0]
    5096:	4b21      	ldr	r3, [pc, #132]	; (511c <spi_init+0x1e0>)
    5098:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    509a:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    509c:	b2c0      	uxtb	r0, r0
    509e:	4b29      	ldr	r3, [pc, #164]	; (5144 <spi_init+0x208>)
    50a0:	4798      	blx	r3
    50a2:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    50a4:	ab02      	add	r3, sp, #8
    50a6:	1d9a      	adds	r2, r3, #6
    50a8:	69b0      	ldr	r0, [r6, #24]
    50aa:	4b27      	ldr	r3, [pc, #156]	; (5148 <spi_init+0x20c>)
    50ac:	4798      	blx	r3
    50ae:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    50b0:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    50b2:	2b00      	cmp	r3, #0
    50b4:	d000      	beq.n	50b8 <spi_init+0x17c>
    50b6:	e74b      	b.n	4f50 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    50b8:	ab02      	add	r3, sp, #8
    50ba:	3306      	adds	r3, #6
    50bc:	781b      	ldrb	r3, [r3, #0]
    50be:	733b      	strb	r3, [r7, #12]
    50c0:	e7d5      	b.n	506e <spi_init+0x132>
	uint32_t ctrlb = 0;
    50c2:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    50c4:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    50c6:	6873      	ldr	r3, [r6, #4]
    50c8:	68b1      	ldr	r1, [r6, #8]
    50ca:	430b      	orrs	r3, r1
    50cc:	68f1      	ldr	r1, [r6, #12]
    50ce:	430b      	orrs	r3, r1
    50d0:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    50d2:	7c31      	ldrb	r1, [r6, #16]
    50d4:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    50d6:	7c71      	ldrb	r1, [r6, #17]
    50d8:	2900      	cmp	r1, #0
    50da:	d103      	bne.n	50e4 <spi_init+0x1a8>
    50dc:	491b      	ldr	r1, [pc, #108]	; (514c <spi_init+0x210>)
    50de:	7889      	ldrb	r1, [r1, #2]
    50e0:	0789      	lsls	r1, r1, #30
    50e2:	d501      	bpl.n	50e8 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    50e4:	2180      	movs	r1, #128	; 0x80
    50e6:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    50e8:	7cb1      	ldrb	r1, [r6, #18]
    50ea:	2900      	cmp	r1, #0
    50ec:	d002      	beq.n	50f4 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    50ee:	2180      	movs	r1, #128	; 0x80
    50f0:	0289      	lsls	r1, r1, #10
    50f2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    50f4:	7cf1      	ldrb	r1, [r6, #19]
    50f6:	2900      	cmp	r1, #0
    50f8:	d002      	beq.n	5100 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    50fa:	2180      	movs	r1, #128	; 0x80
    50fc:	0089      	lsls	r1, r1, #2
    50fe:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5100:	7d31      	ldrb	r1, [r6, #20]
    5102:	2900      	cmp	r1, #0
    5104:	d002      	beq.n	510c <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5106:	2180      	movs	r1, #128	; 0x80
    5108:	0189      	lsls	r1, r1, #6
    510a:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    510c:	6839      	ldr	r1, [r7, #0]
    510e:	430b      	orrs	r3, r1
    5110:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5112:	687b      	ldr	r3, [r7, #4]
    5114:	431a      	orrs	r2, r3
    5116:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    5118:	2000      	movs	r0, #0
    511a:	e719      	b.n	4f50 <spi_init+0x14>
    511c:	00005ad1 	.word	0x00005ad1
    5120:	40000400 	.word	0x40000400
    5124:	00009a01 	.word	0x00009a01
    5128:	00009975 	.word	0x00009975
    512c:	0000590d 	.word	0x0000590d
    5130:	00005571 	.word	0x00005571
    5134:	00005b0d 	.word	0x00005b0d
    5138:	200008a8 	.word	0x200008a8
    513c:	00005959 	.word	0x00005959
    5140:	00009af9 	.word	0x00009af9
    5144:	00009a1d 	.word	0x00009a1d
    5148:	0000584f 	.word	0x0000584f
    514c:	41002000 	.word	0x41002000

00005150 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    5150:	b5f0      	push	{r4, r5, r6, r7, lr}
    5152:	46d6      	mov	lr, sl
    5154:	464f      	mov	r7, r9
    5156:	b580      	push	{r7, lr}
    5158:	b083      	sub	sp, #12
    515a:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    515c:	2538      	movs	r5, #56	; 0x38
    515e:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5160:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    5162:	2e05      	cmp	r6, #5
    5164:	d075      	beq.n	5252 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5166:	3512      	adds	r5, #18
	if (length == 0) {
    5168:	2a00      	cmp	r2, #0
    516a:	d072      	beq.n	5252 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    516c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    516e:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    5170:	2c00      	cmp	r4, #0
    5172:	d06e      	beq.n	5252 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5174:	7944      	ldrb	r4, [r0, #5]
    5176:	2c00      	cmp	r4, #0
    5178:	d103      	bne.n	5182 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    517a:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    517c:	7e25      	ldrb	r5, [r4, #24]
    517e:	07a9      	lsls	r1, r5, #30
    5180:	d40a      	bmi.n	5198 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    5182:	3a01      	subs	r2, #1
    5184:	b294      	uxth	r4, r2
    5186:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    5188:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    518a:	2102      	movs	r1, #2
    518c:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    518e:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5190:	05db      	lsls	r3, r3, #23
    5192:	0ddb      	lsrs	r3, r3, #23
    5194:	469a      	mov	sl, r3
    5196:	e037      	b.n	5208 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5198:	2502      	movs	r5, #2
    519a:	7625      	strb	r5, [r4, #24]
    519c:	e7f1      	b.n	5182 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    519e:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    51a0:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    51a2:	423b      	tst	r3, r7
    51a4:	d0fc      	beq.n	51a0 <spi_read_buffer_wait+0x50>
    51a6:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    51a8:	423b      	tst	r3, r7
    51aa:	d009      	beq.n	51c0 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    51ac:	4653      	mov	r3, sl
    51ae:	628b      	str	r3, [r1, #40]	; 0x28
    51b0:	e02d      	b.n	520e <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    51b2:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    51b4:	464d      	mov	r5, r9
    51b6:	422b      	tst	r3, r5
    51b8:	d138      	bne.n	522c <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51ba:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    51bc:	4213      	tst	r3, r2
    51be:	d045      	beq.n	524c <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    51c0:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51c2:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    51c4:	4213      	tst	r3, r2
    51c6:	d0fc      	beq.n	51c2 <spi_read_buffer_wait+0x72>
    51c8:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    51ca:	4213      	tst	r3, r2
    51cc:	d040      	beq.n	5250 <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    51ce:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    51d0:	2500      	movs	r5, #0
    51d2:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    51d4:	4213      	tst	r3, r2
    51d6:	d002      	beq.n	51de <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    51d8:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    51da:	231e      	movs	r3, #30
    51dc:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51de:	7983      	ldrb	r3, [r0, #6]
    51e0:	2b01      	cmp	r3, #1
    51e2:	d027      	beq.n	5234 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    51e4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    51e6:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    51e8:	9901      	ldr	r1, [sp, #4]
    51ea:	2900      	cmp	r1, #0
    51ec:	d137      	bne.n	525e <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    51ee:	1c75      	adds	r5, r6, #1
    51f0:	b2ad      	uxth	r5, r5
    51f2:	4661      	mov	r1, ip
    51f4:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51f6:	7981      	ldrb	r1, [r0, #6]
    51f8:	2901      	cmp	r1, #1
    51fa:	d01f      	beq.n	523c <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    51fc:	002e      	movs	r6, r5
	while (length--) {
    51fe:	3c01      	subs	r4, #1
    5200:	b2a4      	uxth	r4, r4
    5202:	4b18      	ldr	r3, [pc, #96]	; (5264 <spi_read_buffer_wait+0x114>)
    5204:	429c      	cmp	r4, r3
    5206:	d01f      	beq.n	5248 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    5208:	7943      	ldrb	r3, [r0, #5]
    520a:	2b01      	cmp	r3, #1
    520c:	d0c7      	beq.n	519e <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    520e:	7943      	ldrb	r3, [r0, #5]
    5210:	2b00      	cmp	r3, #0
    5212:	d1d5      	bne.n	51c0 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5214:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5216:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    5218:	4213      	tst	r3, r2
    521a:	d1ca      	bne.n	51b2 <spi_read_buffer_wait+0x62>
    521c:	4b12      	ldr	r3, [pc, #72]	; (5268 <spi_read_buffer_wait+0x118>)
    521e:	7e0d      	ldrb	r5, [r1, #24]
    5220:	4215      	tst	r5, r2
    5222:	d1c6      	bne.n	51b2 <spi_read_buffer_wait+0x62>
    5224:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5226:	2b00      	cmp	r3, #0
    5228:	d1f9      	bne.n	521e <spi_read_buffer_wait+0xce>
    522a:	e7c2      	b.n	51b2 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    522c:	2302      	movs	r3, #2
    522e:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    5230:	2504      	movs	r5, #4
    5232:	e00e      	b.n	5252 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5234:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5236:	05db      	lsls	r3, r3, #23
    5238:	0ddb      	lsrs	r3, r3, #23
    523a:	e7d5      	b.n	51e8 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    523c:	3602      	adds	r6, #2
    523e:	b2b6      	uxth	r6, r6
    5240:	0a1b      	lsrs	r3, r3, #8
    5242:	4661      	mov	r1, ip
    5244:	554b      	strb	r3, [r1, r5]
    5246:	e7da      	b.n	51fe <spi_read_buffer_wait+0xae>
    5248:	9d01      	ldr	r5, [sp, #4]
    524a:	e002      	b.n	5252 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    524c:	2512      	movs	r5, #18
    524e:	e000      	b.n	5252 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    5250:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    5252:	0028      	movs	r0, r5
    5254:	b003      	add	sp, #12
    5256:	bc0c      	pop	{r2, r3}
    5258:	4691      	mov	r9, r2
    525a:	469a      	mov	sl, r3
    525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    525e:	9d01      	ldr	r5, [sp, #4]
    5260:	e7f7      	b.n	5252 <spi_read_buffer_wait+0x102>
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	0000ffff 	.word	0x0000ffff
    5268:	00002710 	.word	0x00002710

0000526c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    526c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    526e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5270:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5272:	2c01      	cmp	r4, #1
    5274:	d001      	beq.n	527a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5276:	0018      	movs	r0, r3
    5278:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    527a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    527c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    527e:	2c00      	cmp	r4, #0
    5280:	d1f9      	bne.n	5276 <spi_select_slave+0xa>
		if (select) {
    5282:	2a00      	cmp	r2, #0
    5284:	d058      	beq.n	5338 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5286:	784b      	ldrb	r3, [r1, #1]
    5288:	2b00      	cmp	r3, #0
    528a:	d044      	beq.n	5316 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    528c:	6803      	ldr	r3, [r0, #0]
    528e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5290:	07db      	lsls	r3, r3, #31
    5292:	d410      	bmi.n	52b6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5294:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5296:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5298:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    529a:	2900      	cmp	r1, #0
    529c:	d104      	bne.n	52a8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    529e:	0953      	lsrs	r3, r2, #5
    52a0:	01db      	lsls	r3, r3, #7
    52a2:	492e      	ldr	r1, [pc, #184]	; (535c <spi_select_slave+0xf0>)
    52a4:	468c      	mov	ip, r1
    52a6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    52a8:	211f      	movs	r1, #31
    52aa:	4011      	ands	r1, r2
    52ac:	2201      	movs	r2, #1
    52ae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    52b0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    52b2:	2305      	movs	r3, #5
    52b4:	e7df      	b.n	5276 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    52b6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    52b8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    52ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    52bc:	2c00      	cmp	r4, #0
    52be:	d104      	bne.n	52ca <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    52c0:	0953      	lsrs	r3, r2, #5
    52c2:	01db      	lsls	r3, r3, #7
    52c4:	4c25      	ldr	r4, [pc, #148]	; (535c <spi_select_slave+0xf0>)
    52c6:	46a4      	mov	ip, r4
    52c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    52ca:	241f      	movs	r4, #31
    52cc:	4014      	ands	r4, r2
    52ce:	2201      	movs	r2, #1
    52d0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    52d2:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    52d4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    52d6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    52d8:	07d2      	lsls	r2, r2, #31
    52da:	d501      	bpl.n	52e0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    52dc:	788a      	ldrb	r2, [r1, #2]
    52de:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    52e0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    52e2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    52e4:	2a00      	cmp	r2, #0
    52e6:	d1c6      	bne.n	5276 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    52e8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    52ea:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    52ec:	7e13      	ldrb	r3, [r2, #24]
    52ee:	420b      	tst	r3, r1
    52f0:	d0fc      	beq.n	52ec <spi_select_slave+0x80>
    52f2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    52f4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    52f6:	0749      	lsls	r1, r1, #29
    52f8:	d5bd      	bpl.n	5276 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52fa:	8b53      	ldrh	r3, [r2, #26]
    52fc:	075b      	lsls	r3, r3, #29
    52fe:	d501      	bpl.n	5304 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5300:	2304      	movs	r3, #4
    5302:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5304:	7983      	ldrb	r3, [r0, #6]
    5306:	2b01      	cmp	r3, #1
    5308:	d002      	beq.n	5310 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    530a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    530c:	2300      	movs	r3, #0
    530e:	e7b2      	b.n	5276 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5310:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5312:	2300      	movs	r3, #0
    5314:	e7af      	b.n	5276 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5316:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5318:	09d1      	lsrs	r1, r2, #7
		return NULL;
    531a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    531c:	2900      	cmp	r1, #0
    531e:	d104      	bne.n	532a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5320:	0953      	lsrs	r3, r2, #5
    5322:	01db      	lsls	r3, r3, #7
    5324:	490d      	ldr	r1, [pc, #52]	; (535c <spi_select_slave+0xf0>)
    5326:	468c      	mov	ip, r1
    5328:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    532a:	211f      	movs	r1, #31
    532c:	4011      	ands	r1, r2
    532e:	2201      	movs	r2, #1
    5330:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5332:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5334:	2300      	movs	r3, #0
    5336:	e79e      	b.n	5276 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5338:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    533a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    533c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    533e:	2900      	cmp	r1, #0
    5340:	d104      	bne.n	534c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5342:	0953      	lsrs	r3, r2, #5
    5344:	01db      	lsls	r3, r3, #7
    5346:	4905      	ldr	r1, [pc, #20]	; (535c <spi_select_slave+0xf0>)
    5348:	468c      	mov	ip, r1
    534a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    534c:	211f      	movs	r1, #31
    534e:	4011      	ands	r1, r2
    5350:	2201      	movs	r2, #1
    5352:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5354:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5356:	2300      	movs	r3, #0
    5358:	e78d      	b.n	5276 <spi_select_slave+0xa>
    535a:	46c0      	nop			; (mov r8, r8)
    535c:	41004400 	.word	0x41004400

00005360 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5360:	b5f0      	push	{r4, r5, r6, r7, lr}
    5362:	46de      	mov	lr, fp
    5364:	4657      	mov	r7, sl
    5366:	464e      	mov	r6, r9
    5368:	4645      	mov	r5, r8
    536a:	b5e0      	push	{r5, r6, r7, lr}
    536c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    536e:	2338      	movs	r3, #56	; 0x38
    5370:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5372:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    5374:	2c05      	cmp	r4, #5
    5376:	d002      	beq.n	537e <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5378:	3312      	adds	r3, #18
	if (length == 0) {
    537a:	2a00      	cmp	r2, #0
    537c:	d107      	bne.n	538e <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    537e:	0018      	movs	r0, r3
    5380:	b003      	add	sp, #12
    5382:	bc3c      	pop	{r2, r3, r4, r5}
    5384:	4690      	mov	r8, r2
    5386:	4699      	mov	r9, r3
    5388:	46a2      	mov	sl, r4
    538a:	46ab      	mov	fp, r5
    538c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    538e:	7943      	ldrb	r3, [r0, #5]
    5390:	2b00      	cmp	r3, #0
    5392:	d103      	bne.n	539c <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5394:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5396:	7e1c      	ldrb	r4, [r3, #24]
    5398:	07a4      	lsls	r4, r4, #30
    539a:	d40a      	bmi.n	53b2 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    539c:	4693      	mov	fp, r2
    539e:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    53a0:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    53a2:	2502      	movs	r5, #2
    53a4:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    53a6:	3502      	adds	r5, #2
    53a8:	46a8      	mov	r8, r5
    53aa:	3a01      	subs	r2, #1
    53ac:	b292      	uxth	r2, r2
    53ae:	468a      	mov	sl, r1
    53b0:	e023      	b.n	53fa <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    53b2:	2402      	movs	r4, #2
    53b4:	761c      	strb	r4, [r3, #24]
    53b6:	e7f1      	b.n	539c <spi_write_buffer_wait+0x3c>
    53b8:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    53ba:	4661      	mov	r1, ip
    53bc:	420d      	tst	r5, r1
    53be:	d12e      	bne.n	541e <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    53c0:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    53c2:	421d      	tst	r5, r3
    53c4:	d100      	bne.n	53c8 <spi_write_buffer_wait+0x68>
    53c6:	e0c2      	b.n	554e <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    53c8:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    53ca:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    53cc:	421d      	tst	r5, r3
    53ce:	d0fc      	beq.n	53ca <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    53d0:	1c67      	adds	r7, r4, #1
    53d2:	b2bf      	uxth	r7, r7
    53d4:	4651      	mov	r1, sl
    53d6:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    53d8:	7981      	ldrb	r1, [r0, #6]
    53da:	2901      	cmp	r1, #1
    53dc:	d023      	beq.n	5426 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    53de:	b2ad      	uxth	r5, r5
    53e0:	003c      	movs	r4, r7
    53e2:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    53e4:	421f      	tst	r7, r3
    53e6:	d002      	beq.n	53ee <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    53e8:	05ed      	lsls	r5, r5, #23
    53ea:	0ded      	lsrs	r5, r5, #23
    53ec:	62b5      	str	r5, [r6, #40]	; 0x28
    53ee:	1e55      	subs	r5, r2, #1
    53f0:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    53f2:	79c6      	ldrb	r6, [r0, #7]
    53f4:	2e00      	cmp	r6, #0
    53f6:	d11d      	bne.n	5434 <spi_write_buffer_wait+0xd4>
    53f8:	002a      	movs	r2, r5
	while (length--) {
    53fa:	4d5a      	ldr	r5, [pc, #360]	; (5564 <spi_write_buffer_wait+0x204>)
    53fc:	42aa      	cmp	r2, r5
    53fe:	d070      	beq.n	54e2 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    5400:	7945      	ldrb	r5, [r0, #5]
    5402:	2d00      	cmp	r5, #0
    5404:	d1e0      	bne.n	53c8 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5406:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5408:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    540a:	421d      	tst	r5, r3
    540c:	d1d4      	bne.n	53b8 <spi_write_buffer_wait+0x58>
    540e:	4d56      	ldr	r5, [pc, #344]	; (5568 <spi_write_buffer_wait+0x208>)
    5410:	7e37      	ldrb	r7, [r6, #24]
    5412:	421f      	tst	r7, r3
    5414:	d1d0      	bne.n	53b8 <spi_write_buffer_wait+0x58>
    5416:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5418:	2d00      	cmp	r5, #0
    541a:	d1f9      	bne.n	5410 <spi_write_buffer_wait+0xb0>
    541c:	e7cc      	b.n	53b8 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    541e:	2302      	movs	r3, #2
    5420:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    5422:	3302      	adds	r3, #2
    5424:	e7ab      	b.n	537e <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5426:	3402      	adds	r4, #2
    5428:	b2a4      	uxth	r4, r4
    542a:	4651      	mov	r1, sl
    542c:	5dcf      	ldrb	r7, [r1, r7]
    542e:	023f      	lsls	r7, r7, #8
    5430:	433d      	orrs	r5, r7
    5432:	e7d6      	b.n	53e2 <spi_write_buffer_wait+0x82>
    5434:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5436:	7945      	ldrb	r5, [r0, #5]
    5438:	2d00      	cmp	r5, #0
    543a:	d137      	bne.n	54ac <spi_write_buffer_wait+0x14c>
    543c:	4d4b      	ldr	r5, [pc, #300]	; (556c <spi_write_buffer_wait+0x20c>)
    543e:	9101      	str	r1, [sp, #4]
    5440:	e012      	b.n	5468 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5442:	3402      	adds	r4, #2
    5444:	b2a4      	uxth	r4, r4
    5446:	4649      	mov	r1, r9
    5448:	9f01      	ldr	r7, [sp, #4]
    544a:	5c79      	ldrb	r1, [r7, r1]
    544c:	0209      	lsls	r1, r1, #8
    544e:	9f00      	ldr	r7, [sp, #0]
    5450:	430f      	orrs	r7, r1
    5452:	e01b      	b.n	548c <spi_write_buffer_wait+0x12c>
						length--;
    5454:	3a01      	subs	r2, #1
    5456:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    5458:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    545a:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    545c:	4641      	mov	r1, r8
    545e:	420f      	tst	r7, r1
    5460:	d11b      	bne.n	549a <spi_write_buffer_wait+0x13a>
    5462:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5464:	2d00      	cmp	r5, #0
    5466:	d018      	beq.n	549a <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    5468:	2a00      	cmp	r2, #0
    546a:	d0f5      	beq.n	5458 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    546c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    546e:	7e37      	ldrb	r7, [r6, #24]
    5470:	421f      	tst	r7, r3
    5472:	d0f1      	beq.n	5458 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    5474:	1c67      	adds	r7, r4, #1
    5476:	b2b9      	uxth	r1, r7
    5478:	4689      	mov	r9, r1
    547a:	9901      	ldr	r1, [sp, #4]
    547c:	5d09      	ldrb	r1, [r1, r4]
    547e:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5480:	7981      	ldrb	r1, [r0, #6]
    5482:	2901      	cmp	r1, #1
    5484:	d0dd      	beq.n	5442 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    5486:	4669      	mov	r1, sp
    5488:	880f      	ldrh	r7, [r1, #0]
    548a:	464c      	mov	r4, r9
    548c:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    548e:	4219      	tst	r1, r3
    5490:	d0e0      	beq.n	5454 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5492:	05ff      	lsls	r7, r7, #23
    5494:	0dff      	lsrs	r7, r7, #23
    5496:	62b7      	str	r7, [r6, #40]	; 0x28
    5498:	e7dc      	b.n	5454 <spi_write_buffer_wait+0xf4>
    549a:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    549c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    549e:	4667      	mov	r7, ip
    54a0:	423d      	tst	r5, r7
    54a2:	d118      	bne.n	54d6 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    54a4:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    54a6:	4646      	mov	r6, r8
    54a8:	4235      	tst	r5, r6
    54aa:	d052      	beq.n	5552 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    54ac:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    54ae:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    54b0:	4647      	mov	r7, r8
    54b2:	423d      	tst	r5, r7
    54b4:	d0fb      	beq.n	54ae <spi_write_buffer_wait+0x14e>
    54b6:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    54b8:	423d      	tst	r5, r7
    54ba:	d007      	beq.n	54cc <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    54bc:	8b75      	ldrh	r5, [r6, #26]
    54be:	423d      	tst	r5, r7
    54c0:	d000      	beq.n	54c4 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    54c2:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    54c4:	7985      	ldrb	r5, [r0, #6]
    54c6:	2d01      	cmp	r5, #1
    54c8:	d009      	beq.n	54de <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    54ca:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    54cc:	465d      	mov	r5, fp
    54ce:	3d01      	subs	r5, #1
    54d0:	b2ad      	uxth	r5, r5
    54d2:	46ab      	mov	fp, r5
    54d4:	e769      	b.n	53aa <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    54d6:	2302      	movs	r3, #2
    54d8:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    54da:	3302      	adds	r3, #2
    54dc:	e74f      	b.n	537e <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    54de:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    54e0:	e7f4      	b.n	54cc <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    54e2:	7943      	ldrb	r3, [r0, #5]
    54e4:	2b01      	cmp	r3, #1
    54e6:	d00b      	beq.n	5500 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    54e8:	2b00      	cmp	r3, #0
    54ea:	d134      	bne.n	5556 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    54ec:	79c2      	ldrb	r2, [r0, #7]
    54ee:	2a00      	cmp	r2, #0
    54f0:	d100      	bne.n	54f4 <spi_write_buffer_wait+0x194>
    54f2:	e744      	b.n	537e <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    54f4:	2404      	movs	r4, #4
			while (flush_length) {
    54f6:	465b      	mov	r3, fp
    54f8:	465d      	mov	r5, fp
    54fa:	2b00      	cmp	r3, #0
    54fc:	d119      	bne.n	5532 <spi_write_buffer_wait+0x1d2>
    54fe:	e73e      	b.n	537e <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5500:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5502:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5504:	7e0b      	ldrb	r3, [r1, #24]
    5506:	4213      	tst	r3, r2
    5508:	d0fc      	beq.n	5504 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    550a:	2300      	movs	r3, #0
    550c:	e737      	b.n	537e <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    550e:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    5510:	4223      	tst	r3, r4
    5512:	d022      	beq.n	555a <spi_write_buffer_wait+0x1fa>
    5514:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5516:	4223      	tst	r3, r4
    5518:	d007      	beq.n	552a <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    551a:	8b4b      	ldrh	r3, [r1, #26]
    551c:	4223      	tst	r3, r4
    551e:	d000      	beq.n	5522 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5520:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5522:	7983      	ldrb	r3, [r0, #6]
    5524:	2b01      	cmp	r3, #1
    5526:	d010      	beq.n	554a <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5528:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    552a:	3d01      	subs	r5, #1
    552c:	b2ad      	uxth	r5, r5
			while (flush_length) {
    552e:	2d00      	cmp	r5, #0
    5530:	d015      	beq.n	555e <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5532:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5534:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5536:	4223      	tst	r3, r4
    5538:	d1e9      	bne.n	550e <spi_write_buffer_wait+0x1ae>
    553a:	4b0b      	ldr	r3, [pc, #44]	; (5568 <spi_write_buffer_wait+0x208>)
    553c:	7e0a      	ldrb	r2, [r1, #24]
    553e:	4222      	tst	r2, r4
    5540:	d1e5      	bne.n	550e <spi_write_buffer_wait+0x1ae>
    5542:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5544:	2b00      	cmp	r3, #0
    5546:	d1f9      	bne.n	553c <spi_write_buffer_wait+0x1dc>
    5548:	e7e1      	b.n	550e <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    554a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    554c:	e7ed      	b.n	552a <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    554e:	2312      	movs	r3, #18
    5550:	e715      	b.n	537e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    5552:	2312      	movs	r3, #18
    5554:	e713      	b.n	537e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    5556:	2300      	movs	r3, #0
    5558:	e711      	b.n	537e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    555a:	2312      	movs	r3, #18
    555c:	e70f      	b.n	537e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    555e:	2300      	movs	r3, #0
    5560:	e70d      	b.n	537e <spi_write_buffer_wait+0x1e>
    5562:	46c0      	nop			; (mov r8, r8)
    5564:	0000ffff 	.word	0x0000ffff
    5568:	00002710 	.word	0x00002710
    556c:	00002711 	.word	0x00002711

00005570 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    5572:	0080      	lsls	r0, r0, #2
    5574:	4b85      	ldr	r3, [pc, #532]	; (578c <_spi_interrupt_handler+0x21c>)
    5576:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5578:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    557a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    557c:	5ce3      	ldrb	r3, [r4, r3]
    557e:	2236      	movs	r2, #54	; 0x36
    5580:	5ca7      	ldrb	r7, [r4, r2]
    5582:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    5584:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    5586:	7db5      	ldrb	r5, [r6, #22]
    5588:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    558a:	07eb      	lsls	r3, r5, #31
    558c:	d52e      	bpl.n	55ec <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    558e:	7963      	ldrb	r3, [r4, #5]
    5590:	2b01      	cmp	r3, #1
    5592:	d025      	beq.n	55e0 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    5594:	2b00      	cmp	r3, #0
    5596:	d129      	bne.n	55ec <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    5598:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    559a:	2b00      	cmp	r3, #0
    559c:	d026      	beq.n	55ec <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    559e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    55a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    55a2:	7813      	ldrb	r3, [r2, #0]
    55a4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    55a6:	1c50      	adds	r0, r2, #1
    55a8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    55aa:	79a0      	ldrb	r0, [r4, #6]
    55ac:	2801      	cmp	r0, #1
    55ae:	d100      	bne.n	55b2 <_spi_interrupt_handler+0x42>
    55b0:	e069      	b.n	5686 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    55b2:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    55b4:	05db      	lsls	r3, r3, #23
    55b6:	0ddb      	lsrs	r3, r3, #23
    55b8:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    55ba:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    55bc:	3b01      	subs	r3, #1
    55be:	b29b      	uxth	r3, r3
    55c0:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    55c2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    55c4:	b29b      	uxth	r3, r3
    55c6:	2b00      	cmp	r3, #0
    55c8:	d110      	bne.n	55ec <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    55ca:	3301      	adds	r3, #1
    55cc:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    55ce:	7a63      	ldrb	r3, [r4, #9]
    55d0:	2b01      	cmp	r3, #1
    55d2:	d10b      	bne.n	55ec <_spi_interrupt_handler+0x7c>
    55d4:	79e3      	ldrb	r3, [r4, #7]
    55d6:	2b00      	cmp	r3, #0
    55d8:	d108      	bne.n	55ec <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    55da:	3302      	adds	r3, #2
    55dc:	75b3      	strb	r3, [r6, #22]
    55de:	e005      	b.n	55ec <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    55e0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    55e2:	2b00      	cmp	r3, #0
    55e4:	d03e      	beq.n	5664 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    55e6:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    55e8:	2b00      	cmp	r3, #0
    55ea:	d1d8      	bne.n	559e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    55ec:	076b      	lsls	r3, r5, #29
    55ee:	d511      	bpl.n	5614 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    55f0:	8b73      	ldrh	r3, [r6, #26]
    55f2:	075b      	lsls	r3, r3, #29
    55f4:	d551      	bpl.n	569a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    55f6:	7a63      	ldrb	r3, [r4, #9]
    55f8:	2b01      	cmp	r3, #1
    55fa:	d008      	beq.n	560e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    55fc:	221e      	movs	r2, #30
    55fe:	2338      	movs	r3, #56	; 0x38
    5600:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5602:	3b35      	subs	r3, #53	; 0x35
    5604:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5606:	3302      	adds	r3, #2
    5608:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    560a:	073b      	lsls	r3, r7, #28
    560c:	d441      	bmi.n	5692 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    560e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5610:	2304      	movs	r3, #4
    5612:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    5614:	07ab      	lsls	r3, r5, #30
    5616:	d515      	bpl.n	5644 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    5618:	7963      	ldrb	r3, [r4, #5]
    561a:	2b00      	cmp	r3, #0
    561c:	d10e      	bne.n	563c <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    561e:	3307      	adds	r3, #7
    5620:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5622:	3b05      	subs	r3, #5
    5624:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    5626:	3301      	adds	r3, #1
    5628:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    562a:	2300      	movs	r3, #0
    562c:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    562e:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    5630:	3338      	adds	r3, #56	; 0x38
    5632:	2200      	movs	r2, #0
    5634:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    5636:	06fb      	lsls	r3, r7, #27
    5638:	d500      	bpl.n	563c <_spi_interrupt_handler+0xcc>
    563a:	e07f      	b.n	573c <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    563c:	7963      	ldrb	r3, [r4, #5]
    563e:	2b01      	cmp	r3, #1
    5640:	d100      	bne.n	5644 <_spi_interrupt_handler+0xd4>
    5642:	e07f      	b.n	5744 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    5644:	072b      	lsls	r3, r5, #28
    5646:	d508      	bpl.n	565a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    5648:	7963      	ldrb	r3, [r4, #5]
    564a:	2b00      	cmp	r3, #0
    564c:	d105      	bne.n	565a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    564e:	3308      	adds	r3, #8
    5650:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    5652:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    5654:	06bb      	lsls	r3, r7, #26
    5656:	d500      	bpl.n	565a <_spi_interrupt_handler+0xea>
    5658:	e08a      	b.n	5770 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    565a:	b26d      	sxtb	r5, r5
    565c:	2d00      	cmp	r5, #0
    565e:	da00      	bge.n	5662 <_spi_interrupt_handler+0xf2>
    5660:	e08a      	b.n	5778 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    5662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    5664:	4b4a      	ldr	r3, [pc, #296]	; (5790 <_spi_interrupt_handler+0x220>)
    5666:	881b      	ldrh	r3, [r3, #0]
    5668:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    566a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    566c:	3b01      	subs	r3, #1
    566e:	b29b      	uxth	r3, r3
    5670:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    5672:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5674:	b29b      	uxth	r3, r3
    5676:	2b00      	cmp	r3, #0
    5678:	d101      	bne.n	567e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    567a:	3301      	adds	r3, #1
    567c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    567e:	7963      	ldrb	r3, [r4, #5]
		if (0
    5680:	2b01      	cmp	r3, #1
    5682:	d0b0      	beq.n	55e6 <_spi_interrupt_handler+0x76>
    5684:	e786      	b.n	5594 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5686:	7850      	ldrb	r0, [r2, #1]
    5688:	0200      	lsls	r0, r0, #8
    568a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    568c:	3202      	adds	r2, #2
    568e:	62e2      	str	r2, [r4, #44]	; 0x2c
    5690:	e790      	b.n	55b4 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5692:	0020      	movs	r0, r4
    5694:	69a3      	ldr	r3, [r4, #24]
    5696:	4798      	blx	r3
    5698:	e7b9      	b.n	560e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    569a:	7a63      	ldrb	r3, [r4, #9]
    569c:	2b01      	cmp	r3, #1
    569e:	d027      	beq.n	56f0 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    56a0:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    56a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56a4:	05db      	lsls	r3, r3, #23
    56a6:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    56a8:	b2da      	uxtb	r2, r3
    56aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    56ac:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    56ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    56b0:	1c51      	adds	r1, r2, #1
    56b2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    56b4:	79a1      	ldrb	r1, [r4, #6]
    56b6:	2901      	cmp	r1, #1
    56b8:	d033      	beq.n	5722 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    56ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    56bc:	3b01      	subs	r3, #1
    56be:	b29b      	uxth	r3, r3
    56c0:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    56c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    56c4:	b29b      	uxth	r3, r3
    56c6:	2b00      	cmp	r3, #0
    56c8:	d1a4      	bne.n	5614 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    56ca:	2200      	movs	r2, #0
    56cc:	3338      	adds	r3, #56	; 0x38
    56ce:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    56d0:	3b34      	subs	r3, #52	; 0x34
    56d2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    56d4:	7a63      	ldrb	r3, [r4, #9]
    56d6:	2b02      	cmp	r3, #2
    56d8:	d029      	beq.n	572e <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    56da:	7a63      	ldrb	r3, [r4, #9]
    56dc:	2b00      	cmp	r3, #0
    56de:	d000      	beq.n	56e2 <_spi_interrupt_handler+0x172>
    56e0:	e798      	b.n	5614 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    56e2:	07bb      	lsls	r3, r7, #30
    56e4:	d400      	bmi.n	56e8 <_spi_interrupt_handler+0x178>
    56e6:	e795      	b.n	5614 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    56e8:	0020      	movs	r0, r4
    56ea:	6923      	ldr	r3, [r4, #16]
    56ec:	4798      	blx	r3
    56ee:	e791      	b.n	5614 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    56f0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    56f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    56f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    56f6:	3b01      	subs	r3, #1
    56f8:	b29b      	uxth	r3, r3
    56fa:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    56fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    56fe:	b29b      	uxth	r3, r3
    5700:	2b00      	cmp	r3, #0
    5702:	d000      	beq.n	5706 <_spi_interrupt_handler+0x196>
    5704:	e786      	b.n	5614 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5706:	3304      	adds	r3, #4
    5708:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    570a:	2200      	movs	r2, #0
    570c:	3334      	adds	r3, #52	; 0x34
    570e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    5710:	3b35      	subs	r3, #53	; 0x35
    5712:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    5714:	07fb      	lsls	r3, r7, #31
    5716:	d400      	bmi.n	571a <_spi_interrupt_handler+0x1aa>
    5718:	e77c      	b.n	5614 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    571a:	0020      	movs	r0, r4
    571c:	68e3      	ldr	r3, [r4, #12]
    571e:	4798      	blx	r3
    5720:	e778      	b.n	5614 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    5722:	0a1b      	lsrs	r3, r3, #8
    5724:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    5726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5728:	3301      	adds	r3, #1
    572a:	62a3      	str	r3, [r4, #40]	; 0x28
    572c:	e7c5      	b.n	56ba <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    572e:	077b      	lsls	r3, r7, #29
    5730:	d400      	bmi.n	5734 <_spi_interrupt_handler+0x1c4>
    5732:	e76f      	b.n	5614 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5734:	0020      	movs	r0, r4
    5736:	6963      	ldr	r3, [r4, #20]
    5738:	4798      	blx	r3
    573a:	e76b      	b.n	5614 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    573c:	0020      	movs	r0, r4
    573e:	69e3      	ldr	r3, [r4, #28]
    5740:	4798      	blx	r3
    5742:	e77b      	b.n	563c <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5744:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    5746:	2b01      	cmp	r3, #1
    5748:	d000      	beq.n	574c <_spi_interrupt_handler+0x1dc>
    574a:	e786      	b.n	565a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    574c:	79e3      	ldrb	r3, [r4, #7]
    574e:	2b00      	cmp	r3, #0
    5750:	d000      	beq.n	5754 <_spi_interrupt_handler+0x1e4>
    5752:	e782      	b.n	565a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5754:	3302      	adds	r3, #2
    5756:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    5758:	3301      	adds	r3, #1
    575a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    575c:	2200      	movs	r2, #0
    575e:	3335      	adds	r3, #53	; 0x35
    5760:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    5762:	07fb      	lsls	r3, r7, #31
    5764:	d400      	bmi.n	5768 <_spi_interrupt_handler+0x1f8>
    5766:	e76d      	b.n	5644 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    5768:	0020      	movs	r0, r4
    576a:	68e3      	ldr	r3, [r4, #12]
    576c:	4798      	blx	r3
    576e:	e769      	b.n	5644 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    5770:	0020      	movs	r0, r4
    5772:	6a23      	ldr	r3, [r4, #32]
    5774:	4798      	blx	r3
    5776:	e770      	b.n	565a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5778:	2380      	movs	r3, #128	; 0x80
    577a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    577c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    577e:	067b      	lsls	r3, r7, #25
    5780:	d400      	bmi.n	5784 <_spi_interrupt_handler+0x214>
    5782:	e76e      	b.n	5662 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5784:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5786:	0020      	movs	r0, r4
    5788:	4798      	blx	r3
}
    578a:	e76a      	b.n	5662 <_spi_interrupt_handler+0xf2>
    578c:	200008a8 	.word	0x200008a8
    5790:	200008a4 	.word	0x200008a4

00005794 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5794:	b5f0      	push	{r4, r5, r6, r7, lr}
    5796:	46de      	mov	lr, fp
    5798:	4657      	mov	r7, sl
    579a:	464e      	mov	r6, r9
    579c:	4645      	mov	r5, r8
    579e:	b5e0      	push	{r5, r6, r7, lr}
    57a0:	b087      	sub	sp, #28
    57a2:	4680      	mov	r8, r0
    57a4:	9104      	str	r1, [sp, #16]
    57a6:	0016      	movs	r6, r2
    57a8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    57aa:	2200      	movs	r2, #0
    57ac:	2300      	movs	r3, #0
    57ae:	2100      	movs	r1, #0
    57b0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    57b2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    57b4:	2001      	movs	r0, #1
    57b6:	0021      	movs	r1, r4
    57b8:	9600      	str	r6, [sp, #0]
    57ba:	9701      	str	r7, [sp, #4]
    57bc:	465c      	mov	r4, fp
    57be:	9403      	str	r4, [sp, #12]
    57c0:	4644      	mov	r4, r8
    57c2:	9405      	str	r4, [sp, #20]
    57c4:	e013      	b.n	57ee <long_division+0x5a>
    57c6:	2420      	movs	r4, #32
    57c8:	1a64      	subs	r4, r4, r1
    57ca:	0005      	movs	r5, r0
    57cc:	40e5      	lsrs	r5, r4
    57ce:	46a8      	mov	r8, r5
    57d0:	e014      	b.n	57fc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    57d2:	9c00      	ldr	r4, [sp, #0]
    57d4:	9d01      	ldr	r5, [sp, #4]
    57d6:	1b12      	subs	r2, r2, r4
    57d8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    57da:	465c      	mov	r4, fp
    57dc:	464d      	mov	r5, r9
    57de:	432c      	orrs	r4, r5
    57e0:	46a3      	mov	fp, r4
    57e2:	9c03      	ldr	r4, [sp, #12]
    57e4:	4645      	mov	r5, r8
    57e6:	432c      	orrs	r4, r5
    57e8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    57ea:	3901      	subs	r1, #1
    57ec:	d325      	bcc.n	583a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    57ee:	2420      	movs	r4, #32
    57f0:	4264      	negs	r4, r4
    57f2:	190c      	adds	r4, r1, r4
    57f4:	d4e7      	bmi.n	57c6 <long_division+0x32>
    57f6:	0005      	movs	r5, r0
    57f8:	40a5      	lsls	r5, r4
    57fa:	46a8      	mov	r8, r5
    57fc:	0004      	movs	r4, r0
    57fe:	408c      	lsls	r4, r1
    5800:	46a1      	mov	r9, r4
		r = r << 1;
    5802:	1892      	adds	r2, r2, r2
    5804:	415b      	adcs	r3, r3
    5806:	0014      	movs	r4, r2
    5808:	001d      	movs	r5, r3
		if (n & bit_shift) {
    580a:	9e05      	ldr	r6, [sp, #20]
    580c:	464f      	mov	r7, r9
    580e:	403e      	ands	r6, r7
    5810:	46b4      	mov	ip, r6
    5812:	9e04      	ldr	r6, [sp, #16]
    5814:	4647      	mov	r7, r8
    5816:	403e      	ands	r6, r7
    5818:	46b2      	mov	sl, r6
    581a:	4666      	mov	r6, ip
    581c:	4657      	mov	r7, sl
    581e:	433e      	orrs	r6, r7
    5820:	d003      	beq.n	582a <long_division+0x96>
			r |= 0x01;
    5822:	0006      	movs	r6, r0
    5824:	4326      	orrs	r6, r4
    5826:	0032      	movs	r2, r6
    5828:	002b      	movs	r3, r5
		if (r >= d) {
    582a:	9c00      	ldr	r4, [sp, #0]
    582c:	9d01      	ldr	r5, [sp, #4]
    582e:	429d      	cmp	r5, r3
    5830:	d8db      	bhi.n	57ea <long_division+0x56>
    5832:	d1ce      	bne.n	57d2 <long_division+0x3e>
    5834:	4294      	cmp	r4, r2
    5836:	d8d8      	bhi.n	57ea <long_division+0x56>
    5838:	e7cb      	b.n	57d2 <long_division+0x3e>
    583a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    583c:	4658      	mov	r0, fp
    583e:	0019      	movs	r1, r3
    5840:	b007      	add	sp, #28
    5842:	bc3c      	pop	{r2, r3, r4, r5}
    5844:	4690      	mov	r8, r2
    5846:	4699      	mov	r9, r3
    5848:	46a2      	mov	sl, r4
    584a:	46ab      	mov	fp, r5
    584c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000584e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    584e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5850:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5852:	2340      	movs	r3, #64	; 0x40
    5854:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5856:	4281      	cmp	r1, r0
    5858:	d202      	bcs.n	5860 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    585a:	0018      	movs	r0, r3
    585c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    585e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5860:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5862:	1c63      	adds	r3, r4, #1
    5864:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5866:	4288      	cmp	r0, r1
    5868:	d9f9      	bls.n	585e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    586a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    586c:	2cff      	cmp	r4, #255	; 0xff
    586e:	d8f4      	bhi.n	585a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5870:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5872:	2300      	movs	r3, #0
    5874:	e7f1      	b.n	585a <_sercom_get_sync_baud_val+0xc>
	...

00005878 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5878:	b5f0      	push	{r4, r5, r6, r7, lr}
    587a:	b083      	sub	sp, #12
    587c:	000f      	movs	r7, r1
    587e:	0016      	movs	r6, r2
    5880:	aa08      	add	r2, sp, #32
    5882:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5884:	0004      	movs	r4, r0
    5886:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5888:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    588a:	42bc      	cmp	r4, r7
    588c:	d902      	bls.n	5894 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    588e:	0010      	movs	r0, r2
    5890:	b003      	add	sp, #12
    5892:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5894:	2b00      	cmp	r3, #0
    5896:	d114      	bne.n	58c2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5898:	0002      	movs	r2, r0
    589a:	0008      	movs	r0, r1
    589c:	2100      	movs	r1, #0
    589e:	4c19      	ldr	r4, [pc, #100]	; (5904 <_sercom_get_async_baud_val+0x8c>)
    58a0:	47a0      	blx	r4
    58a2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    58a4:	003a      	movs	r2, r7
    58a6:	2300      	movs	r3, #0
    58a8:	2000      	movs	r0, #0
    58aa:	4c17      	ldr	r4, [pc, #92]	; (5908 <_sercom_get_async_baud_val+0x90>)
    58ac:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    58ae:	2200      	movs	r2, #0
    58b0:	2301      	movs	r3, #1
    58b2:	1a12      	subs	r2, r2, r0
    58b4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    58b6:	0c12      	lsrs	r2, r2, #16
    58b8:	041b      	lsls	r3, r3, #16
    58ba:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    58bc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    58be:	2200      	movs	r2, #0
    58c0:	e7e5      	b.n	588e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    58c2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    58c4:	2b01      	cmp	r3, #1
    58c6:	d1f9      	bne.n	58bc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    58c8:	000a      	movs	r2, r1
    58ca:	2300      	movs	r3, #0
    58cc:	2100      	movs	r1, #0
    58ce:	4c0d      	ldr	r4, [pc, #52]	; (5904 <_sercom_get_async_baud_val+0x8c>)
    58d0:	47a0      	blx	r4
    58d2:	0002      	movs	r2, r0
    58d4:	000b      	movs	r3, r1
    58d6:	9200      	str	r2, [sp, #0]
    58d8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    58da:	0038      	movs	r0, r7
    58dc:	2100      	movs	r1, #0
    58de:	4c0a      	ldr	r4, [pc, #40]	; (5908 <_sercom_get_async_baud_val+0x90>)
    58e0:	47a0      	blx	r4
    58e2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    58e4:	2380      	movs	r3, #128	; 0x80
    58e6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    58e8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    58ea:	4298      	cmp	r0, r3
    58ec:	d8cf      	bhi.n	588e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    58ee:	0f79      	lsrs	r1, r7, #29
    58f0:	00f8      	lsls	r0, r7, #3
    58f2:	9a00      	ldr	r2, [sp, #0]
    58f4:	9b01      	ldr	r3, [sp, #4]
    58f6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    58f8:	00ea      	lsls	r2, r5, #3
    58fa:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    58fc:	b2d2      	uxtb	r2, r2
    58fe:	0352      	lsls	r2, r2, #13
    5900:	432a      	orrs	r2, r5
    5902:	e7db      	b.n	58bc <_sercom_get_async_baud_val+0x44>
    5904:	0000e401 	.word	0x0000e401
    5908:	00005795 	.word	0x00005795

0000590c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    590c:	b510      	push	{r4, lr}
    590e:	b082      	sub	sp, #8
    5910:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5912:	4b0e      	ldr	r3, [pc, #56]	; (594c <sercom_set_gclk_generator+0x40>)
    5914:	781b      	ldrb	r3, [r3, #0]
    5916:	2b00      	cmp	r3, #0
    5918:	d007      	beq.n	592a <sercom_set_gclk_generator+0x1e>
    591a:	2900      	cmp	r1, #0
    591c:	d105      	bne.n	592a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    591e:	4b0b      	ldr	r3, [pc, #44]	; (594c <sercom_set_gclk_generator+0x40>)
    5920:	785b      	ldrb	r3, [r3, #1]
    5922:	4283      	cmp	r3, r0
    5924:	d010      	beq.n	5948 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5926:	201d      	movs	r0, #29
    5928:	e00c      	b.n	5944 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    592a:	a901      	add	r1, sp, #4
    592c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    592e:	2013      	movs	r0, #19
    5930:	4b07      	ldr	r3, [pc, #28]	; (5950 <sercom_set_gclk_generator+0x44>)
    5932:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5934:	2013      	movs	r0, #19
    5936:	4b07      	ldr	r3, [pc, #28]	; (5954 <sercom_set_gclk_generator+0x48>)
    5938:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    593a:	4b04      	ldr	r3, [pc, #16]	; (594c <sercom_set_gclk_generator+0x40>)
    593c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    593e:	2201      	movs	r2, #1
    5940:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5942:	2000      	movs	r0, #0
}
    5944:	b002      	add	sp, #8
    5946:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5948:	2000      	movs	r0, #0
    594a:	e7fb      	b.n	5944 <sercom_set_gclk_generator+0x38>
    594c:	2000023c 	.word	0x2000023c
    5950:	00009a01 	.word	0x00009a01
    5954:	00009975 	.word	0x00009975

00005958 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5958:	4b40      	ldr	r3, [pc, #256]	; (5a5c <_sercom_get_default_pad+0x104>)
    595a:	4298      	cmp	r0, r3
    595c:	d031      	beq.n	59c2 <_sercom_get_default_pad+0x6a>
    595e:	d90a      	bls.n	5976 <_sercom_get_default_pad+0x1e>
    5960:	4b3f      	ldr	r3, [pc, #252]	; (5a60 <_sercom_get_default_pad+0x108>)
    5962:	4298      	cmp	r0, r3
    5964:	d04d      	beq.n	5a02 <_sercom_get_default_pad+0xaa>
    5966:	4b3f      	ldr	r3, [pc, #252]	; (5a64 <_sercom_get_default_pad+0x10c>)
    5968:	4298      	cmp	r0, r3
    596a:	d05a      	beq.n	5a22 <_sercom_get_default_pad+0xca>
    596c:	4b3e      	ldr	r3, [pc, #248]	; (5a68 <_sercom_get_default_pad+0x110>)
    596e:	4298      	cmp	r0, r3
    5970:	d037      	beq.n	59e2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5972:	2000      	movs	r0, #0
}
    5974:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5976:	4b3d      	ldr	r3, [pc, #244]	; (5a6c <_sercom_get_default_pad+0x114>)
    5978:	4298      	cmp	r0, r3
    597a:	d00c      	beq.n	5996 <_sercom_get_default_pad+0x3e>
    597c:	4b3c      	ldr	r3, [pc, #240]	; (5a70 <_sercom_get_default_pad+0x118>)
    597e:	4298      	cmp	r0, r3
    5980:	d1f7      	bne.n	5972 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5982:	2901      	cmp	r1, #1
    5984:	d017      	beq.n	59b6 <_sercom_get_default_pad+0x5e>
    5986:	2900      	cmp	r1, #0
    5988:	d05d      	beq.n	5a46 <_sercom_get_default_pad+0xee>
    598a:	2902      	cmp	r1, #2
    598c:	d015      	beq.n	59ba <_sercom_get_default_pad+0x62>
    598e:	2903      	cmp	r1, #3
    5990:	d015      	beq.n	59be <_sercom_get_default_pad+0x66>
	return 0;
    5992:	2000      	movs	r0, #0
    5994:	e7ee      	b.n	5974 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5996:	2901      	cmp	r1, #1
    5998:	d007      	beq.n	59aa <_sercom_get_default_pad+0x52>
    599a:	2900      	cmp	r1, #0
    599c:	d051      	beq.n	5a42 <_sercom_get_default_pad+0xea>
    599e:	2902      	cmp	r1, #2
    59a0:	d005      	beq.n	59ae <_sercom_get_default_pad+0x56>
    59a2:	2903      	cmp	r1, #3
    59a4:	d005      	beq.n	59b2 <_sercom_get_default_pad+0x5a>
	return 0;
    59a6:	2000      	movs	r0, #0
    59a8:	e7e4      	b.n	5974 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    59aa:	4832      	ldr	r0, [pc, #200]	; (5a74 <_sercom_get_default_pad+0x11c>)
    59ac:	e7e2      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59ae:	4832      	ldr	r0, [pc, #200]	; (5a78 <_sercom_get_default_pad+0x120>)
    59b0:	e7e0      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59b2:	4832      	ldr	r0, [pc, #200]	; (5a7c <_sercom_get_default_pad+0x124>)
    59b4:	e7de      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59b6:	4832      	ldr	r0, [pc, #200]	; (5a80 <_sercom_get_default_pad+0x128>)
    59b8:	e7dc      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59ba:	4832      	ldr	r0, [pc, #200]	; (5a84 <_sercom_get_default_pad+0x12c>)
    59bc:	e7da      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59be:	4832      	ldr	r0, [pc, #200]	; (5a88 <_sercom_get_default_pad+0x130>)
    59c0:	e7d8      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59c2:	2901      	cmp	r1, #1
    59c4:	d007      	beq.n	59d6 <_sercom_get_default_pad+0x7e>
    59c6:	2900      	cmp	r1, #0
    59c8:	d03f      	beq.n	5a4a <_sercom_get_default_pad+0xf2>
    59ca:	2902      	cmp	r1, #2
    59cc:	d005      	beq.n	59da <_sercom_get_default_pad+0x82>
    59ce:	2903      	cmp	r1, #3
    59d0:	d005      	beq.n	59de <_sercom_get_default_pad+0x86>
	return 0;
    59d2:	2000      	movs	r0, #0
    59d4:	e7ce      	b.n	5974 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    59d6:	482d      	ldr	r0, [pc, #180]	; (5a8c <_sercom_get_default_pad+0x134>)
    59d8:	e7cc      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59da:	482d      	ldr	r0, [pc, #180]	; (5a90 <_sercom_get_default_pad+0x138>)
    59dc:	e7ca      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59de:	482d      	ldr	r0, [pc, #180]	; (5a94 <_sercom_get_default_pad+0x13c>)
    59e0:	e7c8      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59e2:	2901      	cmp	r1, #1
    59e4:	d007      	beq.n	59f6 <_sercom_get_default_pad+0x9e>
    59e6:	2900      	cmp	r1, #0
    59e8:	d031      	beq.n	5a4e <_sercom_get_default_pad+0xf6>
    59ea:	2902      	cmp	r1, #2
    59ec:	d005      	beq.n	59fa <_sercom_get_default_pad+0xa2>
    59ee:	2903      	cmp	r1, #3
    59f0:	d005      	beq.n	59fe <_sercom_get_default_pad+0xa6>
	return 0;
    59f2:	2000      	movs	r0, #0
    59f4:	e7be      	b.n	5974 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    59f6:	4828      	ldr	r0, [pc, #160]	; (5a98 <_sercom_get_default_pad+0x140>)
    59f8:	e7bc      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59fa:	4828      	ldr	r0, [pc, #160]	; (5a9c <_sercom_get_default_pad+0x144>)
    59fc:	e7ba      	b.n	5974 <_sercom_get_default_pad+0x1c>
    59fe:	4828      	ldr	r0, [pc, #160]	; (5aa0 <_sercom_get_default_pad+0x148>)
    5a00:	e7b8      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a02:	2901      	cmp	r1, #1
    5a04:	d007      	beq.n	5a16 <_sercom_get_default_pad+0xbe>
    5a06:	2900      	cmp	r1, #0
    5a08:	d023      	beq.n	5a52 <_sercom_get_default_pad+0xfa>
    5a0a:	2902      	cmp	r1, #2
    5a0c:	d005      	beq.n	5a1a <_sercom_get_default_pad+0xc2>
    5a0e:	2903      	cmp	r1, #3
    5a10:	d005      	beq.n	5a1e <_sercom_get_default_pad+0xc6>
	return 0;
    5a12:	2000      	movs	r0, #0
    5a14:	e7ae      	b.n	5974 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5a16:	4823      	ldr	r0, [pc, #140]	; (5aa4 <_sercom_get_default_pad+0x14c>)
    5a18:	e7ac      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a1a:	4823      	ldr	r0, [pc, #140]	; (5aa8 <_sercom_get_default_pad+0x150>)
    5a1c:	e7aa      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a1e:	4823      	ldr	r0, [pc, #140]	; (5aac <_sercom_get_default_pad+0x154>)
    5a20:	e7a8      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a22:	2901      	cmp	r1, #1
    5a24:	d007      	beq.n	5a36 <_sercom_get_default_pad+0xde>
    5a26:	2900      	cmp	r1, #0
    5a28:	d015      	beq.n	5a56 <_sercom_get_default_pad+0xfe>
    5a2a:	2902      	cmp	r1, #2
    5a2c:	d005      	beq.n	5a3a <_sercom_get_default_pad+0xe2>
    5a2e:	2903      	cmp	r1, #3
    5a30:	d005      	beq.n	5a3e <_sercom_get_default_pad+0xe6>
	return 0;
    5a32:	2000      	movs	r0, #0
    5a34:	e79e      	b.n	5974 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5a36:	481e      	ldr	r0, [pc, #120]	; (5ab0 <_sercom_get_default_pad+0x158>)
    5a38:	e79c      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a3a:	481e      	ldr	r0, [pc, #120]	; (5ab4 <_sercom_get_default_pad+0x15c>)
    5a3c:	e79a      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a3e:	481e      	ldr	r0, [pc, #120]	; (5ab8 <_sercom_get_default_pad+0x160>)
    5a40:	e798      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a42:	481e      	ldr	r0, [pc, #120]	; (5abc <_sercom_get_default_pad+0x164>)
    5a44:	e796      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a46:	2003      	movs	r0, #3
    5a48:	e794      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a4a:	481d      	ldr	r0, [pc, #116]	; (5ac0 <_sercom_get_default_pad+0x168>)
    5a4c:	e792      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a4e:	481d      	ldr	r0, [pc, #116]	; (5ac4 <_sercom_get_default_pad+0x16c>)
    5a50:	e790      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a52:	481d      	ldr	r0, [pc, #116]	; (5ac8 <_sercom_get_default_pad+0x170>)
    5a54:	e78e      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a56:	481d      	ldr	r0, [pc, #116]	; (5acc <_sercom_get_default_pad+0x174>)
    5a58:	e78c      	b.n	5974 <_sercom_get_default_pad+0x1c>
    5a5a:	46c0      	nop			; (mov r8, r8)
    5a5c:	42001000 	.word	0x42001000
    5a60:	42001800 	.word	0x42001800
    5a64:	42001c00 	.word	0x42001c00
    5a68:	42001400 	.word	0x42001400
    5a6c:	42000800 	.word	0x42000800
    5a70:	42000c00 	.word	0x42000c00
    5a74:	00050003 	.word	0x00050003
    5a78:	00060003 	.word	0x00060003
    5a7c:	00070003 	.word	0x00070003
    5a80:	00010003 	.word	0x00010003
    5a84:	001e0003 	.word	0x001e0003
    5a88:	001f0003 	.word	0x001f0003
    5a8c:	00090003 	.word	0x00090003
    5a90:	000a0003 	.word	0x000a0003
    5a94:	000b0003 	.word	0x000b0003
    5a98:	00110003 	.word	0x00110003
    5a9c:	00120003 	.word	0x00120003
    5aa0:	00130003 	.word	0x00130003
    5aa4:	000d0003 	.word	0x000d0003
    5aa8:	000e0003 	.word	0x000e0003
    5aac:	000f0003 	.word	0x000f0003
    5ab0:	00170003 	.word	0x00170003
    5ab4:	00180003 	.word	0x00180003
    5ab8:	00190003 	.word	0x00190003
    5abc:	00040003 	.word	0x00040003
    5ac0:	00080003 	.word	0x00080003
    5ac4:	00100003 	.word	0x00100003
    5ac8:	000c0003 	.word	0x000c0003
    5acc:	00160003 	.word	0x00160003

00005ad0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5ad0:	b530      	push	{r4, r5, lr}
    5ad2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5ad4:	4b0b      	ldr	r3, [pc, #44]	; (5b04 <_sercom_get_sercom_inst_index+0x34>)
    5ad6:	466a      	mov	r2, sp
    5ad8:	cb32      	ldmia	r3!, {r1, r4, r5}
    5ada:	c232      	stmia	r2!, {r1, r4, r5}
    5adc:	cb32      	ldmia	r3!, {r1, r4, r5}
    5ade:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5ae0:	9b00      	ldr	r3, [sp, #0]
    5ae2:	4283      	cmp	r3, r0
    5ae4:	d00b      	beq.n	5afe <_sercom_get_sercom_inst_index+0x2e>
    5ae6:	2301      	movs	r3, #1
    5ae8:	009a      	lsls	r2, r3, #2
    5aea:	4669      	mov	r1, sp
    5aec:	5852      	ldr	r2, [r2, r1]
    5aee:	4282      	cmp	r2, r0
    5af0:	d006      	beq.n	5b00 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5af2:	3301      	adds	r3, #1
    5af4:	2b06      	cmp	r3, #6
    5af6:	d1f7      	bne.n	5ae8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5af8:	2000      	movs	r0, #0
}
    5afa:	b007      	add	sp, #28
    5afc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5afe:	2300      	movs	r3, #0
			return i;
    5b00:	b2d8      	uxtb	r0, r3
    5b02:	e7fa      	b.n	5afa <_sercom_get_sercom_inst_index+0x2a>
    5b04:	000117fc 	.word	0x000117fc

00005b08 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5b08:	4770      	bx	lr
	...

00005b0c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5b0e:	4b0a      	ldr	r3, [pc, #40]	; (5b38 <_sercom_set_handler+0x2c>)
    5b10:	781b      	ldrb	r3, [r3, #0]
    5b12:	2b00      	cmp	r3, #0
    5b14:	d10c      	bne.n	5b30 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5b16:	4f09      	ldr	r7, [pc, #36]	; (5b3c <_sercom_set_handler+0x30>)
    5b18:	4e09      	ldr	r6, [pc, #36]	; (5b40 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5b1a:	4d0a      	ldr	r5, [pc, #40]	; (5b44 <_sercom_set_handler+0x38>)
    5b1c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5b1e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5b20:	195a      	adds	r2, r3, r5
    5b22:	6014      	str	r4, [r2, #0]
    5b24:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5b26:	2b18      	cmp	r3, #24
    5b28:	d1f9      	bne.n	5b1e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5b2a:	2201      	movs	r2, #1
    5b2c:	4b02      	ldr	r3, [pc, #8]	; (5b38 <_sercom_set_handler+0x2c>)
    5b2e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5b30:	0080      	lsls	r0, r0, #2
    5b32:	4b02      	ldr	r3, [pc, #8]	; (5b3c <_sercom_set_handler+0x30>)
    5b34:	50c1      	str	r1, [r0, r3]
}
    5b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b38:	2000023e 	.word	0x2000023e
    5b3c:	20000240 	.word	0x20000240
    5b40:	00005b09 	.word	0x00005b09
    5b44:	200008a8 	.word	0x200008a8

00005b48 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5b48:	b500      	push	{lr}
    5b4a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5b4c:	2309      	movs	r3, #9
    5b4e:	466a      	mov	r2, sp
    5b50:	7013      	strb	r3, [r2, #0]
    5b52:	3301      	adds	r3, #1
    5b54:	7053      	strb	r3, [r2, #1]
    5b56:	3301      	adds	r3, #1
    5b58:	7093      	strb	r3, [r2, #2]
    5b5a:	3301      	adds	r3, #1
    5b5c:	70d3      	strb	r3, [r2, #3]
    5b5e:	3301      	adds	r3, #1
    5b60:	7113      	strb	r3, [r2, #4]
    5b62:	3301      	adds	r3, #1
    5b64:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5b66:	4b03      	ldr	r3, [pc, #12]	; (5b74 <_sercom_get_interrupt_vector+0x2c>)
    5b68:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5b6a:	466b      	mov	r3, sp
    5b6c:	5618      	ldrsb	r0, [r3, r0]
}
    5b6e:	b003      	add	sp, #12
    5b70:	bd00      	pop	{pc}
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	00005ad1 	.word	0x00005ad1

00005b78 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5b78:	b510      	push	{r4, lr}
    5b7a:	4b02      	ldr	r3, [pc, #8]	; (5b84 <SERCOM0_Handler+0xc>)
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	2000      	movs	r0, #0
    5b80:	4798      	blx	r3
    5b82:	bd10      	pop	{r4, pc}
    5b84:	20000240 	.word	0x20000240

00005b88 <SERCOM1_Handler>:
    5b88:	b510      	push	{r4, lr}
    5b8a:	4b02      	ldr	r3, [pc, #8]	; (5b94 <SERCOM1_Handler+0xc>)
    5b8c:	685b      	ldr	r3, [r3, #4]
    5b8e:	2001      	movs	r0, #1
    5b90:	4798      	blx	r3
    5b92:	bd10      	pop	{r4, pc}
    5b94:	20000240 	.word	0x20000240

00005b98 <SERCOM2_Handler>:
    5b98:	b510      	push	{r4, lr}
    5b9a:	4b02      	ldr	r3, [pc, #8]	; (5ba4 <SERCOM2_Handler+0xc>)
    5b9c:	689b      	ldr	r3, [r3, #8]
    5b9e:	2002      	movs	r0, #2
    5ba0:	4798      	blx	r3
    5ba2:	bd10      	pop	{r4, pc}
    5ba4:	20000240 	.word	0x20000240

00005ba8 <SERCOM3_Handler>:
    5ba8:	b510      	push	{r4, lr}
    5baa:	4b02      	ldr	r3, [pc, #8]	; (5bb4 <SERCOM3_Handler+0xc>)
    5bac:	68db      	ldr	r3, [r3, #12]
    5bae:	2003      	movs	r0, #3
    5bb0:	4798      	blx	r3
    5bb2:	bd10      	pop	{r4, pc}
    5bb4:	20000240 	.word	0x20000240

00005bb8 <SERCOM4_Handler>:
    5bb8:	b510      	push	{r4, lr}
    5bba:	4b02      	ldr	r3, [pc, #8]	; (5bc4 <SERCOM4_Handler+0xc>)
    5bbc:	691b      	ldr	r3, [r3, #16]
    5bbe:	2004      	movs	r0, #4
    5bc0:	4798      	blx	r3
    5bc2:	bd10      	pop	{r4, pc}
    5bc4:	20000240 	.word	0x20000240

00005bc8 <SERCOM5_Handler>:
    5bc8:	b510      	push	{r4, lr}
    5bca:	4b02      	ldr	r3, [pc, #8]	; (5bd4 <SERCOM5_Handler+0xc>)
    5bcc:	695b      	ldr	r3, [r3, #20]
    5bce:	2005      	movs	r0, #5
    5bd0:	4798      	blx	r3
    5bd2:	bd10      	pop	{r4, pc}
    5bd4:	20000240 	.word	0x20000240

00005bd8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5bd8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    5bda:	2a00      	cmp	r2, #0
    5bdc:	d001      	beq.n	5be2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    5bde:	0018      	movs	r0, r3
    5be0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    5be2:	008b      	lsls	r3, r1, #2
    5be4:	4a06      	ldr	r2, [pc, #24]	; (5c00 <extint_register_callback+0x28>)
    5be6:	589b      	ldr	r3, [r3, r2]
    5be8:	2b00      	cmp	r3, #0
    5bea:	d003      	beq.n	5bf4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    5bec:	4283      	cmp	r3, r0
    5bee:	d005      	beq.n	5bfc <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    5bf0:	231d      	movs	r3, #29
    5bf2:	e7f4      	b.n	5bde <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    5bf4:	0089      	lsls	r1, r1, #2
    5bf6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    5bf8:	2300      	movs	r3, #0
    5bfa:	e7f0      	b.n	5bde <extint_register_callback+0x6>
		return STATUS_OK;
    5bfc:	2300      	movs	r3, #0
    5bfe:	e7ee      	b.n	5bde <extint_register_callback+0x6>
    5c00:	2000084c 	.word	0x2000084c

00005c04 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5c04:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5c06:	2900      	cmp	r1, #0
    5c08:	d001      	beq.n	5c0e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    5c0a:	0018      	movs	r0, r3
    5c0c:	4770      	bx	lr
		return NULL;
    5c0e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    5c10:	281f      	cmp	r0, #31
    5c12:	d800      	bhi.n	5c16 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    5c14:	4a02      	ldr	r2, [pc, #8]	; (5c20 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    5c16:	2301      	movs	r3, #1
    5c18:	4083      	lsls	r3, r0
    5c1a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    5c1c:	2300      	movs	r3, #0
    5c1e:	e7f4      	b.n	5c0a <extint_chan_enable_callback+0x6>
    5c20:	40001800 	.word	0x40001800

00005c24 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5c24:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5c26:	2900      	cmp	r1, #0
    5c28:	d001      	beq.n	5c2e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    5c2a:	0018      	movs	r0, r3
    5c2c:	4770      	bx	lr
		return NULL;
    5c2e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    5c30:	281f      	cmp	r0, #31
    5c32:	d800      	bhi.n	5c36 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    5c34:	4a02      	ldr	r2, [pc, #8]	; (5c40 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    5c36:	2301      	movs	r3, #1
    5c38:	4083      	lsls	r3, r0
    5c3a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    5c3c:	2300      	movs	r3, #0
    5c3e:	e7f4      	b.n	5c2a <extint_chan_disable_callback+0x6>
    5c40:	40001800 	.word	0x40001800

00005c44 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5c44:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5c46:	2200      	movs	r2, #0
    5c48:	4b10      	ldr	r3, [pc, #64]	; (5c8c <EIC_Handler+0x48>)
    5c4a:	701a      	strb	r2, [r3, #0]
    5c4c:	2300      	movs	r3, #0
    5c4e:	4910      	ldr	r1, [pc, #64]	; (5c90 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    5c50:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5c52:	4e10      	ldr	r6, [pc, #64]	; (5c94 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5c54:	4c0d      	ldr	r4, [pc, #52]	; (5c8c <EIC_Handler+0x48>)
    5c56:	e00a      	b.n	5c6e <EIC_Handler+0x2a>
		return eics[eic_index];
    5c58:	490d      	ldr	r1, [pc, #52]	; (5c90 <EIC_Handler+0x4c>)
    5c5a:	e008      	b.n	5c6e <EIC_Handler+0x2a>
    5c5c:	7823      	ldrb	r3, [r4, #0]
    5c5e:	3301      	adds	r3, #1
    5c60:	b2db      	uxtb	r3, r3
    5c62:	7023      	strb	r3, [r4, #0]
    5c64:	2b0f      	cmp	r3, #15
    5c66:	d810      	bhi.n	5c8a <EIC_Handler+0x46>
		return NULL;
    5c68:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    5c6a:	2b1f      	cmp	r3, #31
    5c6c:	d9f4      	bls.n	5c58 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    5c6e:	0028      	movs	r0, r5
    5c70:	4018      	ands	r0, r3
    5c72:	2201      	movs	r2, #1
    5c74:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    5c76:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    5c78:	4210      	tst	r0, r2
    5c7a:	d0ef      	beq.n	5c5c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    5c7c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5c7e:	009b      	lsls	r3, r3, #2
    5c80:	599b      	ldr	r3, [r3, r6]
    5c82:	2b00      	cmp	r3, #0
    5c84:	d0ea      	beq.n	5c5c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5c86:	4798      	blx	r3
    5c88:	e7e8      	b.n	5c5c <EIC_Handler+0x18>
			}
		}
	}
}
    5c8a:	bd70      	pop	{r4, r5, r6, pc}
    5c8c:	200008c0 	.word	0x200008c0
    5c90:	40001800 	.word	0x40001800
    5c94:	2000084c 	.word	0x2000084c

00005c98 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    5c98:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    5c9a:	2000      	movs	r0, #0
    5c9c:	4b08      	ldr	r3, [pc, #32]	; (5cc0 <delay_init+0x28>)
    5c9e:	4798      	blx	r3
    5ca0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    5ca2:	4c08      	ldr	r4, [pc, #32]	; (5cc4 <delay_init+0x2c>)
    5ca4:	21fa      	movs	r1, #250	; 0xfa
    5ca6:	0089      	lsls	r1, r1, #2
    5ca8:	47a0      	blx	r4
    5caa:	4b07      	ldr	r3, [pc, #28]	; (5cc8 <delay_init+0x30>)
    5cac:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    5cae:	4907      	ldr	r1, [pc, #28]	; (5ccc <delay_init+0x34>)
    5cb0:	0028      	movs	r0, r5
    5cb2:	47a0      	blx	r4
    5cb4:	4b06      	ldr	r3, [pc, #24]	; (5cd0 <delay_init+0x38>)
    5cb6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    5cb8:	2205      	movs	r2, #5
    5cba:	4b06      	ldr	r3, [pc, #24]	; (5cd4 <delay_init+0x3c>)
    5cbc:	601a      	str	r2, [r3, #0]
}
    5cbe:	bd70      	pop	{r4, r5, r6, pc}
    5cc0:	000098e9 	.word	0x000098e9
    5cc4:	0000e099 	.word	0x0000e099
    5cc8:	20000000 	.word	0x20000000
    5ccc:	000f4240 	.word	0x000f4240
    5cd0:	20000004 	.word	0x20000004
    5cd4:	e000e010 	.word	0xe000e010

00005cd8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    5cd8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    5cda:	4b08      	ldr	r3, [pc, #32]	; (5cfc <delay_cycles_us+0x24>)
    5cdc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    5cde:	4a08      	ldr	r2, [pc, #32]	; (5d00 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    5ce0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5ce2:	2180      	movs	r1, #128	; 0x80
    5ce4:	0249      	lsls	r1, r1, #9
	while (n--) {
    5ce6:	3801      	subs	r0, #1
    5ce8:	d307      	bcc.n	5cfa <delay_cycles_us+0x22>
	if (n > 0) {
    5cea:	2c00      	cmp	r4, #0
    5cec:	d0fb      	beq.n	5ce6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    5cee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    5cf0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5cf2:	6813      	ldr	r3, [r2, #0]
    5cf4:	420b      	tst	r3, r1
    5cf6:	d0fc      	beq.n	5cf2 <delay_cycles_us+0x1a>
    5cf8:	e7f5      	b.n	5ce6 <delay_cycles_us+0xe>
	}
}
    5cfa:	bd30      	pop	{r4, r5, pc}
    5cfc:	20000004 	.word	0x20000004
    5d00:	e000e010 	.word	0xe000e010

00005d04 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    5d04:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    5d06:	4b08      	ldr	r3, [pc, #32]	; (5d28 <delay_cycles_ms+0x24>)
    5d08:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    5d0a:	4a08      	ldr	r2, [pc, #32]	; (5d2c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    5d0c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5d0e:	2180      	movs	r1, #128	; 0x80
    5d10:	0249      	lsls	r1, r1, #9
	while (n--) {
    5d12:	3801      	subs	r0, #1
    5d14:	d307      	bcc.n	5d26 <delay_cycles_ms+0x22>
	if (n > 0) {
    5d16:	2c00      	cmp	r4, #0
    5d18:	d0fb      	beq.n	5d12 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    5d1a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    5d1c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5d1e:	6813      	ldr	r3, [r2, #0]
    5d20:	420b      	tst	r3, r1
    5d22:	d0fc      	beq.n	5d1e <delay_cycles_ms+0x1a>
    5d24:	e7f5      	b.n	5d12 <delay_cycles_ms+0xe>
	}
}
    5d26:	bd30      	pop	{r4, r5, pc}
    5d28:	20000000 	.word	0x20000000
    5d2c:	e000e010 	.word	0xe000e010

00005d30 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    5d30:	b510      	push	{r4, lr}
	if (gpfIsr) {
    5d32:	4b03      	ldr	r3, [pc, #12]	; (5d40 <chip_isr+0x10>)
    5d34:	681b      	ldr	r3, [r3, #0]
    5d36:	2b00      	cmp	r3, #0
    5d38:	d000      	beq.n	5d3c <chip_isr+0xc>
		gpfIsr();
    5d3a:	4798      	blx	r3
	}
}
    5d3c:	bd10      	pop	{r4, pc}
    5d3e:	46c0      	nop			; (mov r8, r8)
    5d40:	20000258 	.word	0x20000258

00005d44 <nm_bsp_deinit>:
 *	@fn		nm_bsp_deinit
 *	@brief	De-iInitialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
    5d44:	b500      	push	{lr}
    5d46:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    5d48:	a901      	add	r1, sp, #4
    5d4a:	2300      	movs	r3, #0
    5d4c:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
    5d4e:	708b      	strb	r3, [r1, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    5d50:	704b      	strb	r3, [r1, #1]
		port_base->OUTCLR.reg = pin_mask;
    5d52:	4b06      	ldr	r3, [pc, #24]	; (5d6c <nm_bsp_deinit+0x28>)
    5d54:	2280      	movs	r2, #128	; 0x80
    5d56:	0552      	lsls	r2, r2, #21
    5d58:	615a      	str	r2, [r3, #20]
    5d5a:	2280      	movs	r2, #128	; 0x80
    5d5c:	0512      	lsls	r2, r2, #20
    5d5e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	port_pin_set_config(CONF_WINC_SPI_INT_PIN, &pin_conf);
    5d60:	2029      	movs	r0, #41	; 0x29
    5d62:	4b03      	ldr	r3, [pc, #12]	; (5d70 <nm_bsp_deinit+0x2c>)
    5d64:	4798      	blx	r3
	return M2M_SUCCESS;
}
    5d66:	2000      	movs	r0, #0
    5d68:	b003      	add	sp, #12
    5d6a:	bd00      	pop	{pc}
    5d6c:	41004400 	.word	0x41004400
    5d70:	00009325 	.word	0x00009325

00005d74 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    5d74:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    5d76:	1e44      	subs	r4, r0, #1
    5d78:	2800      	cmp	r0, #0
    5d7a:	d004      	beq.n	5d86 <nm_bsp_sleep+0x12>
		delay_ms(1);
    5d7c:	4d02      	ldr	r5, [pc, #8]	; (5d88 <nm_bsp_sleep+0x14>)
    5d7e:	2001      	movs	r0, #1
    5d80:	47a8      	blx	r5
	while (u32TimeMsec--) {
    5d82:	3c01      	subs	r4, #1
    5d84:	d2fb      	bcs.n	5d7e <nm_bsp_sleep+0xa>
	}
}
    5d86:	bd70      	pop	{r4, r5, r6, pc}
    5d88:	00005d05 	.word	0x00005d05

00005d8c <nm_bsp_reset>:
{
    5d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d8e:	4c07      	ldr	r4, [pc, #28]	; (5dac <nm_bsp_reset+0x20>)
    5d90:	2780      	movs	r7, #128	; 0x80
    5d92:	057f      	lsls	r7, r7, #21
    5d94:	6167      	str	r7, [r4, #20]
    5d96:	2580      	movs	r5, #128	; 0x80
    5d98:	052d      	lsls	r5, r5, #20
    5d9a:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    5d9c:	2001      	movs	r0, #1
    5d9e:	4e04      	ldr	r6, [pc, #16]	; (5db0 <nm_bsp_reset+0x24>)
    5da0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    5da2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    5da4:	200a      	movs	r0, #10
    5da6:	47b0      	blx	r6
    5da8:	61a5      	str	r5, [r4, #24]
}
    5daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dac:	41004400 	.word	0x41004400
    5db0:	00005d75 	.word	0x00005d75

00005db4 <nm_bsp_init>:
{
    5db4:	b570      	push	{r4, r5, r6, lr}
    5db6:	b082      	sub	sp, #8
	gpfIsr = NULL;
    5db8:	2300      	movs	r3, #0
    5dba:	4a16      	ldr	r2, [pc, #88]	; (5e14 <nm_bsp_init+0x60>)
    5dbc:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5dbe:	ac01      	add	r4, sp, #4
    5dc0:	2501      	movs	r5, #1
    5dc2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    5dc4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5dc6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    5dc8:	0021      	movs	r1, r4
    5dca:	201b      	movs	r0, #27
    5dcc:	4e12      	ldr	r6, [pc, #72]	; (5e18 <nm_bsp_init+0x64>)
    5dce:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    5dd0:	0021      	movs	r1, r4
    5dd2:	201c      	movs	r0, #28
    5dd4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    5dd6:	0021      	movs	r1, r4
    5dd8:	2028      	movs	r0, #40	; 0x28
    5dda:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    5ddc:	4b0f      	ldr	r3, [pc, #60]	; (5e1c <nm_bsp_init+0x68>)
    5dde:	2280      	movs	r2, #128	; 0x80
    5de0:	0552      	lsls	r2, r2, #21
    5de2:	615a      	str	r2, [r3, #20]
    5de4:	2280      	movs	r2, #128	; 0x80
    5de6:	0512      	lsls	r2, r2, #20
    5de8:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    5dea:	4b0d      	ldr	r3, [pc, #52]	; (5e20 <nm_bsp_init+0x6c>)
    5dec:	681b      	ldr	r3, [r3, #0]
    5dee:	421d      	tst	r5, r3
    5df0:	d003      	beq.n	5dfa <nm_bsp_init+0x46>
    5df2:	4b0b      	ldr	r3, [pc, #44]	; (5e20 <nm_bsp_init+0x6c>)
    5df4:	681b      	ldr	r3, [r3, #0]
    5df6:	079b      	lsls	r3, r3, #30
    5df8:	d401      	bmi.n	5dfe <nm_bsp_init+0x4a>
	    delay_init();
    5dfa:	4b0a      	ldr	r3, [pc, #40]	; (5e24 <nm_bsp_init+0x70>)
    5dfc:	4798      	blx	r3
	nm_bsp_reset();
    5dfe:	4b0a      	ldr	r3, [pc, #40]	; (5e28 <nm_bsp_init+0x74>)
    5e00:	4798      	blx	r3
	cpu_irq_enable();
    5e02:	2201      	movs	r2, #1
    5e04:	4b09      	ldr	r3, [pc, #36]	; (5e2c <nm_bsp_init+0x78>)
    5e06:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    5e08:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5e0c:	b662      	cpsie	i
}
    5e0e:	2000      	movs	r0, #0
    5e10:	b002      	add	sp, #8
    5e12:	bd70      	pop	{r4, r5, r6, pc}
    5e14:	20000258 	.word	0x20000258
    5e18:	00009325 	.word	0x00009325
    5e1c:	41004400 	.word	0x41004400
    5e20:	e000e010 	.word	0xe000e010
    5e24:	00005c99 	.word	0x00005c99
    5e28:	00005d8d 	.word	0x00005d8d
    5e2c:	2000000a 	.word	0x2000000a

00005e30 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    5e30:	b510      	push	{r4, lr}
    5e32:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    5e34:	4b0e      	ldr	r3, [pc, #56]	; (5e70 <nm_bsp_register_isr+0x40>)
    5e36:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    5e38:	ac01      	add	r4, sp, #4
    5e3a:	0020      	movs	r0, r4
    5e3c:	4b0d      	ldr	r3, [pc, #52]	; (5e74 <nm_bsp_register_isr+0x44>)
    5e3e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    5e40:	2329      	movs	r3, #41	; 0x29
    5e42:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    5e44:	2300      	movs	r3, #0
    5e46:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    5e48:	3301      	adds	r3, #1
    5e4a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    5e4c:	3301      	adds	r3, #1
    5e4e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    5e50:	0021      	movs	r1, r4
    5e52:	2009      	movs	r0, #9
    5e54:	4b08      	ldr	r3, [pc, #32]	; (5e78 <nm_bsp_register_isr+0x48>)
    5e56:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    5e58:	2200      	movs	r2, #0
    5e5a:	2109      	movs	r1, #9
    5e5c:	4807      	ldr	r0, [pc, #28]	; (5e7c <nm_bsp_register_isr+0x4c>)
    5e5e:	4b08      	ldr	r3, [pc, #32]	; (5e80 <nm_bsp_register_isr+0x50>)
    5e60:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    5e62:	2100      	movs	r1, #0
    5e64:	2009      	movs	r0, #9
    5e66:	4b07      	ldr	r3, [pc, #28]	; (5e84 <nm_bsp_register_isr+0x54>)
    5e68:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    5e6a:	b004      	add	sp, #16
    5e6c:	bd10      	pop	{r4, pc}
    5e6e:	46c0      	nop			; (mov r8, r8)
    5e70:	20000258 	.word	0x20000258
    5e74:	00002999 	.word	0x00002999
    5e78:	000029ad 	.word	0x000029ad
    5e7c:	00005d31 	.word	0x00005d31
    5e80:	00005bd9 	.word	0x00005bd9
    5e84:	00005c05 	.word	0x00005c05

00005e88 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    5e88:	b510      	push	{r4, lr}
	if (u8Enable) {
    5e8a:	2800      	cmp	r0, #0
    5e8c:	d104      	bne.n	5e98 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    5e8e:	2100      	movs	r1, #0
    5e90:	2009      	movs	r0, #9
    5e92:	4b04      	ldr	r3, [pc, #16]	; (5ea4 <nm_bsp_interrupt_ctrl+0x1c>)
    5e94:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    5e96:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    5e98:	2100      	movs	r1, #0
    5e9a:	2009      	movs	r0, #9
    5e9c:	4b02      	ldr	r3, [pc, #8]	; (5ea8 <nm_bsp_interrupt_ctrl+0x20>)
    5e9e:	4798      	blx	r3
    5ea0:	e7f9      	b.n	5e96 <nm_bsp_interrupt_ctrl+0xe>
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	00005c25 	.word	0x00005c25
    5ea8:	00005c05 	.word	0x00005c05

00005eac <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    5eac:	b530      	push	{r4, r5, lr}
    5eae:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    5eb0:	4c30      	ldr	r4, [pc, #192]	; (5f74 <nm_bus_init+0xc8>)
    5eb2:	230e      	movs	r3, #14
    5eb4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5eb6:	2300      	movs	r3, #0
    5eb8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    5eba:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5ebc:	a901      	add	r1, sp, #4
    5ebe:	2201      	movs	r2, #1
    5ec0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5ec2:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5ec4:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5ec6:	200e      	movs	r0, #14
    5ec8:	4b2b      	ldr	r3, [pc, #172]	; (5f78 <nm_bus_init+0xcc>)
    5eca:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5ecc:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5ece:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5ed0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5ed2:	2900      	cmp	r1, #0
    5ed4:	d104      	bne.n	5ee0 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    5ed6:	0953      	lsrs	r3, r2, #5
    5ed8:	01db      	lsls	r3, r3, #7
    5eda:	4928      	ldr	r1, [pc, #160]	; (5f7c <nm_bus_init+0xd0>)
    5edc:	468c      	mov	ip, r1
    5ede:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ee0:	211f      	movs	r1, #31
    5ee2:	4011      	ands	r1, r2
    5ee4:	2201      	movs	r2, #1
    5ee6:	0010      	movs	r0, r2
    5ee8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    5eea:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    5eec:	ac02      	add	r4, sp, #8
    5eee:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5ef0:	2300      	movs	r3, #0
    5ef2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5ef4:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    5ef6:	21c0      	movs	r1, #192	; 0xc0
    5ef8:	0389      	lsls	r1, r1, #14
    5efa:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5efc:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    5efe:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    5f00:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5f02:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    5f04:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5f06:	3223      	adds	r2, #35	; 0x23
    5f08:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5f0a:	3a18      	subs	r2, #24
    5f0c:	2100      	movs	r1, #0
    5f0e:	a808      	add	r0, sp, #32
    5f10:	4b1b      	ldr	r3, [pc, #108]	; (5f80 <nm_bus_init+0xd4>)
    5f12:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    5f14:	4b1b      	ldr	r3, [pc, #108]	; (5f84 <nm_bus_init+0xd8>)
    5f16:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    5f18:	4b1b      	ldr	r3, [pc, #108]	; (5f88 <nm_bus_init+0xdc>)
    5f1a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    5f1c:	2301      	movs	r3, #1
    5f1e:	425b      	negs	r3, r3
    5f20:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    5f22:	4b1a      	ldr	r3, [pc, #104]	; (5f8c <nm_bus_init+0xe0>)
    5f24:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    5f26:	4b1a      	ldr	r3, [pc, #104]	; (5f90 <nm_bus_init+0xe4>)
    5f28:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    5f2a:	0022      	movs	r2, r4
    5f2c:	4919      	ldr	r1, [pc, #100]	; (5f94 <nm_bus_init+0xe8>)
    5f2e:	481a      	ldr	r0, [pc, #104]	; (5f98 <nm_bus_init+0xec>)
    5f30:	4b1a      	ldr	r3, [pc, #104]	; (5f9c <nm_bus_init+0xf0>)
    5f32:	4798      	blx	r3
    5f34:	2800      	cmp	r0, #0
    5f36:	d11a      	bne.n	5f6e <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5f38:	4d17      	ldr	r5, [pc, #92]	; (5f98 <nm_bus_init+0xec>)
    5f3a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5f3c:	0020      	movs	r0, r4
    5f3e:	4b18      	ldr	r3, [pc, #96]	; (5fa0 <nm_bus_init+0xf4>)
    5f40:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5f42:	231f      	movs	r3, #31
    5f44:	4018      	ands	r0, r3
    5f46:	3b1e      	subs	r3, #30
    5f48:	4083      	lsls	r3, r0
    5f4a:	4a16      	ldr	r2, [pc, #88]	; (5fa4 <nm_bus_init+0xf8>)
    5f4c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5f4e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    5f50:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5f52:	2b00      	cmp	r3, #0
    5f54:	d1fc      	bne.n	5f50 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5f56:	6823      	ldr	r3, [r4, #0]
    5f58:	2202      	movs	r2, #2
    5f5a:	4313      	orrs	r3, r2
    5f5c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    5f5e:	4b12      	ldr	r3, [pc, #72]	; (5fa8 <nm_bus_init+0xfc>)
    5f60:	4798      	blx	r3
	nm_bsp_sleep(1);
    5f62:	2001      	movs	r0, #1
    5f64:	4b11      	ldr	r3, [pc, #68]	; (5fac <nm_bus_init+0x100>)
    5f66:	4798      	blx	r3
#endif
	return result;
    5f68:	2000      	movs	r0, #0
}
    5f6a:	b011      	add	sp, #68	; 0x44
    5f6c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    5f6e:	2006      	movs	r0, #6
    5f70:	4240      	negs	r0, r0
    5f72:	e7fa      	b.n	5f6a <nm_bus_init+0xbe>
    5f74:	200008c4 	.word	0x200008c4
    5f78:	00009325 	.word	0x00009325
    5f7c:	41004400 	.word	0x41004400
    5f80:	0000b0fb 	.word	0x0000b0fb
    5f84:	000c0002 	.word	0x000c0002
    5f88:	000d0002 	.word	0x000d0002
    5f8c:	000f0002 	.word	0x000f0002
    5f90:	00b71b00 	.word	0x00b71b00
    5f94:	42001000 	.word	0x42001000
    5f98:	200008c8 	.word	0x200008c8
    5f9c:	00004f3d 	.word	0x00004f3d
    5fa0:	00005b49 	.word	0x00005b49
    5fa4:	e000e100 	.word	0xe000e100
    5fa8:	00005d8d 	.word	0x00005d8d
    5fac:	00005d75 	.word	0x00005d75

00005fb0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    5fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fb2:	46de      	mov	lr, fp
    5fb4:	4657      	mov	r7, sl
    5fb6:	464e      	mov	r6, r9
    5fb8:	4645      	mov	r5, r8
    5fba:	b5e0      	push	{r5, r6, r7, lr}
    5fbc:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    5fbe:	2803      	cmp	r0, #3
    5fc0:	d000      	beq.n	5fc4 <nm_bus_ioctl+0x14>
    5fc2:	e075      	b.n	60b0 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    5fc4:	680e      	ldr	r6, [r1, #0]
    5fc6:	684d      	ldr	r5, [r1, #4]
    5fc8:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    5fca:	2200      	movs	r2, #0
    5fcc:	466b      	mov	r3, sp
    5fce:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    5fd0:	2d00      	cmp	r5, #0
    5fd2:	d027      	beq.n	6024 <nm_bus_ioctl+0x74>
    5fd4:	2c00      	cmp	r4, #0
    5fd6:	d065      	beq.n	60a4 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    5fd8:	2e00      	cmp	r6, #0
    5fda:	d100      	bne.n	5fde <nm_bus_ioctl+0x2e>
    5fdc:	e077      	b.n	60ce <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    5fde:	2300      	movs	r3, #0
    5fe0:	4698      	mov	r8, r3
    5fe2:	2300      	movs	r3, #0
    5fe4:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    5fe6:	2201      	movs	r2, #1
    5fe8:	493b      	ldr	r1, [pc, #236]	; (60d8 <nm_bus_ioctl+0x128>)
    5fea:	483c      	ldr	r0, [pc, #240]	; (60dc <nm_bus_ioctl+0x12c>)
    5fec:	4b3c      	ldr	r3, [pc, #240]	; (60e0 <nm_bus_ioctl+0x130>)
    5fee:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ff0:	4b3a      	ldr	r3, [pc, #232]	; (60dc <nm_bus_ioctl+0x12c>)
    5ff2:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    5ff4:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    5ff6:	2204      	movs	r2, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5ff8:	4699      	mov	r9, r3
			pu8Miso++;
    5ffa:	4659      	mov	r1, fp
    5ffc:	424b      	negs	r3, r1
    5ffe:	4159      	adcs	r1, r3
    6000:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    6002:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6004:	4653      	mov	r3, sl
    6006:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6008:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    600a:	4239      	tst	r1, r7
    600c:	d0fc      	beq.n	6008 <nm_bus_ioctl+0x58>
    600e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    6010:	4239      	tst	r1, r7
    6012:	d0fc      	beq.n	600e <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6014:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6016:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    6018:	4211      	tst	r1, r2
    601a:	d0fc      	beq.n	6016 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    601c:	4649      	mov	r1, r9
    601e:	7989      	ldrb	r1, [r1, #6]
    6020:	468c      	mov	ip, r1
    6022:	e011      	b.n	6048 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    6024:	2e00      	cmp	r6, #0
    6026:	d03a      	beq.n	609e <nm_bus_ioctl+0xee>
    6028:	2c00      	cmp	r4, #0
    602a:	d03e      	beq.n	60aa <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    602c:	2300      	movs	r3, #0
    602e:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    6030:	3301      	adds	r3, #1
    6032:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    6034:	466b      	mov	r3, sp
    6036:	1ddd      	adds	r5, r3, #7
    6038:	e7d5      	b.n	5fe6 <nm_bus_ioctl+0x36>
    603a:	4660      	mov	r0, ip
    603c:	2801      	cmp	r0, #1
    603e:	d00d      	beq.n	605c <nm_bus_ioctl+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6040:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6042:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    6044:	2900      	cmp	r1, #0
    6046:	d00d      	beq.n	6064 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6048:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    604a:	4211      	tst	r1, r2
    604c:	d0fc      	beq.n	6048 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    604e:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    6050:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6052:	4210      	tst	r0, r2
    6054:	d0f1      	beq.n	603a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6056:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    6058:	311e      	adds	r1, #30
    605a:	e7ee      	b.n	603a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    605c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    605e:	05c0      	lsls	r0, r0, #23
    6060:	0dc0      	lsrs	r0, r0, #23
    6062:	e7ef      	b.n	6044 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    6064:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    6066:	3c01      	subs	r4, #1
    6068:	b2a4      	uxth	r4, r4
			pu8Miso++;
    606a:	445d      	add	r5, fp
			pu8Mosi++;
    606c:	4643      	mov	r3, r8
    606e:	4259      	negs	r1, r3
    6070:	414b      	adcs	r3, r1
    6072:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    6074:	2c00      	cmp	r4, #0
    6076:	d1c4      	bne.n	6002 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6078:	4b18      	ldr	r3, [pc, #96]	; (60dc <nm_bus_ioctl+0x12c>)
    607a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    607c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    607e:	7e0b      	ldrb	r3, [r1, #24]
    6080:	4213      	tst	r3, r2
    6082:	d0fc      	beq.n	607e <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    6084:	2200      	movs	r2, #0
    6086:	4914      	ldr	r1, [pc, #80]	; (60d8 <nm_bus_ioctl+0x128>)
    6088:	4814      	ldr	r0, [pc, #80]	; (60dc <nm_bus_ioctl+0x12c>)
    608a:	4b15      	ldr	r3, [pc, #84]	; (60e0 <nm_bus_ioctl+0x130>)
    608c:	4798      	blx	r3
	return M2M_SUCCESS;
    608e:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    6090:	b003      	add	sp, #12
    6092:	bc3c      	pop	{r2, r3, r4, r5}
    6094:	4690      	mov	r8, r2
    6096:	4699      	mov	r9, r3
    6098:	46a2      	mov	sl, r4
    609a:	46ab      	mov	fp, r5
    609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    609e:	200f      	movs	r0, #15
    60a0:	4240      	negs	r0, r0
    60a2:	e7f5      	b.n	6090 <nm_bus_ioctl+0xe0>
    60a4:	200f      	movs	r0, #15
    60a6:	4240      	negs	r0, r0
    60a8:	e7f2      	b.n	6090 <nm_bus_ioctl+0xe0>
    60aa:	200f      	movs	r0, #15
    60ac:	4240      	negs	r0, r0
		break;
    60ae:	e7ef      	b.n	6090 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    60b0:	220e      	movs	r2, #14
    60b2:	32ff      	adds	r2, #255	; 0xff
    60b4:	490b      	ldr	r1, [pc, #44]	; (60e4 <nm_bus_ioctl+0x134>)
    60b6:	480c      	ldr	r0, [pc, #48]	; (60e8 <nm_bus_ioctl+0x138>)
    60b8:	4b0c      	ldr	r3, [pc, #48]	; (60ec <nm_bus_ioctl+0x13c>)
    60ba:	4798      	blx	r3
    60bc:	480c      	ldr	r0, [pc, #48]	; (60f0 <nm_bus_ioctl+0x140>)
    60be:	4b0d      	ldr	r3, [pc, #52]	; (60f4 <nm_bus_ioctl+0x144>)
    60c0:	4798      	blx	r3
    60c2:	200d      	movs	r0, #13
    60c4:	4b0c      	ldr	r3, [pc, #48]	; (60f8 <nm_bus_ioctl+0x148>)
    60c6:	4798      	blx	r3
			s8Ret = -1;
    60c8:	2001      	movs	r0, #1
    60ca:	4240      	negs	r0, r0
	return s8Ret;
    60cc:	e7e0      	b.n	6090 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    60ce:	2301      	movs	r3, #1
    60d0:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    60d2:	466b      	mov	r3, sp
    60d4:	1dde      	adds	r6, r3, #7
    60d6:	e784      	b.n	5fe2 <nm_bus_ioctl+0x32>
    60d8:	200008c4 	.word	0x200008c4
    60dc:	200008c8 	.word	0x200008c8
    60e0:	0000526d 	.word	0x0000526d
    60e4:	00011814 	.word	0x00011814
    60e8:	00011824 	.word	0x00011824
    60ec:	0000bb3d 	.word	0x0000bb3d
    60f0:	00011838 	.word	0x00011838
    60f4:	0000bc59 	.word	0x0000bc59
    60f8:	0000bb71 	.word	0x0000bb71

000060fc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    60fc:	b530      	push	{r4, r5, lr}
    60fe:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    6100:	ab01      	add	r3, sp, #4
    6102:	2200      	movs	r2, #0
    6104:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    6106:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    6108:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    610a:	4d13      	ldr	r5, [pc, #76]	; (6158 <nm_bus_deinit+0x5c>)
    610c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    610e:	0020      	movs	r0, r4
    6110:	4b12      	ldr	r3, [pc, #72]	; (615c <nm_bus_deinit+0x60>)
    6112:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6114:	231f      	movs	r3, #31
    6116:	4018      	ands	r0, r3
    6118:	3b1e      	subs	r3, #30
    611a:	4083      	lsls	r3, r0
    611c:	2280      	movs	r2, #128	; 0x80
    611e:	4910      	ldr	r1, [pc, #64]	; (6160 <nm_bus_deinit+0x64>)
    6120:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6122:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    6124:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    6126:	2b00      	cmp	r3, #0
    6128:	d1fc      	bne.n	6124 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    612a:	338f      	adds	r3, #143	; 0x8f
    612c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    612e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6130:	6823      	ldr	r3, [r4, #0]
    6132:	2202      	movs	r2, #2
    6134:	4393      	bics	r3, r2
    6136:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    6138:	a901      	add	r1, sp, #4
    613a:	200c      	movs	r0, #12
    613c:	4c09      	ldr	r4, [pc, #36]	; (6164 <nm_bus_deinit+0x68>)
    613e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    6140:	a901      	add	r1, sp, #4
    6142:	200f      	movs	r0, #15
    6144:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    6146:	a901      	add	r1, sp, #4
    6148:	200d      	movs	r0, #13
    614a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    614c:	a901      	add	r1, sp, #4
    614e:	200e      	movs	r0, #14
    6150:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    6152:	2000      	movs	r0, #0
    6154:	b003      	add	sp, #12
    6156:	bd30      	pop	{r4, r5, pc}
    6158:	200008c8 	.word	0x200008c8
    615c:	00005b49 	.word	0x00005b49
    6160:	e000e100 	.word	0xe000e100
    6164:	00009325 	.word	0x00009325

00006168 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    6168:	2a00      	cmp	r2, #0
    616a:	d006      	beq.n	617a <m2m_memcpy+0x12>
    616c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    616e:	780b      	ldrb	r3, [r1, #0]
    6170:	7003      	strb	r3, [r0, #0]
		pDst++;
    6172:	3001      	adds	r0, #1
		pSrc++;
    6174:	3101      	adds	r1, #1
	}while(--sz);
    6176:	4290      	cmp	r0, r2
    6178:	d1f9      	bne.n	616e <m2m_memcpy+0x6>
}
    617a:	4770      	bx	lr

0000617c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    617c:	2a00      	cmp	r2, #0
    617e:	d004      	beq.n	618a <m2m_memset+0xe>
    6180:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    6182:	7001      	strb	r1, [r0, #0]
		pBuf++;
    6184:	3001      	adds	r0, #1
	}while(--sz);
    6186:	4290      	cmp	r0, r2
    6188:	d1fb      	bne.n	6182 <m2m_memset+0x6>
}
    618a:	4770      	bx	lr

0000618c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    618c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    618e:	7802      	ldrb	r2, [r0, #0]
    6190:	2a00      	cmp	r2, #0
    6192:	d007      	beq.n	61a4 <m2m_strlen+0x18>
    6194:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    6196:	3001      	adds	r0, #1
    6198:	b280      	uxth	r0, r0
		pcStr++;
    619a:	3301      	adds	r3, #1
	while(*pcStr)
    619c:	781a      	ldrb	r2, [r3, #0]
    619e:	2a00      	cmp	r2, #0
    61a0:	d1f9      	bne.n	6196 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    61a2:	4770      	bx	lr
	uint16	u16StrLen = 0;
    61a4:	2000      	movs	r0, #0
    61a6:	e7fc      	b.n	61a2 <m2m_strlen+0x16>

000061a8 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    61a8:	4a02      	ldr	r2, [pc, #8]	; (61b4 <isr+0xc>)
    61aa:	78d3      	ldrb	r3, [r2, #3]
    61ac:	3301      	adds	r3, #1
    61ae:	b2db      	uxtb	r3, r3
    61b0:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    61b2:	4770      	bx	lr
    61b4:	20000904 	.word	0x20000904

000061b8 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    61b8:	4770      	bx	lr
	...

000061bc <hif_set_rx_done>:
{
    61bc:	b500      	push	{lr}
    61be:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    61c0:	2200      	movs	r2, #0
    61c2:	4b0a      	ldr	r3, [pc, #40]	; (61ec <hif_set_rx_done+0x30>)
    61c4:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    61c6:	2001      	movs	r0, #1
    61c8:	4b09      	ldr	r3, [pc, #36]	; (61f0 <hif_set_rx_done+0x34>)
    61ca:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    61cc:	a901      	add	r1, sp, #4
    61ce:	4809      	ldr	r0, [pc, #36]	; (61f4 <hif_set_rx_done+0x38>)
    61d0:	4b09      	ldr	r3, [pc, #36]	; (61f8 <hif_set_rx_done+0x3c>)
    61d2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    61d4:	2800      	cmp	r0, #0
    61d6:	d001      	beq.n	61dc <hif_set_rx_done+0x20>
}
    61d8:	b003      	add	sp, #12
    61da:	bd00      	pop	{pc}
	reg |= NBIT1;
    61dc:	2102      	movs	r1, #2
    61de:	9b01      	ldr	r3, [sp, #4]
    61e0:	4319      	orrs	r1, r3
    61e2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    61e4:	4803      	ldr	r0, [pc, #12]	; (61f4 <hif_set_rx_done+0x38>)
    61e6:	4b05      	ldr	r3, [pc, #20]	; (61fc <hif_set_rx_done+0x40>)
    61e8:	4798      	blx	r3
    61ea:	e7f5      	b.n	61d8 <hif_set_rx_done+0x1c>
    61ec:	20000904 	.word	0x20000904
    61f0:	00005e89 	.word	0x00005e89
    61f4:	00001070 	.word	0x00001070
    61f8:	00007605 	.word	0x00007605
    61fc:	00007611 	.word	0x00007611

00006200 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    6200:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    6202:	4b0c      	ldr	r3, [pc, #48]	; (6234 <hif_chip_wake+0x34>)
    6204:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    6206:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    6208:	2b00      	cmp	r3, #0
    620a:	d10d      	bne.n	6228 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    620c:	4b09      	ldr	r3, [pc, #36]	; (6234 <hif_chip_wake+0x34>)
    620e:	785b      	ldrb	r3, [r3, #1]
    6210:	2b00      	cmp	r3, #0
    6212:	d103      	bne.n	621c <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6214:	4b07      	ldr	r3, [pc, #28]	; (6234 <hif_chip_wake+0x34>)
    6216:	781b      	ldrb	r3, [r3, #0]
    6218:	2b00      	cmp	r3, #0
    621a:	d106      	bne.n	622a <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    621c:	4a05      	ldr	r2, [pc, #20]	; (6234 <hif_chip_wake+0x34>)
    621e:	7853      	ldrb	r3, [r2, #1]
    6220:	3301      	adds	r3, #1
    6222:	b2db      	uxtb	r3, r3
    6224:	7053      	strb	r3, [r2, #1]
    6226:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    6228:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    622a:	4b03      	ldr	r3, [pc, #12]	; (6238 <hif_chip_wake+0x38>)
    622c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    622e:	2800      	cmp	r0, #0
    6230:	d0f4      	beq.n	621c <hif_chip_wake+0x1c>
    6232:	e7f9      	b.n	6228 <hif_chip_wake+0x28>
    6234:	20000904 	.word	0x20000904
    6238:	000072ed 	.word	0x000072ed

0000623c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    623c:	4b05      	ldr	r3, [pc, #20]	; (6254 <hif_chip_sleep_sc+0x18>)
    623e:	785b      	ldrb	r3, [r3, #1]
    6240:	2b00      	cmp	r3, #0
    6242:	d004      	beq.n	624e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    6244:	4a03      	ldr	r2, [pc, #12]	; (6254 <hif_chip_sleep_sc+0x18>)
    6246:	7853      	ldrb	r3, [r2, #1]
    6248:	3b01      	subs	r3, #1
    624a:	b2db      	uxtb	r3, r3
    624c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    624e:	2000      	movs	r0, #0
    6250:	4770      	bx	lr
    6252:	46c0      	nop			; (mov r8, r8)
    6254:	20000904 	.word	0x20000904

00006258 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    6258:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    625a:	4b0b      	ldr	r3, [pc, #44]	; (6288 <hif_chip_sleep+0x30>)
    625c:	785b      	ldrb	r3, [r3, #1]
    625e:	2b00      	cmp	r3, #0
    6260:	d004      	beq.n	626c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    6262:	4a09      	ldr	r2, [pc, #36]	; (6288 <hif_chip_sleep+0x30>)
    6264:	7853      	ldrb	r3, [r2, #1]
    6266:	3b01      	subs	r3, #1
    6268:	b2db      	uxtb	r3, r3
    626a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    626c:	4b06      	ldr	r3, [pc, #24]	; (6288 <hif_chip_sleep+0x30>)
    626e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    6270:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    6272:	2b00      	cmp	r3, #0
    6274:	d103      	bne.n	627e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6276:	4b04      	ldr	r3, [pc, #16]	; (6288 <hif_chip_sleep+0x30>)
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	2b00      	cmp	r3, #0
    627c:	d100      	bne.n	6280 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    627e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    6280:	4b02      	ldr	r3, [pc, #8]	; (628c <hif_chip_sleep+0x34>)
    6282:	4798      	blx	r3
    6284:	e7fb      	b.n	627e <hif_chip_sleep+0x26>
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	20000904 	.word	0x20000904
    628c:	00007285 	.word	0x00007285

00006290 <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    6290:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    6292:	4b05      	ldr	r3, [pc, #20]	; (62a8 <hif_deinit+0x18>)
    6294:	4798      	blx	r3
    6296:	0004      	movs	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    6298:	2228      	movs	r2, #40	; 0x28
    629a:	2100      	movs	r1, #0
    629c:	4803      	ldr	r0, [pc, #12]	; (62ac <hif_deinit+0x1c>)
    629e:	4b04      	ldr	r3, [pc, #16]	; (62b0 <hif_deinit+0x20>)
    62a0:	4798      	blx	r3
	return ret;
}
    62a2:	0020      	movs	r0, r4
    62a4:	bd10      	pop	{r4, pc}
    62a6:	46c0      	nop			; (mov r8, r8)
    62a8:	00006201 	.word	0x00006201
    62ac:	20000904 	.word	0x20000904
    62b0:	0000617d 	.word	0x0000617d

000062b4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    62b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62b6:	46de      	mov	lr, fp
    62b8:	4657      	mov	r7, sl
    62ba:	b580      	push	{r7, lr}
    62bc:	b089      	sub	sp, #36	; 0x24
    62be:	4683      	mov	fp, r0
    62c0:	468a      	mov	sl, r1
    62c2:	9201      	str	r2, [sp, #4]
    62c4:	9300      	str	r3, [sp, #0]
    62c6:	ab10      	add	r3, sp, #64	; 0x40
    62c8:	cb80      	ldmia	r3!, {r7}
    62ca:	881e      	ldrh	r6, [r3, #0]
    62cc:	ab12      	add	r3, sp, #72	; 0x48
    62ce:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    62d0:	227f      	movs	r2, #127	; 0x7f
    62d2:	400a      	ands	r2, r1
    62d4:	ab07      	add	r3, sp, #28
    62d6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    62d8:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    62da:	2208      	movs	r2, #8
    62dc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    62de:	2f00      	cmp	r7, #0
    62e0:	d03d      	beq.n	635e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    62e2:	885a      	ldrh	r2, [r3, #2]
    62e4:	1992      	adds	r2, r2, r6
    62e6:	18aa      	adds	r2, r5, r2
    62e8:	b292      	uxth	r2, r2
    62ea:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    62ec:	4b69      	ldr	r3, [pc, #420]	; (6494 <hif_send+0x1e0>)
    62ee:	4798      	blx	r3
    62f0:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    62f2:	d000      	beq.n	62f6 <hif_send+0x42>
    62f4:	e0c1      	b.n	647a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    62f6:	2300      	movs	r3, #0
    62f8:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    62fa:	aa02      	add	r2, sp, #8
    62fc:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    62fe:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    6300:	9b04      	ldr	r3, [sp, #16]
    6302:	465a      	mov	r2, fp
    6304:	431a      	orrs	r2, r3
    6306:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    6308:	9a04      	ldr	r2, [sp, #16]
    630a:	4653      	mov	r3, sl
    630c:	021b      	lsls	r3, r3, #8
    630e:	4313      	orrs	r3, r2
    6310:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    6312:	ab07      	add	r3, sp, #28
    6314:	885b      	ldrh	r3, [r3, #2]
    6316:	9a04      	ldr	r2, [sp, #16]
    6318:	041b      	lsls	r3, r3, #16
    631a:	4313      	orrs	r3, r2
    631c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    631e:	9904      	ldr	r1, [sp, #16]
    6320:	485d      	ldr	r0, [pc, #372]	; (6498 <hif_send+0x1e4>)
    6322:	4b5e      	ldr	r3, [pc, #376]	; (649c <hif_send+0x1e8>)
    6324:	4798      	blx	r3
    6326:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    6328:	d157      	bne.n	63da <hif_send+0x126>

		reg = 0UL;
    632a:	2300      	movs	r3, #0
    632c:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    632e:	9b04      	ldr	r3, [sp, #16]
    6330:	2202      	movs	r2, #2
    6332:	4313      	orrs	r3, r2
    6334:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    6336:	9904      	ldr	r1, [sp, #16]
    6338:	4859      	ldr	r0, [pc, #356]	; (64a0 <hif_send+0x1ec>)
    633a:	4b58      	ldr	r3, [pc, #352]	; (649c <hif_send+0x1e8>)
    633c:	4798      	blx	r3
    633e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    6340:	d14b      	bne.n	63da <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    6342:	2200      	movs	r2, #0
    6344:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    6346:	ab02      	add	r3, sp, #8
    6348:	80da      	strh	r2, [r3, #6]
    634a:	3306      	adds	r3, #6
    634c:	881b      	ldrh	r3, [r3, #0]
    634e:	b29b      	uxth	r3, r3
    6350:	4a54      	ldr	r2, [pc, #336]	; (64a4 <hif_send+0x1f0>)
    6352:	4293      	cmp	r3, r2
    6354:	d849      	bhi.n	63ea <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    6356:	4c54      	ldr	r4, [pc, #336]	; (64a8 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    6358:	4b54      	ldr	r3, [pc, #336]	; (64ac <hif_send+0x1f8>)
    635a:	469a      	mov	sl, r3
    635c:	e017      	b.n	638e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    635e:	ab07      	add	r3, sp, #28
    6360:	885a      	ldrh	r2, [r3, #2]
    6362:	9900      	ldr	r1, [sp, #0]
    6364:	468c      	mov	ip, r1
    6366:	4462      	add	r2, ip
    6368:	b292      	uxth	r2, r2
    636a:	805a      	strh	r2, [r3, #2]
    636c:	e7be      	b.n	62ec <hif_send+0x38>
				nm_bsp_sleep(1);
    636e:	2001      	movs	r0, #1
    6370:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    6372:	9b04      	ldr	r3, [sp, #16]
    6374:	079b      	lsls	r3, r3, #30
    6376:	d528      	bpl.n	63ca <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    6378:	ab02      	add	r3, sp, #8
    637a:	88da      	ldrh	r2, [r3, #6]
    637c:	3201      	adds	r2, #1
    637e:	b292      	uxth	r2, r2
    6380:	80da      	strh	r2, [r3, #6]
    6382:	3306      	adds	r3, #6
    6384:	881b      	ldrh	r3, [r3, #0]
    6386:	b29b      	uxth	r3, r3
    6388:	4a46      	ldr	r2, [pc, #280]	; (64a4 <hif_send+0x1f0>)
    638a:	4293      	cmp	r3, r2
    638c:	d82d      	bhi.n	63ea <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    638e:	a904      	add	r1, sp, #16
    6390:	4843      	ldr	r0, [pc, #268]	; (64a0 <hif_send+0x1ec>)
    6392:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    6394:	2800      	cmp	r0, #0
    6396:	d128      	bne.n	63ea <hif_send+0x136>
			if(cnt >= 500) {
    6398:	ab02      	add	r3, sp, #8
    639a:	3306      	adds	r3, #6
    639c:	881b      	ldrh	r3, [r3, #0]
    639e:	b29b      	uxth	r3, r3
    63a0:	22f4      	movs	r2, #244	; 0xf4
    63a2:	32ff      	adds	r2, #255	; 0xff
    63a4:	4293      	cmp	r3, r2
    63a6:	d9e4      	bls.n	6372 <hif_send+0xbe>
				if(cnt < 501) {
    63a8:	ab02      	add	r3, sp, #8
    63aa:	3306      	adds	r3, #6
    63ac:	881b      	ldrh	r3, [r3, #0]
    63ae:	b29b      	uxth	r3, r3
    63b0:	3201      	adds	r2, #1
    63b2:	4293      	cmp	r3, r2
    63b4:	d8db      	bhi.n	636e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    63b6:	483e      	ldr	r0, [pc, #248]	; (64b0 <hif_send+0x1fc>)
    63b8:	4b3e      	ldr	r3, [pc, #248]	; (64b4 <hif_send+0x200>)
    63ba:	4798      	blx	r3
    63bc:	483e      	ldr	r0, [pc, #248]	; (64b8 <hif_send+0x204>)
    63be:	4b3f      	ldr	r3, [pc, #252]	; (64bc <hif_send+0x208>)
    63c0:	4798      	blx	r3
    63c2:	200d      	movs	r0, #13
    63c4:	4b3e      	ldr	r3, [pc, #248]	; (64c0 <hif_send+0x20c>)
    63c6:	4798      	blx	r3
    63c8:	e7d1      	b.n	636e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    63ca:	a905      	add	r1, sp, #20
    63cc:	483d      	ldr	r0, [pc, #244]	; (64c4 <hif_send+0x210>)
    63ce:	4b36      	ldr	r3, [pc, #216]	; (64a8 <hif_send+0x1f4>)
    63d0:	4798      	blx	r3
    63d2:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    63d4:	d009      	beq.n	63ea <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    63d6:	2300      	movs	r3, #0
    63d8:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    63da:	4b3b      	ldr	r3, [pc, #236]	; (64c8 <hif_send+0x214>)
    63dc:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    63de:	0020      	movs	r0, r4
    63e0:	b009      	add	sp, #36	; 0x24
    63e2:	bc0c      	pop	{r2, r3}
    63e4:	4692      	mov	sl, r2
    63e6:	469b      	mov	fp, r3
    63e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    63ea:	9b05      	ldr	r3, [sp, #20]
    63ec:	2b00      	cmp	r3, #0
    63ee:	d03f      	beq.n	6470 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    63f0:	9b05      	ldr	r3, [sp, #20]
    63f2:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    63f4:	a907      	add	r1, sp, #28
    63f6:	884b      	ldrh	r3, [r1, #2]
    63f8:	b29b      	uxth	r3, r3
    63fa:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    63fc:	9806      	ldr	r0, [sp, #24]
    63fe:	2208      	movs	r2, #8
    6400:	4b32      	ldr	r3, [pc, #200]	; (64cc <hif_send+0x218>)
    6402:	4798      	blx	r3
    6404:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    6406:	d1e8      	bne.n	63da <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    6408:	9b06      	ldr	r3, [sp, #24]
    640a:	3308      	adds	r3, #8
    640c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    640e:	9b01      	ldr	r3, [sp, #4]
    6410:	2b00      	cmp	r3, #0
    6412:	d00b      	beq.n	642c <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    6414:	9806      	ldr	r0, [sp, #24]
    6416:	9a00      	ldr	r2, [sp, #0]
    6418:	0019      	movs	r1, r3
    641a:	4b2c      	ldr	r3, [pc, #176]	; (64cc <hif_send+0x218>)
    641c:	4798      	blx	r3
    641e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    6420:	d1db      	bne.n	63da <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    6422:	9b06      	ldr	r3, [sp, #24]
    6424:	9a00      	ldr	r2, [sp, #0]
    6426:	4694      	mov	ip, r2
    6428:	4463      	add	r3, ip
    642a:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    642c:	2f00      	cmp	r7, #0
    642e:	d00e      	beq.n	644e <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    6430:	9b06      	ldr	r3, [sp, #24]
    6432:	9a00      	ldr	r2, [sp, #0]
    6434:	1aad      	subs	r5, r5, r2
    6436:	18ed      	adds	r5, r5, r3
    6438:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    643a:	9806      	ldr	r0, [sp, #24]
    643c:	0032      	movs	r2, r6
    643e:	0039      	movs	r1, r7
    6440:	4b22      	ldr	r3, [pc, #136]	; (64cc <hif_send+0x218>)
    6442:	4798      	blx	r3
    6444:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    6446:	d1c8      	bne.n	63da <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    6448:	9b06      	ldr	r3, [sp, #24]
    644a:	18f3      	adds	r3, r6, r3
    644c:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    644e:	9b05      	ldr	r3, [sp, #20]
    6450:	009b      	lsls	r3, r3, #2
    6452:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    6454:	9b04      	ldr	r3, [sp, #16]
    6456:	2202      	movs	r2, #2
    6458:	4313      	orrs	r3, r2
    645a:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    645c:	9904      	ldr	r1, [sp, #16]
    645e:	481c      	ldr	r0, [pc, #112]	; (64d0 <hif_send+0x21c>)
    6460:	4b0e      	ldr	r3, [pc, #56]	; (649c <hif_send+0x1e8>)
    6462:	4798      	blx	r3
    6464:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    6466:	d1b8      	bne.n	63da <hif_send+0x126>
 	ret = hif_chip_sleep();
    6468:	4b1a      	ldr	r3, [pc, #104]	; (64d4 <hif_send+0x220>)
    646a:	4798      	blx	r3
    646c:	0004      	movs	r4, r0
	return ret;
    646e:	e7b6      	b.n	63de <hif_send+0x12a>
			ret = hif_chip_sleep();
    6470:	4b18      	ldr	r3, [pc, #96]	; (64d4 <hif_send+0x220>)
    6472:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    6474:	2403      	movs	r4, #3
    6476:	4264      	negs	r4, r4
			goto ERR2;
    6478:	e7b1      	b.n	63de <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    647a:	22cb      	movs	r2, #203	; 0xcb
    647c:	0052      	lsls	r2, r2, #1
    647e:	4916      	ldr	r1, [pc, #88]	; (64d8 <hif_send+0x224>)
    6480:	4816      	ldr	r0, [pc, #88]	; (64dc <hif_send+0x228>)
    6482:	4b0c      	ldr	r3, [pc, #48]	; (64b4 <hif_send+0x200>)
    6484:	4798      	blx	r3
    6486:	4816      	ldr	r0, [pc, #88]	; (64e0 <hif_send+0x22c>)
    6488:	4b0c      	ldr	r3, [pc, #48]	; (64bc <hif_send+0x208>)
    648a:	4798      	blx	r3
    648c:	200d      	movs	r0, #13
    648e:	4b0c      	ldr	r3, [pc, #48]	; (64c0 <hif_send+0x20c>)
    6490:	4798      	blx	r3
		goto ERR2;
    6492:	e7a4      	b.n	63de <hif_send+0x12a>
    6494:	00006201 	.word	0x00006201
    6498:	0000108c 	.word	0x0000108c
    649c:	00007611 	.word	0x00007611
    64a0:	00001078 	.word	0x00001078
    64a4:	000003e7 	.word	0x000003e7
    64a8:	00007605 	.word	0x00007605
    64ac:	00005d75 	.word	0x00005d75
    64b0:	00011b54 	.word	0x00011b54
    64b4:	0000bb3d 	.word	0x0000bb3d
    64b8:	00011b60 	.word	0x00011b60
    64bc:	0000bc59 	.word	0x0000bc59
    64c0:	0000bb71 	.word	0x0000bb71
    64c4:	00150400 	.word	0x00150400
    64c8:	0000623d 	.word	0x0000623d
    64cc:	00007685 	.word	0x00007685
    64d0:	0000106c 	.word	0x0000106c
    64d4:	00006259 	.word	0x00006259
    64d8:	0001186c 	.word	0x0001186c
    64dc:	00011824 	.word	0x00011824
    64e0:	00011b70 	.word	0x00011b70

000064e4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    64e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64e6:	46ce      	mov	lr, r9
    64e8:	4647      	mov	r7, r8
    64ea:	b580      	push	{r7, lr}
    64ec:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    64ee:	4bcf      	ldr	r3, [pc, #828]	; (682c <hif_handle_isr+0x348>)
    64f0:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    64f2:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    64f4:	e080      	b.n	65f8 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    64f6:	4bcd      	ldr	r3, [pc, #820]	; (682c <hif_handle_isr+0x348>)
    64f8:	9a05      	ldr	r2, [sp, #20]
    64fa:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    64fc:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    64fe:	af04      	add	r7, sp, #16
    6500:	2204      	movs	r2, #4
    6502:	0039      	movs	r1, r7
    6504:	9805      	ldr	r0, [sp, #20]
    6506:	4bca      	ldr	r3, [pc, #808]	; (6830 <hif_handle_isr+0x34c>)
    6508:	4798      	blx	r3
    650a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    650c:	887b      	ldrh	r3, [r7, #2]
    650e:	b29b      	uxth	r3, r3
    6510:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    6512:	2800      	cmp	r0, #0
    6514:	d133      	bne.n	657e <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    6516:	ab04      	add	r3, sp, #16
    6518:	885b      	ldrh	r3, [r3, #2]
    651a:	b29b      	uxth	r3, r3
    651c:	429d      	cmp	r5, r3
    651e:	d004      	beq.n	652a <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    6520:	ab04      	add	r3, sp, #16
    6522:	885b      	ldrh	r3, [r3, #2]
    6524:	1aeb      	subs	r3, r5, r3
    6526:	2b04      	cmp	r3, #4
    6528:	dc39      	bgt.n	659e <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    652a:	ab04      	add	r3, sp, #16
    652c:	781b      	ldrb	r3, [r3, #0]
    652e:	2b01      	cmp	r3, #1
    6530:	d04e      	beq.n	65d0 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    6532:	ab04      	add	r3, sp, #16
    6534:	781b      	ldrb	r3, [r3, #0]
    6536:	2b02      	cmp	r3, #2
    6538:	d078      	beq.n	662c <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    653a:	ab04      	add	r3, sp, #16
    653c:	781b      	ldrb	r3, [r3, #0]
    653e:	2b04      	cmp	r3, #4
    6540:	d100      	bne.n	6544 <hif_handle_isr+0x60>
    6542:	e090      	b.n	6666 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    6544:	ab04      	add	r3, sp, #16
    6546:	781b      	ldrb	r3, [r3, #0]
    6548:	2b06      	cmp	r3, #6
    654a:	d100      	bne.n	654e <hif_handle_isr+0x6a>
    654c:	e0a8      	b.n	66a0 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    654e:	ab04      	add	r3, sp, #16
    6550:	781b      	ldrb	r3, [r3, #0]
    6552:	2b07      	cmp	r3, #7
    6554:	d100      	bne.n	6558 <hif_handle_isr+0x74>
    6556:	e0bf      	b.n	66d8 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    6558:	ab04      	add	r3, sp, #16
    655a:	781b      	ldrb	r3, [r3, #0]
    655c:	2b05      	cmp	r3, #5
    655e:	d100      	bne.n	6562 <hif_handle_isr+0x7e>
    6560:	e0d6      	b.n	6710 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    6562:	4ab4      	ldr	r2, [pc, #720]	; (6834 <hif_handle_isr+0x350>)
    6564:	49b4      	ldr	r1, [pc, #720]	; (6838 <hif_handle_isr+0x354>)
    6566:	48b5      	ldr	r0, [pc, #724]	; (683c <hif_handle_isr+0x358>)
    6568:	4bb5      	ldr	r3, [pc, #724]	; (6840 <hif_handle_isr+0x35c>)
    656a:	4798      	blx	r3
    656c:	48b5      	ldr	r0, [pc, #724]	; (6844 <hif_handle_isr+0x360>)
    656e:	4bb6      	ldr	r3, [pc, #728]	; (6848 <hif_handle_isr+0x364>)
    6570:	4798      	blx	r3
    6572:	200d      	movs	r0, #13
    6574:	4bb5      	ldr	r3, [pc, #724]	; (684c <hif_handle_isr+0x368>)
    6576:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    6578:	2406      	movs	r4, #6
    657a:	4264      	negs	r4, r4
    657c:	e116      	b.n	67ac <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    657e:	22d2      	movs	r2, #210	; 0xd2
    6580:	32ff      	adds	r2, #255	; 0xff
    6582:	49ad      	ldr	r1, [pc, #692]	; (6838 <hif_handle_isr+0x354>)
    6584:	48ad      	ldr	r0, [pc, #692]	; (683c <hif_handle_isr+0x358>)
    6586:	4bae      	ldr	r3, [pc, #696]	; (6840 <hif_handle_isr+0x35c>)
    6588:	4798      	blx	r3
    658a:	48b1      	ldr	r0, [pc, #708]	; (6850 <hif_handle_isr+0x36c>)
    658c:	4bae      	ldr	r3, [pc, #696]	; (6848 <hif_handle_isr+0x364>)
    658e:	4798      	blx	r3
    6590:	200d      	movs	r0, #13
    6592:	4bae      	ldr	r3, [pc, #696]	; (684c <hif_handle_isr+0x368>)
    6594:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    6596:	2001      	movs	r0, #1
    6598:	4bae      	ldr	r3, [pc, #696]	; (6854 <hif_handle_isr+0x370>)
    659a:	4798      	blx	r3
    659c:	e106      	b.n	67ac <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    659e:	22ed      	movs	r2, #237	; 0xed
    65a0:	0052      	lsls	r2, r2, #1
    65a2:	49a5      	ldr	r1, [pc, #660]	; (6838 <hif_handle_isr+0x354>)
    65a4:	48a5      	ldr	r0, [pc, #660]	; (683c <hif_handle_isr+0x358>)
    65a6:	4ca6      	ldr	r4, [pc, #664]	; (6840 <hif_handle_isr+0x35c>)
    65a8:	47a0      	blx	r4
    65aa:	a904      	add	r1, sp, #16
    65ac:	884a      	ldrh	r2, [r1, #2]
    65ae:	b292      	uxth	r2, r2
    65b0:	780b      	ldrb	r3, [r1, #0]
    65b2:	b2db      	uxtb	r3, r3
    65b4:	7849      	ldrb	r1, [r1, #1]
    65b6:	9100      	str	r1, [sp, #0]
    65b8:	0029      	movs	r1, r5
    65ba:	48a7      	ldr	r0, [pc, #668]	; (6858 <hif_handle_isr+0x374>)
    65bc:	47a0      	blx	r4
    65be:	200d      	movs	r0, #13
    65c0:	4ba2      	ldr	r3, [pc, #648]	; (684c <hif_handle_isr+0x368>)
    65c2:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    65c4:	2001      	movs	r0, #1
    65c6:	4ba3      	ldr	r3, [pc, #652]	; (6854 <hif_handle_isr+0x370>)
    65c8:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    65ca:	2406      	movs	r4, #6
    65cc:	4264      	negs	r4, r4
    65ce:	e0ed      	b.n	67ac <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    65d0:	4b96      	ldr	r3, [pc, #600]	; (682c <hif_handle_isr+0x348>)
    65d2:	68db      	ldr	r3, [r3, #12]
    65d4:	2b00      	cmp	r3, #0
    65d6:	d01c      	beq.n	6612 <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    65d8:	4b94      	ldr	r3, [pc, #592]	; (682c <hif_handle_isr+0x348>)
    65da:	68db      	ldr	r3, [r3, #12]
    65dc:	aa04      	add	r2, sp, #16
    65de:	7850      	ldrb	r0, [r2, #1]
    65e0:	b2c0      	uxtb	r0, r0
    65e2:	8851      	ldrh	r1, [r2, #2]
    65e4:	9a05      	ldr	r2, [sp, #20]
    65e6:	3208      	adds	r2, #8
    65e8:	3908      	subs	r1, #8
    65ea:	b289      	uxth	r1, r1
    65ec:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    65ee:	4b8f      	ldr	r3, [pc, #572]	; (682c <hif_handle_isr+0x348>)
    65f0:	789b      	ldrb	r3, [r3, #2]
    65f2:	2b00      	cmp	r3, #0
    65f4:	d000      	beq.n	65f8 <hif_handle_isr+0x114>
    65f6:	e09c      	b.n	6732 <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    65f8:	4643      	mov	r3, r8
    65fa:	78db      	ldrb	r3, [r3, #3]
    65fc:	2b00      	cmp	r3, #0
    65fe:	d100      	bne.n	6602 <hif_handle_isr+0x11e>
    6600:	e158      	b.n	68b4 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    6602:	464b      	mov	r3, r9
    6604:	78db      	ldrb	r3, [r3, #3]
    6606:	3b01      	subs	r3, #1
    6608:	b2db      	uxtb	r3, r3
    660a:	464a      	mov	r2, r9
    660c:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    660e:	4e93      	ldr	r6, [pc, #588]	; (685c <hif_handle_isr+0x378>)
    6610:	e0d7      	b.n	67c2 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    6612:	22f3      	movs	r2, #243	; 0xf3
    6614:	0052      	lsls	r2, r2, #1
    6616:	4988      	ldr	r1, [pc, #544]	; (6838 <hif_handle_isr+0x354>)
    6618:	4888      	ldr	r0, [pc, #544]	; (683c <hif_handle_isr+0x358>)
    661a:	4b89      	ldr	r3, [pc, #548]	; (6840 <hif_handle_isr+0x35c>)
    661c:	4798      	blx	r3
    661e:	4890      	ldr	r0, [pc, #576]	; (6860 <hif_handle_isr+0x37c>)
    6620:	4b89      	ldr	r3, [pc, #548]	; (6848 <hif_handle_isr+0x364>)
    6622:	4798      	blx	r3
    6624:	200d      	movs	r0, #13
    6626:	4b89      	ldr	r3, [pc, #548]	; (684c <hif_handle_isr+0x368>)
    6628:	4798      	blx	r3
    662a:	e7e0      	b.n	65ee <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    662c:	4b7f      	ldr	r3, [pc, #508]	; (682c <hif_handle_isr+0x348>)
    662e:	691b      	ldr	r3, [r3, #16]
    6630:	2b00      	cmp	r3, #0
    6632:	d00b      	beq.n	664c <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6634:	4b7d      	ldr	r3, [pc, #500]	; (682c <hif_handle_isr+0x348>)
    6636:	691b      	ldr	r3, [r3, #16]
    6638:	aa04      	add	r2, sp, #16
    663a:	7850      	ldrb	r0, [r2, #1]
    663c:	b2c0      	uxtb	r0, r0
    663e:	8851      	ldrh	r1, [r2, #2]
    6640:	9a05      	ldr	r2, [sp, #20]
    6642:	3208      	adds	r2, #8
    6644:	3908      	subs	r1, #8
    6646:	b289      	uxth	r1, r1
    6648:	4798      	blx	r3
    664a:	e7d0      	b.n	65ee <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    664c:	22f7      	movs	r2, #247	; 0xf7
    664e:	0052      	lsls	r2, r2, #1
    6650:	4979      	ldr	r1, [pc, #484]	; (6838 <hif_handle_isr+0x354>)
    6652:	487a      	ldr	r0, [pc, #488]	; (683c <hif_handle_isr+0x358>)
    6654:	4b7a      	ldr	r3, [pc, #488]	; (6840 <hif_handle_isr+0x35c>)
    6656:	4798      	blx	r3
    6658:	4882      	ldr	r0, [pc, #520]	; (6864 <hif_handle_isr+0x380>)
    665a:	4b7b      	ldr	r3, [pc, #492]	; (6848 <hif_handle_isr+0x364>)
    665c:	4798      	blx	r3
    665e:	200d      	movs	r0, #13
    6660:	4b7a      	ldr	r3, [pc, #488]	; (684c <hif_handle_isr+0x368>)
    6662:	4798      	blx	r3
    6664:	e7c3      	b.n	65ee <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    6666:	4b71      	ldr	r3, [pc, #452]	; (682c <hif_handle_isr+0x348>)
    6668:	695b      	ldr	r3, [r3, #20]
    666a:	2b00      	cmp	r3, #0
    666c:	d00b      	beq.n	6686 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    666e:	4b6f      	ldr	r3, [pc, #444]	; (682c <hif_handle_isr+0x348>)
    6670:	695b      	ldr	r3, [r3, #20]
    6672:	aa04      	add	r2, sp, #16
    6674:	7850      	ldrb	r0, [r2, #1]
    6676:	b2c0      	uxtb	r0, r0
    6678:	8851      	ldrh	r1, [r2, #2]
    667a:	9a05      	ldr	r2, [sp, #20]
    667c:	3208      	adds	r2, #8
    667e:	3908      	subs	r1, #8
    6680:	b289      	uxth	r1, r1
    6682:	4798      	blx	r3
    6684:	e7b3      	b.n	65ee <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    6686:	22fb      	movs	r2, #251	; 0xfb
    6688:	0052      	lsls	r2, r2, #1
    668a:	496b      	ldr	r1, [pc, #428]	; (6838 <hif_handle_isr+0x354>)
    668c:	486b      	ldr	r0, [pc, #428]	; (683c <hif_handle_isr+0x358>)
    668e:	4b6c      	ldr	r3, [pc, #432]	; (6840 <hif_handle_isr+0x35c>)
    6690:	4798      	blx	r3
    6692:	4875      	ldr	r0, [pc, #468]	; (6868 <hif_handle_isr+0x384>)
    6694:	4b6c      	ldr	r3, [pc, #432]	; (6848 <hif_handle_isr+0x364>)
    6696:	4798      	blx	r3
    6698:	200d      	movs	r0, #13
    669a:	4b6c      	ldr	r3, [pc, #432]	; (684c <hif_handle_isr+0x368>)
    669c:	4798      	blx	r3
    669e:	e7a6      	b.n	65ee <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    66a0:	4b62      	ldr	r3, [pc, #392]	; (682c <hif_handle_isr+0x348>)
    66a2:	6a1b      	ldr	r3, [r3, #32]
    66a4:	2b00      	cmp	r3, #0
    66a6:	d00b      	beq.n	66c0 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    66a8:	4b60      	ldr	r3, [pc, #384]	; (682c <hif_handle_isr+0x348>)
    66aa:	6a1b      	ldr	r3, [r3, #32]
    66ac:	aa04      	add	r2, sp, #16
    66ae:	7850      	ldrb	r0, [r2, #1]
    66b0:	b2c0      	uxtb	r0, r0
    66b2:	8851      	ldrh	r1, [r2, #2]
    66b4:	9a05      	ldr	r2, [sp, #20]
    66b6:	3208      	adds	r2, #8
    66b8:	3908      	subs	r1, #8
    66ba:	b289      	uxth	r1, r1
    66bc:	4798      	blx	r3
    66be:	e796      	b.n	65ee <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    66c0:	4a6a      	ldr	r2, [pc, #424]	; (686c <hif_handle_isr+0x388>)
    66c2:	495d      	ldr	r1, [pc, #372]	; (6838 <hif_handle_isr+0x354>)
    66c4:	485d      	ldr	r0, [pc, #372]	; (683c <hif_handle_isr+0x358>)
    66c6:	4b5e      	ldr	r3, [pc, #376]	; (6840 <hif_handle_isr+0x35c>)
    66c8:	4798      	blx	r3
    66ca:	4869      	ldr	r0, [pc, #420]	; (6870 <hif_handle_isr+0x38c>)
    66cc:	4b5e      	ldr	r3, [pc, #376]	; (6848 <hif_handle_isr+0x364>)
    66ce:	4798      	blx	r3
    66d0:	200d      	movs	r0, #13
    66d2:	4b5e      	ldr	r3, [pc, #376]	; (684c <hif_handle_isr+0x368>)
    66d4:	4798      	blx	r3
    66d6:	e78a      	b.n	65ee <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    66d8:	4b54      	ldr	r3, [pc, #336]	; (682c <hif_handle_isr+0x348>)
    66da:	699b      	ldr	r3, [r3, #24]
    66dc:	2b00      	cmp	r3, #0
    66de:	d00b      	beq.n	66f8 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    66e0:	4b52      	ldr	r3, [pc, #328]	; (682c <hif_handle_isr+0x348>)
    66e2:	699b      	ldr	r3, [r3, #24]
    66e4:	aa04      	add	r2, sp, #16
    66e6:	7850      	ldrb	r0, [r2, #1]
    66e8:	b2c0      	uxtb	r0, r0
    66ea:	8851      	ldrh	r1, [r2, #2]
    66ec:	9a05      	ldr	r2, [sp, #20]
    66ee:	3208      	adds	r2, #8
    66f0:	3908      	subs	r1, #8
    66f2:	b289      	uxth	r1, r1
    66f4:	4798      	blx	r3
    66f6:	e77a      	b.n	65ee <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    66f8:	4a5e      	ldr	r2, [pc, #376]	; (6874 <hif_handle_isr+0x390>)
    66fa:	494f      	ldr	r1, [pc, #316]	; (6838 <hif_handle_isr+0x354>)
    66fc:	484f      	ldr	r0, [pc, #316]	; (683c <hif_handle_isr+0x358>)
    66fe:	4b50      	ldr	r3, [pc, #320]	; (6840 <hif_handle_isr+0x35c>)
    6700:	4798      	blx	r3
    6702:	485d      	ldr	r0, [pc, #372]	; (6878 <hif_handle_isr+0x394>)
    6704:	4b50      	ldr	r3, [pc, #320]	; (6848 <hif_handle_isr+0x364>)
    6706:	4798      	blx	r3
    6708:	200d      	movs	r0, #13
    670a:	4b50      	ldr	r3, [pc, #320]	; (684c <hif_handle_isr+0x368>)
    670c:	4798      	blx	r3
    670e:	e76e      	b.n	65ee <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    6710:	4b46      	ldr	r3, [pc, #280]	; (682c <hif_handle_isr+0x348>)
    6712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6714:	2b00      	cmp	r3, #0
    6716:	d100      	bne.n	671a <hif_handle_isr+0x236>
    6718:	e769      	b.n	65ee <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    671a:	4b44      	ldr	r3, [pc, #272]	; (682c <hif_handle_isr+0x348>)
    671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    671e:	aa04      	add	r2, sp, #16
    6720:	7850      	ldrb	r0, [r2, #1]
    6722:	b2c0      	uxtb	r0, r0
    6724:	8851      	ldrh	r1, [r2, #2]
    6726:	9a05      	ldr	r2, [sp, #20]
    6728:	3208      	adds	r2, #8
    672a:	3908      	subs	r1, #8
    672c:	b289      	uxth	r1, r1
    672e:	4798      	blx	r3
    6730:	e75d      	b.n	65ee <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    6732:	4a52      	ldr	r2, [pc, #328]	; (687c <hif_handle_isr+0x398>)
    6734:	4940      	ldr	r1, [pc, #256]	; (6838 <hif_handle_isr+0x354>)
    6736:	4841      	ldr	r0, [pc, #260]	; (683c <hif_handle_isr+0x358>)
    6738:	4c41      	ldr	r4, [pc, #260]	; (6840 <hif_handle_isr+0x35c>)
    673a:	47a0      	blx	r4
    673c:	ab04      	add	r3, sp, #16
    673e:	7819      	ldrb	r1, [r3, #0]
    6740:	b2c9      	uxtb	r1, r1
    6742:	785a      	ldrb	r2, [r3, #1]
    6744:	b2d2      	uxtb	r2, r2
    6746:	484e      	ldr	r0, [pc, #312]	; (6880 <hif_handle_isr+0x39c>)
    6748:	47a0      	blx	r4
    674a:	200d      	movs	r0, #13
    674c:	4b3f      	ldr	r3, [pc, #252]	; (684c <hif_handle_isr+0x368>)
    674e:	4798      	blx	r3
					ret = hif_set_rx_done();
    6750:	4b4c      	ldr	r3, [pc, #304]	; (6884 <hif_handle_isr+0x3a0>)
    6752:	4798      	blx	r3
    6754:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    6756:	d129      	bne.n	67ac <hif_handle_isr+0x2c8>
    6758:	e74e      	b.n	65f8 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    675a:	2287      	movs	r2, #135	; 0x87
    675c:	0092      	lsls	r2, r2, #2
    675e:	4936      	ldr	r1, [pc, #216]	; (6838 <hif_handle_isr+0x354>)
    6760:	4836      	ldr	r0, [pc, #216]	; (683c <hif_handle_isr+0x358>)
    6762:	4b37      	ldr	r3, [pc, #220]	; (6840 <hif_handle_isr+0x35c>)
    6764:	4798      	blx	r3
    6766:	4848      	ldr	r0, [pc, #288]	; (6888 <hif_handle_isr+0x3a4>)
    6768:	4b37      	ldr	r3, [pc, #220]	; (6848 <hif_handle_isr+0x364>)
    676a:	4798      	blx	r3
    676c:	200d      	movs	r0, #13
    676e:	4b37      	ldr	r3, [pc, #220]	; (684c <hif_handle_isr+0x368>)
    6770:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    6772:	2402      	movs	r4, #2
    6774:	4264      	negs	r4, r4
    6776:	e019      	b.n	67ac <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    6778:	2289      	movs	r2, #137	; 0x89
    677a:	0092      	lsls	r2, r2, #2
    677c:	492e      	ldr	r1, [pc, #184]	; (6838 <hif_handle_isr+0x354>)
    677e:	482f      	ldr	r0, [pc, #188]	; (683c <hif_handle_isr+0x358>)
    6780:	4c2f      	ldr	r4, [pc, #188]	; (6840 <hif_handle_isr+0x35c>)
    6782:	47a0      	blx	r4
    6784:	9903      	ldr	r1, [sp, #12]
    6786:	4841      	ldr	r0, [pc, #260]	; (688c <hif_handle_isr+0x3a8>)
    6788:	47a0      	blx	r4
    678a:	200d      	movs	r0, #13
    678c:	4b2f      	ldr	r3, [pc, #188]	; (684c <hif_handle_isr+0x368>)
    678e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6790:	240c      	movs	r4, #12
    6792:	4264      	negs	r4, r4
    6794:	e00a      	b.n	67ac <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    6796:	4a3e      	ldr	r2, [pc, #248]	; (6890 <hif_handle_isr+0x3ac>)
    6798:	4927      	ldr	r1, [pc, #156]	; (6838 <hif_handle_isr+0x354>)
    679a:	4828      	ldr	r0, [pc, #160]	; (683c <hif_handle_isr+0x358>)
    679c:	4b28      	ldr	r3, [pc, #160]	; (6840 <hif_handle_isr+0x35c>)
    679e:	4798      	blx	r3
    67a0:	483c      	ldr	r0, [pc, #240]	; (6894 <hif_handle_isr+0x3b0>)
    67a2:	4b29      	ldr	r3, [pc, #164]	; (6848 <hif_handle_isr+0x364>)
    67a4:	4798      	blx	r3
    67a6:	200d      	movs	r0, #13
    67a8:	4b28      	ldr	r3, [pc, #160]	; (684c <hif_handle_isr+0x368>)
    67aa:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    67ac:	4a3a      	ldr	r2, [pc, #232]	; (6898 <hif_handle_isr+0x3b4>)
    67ae:	493b      	ldr	r1, [pc, #236]	; (689c <hif_handle_isr+0x3b8>)
    67b0:	4822      	ldr	r0, [pc, #136]	; (683c <hif_handle_isr+0x358>)
    67b2:	4f23      	ldr	r7, [pc, #140]	; (6840 <hif_handle_isr+0x35c>)
    67b4:	47b8      	blx	r7
    67b6:	0021      	movs	r1, r4
    67b8:	4839      	ldr	r0, [pc, #228]	; (68a0 <hif_handle_isr+0x3bc>)
    67ba:	47b8      	blx	r7
    67bc:	200d      	movs	r0, #13
    67be:	4b23      	ldr	r3, [pc, #140]	; (684c <hif_handle_isr+0x368>)
    67c0:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    67c2:	a903      	add	r1, sp, #12
    67c4:	4837      	ldr	r0, [pc, #220]	; (68a4 <hif_handle_isr+0x3c0>)
    67c6:	47b0      	blx	r6
    67c8:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    67ca:	d1e4      	bne.n	6796 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    67cc:	9b03      	ldr	r3, [sp, #12]
    67ce:	07db      	lsls	r3, r3, #31
    67d0:	d5d2      	bpl.n	6778 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    67d2:	2000      	movs	r0, #0
    67d4:	4b1f      	ldr	r3, [pc, #124]	; (6854 <hif_handle_isr+0x370>)
    67d6:	4798      	blx	r3
			reg &= ~NBIT0;
    67d8:	2301      	movs	r3, #1
    67da:	9903      	ldr	r1, [sp, #12]
    67dc:	4399      	bics	r1, r3
    67de:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    67e0:	4830      	ldr	r0, [pc, #192]	; (68a4 <hif_handle_isr+0x3c0>)
    67e2:	4b31      	ldr	r3, [pc, #196]	; (68a8 <hif_handle_isr+0x3c4>)
    67e4:	4798      	blx	r3
    67e6:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    67e8:	d1e0      	bne.n	67ac <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    67ea:	2201      	movs	r2, #1
    67ec:	4b0f      	ldr	r3, [pc, #60]	; (682c <hif_handle_isr+0x348>)
    67ee:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    67f0:	9b03      	ldr	r3, [sp, #12]
    67f2:	049d      	lsls	r5, r3, #18
    67f4:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    67f6:	d0b0      	beq.n	675a <hif_handle_isr+0x276>
				uint32 address = 0;
    67f8:	2300      	movs	r3, #0
    67fa:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    67fc:	a905      	add	r1, sp, #20
    67fe:	482b      	ldr	r0, [pc, #172]	; (68ac <hif_handle_isr+0x3c8>)
    6800:	4b16      	ldr	r3, [pc, #88]	; (685c <hif_handle_isr+0x378>)
    6802:	4798      	blx	r3
    6804:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    6806:	d100      	bne.n	680a <hif_handle_isr+0x326>
    6808:	e675      	b.n	64f6 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    680a:	22c8      	movs	r2, #200	; 0xc8
    680c:	32ff      	adds	r2, #255	; 0xff
    680e:	490a      	ldr	r1, [pc, #40]	; (6838 <hif_handle_isr+0x354>)
    6810:	480a      	ldr	r0, [pc, #40]	; (683c <hif_handle_isr+0x358>)
    6812:	4b0b      	ldr	r3, [pc, #44]	; (6840 <hif_handle_isr+0x35c>)
    6814:	4798      	blx	r3
    6816:	4826      	ldr	r0, [pc, #152]	; (68b0 <hif_handle_isr+0x3cc>)
    6818:	4b0b      	ldr	r3, [pc, #44]	; (6848 <hif_handle_isr+0x364>)
    681a:	4798      	blx	r3
    681c:	200d      	movs	r0, #13
    681e:	4b0b      	ldr	r3, [pc, #44]	; (684c <hif_handle_isr+0x368>)
    6820:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    6822:	2001      	movs	r0, #1
    6824:	4b0b      	ldr	r3, [pc, #44]	; (6854 <hif_handle_isr+0x370>)
    6826:	4798      	blx	r3
    6828:	e7c0      	b.n	67ac <hif_handle_isr+0x2c8>
    682a:	46c0      	nop			; (mov r8, r8)
    682c:	20000904 	.word	0x20000904
    6830:	0000761d 	.word	0x0000761d
    6834:	0000020f 	.word	0x0000020f
    6838:	00011878 	.word	0x00011878
    683c:	00011824 	.word	0x00011824
    6840:	0000bb3d 	.word	0x0000bb3d
    6844:	000119d4 	.word	0x000119d4
    6848:	0000bc59 	.word	0x0000bc59
    684c:	0000bb71 	.word	0x0000bb71
    6850:	000118d0 	.word	0x000118d0
    6854:	00005e89 	.word	0x00005e89
    6858:	000118e8 	.word	0x000118e8
    685c:	00007605 	.word	0x00007605
    6860:	00011928 	.word	0x00011928
    6864:	00011948 	.word	0x00011948
    6868:	0001196c 	.word	0x0001196c
    686c:	000001ff 	.word	0x000001ff
    6870:	0001198c 	.word	0x0001198c
    6874:	00000206 	.word	0x00000206
    6878:	000119b0 	.word	0x000119b0
    687c:	00000215 	.word	0x00000215
    6880:	000119ec 	.word	0x000119ec
    6884:	000061bd 	.word	0x000061bd
    6888:	00011a18 	.word	0x00011a18
    688c:	00011a2c 	.word	0x00011a2c
    6890:	0000022d 	.word	0x0000022d
    6894:	00011a48 	.word	0x00011a48
    6898:	0000024a 	.word	0x0000024a
    689c:	00011880 	.word	0x00011880
    68a0:	00011a6c 	.word	0x00011a6c
    68a4:	00001070 	.word	0x00001070
    68a8:	00007611 	.word	0x00007611
    68ac:	00001084 	.word	0x00001084
    68b0:	000118ac 	.word	0x000118ac
			}
		}
	}

	return ret;
}
    68b4:	2000      	movs	r0, #0
    68b6:	b007      	add	sp, #28
    68b8:	bc0c      	pop	{r2, r3}
    68ba:	4690      	mov	r8, r2
    68bc:	4699      	mov	r9, r3
    68be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000068c0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    68c0:	b570      	push	{r4, r5, r6, lr}
    68c2:	0014      	movs	r4, r2
    68c4:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    68c6:	2800      	cmp	r0, #0
    68c8:	d003      	beq.n	68d2 <hif_receive+0x12>
    68ca:	2900      	cmp	r1, #0
    68cc:	d001      	beq.n	68d2 <hif_receive+0x12>
    68ce:	2a00      	cmp	r2, #0
    68d0:	d112      	bne.n	68f8 <hif_receive+0x38>
	{
		if(isDone)
    68d2:	2d00      	cmp	r5, #0
    68d4:	d002      	beq.n	68dc <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    68d6:	4b27      	ldr	r3, [pc, #156]	; (6974 <hif_receive+0xb4>)
    68d8:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    68da:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    68dc:	4a26      	ldr	r2, [pc, #152]	; (6978 <hif_receive+0xb8>)
    68de:	4927      	ldr	r1, [pc, #156]	; (697c <hif_receive+0xbc>)
    68e0:	4827      	ldr	r0, [pc, #156]	; (6980 <hif_receive+0xc0>)
    68e2:	4b28      	ldr	r3, [pc, #160]	; (6984 <hif_receive+0xc4>)
    68e4:	4798      	blx	r3
    68e6:	4828      	ldr	r0, [pc, #160]	; (6988 <hif_receive+0xc8>)
    68e8:	4b28      	ldr	r3, [pc, #160]	; (698c <hif_receive+0xcc>)
    68ea:	4798      	blx	r3
    68ec:	200d      	movs	r0, #13
    68ee:	4b28      	ldr	r3, [pc, #160]	; (6990 <hif_receive+0xd0>)
    68f0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    68f2:	200c      	movs	r0, #12
    68f4:	4240      	negs	r0, r0
    68f6:	e7f0      	b.n	68da <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    68f8:	4b26      	ldr	r3, [pc, #152]	; (6994 <hif_receive+0xd4>)
    68fa:	689b      	ldr	r3, [r3, #8]
    68fc:	429a      	cmp	r2, r3
    68fe:	d81a      	bhi.n	6936 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    6900:	4b24      	ldr	r3, [pc, #144]	; (6994 <hif_receive+0xd4>)
    6902:	685b      	ldr	r3, [r3, #4]
    6904:	4298      	cmp	r0, r3
    6906:	d326      	bcc.n	6956 <hif_receive+0x96>
    6908:	1886      	adds	r6, r0, r2
    690a:	4a22      	ldr	r2, [pc, #136]	; (6994 <hif_receive+0xd4>)
    690c:	6853      	ldr	r3, [r2, #4]
    690e:	6892      	ldr	r2, [r2, #8]
    6910:	189b      	adds	r3, r3, r2
    6912:	429e      	cmp	r6, r3
    6914:	d81f      	bhi.n	6956 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    6916:	0022      	movs	r2, r4
    6918:	4b1f      	ldr	r3, [pc, #124]	; (6998 <hif_receive+0xd8>)
    691a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    691c:	2800      	cmp	r0, #0
    691e:	d1dc      	bne.n	68da <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    6920:	4a1c      	ldr	r2, [pc, #112]	; (6994 <hif_receive+0xd4>)
    6922:	6853      	ldr	r3, [r2, #4]
    6924:	6892      	ldr	r2, [r2, #8]
    6926:	189b      	adds	r3, r3, r2
    6928:	429e      	cmp	r6, r3
    692a:	d001      	beq.n	6930 <hif_receive+0x70>
    692c:	2d00      	cmp	r5, #0
    692e:	d0d4      	beq.n	68da <hif_receive+0x1a>
		ret = hif_set_rx_done();
    6930:	4b10      	ldr	r3, [pc, #64]	; (6974 <hif_receive+0xb4>)
    6932:	4798      	blx	r3
    6934:	e7d1      	b.n	68da <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    6936:	4a19      	ldr	r2, [pc, #100]	; (699c <hif_receive+0xdc>)
    6938:	4910      	ldr	r1, [pc, #64]	; (697c <hif_receive+0xbc>)
    693a:	4811      	ldr	r0, [pc, #68]	; (6980 <hif_receive+0xc0>)
    693c:	4d11      	ldr	r5, [pc, #68]	; (6984 <hif_receive+0xc4>)
    693e:	47a8      	blx	r5
    6940:	4b14      	ldr	r3, [pc, #80]	; (6994 <hif_receive+0xd4>)
    6942:	689a      	ldr	r2, [r3, #8]
    6944:	0021      	movs	r1, r4
    6946:	4816      	ldr	r0, [pc, #88]	; (69a0 <hif_receive+0xe0>)
    6948:	47a8      	blx	r5
    694a:	200d      	movs	r0, #13
    694c:	4b10      	ldr	r3, [pc, #64]	; (6990 <hif_receive+0xd0>)
    694e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    6950:	200c      	movs	r0, #12
    6952:	4240      	negs	r0, r0
		goto ERR1;
    6954:	e7c1      	b.n	68da <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    6956:	4a13      	ldr	r2, [pc, #76]	; (69a4 <hif_receive+0xe4>)
    6958:	4908      	ldr	r1, [pc, #32]	; (697c <hif_receive+0xbc>)
    695a:	4809      	ldr	r0, [pc, #36]	; (6980 <hif_receive+0xc0>)
    695c:	4b09      	ldr	r3, [pc, #36]	; (6984 <hif_receive+0xc4>)
    695e:	4798      	blx	r3
    6960:	4811      	ldr	r0, [pc, #68]	; (69a8 <hif_receive+0xe8>)
    6962:	4b0a      	ldr	r3, [pc, #40]	; (698c <hif_receive+0xcc>)
    6964:	4798      	blx	r3
    6966:	200d      	movs	r0, #13
    6968:	4b09      	ldr	r3, [pc, #36]	; (6990 <hif_receive+0xd0>)
    696a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    696c:	200c      	movs	r0, #12
    696e:	4240      	negs	r0, r0
		goto ERR1;
    6970:	e7b3      	b.n	68da <hif_receive+0x1a>
    6972:	46c0      	nop			; (mov r8, r8)
    6974:	000061bd 	.word	0x000061bd
    6978:	0000026b 	.word	0x0000026b
    697c:	00011890 	.word	0x00011890
    6980:	00011824 	.word	0x00011824
    6984:	0000bb3d 	.word	0x0000bb3d
    6988:	00011a9c 	.word	0x00011a9c
    698c:	0000bc59 	.word	0x0000bc59
    6990:	0000bb71 	.word	0x0000bb71
    6994:	20000904 	.word	0x20000904
    6998:	0000761d 	.word	0x0000761d
    699c:	00000273 	.word	0x00000273
    69a0:	00011abc 	.word	0x00011abc
    69a4:	00000279 	.word	0x00000279
    69a8:	00011b04 	.word	0x00011b04

000069ac <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    69ac:	b570      	push	{r4, r5, r6, lr}
    69ae:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    69b0:	2807      	cmp	r0, #7
    69b2:	d81f      	bhi.n	69f4 <hif_register_cb+0x48>
    69b4:	0083      	lsls	r3, r0, #2
    69b6:	4a16      	ldr	r2, [pc, #88]	; (6a10 <hif_register_cb+0x64>)
    69b8:	58d3      	ldr	r3, [r2, r3]
    69ba:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    69bc:	4b15      	ldr	r3, [pc, #84]	; (6a14 <hif_register_cb+0x68>)
    69be:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    69c0:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    69c2:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    69c4:	4b13      	ldr	r3, [pc, #76]	; (6a14 <hif_register_cb+0x68>)
    69c6:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    69c8:	2000      	movs	r0, #0
			break;
    69ca:	e7fa      	b.n	69c2 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    69cc:	4b11      	ldr	r3, [pc, #68]	; (6a14 <hif_register_cb+0x68>)
    69ce:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    69d0:	2000      	movs	r0, #0
			break;
    69d2:	e7f6      	b.n	69c2 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    69d4:	4b0f      	ldr	r3, [pc, #60]	; (6a14 <hif_register_cb+0x68>)
    69d6:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    69d8:	2000      	movs	r0, #0
			break;
    69da:	e7f2      	b.n	69c2 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    69dc:	4b0d      	ldr	r3, [pc, #52]	; (6a14 <hif_register_cb+0x68>)
    69de:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    69e0:	2000      	movs	r0, #0
			break;
    69e2:	e7ee      	b.n	69c2 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    69e4:	4b0b      	ldr	r3, [pc, #44]	; (6a14 <hif_register_cb+0x68>)
    69e6:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    69e8:	2000      	movs	r0, #0
			break;
    69ea:	e7ea      	b.n	69c2 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    69ec:	4b09      	ldr	r3, [pc, #36]	; (6a14 <hif_register_cb+0x68>)
    69ee:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    69f0:	2000      	movs	r0, #0
			break;
    69f2:	e7e6      	b.n	69c2 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    69f4:	4a08      	ldr	r2, [pc, #32]	; (6a18 <hif_register_cb+0x6c>)
    69f6:	4909      	ldr	r1, [pc, #36]	; (6a1c <hif_register_cb+0x70>)
    69f8:	4809      	ldr	r0, [pc, #36]	; (6a20 <hif_register_cb+0x74>)
    69fa:	4d0a      	ldr	r5, [pc, #40]	; (6a24 <hif_register_cb+0x78>)
    69fc:	47a8      	blx	r5
    69fe:	0021      	movs	r1, r4
    6a00:	4809      	ldr	r0, [pc, #36]	; (6a28 <hif_register_cb+0x7c>)
    6a02:	47a8      	blx	r5
    6a04:	200d      	movs	r0, #13
    6a06:	4b09      	ldr	r3, [pc, #36]	; (6a2c <hif_register_cb+0x80>)
    6a08:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6a0a:	200c      	movs	r0, #12
    6a0c:	4240      	negs	r0, r0
			break;
    6a0e:	e7d8      	b.n	69c2 <hif_register_cb+0x16>
    6a10:	0001184c 	.word	0x0001184c
    6a14:	20000904 	.word	0x20000904
    6a18:	000002b1 	.word	0x000002b1
    6a1c:	0001189c 	.word	0x0001189c
    6a20:	00011824 	.word	0x00011824
    6a24:	0000bb3d 	.word	0x0000bb3d
    6a28:	00011b48 	.word	0x00011b48
    6a2c:	0000bb71 	.word	0x0000bb71

00006a30 <hif_init>:
{
    6a30:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    6a32:	2228      	movs	r2, #40	; 0x28
    6a34:	2100      	movs	r1, #0
    6a36:	4806      	ldr	r0, [pc, #24]	; (6a50 <hif_init+0x20>)
    6a38:	4b06      	ldr	r3, [pc, #24]	; (6a54 <hif_init+0x24>)
    6a3a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    6a3c:	4806      	ldr	r0, [pc, #24]	; (6a58 <hif_init+0x28>)
    6a3e:	4b07      	ldr	r3, [pc, #28]	; (6a5c <hif_init+0x2c>)
    6a40:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    6a42:	4907      	ldr	r1, [pc, #28]	; (6a60 <hif_init+0x30>)
    6a44:	2003      	movs	r0, #3
    6a46:	4b07      	ldr	r3, [pc, #28]	; (6a64 <hif_init+0x34>)
    6a48:	4798      	blx	r3
}
    6a4a:	2000      	movs	r0, #0
    6a4c:	bd10      	pop	{r4, pc}
    6a4e:	46c0      	nop			; (mov r8, r8)
    6a50:	20000904 	.word	0x20000904
    6a54:	0000617d 	.word	0x0000617d
    6a58:	000061a9 	.word	0x000061a9
    6a5c:	00005e31 	.word	0x00005e31
    6a60:	000061b9 	.word	0x000061b9
    6a64:	000069ad 	.word	0x000069ad

00006a68 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    6a68:	b530      	push	{r4, r5, lr}
    6a6a:	b09f      	sub	sp, #124	; 0x7c
    6a6c:	0004      	movs	r4, r0
    6a6e:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    6a70:	282c      	cmp	r0, #44	; 0x2c
    6a72:	d02f      	beq.n	6ad4 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    6a74:	281b      	cmp	r0, #27
    6a76:	d03d      	beq.n	6af4 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    6a78:	2806      	cmp	r0, #6
    6a7a:	d04b      	beq.n	6b14 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    6a7c:	280e      	cmp	r0, #14
    6a7e:	d027      	beq.n	6ad0 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    6a80:	2832      	cmp	r0, #50	; 0x32
    6a82:	d057      	beq.n	6b34 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    6a84:	282f      	cmp	r0, #47	; 0x2f
    6a86:	d065      	beq.n	6b54 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    6a88:	2834      	cmp	r0, #52	; 0x34
    6a8a:	d100      	bne.n	6a8e <m2m_wifi_cb+0x26>
    6a8c:	e077      	b.n	6b7e <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    6a8e:	2811      	cmp	r0, #17
    6a90:	d100      	bne.n	6a94 <m2m_wifi_cb+0x2c>
    6a92:	e096      	b.n	6bc2 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    6a94:	2813      	cmp	r0, #19
    6a96:	d100      	bne.n	6a9a <m2m_wifi_cb+0x32>
    6a98:	e0ac      	b.n	6bf4 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    6a9a:	2804      	cmp	r0, #4
    6a9c:	d100      	bne.n	6aa0 <m2m_wifi_cb+0x38>
    6a9e:	e0bb      	b.n	6c18 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    6aa0:	2865      	cmp	r0, #101	; 0x65
    6aa2:	d100      	bne.n	6aa6 <m2m_wifi_cb+0x3e>
    6aa4:	e0ca      	b.n	6c3c <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    6aa6:	2809      	cmp	r0, #9
    6aa8:	d100      	bne.n	6aac <m2m_wifi_cb+0x44>
    6aaa:	e0d9      	b.n	6c60 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    6aac:	282a      	cmp	r0, #42	; 0x2a
    6aae:	d100      	bne.n	6ab2 <m2m_wifi_cb+0x4a>
    6ab0:	e0e8      	b.n	6c84 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    6ab2:	2820      	cmp	r0, #32
    6ab4:	d100      	bne.n	6ab8 <m2m_wifi_cb+0x50>
    6ab6:	e0f7      	b.n	6ca8 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    6ab8:	2295      	movs	r2, #149	; 0x95
    6aba:	0052      	lsls	r2, r2, #1
    6abc:	4989      	ldr	r1, [pc, #548]	; (6ce4 <m2m_wifi_cb+0x27c>)
    6abe:	488a      	ldr	r0, [pc, #552]	; (6ce8 <m2m_wifi_cb+0x280>)
    6ac0:	4d8a      	ldr	r5, [pc, #552]	; (6cec <m2m_wifi_cb+0x284>)
    6ac2:	47a8      	blx	r5
    6ac4:	0021      	movs	r1, r4
    6ac6:	488a      	ldr	r0, [pc, #552]	; (6cf0 <m2m_wifi_cb+0x288>)
    6ac8:	47a8      	blx	r5
    6aca:	200d      	movs	r0, #13
    6acc:	4b89      	ldr	r3, [pc, #548]	; (6cf4 <m2m_wifi_cb+0x28c>)
    6ace:	4798      	blx	r3
	}
}
    6ad0:	b01f      	add	sp, #124	; 0x7c
    6ad2:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    6ad4:	2300      	movs	r3, #0
    6ad6:	2204      	movs	r2, #4
    6ad8:	a903      	add	r1, sp, #12
    6ada:	0028      	movs	r0, r5
    6adc:	4c86      	ldr	r4, [pc, #536]	; (6cf8 <m2m_wifi_cb+0x290>)
    6ade:	47a0      	blx	r4
    6ae0:	2800      	cmp	r0, #0
    6ae2:	d1f5      	bne.n	6ad0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6ae4:	4b85      	ldr	r3, [pc, #532]	; (6cfc <m2m_wifi_cb+0x294>)
    6ae6:	681b      	ldr	r3, [r3, #0]
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d0f1      	beq.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    6aec:	a903      	add	r1, sp, #12
    6aee:	302c      	adds	r0, #44	; 0x2c
    6af0:	4798      	blx	r3
    6af2:	e7ed      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    6af4:	2300      	movs	r3, #0
    6af6:	2208      	movs	r2, #8
    6af8:	a903      	add	r1, sp, #12
    6afa:	0028      	movs	r0, r5
    6afc:	4c7e      	ldr	r4, [pc, #504]	; (6cf8 <m2m_wifi_cb+0x290>)
    6afe:	47a0      	blx	r4
    6b00:	2800      	cmp	r0, #0
    6b02:	d1e5      	bne.n	6ad0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6b04:	4b7d      	ldr	r3, [pc, #500]	; (6cfc <m2m_wifi_cb+0x294>)
    6b06:	681b      	ldr	r3, [r3, #0]
    6b08:	2b00      	cmp	r3, #0
    6b0a:	d0e1      	beq.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    6b0c:	a903      	add	r1, sp, #12
    6b0e:	301b      	adds	r0, #27
    6b10:	4798      	blx	r3
    6b12:	e7dd      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    6b14:	2301      	movs	r3, #1
    6b16:	2230      	movs	r2, #48	; 0x30
    6b18:	a903      	add	r1, sp, #12
    6b1a:	0028      	movs	r0, r5
    6b1c:	4c76      	ldr	r4, [pc, #472]	; (6cf8 <m2m_wifi_cb+0x290>)
    6b1e:	47a0      	blx	r4
    6b20:	2800      	cmp	r0, #0
    6b22:	d1d5      	bne.n	6ad0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    6b24:	4b75      	ldr	r3, [pc, #468]	; (6cfc <m2m_wifi_cb+0x294>)
    6b26:	681b      	ldr	r3, [r3, #0]
    6b28:	2b00      	cmp	r3, #0
    6b2a:	d0d1      	beq.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    6b2c:	a903      	add	r1, sp, #12
    6b2e:	3006      	adds	r0, #6
    6b30:	4798      	blx	r3
    6b32:	e7cd      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    6b34:	2300      	movs	r3, #0
    6b36:	2214      	movs	r2, #20
    6b38:	a903      	add	r1, sp, #12
    6b3a:	0028      	movs	r0, r5
    6b3c:	4c6e      	ldr	r4, [pc, #440]	; (6cf8 <m2m_wifi_cb+0x290>)
    6b3e:	47a0      	blx	r4
    6b40:	2800      	cmp	r0, #0
    6b42:	d1c5      	bne.n	6ad0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6b44:	4b6d      	ldr	r3, [pc, #436]	; (6cfc <m2m_wifi_cb+0x294>)
    6b46:	681b      	ldr	r3, [r3, #0]
    6b48:	2b00      	cmp	r3, #0
    6b4a:	d0c1      	beq.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    6b4c:	a903      	add	r1, sp, #12
    6b4e:	3032      	adds	r0, #50	; 0x32
    6b50:	4798      	blx	r3
    6b52:	e7bd      	b.n	6ad0 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    6b54:	2264      	movs	r2, #100	; 0x64
    6b56:	2100      	movs	r1, #0
    6b58:	a803      	add	r0, sp, #12
    6b5a:	4b69      	ldr	r3, [pc, #420]	; (6d00 <m2m_wifi_cb+0x298>)
    6b5c:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    6b5e:	2300      	movs	r3, #0
    6b60:	2264      	movs	r2, #100	; 0x64
    6b62:	a903      	add	r1, sp, #12
    6b64:	0028      	movs	r0, r5
    6b66:	4c64      	ldr	r4, [pc, #400]	; (6cf8 <m2m_wifi_cb+0x290>)
    6b68:	47a0      	blx	r4
    6b6a:	2800      	cmp	r0, #0
    6b6c:	d1b0      	bne.n	6ad0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6b6e:	4b63      	ldr	r3, [pc, #396]	; (6cfc <m2m_wifi_cb+0x294>)
    6b70:	681b      	ldr	r3, [r3, #0]
    6b72:	2b00      	cmp	r3, #0
    6b74:	d0ac      	beq.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    6b76:	a903      	add	r1, sp, #12
    6b78:	302f      	adds	r0, #47	; 0x2f
    6b7a:	4798      	blx	r3
    6b7c:	e7a8      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    6b7e:	2300      	movs	r3, #0
    6b80:	2204      	movs	r2, #4
    6b82:	a903      	add	r1, sp, #12
    6b84:	0028      	movs	r0, r5
    6b86:	4c5c      	ldr	r4, [pc, #368]	; (6cf8 <m2m_wifi_cb+0x290>)
    6b88:	47a0      	blx	r4
    6b8a:	2800      	cmp	r0, #0
    6b8c:	d1a0      	bne.n	6ad0 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    6b8e:	485d      	ldr	r0, [pc, #372]	; (6d04 <m2m_wifi_cb+0x29c>)
    6b90:	4d56      	ldr	r5, [pc, #344]	; (6cec <m2m_wifi_cb+0x284>)
    6b92:	47a8      	blx	r5
    6b94:	9c03      	ldr	r4, [sp, #12]
    6b96:	0a23      	lsrs	r3, r4, #8
    6b98:	20ff      	movs	r0, #255	; 0xff
    6b9a:	4003      	ands	r3, r0
    6b9c:	0c22      	lsrs	r2, r4, #16
    6b9e:	4002      	ands	r2, r0
    6ba0:	0e21      	lsrs	r1, r4, #24
    6ba2:	4020      	ands	r0, r4
    6ba4:	9000      	str	r0, [sp, #0]
    6ba6:	4858      	ldr	r0, [pc, #352]	; (6d08 <m2m_wifi_cb+0x2a0>)
    6ba8:	47a8      	blx	r5
    6baa:	200d      	movs	r0, #13
    6bac:	4b51      	ldr	r3, [pc, #324]	; (6cf4 <m2m_wifi_cb+0x28c>)
    6bae:	4798      	blx	r3
			if (gpfAppWifiCb)
    6bb0:	4b52      	ldr	r3, [pc, #328]	; (6cfc <m2m_wifi_cb+0x294>)
    6bb2:	681b      	ldr	r3, [r3, #0]
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d100      	bne.n	6bba <m2m_wifi_cb+0x152>
    6bb8:	e78a      	b.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    6bba:	2100      	movs	r1, #0
    6bbc:	2034      	movs	r0, #52	; 0x34
    6bbe:	4798      	blx	r3
    6bc0:	e786      	b.n	6ad0 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    6bc2:	2200      	movs	r2, #0
    6bc4:	4b51      	ldr	r3, [pc, #324]	; (6d0c <m2m_wifi_cb+0x2a4>)
    6bc6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    6bc8:	2300      	movs	r3, #0
    6bca:	3204      	adds	r2, #4
    6bcc:	a903      	add	r1, sp, #12
    6bce:	0028      	movs	r0, r5
    6bd0:	4c49      	ldr	r4, [pc, #292]	; (6cf8 <m2m_wifi_cb+0x290>)
    6bd2:	47a0      	blx	r4
    6bd4:	2800      	cmp	r0, #0
    6bd6:	d000      	beq.n	6bda <m2m_wifi_cb+0x172>
    6bd8:	e77a      	b.n	6ad0 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    6bda:	ab03      	add	r3, sp, #12
    6bdc:	781a      	ldrb	r2, [r3, #0]
    6bde:	4b4c      	ldr	r3, [pc, #304]	; (6d10 <m2m_wifi_cb+0x2a8>)
    6be0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    6be2:	4b46      	ldr	r3, [pc, #280]	; (6cfc <m2m_wifi_cb+0x294>)
    6be4:	681b      	ldr	r3, [r3, #0]
    6be6:	2b00      	cmp	r3, #0
    6be8:	d100      	bne.n	6bec <m2m_wifi_cb+0x184>
    6bea:	e771      	b.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    6bec:	a903      	add	r1, sp, #12
    6bee:	3011      	adds	r0, #17
    6bf0:	4798      	blx	r3
    6bf2:	e76d      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    6bf4:	2300      	movs	r3, #0
    6bf6:	222c      	movs	r2, #44	; 0x2c
    6bf8:	a903      	add	r1, sp, #12
    6bfa:	0028      	movs	r0, r5
    6bfc:	4c3e      	ldr	r4, [pc, #248]	; (6cf8 <m2m_wifi_cb+0x290>)
    6bfe:	47a0      	blx	r4
    6c00:	2800      	cmp	r0, #0
    6c02:	d000      	beq.n	6c06 <m2m_wifi_cb+0x19e>
    6c04:	e764      	b.n	6ad0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6c06:	4b3d      	ldr	r3, [pc, #244]	; (6cfc <m2m_wifi_cb+0x294>)
    6c08:	681b      	ldr	r3, [r3, #0]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d100      	bne.n	6c10 <m2m_wifi_cb+0x1a8>
    6c0e:	e75f      	b.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    6c10:	a903      	add	r1, sp, #12
    6c12:	3013      	adds	r0, #19
    6c14:	4798      	blx	r3
    6c16:	e75b      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    6c18:	2300      	movs	r3, #0
    6c1a:	2204      	movs	r2, #4
    6c1c:	a91c      	add	r1, sp, #112	; 0x70
    6c1e:	0028      	movs	r0, r5
    6c20:	4c35      	ldr	r4, [pc, #212]	; (6cf8 <m2m_wifi_cb+0x290>)
    6c22:	47a0      	blx	r4
    6c24:	2800      	cmp	r0, #0
    6c26:	d000      	beq.n	6c2a <m2m_wifi_cb+0x1c2>
    6c28:	e752      	b.n	6ad0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6c2a:	4b34      	ldr	r3, [pc, #208]	; (6cfc <m2m_wifi_cb+0x294>)
    6c2c:	681b      	ldr	r3, [r3, #0]
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d100      	bne.n	6c34 <m2m_wifi_cb+0x1cc>
    6c32:	e74d      	b.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    6c34:	a91c      	add	r1, sp, #112	; 0x70
    6c36:	3004      	adds	r0, #4
    6c38:	4798      	blx	r3
    6c3a:	e749      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    6c3c:	2300      	movs	r3, #0
    6c3e:	2204      	movs	r2, #4
    6c40:	a91c      	add	r1, sp, #112	; 0x70
    6c42:	0028      	movs	r0, r5
    6c44:	4c2c      	ldr	r4, [pc, #176]	; (6cf8 <m2m_wifi_cb+0x290>)
    6c46:	47a0      	blx	r4
    6c48:	2800      	cmp	r0, #0
    6c4a:	d000      	beq.n	6c4e <m2m_wifi_cb+0x1e6>
    6c4c:	e740      	b.n	6ad0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6c4e:	4b2b      	ldr	r3, [pc, #172]	; (6cfc <m2m_wifi_cb+0x294>)
    6c50:	681b      	ldr	r3, [r3, #0]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d100      	bne.n	6c58 <m2m_wifi_cb+0x1f0>
    6c56:	e73b      	b.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    6c58:	a91c      	add	r1, sp, #112	; 0x70
    6c5a:	3065      	adds	r0, #101	; 0x65
    6c5c:	4798      	blx	r3
    6c5e:	e737      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    6c60:	2301      	movs	r3, #1
    6c62:	2264      	movs	r2, #100	; 0x64
    6c64:	a903      	add	r1, sp, #12
    6c66:	0028      	movs	r0, r5
    6c68:	4c23      	ldr	r4, [pc, #140]	; (6cf8 <m2m_wifi_cb+0x290>)
    6c6a:	47a0      	blx	r4
    6c6c:	2800      	cmp	r0, #0
    6c6e:	d000      	beq.n	6c72 <m2m_wifi_cb+0x20a>
    6c70:	e72e      	b.n	6ad0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    6c72:	4b22      	ldr	r3, [pc, #136]	; (6cfc <m2m_wifi_cb+0x294>)
    6c74:	681b      	ldr	r3, [r3, #0]
    6c76:	2b00      	cmp	r3, #0
    6c78:	d100      	bne.n	6c7c <m2m_wifi_cb+0x214>
    6c7a:	e729      	b.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    6c7c:	a903      	add	r1, sp, #12
    6c7e:	3009      	adds	r0, #9
    6c80:	4798      	blx	r3
    6c82:	e725      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    6c84:	2301      	movs	r3, #1
    6c86:	2204      	movs	r2, #4
    6c88:	a903      	add	r1, sp, #12
    6c8a:	0028      	movs	r0, r5
    6c8c:	4c1a      	ldr	r4, [pc, #104]	; (6cf8 <m2m_wifi_cb+0x290>)
    6c8e:	47a0      	blx	r4
    6c90:	2800      	cmp	r0, #0
    6c92:	d000      	beq.n	6c96 <m2m_wifi_cb+0x22e>
    6c94:	e71c      	b.n	6ad0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    6c96:	4b19      	ldr	r3, [pc, #100]	; (6cfc <m2m_wifi_cb+0x294>)
    6c98:	681b      	ldr	r3, [r3, #0]
    6c9a:	2b00      	cmp	r3, #0
    6c9c:	d100      	bne.n	6ca0 <m2m_wifi_cb+0x238>
    6c9e:	e717      	b.n	6ad0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    6ca0:	a903      	add	r1, sp, #12
    6ca2:	302a      	adds	r0, #42	; 0x2a
    6ca4:	4798      	blx	r3
    6ca6:	e713      	b.n	6ad0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    6ca8:	2300      	movs	r3, #0
    6caa:	2208      	movs	r2, #8
    6cac:	a903      	add	r1, sp, #12
    6cae:	0028      	movs	r0, r5
    6cb0:	4c11      	ldr	r4, [pc, #68]	; (6cf8 <m2m_wifi_cb+0x290>)
    6cb2:	47a0      	blx	r4
    6cb4:	2800      	cmp	r0, #0
    6cb6:	d000      	beq.n	6cba <m2m_wifi_cb+0x252>
    6cb8:	e70a      	b.n	6ad0 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    6cba:	ab03      	add	r3, sp, #12
    6cbc:	889a      	ldrh	r2, [r3, #4]
    6cbe:	0028      	movs	r0, r5
    6cc0:	3008      	adds	r0, #8
    6cc2:	2301      	movs	r3, #1
    6cc4:	9903      	ldr	r1, [sp, #12]
    6cc6:	4c0c      	ldr	r4, [pc, #48]	; (6cf8 <m2m_wifi_cb+0x290>)
    6cc8:	47a0      	blx	r4
    6cca:	2800      	cmp	r0, #0
    6ccc:	d000      	beq.n	6cd0 <m2m_wifi_cb+0x268>
    6cce:	e6ff      	b.n	6ad0 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    6cd0:	4b0a      	ldr	r3, [pc, #40]	; (6cfc <m2m_wifi_cb+0x294>)
    6cd2:	681b      	ldr	r3, [r3, #0]
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	d100      	bne.n	6cda <m2m_wifi_cb+0x272>
    6cd8:	e6fa      	b.n	6ad0 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    6cda:	a903      	add	r1, sp, #12
    6cdc:	3020      	adds	r0, #32
    6cde:	4798      	blx	r3
    6ce0:	e6f6      	b.n	6ad0 <m2m_wifi_cb+0x68>
    6ce2:	46c0      	nop			; (mov r8, r8)
    6ce4:	00011b8c 	.word	0x00011b8c
    6ce8:	00011824 	.word	0x00011824
    6cec:	0000bb3d 	.word	0x0000bb3d
    6cf0:	00011bdc 	.word	0x00011bdc
    6cf4:	0000bb71 	.word	0x0000bb71
    6cf8:	000068c1 	.word	0x000068c1
    6cfc:	2000025c 	.word	0x2000025c
    6d00:	0000617d 	.word	0x0000617d
    6d04:	00011b54 	.word	0x00011b54
    6d08:	00011bbc 	.word	0x00011bbc
    6d0c:	20000261 	.word	0x20000261
    6d10:	20000260 	.word	0x20000260

00006d14 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    6d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d16:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    6d18:	2201      	movs	r2, #1
    6d1a:	230f      	movs	r3, #15
    6d1c:	446b      	add	r3, sp
    6d1e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    6d20:	2800      	cmp	r0, #0
    6d22:	d061      	beq.n	6de8 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    6d24:	6802      	ldr	r2, [r0, #0]
    6d26:	4b32      	ldr	r3, [pc, #200]	; (6df0 <m2m_wifi_init+0xdc>)
    6d28:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    6d2a:	2200      	movs	r2, #0
    6d2c:	4b31      	ldr	r3, [pc, #196]	; (6df4 <m2m_wifi_init+0xe0>)
    6d2e:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    6d30:	200f      	movs	r0, #15
    6d32:	4468      	add	r0, sp
    6d34:	4b30      	ldr	r3, [pc, #192]	; (6df8 <m2m_wifi_init+0xe4>)
    6d36:	4798      	blx	r3
    6d38:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    6d3a:	d002      	beq.n	6d42 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    6d3c:	0020      	movs	r0, r4
    6d3e:	b00f      	add	sp, #60	; 0x3c
    6d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    6d42:	2000      	movs	r0, #0
    6d44:	4b2d      	ldr	r3, [pc, #180]	; (6dfc <m2m_wifi_init+0xe8>)
    6d46:	4798      	blx	r3
    6d48:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    6d4a:	d149      	bne.n	6de0 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    6d4c:	492c      	ldr	r1, [pc, #176]	; (6e00 <m2m_wifi_init+0xec>)
    6d4e:	2001      	movs	r0, #1
    6d50:	4b2c      	ldr	r3, [pc, #176]	; (6e04 <m2m_wifi_init+0xf0>)
    6d52:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    6d54:	ae04      	add	r6, sp, #16
    6d56:	0030      	movs	r0, r6
    6d58:	4b2b      	ldr	r3, [pc, #172]	; (6e08 <m2m_wifi_init+0xf4>)
    6d5a:	4798      	blx	r3
    6d5c:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    6d5e:	482b      	ldr	r0, [pc, #172]	; (6e0c <m2m_wifi_init+0xf8>)
    6d60:	4d2b      	ldr	r5, [pc, #172]	; (6e10 <m2m_wifi_init+0xfc>)
    6d62:	47a8      	blx	r5
    6d64:	79b3      	ldrb	r3, [r6, #6]
    6d66:	7972      	ldrb	r2, [r6, #5]
    6d68:	7931      	ldrb	r1, [r6, #4]
    6d6a:	8c30      	ldrh	r0, [r6, #32]
    6d6c:	9000      	str	r0, [sp, #0]
    6d6e:	4829      	ldr	r0, [pc, #164]	; (6e14 <m2m_wifi_init+0x100>)
    6d70:	47a8      	blx	r5
    6d72:	200d      	movs	r0, #13
    6d74:	4f28      	ldr	r7, [pc, #160]	; (6e18 <m2m_wifi_init+0x104>)
    6d76:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    6d78:	4824      	ldr	r0, [pc, #144]	; (6e0c <m2m_wifi_init+0xf8>)
    6d7a:	47a8      	blx	r5
    6d7c:	2226      	movs	r2, #38	; 0x26
    6d7e:	446a      	add	r2, sp
    6d80:	211a      	movs	r1, #26
    6d82:	4469      	add	r1, sp
    6d84:	4825      	ldr	r0, [pc, #148]	; (6e1c <m2m_wifi_init+0x108>)
    6d86:	47a8      	blx	r5
    6d88:	200d      	movs	r0, #13
    6d8a:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    6d8c:	481f      	ldr	r0, [pc, #124]	; (6e0c <m2m_wifi_init+0xf8>)
    6d8e:	47a8      	blx	r5
    6d90:	7a73      	ldrb	r3, [r6, #9]
    6d92:	7a32      	ldrb	r2, [r6, #8]
    6d94:	79f1      	ldrb	r1, [r6, #7]
    6d96:	4822      	ldr	r0, [pc, #136]	; (6e20 <m2m_wifi_init+0x10c>)
    6d98:	47a8      	blx	r5
    6d9a:	200d      	movs	r0, #13
    6d9c:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    6d9e:	481b      	ldr	r0, [pc, #108]	; (6e0c <m2m_wifi_init+0xf8>)
    6da0:	47a8      	blx	r5
    6da2:	2302      	movs	r3, #2
    6da4:	2205      	movs	r2, #5
    6da6:	2113      	movs	r1, #19
    6da8:	481e      	ldr	r0, [pc, #120]	; (6e24 <m2m_wifi_init+0x110>)
    6daa:	47a8      	blx	r5
    6dac:	200d      	movs	r0, #13
    6dae:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    6db0:	4816      	ldr	r0, [pc, #88]	; (6e0c <m2m_wifi_init+0xf8>)
    6db2:	47a8      	blx	r5
    6db4:	4a1c      	ldr	r2, [pc, #112]	; (6e28 <m2m_wifi_init+0x114>)
    6db6:	491d      	ldr	r1, [pc, #116]	; (6e2c <m2m_wifi_init+0x118>)
    6db8:	481d      	ldr	r0, [pc, #116]	; (6e30 <m2m_wifi_init+0x11c>)
    6dba:	47a8      	blx	r5
    6dbc:	200d      	movs	r0, #13
    6dbe:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    6dc0:	0023      	movs	r3, r4
    6dc2:	330d      	adds	r3, #13
    6dc4:	d1ba      	bne.n	6d3c <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    6dc6:	22ee      	movs	r2, #238	; 0xee
    6dc8:	32ff      	adds	r2, #255	; 0xff
    6dca:	491a      	ldr	r1, [pc, #104]	; (6e34 <m2m_wifi_init+0x120>)
    6dcc:	481a      	ldr	r0, [pc, #104]	; (6e38 <m2m_wifi_init+0x124>)
    6dce:	4b10      	ldr	r3, [pc, #64]	; (6e10 <m2m_wifi_init+0xfc>)
    6dd0:	4798      	blx	r3
    6dd2:	481a      	ldr	r0, [pc, #104]	; (6e3c <m2m_wifi_init+0x128>)
    6dd4:	4b1a      	ldr	r3, [pc, #104]	; (6e40 <m2m_wifi_init+0x12c>)
    6dd6:	4798      	blx	r3
    6dd8:	200d      	movs	r0, #13
    6dda:	4b0f      	ldr	r3, [pc, #60]	; (6e18 <m2m_wifi_init+0x104>)
    6ddc:	4798      	blx	r3
    6dde:	e7ad      	b.n	6d3c <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    6de0:	2000      	movs	r0, #0
    6de2:	4b18      	ldr	r3, [pc, #96]	; (6e44 <m2m_wifi_init+0x130>)
    6de4:	4798      	blx	r3
    6de6:	e7a9      	b.n	6d3c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    6de8:	240c      	movs	r4, #12
    6dea:	4264      	negs	r4, r4
    6dec:	e7a6      	b.n	6d3c <m2m_wifi_init+0x28>
    6dee:	46c0      	nop			; (mov r8, r8)
    6df0:	2000025c 	.word	0x2000025c
    6df4:	20000261 	.word	0x20000261
    6df8:	000077d1 	.word	0x000077d1
    6dfc:	00006a31 	.word	0x00006a31
    6e00:	00006a69 	.word	0x00006a69
    6e04:	000069ad 	.word	0x000069ad
    6e08:	000076ed 	.word	0x000076ed
    6e0c:	00011b54 	.word	0x00011b54
    6e10:	0000bb3d 	.word	0x0000bb3d
    6e14:	00011c98 	.word	0x00011c98
    6e18:	0000bb71 	.word	0x0000bb71
    6e1c:	00011cc0 	.word	0x00011cc0
    6e20:	00011cdc 	.word	0x00011cdc
    6e24:	00011d00 	.word	0x00011d00
    6e28:	00011d18 	.word	0x00011d18
    6e2c:	00011d24 	.word	0x00011d24
    6e30:	00011d30 	.word	0x00011d30
    6e34:	00011b98 	.word	0x00011b98
    6e38:	00011824 	.word	0x00011824
    6e3c:	00011d48 	.word	0x00011d48
    6e40:	0000bc59 	.word	0x0000bc59
    6e44:	000078a5 	.word	0x000078a5

00006e48 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    6e48:	b510      	push	{r4, lr}

	hif_deinit(NULL);
    6e4a:	2000      	movs	r0, #0
    6e4c:	4b03      	ldr	r3, [pc, #12]	; (6e5c <m2m_wifi_deinit+0x14>)
    6e4e:	4798      	blx	r3

	nm_drv_deinit(NULL);
    6e50:	2000      	movs	r0, #0
    6e52:	4b03      	ldr	r3, [pc, #12]	; (6e60 <m2m_wifi_deinit+0x18>)
    6e54:	4798      	blx	r3

	return M2M_SUCCESS;
}
    6e56:	2000      	movs	r0, #0
    6e58:	bd10      	pop	{r4, pc}
    6e5a:	46c0      	nop			; (mov r8, r8)
    6e5c:	00006291 	.word	0x00006291
    6e60:	000078a5 	.word	0x000078a5

00006e64 <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    6e64:	b510      	push	{r4, lr}
	return hif_handle_isr();
    6e66:	4b01      	ldr	r3, [pc, #4]	; (6e6c <m2m_wifi_handle_events+0x8>)
    6e68:	4798      	blx	r3
}
    6e6a:	bd10      	pop	{r4, pc}
    6e6c:	000064e5 	.word	0x000064e5

00006e70 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    6e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e72:	46ce      	mov	lr, r9
    6e74:	4647      	mov	r7, r8
    6e76:	b580      	push	{r7, lr}
    6e78:	b0a3      	sub	sp, #140	; 0x8c
    6e7a:	9005      	str	r0, [sp, #20]
    6e7c:	000c      	movs	r4, r1
    6e7e:	0015      	movs	r5, r2
    6e80:	001f      	movs	r7, r3
    6e82:	ab2a      	add	r3, sp, #168	; 0xa8
    6e84:	881b      	ldrh	r3, [r3, #0]
    6e86:	4699      	mov	r9, r3
    6e88:	ab2b      	add	r3, sp, #172	; 0xac
    6e8a:	781b      	ldrb	r3, [r3, #0]
    6e8c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    6e8e:	2a01      	cmp	r2, #1
    6e90:	d003      	beq.n	6e9a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    6e92:	2f00      	cmp	r7, #0
    6e94:	d040      	beq.n	6f18 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    6e96:	2a02      	cmp	r2, #2
    6e98:	d04c      	beq.n	6f34 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    6e9a:	1e63      	subs	r3, r4, #1
    6e9c:	2b1f      	cmp	r3, #31
    6e9e:	d900      	bls.n	6ea2 <m2m_wifi_connect_sc+0x32>
    6ea0:	e078      	b.n	6f94 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    6ea2:	464b      	mov	r3, r9
    6ea4:	3b01      	subs	r3, #1
    6ea6:	b29b      	uxth	r3, r3
    6ea8:	2b0d      	cmp	r3, #13
    6eaa:	d903      	bls.n	6eb4 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    6eac:	464b      	mov	r3, r9
    6eae:	2bff      	cmp	r3, #255	; 0xff
    6eb0:	d000      	beq.n	6eb4 <m2m_wifi_connect_sc+0x44>
    6eb2:	e07d      	b.n	6fb0 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    6eb4:	ae07      	add	r6, sp, #28
    6eb6:	0022      	movs	r2, r4
    6eb8:	9905      	ldr	r1, [sp, #20]
    6eba:	205a      	movs	r0, #90	; 0x5a
    6ebc:	ab02      	add	r3, sp, #8
    6ebe:	469c      	mov	ip, r3
    6ec0:	4460      	add	r0, ip
    6ec2:	4b78      	ldr	r3, [pc, #480]	; (70a4 <m2m_wifi_connect_sc+0x234>)
    6ec4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    6ec6:	1934      	adds	r4, r6, r4
    6ec8:	3446      	adds	r4, #70	; 0x46
    6eca:	2300      	movs	r3, #0
    6ecc:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    6ece:	3344      	adds	r3, #68	; 0x44
    6ed0:	464a      	mov	r2, r9
    6ed2:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    6ed4:	4643      	mov	r3, r8
    6ed6:	1e5a      	subs	r2, r3, #1
    6ed8:	4193      	sbcs	r3, r2
    6eda:	2267      	movs	r2, #103	; 0x67
    6edc:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    6ede:	2341      	movs	r3, #65	; 0x41
    6ee0:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    6ee2:	2d03      	cmp	r5, #3
    6ee4:	d100      	bne.n	6ee8 <m2m_wifi_connect_sc+0x78>
    6ee6:	e071      	b.n	6fcc <m2m_wifi_connect_sc+0x15c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    6ee8:	2d02      	cmp	r5, #2
    6eea:	d100      	bne.n	6eee <m2m_wifi_connect_sc+0x7e>
    6eec:	e0ab      	b.n	7046 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    6eee:	2d04      	cmp	r5, #4
    6ef0:	d100      	bne.n	6ef4 <m2m_wifi_connect_sc+0x84>
    6ef2:	e0c3      	b.n	707c <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    6ef4:	2d01      	cmp	r5, #1
    6ef6:	d000      	beq.n	6efa <m2m_wifi_connect_sc+0x8a>
    6ef8:	e0c6      	b.n	7088 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    6efa:	2300      	movs	r3, #0
    6efc:	9302      	str	r3, [sp, #8]
    6efe:	9301      	str	r3, [sp, #4]
    6f00:	9300      	str	r3, [sp, #0]
    6f02:	336c      	adds	r3, #108	; 0x6c
    6f04:	aa07      	add	r2, sp, #28
    6f06:	2128      	movs	r1, #40	; 0x28
    6f08:	2001      	movs	r0, #1
    6f0a:	4c67      	ldr	r4, [pc, #412]	; (70a8 <m2m_wifi_connect_sc+0x238>)
    6f0c:	47a0      	blx	r4

ERR1:
	return ret;
}
    6f0e:	b023      	add	sp, #140	; 0x8c
    6f10:	bc0c      	pop	{r2, r3}
    6f12:	4690      	mov	r8, r2
    6f14:	4699      	mov	r9, r3
    6f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    6f18:	4a64      	ldr	r2, [pc, #400]	; (70ac <m2m_wifi_connect_sc+0x23c>)
    6f1a:	4965      	ldr	r1, [pc, #404]	; (70b0 <m2m_wifi_connect_sc+0x240>)
    6f1c:	4865      	ldr	r0, [pc, #404]	; (70b4 <m2m_wifi_connect_sc+0x244>)
    6f1e:	4b66      	ldr	r3, [pc, #408]	; (70b8 <m2m_wifi_connect_sc+0x248>)
    6f20:	4798      	blx	r3
    6f22:	4866      	ldr	r0, [pc, #408]	; (70bc <m2m_wifi_connect_sc+0x24c>)
    6f24:	4b66      	ldr	r3, [pc, #408]	; (70c0 <m2m_wifi_connect_sc+0x250>)
    6f26:	4798      	blx	r3
    6f28:	200d      	movs	r0, #13
    6f2a:	4b66      	ldr	r3, [pc, #408]	; (70c4 <m2m_wifi_connect_sc+0x254>)
    6f2c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6f2e:	200c      	movs	r0, #12
    6f30:	4240      	negs	r0, r0
			goto ERR1;
    6f32:	e7ec      	b.n	6f0e <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    6f34:	0038      	movs	r0, r7
    6f36:	4b64      	ldr	r3, [pc, #400]	; (70c8 <m2m_wifi_connect_sc+0x258>)
    6f38:	4798      	blx	r3
    6f3a:	2840      	cmp	r0, #64	; 0x40
    6f3c:	d1ad      	bne.n	6e9a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    6f3e:	783b      	ldrb	r3, [r7, #0]
    6f40:	001a      	movs	r2, r3
    6f42:	3a30      	subs	r2, #48	; 0x30
    6f44:	2a36      	cmp	r2, #54	; 0x36
    6f46:	d817      	bhi.n	6f78 <m2m_wifi_connect_sc+0x108>
    6f48:	3a0a      	subs	r2, #10
    6f4a:	2a06      	cmp	r2, #6
    6f4c:	d914      	bls.n	6f78 <m2m_wifi_connect_sc+0x108>
    6f4e:	3b47      	subs	r3, #71	; 0x47
    6f50:	2b19      	cmp	r3, #25
    6f52:	d911      	bls.n	6f78 <m2m_wifi_connect_sc+0x108>
    6f54:	1c7a      	adds	r2, r7, #1
    6f56:	0038      	movs	r0, r7
    6f58:	3040      	adds	r0, #64	; 0x40
    6f5a:	7813      	ldrb	r3, [r2, #0]
    6f5c:	0019      	movs	r1, r3
    6f5e:	3930      	subs	r1, #48	; 0x30
    6f60:	2936      	cmp	r1, #54	; 0x36
    6f62:	d809      	bhi.n	6f78 <m2m_wifi_connect_sc+0x108>
    6f64:	390a      	subs	r1, #10
    6f66:	2906      	cmp	r1, #6
    6f68:	d906      	bls.n	6f78 <m2m_wifi_connect_sc+0x108>
    6f6a:	3b47      	subs	r3, #71	; 0x47
    6f6c:	2b19      	cmp	r3, #25
    6f6e:	d903      	bls.n	6f78 <m2m_wifi_connect_sc+0x108>
    6f70:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    6f72:	4282      	cmp	r2, r0
    6f74:	d1f1      	bne.n	6f5a <m2m_wifi_connect_sc+0xea>
    6f76:	e790      	b.n	6e9a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    6f78:	4a54      	ldr	r2, [pc, #336]	; (70cc <m2m_wifi_connect_sc+0x25c>)
    6f7a:	494d      	ldr	r1, [pc, #308]	; (70b0 <m2m_wifi_connect_sc+0x240>)
    6f7c:	484d      	ldr	r0, [pc, #308]	; (70b4 <m2m_wifi_connect_sc+0x244>)
    6f7e:	4b4e      	ldr	r3, [pc, #312]	; (70b8 <m2m_wifi_connect_sc+0x248>)
    6f80:	4798      	blx	r3
    6f82:	4853      	ldr	r0, [pc, #332]	; (70d0 <m2m_wifi_connect_sc+0x260>)
    6f84:	4b4e      	ldr	r3, [pc, #312]	; (70c0 <m2m_wifi_connect_sc+0x250>)
    6f86:	4798      	blx	r3
    6f88:	200d      	movs	r0, #13
    6f8a:	4b4e      	ldr	r3, [pc, #312]	; (70c4 <m2m_wifi_connect_sc+0x254>)
    6f8c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    6f8e:	200c      	movs	r0, #12
    6f90:	4240      	negs	r0, r0
					goto ERR1;
    6f92:	e7bc      	b.n	6f0e <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    6f94:	4a4f      	ldr	r2, [pc, #316]	; (70d4 <m2m_wifi_connect_sc+0x264>)
    6f96:	4946      	ldr	r1, [pc, #280]	; (70b0 <m2m_wifi_connect_sc+0x240>)
    6f98:	4846      	ldr	r0, [pc, #280]	; (70b4 <m2m_wifi_connect_sc+0x244>)
    6f9a:	4b47      	ldr	r3, [pc, #284]	; (70b8 <m2m_wifi_connect_sc+0x248>)
    6f9c:	4798      	blx	r3
    6f9e:	484e      	ldr	r0, [pc, #312]	; (70d8 <m2m_wifi_connect_sc+0x268>)
    6fa0:	4b47      	ldr	r3, [pc, #284]	; (70c0 <m2m_wifi_connect_sc+0x250>)
    6fa2:	4798      	blx	r3
    6fa4:	200d      	movs	r0, #13
    6fa6:	4b47      	ldr	r3, [pc, #284]	; (70c4 <m2m_wifi_connect_sc+0x254>)
    6fa8:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    6faa:	200c      	movs	r0, #12
    6fac:	4240      	negs	r0, r0
		goto ERR1;
    6fae:	e7ae      	b.n	6f0e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    6fb0:	4a4a      	ldr	r2, [pc, #296]	; (70dc <m2m_wifi_connect_sc+0x26c>)
    6fb2:	493f      	ldr	r1, [pc, #252]	; (70b0 <m2m_wifi_connect_sc+0x240>)
    6fb4:	483f      	ldr	r0, [pc, #252]	; (70b4 <m2m_wifi_connect_sc+0x244>)
    6fb6:	4b40      	ldr	r3, [pc, #256]	; (70b8 <m2m_wifi_connect_sc+0x248>)
    6fb8:	4798      	blx	r3
    6fba:	4849      	ldr	r0, [pc, #292]	; (70e0 <m2m_wifi_connect_sc+0x270>)
    6fbc:	4b40      	ldr	r3, [pc, #256]	; (70c0 <m2m_wifi_connect_sc+0x250>)
    6fbe:	4798      	blx	r3
    6fc0:	200d      	movs	r0, #13
    6fc2:	4b40      	ldr	r3, [pc, #256]	; (70c4 <m2m_wifi_connect_sc+0x254>)
    6fc4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6fc6:	200c      	movs	r0, #12
    6fc8:	4240      	negs	r0, r0
			goto ERR1;
    6fca:	e7a0      	b.n	6f0e <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    6fcc:	783b      	ldrb	r3, [r7, #0]
    6fce:	3b01      	subs	r3, #1
    6fd0:	b2db      	uxtb	r3, r3
    6fd2:	aa07      	add	r2, sp, #28
    6fd4:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    6fd6:	2b03      	cmp	r3, #3
    6fd8:	d818      	bhi.n	700c <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    6fda:	787a      	ldrb	r2, [r7, #1]
    6fdc:	1e51      	subs	r1, r2, #1
    6fde:	ab07      	add	r3, sp, #28
    6fe0:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    6fe2:	2310      	movs	r3, #16
    6fe4:	0011      	movs	r1, r2
    6fe6:	4399      	bics	r1, r3
    6fe8:	290b      	cmp	r1, #11
    6fea:	d01e      	beq.n	702a <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    6fec:	2296      	movs	r2, #150	; 0x96
    6fee:	0092      	lsls	r2, r2, #2
    6ff0:	492f      	ldr	r1, [pc, #188]	; (70b0 <m2m_wifi_connect_sc+0x240>)
    6ff2:	4830      	ldr	r0, [pc, #192]	; (70b4 <m2m_wifi_connect_sc+0x244>)
    6ff4:	4c30      	ldr	r4, [pc, #192]	; (70b8 <m2m_wifi_connect_sc+0x248>)
    6ff6:	47a0      	blx	r4
    6ff8:	ab07      	add	r3, sp, #28
    6ffa:	7859      	ldrb	r1, [r3, #1]
    6ffc:	4839      	ldr	r0, [pc, #228]	; (70e4 <m2m_wifi_connect_sc+0x274>)
    6ffe:	47a0      	blx	r4
    7000:	200d      	movs	r0, #13
    7002:	4b30      	ldr	r3, [pc, #192]	; (70c4 <m2m_wifi_connect_sc+0x254>)
    7004:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7006:	200c      	movs	r0, #12
    7008:	4240      	negs	r0, r0
			goto ERR1;
    700a:	e780      	b.n	6f0e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    700c:	4a36      	ldr	r2, [pc, #216]	; (70e8 <m2m_wifi_connect_sc+0x278>)
    700e:	4928      	ldr	r1, [pc, #160]	; (70b0 <m2m_wifi_connect_sc+0x240>)
    7010:	4828      	ldr	r0, [pc, #160]	; (70b4 <m2m_wifi_connect_sc+0x244>)
    7012:	4c29      	ldr	r4, [pc, #164]	; (70b8 <m2m_wifi_connect_sc+0x248>)
    7014:	47a0      	blx	r4
    7016:	ab07      	add	r3, sp, #28
    7018:	7819      	ldrb	r1, [r3, #0]
    701a:	4834      	ldr	r0, [pc, #208]	; (70ec <m2m_wifi_connect_sc+0x27c>)
    701c:	47a0      	blx	r4
    701e:	200d      	movs	r0, #13
    7020:	4b28      	ldr	r3, [pc, #160]	; (70c4 <m2m_wifi_connect_sc+0x254>)
    7022:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7024:	200c      	movs	r0, #12
    7026:	4240      	negs	r0, r0
			goto ERR1;
    7028:	e771      	b.n	6f0e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    702a:	1cb9      	adds	r1, r7, #2
    702c:	2016      	movs	r0, #22
    702e:	ab02      	add	r3, sp, #8
    7030:	469c      	mov	ip, r3
    7032:	4460      	add	r0, ip
    7034:	4b1b      	ldr	r3, [pc, #108]	; (70a4 <m2m_wifi_connect_sc+0x234>)
    7036:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    7038:	787b      	ldrb	r3, [r7, #1]
    703a:	aa07      	add	r2, sp, #28
    703c:	4694      	mov	ip, r2
    703e:	4463      	add	r3, ip
    7040:	2200      	movs	r2, #0
    7042:	709a      	strb	r2, [r3, #2]
    7044:	e759      	b.n	6efa <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    7046:	0038      	movs	r0, r7
    7048:	4b1f      	ldr	r3, [pc, #124]	; (70c8 <m2m_wifi_connect_sc+0x258>)
    704a:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    704c:	1e43      	subs	r3, r0, #1
    704e:	b29b      	uxth	r3, r3
    7050:	2b3f      	cmp	r3, #63	; 0x3f
    7052:	d805      	bhi.n	7060 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    7054:	1c42      	adds	r2, r0, #1
    7056:	0039      	movs	r1, r7
    7058:	a807      	add	r0, sp, #28
    705a:	4b12      	ldr	r3, [pc, #72]	; (70a4 <m2m_wifi_connect_sc+0x234>)
    705c:	4798      	blx	r3
    705e:	e74c      	b.n	6efa <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    7060:	4a23      	ldr	r2, [pc, #140]	; (70f0 <m2m_wifi_connect_sc+0x280>)
    7062:	4913      	ldr	r1, [pc, #76]	; (70b0 <m2m_wifi_connect_sc+0x240>)
    7064:	4813      	ldr	r0, [pc, #76]	; (70b4 <m2m_wifi_connect_sc+0x244>)
    7066:	4b14      	ldr	r3, [pc, #80]	; (70b8 <m2m_wifi_connect_sc+0x248>)
    7068:	4798      	blx	r3
    706a:	4822      	ldr	r0, [pc, #136]	; (70f4 <m2m_wifi_connect_sc+0x284>)
    706c:	4b14      	ldr	r3, [pc, #80]	; (70c0 <m2m_wifi_connect_sc+0x250>)
    706e:	4798      	blx	r3
    7070:	200d      	movs	r0, #13
    7072:	4b14      	ldr	r3, [pc, #80]	; (70c4 <m2m_wifi_connect_sc+0x254>)
    7074:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7076:	200c      	movs	r0, #12
    7078:	4240      	negs	r0, r0
			goto ERR1;
    707a:	e748      	b.n	6f0e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    707c:	223e      	movs	r2, #62	; 0x3e
    707e:	0039      	movs	r1, r7
    7080:	a807      	add	r0, sp, #28
    7082:	4b08      	ldr	r3, [pc, #32]	; (70a4 <m2m_wifi_connect_sc+0x234>)
    7084:	4798      	blx	r3
    7086:	e738      	b.n	6efa <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    7088:	4a1b      	ldr	r2, [pc, #108]	; (70f8 <m2m_wifi_connect_sc+0x288>)
    708a:	4909      	ldr	r1, [pc, #36]	; (70b0 <m2m_wifi_connect_sc+0x240>)
    708c:	4809      	ldr	r0, [pc, #36]	; (70b4 <m2m_wifi_connect_sc+0x244>)
    708e:	4b0a      	ldr	r3, [pc, #40]	; (70b8 <m2m_wifi_connect_sc+0x248>)
    7090:	4798      	blx	r3
    7092:	481a      	ldr	r0, [pc, #104]	; (70fc <m2m_wifi_connect_sc+0x28c>)
    7094:	4b0a      	ldr	r3, [pc, #40]	; (70c0 <m2m_wifi_connect_sc+0x250>)
    7096:	4798      	blx	r3
    7098:	200d      	movs	r0, #13
    709a:	4b0a      	ldr	r3, [pc, #40]	; (70c4 <m2m_wifi_connect_sc+0x254>)
    709c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    709e:	200c      	movs	r0, #12
    70a0:	4240      	negs	r0, r0
		goto ERR1;
    70a2:	e734      	b.n	6f0e <m2m_wifi_connect_sc+0x9e>
    70a4:	00006169 	.word	0x00006169
    70a8:	000062b5 	.word	0x000062b5
    70ac:	0000021b 	.word	0x0000021b
    70b0:	00011ba8 	.word	0x00011ba8
    70b4:	00011824 	.word	0x00011824
    70b8:	0000bb3d 	.word	0x0000bb3d
    70bc:	00011bf0 	.word	0x00011bf0
    70c0:	0000bc59 	.word	0x0000bc59
    70c4:	0000bb71 	.word	0x0000bb71
    70c8:	0000618d 	.word	0x0000618d
    70cc:	00000227 	.word	0x00000227
    70d0:	00011c04 	.word	0x00011c04
    70d4:	00000231 	.word	0x00000231
    70d8:	00011c10 	.word	0x00011c10
    70dc:	0000023a 	.word	0x0000023a
    70e0:	00011c24 	.word	0x00011c24
    70e4:	00011c4c 	.word	0x00011c4c
    70e8:	00000251 	.word	0x00000251
    70ec:	00011c30 	.word	0x00011c30
    70f0:	00000267 	.word	0x00000267
    70f4:	00011c68 	.word	0x00011c68
    70f8:	00000277 	.word	0x00000277
    70fc:	00011c84 	.word	0x00011c84

00007100 <m2m_wifi_connect>:
{
    7100:	b530      	push	{r4, r5, lr}
    7102:	b083      	sub	sp, #12
    7104:	ac06      	add	r4, sp, #24
    7106:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    7108:	2500      	movs	r5, #0
    710a:	9501      	str	r5, [sp, #4]
    710c:	9400      	str	r4, [sp, #0]
    710e:	4c02      	ldr	r4, [pc, #8]	; (7118 <m2m_wifi_connect+0x18>)
    7110:	47a0      	blx	r4
}
    7112:	b003      	add	sp, #12
    7114:	bd30      	pop	{r4, r5, pc}
    7116:	46c0      	nop			; (mov r8, r8)
    7118:	00006e71 	.word	0x00006e71

0000711c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    711c:	2000      	movs	r0, #0
    711e:	4770      	bx	lr

00007120 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    7120:	b5f0      	push	{r4, r5, r6, r7, lr}
    7122:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    7124:	2580      	movs	r5, #128	; 0x80
    7126:	006d      	lsls	r5, r5, #1
    7128:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    712a:	24a5      	movs	r4, #165	; 0xa5
    712c:	0164      	lsls	r4, r4, #5
    712e:	4f08      	ldr	r7, [pc, #32]	; (7150 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    7130:	4e08      	ldr	r6, [pc, #32]	; (7154 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    7132:	0029      	movs	r1, r5
    7134:	0020      	movs	r0, r4
    7136:	47b8      	blx	r7
			uint32 reg = 0;
    7138:	2300      	movs	r3, #0
    713a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    713c:	a901      	add	r1, sp, #4
    713e:	0020      	movs	r0, r4
    7140:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    7142:	2800      	cmp	r0, #0
    7144:	d1f5      	bne.n	7132 <chip_apply_conf+0x12>
				if(reg == val32)
    7146:	9b01      	ldr	r3, [sp, #4]
    7148:	429d      	cmp	r5, r3
    714a:	d1f2      	bne.n	7132 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    714c:	b003      	add	sp, #12
    714e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7150:	00007611 	.word	0x00007611
    7154:	00007605 	.word	0x00007605

00007158 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    7158:	b500      	push	{lr}
    715a:	b083      	sub	sp, #12
	uint32 reg = 0;
    715c:	2300      	movs	r3, #0
    715e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    7160:	a901      	add	r1, sp, #4
    7162:	4811      	ldr	r0, [pc, #68]	; (71a8 <enable_interrupts+0x50>)
    7164:	4b11      	ldr	r3, [pc, #68]	; (71ac <enable_interrupts+0x54>)
    7166:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    7168:	2800      	cmp	r0, #0
    716a:	d001      	beq.n	7170 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    716c:	b003      	add	sp, #12
    716e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    7170:	2180      	movs	r1, #128	; 0x80
    7172:	0049      	lsls	r1, r1, #1
    7174:	9b01      	ldr	r3, [sp, #4]
    7176:	4319      	orrs	r1, r3
    7178:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    717a:	480b      	ldr	r0, [pc, #44]	; (71a8 <enable_interrupts+0x50>)
    717c:	4b0c      	ldr	r3, [pc, #48]	; (71b0 <enable_interrupts+0x58>)
    717e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    7180:	2800      	cmp	r0, #0
    7182:	d1f3      	bne.n	716c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    7184:	a901      	add	r1, sp, #4
    7186:	20d0      	movs	r0, #208	; 0xd0
    7188:	0140      	lsls	r0, r0, #5
    718a:	4b08      	ldr	r3, [pc, #32]	; (71ac <enable_interrupts+0x54>)
    718c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    718e:	2800      	cmp	r0, #0
    7190:	d1ec      	bne.n	716c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    7192:	2180      	movs	r1, #128	; 0x80
    7194:	0249      	lsls	r1, r1, #9
    7196:	9b01      	ldr	r3, [sp, #4]
    7198:	4319      	orrs	r1, r3
    719a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    719c:	20d0      	movs	r0, #208	; 0xd0
    719e:	0140      	lsls	r0, r0, #5
    71a0:	4b03      	ldr	r3, [pc, #12]	; (71b0 <enable_interrupts+0x58>)
    71a2:	4798      	blx	r3
    71a4:	e7e2      	b.n	716c <enable_interrupts+0x14>
    71a6:	46c0      	nop			; (mov r8, r8)
    71a8:	00001408 	.word	0x00001408
    71ac:	00007605 	.word	0x00007605
    71b0:	00007611 	.word	0x00007611

000071b4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    71b4:	b510      	push	{r4, lr}
    71b6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    71b8:	4b28      	ldr	r3, [pc, #160]	; (725c <nmi_get_chipid+0xa8>)
    71ba:	681c      	ldr	r4, [r3, #0]
    71bc:	2c00      	cmp	r4, #0
    71be:	d004      	beq.n	71ca <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    71c0:	4b26      	ldr	r3, [pc, #152]	; (725c <nmi_get_chipid+0xa8>)
    71c2:	681c      	ldr	r4, [r3, #0]
}
    71c4:	0020      	movs	r0, r4
    71c6:	b002      	add	sp, #8
    71c8:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    71ca:	0019      	movs	r1, r3
    71cc:	2080      	movs	r0, #128	; 0x80
    71ce:	0140      	lsls	r0, r0, #5
    71d0:	4b23      	ldr	r3, [pc, #140]	; (7260 <nmi_get_chipid+0xac>)
    71d2:	4798      	blx	r3
    71d4:	2800      	cmp	r0, #0
    71d6:	d003      	beq.n	71e0 <nmi_get_chipid+0x2c>
			chipid = 0;
    71d8:	2200      	movs	r2, #0
    71da:	4b20      	ldr	r3, [pc, #128]	; (725c <nmi_get_chipid+0xa8>)
    71dc:	601a      	str	r2, [r3, #0]
			return 0;
    71de:	e7f1      	b.n	71c4 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    71e0:	a901      	add	r1, sp, #4
    71e2:	4820      	ldr	r0, [pc, #128]	; (7264 <nmi_get_chipid+0xb0>)
    71e4:	4b1e      	ldr	r3, [pc, #120]	; (7260 <nmi_get_chipid+0xac>)
    71e6:	4798      	blx	r3
    71e8:	2800      	cmp	r0, #0
    71ea:	d003      	beq.n	71f4 <nmi_get_chipid+0x40>
			chipid = 0;
    71ec:	2200      	movs	r2, #0
    71ee:	4b1b      	ldr	r3, [pc, #108]	; (725c <nmi_get_chipid+0xa8>)
    71f0:	601a      	str	r2, [r3, #0]
			return 0;
    71f2:	e7e7      	b.n	71c4 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    71f4:	4b19      	ldr	r3, [pc, #100]	; (725c <nmi_get_chipid+0xa8>)
    71f6:	681b      	ldr	r3, [r3, #0]
    71f8:	4a1b      	ldr	r2, [pc, #108]	; (7268 <nmi_get_chipid+0xb4>)
    71fa:	4293      	cmp	r3, r2
    71fc:	d00e      	beq.n	721c <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    71fe:	4a1b      	ldr	r2, [pc, #108]	; (726c <nmi_get_chipid+0xb8>)
    7200:	4293      	cmp	r3, r2
    7202:	d012      	beq.n	722a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    7204:	4a1a      	ldr	r2, [pc, #104]	; (7270 <nmi_get_chipid+0xbc>)
    7206:	4293      	cmp	r3, r2
    7208:	d01c      	beq.n	7244 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    720a:	4914      	ldr	r1, [pc, #80]	; (725c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    720c:	4a19      	ldr	r2, [pc, #100]	; (7274 <nmi_get_chipid+0xc0>)
    720e:	680b      	ldr	r3, [r1, #0]
    7210:	401a      	ands	r2, r3
		chipid |= 0x050000;
    7212:	23a0      	movs	r3, #160	; 0xa0
    7214:	02db      	lsls	r3, r3, #11
    7216:	4313      	orrs	r3, r2
    7218:	600b      	str	r3, [r1, #0]
    721a:	e7d1      	b.n	71c0 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    721c:	9b01      	ldr	r3, [sp, #4]
    721e:	2b01      	cmp	r3, #1
    7220:	d0f3      	beq.n	720a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    7222:	4a15      	ldr	r2, [pc, #84]	; (7278 <nmi_get_chipid+0xc4>)
    7224:	4b0d      	ldr	r3, [pc, #52]	; (725c <nmi_get_chipid+0xa8>)
    7226:	601a      	str	r2, [r3, #0]
    7228:	e7ef      	b.n	720a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    722a:	9b01      	ldr	r3, [sp, #4]
    722c:	2b03      	cmp	r3, #3
    722e:	d0ec      	beq.n	720a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    7230:	2b04      	cmp	r3, #4
    7232:	d003      	beq.n	723c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    7234:	4a11      	ldr	r2, [pc, #68]	; (727c <nmi_get_chipid+0xc8>)
    7236:	4b09      	ldr	r3, [pc, #36]	; (725c <nmi_get_chipid+0xa8>)
    7238:	601a      	str	r2, [r3, #0]
    723a:	e7e6      	b.n	720a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    723c:	4a10      	ldr	r2, [pc, #64]	; (7280 <nmi_get_chipid+0xcc>)
    723e:	4b07      	ldr	r3, [pc, #28]	; (725c <nmi_get_chipid+0xa8>)
    7240:	601a      	str	r2, [r3, #0]
    7242:	e7e2      	b.n	720a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    7244:	4905      	ldr	r1, [pc, #20]	; (725c <nmi_get_chipid+0xa8>)
    7246:	20ec      	movs	r0, #236	; 0xec
    7248:	0380      	lsls	r0, r0, #14
    724a:	4b05      	ldr	r3, [pc, #20]	; (7260 <nmi_get_chipid+0xac>)
    724c:	4798      	blx	r3
    724e:	2800      	cmp	r0, #0
    7250:	d0db      	beq.n	720a <nmi_get_chipid+0x56>
			chipid = 0;
    7252:	2200      	movs	r2, #0
    7254:	4b01      	ldr	r3, [pc, #4]	; (725c <nmi_get_chipid+0xa8>)
    7256:	601a      	str	r2, [r3, #0]
			return 0;
    7258:	e7b4      	b.n	71c4 <nmi_get_chipid+0x10>
    725a:	46c0      	nop			; (mov r8, r8)
    725c:	20000264 	.word	0x20000264
    7260:	00007605 	.word	0x00007605
    7264:	000013f4 	.word	0x000013f4
    7268:	001002a0 	.word	0x001002a0
    726c:	001002b0 	.word	0x001002b0
    7270:	001000f0 	.word	0x001000f0
    7274:	fff0ffff 	.word	0xfff0ffff
    7278:	001002a1 	.word	0x001002a1
    727c:	001002b2 	.word	0x001002b2
    7280:	001002b1 	.word	0x001002b1

00007284 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    7284:	b530      	push	{r4, r5, lr}
    7286:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    7288:	4c16      	ldr	r4, [pc, #88]	; (72e4 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    728a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    728c:	a901      	add	r1, sp, #4
    728e:	2010      	movs	r0, #16
    7290:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    7292:	2800      	cmp	r0, #0
    7294:	d11c      	bne.n	72d0 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    7296:	9b01      	ldr	r3, [sp, #4]
    7298:	422b      	tst	r3, r5
    729a:	d1f7      	bne.n	728c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    729c:	a901      	add	r1, sp, #4
    729e:	3001      	adds	r0, #1
    72a0:	4b10      	ldr	r3, [pc, #64]	; (72e4 <chip_sleep+0x60>)
    72a2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    72a4:	2800      	cmp	r0, #0
    72a6:	d113      	bne.n	72d0 <chip_sleep+0x4c>
	if(reg & NBIT1)
    72a8:	9901      	ldr	r1, [sp, #4]
    72aa:	078b      	lsls	r3, r1, #30
    72ac:	d507      	bpl.n	72be <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    72ae:	2302      	movs	r3, #2
    72b0:	4399      	bics	r1, r3
    72b2:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    72b4:	3001      	adds	r0, #1
    72b6:	4b0c      	ldr	r3, [pc, #48]	; (72e8 <chip_sleep+0x64>)
    72b8:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    72ba:	2800      	cmp	r0, #0
    72bc:	d108      	bne.n	72d0 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    72be:	a901      	add	r1, sp, #4
    72c0:	200b      	movs	r0, #11
    72c2:	4b08      	ldr	r3, [pc, #32]	; (72e4 <chip_sleep+0x60>)
    72c4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    72c6:	2800      	cmp	r0, #0
    72c8:	d102      	bne.n	72d0 <chip_sleep+0x4c>
	if(reg & NBIT0)
    72ca:	9901      	ldr	r1, [sp, #4]
    72cc:	07cb      	lsls	r3, r1, #31
    72ce:	d401      	bmi.n	72d4 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    72d0:	b003      	add	sp, #12
    72d2:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    72d4:	2301      	movs	r3, #1
    72d6:	4399      	bics	r1, r3
    72d8:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    72da:	300b      	adds	r0, #11
    72dc:	4b02      	ldr	r3, [pc, #8]	; (72e8 <chip_sleep+0x64>)
    72de:	4798      	blx	r3
    72e0:	e7f6      	b.n	72d0 <chip_sleep+0x4c>
    72e2:	46c0      	nop			; (mov r8, r8)
    72e4:	00007605 	.word	0x00007605
    72e8:	00007611 	.word	0x00007611

000072ec <chip_wake>:
sint8 chip_wake(void)
{
    72ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    72ee:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    72f0:	2300      	movs	r3, #0
    72f2:	9301      	str	r3, [sp, #4]
    72f4:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    72f6:	a901      	add	r1, sp, #4
    72f8:	200b      	movs	r0, #11
    72fa:	4b28      	ldr	r3, [pc, #160]	; (739c <chip_wake+0xb0>)
    72fc:	4798      	blx	r3
    72fe:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    7300:	d130      	bne.n	7364 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    7302:	9901      	ldr	r1, [sp, #4]
    7304:	07cb      	lsls	r3, r1, #31
    7306:	d406      	bmi.n	7316 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    7308:	2301      	movs	r3, #1
    730a:	4319      	orrs	r1, r3
    730c:	200b      	movs	r0, #11
    730e:	4b24      	ldr	r3, [pc, #144]	; (73a0 <chip_wake+0xb4>)
    7310:	4798      	blx	r3
    7312:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    7314:	d126      	bne.n	7364 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    7316:	a901      	add	r1, sp, #4
    7318:	2001      	movs	r0, #1
    731a:	4b20      	ldr	r3, [pc, #128]	; (739c <chip_wake+0xb0>)
    731c:	4798      	blx	r3
    731e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    7320:	d120      	bne.n	7364 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    7322:	9901      	ldr	r1, [sp, #4]
    7324:	078b      	lsls	r3, r1, #30
    7326:	d520      	bpl.n	736a <chip_wake+0x7e>
{
    7328:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    732a:	4f1c      	ldr	r7, [pc, #112]	; (739c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    732c:	4e1d      	ldr	r6, [pc, #116]	; (73a4 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    732e:	4669      	mov	r1, sp
    7330:	200f      	movs	r0, #15
    7332:	47b8      	blx	r7
    7334:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    7336:	d120      	bne.n	737a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    7338:	9b00      	ldr	r3, [sp, #0]
    733a:	075b      	lsls	r3, r3, #29
    733c:	d42b      	bmi.n	7396 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    733e:	2002      	movs	r0, #2
    7340:	47b0      	blx	r6
    7342:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    7344:	2d00      	cmp	r5, #0
    7346:	d1f2      	bne.n	732e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    7348:	22af      	movs	r2, #175	; 0xaf
    734a:	0052      	lsls	r2, r2, #1
    734c:	4916      	ldr	r1, [pc, #88]	; (73a8 <chip_wake+0xbc>)
    734e:	4817      	ldr	r0, [pc, #92]	; (73ac <chip_wake+0xc0>)
    7350:	4b17      	ldr	r3, [pc, #92]	; (73b0 <chip_wake+0xc4>)
    7352:	4798      	blx	r3
    7354:	4817      	ldr	r0, [pc, #92]	; (73b4 <chip_wake+0xc8>)
    7356:	4b18      	ldr	r3, [pc, #96]	; (73b8 <chip_wake+0xcc>)
    7358:	4798      	blx	r3
    735a:	200d      	movs	r0, #13
    735c:	4b17      	ldr	r3, [pc, #92]	; (73bc <chip_wake+0xd0>)
    735e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    7360:	2404      	movs	r4, #4
    7362:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    7364:	0020      	movs	r0, r4
    7366:	b003      	add	sp, #12
    7368:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    736a:	2302      	movs	r3, #2
    736c:	4319      	orrs	r1, r3
    736e:	2001      	movs	r0, #1
    7370:	4b0b      	ldr	r3, [pc, #44]	; (73a0 <chip_wake+0xb4>)
    7372:	4798      	blx	r3
    7374:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    7376:	d0d7      	beq.n	7328 <chip_wake+0x3c>
    7378:	e7f4      	b.n	7364 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    737a:	22aa      	movs	r2, #170	; 0xaa
    737c:	0052      	lsls	r2, r2, #1
    737e:	490a      	ldr	r1, [pc, #40]	; (73a8 <chip_wake+0xbc>)
    7380:	480a      	ldr	r0, [pc, #40]	; (73ac <chip_wake+0xc0>)
    7382:	4d0b      	ldr	r5, [pc, #44]	; (73b0 <chip_wake+0xc4>)
    7384:	47a8      	blx	r5
    7386:	9a00      	ldr	r2, [sp, #0]
    7388:	0021      	movs	r1, r4
    738a:	480d      	ldr	r0, [pc, #52]	; (73c0 <chip_wake+0xd4>)
    738c:	47a8      	blx	r5
    738e:	200d      	movs	r0, #13
    7390:	4b0a      	ldr	r3, [pc, #40]	; (73bc <chip_wake+0xd0>)
    7392:	4798      	blx	r3
			goto _WAKE_EXIT;
    7394:	e7e6      	b.n	7364 <chip_wake+0x78>
	nm_bus_reset();
    7396:	4b0b      	ldr	r3, [pc, #44]	; (73c4 <chip_wake+0xd8>)
    7398:	4798      	blx	r3
    739a:	e7e3      	b.n	7364 <chip_wake+0x78>
    739c:	00007605 	.word	0x00007605
    73a0:	00007611 	.word	0x00007611
    73a4:	00005d75 	.word	0x00005d75
    73a8:	00011d64 	.word	0x00011d64
    73ac:	00011824 	.word	0x00011824
    73b0:	0000bb3d 	.word	0x0000bb3d
    73b4:	00011dac 	.word	0x00011dac
    73b8:	0000bc59 	.word	0x0000bc59
    73bc:	0000bb71 	.word	0x0000bb71
    73c0:	00011d94 	.word	0x00011d94
    73c4:	000075ed 	.word	0x000075ed

000073c8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    73c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73ca:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    73cc:	4d2d      	ldr	r5, [pc, #180]	; (7484 <wait_for_bootrom+0xbc>)
    73ce:	4c2e      	ldr	r4, [pc, #184]	; (7488 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    73d0:	4e2e      	ldr	r6, [pc, #184]	; (748c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    73d2:	0028      	movs	r0, r5
    73d4:	47a0      	blx	r4
		if (reg & 0x80000000) {
    73d6:	2800      	cmp	r0, #0
    73d8:	db02      	blt.n	73e0 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    73da:	2001      	movs	r0, #1
    73dc:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    73de:	e7f8      	b.n	73d2 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    73e0:	482b      	ldr	r0, [pc, #172]	; (7490 <wait_for_bootrom+0xc8>)
    73e2:	4b29      	ldr	r3, [pc, #164]	; (7488 <wait_for_bootrom+0xc0>)
    73e4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    73e6:	07c3      	lsls	r3, r0, #31
    73e8:	d409      	bmi.n	73fe <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    73ea:	4e28      	ldr	r6, [pc, #160]	; (748c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    73ec:	4c29      	ldr	r4, [pc, #164]	; (7494 <wait_for_bootrom+0xcc>)
    73ee:	4d26      	ldr	r5, [pc, #152]	; (7488 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    73f0:	2001      	movs	r0, #1
    73f2:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    73f4:	0020      	movs	r0, r4
    73f6:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    73f8:	4b27      	ldr	r3, [pc, #156]	; (7498 <wait_for_bootrom+0xd0>)
    73fa:	4298      	cmp	r0, r3
    73fc:	d1f8      	bne.n	73f0 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    73fe:	2f02      	cmp	r7, #2
    7400:	d021      	beq.n	7446 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    7402:	2f03      	cmp	r7, #3
    7404:	d029      	beq.n	745a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    7406:	2f04      	cmp	r7, #4
    7408:	d030      	beq.n	746c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    740a:	4924      	ldr	r1, [pc, #144]	; (749c <wait_for_bootrom+0xd4>)
    740c:	4824      	ldr	r0, [pc, #144]	; (74a0 <wait_for_bootrom+0xd8>)
    740e:	4b25      	ldr	r3, [pc, #148]	; (74a4 <wait_for_bootrom+0xdc>)
    7410:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    7412:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    7414:	4b24      	ldr	r3, [pc, #144]	; (74a8 <wait_for_bootrom+0xe0>)
    7416:	4798      	blx	r3
    7418:	0500      	lsls	r0, r0, #20
    741a:	0d00      	lsrs	r0, r0, #20
    741c:	4b23      	ldr	r3, [pc, #140]	; (74ac <wait_for_bootrom+0xe4>)
    741e:	4298      	cmp	r0, r3
    7420:	d82a      	bhi.n	7478 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    7422:	0020      	movs	r0, r4
    7424:	4b22      	ldr	r3, [pc, #136]	; (74b0 <wait_for_bootrom+0xe8>)
    7426:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    7428:	4822      	ldr	r0, [pc, #136]	; (74b4 <wait_for_bootrom+0xec>)
    742a:	4c23      	ldr	r4, [pc, #140]	; (74b8 <wait_for_bootrom+0xf0>)
    742c:	47a0      	blx	r4
    742e:	491b      	ldr	r1, [pc, #108]	; (749c <wait_for_bootrom+0xd4>)
    7430:	4822      	ldr	r0, [pc, #136]	; (74bc <wait_for_bootrom+0xf4>)
    7432:	47a0      	blx	r4
    7434:	200d      	movs	r0, #13
    7436:	4b22      	ldr	r3, [pc, #136]	; (74c0 <wait_for_bootrom+0xf8>)
    7438:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    743a:	4922      	ldr	r1, [pc, #136]	; (74c4 <wait_for_bootrom+0xfc>)
    743c:	4815      	ldr	r0, [pc, #84]	; (7494 <wait_for_bootrom+0xcc>)
    743e:	4b19      	ldr	r3, [pc, #100]	; (74a4 <wait_for_bootrom+0xdc>)
    7440:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    7442:	2000      	movs	r0, #0
    7444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    7446:	4920      	ldr	r1, [pc, #128]	; (74c8 <wait_for_bootrom+0x100>)
    7448:	4820      	ldr	r0, [pc, #128]	; (74cc <wait_for_bootrom+0x104>)
    744a:	4c16      	ldr	r4, [pc, #88]	; (74a4 <wait_for_bootrom+0xdc>)
    744c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    744e:	2180      	movs	r1, #128	; 0x80
    7450:	0349      	lsls	r1, r1, #13
    7452:	4813      	ldr	r0, [pc, #76]	; (74a0 <wait_for_bootrom+0xd8>)
    7454:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    7456:	2400      	movs	r4, #0
    7458:	e7dc      	b.n	7414 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    745a:	491b      	ldr	r1, [pc, #108]	; (74c8 <wait_for_bootrom+0x100>)
    745c:	481b      	ldr	r0, [pc, #108]	; (74cc <wait_for_bootrom+0x104>)
    745e:	4c11      	ldr	r4, [pc, #68]	; (74a4 <wait_for_bootrom+0xdc>)
    7460:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    7462:	2100      	movs	r1, #0
    7464:	480e      	ldr	r0, [pc, #56]	; (74a0 <wait_for_bootrom+0xd8>)
    7466:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    7468:	2400      	movs	r4, #0
    746a:	e7d3      	b.n	7414 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    746c:	490b      	ldr	r1, [pc, #44]	; (749c <wait_for_bootrom+0xd4>)
    746e:	480c      	ldr	r0, [pc, #48]	; (74a0 <wait_for_bootrom+0xd8>)
    7470:	4b0c      	ldr	r3, [pc, #48]	; (74a4 <wait_for_bootrom+0xdc>)
    7472:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    7474:	2480      	movs	r4, #128	; 0x80
    7476:	e7cd      	b.n	7414 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    7478:	2002      	movs	r0, #2
    747a:	4320      	orrs	r0, r4
    747c:	4b0c      	ldr	r3, [pc, #48]	; (74b0 <wait_for_bootrom+0xe8>)
    747e:	4798      	blx	r3
    7480:	e7d2      	b.n	7428 <wait_for_bootrom+0x60>
    7482:	46c0      	nop			; (mov r8, r8)
    7484:	00001014 	.word	0x00001014
    7488:	000075f9 	.word	0x000075f9
    748c:	00005d75 	.word	0x00005d75
    7490:	000207bc 	.word	0x000207bc
    7494:	000c000c 	.word	0x000c000c
    7498:	10add09e 	.word	0x10add09e
    749c:	13521352 	.word	0x13521352
    74a0:	0000108c 	.word	0x0000108c
    74a4:	00007611 	.word	0x00007611
    74a8:	000071b5 	.word	0x000071b5
    74ac:	0000039f 	.word	0x0000039f
    74b0:	00007121 	.word	0x00007121
    74b4:	00011b54 	.word	0x00011b54
    74b8:	0000bb3d 	.word	0x0000bb3d
    74bc:	00011dc8 	.word	0x00011dc8
    74c0:	0000bb71 	.word	0x0000bb71
    74c4:	ef522f61 	.word	0xef522f61
    74c8:	3c1cd57d 	.word	0x3c1cd57d
    74cc:	000207ac 	.word	0x000207ac

000074d0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    74d0:	b570      	push	{r4, r5, r6, lr}
    74d2:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    74d4:	4b15      	ldr	r3, [pc, #84]	; (752c <wait_for_firmware_start+0x5c>)
    74d6:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    74d8:	4b15      	ldr	r3, [pc, #84]	; (7530 <wait_for_firmware_start+0x60>)
    74da:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    74dc:	3802      	subs	r0, #2
    74de:	2801      	cmp	r0, #1
    74e0:	d911      	bls.n	7506 <wait_for_firmware_start+0x36>
{
    74e2:	2401      	movs	r4, #1
    74e4:	4264      	negs	r4, r4
    74e6:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    74e8:	4e12      	ldr	r6, [pc, #72]	; (7534 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    74ea:	4d13      	ldr	r5, [pc, #76]	; (7538 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    74ec:	9b00      	ldr	r3, [sp, #0]
    74ee:	4298      	cmp	r0, r3
    74f0:	d00e      	beq.n	7510 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    74f2:	2002      	movs	r0, #2
    74f4:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    74f6:	9801      	ldr	r0, [sp, #4]
    74f8:	47a8      	blx	r5
    74fa:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    74fc:	2c00      	cmp	r4, #0
    74fe:	d1f5      	bne.n	74ec <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    7500:	2005      	movs	r0, #5
    7502:	4240      	negs	r0, r0
    7504:	e009      	b.n	751a <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    7506:	4b0d      	ldr	r3, [pc, #52]	; (753c <wait_for_firmware_start+0x6c>)
    7508:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    750a:	4b0d      	ldr	r3, [pc, #52]	; (7540 <wait_for_firmware_start+0x70>)
    750c:	9300      	str	r3, [sp, #0]
    750e:	e7e8      	b.n	74e2 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    7510:	9a00      	ldr	r2, [sp, #0]
    7512:	4b07      	ldr	r3, [pc, #28]	; (7530 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    7514:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    7516:	429a      	cmp	r2, r3
    7518:	d001      	beq.n	751e <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    751a:	b002      	add	sp, #8
    751c:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    751e:	2100      	movs	r1, #0
    7520:	4802      	ldr	r0, [pc, #8]	; (752c <wait_for_firmware_start+0x5c>)
    7522:	4b08      	ldr	r3, [pc, #32]	; (7544 <wait_for_firmware_start+0x74>)
    7524:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    7526:	2000      	movs	r0, #0
    7528:	e7f7      	b.n	751a <wait_for_firmware_start+0x4a>
    752a:	46c0      	nop			; (mov r8, r8)
    752c:	0000108c 	.word	0x0000108c
    7530:	02532636 	.word	0x02532636
    7534:	00005d75 	.word	0x00005d75
    7538:	000075f9 	.word	0x000075f9
    753c:	000207ac 	.word	0x000207ac
    7540:	d75dc1c3 	.word	0xd75dc1c3
    7544:	00007611 	.word	0x00007611

00007548 <chip_deinit>:

sint8 chip_deinit(void)
{
    7548:	b510      	push	{r4, lr}
    754a:	b082      	sub	sp, #8
	uint32 reg = 0;
    754c:	2300      	movs	r3, #0
    754e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    7550:	a901      	add	r1, sp, #4
    7552:	20a0      	movs	r0, #160	; 0xa0
    7554:	0140      	lsls	r0, r0, #5
    7556:	4b14      	ldr	r3, [pc, #80]	; (75a8 <chip_deinit+0x60>)
    7558:	4798      	blx	r3
    755a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    755c:	d115      	bne.n	758a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    755e:	4913      	ldr	r1, [pc, #76]	; (75ac <chip_deinit+0x64>)
    7560:	9b01      	ldr	r3, [sp, #4]
    7562:	4019      	ands	r1, r3
    7564:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    7566:	20a0      	movs	r0, #160	; 0xa0
    7568:	0140      	lsls	r0, r0, #5
    756a:	4b11      	ldr	r3, [pc, #68]	; (75b0 <chip_deinit+0x68>)
    756c:	4798      	blx	r3
    756e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    7570:	d016      	beq.n	75a0 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    7572:	4a10      	ldr	r2, [pc, #64]	; (75b4 <chip_deinit+0x6c>)
    7574:	4910      	ldr	r1, [pc, #64]	; (75b8 <chip_deinit+0x70>)
    7576:	4811      	ldr	r0, [pc, #68]	; (75bc <chip_deinit+0x74>)
    7578:	4b11      	ldr	r3, [pc, #68]	; (75c0 <chip_deinit+0x78>)
    757a:	4798      	blx	r3
    757c:	4811      	ldr	r0, [pc, #68]	; (75c4 <chip_deinit+0x7c>)
    757e:	4b12      	ldr	r3, [pc, #72]	; (75c8 <chip_deinit+0x80>)
    7580:	4798      	blx	r3
    7582:	200d      	movs	r0, #13
    7584:	4b11      	ldr	r3, [pc, #68]	; (75cc <chip_deinit+0x84>)
    7586:	4798      	blx	r3
		goto ERR1;
    7588:	e00a      	b.n	75a0 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    758a:	4a11      	ldr	r2, [pc, #68]	; (75d0 <chip_deinit+0x88>)
    758c:	490a      	ldr	r1, [pc, #40]	; (75b8 <chip_deinit+0x70>)
    758e:	480b      	ldr	r0, [pc, #44]	; (75bc <chip_deinit+0x74>)
    7590:	4b0b      	ldr	r3, [pc, #44]	; (75c0 <chip_deinit+0x78>)
    7592:	4798      	blx	r3
    7594:	480b      	ldr	r0, [pc, #44]	; (75c4 <chip_deinit+0x7c>)
    7596:	4b0c      	ldr	r3, [pc, #48]	; (75c8 <chip_deinit+0x80>)
    7598:	4798      	blx	r3
    759a:	200d      	movs	r0, #13
    759c:	4b0b      	ldr	r3, [pc, #44]	; (75cc <chip_deinit+0x84>)
    759e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    75a0:	0020      	movs	r0, r4
    75a2:	b002      	add	sp, #8
    75a4:	bd10      	pop	{r4, pc}
    75a6:	46c0      	nop			; (mov r8, r8)
    75a8:	00007605 	.word	0x00007605
    75ac:	fffffbff 	.word	0xfffffbff
    75b0:	00007611 	.word	0x00007611
    75b4:	0000020b 	.word	0x0000020b
    75b8:	00011d70 	.word	0x00011d70
    75bc:	00011824 	.word	0x00011824
    75c0:	0000bb3d 	.word	0x0000bb3d
    75c4:	00011d7c 	.word	0x00011d7c
    75c8:	0000bc59 	.word	0x0000bc59
    75cc:	0000bb71 	.word	0x0000bb71
    75d0:	00000205 	.word	0x00000205

000075d4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    75d4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    75d6:	4b01      	ldr	r3, [pc, #4]	; (75dc <nm_bus_iface_init+0x8>)
    75d8:	4798      	blx	r3
	return ret;
}
    75da:	bd10      	pop	{r4, pc}
    75dc:	00005ead 	.word	0x00005ead

000075e0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    75e0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    75e2:	4b01      	ldr	r3, [pc, #4]	; (75e8 <nm_bus_iface_deinit+0x8>)
    75e4:	4798      	blx	r3

	return ret;
}
    75e6:	bd10      	pop	{r4, pc}
    75e8:	000060fd 	.word	0x000060fd

000075ec <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    75ec:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    75ee:	4b01      	ldr	r3, [pc, #4]	; (75f4 <nm_bus_reset+0x8>)
    75f0:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    75f2:	bd10      	pop	{r4, pc}
    75f4:	00007f9d 	.word	0x00007f9d

000075f8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    75f8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    75fa:	4b01      	ldr	r3, [pc, #4]	; (7600 <nm_read_reg+0x8>)
    75fc:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    75fe:	bd10      	pop	{r4, pc}
    7600:	00007fd5 	.word	0x00007fd5

00007604 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    7604:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    7606:	4b01      	ldr	r3, [pc, #4]	; (760c <nm_read_reg_with_ret+0x8>)
    7608:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    760a:	bd10      	pop	{r4, pc}
    760c:	00007fe9 	.word	0x00007fe9

00007610 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    7610:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    7612:	4b01      	ldr	r3, [pc, #4]	; (7618 <nm_write_reg+0x8>)
    7614:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    7616:	bd10      	pop	{r4, pc}
    7618:	00008001 	.word	0x00008001

0000761c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    761c:	b5f0      	push	{r4, r5, r6, r7, lr}
    761e:	46d6      	mov	lr, sl
    7620:	464f      	mov	r7, r9
    7622:	4646      	mov	r6, r8
    7624:	b5c0      	push	{r6, r7, lr}
    7626:	b082      	sub	sp, #8
    7628:	4680      	mov	r8, r0
    762a:	4689      	mov	r9, r1
    762c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    762e:	4b13      	ldr	r3, [pc, #76]	; (767c <nm_read_block+0x60>)
    7630:	881f      	ldrh	r7, [r3, #0]
    7632:	3f08      	subs	r7, #8
    7634:	b2bb      	uxth	r3, r7
    7636:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    7638:	001e      	movs	r6, r3
    763a:	0004      	movs	r4, r0
    763c:	429a      	cmp	r2, r3
    763e:	d91a      	bls.n	7676 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7640:	4b0f      	ldr	r3, [pc, #60]	; (7680 <nm_read_block+0x64>)
    7642:	469a      	mov	sl, r3
    7644:	1a37      	subs	r7, r6, r0
    7646:	4643      	mov	r3, r8
    7648:	1ae1      	subs	r1, r4, r3
    764a:	4449      	add	r1, r9
    764c:	9a01      	ldr	r2, [sp, #4]
    764e:	0020      	movs	r0, r4
    7650:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    7652:	2800      	cmp	r0, #0
    7654:	d109      	bne.n	766a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    7656:	1bad      	subs	r5, r5, r6
    7658:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    765a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    765c:	42b5      	cmp	r5, r6
    765e:	d8f2      	bhi.n	7646 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7660:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    7662:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7664:	0020      	movs	r0, r4
    7666:	4b06      	ldr	r3, [pc, #24]	; (7680 <nm_read_block+0x64>)
    7668:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    766a:	b002      	add	sp, #8
    766c:	bc1c      	pop	{r2, r3, r4}
    766e:	4690      	mov	r8, r2
    7670:	4699      	mov	r9, r3
    7672:	46a2      	mov	sl, r4
    7674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    7676:	2100      	movs	r1, #0
    7678:	e7f2      	b.n	7660 <nm_read_block+0x44>
    767a:	46c0      	nop			; (mov r8, r8)
    767c:	20000008 	.word	0x20000008
    7680:	00008145 	.word	0x00008145

00007684 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    7684:	b5f0      	push	{r4, r5, r6, r7, lr}
    7686:	46d6      	mov	lr, sl
    7688:	464f      	mov	r7, r9
    768a:	4646      	mov	r6, r8
    768c:	b5c0      	push	{r6, r7, lr}
    768e:	b082      	sub	sp, #8
    7690:	4680      	mov	r8, r0
    7692:	4689      	mov	r9, r1
    7694:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    7696:	4b13      	ldr	r3, [pc, #76]	; (76e4 <nm_write_block+0x60>)
    7698:	881f      	ldrh	r7, [r3, #0]
    769a:	3f08      	subs	r7, #8
    769c:	b2bb      	uxth	r3, r7
    769e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    76a0:	001e      	movs	r6, r3
    76a2:	0004      	movs	r4, r0
    76a4:	429a      	cmp	r2, r3
    76a6:	d91a      	bls.n	76de <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    76a8:	4b0f      	ldr	r3, [pc, #60]	; (76e8 <nm_write_block+0x64>)
    76aa:	469a      	mov	sl, r3
    76ac:	1a37      	subs	r7, r6, r0
    76ae:	4643      	mov	r3, r8
    76b0:	1ae1      	subs	r1, r4, r3
    76b2:	4449      	add	r1, r9
    76b4:	9a01      	ldr	r2, [sp, #4]
    76b6:	0020      	movs	r0, r4
    76b8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    76ba:	2800      	cmp	r0, #0
    76bc:	d109      	bne.n	76d2 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    76be:	1bad      	subs	r5, r5, r6
    76c0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    76c2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    76c4:	42b5      	cmp	r5, r6
    76c6:	d8f2      	bhi.n	76ae <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    76c8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    76ca:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    76cc:	0020      	movs	r0, r4
    76ce:	4b06      	ldr	r3, [pc, #24]	; (76e8 <nm_write_block+0x64>)
    76d0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    76d2:	b002      	add	sp, #8
    76d4:	bc1c      	pop	{r2, r3, r4}
    76d6:	4690      	mov	r8, r2
    76d8:	4699      	mov	r9, r3
    76da:	46a2      	mov	sl, r4
    76dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    76de:	2100      	movs	r1, #0
    76e0:	e7f2      	b.n	76c8 <nm_write_block+0x44>
    76e2:	46c0      	nop			; (mov r8, r8)
    76e4:	20000008 	.word	0x20000008
    76e8:	000082a1 	.word	0x000082a1

000076ec <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    76ec:	b570      	push	{r4, r5, r6, lr}
    76ee:	b084      	sub	sp, #16
    76f0:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    76f2:	2300      	movs	r3, #0
    76f4:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    76f6:	2208      	movs	r2, #8
    76f8:	2100      	movs	r1, #0
    76fa:	a801      	add	r0, sp, #4
    76fc:	4b2d      	ldr	r3, [pc, #180]	; (77b4 <nm_get_firmware_full_info+0xc8>)
    76fe:	4798      	blx	r3
	if (pstrRev != NULL)
    7700:	2c00      	cmp	r4, #0
    7702:	d044      	beq.n	778e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    7704:	2228      	movs	r2, #40	; 0x28
    7706:	2100      	movs	r1, #0
    7708:	0020      	movs	r0, r4
    770a:	4b2b      	ldr	r3, [pc, #172]	; (77b8 <nm_get_firmware_full_info+0xcc>)
    770c:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    770e:	a903      	add	r1, sp, #12
    7710:	482a      	ldr	r0, [pc, #168]	; (77bc <nm_get_firmware_full_info+0xd0>)
    7712:	4b2b      	ldr	r3, [pc, #172]	; (77c0 <nm_get_firmware_full_info+0xd4>)
    7714:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    7716:	2800      	cmp	r0, #0
    7718:	d13a      	bne.n	7790 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    771a:	9b03      	ldr	r3, [sp, #12]
    771c:	2b00      	cmp	r3, #0
    771e:	d039      	beq.n	7794 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    7720:	20c0      	movs	r0, #192	; 0xc0
    7722:	0280      	lsls	r0, r0, #10
    7724:	4318      	orrs	r0, r3
    7726:	2208      	movs	r2, #8
    7728:	a901      	add	r1, sp, #4
    772a:	4b26      	ldr	r3, [pc, #152]	; (77c4 <nm_get_firmware_full_info+0xd8>)
    772c:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    772e:	2800      	cmp	r0, #0
    7730:	d12e      	bne.n	7790 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    7732:	9b02      	ldr	r3, [sp, #8]
    7734:	0418      	lsls	r0, r3, #16
    7736:	0c00      	lsrs	r0, r0, #16
    7738:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    773a:	d02e      	beq.n	779a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    773c:	23c0      	movs	r3, #192	; 0xc0
    773e:	029b      	lsls	r3, r3, #10
    7740:	4318      	orrs	r0, r3
    7742:	2228      	movs	r2, #40	; 0x28
    7744:	0021      	movs	r1, r4
    7746:	4b1f      	ldr	r3, [pc, #124]	; (77c4 <nm_get_firmware_full_info+0xd8>)
    7748:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    774a:	2800      	cmp	r0, #0
    774c:	d120      	bne.n	7790 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    774e:	7921      	ldrb	r1, [r4, #4]
    7750:	0209      	lsls	r1, r1, #8
    7752:	79a2      	ldrb	r2, [r4, #6]
    7754:	230f      	movs	r3, #15
    7756:	401a      	ands	r2, r3
    7758:	430a      	orrs	r2, r1
    775a:	7961      	ldrb	r1, [r4, #5]
    775c:	0109      	lsls	r1, r1, #4
    775e:	25ff      	movs	r5, #255	; 0xff
    7760:	4029      	ands	r1, r5
    7762:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    7764:	79e1      	ldrb	r1, [r4, #7]
    7766:	0209      	lsls	r1, r1, #8
    7768:	7a66      	ldrb	r6, [r4, #9]
    776a:	4033      	ands	r3, r6
    776c:	430b      	orrs	r3, r1
    776e:	7a21      	ldrb	r1, [r4, #8]
    7770:	0109      	lsls	r1, r1, #4
    7772:	400d      	ands	r5, r1
    7774:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    7776:	2a00      	cmp	r2, #0
    7778:	d012      	beq.n	77a0 <nm_get_firmware_full_info+0xb4>
    777a:	2b00      	cmp	r3, #0
    777c:	d013      	beq.n	77a6 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    777e:	4912      	ldr	r1, [pc, #72]	; (77c8 <nm_get_firmware_full_info+0xdc>)
    7780:	428b      	cmp	r3, r1
    7782:	d813      	bhi.n	77ac <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    7784:	4b11      	ldr	r3, [pc, #68]	; (77cc <nm_get_firmware_full_info+0xe0>)
    7786:	429a      	cmp	r2, r3
    7788:	d802      	bhi.n	7790 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    778a:	380d      	subs	r0, #13
    778c:	e000      	b.n	7790 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    778e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    7790:	b004      	add	sp, #16
    7792:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    7794:	200c      	movs	r0, #12
    7796:	4240      	negs	r0, r0
    7798:	e7fa      	b.n	7790 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    779a:	200c      	movs	r0, #12
    779c:	4240      	negs	r0, r0
    779e:	e7f7      	b.n	7790 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    77a0:	200c      	movs	r0, #12
    77a2:	4240      	negs	r0, r0
    77a4:	e7f4      	b.n	7790 <nm_get_firmware_full_info+0xa4>
    77a6:	200c      	movs	r0, #12
    77a8:	4240      	negs	r0, r0
    77aa:	e7f1      	b.n	7790 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    77ac:	200d      	movs	r0, #13
    77ae:	4240      	negs	r0, r0
    77b0:	e7ee      	b.n	7790 <nm_get_firmware_full_info+0xa4>
    77b2:	46c0      	nop			; (mov r8, r8)
    77b4:	0000b0fb 	.word	0x0000b0fb
    77b8:	0000617d 	.word	0x0000617d
    77bc:	000c0008 	.word	0x000c0008
    77c0:	00007605 	.word	0x00007605
    77c4:	0000761d 	.word	0x0000761d
    77c8:	00001352 	.word	0x00001352
    77cc:	00001351 	.word	0x00001351

000077d0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    77d0:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    77d2:	2800      	cmp	r0, #0
    77d4:	d037      	beq.n	7846 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    77d6:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    77d8:	1e6b      	subs	r3, r5, #1
    77da:	2b03      	cmp	r3, #3
    77dc:	d900      	bls.n	77e0 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    77de:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    77e0:	2000      	movs	r0, #0
    77e2:	4b20      	ldr	r3, [pc, #128]	; (7864 <nm_drv_init+0x94>)
    77e4:	4798      	blx	r3
    77e6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    77e8:	d12f      	bne.n	784a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    77ea:	481f      	ldr	r0, [pc, #124]	; (7868 <nm_drv_init+0x98>)
    77ec:	4c1f      	ldr	r4, [pc, #124]	; (786c <nm_drv_init+0x9c>)
    77ee:	47a0      	blx	r4
    77f0:	4b1f      	ldr	r3, [pc, #124]	; (7870 <nm_drv_init+0xa0>)
    77f2:	4798      	blx	r3
    77f4:	0001      	movs	r1, r0
    77f6:	481f      	ldr	r0, [pc, #124]	; (7874 <nm_drv_init+0xa4>)
    77f8:	47a0      	blx	r4
    77fa:	200d      	movs	r0, #13
    77fc:	4b1e      	ldr	r3, [pc, #120]	; (7878 <nm_drv_init+0xa8>)
    77fe:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    7800:	4b1e      	ldr	r3, [pc, #120]	; (787c <nm_drv_init+0xac>)
    7802:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    7804:	0028      	movs	r0, r5
    7806:	4b1e      	ldr	r3, [pc, #120]	; (7880 <nm_drv_init+0xb0>)
    7808:	4798      	blx	r3
    780a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    780c:	d117      	bne.n	783e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    780e:	0028      	movs	r0, r5
    7810:	4b1c      	ldr	r3, [pc, #112]	; (7884 <nm_drv_init+0xb4>)
    7812:	4798      	blx	r3
    7814:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7816:	d112      	bne.n	783e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    7818:	3d02      	subs	r5, #2
    781a:	2d01      	cmp	r5, #1
    781c:	d911      	bls.n	7842 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    781e:	4b1a      	ldr	r3, [pc, #104]	; (7888 <nm_drv_init+0xb8>)
    7820:	4798      	blx	r3
    7822:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7824:	d00d      	beq.n	7842 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    7826:	2256      	movs	r2, #86	; 0x56
    7828:	32ff      	adds	r2, #255	; 0xff
    782a:	4918      	ldr	r1, [pc, #96]	; (788c <nm_drv_init+0xbc>)
    782c:	4818      	ldr	r0, [pc, #96]	; (7890 <nm_drv_init+0xc0>)
    782e:	4b0f      	ldr	r3, [pc, #60]	; (786c <nm_drv_init+0x9c>)
    7830:	4798      	blx	r3
    7832:	4818      	ldr	r0, [pc, #96]	; (7894 <nm_drv_init+0xc4>)
    7834:	4b18      	ldr	r3, [pc, #96]	; (7898 <nm_drv_init+0xc8>)
    7836:	4798      	blx	r3
    7838:	200d      	movs	r0, #13
    783a:	4b0f      	ldr	r3, [pc, #60]	; (7878 <nm_drv_init+0xa8>)
    783c:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    783e:	4b17      	ldr	r3, [pc, #92]	; (789c <nm_drv_init+0xcc>)
    7840:	4798      	blx	r3
ERR1:
	return ret;
}
    7842:	0020      	movs	r0, r4
    7844:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    7846:	2501      	movs	r5, #1
    7848:	e7ca      	b.n	77e0 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    784a:	2228      	movs	r2, #40	; 0x28
    784c:	32ff      	adds	r2, #255	; 0xff
    784e:	490f      	ldr	r1, [pc, #60]	; (788c <nm_drv_init+0xbc>)
    7850:	480f      	ldr	r0, [pc, #60]	; (7890 <nm_drv_init+0xc0>)
    7852:	4b06      	ldr	r3, [pc, #24]	; (786c <nm_drv_init+0x9c>)
    7854:	4798      	blx	r3
    7856:	4812      	ldr	r0, [pc, #72]	; (78a0 <nm_drv_init+0xd0>)
    7858:	4b0f      	ldr	r3, [pc, #60]	; (7898 <nm_drv_init+0xc8>)
    785a:	4798      	blx	r3
    785c:	200d      	movs	r0, #13
    785e:	4b06      	ldr	r3, [pc, #24]	; (7878 <nm_drv_init+0xa8>)
    7860:	4798      	blx	r3
		goto ERR1;
    7862:	e7ee      	b.n	7842 <nm_drv_init+0x72>
    7864:	000075d5 	.word	0x000075d5
    7868:	00011b54 	.word	0x00011b54
    786c:	0000bb3d 	.word	0x0000bb3d
    7870:	000071b5 	.word	0x000071b5
    7874:	00011e98 	.word	0x00011e98
    7878:	0000bb71 	.word	0x0000bb71
    787c:	00008019 	.word	0x00008019
    7880:	000073c9 	.word	0x000073c9
    7884:	000074d1 	.word	0x000074d1
    7888:	00007159 	.word	0x00007159
    788c:	00011de0 	.word	0x00011de0
    7890:	00011824 	.word	0x00011824
    7894:	00011e5c 	.word	0x00011e5c
    7898:	0000bc59 	.word	0x0000bc59
    789c:	000075e1 	.word	0x000075e1
    78a0:	00011e7c 	.word	0x00011e7c

000078a4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    78a4:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    78a6:	4b1c      	ldr	r3, [pc, #112]	; (7918 <nm_drv_deinit+0x74>)
    78a8:	4798      	blx	r3
    78aa:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    78ac:	d10b      	bne.n	78c6 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    78ae:	2000      	movs	r0, #0
    78b0:	4b1a      	ldr	r3, [pc, #104]	; (791c <nm_drv_deinit+0x78>)
    78b2:	4798      	blx	r3
    78b4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    78b6:	d114      	bne.n	78e2 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    78b8:	4b19      	ldr	r3, [pc, #100]	; (7920 <nm_drv_deinit+0x7c>)
    78ba:	4798      	blx	r3
    78bc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    78be:	d11d      	bne.n	78fc <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    78c0:	4b18      	ldr	r3, [pc, #96]	; (7924 <nm_drv_deinit+0x80>)
    78c2:	4798      	blx	r3
    78c4:	e00b      	b.n	78de <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    78c6:	22b6      	movs	r2, #182	; 0xb6
    78c8:	0052      	lsls	r2, r2, #1
    78ca:	4917      	ldr	r1, [pc, #92]	; (7928 <nm_drv_deinit+0x84>)
    78cc:	4817      	ldr	r0, [pc, #92]	; (792c <nm_drv_deinit+0x88>)
    78ce:	4b18      	ldr	r3, [pc, #96]	; (7930 <nm_drv_deinit+0x8c>)
    78d0:	4798      	blx	r3
    78d2:	4818      	ldr	r0, [pc, #96]	; (7934 <nm_drv_deinit+0x90>)
    78d4:	4b18      	ldr	r3, [pc, #96]	; (7938 <nm_drv_deinit+0x94>)
    78d6:	4798      	blx	r3
    78d8:	200d      	movs	r0, #13
    78da:	4b18      	ldr	r3, [pc, #96]	; (793c <nm_drv_deinit+0x98>)
    78dc:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    78de:	0020      	movs	r0, r4
    78e0:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    78e2:	2274      	movs	r2, #116	; 0x74
    78e4:	32ff      	adds	r2, #255	; 0xff
    78e6:	4910      	ldr	r1, [pc, #64]	; (7928 <nm_drv_deinit+0x84>)
    78e8:	4810      	ldr	r0, [pc, #64]	; (792c <nm_drv_deinit+0x88>)
    78ea:	4b11      	ldr	r3, [pc, #68]	; (7930 <nm_drv_deinit+0x8c>)
    78ec:	4798      	blx	r3
    78ee:	4814      	ldr	r0, [pc, #80]	; (7940 <nm_drv_deinit+0x9c>)
    78f0:	4b11      	ldr	r3, [pc, #68]	; (7938 <nm_drv_deinit+0x94>)
    78f2:	4798      	blx	r3
    78f4:	200d      	movs	r0, #13
    78f6:	4b11      	ldr	r3, [pc, #68]	; (793c <nm_drv_deinit+0x98>)
    78f8:	4798      	blx	r3
		goto ERR1;
    78fa:	e7f0      	b.n	78de <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    78fc:	227a      	movs	r2, #122	; 0x7a
    78fe:	32ff      	adds	r2, #255	; 0xff
    7900:	4909      	ldr	r1, [pc, #36]	; (7928 <nm_drv_deinit+0x84>)
    7902:	480a      	ldr	r0, [pc, #40]	; (792c <nm_drv_deinit+0x88>)
    7904:	4b0a      	ldr	r3, [pc, #40]	; (7930 <nm_drv_deinit+0x8c>)
    7906:	4798      	blx	r3
    7908:	480e      	ldr	r0, [pc, #56]	; (7944 <nm_drv_deinit+0xa0>)
    790a:	4b0b      	ldr	r3, [pc, #44]	; (7938 <nm_drv_deinit+0x94>)
    790c:	4798      	blx	r3
    790e:	200d      	movs	r0, #13
    7910:	4b0a      	ldr	r3, [pc, #40]	; (793c <nm_drv_deinit+0x98>)
    7912:	4798      	blx	r3
		goto ERR1;
    7914:	e7e3      	b.n	78de <nm_drv_deinit+0x3a>
    7916:	46c0      	nop			; (mov r8, r8)
    7918:	00007549 	.word	0x00007549
    791c:	00008e75 	.word	0x00008e75
    7920:	000075e1 	.word	0x000075e1
    7924:	00007fc5 	.word	0x00007fc5
    7928:	00011dec 	.word	0x00011dec
    792c:	00011824 	.word	0x00011824
    7930:	0000bb3d 	.word	0x0000bb3d
    7934:	00011dfc 	.word	0x00011dfc
    7938:	0000bc59 	.word	0x0000bc59
    793c:	0000bb71 	.word	0x0000bb71
    7940:	00011e1c 	.word	0x00011e1c
    7944:	00011e40 	.word	0x00011e40

00007948 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    7948:	b500      	push	{lr}
    794a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    794c:	ab01      	add	r3, sp, #4
    794e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    7950:	2200      	movs	r2, #0
    7952:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    7954:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7956:	0019      	movs	r1, r3
    7958:	2003      	movs	r0, #3
    795a:	4b02      	ldr	r3, [pc, #8]	; (7964 <nmi_spi_write+0x1c>)
    795c:	4798      	blx	r3
}
    795e:	b005      	add	sp, #20
    7960:	bd00      	pop	{pc}
    7962:	46c0      	nop			; (mov r8, r8)
    7964:	00005fb1 	.word	0x00005fb1

00007968 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    7968:	b570      	push	{r4, r5, r6, lr}
    796a:	b084      	sub	sp, #16
    796c:	ac08      	add	r4, sp, #32
    796e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    7970:	ac01      	add	r4, sp, #4
    7972:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    7974:	303f      	adds	r0, #63	; 0x3f
    7976:	b2c4      	uxtb	r4, r0
    7978:	2c0e      	cmp	r4, #14
    797a:	d900      	bls.n	797e <spi_cmd+0x16>
    797c:	e084      	b.n	7a88 <spi_cmd+0x120>
    797e:	00a0      	lsls	r0, r4, #2
    7980:	4c4f      	ldr	r4, [pc, #316]	; (7ac0 <spi_cmd+0x158>)
    7982:	5820      	ldr	r0, [r4, r0]
    7984:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    7986:	ab01      	add	r3, sp, #4
    7988:	0c0a      	lsrs	r2, r1, #16
    798a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    798c:	0a0a      	lsrs	r2, r1, #8
    798e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    7990:	70d9      	strb	r1, [r3, #3]
		len = 5;
    7992:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    7994:	4b4b      	ldr	r3, [pc, #300]	; (7ac4 <spi_cmd+0x15c>)
    7996:	781b      	ldrb	r3, [r3, #0]
    7998:	2b00      	cmp	r3, #0
    799a:	d077      	beq.n	7a8c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    799c:	3901      	subs	r1, #1
    799e:	b2c9      	uxtb	r1, r1
    79a0:	e083      	b.n	7aaa <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    79a2:	0a0b      	lsrs	r3, r1, #8
    79a4:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    79a6:	2d00      	cmp	r5, #0
    79a8:	d107      	bne.n	79ba <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    79aa:	aa01      	add	r2, sp, #4
    79ac:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    79ae:	ab01      	add	r3, sp, #4
    79b0:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    79b2:	2200      	movs	r2, #0
    79b4:	70da      	strb	r2, [r3, #3]
		len = 5;
    79b6:	2105      	movs	r1, #5
		break;
    79b8:	e7ec      	b.n	7994 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    79ba:	2280      	movs	r2, #128	; 0x80
    79bc:	4252      	negs	r2, r2
    79be:	4313      	orrs	r3, r2
    79c0:	aa01      	add	r2, sp, #4
    79c2:	7053      	strb	r3, [r2, #1]
    79c4:	e7f3      	b.n	79ae <spi_cmd+0x46>
		bc[1] = 0x00;
    79c6:	ab01      	add	r3, sp, #4
    79c8:	2200      	movs	r2, #0
    79ca:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    79cc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    79ce:	70da      	strb	r2, [r3, #3]
		len = 5;
    79d0:	2105      	movs	r1, #5
		break;
    79d2:	e7df      	b.n	7994 <spi_cmd+0x2c>
		bc[1] = 0x00;
    79d4:	ab01      	add	r3, sp, #4
    79d6:	2200      	movs	r2, #0
    79d8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    79da:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    79dc:	70da      	strb	r2, [r3, #3]
		len = 5;
    79de:	2105      	movs	r1, #5
		break;
    79e0:	e7d8      	b.n	7994 <spi_cmd+0x2c>
		bc[1] = 0xff;
    79e2:	ab01      	add	r3, sp, #4
    79e4:	22ff      	movs	r2, #255	; 0xff
    79e6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    79e8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    79ea:	70da      	strb	r2, [r3, #3]
		len = 5;
    79ec:	2105      	movs	r1, #5
		break;
    79ee:	e7d1      	b.n	7994 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    79f0:	aa01      	add	r2, sp, #4
    79f2:	0c08      	lsrs	r0, r1, #16
    79f4:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    79f6:	0a08      	lsrs	r0, r1, #8
    79f8:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    79fa:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    79fc:	0a19      	lsrs	r1, r3, #8
    79fe:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    7a00:	7153      	strb	r3, [r2, #5]
		len = 7;
    7a02:	2107      	movs	r1, #7
		break;
    7a04:	e7c6      	b.n	7994 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    7a06:	aa01      	add	r2, sp, #4
    7a08:	0c08      	lsrs	r0, r1, #16
    7a0a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    7a0c:	0a08      	lsrs	r0, r1, #8
    7a0e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    7a10:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    7a12:	0c19      	lsrs	r1, r3, #16
    7a14:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    7a16:	0a19      	lsrs	r1, r3, #8
    7a18:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    7a1a:	7193      	strb	r3, [r2, #6]
		len = 8;
    7a1c:	2108      	movs	r1, #8
		break;
    7a1e:	e7b9      	b.n	7994 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    7a20:	0a0b      	lsrs	r3, r1, #8
    7a22:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    7a24:	2d00      	cmp	r5, #0
    7a26:	d10c      	bne.n	7a42 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    7a28:	a801      	add	r0, sp, #4
    7a2a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    7a2c:	ab01      	add	r3, sp, #4
    7a2e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    7a30:	0e11      	lsrs	r1, r2, #24
    7a32:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    7a34:	0c11      	lsrs	r1, r2, #16
    7a36:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    7a38:	0a11      	lsrs	r1, r2, #8
    7a3a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    7a3c:	719a      	strb	r2, [r3, #6]
		len = 8;
    7a3e:	2108      	movs	r1, #8
		break;
    7a40:	e7a8      	b.n	7994 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    7a42:	2080      	movs	r0, #128	; 0x80
    7a44:	4240      	negs	r0, r0
    7a46:	4303      	orrs	r3, r0
    7a48:	a801      	add	r0, sp, #4
    7a4a:	7043      	strb	r3, [r0, #1]
    7a4c:	e7ee      	b.n	7a2c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    7a4e:	ab01      	add	r3, sp, #4
    7a50:	0c08      	lsrs	r0, r1, #16
    7a52:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    7a54:	0a08      	lsrs	r0, r1, #8
    7a56:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    7a58:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    7a5a:	0e11      	lsrs	r1, r2, #24
    7a5c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    7a5e:	0c11      	lsrs	r1, r2, #16
    7a60:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    7a62:	0a11      	lsrs	r1, r2, #8
    7a64:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    7a66:	71da      	strb	r2, [r3, #7]
		len = 9;
    7a68:	2109      	movs	r1, #9
		break;
    7a6a:	e793      	b.n	7994 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    7a6c:	2228      	movs	r2, #40	; 0x28
    7a6e:	32ff      	adds	r2, #255	; 0xff
    7a70:	4915      	ldr	r1, [pc, #84]	; (7ac8 <spi_cmd+0x160>)
    7a72:	4816      	ldr	r0, [pc, #88]	; (7acc <spi_cmd+0x164>)
    7a74:	4b16      	ldr	r3, [pc, #88]	; (7ad0 <spi_cmd+0x168>)
    7a76:	4798      	blx	r3
    7a78:	4816      	ldr	r0, [pc, #88]	; (7ad4 <spi_cmd+0x16c>)
    7a7a:	4b17      	ldr	r3, [pc, #92]	; (7ad8 <spi_cmd+0x170>)
    7a7c:	4798      	blx	r3
    7a7e:	200d      	movs	r0, #13
    7a80:	4b16      	ldr	r3, [pc, #88]	; (7adc <spi_cmd+0x174>)
    7a82:	4798      	blx	r3
			result = N_FAIL;
    7a84:	2300      	movs	r3, #0
    7a86:	e017      	b.n	7ab8 <spi_cmd+0x150>
	switch (cmd) {
    7a88:	2300      	movs	r3, #0
    7a8a:	e015      	b.n	7ab8 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    7a8c:	1e4e      	subs	r6, r1, #1
    7a8e:	aa01      	add	r2, sp, #4
    7a90:	1995      	adds	r5, r2, r6
    7a92:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    7a94:	4c12      	ldr	r4, [pc, #72]	; (7ae0 <spi_cmd+0x178>)
    7a96:	005b      	lsls	r3, r3, #1
    7a98:	7810      	ldrb	r0, [r2, #0]
    7a9a:	4043      	eors	r3, r0
    7a9c:	5ce3      	ldrb	r3, [r4, r3]
    7a9e:	3201      	adds	r2, #1
	while (len--)
    7aa0:	42aa      	cmp	r2, r5
    7aa2:	d1f8      	bne.n	7a96 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    7aa4:	005b      	lsls	r3, r3, #1
    7aa6:	aa01      	add	r2, sp, #4
    7aa8:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    7aaa:	b289      	uxth	r1, r1
    7aac:	a801      	add	r0, sp, #4
    7aae:	4b0d      	ldr	r3, [pc, #52]	; (7ae4 <spi_cmd+0x17c>)
    7ab0:	4798      	blx	r3
    7ab2:	2301      	movs	r3, #1
    7ab4:	2800      	cmp	r0, #0
    7ab6:	d1d9      	bne.n	7a6c <spi_cmd+0x104>
		}
	}

	return result;
}
    7ab8:	0018      	movs	r0, r3
    7aba:	b004      	add	sp, #16
    7abc:	bd70      	pop	{r4, r5, r6, pc}
    7abe:	46c0      	nop			; (mov r8, r8)
    7ac0:	00011ea8 	.word	0x00011ea8
    7ac4:	20000268 	.word	0x20000268
    7ac8:	00011ee8 	.word	0x00011ee8
    7acc:	00011824 	.word	0x00011824
    7ad0:	0000bb3d 	.word	0x0000bb3d
    7ad4:	00012378 	.word	0x00012378
    7ad8:	0000bc59 	.word	0x0000bc59
    7adc:	0000bb71 	.word	0x0000bb71
    7ae0:	00011f74 	.word	0x00011f74
    7ae4:	00007949 	.word	0x00007949

00007ae8 <nmi_spi_read>:
{
    7ae8:	b500      	push	{lr}
    7aea:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    7aec:	ab01      	add	r3, sp, #4
    7aee:	2200      	movs	r2, #0
    7af0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    7af2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    7af4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7af6:	0019      	movs	r1, r3
    7af8:	2003      	movs	r0, #3
    7afa:	4b02      	ldr	r3, [pc, #8]	; (7b04 <nmi_spi_read+0x1c>)
    7afc:	4798      	blx	r3
}
    7afe:	b005      	add	sp, #20
    7b00:	bd00      	pop	{pc}
    7b02:	46c0      	nop			; (mov r8, r8)
    7b04:	00005fb1 	.word	0x00005fb1

00007b08 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    7b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b0a:	46c6      	mov	lr, r8
    7b0c:	b500      	push	{lr}
    7b0e:	b082      	sub	sp, #8
    7b10:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    7b12:	28cf      	cmp	r0, #207	; 0xcf
    7b14:	d02b      	beq.n	7b6e <spi_cmd_rsp+0x66>
    7b16:	0003      	movs	r3, r0
    7b18:	333b      	adds	r3, #59	; 0x3b
    7b1a:	b2db      	uxtb	r3, r3
    7b1c:	2b01      	cmp	r3, #1
    7b1e:	d926      	bls.n	7b6e <spi_cmd_rsp+0x66>
{
    7b20:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7b22:	466b      	mov	r3, sp
    7b24:	1dde      	adds	r6, r3, #7
    7b26:	4b26      	ldr	r3, [pc, #152]	; (7bc0 <spi_cmd_rsp+0xb8>)
    7b28:	4698      	mov	r8, r3
    7b2a:	2101      	movs	r1, #1
    7b2c:	0030      	movs	r0, r6
    7b2e:	47c0      	blx	r8
    7b30:	1e05      	subs	r5, r0, #0
    7b32:	d125      	bne.n	7b80 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    7b34:	7833      	ldrb	r3, [r6, #0]
    7b36:	42bb      	cmp	r3, r7
    7b38:	d030      	beq.n	7b9c <spi_cmd_rsp+0x94>
    7b3a:	3c01      	subs	r4, #1
    7b3c:	b2e4      	uxtb	r4, r4
    7b3e:	2c00      	cmp	r4, #0
    7b40:	d1f3      	bne.n	7b2a <spi_cmd_rsp+0x22>
    7b42:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7b44:	466b      	mov	r3, sp
    7b46:	1dde      	adds	r6, r3, #7
    7b48:	4f1d      	ldr	r7, [pc, #116]	; (7bc0 <spi_cmd_rsp+0xb8>)
    7b4a:	2101      	movs	r1, #1
    7b4c:	0030      	movs	r0, r6
    7b4e:	47b8      	blx	r7
    7b50:	2800      	cmp	r0, #0
    7b52:	d125      	bne.n	7ba0 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    7b54:	7833      	ldrb	r3, [r6, #0]
    7b56:	2b00      	cmp	r3, #0
    7b58:	d02f      	beq.n	7bba <spi_cmd_rsp+0xb2>
    7b5a:	3c01      	subs	r4, #1
    7b5c:	b2e4      	uxtb	r4, r4
    7b5e:	2c00      	cmp	r4, #0
    7b60:	d1f3      	bne.n	7b4a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    7b62:	2501      	movs	r5, #1

_fail_:

	return result;
}
    7b64:	0028      	movs	r0, r5
    7b66:	b002      	add	sp, #8
    7b68:	bc04      	pop	{r2}
    7b6a:	4690      	mov	r8, r2
    7b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7b6e:	2101      	movs	r1, #1
    7b70:	466b      	mov	r3, sp
    7b72:	1dd8      	adds	r0, r3, #7
    7b74:	4b12      	ldr	r3, [pc, #72]	; (7bc0 <spi_cmd_rsp+0xb8>)
    7b76:	4798      	blx	r3
			result = N_FAIL;
    7b78:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7b7a:	2800      	cmp	r0, #0
    7b7c:	d0d0      	beq.n	7b20 <spi_cmd_rsp+0x18>
    7b7e:	e7f1      	b.n	7b64 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    7b80:	22b1      	movs	r2, #177	; 0xb1
    7b82:	0052      	lsls	r2, r2, #1
    7b84:	490f      	ldr	r1, [pc, #60]	; (7bc4 <spi_cmd_rsp+0xbc>)
    7b86:	4810      	ldr	r0, [pc, #64]	; (7bc8 <spi_cmd_rsp+0xc0>)
    7b88:	4b10      	ldr	r3, [pc, #64]	; (7bcc <spi_cmd_rsp+0xc4>)
    7b8a:	4798      	blx	r3
    7b8c:	4810      	ldr	r0, [pc, #64]	; (7bd0 <spi_cmd_rsp+0xc8>)
    7b8e:	4b11      	ldr	r3, [pc, #68]	; (7bd4 <spi_cmd_rsp+0xcc>)
    7b90:	4798      	blx	r3
    7b92:	200d      	movs	r0, #13
    7b94:	4b10      	ldr	r3, [pc, #64]	; (7bd8 <spi_cmd_rsp+0xd0>)
    7b96:	4798      	blx	r3
			result = N_FAIL;
    7b98:	2500      	movs	r5, #0
			goto _fail_;
    7b9a:	e7e3      	b.n	7b64 <spi_cmd_rsp+0x5c>
    7b9c:	240b      	movs	r4, #11
    7b9e:	e7d1      	b.n	7b44 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    7ba0:	22b8      	movs	r2, #184	; 0xb8
    7ba2:	0052      	lsls	r2, r2, #1
    7ba4:	4907      	ldr	r1, [pc, #28]	; (7bc4 <spi_cmd_rsp+0xbc>)
    7ba6:	4808      	ldr	r0, [pc, #32]	; (7bc8 <spi_cmd_rsp+0xc0>)
    7ba8:	4b08      	ldr	r3, [pc, #32]	; (7bcc <spi_cmd_rsp+0xc4>)
    7baa:	4798      	blx	r3
    7bac:	4808      	ldr	r0, [pc, #32]	; (7bd0 <spi_cmd_rsp+0xc8>)
    7bae:	4b09      	ldr	r3, [pc, #36]	; (7bd4 <spi_cmd_rsp+0xcc>)
    7bb0:	4798      	blx	r3
    7bb2:	200d      	movs	r0, #13
    7bb4:	4b08      	ldr	r3, [pc, #32]	; (7bd8 <spi_cmd_rsp+0xd0>)
    7bb6:	4798      	blx	r3
			goto _fail_;
    7bb8:	e7d4      	b.n	7b64 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    7bba:	2501      	movs	r5, #1
    7bbc:	e7d2      	b.n	7b64 <spi_cmd_rsp+0x5c>
    7bbe:	46c0      	nop			; (mov r8, r8)
    7bc0:	00007ae9 	.word	0x00007ae9
    7bc4:	00011f00 	.word	0x00011f00
    7bc8:	00011824 	.word	0x00011824
    7bcc:	0000bb3d 	.word	0x0000bb3d
    7bd0:	000123a4 	.word	0x000123a4
    7bd4:	0000bc59 	.word	0x0000bc59
    7bd8:	0000bb71 	.word	0x0000bb71

00007bdc <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    7bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bde:	46de      	mov	lr, fp
    7be0:	4657      	mov	r7, sl
    7be2:	464e      	mov	r6, r9
    7be4:	4645      	mov	r5, r8
    7be6:	b5e0      	push	{r5, r6, r7, lr}
    7be8:	b087      	sub	sp, #28
    7bea:	9001      	str	r0, [sp, #4]
    7bec:	4689      	mov	r9, r1
    7bee:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    7bf0:	2300      	movs	r3, #0
    7bf2:	469a      	mov	sl, r3
    7bf4:	2380      	movs	r3, #128	; 0x80
    7bf6:	019b      	lsls	r3, r3, #6
    7bf8:	469b      	mov	fp, r3
    7bfa:	466a      	mov	r2, sp
    7bfc:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7bfe:	4b3b      	ldr	r3, [pc, #236]	; (7cec <spi_data_read+0x110>)
    7c00:	4698      	mov	r8, r3
    7c02:	e02e      	b.n	7c62 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    7c04:	4a3a      	ldr	r2, [pc, #232]	; (7cf0 <spi_data_read+0x114>)
    7c06:	493b      	ldr	r1, [pc, #236]	; (7cf4 <spi_data_read+0x118>)
    7c08:	483b      	ldr	r0, [pc, #236]	; (7cf8 <spi_data_read+0x11c>)
    7c0a:	4b3c      	ldr	r3, [pc, #240]	; (7cfc <spi_data_read+0x120>)
    7c0c:	4798      	blx	r3
    7c0e:	483c      	ldr	r0, [pc, #240]	; (7d00 <spi_data_read+0x124>)
    7c10:	4b3c      	ldr	r3, [pc, #240]	; (7d04 <spi_data_read+0x128>)
    7c12:	4798      	blx	r3
    7c14:	200d      	movs	r0, #13
    7c16:	4b3c      	ldr	r3, [pc, #240]	; (7d08 <spi_data_read+0x12c>)
    7c18:	4798      	blx	r3
    7c1a:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    7c1c:	0028      	movs	r0, r5
    7c1e:	b007      	add	sp, #28
    7c20:	bc3c      	pop	{r2, r3, r4, r5}
    7c22:	4690      	mov	r8, r2
    7c24:	4699      	mov	r9, r3
    7c26:	46a2      	mov	sl, r4
    7c28:	46ab      	mov	fp, r5
    7c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    7c2c:	2c00      	cmp	r4, #0
    7c2e:	dd2e      	ble.n	7c8e <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    7c30:	9b01      	ldr	r3, [sp, #4]
    7c32:	4453      	add	r3, sl
    7c34:	0018      	movs	r0, r3
    7c36:	0039      	movs	r1, r7
    7c38:	4b2c      	ldr	r3, [pc, #176]	; (7cec <spi_data_read+0x110>)
    7c3a:	4798      	blx	r3
    7c3c:	1e04      	subs	r4, r0, #0
    7c3e:	d133      	bne.n	7ca8 <spi_data_read+0xcc>
		if(!clockless)
    7c40:	9b02      	ldr	r3, [sp, #8]
    7c42:	2b00      	cmp	r3, #0
    7c44:	d103      	bne.n	7c4e <spi_data_read+0x72>
			if (!gu8Crc_off) {
    7c46:	4b31      	ldr	r3, [pc, #196]	; (7d0c <spi_data_read+0x130>)
    7c48:	781b      	ldrb	r3, [r3, #0]
    7c4a:	2b00      	cmp	r3, #0
    7c4c:	d039      	beq.n	7cc2 <spi_data_read+0xe6>
		ix += nbytes;
    7c4e:	4653      	mov	r3, sl
    7c50:	18fb      	adds	r3, r7, r3
    7c52:	b21b      	sxth	r3, r3
    7c54:	469a      	mov	sl, r3
		sz -= nbytes;
    7c56:	464b      	mov	r3, r9
    7c58:	1bdf      	subs	r7, r3, r7
    7c5a:	b2bb      	uxth	r3, r7
    7c5c:	4699      	mov	r9, r3
	} while (sz);
    7c5e:	2b00      	cmp	r3, #0
    7c60:	d042      	beq.n	7ce8 <spi_data_read+0x10c>
    7c62:	464f      	mov	r7, r9
    7c64:	45d9      	cmp	r9, fp
    7c66:	d901      	bls.n	7c6c <spi_data_read+0x90>
    7c68:	466b      	mov	r3, sp
    7c6a:	89df      	ldrh	r7, [r3, #14]
    7c6c:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    7c6e:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7c70:	ab04      	add	r3, sp, #16
    7c72:	1cde      	adds	r6, r3, #3
    7c74:	2101      	movs	r1, #1
    7c76:	0030      	movs	r0, r6
    7c78:	47c0      	blx	r8
    7c7a:	1e05      	subs	r5, r0, #0
    7c7c:	d1c2      	bne.n	7c04 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    7c7e:	7833      	ldrb	r3, [r6, #0]
    7c80:	091b      	lsrs	r3, r3, #4
    7c82:	2b0f      	cmp	r3, #15
    7c84:	d0d2      	beq.n	7c2c <spi_data_read+0x50>
    7c86:	3c01      	subs	r4, #1
    7c88:	b224      	sxth	r4, r4
		} while (retry--);
    7c8a:	1c63      	adds	r3, r4, #1
    7c8c:	d1f2      	bne.n	7c74 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    7c8e:	4a20      	ldr	r2, [pc, #128]	; (7d10 <spi_data_read+0x134>)
    7c90:	4918      	ldr	r1, [pc, #96]	; (7cf4 <spi_data_read+0x118>)
    7c92:	4819      	ldr	r0, [pc, #100]	; (7cf8 <spi_data_read+0x11c>)
    7c94:	4c19      	ldr	r4, [pc, #100]	; (7cfc <spi_data_read+0x120>)
    7c96:	47a0      	blx	r4
    7c98:	ab04      	add	r3, sp, #16
    7c9a:	78d9      	ldrb	r1, [r3, #3]
    7c9c:	481d      	ldr	r0, [pc, #116]	; (7d14 <spi_data_read+0x138>)
    7c9e:	47a0      	blx	r4
    7ca0:	200d      	movs	r0, #13
    7ca2:	4b19      	ldr	r3, [pc, #100]	; (7d08 <spi_data_read+0x12c>)
    7ca4:	4798      	blx	r3
			break;
    7ca6:	e7b9      	b.n	7c1c <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    7ca8:	22c5      	movs	r2, #197	; 0xc5
    7caa:	0092      	lsls	r2, r2, #2
    7cac:	4911      	ldr	r1, [pc, #68]	; (7cf4 <spi_data_read+0x118>)
    7cae:	4812      	ldr	r0, [pc, #72]	; (7cf8 <spi_data_read+0x11c>)
    7cb0:	4b12      	ldr	r3, [pc, #72]	; (7cfc <spi_data_read+0x120>)
    7cb2:	4798      	blx	r3
    7cb4:	4818      	ldr	r0, [pc, #96]	; (7d18 <spi_data_read+0x13c>)
    7cb6:	4b13      	ldr	r3, [pc, #76]	; (7d04 <spi_data_read+0x128>)
    7cb8:	4798      	blx	r3
    7cba:	200d      	movs	r0, #13
    7cbc:	4b12      	ldr	r3, [pc, #72]	; (7d08 <spi_data_read+0x12c>)
    7cbe:	4798      	blx	r3
			break;
    7cc0:	e7ac      	b.n	7c1c <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    7cc2:	2102      	movs	r1, #2
    7cc4:	a805      	add	r0, sp, #20
    7cc6:	4b09      	ldr	r3, [pc, #36]	; (7cec <spi_data_read+0x110>)
    7cc8:	4798      	blx	r3
    7cca:	2800      	cmp	r0, #0
    7ccc:	d0bf      	beq.n	7c4e <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    7cce:	4a13      	ldr	r2, [pc, #76]	; (7d1c <spi_data_read+0x140>)
    7cd0:	4908      	ldr	r1, [pc, #32]	; (7cf4 <spi_data_read+0x118>)
    7cd2:	4809      	ldr	r0, [pc, #36]	; (7cf8 <spi_data_read+0x11c>)
    7cd4:	4b09      	ldr	r3, [pc, #36]	; (7cfc <spi_data_read+0x120>)
    7cd6:	4798      	blx	r3
    7cd8:	4811      	ldr	r0, [pc, #68]	; (7d20 <spi_data_read+0x144>)
    7cda:	4b0a      	ldr	r3, [pc, #40]	; (7d04 <spi_data_read+0x128>)
    7cdc:	4798      	blx	r3
    7cde:	200d      	movs	r0, #13
    7ce0:	4b09      	ldr	r3, [pc, #36]	; (7d08 <spi_data_read+0x12c>)
    7ce2:	4798      	blx	r3
					result = N_FAIL;
    7ce4:	0025      	movs	r5, r4
					break;
    7ce6:	e799      	b.n	7c1c <spi_data_read+0x40>
    7ce8:	2501      	movs	r5, #1
    7cea:	e797      	b.n	7c1c <spi_data_read+0x40>
    7cec:	00007ae9 	.word	0x00007ae9
    7cf0:	000002ff 	.word	0x000002ff
    7cf4:	00011f0c 	.word	0x00011f0c
    7cf8:	00011824 	.word	0x00011824
    7cfc:	0000bb3d 	.word	0x0000bb3d
    7d00:	000123d8 	.word	0x000123d8
    7d04:	0000bc59 	.word	0x0000bc59
    7d08:	0000bb71 	.word	0x0000bb71
    7d0c:	20000268 	.word	0x20000268
    7d10:	0000030b 	.word	0x0000030b
    7d14:	0001240c 	.word	0x0001240c
    7d18:	0001243c 	.word	0x0001243c
    7d1c:	0000031f 	.word	0x0000031f
    7d20:	0001246c 	.word	0x0001246c

00007d24 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    7d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d26:	46d6      	mov	lr, sl
    7d28:	464f      	mov	r7, r9
    7d2a:	4646      	mov	r6, r8
    7d2c:	b5c0      	push	{r6, r7, lr}
    7d2e:	b086      	sub	sp, #24
    7d30:	9003      	str	r0, [sp, #12]
    7d32:	9104      	str	r1, [sp, #16]
    7d34:	2830      	cmp	r0, #48	; 0x30
    7d36:	d80f      	bhi.n	7d58 <spi_write_reg+0x34>
    7d38:	4b30      	ldr	r3, [pc, #192]	; (7dfc <spi_write_reg+0xd8>)
    7d3a:	781f      	ldrb	r7, [r3, #0]
    7d3c:	b2fb      	uxtb	r3, r7
    7d3e:	9305      	str	r3, [sp, #20]
    7d40:	2300      	movs	r3, #0
    7d42:	2230      	movs	r2, #48	; 0x30
    7d44:	9903      	ldr	r1, [sp, #12]
    7d46:	428a      	cmp	r2, r1
    7d48:	415b      	adcs	r3, r3
    7d4a:	b2db      	uxtb	r3, r3
    7d4c:	469a      	mov	sl, r3
    7d4e:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    7d50:	4b2b      	ldr	r3, [pc, #172]	; (7e00 <spi_write_reg+0xdc>)
    7d52:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    7d54:	46d1      	mov	r9, sl
    7d56:	e033      	b.n	7dc0 <spi_write_reg+0x9c>
    7d58:	4b2a      	ldr	r3, [pc, #168]	; (7e04 <spi_write_reg+0xe0>)
    7d5a:	781f      	ldrb	r7, [r3, #0]
    7d5c:	e7ee      	b.n	7d3c <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    7d5e:	9805      	ldr	r0, [sp, #20]
    7d60:	4b29      	ldr	r3, [pc, #164]	; (7e08 <spi_write_reg+0xe4>)
    7d62:	4798      	blx	r3
    7d64:	0004      	movs	r4, r0
	if (result != N_OK) {
    7d66:	2801      	cmp	r0, #1
    7d68:	d041      	beq.n	7dee <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    7d6a:	22e7      	movs	r2, #231	; 0xe7
    7d6c:	0092      	lsls	r2, r2, #2
    7d6e:	4927      	ldr	r1, [pc, #156]	; (7e0c <spi_write_reg+0xe8>)
    7d70:	4827      	ldr	r0, [pc, #156]	; (7e10 <spi_write_reg+0xec>)
    7d72:	4e28      	ldr	r6, [pc, #160]	; (7e14 <spi_write_reg+0xf0>)
    7d74:	47b0      	blx	r6
    7d76:	9903      	ldr	r1, [sp, #12]
    7d78:	4827      	ldr	r0, [pc, #156]	; (7e18 <spi_write_reg+0xf4>)
    7d7a:	47b0      	blx	r6
    7d7c:	200d      	movs	r0, #13
    7d7e:	4b27      	ldr	r3, [pc, #156]	; (7e1c <spi_write_reg+0xf8>)
    7d80:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    7d82:	2001      	movs	r0, #1
    7d84:	4e26      	ldr	r6, [pc, #152]	; (7e20 <spi_write_reg+0xfc>)
    7d86:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7d88:	2300      	movs	r3, #0
    7d8a:	9300      	str	r3, [sp, #0]
    7d8c:	2200      	movs	r2, #0
    7d8e:	2100      	movs	r1, #0
    7d90:	20cf      	movs	r0, #207	; 0xcf
    7d92:	4f1b      	ldr	r7, [pc, #108]	; (7e00 <spi_write_reg+0xdc>)
    7d94:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    7d96:	20cf      	movs	r0, #207	; 0xcf
    7d98:	4b1b      	ldr	r3, [pc, #108]	; (7e08 <spi_write_reg+0xe4>)
    7d9a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    7d9c:	4a21      	ldr	r2, [pc, #132]	; (7e24 <spi_write_reg+0x100>)
    7d9e:	491b      	ldr	r1, [pc, #108]	; (7e0c <spi_write_reg+0xe8>)
    7da0:	481b      	ldr	r0, [pc, #108]	; (7e10 <spi_write_reg+0xec>)
    7da2:	4f1c      	ldr	r7, [pc, #112]	; (7e14 <spi_write_reg+0xf0>)
    7da4:	47b8      	blx	r7
    7da6:	9b04      	ldr	r3, [sp, #16]
    7da8:	9a03      	ldr	r2, [sp, #12]
    7daa:	0029      	movs	r1, r5
    7dac:	481e      	ldr	r0, [pc, #120]	; (7e28 <spi_write_reg+0x104>)
    7dae:	47b8      	blx	r7
    7db0:	200d      	movs	r0, #13
    7db2:	4b1a      	ldr	r3, [pc, #104]	; (7e1c <spi_write_reg+0xf8>)
    7db4:	4798      	blx	r3
		nm_bsp_sleep(1);
    7db6:	2001      	movs	r0, #1
    7db8:	47b0      	blx	r6
    7dba:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    7dbc:	2d00      	cmp	r5, #0
    7dbe:	d016      	beq.n	7dee <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    7dc0:	464b      	mov	r3, r9
    7dc2:	9300      	str	r3, [sp, #0]
    7dc4:	2304      	movs	r3, #4
    7dc6:	9a04      	ldr	r2, [sp, #16]
    7dc8:	9f03      	ldr	r7, [sp, #12]
    7dca:	0039      	movs	r1, r7
    7dcc:	9805      	ldr	r0, [sp, #20]
    7dce:	47c0      	blx	r8
    7dd0:	0004      	movs	r4, r0
	if (result != N_OK) {
    7dd2:	2801      	cmp	r0, #1
    7dd4:	d0c3      	beq.n	7d5e <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    7dd6:	4a15      	ldr	r2, [pc, #84]	; (7e2c <spi_write_reg+0x108>)
    7dd8:	490c      	ldr	r1, [pc, #48]	; (7e0c <spi_write_reg+0xe8>)
    7dda:	480d      	ldr	r0, [pc, #52]	; (7e10 <spi_write_reg+0xec>)
    7ddc:	4e0d      	ldr	r6, [pc, #52]	; (7e14 <spi_write_reg+0xf0>)
    7dde:	47b0      	blx	r6
    7de0:	0039      	movs	r1, r7
    7de2:	4813      	ldr	r0, [pc, #76]	; (7e30 <spi_write_reg+0x10c>)
    7de4:	47b0      	blx	r6
    7de6:	200d      	movs	r0, #13
    7de8:	4b0c      	ldr	r3, [pc, #48]	; (7e1c <spi_write_reg+0xf8>)
    7dea:	4798      	blx	r3
		goto _FAIL_;
    7dec:	e7c9      	b.n	7d82 <spi_write_reg+0x5e>
	}

	return result;
}
    7dee:	0020      	movs	r0, r4
    7df0:	b006      	add	sp, #24
    7df2:	bc1c      	pop	{r2, r3, r4}
    7df4:	4690      	mov	r8, r2
    7df6:	4699      	mov	r9, r3
    7df8:	46a2      	mov	sl, r4
    7dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dfc:	00011ee4 	.word	0x00011ee4
    7e00:	00007969 	.word	0x00007969
    7e04:	00011ee5 	.word	0x00011ee5
    7e08:	00007b09 	.word	0x00007b09
    7e0c:	00011f2c 	.word	0x00011f2c
    7e10:	00011824 	.word	0x00011824
    7e14:	0000bb3d 	.word	0x0000bb3d
    7e18:	00012564 	.word	0x00012564
    7e1c:	0000bb71 	.word	0x0000bb71
    7e20:	00005d75 	.word	0x00005d75
    7e24:	000003af 	.word	0x000003af
    7e28:	0001259c 	.word	0x0001259c
    7e2c:	00000396 	.word	0x00000396
    7e30:	00012538 	.word	0x00012538

00007e34 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    7e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e36:	46de      	mov	lr, fp
    7e38:	4657      	mov	r7, sl
    7e3a:	464e      	mov	r6, r9
    7e3c:	4645      	mov	r5, r8
    7e3e:	b5e0      	push	{r5, r6, r7, lr}
    7e40:	b087      	sub	sp, #28
    7e42:	9002      	str	r0, [sp, #8]
    7e44:	468b      	mov	fp, r1
    7e46:	28ff      	cmp	r0, #255	; 0xff
    7e48:	d80f      	bhi.n	7e6a <spi_read_reg+0x36>
    7e4a:	4b41      	ldr	r3, [pc, #260]	; (7f50 <spi_read_reg+0x11c>)
    7e4c:	781f      	ldrb	r7, [r3, #0]
    7e4e:	b2fb      	uxtb	r3, r7
    7e50:	9303      	str	r3, [sp, #12]
    7e52:	2300      	movs	r3, #0
    7e54:	22ff      	movs	r2, #255	; 0xff
    7e56:	9902      	ldr	r1, [sp, #8]
    7e58:	428a      	cmp	r2, r1
    7e5a:	415b      	adcs	r3, r3
    7e5c:	b2db      	uxtb	r3, r3
    7e5e:	469a      	mov	sl, r3
    7e60:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7e62:	4b3c      	ldr	r3, [pc, #240]	; (7f54 <spi_read_reg+0x120>)
    7e64:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    7e66:	46d1      	mov	r9, sl
    7e68:	e031      	b.n	7ece <spi_read_reg+0x9a>
    7e6a:	4b3b      	ldr	r3, [pc, #236]	; (7f58 <spi_read_reg+0x124>)
    7e6c:	781f      	ldrb	r7, [r3, #0]
    7e6e:	e7ee      	b.n	7e4e <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    7e70:	9803      	ldr	r0, [sp, #12]
    7e72:	4b3a      	ldr	r3, [pc, #232]	; (7f5c <spi_read_reg+0x128>)
    7e74:	4798      	blx	r3
    7e76:	0004      	movs	r4, r0
	if (result != N_OK) {
    7e78:	2801      	cmp	r0, #1
    7e7a:	d03f      	beq.n	7efc <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    7e7c:	4a38      	ldr	r2, [pc, #224]	; (7f60 <spi_read_reg+0x12c>)
    7e7e:	4939      	ldr	r1, [pc, #228]	; (7f64 <spi_read_reg+0x130>)
    7e80:	4839      	ldr	r0, [pc, #228]	; (7f68 <spi_read_reg+0x134>)
    7e82:	4e3a      	ldr	r6, [pc, #232]	; (7f6c <spi_read_reg+0x138>)
    7e84:	47b0      	blx	r6
    7e86:	9902      	ldr	r1, [sp, #8]
    7e88:	4839      	ldr	r0, [pc, #228]	; (7f70 <spi_read_reg+0x13c>)
    7e8a:	47b0      	blx	r6
    7e8c:	200d      	movs	r0, #13
    7e8e:	4b39      	ldr	r3, [pc, #228]	; (7f74 <spi_read_reg+0x140>)
    7e90:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    7e92:	2001      	movs	r0, #1
    7e94:	4e38      	ldr	r6, [pc, #224]	; (7f78 <spi_read_reg+0x144>)
    7e96:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7e98:	2300      	movs	r3, #0
    7e9a:	9300      	str	r3, [sp, #0]
    7e9c:	2200      	movs	r2, #0
    7e9e:	2100      	movs	r1, #0
    7ea0:	20cf      	movs	r0, #207	; 0xcf
    7ea2:	4f2c      	ldr	r7, [pc, #176]	; (7f54 <spi_read_reg+0x120>)
    7ea4:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    7ea6:	20cf      	movs	r0, #207	; 0xcf
    7ea8:	4b2c      	ldr	r3, [pc, #176]	; (7f5c <spi_read_reg+0x128>)
    7eaa:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    7eac:	4a33      	ldr	r2, [pc, #204]	; (7f7c <spi_read_reg+0x148>)
    7eae:	492d      	ldr	r1, [pc, #180]	; (7f64 <spi_read_reg+0x130>)
    7eb0:	482d      	ldr	r0, [pc, #180]	; (7f68 <spi_read_reg+0x134>)
    7eb2:	4f2e      	ldr	r7, [pc, #184]	; (7f6c <spi_read_reg+0x138>)
    7eb4:	47b8      	blx	r7
    7eb6:	9a02      	ldr	r2, [sp, #8]
    7eb8:	0029      	movs	r1, r5
    7eba:	4831      	ldr	r0, [pc, #196]	; (7f80 <spi_read_reg+0x14c>)
    7ebc:	47b8      	blx	r7
    7ebe:	200d      	movs	r0, #13
    7ec0:	4b2c      	ldr	r3, [pc, #176]	; (7f74 <spi_read_reg+0x140>)
    7ec2:	4798      	blx	r3
		nm_bsp_sleep(1);
    7ec4:	2001      	movs	r0, #1
    7ec6:	47b0      	blx	r6
    7ec8:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    7eca:	2d00      	cmp	r5, #0
    7ecc:	d037      	beq.n	7f3e <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7ece:	464b      	mov	r3, r9
    7ed0:	9300      	str	r3, [sp, #0]
    7ed2:	2304      	movs	r3, #4
    7ed4:	2200      	movs	r2, #0
    7ed6:	9f02      	ldr	r7, [sp, #8]
    7ed8:	0039      	movs	r1, r7
    7eda:	9803      	ldr	r0, [sp, #12]
    7edc:	47c0      	blx	r8
    7ede:	0004      	movs	r4, r0
	if (result != N_OK) {
    7ee0:	2801      	cmp	r0, #1
    7ee2:	d0c5      	beq.n	7e70 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    7ee4:	4a27      	ldr	r2, [pc, #156]	; (7f84 <spi_read_reg+0x150>)
    7ee6:	491f      	ldr	r1, [pc, #124]	; (7f64 <spi_read_reg+0x130>)
    7ee8:	481f      	ldr	r0, [pc, #124]	; (7f68 <spi_read_reg+0x134>)
    7eea:	4e20      	ldr	r6, [pc, #128]	; (7f6c <spi_read_reg+0x138>)
    7eec:	47b0      	blx	r6
    7eee:	0039      	movs	r1, r7
    7ef0:	4825      	ldr	r0, [pc, #148]	; (7f88 <spi_read_reg+0x154>)
    7ef2:	47b0      	blx	r6
    7ef4:	200d      	movs	r0, #13
    7ef6:	4b1f      	ldr	r3, [pc, #124]	; (7f74 <spi_read_reg+0x140>)
    7ef8:	4798      	blx	r3
		goto _FAIL_;
    7efa:	e7ca      	b.n	7e92 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    7efc:	464a      	mov	r2, r9
    7efe:	2104      	movs	r1, #4
    7f00:	a805      	add	r0, sp, #20
    7f02:	4b22      	ldr	r3, [pc, #136]	; (7f8c <spi_read_reg+0x158>)
    7f04:	4798      	blx	r3
    7f06:	0004      	movs	r4, r0
	if (result != N_OK) {
    7f08:	2801      	cmp	r0, #1
    7f0a:	d00b      	beq.n	7f24 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    7f0c:	4a20      	ldr	r2, [pc, #128]	; (7f90 <spi_read_reg+0x15c>)
    7f0e:	4915      	ldr	r1, [pc, #84]	; (7f64 <spi_read_reg+0x130>)
    7f10:	4815      	ldr	r0, [pc, #84]	; (7f68 <spi_read_reg+0x134>)
    7f12:	4b16      	ldr	r3, [pc, #88]	; (7f6c <spi_read_reg+0x138>)
    7f14:	4798      	blx	r3
    7f16:	481f      	ldr	r0, [pc, #124]	; (7f94 <spi_read_reg+0x160>)
    7f18:	4b1f      	ldr	r3, [pc, #124]	; (7f98 <spi_read_reg+0x164>)
    7f1a:	4798      	blx	r3
    7f1c:	200d      	movs	r0, #13
    7f1e:	4b15      	ldr	r3, [pc, #84]	; (7f74 <spi_read_reg+0x140>)
    7f20:	4798      	blx	r3
		goto _FAIL_;
    7f22:	e7b6      	b.n	7e92 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    7f24:	aa05      	add	r2, sp, #20
    7f26:	7853      	ldrb	r3, [r2, #1]
    7f28:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    7f2a:	7891      	ldrb	r1, [r2, #2]
    7f2c:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    7f2e:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    7f30:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    7f32:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    7f34:	78d2      	ldrb	r2, [r2, #3]
    7f36:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    7f38:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    7f3a:	465a      	mov	r2, fp
    7f3c:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    7f3e:	0020      	movs	r0, r4
    7f40:	b007      	add	sp, #28
    7f42:	bc3c      	pop	{r2, r3, r4, r5}
    7f44:	4690      	mov	r8, r2
    7f46:	4699      	mov	r9, r3
    7f48:	46a2      	mov	sl, r4
    7f4a:	46ab      	mov	fp, r5
    7f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f4e:	46c0      	nop			; (mov r8, r8)
    7f50:	00011ee6 	.word	0x00011ee6
    7f54:	00007969 	.word	0x00007969
    7f58:	00011ee7 	.word	0x00011ee7
    7f5c:	00007b09 	.word	0x00007b09
    7f60:	0000041d 	.word	0x0000041d
    7f64:	00011f4c 	.word	0x00011f4c
    7f68:	00011824 	.word	0x00011824
    7f6c:	0000bb3d 	.word	0x0000bb3d
    7f70:	000124cc 	.word	0x000124cc
    7f74:	0000bb71 	.word	0x0000bb71
    7f78:	00005d75 	.word	0x00005d75
    7f7c:	0000043c 	.word	0x0000043c
    7f80:	00012520 	.word	0x00012520
    7f84:	00000417 	.word	0x00000417
    7f88:	000124a0 	.word	0x000124a0
    7f8c:	00007bdd 	.word	0x00007bdd
    7f90:	00000424 	.word	0x00000424
    7f94:	00012500 	.word	0x00012500
    7f98:	0000bc59 	.word	0x0000bc59

00007f9c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    7f9c:	b510      	push	{r4, lr}
    7f9e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7fa0:	2300      	movs	r3, #0
    7fa2:	9300      	str	r3, [sp, #0]
    7fa4:	2200      	movs	r2, #0
    7fa6:	2100      	movs	r1, #0
    7fa8:	20cf      	movs	r0, #207	; 0xcf
    7faa:	4c04      	ldr	r4, [pc, #16]	; (7fbc <nm_spi_reset+0x20>)
    7fac:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    7fae:	20cf      	movs	r0, #207	; 0xcf
    7fb0:	4b03      	ldr	r3, [pc, #12]	; (7fc0 <nm_spi_reset+0x24>)
    7fb2:	4798      	blx	r3
	return M2M_SUCCESS;
}
    7fb4:	2000      	movs	r0, #0
    7fb6:	b002      	add	sp, #8
    7fb8:	bd10      	pop	{r4, pc}
    7fba:	46c0      	nop			; (mov r8, r8)
    7fbc:	00007969 	.word	0x00007969
    7fc0:	00007b09 	.word	0x00007b09

00007fc4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    7fc4:	2200      	movs	r2, #0
    7fc6:	4b02      	ldr	r3, [pc, #8]	; (7fd0 <nm_spi_deinit+0xc>)
    7fc8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    7fca:	2000      	movs	r0, #0
    7fcc:	4770      	bx	lr
    7fce:	46c0      	nop			; (mov r8, r8)
    7fd0:	20000268 	.word	0x20000268

00007fd4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    7fd4:	b500      	push	{lr}
    7fd6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    7fd8:	a901      	add	r1, sp, #4
    7fda:	4b02      	ldr	r3, [pc, #8]	; (7fe4 <nm_spi_read_reg+0x10>)
    7fdc:	4798      	blx	r3

	return u32Val;
}
    7fde:	9801      	ldr	r0, [sp, #4]
    7fe0:	b003      	add	sp, #12
    7fe2:	bd00      	pop	{pc}
    7fe4:	00007e35 	.word	0x00007e35

00007fe8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    7fe8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    7fea:	4b04      	ldr	r3, [pc, #16]	; (7ffc <nm_spi_read_reg_with_ret+0x14>)
    7fec:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7fee:	2300      	movs	r3, #0
    7ff0:	2801      	cmp	r0, #1
    7ff2:	d101      	bne.n	7ff8 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    7ff4:	0018      	movs	r0, r3
    7ff6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    7ff8:	3b06      	subs	r3, #6
    7ffa:	e7fb      	b.n	7ff4 <nm_spi_read_reg_with_ret+0xc>
    7ffc:	00007e35 	.word	0x00007e35

00008000 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    8000:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    8002:	4b04      	ldr	r3, [pc, #16]	; (8014 <nm_spi_write_reg+0x14>)
    8004:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    8006:	2300      	movs	r3, #0
    8008:	2801      	cmp	r0, #1
    800a:	d101      	bne.n	8010 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    800c:	0018      	movs	r0, r3
    800e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    8010:	3b06      	subs	r3, #6
    8012:	e7fb      	b.n	800c <nm_spi_write_reg+0xc>
    8014:	00007d25 	.word	0x00007d25

00008018 <nm_spi_init>:
{
    8018:	b510      	push	{r4, lr}
    801a:	b082      	sub	sp, #8
	uint32 reg = 0;
    801c:	2300      	movs	r3, #0
    801e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    8020:	4a35      	ldr	r2, [pc, #212]	; (80f8 <nm_spi_init+0xe0>)
    8022:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    8024:	4669      	mov	r1, sp
    8026:	4835      	ldr	r0, [pc, #212]	; (80fc <nm_spi_init+0xe4>)
    8028:	4b35      	ldr	r3, [pc, #212]	; (8100 <nm_spi_init+0xe8>)
    802a:	4798      	blx	r3
    802c:	2800      	cmp	r0, #0
    802e:	d028      	beq.n	8082 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    8030:	4b31      	ldr	r3, [pc, #196]	; (80f8 <nm_spi_init+0xe0>)
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	2b00      	cmp	r3, #0
    8036:	d10d      	bne.n	8054 <nm_spi_init+0x3c>
		reg &= ~0x70;
    8038:	337c      	adds	r3, #124	; 0x7c
    803a:	9900      	ldr	r1, [sp, #0]
    803c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    803e:	3b2c      	subs	r3, #44	; 0x2c
    8040:	4319      	orrs	r1, r3
    8042:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    8044:	482d      	ldr	r0, [pc, #180]	; (80fc <nm_spi_init+0xe4>)
    8046:	4b2f      	ldr	r3, [pc, #188]	; (8104 <nm_spi_init+0xec>)
    8048:	4798      	blx	r3
    804a:	1e04      	subs	r4, r0, #0
    804c:	d039      	beq.n	80c2 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    804e:	2201      	movs	r2, #1
    8050:	4b29      	ldr	r3, [pc, #164]	; (80f8 <nm_spi_init+0xe0>)
    8052:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    8054:	a901      	add	r1, sp, #4
    8056:	2080      	movs	r0, #128	; 0x80
    8058:	0140      	lsls	r0, r0, #5
    805a:	4b29      	ldr	r3, [pc, #164]	; (8100 <nm_spi_init+0xe8>)
    805c:	4798      	blx	r3
    805e:	2800      	cmp	r0, #0
    8060:	d03b      	beq.n	80da <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    8062:	4c26      	ldr	r4, [pc, #152]	; (80fc <nm_spi_init+0xe4>)
    8064:	0020      	movs	r0, r4
    8066:	4b28      	ldr	r3, [pc, #160]	; (8108 <nm_spi_init+0xf0>)
    8068:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    806a:	2370      	movs	r3, #112	; 0x70
    806c:	0001      	movs	r1, r0
    806e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    8070:	2050      	movs	r0, #80	; 0x50
    8072:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    8074:	0020      	movs	r0, r4
    8076:	4b25      	ldr	r3, [pc, #148]	; (810c <nm_spi_init+0xf4>)
    8078:	4798      	blx	r3
	return M2M_SUCCESS;
    807a:	2400      	movs	r4, #0
}
    807c:	0020      	movs	r0, r4
    807e:	b002      	add	sp, #8
    8080:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    8082:	2201      	movs	r2, #1
    8084:	4b1c      	ldr	r3, [pc, #112]	; (80f8 <nm_spi_init+0xe0>)
    8086:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    8088:	4a21      	ldr	r2, [pc, #132]	; (8110 <nm_spi_init+0xf8>)
    808a:	4922      	ldr	r1, [pc, #136]	; (8114 <nm_spi_init+0xfc>)
    808c:	4822      	ldr	r0, [pc, #136]	; (8118 <nm_spi_init+0x100>)
    808e:	4b23      	ldr	r3, [pc, #140]	; (811c <nm_spi_init+0x104>)
    8090:	4798      	blx	r3
    8092:	4823      	ldr	r0, [pc, #140]	; (8120 <nm_spi_init+0x108>)
    8094:	4b23      	ldr	r3, [pc, #140]	; (8124 <nm_spi_init+0x10c>)
    8096:	4798      	blx	r3
    8098:	200d      	movs	r0, #13
    809a:	4b23      	ldr	r3, [pc, #140]	; (8128 <nm_spi_init+0x110>)
    809c:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    809e:	4669      	mov	r1, sp
    80a0:	4816      	ldr	r0, [pc, #88]	; (80fc <nm_spi_init+0xe4>)
    80a2:	4b17      	ldr	r3, [pc, #92]	; (8100 <nm_spi_init+0xe8>)
    80a4:	4798      	blx	r3
    80a6:	1e04      	subs	r4, r0, #0
    80a8:	d1c2      	bne.n	8030 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    80aa:	4a20      	ldr	r2, [pc, #128]	; (812c <nm_spi_init+0x114>)
    80ac:	4919      	ldr	r1, [pc, #100]	; (8114 <nm_spi_init+0xfc>)
    80ae:	481a      	ldr	r0, [pc, #104]	; (8118 <nm_spi_init+0x100>)
    80b0:	4b1a      	ldr	r3, [pc, #104]	; (811c <nm_spi_init+0x104>)
    80b2:	4798      	blx	r3
    80b4:	481e      	ldr	r0, [pc, #120]	; (8130 <nm_spi_init+0x118>)
    80b6:	4b1b      	ldr	r3, [pc, #108]	; (8124 <nm_spi_init+0x10c>)
    80b8:	4798      	blx	r3
    80ba:	200d      	movs	r0, #13
    80bc:	4b1a      	ldr	r3, [pc, #104]	; (8128 <nm_spi_init+0x110>)
    80be:	4798      	blx	r3
			return 0;
    80c0:	e7dc      	b.n	807c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    80c2:	4a1c      	ldr	r2, [pc, #112]	; (8134 <nm_spi_init+0x11c>)
    80c4:	4913      	ldr	r1, [pc, #76]	; (8114 <nm_spi_init+0xfc>)
    80c6:	4814      	ldr	r0, [pc, #80]	; (8118 <nm_spi_init+0x100>)
    80c8:	4b14      	ldr	r3, [pc, #80]	; (811c <nm_spi_init+0x104>)
    80ca:	4798      	blx	r3
    80cc:	481a      	ldr	r0, [pc, #104]	; (8138 <nm_spi_init+0x120>)
    80ce:	4b15      	ldr	r3, [pc, #84]	; (8124 <nm_spi_init+0x10c>)
    80d0:	4798      	blx	r3
    80d2:	200d      	movs	r0, #13
    80d4:	4b14      	ldr	r3, [pc, #80]	; (8128 <nm_spi_init+0x110>)
    80d6:	4798      	blx	r3
			return 0;
    80d8:	e7d0      	b.n	807c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    80da:	4a18      	ldr	r2, [pc, #96]	; (813c <nm_spi_init+0x124>)
    80dc:	490d      	ldr	r1, [pc, #52]	; (8114 <nm_spi_init+0xfc>)
    80de:	480e      	ldr	r0, [pc, #56]	; (8118 <nm_spi_init+0x100>)
    80e0:	4b0e      	ldr	r3, [pc, #56]	; (811c <nm_spi_init+0x104>)
    80e2:	4798      	blx	r3
    80e4:	4816      	ldr	r0, [pc, #88]	; (8140 <nm_spi_init+0x128>)
    80e6:	4b0f      	ldr	r3, [pc, #60]	; (8124 <nm_spi_init+0x10c>)
    80e8:	4798      	blx	r3
    80ea:	200d      	movs	r0, #13
    80ec:	4b0e      	ldr	r3, [pc, #56]	; (8128 <nm_spi_init+0x110>)
    80ee:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    80f0:	2406      	movs	r4, #6
    80f2:	4264      	negs	r4, r4
    80f4:	e7c2      	b.n	807c <nm_spi_init+0x64>
    80f6:	46c0      	nop			; (mov r8, r8)
    80f8:	20000268 	.word	0x20000268
    80fc:	0000e824 	.word	0x0000e824
    8100:	00007e35 	.word	0x00007e35
    8104:	00007d25 	.word	0x00007d25
    8108:	00007fd5 	.word	0x00007fd5
    810c:	00008001 	.word	0x00008001
    8110:	000004c7 	.word	0x000004c7
    8114:	00011f68 	.word	0x00011f68
    8118:	00011824 	.word	0x00011824
    811c:	0000bb3d 	.word	0x0000bb3d
    8120:	00012074 	.word	0x00012074
    8124:	0000bc59 	.word	0x0000bc59
    8128:	0000bb71 	.word	0x0000bb71
    812c:	000004ca 	.word	0x000004ca
    8130:	000120c4 	.word	0x000120c4
    8134:	000004d4 	.word	0x000004d4
    8138:	000120f0 	.word	0x000120f0
    813c:	000004de 	.word	0x000004de
    8140:	00012124 	.word	0x00012124

00008144 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    8144:	b5f0      	push	{r4, r5, r6, r7, lr}
    8146:	46de      	mov	lr, fp
    8148:	4657      	mov	r7, sl
    814a:	464e      	mov	r6, r9
    814c:	4645      	mov	r5, r8
    814e:	b5e0      	push	{r5, r6, r7, lr}
    8150:	b087      	sub	sp, #28
    8152:	9002      	str	r0, [sp, #8]
    8154:	9103      	str	r1, [sp, #12]
    8156:	0016      	movs	r6, r2
    8158:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    815a:	2300      	movs	r3, #0
    815c:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    815e:	2400      	movs	r4, #0
    8160:	4b3e      	ldr	r3, [pc, #248]	; (825c <nm_spi_read_block+0x118>)
    8162:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    8164:	46a9      	mov	r9, r5
    8166:	e037      	b.n	81d8 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    8168:	2301      	movs	r3, #1
    816a:	469b      	mov	fp, r3
		size = 2;
    816c:	3601      	adds	r6, #1
    816e:	e035      	b.n	81dc <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    8170:	20c8      	movs	r0, #200	; 0xc8
    8172:	4b3b      	ldr	r3, [pc, #236]	; (8260 <nm_spi_read_block+0x11c>)
    8174:	4798      	blx	r3
	if (result != N_OK) {
    8176:	2801      	cmp	r0, #1
    8178:	d045      	beq.n	8206 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    817a:	4a3a      	ldr	r2, [pc, #232]	; (8264 <nm_spi_read_block+0x120>)
    817c:	493a      	ldr	r1, [pc, #232]	; (8268 <nm_spi_read_block+0x124>)
    817e:	483b      	ldr	r0, [pc, #236]	; (826c <nm_spi_read_block+0x128>)
    8180:	4f3b      	ldr	r7, [pc, #236]	; (8270 <nm_spi_read_block+0x12c>)
    8182:	47b8      	blx	r7
    8184:	9902      	ldr	r1, [sp, #8]
    8186:	483b      	ldr	r0, [pc, #236]	; (8274 <nm_spi_read_block+0x130>)
    8188:	47b8      	blx	r7
    818a:	200d      	movs	r0, #13
    818c:	4b3a      	ldr	r3, [pc, #232]	; (8278 <nm_spi_read_block+0x134>)
    818e:	4798      	blx	r3
		nm_bsp_sleep(1);
    8190:	2001      	movs	r0, #1
    8192:	4f3a      	ldr	r7, [pc, #232]	; (827c <nm_spi_read_block+0x138>)
    8194:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    8196:	9400      	str	r4, [sp, #0]
    8198:	0023      	movs	r3, r4
    819a:	0022      	movs	r2, r4
    819c:	0021      	movs	r1, r4
    819e:	20cf      	movs	r0, #207	; 0xcf
    81a0:	4d2e      	ldr	r5, [pc, #184]	; (825c <nm_spi_read_block+0x118>)
    81a2:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    81a4:	20cf      	movs	r0, #207	; 0xcf
    81a6:	4b2e      	ldr	r3, [pc, #184]	; (8260 <nm_spi_read_block+0x11c>)
    81a8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    81aa:	4a35      	ldr	r2, [pc, #212]	; (8280 <nm_spi_read_block+0x13c>)
    81ac:	492e      	ldr	r1, [pc, #184]	; (8268 <nm_spi_read_block+0x124>)
    81ae:	482f      	ldr	r0, [pc, #188]	; (826c <nm_spi_read_block+0x128>)
    81b0:	4b2f      	ldr	r3, [pc, #188]	; (8270 <nm_spi_read_block+0x12c>)
    81b2:	469a      	mov	sl, r3
    81b4:	4798      	blx	r3
    81b6:	0033      	movs	r3, r6
    81b8:	9a02      	ldr	r2, [sp, #8]
    81ba:	4649      	mov	r1, r9
    81bc:	4831      	ldr	r0, [pc, #196]	; (8284 <nm_spi_read_block+0x140>)
    81be:	47d0      	blx	sl
    81c0:	200d      	movs	r0, #13
    81c2:	4b2d      	ldr	r3, [pc, #180]	; (8278 <nm_spi_read_block+0x134>)
    81c4:	4798      	blx	r3
		nm_bsp_sleep(1);
    81c6:	2001      	movs	r0, #1
    81c8:	47b8      	blx	r7
    81ca:	2301      	movs	r3, #1
    81cc:	425b      	negs	r3, r3
    81ce:	469c      	mov	ip, r3
    81d0:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    81d2:	464b      	mov	r3, r9
    81d4:	2b00      	cmp	r3, #0
    81d6:	d038      	beq.n	824a <nm_spi_read_block+0x106>
	if (size == 1)
    81d8:	2e01      	cmp	r6, #1
    81da:	d0c5      	beq.n	8168 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    81dc:	9400      	str	r4, [sp, #0]
    81de:	0033      	movs	r3, r6
    81e0:	0022      	movs	r2, r4
    81e2:	9d02      	ldr	r5, [sp, #8]
    81e4:	0029      	movs	r1, r5
    81e6:	20c8      	movs	r0, #200	; 0xc8
    81e8:	47c0      	blx	r8
	if (result != N_OK) {
    81ea:	2801      	cmp	r0, #1
    81ec:	d0c0      	beq.n	8170 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    81ee:	4a26      	ldr	r2, [pc, #152]	; (8288 <nm_spi_read_block+0x144>)
    81f0:	491d      	ldr	r1, [pc, #116]	; (8268 <nm_spi_read_block+0x124>)
    81f2:	481e      	ldr	r0, [pc, #120]	; (826c <nm_spi_read_block+0x128>)
    81f4:	4f1e      	ldr	r7, [pc, #120]	; (8270 <nm_spi_read_block+0x12c>)
    81f6:	47b8      	blx	r7
    81f8:	0029      	movs	r1, r5
    81fa:	4824      	ldr	r0, [pc, #144]	; (828c <nm_spi_read_block+0x148>)
    81fc:	47b8      	blx	r7
    81fe:	200d      	movs	r0, #13
    8200:	4b1d      	ldr	r3, [pc, #116]	; (8278 <nm_spi_read_block+0x134>)
    8202:	4798      	blx	r3
    8204:	e7c4      	b.n	8190 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    8206:	465b      	mov	r3, fp
    8208:	2b00      	cmp	r3, #0
    820a:	d016      	beq.n	823a <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    820c:	af05      	add	r7, sp, #20
    820e:	0022      	movs	r2, r4
    8210:	0031      	movs	r1, r6
    8212:	0038      	movs	r0, r7
    8214:	4b1e      	ldr	r3, [pc, #120]	; (8290 <nm_spi_read_block+0x14c>)
    8216:	4798      	blx	r3
		buf[0] = tmp[0];
    8218:	783b      	ldrb	r3, [r7, #0]
    821a:	9a03      	ldr	r2, [sp, #12]
    821c:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    821e:	2801      	cmp	r0, #1
    8220:	d011      	beq.n	8246 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    8222:	4a1c      	ldr	r2, [pc, #112]	; (8294 <nm_spi_read_block+0x150>)
    8224:	4910      	ldr	r1, [pc, #64]	; (8268 <nm_spi_read_block+0x124>)
    8226:	4811      	ldr	r0, [pc, #68]	; (826c <nm_spi_read_block+0x128>)
    8228:	4b11      	ldr	r3, [pc, #68]	; (8270 <nm_spi_read_block+0x12c>)
    822a:	4798      	blx	r3
    822c:	481a      	ldr	r0, [pc, #104]	; (8298 <nm_spi_read_block+0x154>)
    822e:	4b1b      	ldr	r3, [pc, #108]	; (829c <nm_spi_read_block+0x158>)
    8230:	4798      	blx	r3
    8232:	200d      	movs	r0, #13
    8234:	4b10      	ldr	r3, [pc, #64]	; (8278 <nm_spi_read_block+0x134>)
    8236:	4798      	blx	r3
    8238:	e7aa      	b.n	8190 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    823a:	0022      	movs	r2, r4
    823c:	0031      	movs	r1, r6
    823e:	9803      	ldr	r0, [sp, #12]
    8240:	4b13      	ldr	r3, [pc, #76]	; (8290 <nm_spi_read_block+0x14c>)
    8242:	4798      	blx	r3
    8244:	e7eb      	b.n	821e <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    8246:	2000      	movs	r0, #0
    8248:	e001      	b.n	824e <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    824a:	2006      	movs	r0, #6
    824c:	4240      	negs	r0, r0

	return s8Ret;
}
    824e:	b007      	add	sp, #28
    8250:	bc3c      	pop	{r2, r3, r4, r5}
    8252:	4690      	mov	r8, r2
    8254:	4699      	mov	r9, r3
    8256:	46a2      	mov	sl, r4
    8258:	46ab      	mov	fp, r5
    825a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    825c:	00007969 	.word	0x00007969
    8260:	00007b09 	.word	0x00007b09
    8264:	00000463 	.word	0x00000463
    8268:	00011f5c 	.word	0x00011f5c
    826c:	00011824 	.word	0x00011824
    8270:	0000bb3d 	.word	0x0000bb3d
    8274:	00012178 	.word	0x00012178
    8278:	0000bb71 	.word	0x0000bb71
    827c:	00005d75 	.word	0x00005d75
    8280:	00000484 	.word	0x00000484
    8284:	000121d8 	.word	0x000121d8
    8288:	0000045d 	.word	0x0000045d
    828c:	00012148 	.word	0x00012148
    8290:	00007bdd 	.word	0x00007bdd
    8294:	00000473 	.word	0x00000473
    8298:	000121b0 	.word	0x000121b0
    829c:	0000bc59 	.word	0x0000bc59

000082a0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    82a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    82a2:	46de      	mov	lr, fp
    82a4:	4647      	mov	r7, r8
    82a6:	b580      	push	{r7, lr}
    82a8:	b089      	sub	sp, #36	; 0x24
    82aa:	9004      	str	r0, [sp, #16]
    82ac:	468b      	mov	fp, r1
    82ae:	9203      	str	r2, [sp, #12]
    82b0:	260a      	movs	r6, #10
    82b2:	2780      	movs	r7, #128	; 0x80
    82b4:	01bf      	lsls	r7, r7, #6
    82b6:	466b      	mov	r3, sp
    82b8:	82df      	strh	r7, [r3, #22]
    82ba:	0035      	movs	r5, r6
    82bc:	e02d      	b.n	831a <nm_spi_write_block+0x7a>
		size = 2;
    82be:	3301      	adds	r3, #1
    82c0:	9303      	str	r3, [sp, #12]
    82c2:	e02d      	b.n	8320 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    82c4:	4a83      	ldr	r2, [pc, #524]	; (84d4 <nm_spi_write_block+0x234>)
    82c6:	4984      	ldr	r1, [pc, #528]	; (84d8 <nm_spi_write_block+0x238>)
    82c8:	4884      	ldr	r0, [pc, #528]	; (84dc <nm_spi_write_block+0x23c>)
    82ca:	4c85      	ldr	r4, [pc, #532]	; (84e0 <nm_spi_write_block+0x240>)
    82cc:	47a0      	blx	r4
    82ce:	0031      	movs	r1, r6
    82d0:	4884      	ldr	r0, [pc, #528]	; (84e4 <nm_spi_write_block+0x244>)
    82d2:	47a0      	blx	r4
    82d4:	200d      	movs	r0, #13
    82d6:	4b84      	ldr	r3, [pc, #528]	; (84e8 <nm_spi_write_block+0x248>)
    82d8:	4798      	blx	r3
		nm_bsp_sleep(1);
    82da:	2001      	movs	r0, #1
    82dc:	4c83      	ldr	r4, [pc, #524]	; (84ec <nm_spi_write_block+0x24c>)
    82de:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    82e0:	2300      	movs	r3, #0
    82e2:	9300      	str	r3, [sp, #0]
    82e4:	2200      	movs	r2, #0
    82e6:	2100      	movs	r1, #0
    82e8:	20cf      	movs	r0, #207	; 0xcf
    82ea:	4e81      	ldr	r6, [pc, #516]	; (84f0 <nm_spi_write_block+0x250>)
    82ec:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    82ee:	20cf      	movs	r0, #207	; 0xcf
    82f0:	4b80      	ldr	r3, [pc, #512]	; (84f4 <nm_spi_write_block+0x254>)
    82f2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    82f4:	4a80      	ldr	r2, [pc, #512]	; (84f8 <nm_spi_write_block+0x258>)
    82f6:	4978      	ldr	r1, [pc, #480]	; (84d8 <nm_spi_write_block+0x238>)
    82f8:	4878      	ldr	r0, [pc, #480]	; (84dc <nm_spi_write_block+0x23c>)
    82fa:	4e79      	ldr	r6, [pc, #484]	; (84e0 <nm_spi_write_block+0x240>)
    82fc:	47b0      	blx	r6
    82fe:	9b03      	ldr	r3, [sp, #12]
    8300:	9a04      	ldr	r2, [sp, #16]
    8302:	0029      	movs	r1, r5
    8304:	487d      	ldr	r0, [pc, #500]	; (84fc <nm_spi_write_block+0x25c>)
    8306:	47b0      	blx	r6
    8308:	200d      	movs	r0, #13
    830a:	4b77      	ldr	r3, [pc, #476]	; (84e8 <nm_spi_write_block+0x248>)
    830c:	4798      	blx	r3
		nm_bsp_sleep(1);
    830e:	2001      	movs	r0, #1
    8310:	47a0      	blx	r4
    8312:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    8314:	2d00      	cmp	r5, #0
    8316:	d100      	bne.n	831a <nm_spi_write_block+0x7a>
    8318:	e0d5      	b.n	84c6 <nm_spi_write_block+0x226>
	if (size == 1)
    831a:	9b03      	ldr	r3, [sp, #12]
    831c:	2b01      	cmp	r3, #1
    831e:	d0ce      	beq.n	82be <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    8320:	2300      	movs	r3, #0
    8322:	9300      	str	r3, [sp, #0]
    8324:	9b03      	ldr	r3, [sp, #12]
    8326:	2200      	movs	r2, #0
    8328:	9e04      	ldr	r6, [sp, #16]
    832a:	0031      	movs	r1, r6
    832c:	20c7      	movs	r0, #199	; 0xc7
    832e:	4c70      	ldr	r4, [pc, #448]	; (84f0 <nm_spi_write_block+0x250>)
    8330:	47a0      	blx	r4
	if (result != N_OK) {
    8332:	2801      	cmp	r0, #1
    8334:	d1c6      	bne.n	82c4 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    8336:	20c7      	movs	r0, #199	; 0xc7
    8338:	4b6e      	ldr	r3, [pc, #440]	; (84f4 <nm_spi_write_block+0x254>)
    833a:	4798      	blx	r3
	if (result != N_OK) {
    833c:	2801      	cmp	r0, #1
    833e:	d00c      	beq.n	835a <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    8340:	22f4      	movs	r2, #244	; 0xf4
    8342:	0092      	lsls	r2, r2, #2
    8344:	4964      	ldr	r1, [pc, #400]	; (84d8 <nm_spi_write_block+0x238>)
    8346:	4865      	ldr	r0, [pc, #404]	; (84dc <nm_spi_write_block+0x23c>)
    8348:	4c65      	ldr	r4, [pc, #404]	; (84e0 <nm_spi_write_block+0x240>)
    834a:	47a0      	blx	r4
    834c:	9904      	ldr	r1, [sp, #16]
    834e:	486c      	ldr	r0, [pc, #432]	; (8500 <nm_spi_write_block+0x260>)
    8350:	47a0      	blx	r4
    8352:	200d      	movs	r0, #13
    8354:	4b64      	ldr	r3, [pc, #400]	; (84e8 <nm_spi_write_block+0x248>)
    8356:	4798      	blx	r3
    8358:	e7bf      	b.n	82da <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    835a:	2200      	movs	r2, #0
    835c:	ab07      	add	r3, sp, #28
    835e:	801a      	strh	r2, [r3, #0]
    8360:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    8362:	2600      	movs	r6, #0
				order = 0x1;
    8364:	46a8      	mov	r8, r5
    8366:	0035      	movs	r5, r6
    8368:	0026      	movs	r6, r4
    836a:	e021      	b.n	83b0 <nm_spi_write_block+0x110>
				order = 0x2;
    836c:	2300      	movs	r3, #0
    836e:	42b7      	cmp	r7, r6
    8370:	415b      	adcs	r3, r3
    8372:	3302      	adds	r3, #2
		cmd |= order;
    8374:	200b      	movs	r0, #11
    8376:	aa04      	add	r2, sp, #16
    8378:	4694      	mov	ip, r2
    837a:	4460      	add	r0, ip
    837c:	2210      	movs	r2, #16
    837e:	4252      	negs	r2, r2
    8380:	4313      	orrs	r3, r2
    8382:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    8384:	2101      	movs	r1, #1
    8386:	4b5f      	ldr	r3, [pc, #380]	; (8504 <nm_spi_write_block+0x264>)
    8388:	4798      	blx	r3
    838a:	2800      	cmp	r0, #0
    838c:	d11d      	bne.n	83ca <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    838e:	465b      	mov	r3, fp
    8390:	1958      	adds	r0, r3, r5
    8392:	0021      	movs	r1, r4
    8394:	4b5b      	ldr	r3, [pc, #364]	; (8504 <nm_spi_write_block+0x264>)
    8396:	4798      	blx	r3
    8398:	2800      	cmp	r0, #0
    839a:	d130      	bne.n	83fe <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    839c:	4b5a      	ldr	r3, [pc, #360]	; (8508 <nm_spi_write_block+0x268>)
    839e:	781b      	ldrb	r3, [r3, #0]
    83a0:	2b00      	cmp	r3, #0
    83a2:	d039      	beq.n	8418 <nm_spi_write_block+0x178>
		ix += nbytes;
    83a4:	1965      	adds	r5, r4, r5
    83a6:	b22d      	sxth	r5, r5
		sz -= nbytes;
    83a8:	1b36      	subs	r6, r6, r4
    83aa:	b2b6      	uxth	r6, r6
	} while (sz);
    83ac:	2e00      	cmp	r6, #0
    83ae:	d053      	beq.n	8458 <nm_spi_write_block+0x1b8>
    83b0:	1c34      	adds	r4, r6, #0
    83b2:	42be      	cmp	r6, r7
    83b4:	d901      	bls.n	83ba <nm_spi_write_block+0x11a>
    83b6:	466b      	mov	r3, sp
    83b8:	8adc      	ldrh	r4, [r3, #22]
    83ba:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    83bc:	2d00      	cmp	r5, #0
    83be:	d1d5      	bne.n	836c <nm_spi_write_block+0xcc>
				order = 0x3;
    83c0:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    83c2:	42be      	cmp	r6, r7
    83c4:	d9d6      	bls.n	8374 <nm_spi_write_block+0xd4>
				order = 0x1;
    83c6:	3b02      	subs	r3, #2
    83c8:	e7d4      	b.n	8374 <nm_spi_write_block+0xd4>
    83ca:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    83cc:	22d4      	movs	r2, #212	; 0xd4
    83ce:	0092      	lsls	r2, r2, #2
    83d0:	494e      	ldr	r1, [pc, #312]	; (850c <nm_spi_write_block+0x26c>)
    83d2:	4842      	ldr	r0, [pc, #264]	; (84dc <nm_spi_write_block+0x23c>)
    83d4:	4b42      	ldr	r3, [pc, #264]	; (84e0 <nm_spi_write_block+0x240>)
    83d6:	4798      	blx	r3
    83d8:	484d      	ldr	r0, [pc, #308]	; (8510 <nm_spi_write_block+0x270>)
    83da:	4b4e      	ldr	r3, [pc, #312]	; (8514 <nm_spi_write_block+0x274>)
    83dc:	4798      	blx	r3
    83de:	200d      	movs	r0, #13
    83e0:	4b41      	ldr	r3, [pc, #260]	; (84e8 <nm_spi_write_block+0x248>)
    83e2:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    83e4:	22f8      	movs	r2, #248	; 0xf8
    83e6:	0092      	lsls	r2, r2, #2
    83e8:	493b      	ldr	r1, [pc, #236]	; (84d8 <nm_spi_write_block+0x238>)
    83ea:	483c      	ldr	r0, [pc, #240]	; (84dc <nm_spi_write_block+0x23c>)
    83ec:	4b3c      	ldr	r3, [pc, #240]	; (84e0 <nm_spi_write_block+0x240>)
    83ee:	4798      	blx	r3
    83f0:	4849      	ldr	r0, [pc, #292]	; (8518 <nm_spi_write_block+0x278>)
    83f2:	4b48      	ldr	r3, [pc, #288]	; (8514 <nm_spi_write_block+0x274>)
    83f4:	4798      	blx	r3
    83f6:	200d      	movs	r0, #13
    83f8:	4b3b      	ldr	r3, [pc, #236]	; (84e8 <nm_spi_write_block+0x248>)
    83fa:	4798      	blx	r3
    83fc:	e76d      	b.n	82da <nm_spi_write_block+0x3a>
    83fe:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    8400:	4a46      	ldr	r2, [pc, #280]	; (851c <nm_spi_write_block+0x27c>)
    8402:	4942      	ldr	r1, [pc, #264]	; (850c <nm_spi_write_block+0x26c>)
    8404:	4835      	ldr	r0, [pc, #212]	; (84dc <nm_spi_write_block+0x23c>)
    8406:	4b36      	ldr	r3, [pc, #216]	; (84e0 <nm_spi_write_block+0x240>)
    8408:	4798      	blx	r3
    840a:	4845      	ldr	r0, [pc, #276]	; (8520 <nm_spi_write_block+0x280>)
    840c:	4b41      	ldr	r3, [pc, #260]	; (8514 <nm_spi_write_block+0x274>)
    840e:	4798      	blx	r3
    8410:	200d      	movs	r0, #13
    8412:	4b35      	ldr	r3, [pc, #212]	; (84e8 <nm_spi_write_block+0x248>)
    8414:	4798      	blx	r3
    8416:	e7e5      	b.n	83e4 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    8418:	2102      	movs	r1, #2
    841a:	a807      	add	r0, sp, #28
    841c:	4b39      	ldr	r3, [pc, #228]	; (8504 <nm_spi_write_block+0x264>)
    841e:	4798      	blx	r3
    8420:	2800      	cmp	r0, #0
    8422:	d0bf      	beq.n	83a4 <nm_spi_write_block+0x104>
    8424:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    8426:	4a3f      	ldr	r2, [pc, #252]	; (8524 <nm_spi_write_block+0x284>)
    8428:	4938      	ldr	r1, [pc, #224]	; (850c <nm_spi_write_block+0x26c>)
    842a:	482c      	ldr	r0, [pc, #176]	; (84dc <nm_spi_write_block+0x23c>)
    842c:	4b2c      	ldr	r3, [pc, #176]	; (84e0 <nm_spi_write_block+0x240>)
    842e:	4798      	blx	r3
    8430:	483d      	ldr	r0, [pc, #244]	; (8528 <nm_spi_write_block+0x288>)
    8432:	4b38      	ldr	r3, [pc, #224]	; (8514 <nm_spi_write_block+0x274>)
    8434:	4798      	blx	r3
    8436:	200d      	movs	r0, #13
    8438:	4b2b      	ldr	r3, [pc, #172]	; (84e8 <nm_spi_write_block+0x248>)
    843a:	4798      	blx	r3
    843c:	e7d2      	b.n	83e4 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    843e:	223c      	movs	r2, #60	; 0x3c
    8440:	32ff      	adds	r2, #255	; 0xff
    8442:	493a      	ldr	r1, [pc, #232]	; (852c <nm_spi_write_block+0x28c>)
    8444:	4825      	ldr	r0, [pc, #148]	; (84dc <nm_spi_write_block+0x23c>)
    8446:	4b26      	ldr	r3, [pc, #152]	; (84e0 <nm_spi_write_block+0x240>)
    8448:	4798      	blx	r3
    844a:	4839      	ldr	r0, [pc, #228]	; (8530 <nm_spi_write_block+0x290>)
    844c:	4b31      	ldr	r3, [pc, #196]	; (8514 <nm_spi_write_block+0x274>)
    844e:	4798      	blx	r3
    8450:	200d      	movs	r0, #13
    8452:	4b25      	ldr	r3, [pc, #148]	; (84e8 <nm_spi_write_block+0x248>)
    8454:	4798      	blx	r3
    8456:	e027      	b.n	84a8 <nm_spi_write_block+0x208>
    8458:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    845a:	4b2b      	ldr	r3, [pc, #172]	; (8508 <nm_spi_write_block+0x268>)
    845c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    845e:	1e63      	subs	r3, r4, #1
    8460:	419c      	sbcs	r4, r3
    8462:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    8464:	b2a1      	uxth	r1, r4
    8466:	a807      	add	r0, sp, #28
    8468:	4b32      	ldr	r3, [pc, #200]	; (8534 <nm_spi_write_block+0x294>)
    846a:	4798      	blx	r3
    846c:	2800      	cmp	r0, #0
    846e:	d1e6      	bne.n	843e <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    8470:	ab08      	add	r3, sp, #32
    8472:	191b      	adds	r3, r3, r4
    8474:	3b05      	subs	r3, #5
    8476:	781b      	ldrb	r3, [r3, #0]
    8478:	2b00      	cmp	r3, #0
    847a:	d106      	bne.n	848a <nm_spi_write_block+0x1ea>
    847c:	ab08      	add	r3, sp, #32
    847e:	469c      	mov	ip, r3
    8480:	4464      	add	r4, ip
    8482:	3c06      	subs	r4, #6
    8484:	7823      	ldrb	r3, [r4, #0]
    8486:	2bc3      	cmp	r3, #195	; 0xc3
    8488:	d01b      	beq.n	84c2 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    848a:	22a1      	movs	r2, #161	; 0xa1
    848c:	0052      	lsls	r2, r2, #1
    848e:	4927      	ldr	r1, [pc, #156]	; (852c <nm_spi_write_block+0x28c>)
    8490:	4812      	ldr	r0, [pc, #72]	; (84dc <nm_spi_write_block+0x23c>)
    8492:	4c13      	ldr	r4, [pc, #76]	; (84e0 <nm_spi_write_block+0x240>)
    8494:	47a0      	blx	r4
    8496:	a907      	add	r1, sp, #28
    8498:	788b      	ldrb	r3, [r1, #2]
    849a:	784a      	ldrb	r2, [r1, #1]
    849c:	7809      	ldrb	r1, [r1, #0]
    849e:	4826      	ldr	r0, [pc, #152]	; (8538 <nm_spi_write_block+0x298>)
    84a0:	47a0      	blx	r4
    84a2:	200d      	movs	r0, #13
    84a4:	4b10      	ldr	r3, [pc, #64]	; (84e8 <nm_spi_write_block+0x248>)
    84a6:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    84a8:	22fa      	movs	r2, #250	; 0xfa
    84aa:	0092      	lsls	r2, r2, #2
    84ac:	490a      	ldr	r1, [pc, #40]	; (84d8 <nm_spi_write_block+0x238>)
    84ae:	480b      	ldr	r0, [pc, #44]	; (84dc <nm_spi_write_block+0x23c>)
    84b0:	4b0b      	ldr	r3, [pc, #44]	; (84e0 <nm_spi_write_block+0x240>)
    84b2:	4798      	blx	r3
    84b4:	4818      	ldr	r0, [pc, #96]	; (8518 <nm_spi_write_block+0x278>)
    84b6:	4b17      	ldr	r3, [pc, #92]	; (8514 <nm_spi_write_block+0x274>)
    84b8:	4798      	blx	r3
    84ba:	200d      	movs	r0, #13
    84bc:	4b0a      	ldr	r3, [pc, #40]	; (84e8 <nm_spi_write_block+0x248>)
    84be:	4798      	blx	r3
    84c0:	e70b      	b.n	82da <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    84c2:	2000      	movs	r0, #0
    84c4:	e001      	b.n	84ca <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    84c6:	2006      	movs	r0, #6
    84c8:	4240      	negs	r0, r0

	return s8Ret;
}
    84ca:	b009      	add	sp, #36	; 0x24
    84cc:	bc0c      	pop	{r2, r3}
    84ce:	4690      	mov	r8, r2
    84d0:	469b      	mov	fp, r3
    84d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84d4:	000003ca 	.word	0x000003ca
    84d8:	00011f3c 	.word	0x00011f3c
    84dc:	00011824 	.word	0x00011824
    84e0:	0000bb3d 	.word	0x0000bb3d
    84e4:	000121f4 	.word	0x000121f4
    84e8:	0000bb71 	.word	0x0000bb71
    84ec:	00005d75 	.word	0x00005d75
    84f0:	00007969 	.word	0x00007969
    84f4:	00007b09 	.word	0x00007b09
    84f8:	000003f2 	.word	0x000003f2
    84fc:	000121d8 	.word	0x000121d8
    8500:	00012224 	.word	0x00012224
    8504:	00007949 	.word	0x00007949
    8508:	20000268 	.word	0x20000268
    850c:	00011f1c 	.word	0x00011f1c
    8510:	0001225c 	.word	0x0001225c
    8514:	0000bc59 	.word	0x0000bc59
    8518:	00012350 	.word	0x00012350
    851c:	00000359 	.word	0x00000359
    8520:	00012294 	.word	0x00012294
    8524:	00000363 	.word	0x00000363
    8528:	000122c8 	.word	0x000122c8
    852c:	00011ef0 	.word	0x00011ef0
    8530:	00012300 	.word	0x00012300
    8534:	00007ae9 	.word	0x00007ae9
    8538:	00012320 	.word	0x00012320

0000853c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    853c:	b5f0      	push	{r4, r5, r6, r7, lr}
    853e:	46de      	mov	lr, fp
    8540:	4657      	mov	r7, sl
    8542:	464e      	mov	r6, r9
    8544:	4645      	mov	r5, r8
    8546:	b5e0      	push	{r5, r6, r7, lr}
    8548:	b085      	sub	sp, #20
    854a:	9001      	str	r0, [sp, #4]
    854c:	000e      	movs	r6, r1
    854e:	9202      	str	r2, [sp, #8]
    8550:	001d      	movs	r5, r3
    8552:	ab0e      	add	r3, sp, #56	; 0x38
    8554:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    8556:	2c00      	cmp	r4, #0
    8558:	d064      	beq.n	8624 <Socket_ReadSocketData+0xe8>
    855a:	0103      	lsls	r3, r0, #4
    855c:	4935      	ldr	r1, [pc, #212]	; (8634 <Socket_ReadSocketData+0xf8>)
    855e:	585b      	ldr	r3, [r3, r1]
    8560:	2b00      	cmp	r3, #0
    8562:	d05f      	beq.n	8624 <Socket_ReadSocketData+0xe8>
    8564:	0101      	lsls	r1, r0, #4
    8566:	4b33      	ldr	r3, [pc, #204]	; (8634 <Socket_ReadSocketData+0xf8>)
    8568:	185b      	adds	r3, r3, r1
    856a:	889b      	ldrh	r3, [r3, #4]
    856c:	b29b      	uxth	r3, r3
    856e:	2b00      	cmp	r3, #0
    8570:	d058      	beq.n	8624 <Socket_ReadSocketData+0xe8>
    8572:	4b30      	ldr	r3, [pc, #192]	; (8634 <Socket_ReadSocketData+0xf8>)
    8574:	185b      	adds	r3, r3, r1
    8576:	7a9b      	ldrb	r3, [r3, #10]
    8578:	2b01      	cmp	r3, #1
    857a:	d153      	bne.n	8624 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    857c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    857e:	4b2d      	ldr	r3, [pc, #180]	; (8634 <Socket_ReadSocketData+0xf8>)
    8580:	469b      	mov	fp, r3
    8582:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    8584:	465b      	mov	r3, fp
    8586:	220a      	movs	r2, #10
    8588:	4690      	mov	r8, r2
    858a:	44d8      	add	r8, fp
    858c:	468a      	mov	sl, r1
    858e:	9500      	str	r5, [sp, #0]
    8590:	9303      	str	r3, [sp, #12]
    8592:	e015      	b.n	85c0 <Socket_ReadSocketData+0x84>
    8594:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    8596:	2301      	movs	r3, #1
    8598:	e01c      	b.n	85d4 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    859a:	3301      	adds	r3, #1
    859c:	2200      	movs	r2, #0
    859e:	2100      	movs	r1, #0
    85a0:	2000      	movs	r0, #0
    85a2:	4c25      	ldr	r4, [pc, #148]	; (8638 <Socket_ReadSocketData+0xfc>)
    85a4:	47a0      	blx	r4
    85a6:	e03d      	b.n	8624 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    85a8:	4824      	ldr	r0, [pc, #144]	; (863c <Socket_ReadSocketData+0x100>)
    85aa:	4d25      	ldr	r5, [pc, #148]	; (8640 <Socket_ReadSocketData+0x104>)
    85ac:	47a8      	blx	r5
    85ae:	0021      	movs	r1, r4
    85b0:	4824      	ldr	r0, [pc, #144]	; (8644 <Socket_ReadSocketData+0x108>)
    85b2:	47a8      	blx	r5
    85b4:	200d      	movs	r0, #13
    85b6:	4b24      	ldr	r3, [pc, #144]	; (8648 <Socket_ReadSocketData+0x10c>)
    85b8:	4798      	blx	r3
				break;
    85ba:	e033      	b.n	8624 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    85bc:	2c00      	cmp	r4, #0
    85be:	d031      	beq.n	8624 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    85c0:	465b      	mov	r3, fp
    85c2:	889b      	ldrh	r3, [r3, #4]
    85c4:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    85c6:	b21b      	sxth	r3, r3
    85c8:	2b00      	cmp	r3, #0
    85ca:	dde3      	ble.n	8594 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    85cc:	9b03      	ldr	r3, [sp, #12]
    85ce:	889d      	ldrh	r5, [r3, #4]
    85d0:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    85d2:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    85d4:	4a17      	ldr	r2, [pc, #92]	; (8634 <Socket_ReadSocketData+0xf8>)
    85d6:	4651      	mov	r1, sl
    85d8:	5889      	ldr	r1, [r1, r2]
    85da:	002a      	movs	r2, r5
    85dc:	9800      	ldr	r0, [sp, #0]
    85de:	4f16      	ldr	r7, [pc, #88]	; (8638 <Socket_ReadSocketData+0xfc>)
    85e0:	47b8      	blx	r7
    85e2:	2800      	cmp	r0, #0
    85e4:	d1e0      	bne.n	85a8 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    85e6:	4b13      	ldr	r3, [pc, #76]	; (8634 <Socket_ReadSocketData+0xf8>)
    85e8:	4652      	mov	r2, sl
    85ea:	58d3      	ldr	r3, [r2, r3]
    85ec:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    85ee:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    85f0:	88f3      	ldrh	r3, [r6, #6]
    85f2:	1b5b      	subs	r3, r3, r5
    85f4:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    85f6:	4b15      	ldr	r3, [pc, #84]	; (864c <Socket_ReadSocketData+0x110>)
    85f8:	681b      	ldr	r3, [r3, #0]
    85fa:	2b00      	cmp	r3, #0
    85fc:	d005      	beq.n	860a <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    85fe:	4b13      	ldr	r3, [pc, #76]	; (864c <Socket_ReadSocketData+0x110>)
    8600:	681b      	ldr	r3, [r3, #0]
    8602:	0032      	movs	r2, r6
    8604:	9902      	ldr	r1, [sp, #8]
    8606:	9801      	ldr	r0, [sp, #4]
    8608:	4798      	blx	r3
				u16ReadCount -= u16Read;
    860a:	1b64      	subs	r4, r4, r5
    860c:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    860e:	9b00      	ldr	r3, [sp, #0]
    8610:	469c      	mov	ip, r3
    8612:	44ac      	add	ip, r5
    8614:	4663      	mov	r3, ip
    8616:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    8618:	4643      	mov	r3, r8
    861a:	781b      	ldrb	r3, [r3, #0]
    861c:	2b00      	cmp	r3, #0
    861e:	d1cd      	bne.n	85bc <Socket_ReadSocketData+0x80>
    8620:	2c00      	cmp	r4, #0
    8622:	d1ba      	bne.n	859a <Socket_ReadSocketData+0x5e>
	}
}
    8624:	b005      	add	sp, #20
    8626:	bc3c      	pop	{r2, r3, r4, r5}
    8628:	4690      	mov	r8, r2
    862a:	4699      	mov	r9, r3
    862c:	46a2      	mov	sl, r4
    862e:	46ab      	mov	fp, r5
    8630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8632:	46c0      	nop			; (mov r8, r8)
    8634:	20000930 	.word	0x20000930
    8638:	000068c1 	.word	0x000068c1
    863c:	00011b54 	.word	0x00011b54
    8640:	0000bb3d 	.word	0x0000bb3d
    8644:	000125b8 	.word	0x000125b8
    8648:	0000bb71 	.word	0x0000bb71
    864c:	200009e0 	.word	0x200009e0

00008650 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    8650:	b5f0      	push	{r4, r5, r6, r7, lr}
    8652:	46d6      	mov	lr, sl
    8654:	464f      	mov	r7, r9
    8656:	4646      	mov	r6, r8
    8658:	b5c0      	push	{r6, r7, lr}
    865a:	b09a      	sub	sp, #104	; 0x68
    865c:	000d      	movs	r5, r1
    865e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    8660:	2841      	cmp	r0, #65	; 0x41
    8662:	d039      	beq.n	86d8 <m2m_ip_cb+0x88>
    8664:	2854      	cmp	r0, #84	; 0x54
    8666:	d037      	beq.n	86d8 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    8668:	2842      	cmp	r0, #66	; 0x42
    866a:	d053      	beq.n	8714 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    866c:	2843      	cmp	r0, #67	; 0x43
    866e:	d06a      	beq.n	8746 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    8670:	2844      	cmp	r0, #68	; 0x44
    8672:	d100      	bne.n	8676 <m2m_ip_cb+0x26>
    8674:	e0af      	b.n	87d6 <m2m_ip_cb+0x186>
    8676:	284b      	cmp	r0, #75	; 0x4b
    8678:	d100      	bne.n	867c <m2m_ip_cb+0x2c>
    867a:	e0ac      	b.n	87d6 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    867c:	284a      	cmp	r0, #74	; 0x4a
    867e:	d100      	bne.n	8682 <m2m_ip_cb+0x32>
    8680:	e0cf      	b.n	8822 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    8682:	2846      	cmp	r0, #70	; 0x46
    8684:	d100      	bne.n	8688 <m2m_ip_cb+0x38>
    8686:	e0e5      	b.n	8854 <m2m_ip_cb+0x204>
    8688:	2848      	cmp	r0, #72	; 0x48
    868a:	d100      	bne.n	868e <m2m_ip_cb+0x3e>
    868c:	e10e      	b.n	88ac <m2m_ip_cb+0x25c>
    868e:	284d      	cmp	r0, #77	; 0x4d
    8690:	d100      	bne.n	8694 <m2m_ip_cb+0x44>
    8692:	e0dc      	b.n	884e <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    8694:	2845      	cmp	r0, #69	; 0x45
    8696:	d100      	bne.n	869a <m2m_ip_cb+0x4a>
    8698:	e12c      	b.n	88f4 <m2m_ip_cb+0x2a4>
    869a:	2847      	cmp	r0, #71	; 0x47
    869c:	d100      	bne.n	86a0 <m2m_ip_cb+0x50>
    869e:	e14d      	b.n	893c <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    86a0:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    86a2:	284c      	cmp	r0, #76	; 0x4c
    86a4:	d100      	bne.n	86a8 <m2m_ip_cb+0x58>
    86a6:	e126      	b.n	88f6 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    86a8:	2852      	cmp	r0, #82	; 0x52
    86aa:	d12d      	bne.n	8708 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    86ac:	2301      	movs	r3, #1
    86ae:	2214      	movs	r2, #20
    86b0:	a909      	add	r1, sp, #36	; 0x24
    86b2:	0020      	movs	r0, r4
    86b4:	4ca2      	ldr	r4, [pc, #648]	; (8940 <m2m_ip_cb+0x2f0>)
    86b6:	47a0      	blx	r4
    86b8:	2800      	cmp	r0, #0
    86ba:	d125      	bne.n	8708 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    86bc:	4ba1      	ldr	r3, [pc, #644]	; (8944 <m2m_ip_cb+0x2f4>)
    86be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    86c0:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    86c2:	681b      	ldr	r3, [r3, #0]
    86c4:	2b00      	cmp	r3, #0
    86c6:	d01f      	beq.n	8708 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    86c8:	4b9e      	ldr	r3, [pc, #632]	; (8944 <m2m_ip_cb+0x2f4>)
    86ca:	681c      	ldr	r4, [r3, #0]
    86cc:	ab09      	add	r3, sp, #36	; 0x24
    86ce:	7c1a      	ldrb	r2, [r3, #16]
    86d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    86d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    86d4:	47a0      	blx	r4
			}
		}
	}
}
    86d6:	e017      	b.n	8708 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    86d8:	2300      	movs	r3, #0
    86da:	2204      	movs	r2, #4
    86dc:	a909      	add	r1, sp, #36	; 0x24
    86de:	0020      	movs	r0, r4
    86e0:	4c97      	ldr	r4, [pc, #604]	; (8940 <m2m_ip_cb+0x2f0>)
    86e2:	47a0      	blx	r4
    86e4:	2800      	cmp	r0, #0
    86e6:	d10f      	bne.n	8708 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    86e8:	ab09      	add	r3, sp, #36	; 0x24
    86ea:	785a      	ldrb	r2, [r3, #1]
    86ec:	ab05      	add	r3, sp, #20
    86ee:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    86f0:	4b95      	ldr	r3, [pc, #596]	; (8948 <m2m_ip_cb+0x2f8>)
    86f2:	681b      	ldr	r3, [r3, #0]
    86f4:	2b00      	cmp	r3, #0
    86f6:	d007      	beq.n	8708 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    86f8:	4b93      	ldr	r3, [pc, #588]	; (8948 <m2m_ip_cb+0x2f8>)
    86fa:	681b      	ldr	r3, [r3, #0]
    86fc:	aa09      	add	r2, sp, #36	; 0x24
    86fe:	2000      	movs	r0, #0
    8700:	5610      	ldrsb	r0, [r2, r0]
    8702:	aa05      	add	r2, sp, #20
    8704:	2101      	movs	r1, #1
    8706:	4798      	blx	r3
}
    8708:	b01a      	add	sp, #104	; 0x68
    870a:	bc1c      	pop	{r2, r3, r4}
    870c:	4690      	mov	r8, r2
    870e:	4699      	mov	r9, r3
    8710:	46a2      	mov	sl, r4
    8712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    8714:	2300      	movs	r3, #0
    8716:	2204      	movs	r2, #4
    8718:	a909      	add	r1, sp, #36	; 0x24
    871a:	0020      	movs	r0, r4
    871c:	4c88      	ldr	r4, [pc, #544]	; (8940 <m2m_ip_cb+0x2f0>)
    871e:	47a0      	blx	r4
    8720:	2800      	cmp	r0, #0
    8722:	d1f1      	bne.n	8708 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    8724:	ab09      	add	r3, sp, #36	; 0x24
    8726:	785a      	ldrb	r2, [r3, #1]
    8728:	ab05      	add	r3, sp, #20
    872a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    872c:	4b86      	ldr	r3, [pc, #536]	; (8948 <m2m_ip_cb+0x2f8>)
    872e:	681b      	ldr	r3, [r3, #0]
    8730:	2b00      	cmp	r3, #0
    8732:	d0e9      	beq.n	8708 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    8734:	4b84      	ldr	r3, [pc, #528]	; (8948 <m2m_ip_cb+0x2f8>)
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	aa09      	add	r2, sp, #36	; 0x24
    873a:	2000      	movs	r0, #0
    873c:	5610      	ldrsb	r0, [r2, r0]
    873e:	aa05      	add	r2, sp, #20
    8740:	2102      	movs	r1, #2
    8742:	4798      	blx	r3
    8744:	e7e0      	b.n	8708 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    8746:	2300      	movs	r3, #0
    8748:	220c      	movs	r2, #12
    874a:	a905      	add	r1, sp, #20
    874c:	0020      	movs	r0, r4
    874e:	4c7c      	ldr	r4, [pc, #496]	; (8940 <m2m_ip_cb+0x2f0>)
    8750:	47a0      	blx	r4
    8752:	2800      	cmp	r0, #0
    8754:	d1d8      	bne.n	8708 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    8756:	ab05      	add	r3, sp, #20
    8758:	2209      	movs	r2, #9
    875a:	569a      	ldrsb	r2, [r3, r2]
    875c:	2a00      	cmp	r2, #0
    875e:	db24      	blt.n	87aa <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    8760:	0018      	movs	r0, r3
    8762:	2108      	movs	r1, #8
    8764:	5659      	ldrsb	r1, [r3, r1]
    8766:	4b79      	ldr	r3, [pc, #484]	; (894c <m2m_ip_cb+0x2fc>)
    8768:	0109      	lsls	r1, r1, #4
    876a:	1859      	adds	r1, r3, r1
    876c:	7ac9      	ldrb	r1, [r1, #11]
    876e:	b2c9      	uxtb	r1, r1
    8770:	0114      	lsls	r4, r2, #4
    8772:	191b      	adds	r3, r3, r4
    8774:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    8776:	2101      	movs	r1, #1
    8778:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    877a:	8941      	ldrh	r1, [r0, #10]
    877c:	3908      	subs	r1, #8
    877e:	b289      	uxth	r1, r1
    8780:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    8782:	4973      	ldr	r1, [pc, #460]	; (8950 <m2m_ip_cb+0x300>)
    8784:	880b      	ldrh	r3, [r1, #0]
    8786:	3301      	adds	r3, #1
    8788:	b29b      	uxth	r3, r3
    878a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    878c:	880b      	ldrh	r3, [r1, #0]
    878e:	b29b      	uxth	r3, r3
    8790:	2b00      	cmp	r3, #0
    8792:	d103      	bne.n	879c <m2m_ip_cb+0x14c>
					++gu16SessionID;
    8794:	880b      	ldrh	r3, [r1, #0]
    8796:	3301      	adds	r3, #1
    8798:	b29b      	uxth	r3, r3
    879a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    879c:	4b6c      	ldr	r3, [pc, #432]	; (8950 <m2m_ip_cb+0x300>)
    879e:	8819      	ldrh	r1, [r3, #0]
    87a0:	b289      	uxth	r1, r1
    87a2:	0110      	lsls	r0, r2, #4
    87a4:	4b69      	ldr	r3, [pc, #420]	; (894c <m2m_ip_cb+0x2fc>)
    87a6:	181b      	adds	r3, r3, r0
    87a8:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    87aa:	ab09      	add	r3, sp, #36	; 0x24
    87ac:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    87ae:	2202      	movs	r2, #2
    87b0:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    87b2:	aa05      	add	r2, sp, #20
    87b4:	8851      	ldrh	r1, [r2, #2]
    87b6:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    87b8:	9a06      	ldr	r2, [sp, #24]
    87ba:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    87bc:	4b62      	ldr	r3, [pc, #392]	; (8948 <m2m_ip_cb+0x2f8>)
    87be:	681b      	ldr	r3, [r3, #0]
    87c0:	2b00      	cmp	r3, #0
    87c2:	d0a1      	beq.n	8708 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    87c4:	4b60      	ldr	r3, [pc, #384]	; (8948 <m2m_ip_cb+0x2f8>)
    87c6:	681b      	ldr	r3, [r3, #0]
    87c8:	aa05      	add	r2, sp, #20
    87ca:	2008      	movs	r0, #8
    87cc:	5610      	ldrsb	r0, [r2, r0]
    87ce:	aa09      	add	r2, sp, #36	; 0x24
    87d0:	2104      	movs	r1, #4
    87d2:	4798      	blx	r3
    87d4:	e798      	b.n	8708 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    87d6:	2300      	movs	r3, #0
    87d8:	2204      	movs	r2, #4
    87da:	a909      	add	r1, sp, #36	; 0x24
    87dc:	0020      	movs	r0, r4
    87de:	4c58      	ldr	r4, [pc, #352]	; (8940 <m2m_ip_cb+0x2f0>)
    87e0:	47a0      	blx	r4
    87e2:	2800      	cmp	r0, #0
    87e4:	d000      	beq.n	87e8 <m2m_ip_cb+0x198>
    87e6:	e78f      	b.n	8708 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    87e8:	ab09      	add	r3, sp, #36	; 0x24
    87ea:	2000      	movs	r0, #0
    87ec:	5618      	ldrsb	r0, [r3, r0]
    87ee:	aa05      	add	r2, sp, #20
    87f0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    87f2:	785b      	ldrb	r3, [r3, #1]
    87f4:	b25b      	sxtb	r3, r3
    87f6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    87f8:	2b00      	cmp	r3, #0
    87fa:	d107      	bne.n	880c <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    87fc:	ab09      	add	r3, sp, #36	; 0x24
    87fe:	885b      	ldrh	r3, [r3, #2]
    8800:	3b08      	subs	r3, #8
    8802:	b29b      	uxth	r3, r3
    8804:	0101      	lsls	r1, r0, #4
    8806:	4a51      	ldr	r2, [pc, #324]	; (894c <m2m_ip_cb+0x2fc>)
    8808:	1852      	adds	r2, r2, r1
    880a:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    880c:	4b4e      	ldr	r3, [pc, #312]	; (8948 <m2m_ip_cb+0x2f8>)
    880e:	681b      	ldr	r3, [r3, #0]
    8810:	2b00      	cmp	r3, #0
    8812:	d100      	bne.n	8816 <m2m_ip_cb+0x1c6>
    8814:	e778      	b.n	8708 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    8816:	4b4c      	ldr	r3, [pc, #304]	; (8948 <m2m_ip_cb+0x2f8>)
    8818:	681b      	ldr	r3, [r3, #0]
    881a:	aa05      	add	r2, sp, #20
    881c:	2105      	movs	r1, #5
    881e:	4798      	blx	r3
	{
    8820:	e772      	b.n	8708 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    8822:	2300      	movs	r3, #0
    8824:	2244      	movs	r2, #68	; 0x44
    8826:	a909      	add	r1, sp, #36	; 0x24
    8828:	0020      	movs	r0, r4
    882a:	4c45      	ldr	r4, [pc, #276]	; (8940 <m2m_ip_cb+0x2f0>)
    882c:	47a0      	blx	r4
    882e:	2800      	cmp	r0, #0
    8830:	d000      	beq.n	8834 <m2m_ip_cb+0x1e4>
    8832:	e769      	b.n	8708 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    8834:	4b47      	ldr	r3, [pc, #284]	; (8954 <m2m_ip_cb+0x304>)
    8836:	681b      	ldr	r3, [r3, #0]
    8838:	2b00      	cmp	r3, #0
    883a:	d100      	bne.n	883e <m2m_ip_cb+0x1ee>
    883c:	e764      	b.n	8708 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    883e:	4b45      	ldr	r3, [pc, #276]	; (8954 <m2m_ip_cb+0x304>)
    8840:	681b      	ldr	r3, [r3, #0]
    8842:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8844:	9203      	str	r2, [sp, #12]
    8846:	0011      	movs	r1, r2
    8848:	a809      	add	r0, sp, #36	; 0x24
    884a:	4798      	blx	r3
    884c:	e75c      	b.n	8708 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    884e:	2306      	movs	r3, #6
    8850:	469a      	mov	sl, r3
    8852:	e001      	b.n	8858 <m2m_ip_cb+0x208>
    8854:	2306      	movs	r3, #6
    8856:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    8858:	2300      	movs	r3, #0
    885a:	2210      	movs	r2, #16
    885c:	a905      	add	r1, sp, #20
    885e:	0020      	movs	r0, r4
    8860:	4f37      	ldr	r7, [pc, #220]	; (8940 <m2m_ip_cb+0x2f0>)
    8862:	47b8      	blx	r7
    8864:	2800      	cmp	r0, #0
    8866:	d000      	beq.n	886a <m2m_ip_cb+0x21a>
    8868:	e74e      	b.n	8708 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    886a:	aa05      	add	r2, sp, #20
    886c:	200c      	movs	r0, #12
    886e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    8870:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    8872:	0107      	lsls	r7, r0, #4
    8874:	4935      	ldr	r1, [pc, #212]	; (894c <m2m_ip_cb+0x2fc>)
    8876:	19c9      	adds	r1, r1, r7
    8878:	2700      	movs	r7, #0
    887a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    887c:	2608      	movs	r6, #8
    887e:	5f97      	ldrsh	r7, [r2, r6]
    8880:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    8882:	8957      	ldrh	r7, [r2, #10]
    8884:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    8886:	af09      	add	r7, sp, #36	; 0x24
    8888:	8856      	ldrh	r6, [r2, #2]
    888a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    888c:	9a06      	ldr	r2, [sp, #24]
    888e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    8890:	88ca      	ldrh	r2, [r1, #6]
    8892:	b292      	uxth	r2, r2
    8894:	4293      	cmp	r3, r2
    8896:	d00c      	beq.n	88b2 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    8898:	2d10      	cmp	r5, #16
    889a:	d800      	bhi.n	889e <m2m_ip_cb+0x24e>
    889c:	e734      	b.n	8708 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    889e:	2301      	movs	r3, #1
    88a0:	2200      	movs	r2, #0
    88a2:	2100      	movs	r1, #0
    88a4:	2000      	movs	r0, #0
    88a6:	4c26      	ldr	r4, [pc, #152]	; (8940 <m2m_ip_cb+0x2f0>)
    88a8:	47a0      	blx	r4
	{
    88aa:	e72d      	b.n	8708 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    88ac:	2309      	movs	r3, #9
    88ae:	469a      	mov	sl, r3
    88b0:	e7d2      	b.n	8858 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    88b2:	4643      	mov	r3, r8
    88b4:	2b00      	cmp	r3, #0
    88b6:	dd01      	ble.n	88bc <m2m_ip_cb+0x26c>
    88b8:	45a8      	cmp	r8, r5
    88ba:	db0f      	blt.n	88dc <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    88bc:	ab09      	add	r3, sp, #36	; 0x24
    88be:	4642      	mov	r2, r8
    88c0:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    88c2:	2300      	movs	r3, #0
    88c4:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    88c6:	4b20      	ldr	r3, [pc, #128]	; (8948 <m2m_ip_cb+0x2f8>)
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	2b00      	cmp	r3, #0
    88cc:	d100      	bne.n	88d0 <m2m_ip_cb+0x280>
    88ce:	e71b      	b.n	8708 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    88d0:	4b1d      	ldr	r3, [pc, #116]	; (8948 <m2m_ip_cb+0x2f8>)
    88d2:	681b      	ldr	r3, [r3, #0]
    88d4:	aa09      	add	r2, sp, #36	; 0x24
    88d6:	4651      	mov	r1, sl
    88d8:	4798      	blx	r3
    88da:	e715      	b.n	8708 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    88dc:	0023      	movs	r3, r4
    88de:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    88e0:	4642      	mov	r2, r8
    88e2:	4669      	mov	r1, sp
    88e4:	818a      	strh	r2, [r1, #12]
    88e6:	898a      	ldrh	r2, [r1, #12]
    88e8:	9200      	str	r2, [sp, #0]
    88ea:	4652      	mov	r2, sl
    88ec:	0039      	movs	r1, r7
    88ee:	4c1a      	ldr	r4, [pc, #104]	; (8958 <m2m_ip_cb+0x308>)
    88f0:	47a0      	blx	r4
    88f2:	e709      	b.n	8708 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    88f4:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    88f6:	2300      	movs	r3, #0
    88f8:	2208      	movs	r2, #8
    88fa:	a909      	add	r1, sp, #36	; 0x24
    88fc:	0020      	movs	r0, r4
    88fe:	4c10      	ldr	r4, [pc, #64]	; (8940 <m2m_ip_cb+0x2f0>)
    8900:	47a0      	blx	r4
    8902:	2800      	cmp	r0, #0
    8904:	d000      	beq.n	8908 <m2m_ip_cb+0x2b8>
    8906:	e6ff      	b.n	8708 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    8908:	ab09      	add	r3, sp, #36	; 0x24
    890a:	2000      	movs	r0, #0
    890c:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    890e:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    8910:	8859      	ldrh	r1, [r3, #2]
    8912:	ab05      	add	r3, sp, #20
    8914:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    8916:	0101      	lsls	r1, r0, #4
    8918:	4b0c      	ldr	r3, [pc, #48]	; (894c <m2m_ip_cb+0x2fc>)
    891a:	185b      	adds	r3, r3, r1
    891c:	88db      	ldrh	r3, [r3, #6]
    891e:	b29b      	uxth	r3, r3
    8920:	429a      	cmp	r2, r3
    8922:	d000      	beq.n	8926 <m2m_ip_cb+0x2d6>
    8924:	e6f0      	b.n	8708 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    8926:	4b08      	ldr	r3, [pc, #32]	; (8948 <m2m_ip_cb+0x2f8>)
    8928:	681b      	ldr	r3, [r3, #0]
    892a:	2b00      	cmp	r3, #0
    892c:	d100      	bne.n	8930 <m2m_ip_cb+0x2e0>
    892e:	e6eb      	b.n	8708 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    8930:	4b05      	ldr	r3, [pc, #20]	; (8948 <m2m_ip_cb+0x2f8>)
    8932:	681b      	ldr	r3, [r3, #0]
    8934:	aa05      	add	r2, sp, #20
    8936:	0029      	movs	r1, r5
    8938:	4798      	blx	r3
	{
    893a:	e6e5      	b.n	8708 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    893c:	2508      	movs	r5, #8
    893e:	e7da      	b.n	88f6 <m2m_ip_cb+0x2a6>
    8940:	000068c1 	.word	0x000068c1
    8944:	200009e4 	.word	0x200009e4
    8948:	200009e0 	.word	0x200009e0
    894c:	20000930 	.word	0x20000930
    8950:	2000026a 	.word	0x2000026a
    8954:	200009e8 	.word	0x200009e8
    8958:	0000853d 	.word	0x0000853d

0000895c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    895c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    895e:	4b0a      	ldr	r3, [pc, #40]	; (8988 <socketInit+0x2c>)
    8960:	781b      	ldrb	r3, [r3, #0]
    8962:	2b00      	cmp	r3, #0
    8964:	d000      	beq.n	8968 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    8966:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    8968:	22b0      	movs	r2, #176	; 0xb0
    896a:	2100      	movs	r1, #0
    896c:	4807      	ldr	r0, [pc, #28]	; (898c <socketInit+0x30>)
    896e:	4b08      	ldr	r3, [pc, #32]	; (8990 <socketInit+0x34>)
    8970:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    8972:	4908      	ldr	r1, [pc, #32]	; (8994 <socketInit+0x38>)
    8974:	2002      	movs	r0, #2
    8976:	4b08      	ldr	r3, [pc, #32]	; (8998 <socketInit+0x3c>)
    8978:	4798      	blx	r3
		gbSocketInit	= 1;
    897a:	2201      	movs	r2, #1
    897c:	4b02      	ldr	r3, [pc, #8]	; (8988 <socketInit+0x2c>)
    897e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    8980:	2200      	movs	r2, #0
    8982:	4b06      	ldr	r3, [pc, #24]	; (899c <socketInit+0x40>)
    8984:	801a      	strh	r2, [r3, #0]
}
    8986:	e7ee      	b.n	8966 <socketInit+0xa>
    8988:	20000269 	.word	0x20000269
    898c:	20000930 	.word	0x20000930
    8990:	0000617d 	.word	0x0000617d
    8994:	00008651 	.word	0x00008651
    8998:	000069ad 	.word	0x000069ad
    899c:	2000026a 	.word	0x2000026a

000089a0 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    89a0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    89a2:	22b0      	movs	r2, #176	; 0xb0
    89a4:	2100      	movs	r1, #0
    89a6:	4807      	ldr	r0, [pc, #28]	; (89c4 <socketDeinit+0x24>)
    89a8:	4b07      	ldr	r3, [pc, #28]	; (89c8 <socketDeinit+0x28>)
    89aa:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    89ac:	2100      	movs	r1, #0
    89ae:	2002      	movs	r0, #2
    89b0:	4b06      	ldr	r3, [pc, #24]	; (89cc <socketDeinit+0x2c>)
    89b2:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    89b4:	2300      	movs	r3, #0
    89b6:	4a06      	ldr	r2, [pc, #24]	; (89d0 <socketDeinit+0x30>)
    89b8:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    89ba:	4a06      	ldr	r2, [pc, #24]	; (89d4 <socketDeinit+0x34>)
    89bc:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    89be:	4a06      	ldr	r2, [pc, #24]	; (89d8 <socketDeinit+0x38>)
    89c0:	7013      	strb	r3, [r2, #0]
}
    89c2:	bd10      	pop	{r4, pc}
    89c4:	20000930 	.word	0x20000930
    89c8:	0000617d 	.word	0x0000617d
    89cc:	000069ad 	.word	0x000069ad
    89d0:	200009e0 	.word	0x200009e0
    89d4:	200009e8 	.word	0x200009e8
    89d8:	20000269 	.word	0x20000269

000089dc <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    89dc:	4b02      	ldr	r3, [pc, #8]	; (89e8 <registerSocketCallback+0xc>)
    89de:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    89e0:	4b02      	ldr	r3, [pc, #8]	; (89ec <registerSocketCallback+0x10>)
    89e2:	6019      	str	r1, [r3, #0]
}
    89e4:	4770      	bx	lr
    89e6:	46c0      	nop			; (mov r8, r8)
    89e8:	200009e0 	.word	0x200009e0
    89ec:	200009e8 	.word	0x200009e8

000089f0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    89f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    89f2:	46d6      	mov	lr, sl
    89f4:	4647      	mov	r7, r8
    89f6:	b580      	push	{r7, lr}
    89f8:	b089      	sub	sp, #36	; 0x24
    89fa:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    89fc:	2802      	cmp	r0, #2
    89fe:	d000      	beq.n	8a02 <socket+0x12>
    8a00:	e09c      	b.n	8b3c <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    8a02:	2901      	cmp	r1, #1
    8a04:	d00a      	beq.n	8a1c <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    8a06:	2902      	cmp	r1, #2
    8a08:	d100      	bne.n	8a0c <socket+0x1c>
    8a0a:	e070      	b.n	8aee <socket+0xfe>
	SOCKET					sock = -1;
    8a0c:	2501      	movs	r5, #1
    8a0e:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    8a10:	0028      	movs	r0, r5
    8a12:	b009      	add	sp, #36	; 0x24
    8a14:	bc0c      	pop	{r2, r3}
    8a16:	4690      	mov	r8, r2
    8a18:	469a      	mov	sl, r3
    8a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    8a1c:	4c49      	ldr	r4, [pc, #292]	; (8b44 <socket+0x154>)
    8a1e:	7827      	ldrb	r7, [r4, #0]
    8a20:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8a22:	7826      	ldrb	r6, [r4, #0]
    8a24:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8a26:	7820      	ldrb	r0, [r4, #0]
    8a28:	3001      	adds	r0, #1
    8a2a:	3106      	adds	r1, #6
    8a2c:	4b46      	ldr	r3, [pc, #280]	; (8b48 <socket+0x158>)
    8a2e:	4798      	blx	r3
    8a30:	b2c9      	uxtb	r1, r1
    8a32:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    8a34:	0132      	lsls	r2, r6, #4
    8a36:	4b45      	ldr	r3, [pc, #276]	; (8b4c <socket+0x15c>)
    8a38:	189b      	adds	r3, r3, r2
    8a3a:	7a9b      	ldrb	r3, [r3, #10]
    8a3c:	2506      	movs	r5, #6
    8a3e:	2b00      	cmp	r3, #0
    8a40:	d018      	beq.n	8a74 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    8a42:	4e40      	ldr	r6, [pc, #256]	; (8b44 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8a44:	4b40      	ldr	r3, [pc, #256]	; (8b48 <socket+0x158>)
    8a46:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    8a48:	4b40      	ldr	r3, [pc, #256]	; (8b4c <socket+0x15c>)
    8a4a:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    8a4c:	7837      	ldrb	r7, [r6, #0]
    8a4e:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8a50:	7834      	ldrb	r4, [r6, #0]
    8a52:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8a54:	7830      	ldrb	r0, [r6, #0]
    8a56:	3001      	adds	r0, #1
    8a58:	2107      	movs	r1, #7
    8a5a:	47d0      	blx	sl
    8a5c:	b2c9      	uxtb	r1, r1
    8a5e:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    8a60:	0123      	lsls	r3, r4, #4
    8a62:	4443      	add	r3, r8
    8a64:	7a9b      	ldrb	r3, [r3, #10]
    8a66:	2b00      	cmp	r3, #0
    8a68:	d007      	beq.n	8a7a <socket+0x8a>
    8a6a:	3d01      	subs	r5, #1
    8a6c:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    8a6e:	2d00      	cmp	r5, #0
    8a70:	d1ec      	bne.n	8a4c <socket+0x5c>
    8a72:	e7cb      	b.n	8a0c <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8a74:	4b35      	ldr	r3, [pc, #212]	; (8b4c <socket+0x15c>)
    8a76:	18d4      	adds	r4, r2, r3
    8a78:	e002      	b.n	8a80 <socket+0x90>
    8a7a:	0124      	lsls	r4, r4, #4
    8a7c:	4b33      	ldr	r3, [pc, #204]	; (8b4c <socket+0x15c>)
    8a7e:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    8a80:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    8a82:	2d00      	cmp	r5, #0
    8a84:	dbc4      	blt.n	8a10 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    8a86:	2210      	movs	r2, #16
    8a88:	2100      	movs	r1, #0
    8a8a:	0020      	movs	r0, r4
    8a8c:	4b30      	ldr	r3, [pc, #192]	; (8b50 <socket+0x160>)
    8a8e:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    8a90:	2301      	movs	r3, #1
    8a92:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    8a94:	4a2f      	ldr	r2, [pc, #188]	; (8b54 <socket+0x164>)
    8a96:	8813      	ldrh	r3, [r2, #0]
    8a98:	3301      	adds	r3, #1
    8a9a:	b29b      	uxth	r3, r3
    8a9c:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    8a9e:	8813      	ldrh	r3, [r2, #0]
    8aa0:	b29b      	uxth	r3, r3
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d103      	bne.n	8aae <socket+0xbe>
				++gu16SessionID;
    8aa6:	8813      	ldrh	r3, [r2, #0]
    8aa8:	3301      	adds	r3, #1
    8aaa:	b29b      	uxth	r3, r3
    8aac:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    8aae:	4e29      	ldr	r6, [pc, #164]	; (8b54 <socket+0x164>)
    8ab0:	8833      	ldrh	r3, [r6, #0]
    8ab2:	b29b      	uxth	r3, r3
    8ab4:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    8ab6:	4828      	ldr	r0, [pc, #160]	; (8b58 <socket+0x168>)
    8ab8:	4f28      	ldr	r7, [pc, #160]	; (8b5c <socket+0x16c>)
    8aba:	47b8      	blx	r7
    8abc:	8832      	ldrh	r2, [r6, #0]
    8abe:	b292      	uxth	r2, r2
    8ac0:	0029      	movs	r1, r5
    8ac2:	4827      	ldr	r0, [pc, #156]	; (8b60 <socket+0x170>)
    8ac4:	47b8      	blx	r7
    8ac6:	200d      	movs	r0, #13
    8ac8:	4b26      	ldr	r3, [pc, #152]	; (8b64 <socket+0x174>)
    8aca:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    8acc:	9b05      	ldr	r3, [sp, #20]
    8ace:	07db      	lsls	r3, r3, #31
    8ad0:	d59e      	bpl.n	8a10 <socket+0x20>
				strSSLCreate.sslSock = sock;
    8ad2:	aa07      	add	r2, sp, #28
    8ad4:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    8ad6:	2321      	movs	r3, #33	; 0x21
    8ad8:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    8ada:	2300      	movs	r3, #0
    8adc:	9302      	str	r3, [sp, #8]
    8ade:	9301      	str	r3, [sp, #4]
    8ae0:	9300      	str	r3, [sp, #0]
    8ae2:	3304      	adds	r3, #4
    8ae4:	2150      	movs	r1, #80	; 0x50
    8ae6:	2002      	movs	r0, #2
    8ae8:	4c1f      	ldr	r4, [pc, #124]	; (8b68 <socket+0x178>)
    8aea:	47a0      	blx	r4
    8aec:	e790      	b.n	8a10 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    8aee:	4b1f      	ldr	r3, [pc, #124]	; (8b6c <socket+0x17c>)
    8af0:	781d      	ldrb	r5, [r3, #0]
    8af2:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8af4:	781c      	ldrb	r4, [r3, #0]
    8af6:	0124      	lsls	r4, r4, #4
    8af8:	4a1d      	ldr	r2, [pc, #116]	; (8b70 <socket+0x180>)
    8afa:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8afc:	7819      	ldrb	r1, [r3, #0]
    8afe:	3101      	adds	r1, #1
    8b00:	2203      	movs	r2, #3
    8b02:	400a      	ands	r2, r1
    8b04:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    8b06:	7aa3      	ldrb	r3, [r4, #10]
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d014      	beq.n	8b36 <socket+0x146>
    8b0c:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    8b0e:	4917      	ldr	r1, [pc, #92]	; (8b6c <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8b10:	4f17      	ldr	r7, [pc, #92]	; (8b70 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8b12:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    8b14:	780d      	ldrb	r5, [r1, #0]
    8b16:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8b18:	780c      	ldrb	r4, [r1, #0]
    8b1a:	0124      	lsls	r4, r4, #4
    8b1c:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8b1e:	780b      	ldrb	r3, [r1, #0]
    8b20:	3301      	adds	r3, #1
    8b22:	4003      	ands	r3, r0
    8b24:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    8b26:	7aa3      	ldrb	r3, [r4, #10]
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d004      	beq.n	8b36 <socket+0x146>
    8b2c:	3a01      	subs	r2, #1
    8b2e:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    8b30:	2a00      	cmp	r2, #0
    8b32:	d1ef      	bne.n	8b14 <socket+0x124>
    8b34:	e76a      	b.n	8a0c <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    8b36:	3507      	adds	r5, #7
    8b38:	b26d      	sxtb	r5, r5
					break;
    8b3a:	e7a2      	b.n	8a82 <socket+0x92>
	SOCKET					sock = -1;
    8b3c:	2501      	movs	r5, #1
    8b3e:	426d      	negs	r5, r5
    8b40:	e766      	b.n	8a10 <socket+0x20>
    8b42:	46c0      	nop			; (mov r8, r8)
    8b44:	2000026c 	.word	0x2000026c
    8b48:	0000e379 	.word	0x0000e379
    8b4c:	20000930 	.word	0x20000930
    8b50:	0000617d 	.word	0x0000617d
    8b54:	2000026a 	.word	0x2000026a
    8b58:	00011b54 	.word	0x00011b54
    8b5c:	0000bb3d 	.word	0x0000bb3d
    8b60:	000125e4 	.word	0x000125e4
    8b64:	0000bb71 	.word	0x0000bb71
    8b68:	000062b5 	.word	0x000062b5
    8b6c:	2000026d 	.word	0x2000026d
    8b70:	200009a0 	.word	0x200009a0

00008b74 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    8b74:	b570      	push	{r4, r5, r6, lr}
    8b76:	b088      	sub	sp, #32
    8b78:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    8b7a:	db30      	blt.n	8bde <connect+0x6a>
    8b7c:	2900      	cmp	r1, #0
    8b7e:	d031      	beq.n	8be4 <connect+0x70>
    8b80:	0100      	lsls	r0, r0, #4
    8b82:	4b1d      	ldr	r3, [pc, #116]	; (8bf8 <connect+0x84>)
    8b84:	181b      	adds	r3, r3, r0
    8b86:	7a9b      	ldrb	r3, [r3, #10]
    8b88:	2b01      	cmp	r3, #1
    8b8a:	d12e      	bne.n	8bea <connect+0x76>
    8b8c:	2a00      	cmp	r2, #0
    8b8e:	d02f      	beq.n	8bf0 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    8b90:	4b19      	ldr	r3, [pc, #100]	; (8bf8 <connect+0x84>)
    8b92:	181b      	adds	r3, r3, r0
    8b94:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    8b96:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    8b98:	07db      	lsls	r3, r3, #31
    8b9a:	d505      	bpl.n	8ba8 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    8b9c:	4b16      	ldr	r3, [pc, #88]	; (8bf8 <connect+0x84>)
    8b9e:	181b      	adds	r3, r3, r0
    8ba0:	7ada      	ldrb	r2, [r3, #11]
    8ba2:	ab05      	add	r3, sp, #20
    8ba4:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    8ba6:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    8ba8:	ad05      	add	r5, sp, #20
    8baa:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    8bac:	2208      	movs	r2, #8
    8bae:	0028      	movs	r0, r5
    8bb0:	4b12      	ldr	r3, [pc, #72]	; (8bfc <connect+0x88>)
    8bb2:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    8bb4:	0124      	lsls	r4, r4, #4
    8bb6:	4b10      	ldr	r3, [pc, #64]	; (8bf8 <connect+0x84>)
    8bb8:	191c      	adds	r4, r3, r4
    8bba:	88e3      	ldrh	r3, [r4, #6]
    8bbc:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    8bbe:	2300      	movs	r3, #0
    8bc0:	9302      	str	r3, [sp, #8]
    8bc2:	9301      	str	r3, [sp, #4]
    8bc4:	9300      	str	r3, [sp, #0]
    8bc6:	330c      	adds	r3, #12
    8bc8:	002a      	movs	r2, r5
    8bca:	0031      	movs	r1, r6
    8bcc:	2002      	movs	r0, #2
    8bce:	4c0c      	ldr	r4, [pc, #48]	; (8c00 <connect+0x8c>)
    8bd0:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8bd2:	2800      	cmp	r0, #0
    8bd4:	d001      	beq.n	8bda <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    8bd6:	2009      	movs	r0, #9
    8bd8:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    8bda:	b008      	add	sp, #32
    8bdc:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8bde:	2006      	movs	r0, #6
    8be0:	4240      	negs	r0, r0
    8be2:	e7fa      	b.n	8bda <connect+0x66>
    8be4:	2006      	movs	r0, #6
    8be6:	4240      	negs	r0, r0
    8be8:	e7f7      	b.n	8bda <connect+0x66>
    8bea:	2006      	movs	r0, #6
    8bec:	4240      	negs	r0, r0
    8bee:	e7f4      	b.n	8bda <connect+0x66>
    8bf0:	2006      	movs	r0, #6
    8bf2:	4240      	negs	r0, r0
    8bf4:	e7f1      	b.n	8bda <connect+0x66>
    8bf6:	46c0      	nop			; (mov r8, r8)
    8bf8:	20000930 	.word	0x20000930
    8bfc:	00006169 	.word	0x00006169
    8c00:	000062b5 	.word	0x000062b5

00008c04 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    8c04:	b530      	push	{r4, r5, lr}
    8c06:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    8c08:	2800      	cmp	r0, #0
    8c0a:	db36      	blt.n	8c7a <send+0x76>
    8c0c:	2900      	cmp	r1, #0
    8c0e:	d037      	beq.n	8c80 <send+0x7c>
    8c10:	23af      	movs	r3, #175	; 0xaf
    8c12:	00db      	lsls	r3, r3, #3
    8c14:	429a      	cmp	r2, r3
    8c16:	d836      	bhi.n	8c86 <send+0x82>
    8c18:	0104      	lsls	r4, r0, #4
    8c1a:	4b1e      	ldr	r3, [pc, #120]	; (8c94 <send+0x90>)
    8c1c:	191b      	adds	r3, r3, r4
    8c1e:	7a9b      	ldrb	r3, [r3, #10]
    8c20:	2b01      	cmp	r3, #1
    8c22:	d133      	bne.n	8c8c <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    8c24:	ab04      	add	r3, sp, #16
    8c26:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    8c28:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    8c2a:	0025      	movs	r5, r4
    8c2c:	4c19      	ldr	r4, [pc, #100]	; (8c94 <send+0x90>)
    8c2e:	1964      	adds	r4, r4, r5
    8c30:	88e4      	ldrh	r4, [r4, #6]
    8c32:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    8c34:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    8c36:	2806      	cmp	r0, #6
    8c38:	dd00      	ble.n	8c3c <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    8c3a:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8c3c:	0104      	lsls	r4, r0, #4
    8c3e:	4b15      	ldr	r3, [pc, #84]	; (8c94 <send+0x90>)
    8c40:	191b      	adds	r3, r3, r4
    8c42:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    8c44:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8c46:	07e4      	lsls	r4, r4, #31
    8c48:	d505      	bpl.n	8c56 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    8c4a:	0100      	lsls	r0, r0, #4
    8c4c:	4b11      	ldr	r3, [pc, #68]	; (8c94 <send+0x90>)
    8c4e:	1818      	adds	r0, r3, r0
    8c50:	8905      	ldrh	r5, [r0, #8]
    8c52:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    8c54:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    8c56:	2080      	movs	r0, #128	; 0x80
    8c58:	4318      	orrs	r0, r3
    8c5a:	9502      	str	r5, [sp, #8]
    8c5c:	9201      	str	r2, [sp, #4]
    8c5e:	9100      	str	r1, [sp, #0]
    8c60:	2310      	movs	r3, #16
    8c62:	aa04      	add	r2, sp, #16
    8c64:	0001      	movs	r1, r0
    8c66:	2002      	movs	r0, #2
    8c68:	4c0b      	ldr	r4, [pc, #44]	; (8c98 <send+0x94>)
    8c6a:	47a0      	blx	r4
    8c6c:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    8c6e:	2800      	cmp	r0, #0
    8c70:	d000      	beq.n	8c74 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    8c72:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    8c74:	0018      	movs	r0, r3
    8c76:	b009      	add	sp, #36	; 0x24
    8c78:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    8c7a:	2306      	movs	r3, #6
    8c7c:	425b      	negs	r3, r3
    8c7e:	e7f9      	b.n	8c74 <send+0x70>
    8c80:	2306      	movs	r3, #6
    8c82:	425b      	negs	r3, r3
    8c84:	e7f6      	b.n	8c74 <send+0x70>
    8c86:	2306      	movs	r3, #6
    8c88:	425b      	negs	r3, r3
    8c8a:	e7f3      	b.n	8c74 <send+0x70>
    8c8c:	2306      	movs	r3, #6
    8c8e:	425b      	negs	r3, r3
    8c90:	e7f0      	b.n	8c74 <send+0x70>
    8c92:	46c0      	nop			; (mov r8, r8)
    8c94:	20000930 	.word	0x20000930
    8c98:	000062b5 	.word	0x000062b5

00008c9c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    8c9c:	b530      	push	{r4, r5, lr}
    8c9e:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    8ca0:	2800      	cmp	r0, #0
    8ca2:	db34      	blt.n	8d0e <recv+0x72>
    8ca4:	2900      	cmp	r1, #0
    8ca6:	d035      	beq.n	8d14 <recv+0x78>
    8ca8:	2a00      	cmp	r2, #0
    8caa:	d036      	beq.n	8d1a <recv+0x7e>
    8cac:	0105      	lsls	r5, r0, #4
    8cae:	4c1e      	ldr	r4, [pc, #120]	; (8d28 <recv+0x8c>)
    8cb0:	1964      	adds	r4, r4, r5
    8cb2:	7aa4      	ldrb	r4, [r4, #10]
    8cb4:	2c01      	cmp	r4, #1
    8cb6:	d133      	bne.n	8d20 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    8cb8:	4c1b      	ldr	r4, [pc, #108]	; (8d28 <recv+0x8c>)
    8cba:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    8cbc:	1964      	adds	r4, r4, r5
    8cbe:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    8cc0:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    8cc2:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    8cc4:	2900      	cmp	r1, #0
    8cc6:	d11d      	bne.n	8d04 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    8cc8:	2101      	movs	r1, #1
    8cca:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8ccc:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    8cce:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8cd0:	07d2      	lsls	r2, r2, #31
    8cd2:	d500      	bpl.n	8cd6 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    8cd4:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	d117      	bne.n	8d0a <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    8cda:	3b01      	subs	r3, #1
    8cdc:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    8cde:	aa04      	add	r2, sp, #16
    8ce0:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    8ce2:	0100      	lsls	r0, r0, #4
    8ce4:	4b10      	ldr	r3, [pc, #64]	; (8d28 <recv+0x8c>)
    8ce6:	1818      	adds	r0, r3, r0
    8ce8:	88c3      	ldrh	r3, [r0, #6]
    8cea:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    8cec:	2300      	movs	r3, #0
    8cee:	9302      	str	r3, [sp, #8]
    8cf0:	9301      	str	r3, [sp, #4]
    8cf2:	9300      	str	r3, [sp, #0]
    8cf4:	3308      	adds	r3, #8
    8cf6:	2002      	movs	r0, #2
    8cf8:	4c0c      	ldr	r4, [pc, #48]	; (8d2c <recv+0x90>)
    8cfa:	47a0      	blx	r4
    8cfc:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    8cfe:	2800      	cmp	r0, #0
    8d00:	d000      	beq.n	8d04 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    8d02:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    8d04:	0010      	movs	r0, r2
    8d06:	b007      	add	sp, #28
    8d08:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    8d0a:	9304      	str	r3, [sp, #16]
    8d0c:	e7e7      	b.n	8cde <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    8d0e:	2206      	movs	r2, #6
    8d10:	4252      	negs	r2, r2
    8d12:	e7f7      	b.n	8d04 <recv+0x68>
    8d14:	2206      	movs	r2, #6
    8d16:	4252      	negs	r2, r2
    8d18:	e7f4      	b.n	8d04 <recv+0x68>
    8d1a:	2206      	movs	r2, #6
    8d1c:	4252      	negs	r2, r2
    8d1e:	e7f1      	b.n	8d04 <recv+0x68>
    8d20:	2206      	movs	r2, #6
    8d22:	4252      	negs	r2, r2
    8d24:	e7ee      	b.n	8d04 <recv+0x68>
    8d26:	46c0      	nop			; (mov r8, r8)
    8d28:	20000930 	.word	0x20000930
    8d2c:	000062b5 	.word	0x000062b5

00008d30 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    8d30:	b530      	push	{r4, r5, lr}
    8d32:	b087      	sub	sp, #28
    8d34:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    8d36:	481e      	ldr	r0, [pc, #120]	; (8db0 <close+0x80>)
    8d38:	4d1e      	ldr	r5, [pc, #120]	; (8db4 <close+0x84>)
    8d3a:	47a8      	blx	r5
    8d3c:	0021      	movs	r1, r4
    8d3e:	481e      	ldr	r0, [pc, #120]	; (8db8 <close+0x88>)
    8d40:	47a8      	blx	r5
    8d42:	200d      	movs	r0, #13
    8d44:	4b1d      	ldr	r3, [pc, #116]	; (8dbc <close+0x8c>)
    8d46:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    8d48:	2c00      	cmp	r4, #0
    8d4a:	db2a      	blt.n	8da2 <close+0x72>
    8d4c:	0122      	lsls	r2, r4, #4
    8d4e:	4b1c      	ldr	r3, [pc, #112]	; (8dc0 <close+0x90>)
    8d50:	189b      	adds	r3, r3, r2
    8d52:	7a9b      	ldrb	r3, [r3, #10]
    8d54:	2b01      	cmp	r3, #1
    8d56:	d127      	bne.n	8da8 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    8d58:	a905      	add	r1, sp, #20
    8d5a:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    8d5c:	4b18      	ldr	r3, [pc, #96]	; (8dc0 <close+0x90>)
    8d5e:	189b      	adds	r3, r3, r2
    8d60:	88da      	ldrh	r2, [r3, #6]
    8d62:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    8d64:	2200      	movs	r2, #0
    8d66:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    8d68:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8d6a:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    8d6c:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8d6e:	07db      	lsls	r3, r3, #31
    8d70:	d500      	bpl.n	8d74 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    8d72:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    8d74:	2300      	movs	r3, #0
    8d76:	9302      	str	r3, [sp, #8]
    8d78:	9301      	str	r3, [sp, #4]
    8d7a:	9300      	str	r3, [sp, #0]
    8d7c:	3304      	adds	r3, #4
    8d7e:	aa05      	add	r2, sp, #20
    8d80:	2002      	movs	r0, #2
    8d82:	4d10      	ldr	r5, [pc, #64]	; (8dc4 <close+0x94>)
    8d84:	47a8      	blx	r5
    8d86:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8d88:	d001      	beq.n	8d8e <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    8d8a:	2509      	movs	r5, #9
    8d8c:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    8d8e:	0124      	lsls	r4, r4, #4
    8d90:	480b      	ldr	r0, [pc, #44]	; (8dc0 <close+0x90>)
    8d92:	1820      	adds	r0, r4, r0
    8d94:	2210      	movs	r2, #16
    8d96:	2100      	movs	r1, #0
    8d98:	4b0b      	ldr	r3, [pc, #44]	; (8dc8 <close+0x98>)
    8d9a:	4798      	blx	r3
	}
	return s8Ret;
}
    8d9c:	0028      	movs	r0, r5
    8d9e:	b007      	add	sp, #28
    8da0:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8da2:	2506      	movs	r5, #6
    8da4:	426d      	negs	r5, r5
    8da6:	e7f9      	b.n	8d9c <close+0x6c>
    8da8:	2506      	movs	r5, #6
    8daa:	426d      	negs	r5, r5
    8dac:	e7f6      	b.n	8d9c <close+0x6c>
    8dae:	46c0      	nop			; (mov r8, r8)
    8db0:	00011b54 	.word	0x00011b54
    8db4:	0000bb3d 	.word	0x0000bb3d
    8db8:	000125cc 	.word	0x000125cc
    8dbc:	0000bb71 	.word	0x0000bb71
    8dc0:	20000930 	.word	0x20000930
    8dc4:	000062b5 	.word	0x000062b5
    8dc8:	0000617d 	.word	0x0000617d

00008dcc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    8dcc:	b570      	push	{r4, r5, r6, lr}
    8dce:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    8dd0:	2300      	movs	r3, #0
    8dd2:	9301      	str	r3, [sp, #4]
    8dd4:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    8dd6:	2100      	movs	r1, #0
    8dd8:	7802      	ldrb	r2, [r0, #0]
    8dda:	1c44      	adds	r4, r0, #1
    8ddc:	3005      	adds	r0, #5
    8dde:	000b      	movs	r3, r1
    8de0:	e009      	b.n	8df6 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    8de2:	009d      	lsls	r5, r3, #2
    8de4:	195b      	adds	r3, r3, r5
    8de6:	005b      	lsls	r3, r3, #1
    8de8:	189b      	adds	r3, r3, r2
    8dea:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    8dec:	0022      	movs	r2, r4
    8dee:	3401      	adds	r4, #1
			if(j > 4)
    8df0:	42a0      	cmp	r0, r4
    8df2:	d00a      	beq.n	8e0a <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    8df4:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    8df6:	2a2e      	cmp	r2, #46	; 0x2e
    8df8:	d00a      	beq.n	8e10 <nmi_inet_addr+0x44>
    8dfa:	2a00      	cmp	r2, #0
    8dfc:	d00c      	beq.n	8e18 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    8dfe:	3a30      	subs	r2, #48	; 0x30
    8e00:	b2d2      	uxtb	r2, r2
    8e02:	2a09      	cmp	r2, #9
    8e04:	d9ed      	bls.n	8de2 <nmi_inet_addr+0x16>
				return 0;
    8e06:	2000      	movs	r0, #0
    8e08:	e000      	b.n	8e0c <nmi_inet_addr+0x40>
				return 0;
    8e0a:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    8e0c:	b002      	add	sp, #8
    8e0e:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    8e10:	466a      	mov	r2, sp
    8e12:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    8e14:	0020      	movs	r0, r4
    8e16:	e002      	b.n	8e1e <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    8e18:	466a      	mov	r2, sp
    8e1a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    8e1c:	0020      	movs	r0, r4
    8e1e:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    8e20:	2e04      	cmp	r6, #4
    8e22:	d1d9      	bne.n	8dd8 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    8e24:	2204      	movs	r2, #4
    8e26:	4669      	mov	r1, sp
    8e28:	a801      	add	r0, sp, #4
    8e2a:	4b02      	ldr	r3, [pc, #8]	; (8e34 <nmi_inet_addr+0x68>)
    8e2c:	4798      	blx	r3
	return u32IP;
    8e2e:	9801      	ldr	r0, [sp, #4]
    8e30:	e7ec      	b.n	8e0c <nmi_inet_addr+0x40>
    8e32:	46c0      	nop			; (mov r8, r8)
    8e34:	00006169 	.word	0x00006169

00008e38 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    8e38:	b510      	push	{r4, lr}
    8e3a:	b084      	sub	sp, #16
    8e3c:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    8e3e:	4b0b      	ldr	r3, [pc, #44]	; (8e6c <gethostbyname+0x34>)
    8e40:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    8e42:	b2c3      	uxtb	r3, r0
    8e44:	2b40      	cmp	r3, #64	; 0x40
    8e46:	d80d      	bhi.n	8e64 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    8e48:	23ff      	movs	r3, #255	; 0xff
    8e4a:	4003      	ands	r3, r0
    8e4c:	3301      	adds	r3, #1
    8e4e:	2200      	movs	r2, #0
    8e50:	9202      	str	r2, [sp, #8]
    8e52:	9201      	str	r2, [sp, #4]
    8e54:	9200      	str	r2, [sp, #0]
    8e56:	0022      	movs	r2, r4
    8e58:	214a      	movs	r1, #74	; 0x4a
    8e5a:	2002      	movs	r0, #2
    8e5c:	4c04      	ldr	r4, [pc, #16]	; (8e70 <gethostbyname+0x38>)
    8e5e:	47a0      	blx	r4
	}
	return s8Err;
}
    8e60:	b004      	add	sp, #16
    8e62:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    8e64:	2006      	movs	r0, #6
    8e66:	4240      	negs	r0, r0
    8e68:	e7fa      	b.n	8e60 <gethostbyname+0x28>
    8e6a:	46c0      	nop			; (mov r8, r8)
    8e6c:	0000618d 	.word	0x0000618d
    8e70:	000062b5 	.word	0x000062b5

00008e74 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    8e74:	b570      	push	{r4, r5, r6, lr}
    8e76:	b082      	sub	sp, #8
    8e78:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    8e7a:	4b2a      	ldr	r3, [pc, #168]	; (8f24 <spi_flash_enable+0xb0>)
    8e7c:	4798      	blx	r3
    8e7e:	0500      	lsls	r0, r0, #20
    8e80:	0d00      	lsrs	r0, r0, #20
    8e82:	4b29      	ldr	r3, [pc, #164]	; (8f28 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    8e84:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    8e86:	4298      	cmp	r0, r3
    8e88:	d802      	bhi.n	8e90 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    8e8a:	0028      	movs	r0, r5
    8e8c:	b002      	add	sp, #8
    8e8e:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    8e90:	a901      	add	r1, sp, #4
    8e92:	4826      	ldr	r0, [pc, #152]	; (8f2c <spi_flash_enable+0xb8>)
    8e94:	4b26      	ldr	r3, [pc, #152]	; (8f30 <spi_flash_enable+0xbc>)
    8e96:	4798      	blx	r3
    8e98:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    8e9a:	d1f6      	bne.n	8e8a <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    8e9c:	4b25      	ldr	r3, [pc, #148]	; (8f34 <spi_flash_enable+0xc0>)
    8e9e:	9a01      	ldr	r2, [sp, #4]
    8ea0:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    8ea2:	4925      	ldr	r1, [pc, #148]	; (8f38 <spi_flash_enable+0xc4>)
    8ea4:	4319      	orrs	r1, r3
    8ea6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    8ea8:	4820      	ldr	r0, [pc, #128]	; (8f2c <spi_flash_enable+0xb8>)
    8eaa:	4b24      	ldr	r3, [pc, #144]	; (8f3c <spi_flash_enable+0xc8>)
    8eac:	4798      	blx	r3
		if(enable) {
    8eae:	2c00      	cmp	r4, #0
    8eb0:	d020      	beq.n	8ef4 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8eb2:	2100      	movs	r1, #0
    8eb4:	4822      	ldr	r0, [pc, #136]	; (8f40 <spi_flash_enable+0xcc>)
    8eb6:	4c21      	ldr	r4, [pc, #132]	; (8f3c <spi_flash_enable+0xc8>)
    8eb8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8eba:	21ab      	movs	r1, #171	; 0xab
    8ebc:	4821      	ldr	r0, [pc, #132]	; (8f44 <spi_flash_enable+0xd0>)
    8ebe:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8ec0:	2101      	movs	r1, #1
    8ec2:	4821      	ldr	r0, [pc, #132]	; (8f48 <spi_flash_enable+0xd4>)
    8ec4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8ec6:	2100      	movs	r1, #0
    8ec8:	4820      	ldr	r0, [pc, #128]	; (8f4c <spi_flash_enable+0xd8>)
    8eca:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    8ecc:	2181      	movs	r1, #129	; 0x81
    8ece:	4820      	ldr	r0, [pc, #128]	; (8f50 <spi_flash_enable+0xdc>)
    8ed0:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8ed2:	4e20      	ldr	r6, [pc, #128]	; (8f54 <spi_flash_enable+0xe0>)
    8ed4:	4c20      	ldr	r4, [pc, #128]	; (8f58 <spi_flash_enable+0xe4>)
    8ed6:	0030      	movs	r0, r6
    8ed8:	47a0      	blx	r4
    8eda:	2801      	cmp	r0, #1
    8edc:	d1fb      	bne.n	8ed6 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    8ede:	4b15      	ldr	r3, [pc, #84]	; (8f34 <spi_flash_enable+0xc0>)
    8ee0:	9a01      	ldr	r2, [sp, #4]
    8ee2:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    8ee4:	2180      	movs	r1, #128	; 0x80
    8ee6:	0249      	lsls	r1, r1, #9
    8ee8:	4319      	orrs	r1, r3
    8eea:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    8eec:	480f      	ldr	r0, [pc, #60]	; (8f2c <spi_flash_enable+0xb8>)
    8eee:	4b13      	ldr	r3, [pc, #76]	; (8f3c <spi_flash_enable+0xc8>)
    8ef0:	4798      	blx	r3
    8ef2:	e7ca      	b.n	8e8a <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8ef4:	2100      	movs	r1, #0
    8ef6:	4812      	ldr	r0, [pc, #72]	; (8f40 <spi_flash_enable+0xcc>)
    8ef8:	4c10      	ldr	r4, [pc, #64]	; (8f3c <spi_flash_enable+0xc8>)
    8efa:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8efc:	21b9      	movs	r1, #185	; 0xb9
    8efe:	4811      	ldr	r0, [pc, #68]	; (8f44 <spi_flash_enable+0xd0>)
    8f00:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8f02:	2101      	movs	r1, #1
    8f04:	4810      	ldr	r0, [pc, #64]	; (8f48 <spi_flash_enable+0xd4>)
    8f06:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8f08:	2100      	movs	r1, #0
    8f0a:	4810      	ldr	r0, [pc, #64]	; (8f4c <spi_flash_enable+0xd8>)
    8f0c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    8f0e:	2181      	movs	r1, #129	; 0x81
    8f10:	480f      	ldr	r0, [pc, #60]	; (8f50 <spi_flash_enable+0xdc>)
    8f12:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8f14:	4e0f      	ldr	r6, [pc, #60]	; (8f54 <spi_flash_enable+0xe0>)
    8f16:	4c10      	ldr	r4, [pc, #64]	; (8f58 <spi_flash_enable+0xe4>)
    8f18:	0030      	movs	r0, r6
    8f1a:	47a0      	blx	r4
    8f1c:	2801      	cmp	r0, #1
    8f1e:	d1fb      	bne.n	8f18 <spi_flash_enable+0xa4>
    8f20:	e7dd      	b.n	8ede <spi_flash_enable+0x6a>
    8f22:	46c0      	nop			; (mov r8, r8)
    8f24:	000071b5 	.word	0x000071b5
    8f28:	0000039f 	.word	0x0000039f
    8f2c:	00001410 	.word	0x00001410
    8f30:	00007605 	.word	0x00007605
    8f34:	f8888fff 	.word	0xf8888fff
    8f38:	01111000 	.word	0x01111000
    8f3c:	00007611 	.word	0x00007611
    8f40:	00010208 	.word	0x00010208
    8f44:	0001020c 	.word	0x0001020c
    8f48:	00010214 	.word	0x00010214
    8f4c:	0001021c 	.word	0x0001021c
    8f50:	00010204 	.word	0x00010204
    8f54:	00010218 	.word	0x00010218
    8f58:	000075f9 	.word	0x000075f9

00008f5c <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    8f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f5e:	46c6      	mov	lr, r8
    8f60:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    8f62:	2303      	movs	r3, #3
    8f64:	0007      	movs	r7, r0
    8f66:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    8f68:	6813      	ldr	r3, [r2, #0]
    8f6a:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    8f6c:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    8f6e:	2903      	cmp	r1, #3
    8f70:	d902      	bls.n	8f78 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    8f72:	4244      	negs	r4, r0
    8f74:	2003      	movs	r0, #3
    8f76:	4004      	ands	r4, r0
	}

	if (temp_length) {
    8f78:	2c00      	cmp	r4, #0
    8f7a:	d016      	beq.n	8faa <crc32_recalculate+0x4e>
		length -= temp_length;
    8f7c:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    8f7e:	1d3e      	adds	r6, r7, #4
    8f80:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    8f82:	00e0      	lsls	r0, r4, #3
    8f84:	4240      	negs	r0, r0
    8f86:	3020      	adds	r0, #32
    8f88:	40c5      	lsrs	r5, r0
	crc ^= data;
    8f8a:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    8f8c:	00e0      	lsls	r0, r4, #3
    8f8e:	d019      	beq.n	8fc4 <crc32_recalculate+0x68>
		if (crc & 1) {
    8f90:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    8f92:	4d27      	ldr	r5, [pc, #156]	; (9030 <crc32_recalculate+0xd4>)
    8f94:	e003      	b.n	8f9e <crc32_recalculate+0x42>
			crc >>= 1;
    8f96:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    8f98:	3801      	subs	r0, #1
    8f9a:	2800      	cmp	r0, #0
    8f9c:	d004      	beq.n	8fa8 <crc32_recalculate+0x4c>
		if (crc & 1) {
    8f9e:	421c      	tst	r4, r3
    8fa0:	d0f9      	beq.n	8f96 <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    8fa2:	085b      	lsrs	r3, r3, #1
    8fa4:	406b      	eors	r3, r5
    8fa6:	e7f7      	b.n	8f98 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    8fa8:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    8faa:	2003      	movs	r0, #3
    8fac:	000c      	movs	r4, r1
    8fae:	4384      	bics	r4, r0

	if (temp_length) {
    8fb0:	d01e      	beq.n	8ff0 <crc32_recalculate+0x94>
		length -= temp_length;
    8fb2:	1b08      	subs	r0, r1, r4
    8fb4:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    8fb6:	0889      	lsrs	r1, r1, #2
    8fb8:	4688      	mov	r8, r1
    8fba:	003e      	movs	r6, r7
    8fbc:	000d      	movs	r5, r1
		if (crc & 1) {
    8fbe:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    8fc0:	4c1b      	ldr	r4, [pc, #108]	; (9030 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    8fc2:	e00b      	b.n	8fdc <crc32_recalculate+0x80>
		word = *(word_ptr++);
    8fc4:	0037      	movs	r7, r6
    8fc6:	e7f0      	b.n	8faa <crc32_recalculate+0x4e>
			crc >>= 1;
    8fc8:	085b      	lsrs	r3, r3, #1
    8fca:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    8fcc:	2900      	cmp	r1, #0
    8fce:	d004      	beq.n	8fda <crc32_recalculate+0x7e>
		if (crc & 1) {
    8fd0:	4218      	tst	r0, r3
    8fd2:	d0f9      	beq.n	8fc8 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    8fd4:	085b      	lsrs	r3, r3, #1
    8fd6:	4063      	eors	r3, r4
    8fd8:	e7f7      	b.n	8fca <crc32_recalculate+0x6e>
    8fda:	3604      	adds	r6, #4
		while (temp_length--) {
    8fdc:	3d01      	subs	r5, #1
    8fde:	d303      	bcc.n	8fe8 <crc32_recalculate+0x8c>
	crc ^= data;
    8fe0:	6831      	ldr	r1, [r6, #0]
    8fe2:	404b      	eors	r3, r1
    8fe4:	2120      	movs	r1, #32
    8fe6:	e7f3      	b.n	8fd0 <crc32_recalculate+0x74>
    8fe8:	4641      	mov	r1, r8
    8fea:	0089      	lsls	r1, r1, #2
    8fec:	187f      	adds	r7, r7, r1
		length -= temp_length;
    8fee:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    8ff0:	2900      	cmp	r1, #0
    8ff2:	d017      	beq.n	9024 <crc32_recalculate+0xc8>
		word = *word_ptr;
    8ff4:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    8ff6:	00c8      	lsls	r0, r1, #3
    8ff8:	4240      	negs	r0, r0
    8ffa:	3020      	adds	r0, #32
    8ffc:	2501      	movs	r5, #1
    8ffe:	426d      	negs	r5, r5
    9000:	40c5      	lsrs	r5, r0
    9002:	0028      	movs	r0, r5
    9004:	4020      	ands	r0, r4
	crc ^= data;
    9006:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    9008:	00c9      	lsls	r1, r1, #3
    900a:	d00b      	beq.n	9024 <crc32_recalculate+0xc8>
		if (crc & 1) {
    900c:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    900e:	4c08      	ldr	r4, [pc, #32]	; (9030 <crc32_recalculate+0xd4>)
    9010:	e003      	b.n	901a <crc32_recalculate+0xbe>
			crc >>= 1;
    9012:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    9014:	3901      	subs	r1, #1
    9016:	2900      	cmp	r1, #0
    9018:	d004      	beq.n	9024 <crc32_recalculate+0xc8>
		if (crc & 1) {
    901a:	4218      	tst	r0, r3
    901c:	d0f9      	beq.n	9012 <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    901e:	085b      	lsrs	r3, r3, #1
    9020:	4063      	eors	r3, r4
    9022:	e7f7      	b.n	9014 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    9024:	43db      	mvns	r3, r3
    9026:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    9028:	2000      	movs	r0, #0
    902a:	bc04      	pop	{r2}
    902c:	4690      	mov	r8, r2
    902e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9030:	edb88320 	.word	0xedb88320

00009034 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    9034:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
    9036:	4a1e      	ldr	r2, [pc, #120]	; (90b0 <nvm_set_config+0x7c>)
    9038:	69d3      	ldr	r3, [r2, #28]
    903a:	2104      	movs	r1, #4
    903c:	430b      	orrs	r3, r1
    903e:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9040:	4b1c      	ldr	r3, [pc, #112]	; (90b4 <nvm_set_config+0x80>)
    9042:	2220      	movs	r2, #32
    9044:	32ff      	adds	r2, #255	; 0xff
    9046:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    9048:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    904a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    904c:	07d2      	lsls	r2, r2, #31
    904e:	d401      	bmi.n	9054 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    9050:	0018      	movs	r0, r3
    9052:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    9054:	7803      	ldrb	r3, [r0, #0]
    9056:	021b      	lsls	r3, r3, #8
    9058:	22c0      	movs	r2, #192	; 0xc0
    905a:	0092      	lsls	r2, r2, #2
    905c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    905e:	7841      	ldrb	r1, [r0, #1]
    9060:	01c9      	lsls	r1, r1, #7
    9062:	22ff      	movs	r2, #255	; 0xff
    9064:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    9066:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    9068:	7881      	ldrb	r1, [r0, #2]
    906a:	0049      	lsls	r1, r1, #1
    906c:	221e      	movs	r2, #30
    906e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    9070:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    9072:	78c2      	ldrb	r2, [r0, #3]
    9074:	0492      	lsls	r2, r2, #18
    9076:	2180      	movs	r1, #128	; 0x80
    9078:	02c9      	lsls	r1, r1, #11
    907a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    907c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    907e:	7902      	ldrb	r2, [r0, #4]
    9080:	0412      	lsls	r2, r2, #16
    9082:	21c0      	movs	r1, #192	; 0xc0
    9084:	0289      	lsls	r1, r1, #10
    9086:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    9088:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    908a:	4a0a      	ldr	r2, [pc, #40]	; (90b4 <nvm_set_config+0x80>)
    908c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    908e:	6893      	ldr	r3, [r2, #8]
    9090:	035b      	lsls	r3, r3, #13
    9092:	0f5b      	lsrs	r3, r3, #29
    9094:	4908      	ldr	r1, [pc, #32]	; (90b8 <nvm_set_config+0x84>)
    9096:	2408      	movs	r4, #8
    9098:	409c      	lsls	r4, r3
    909a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    909c:	6893      	ldr	r3, [r2, #8]
    909e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    90a0:	7843      	ldrb	r3, [r0, #1]
    90a2:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    90a4:	8b13      	ldrh	r3, [r2, #24]
    90a6:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    90a8:	0fdb      	lsrs	r3, r3, #31
    90aa:	011b      	lsls	r3, r3, #4
    90ac:	e7d0      	b.n	9050 <nvm_set_config+0x1c>
    90ae:	46c0      	nop			; (mov r8, r8)
    90b0:	40000400 	.word	0x40000400
    90b4:	41004000 	.word	0x41004000
    90b8:	20000270 	.word	0x20000270

000090bc <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    90bc:	b530      	push	{r4, r5, lr}
    90be:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    90c0:	4a22      	ldr	r2, [pc, #136]	; (914c <nvm_execute_command+0x90>)
    90c2:	8810      	ldrh	r0, [r2, #0]
    90c4:	8853      	ldrh	r3, [r2, #2]
    90c6:	4343      	muls	r3, r0
    90c8:	428b      	cmp	r3, r1
    90ca:	d206      	bcs.n	90da <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    90cc:	2280      	movs	r2, #128	; 0x80
    90ce:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    90d0:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    90d2:	4b1f      	ldr	r3, [pc, #124]	; (9150 <nvm_execute_command+0x94>)
    90d4:	18cb      	adds	r3, r1, r3
    90d6:	4293      	cmp	r3, r2
    90d8:	d80e      	bhi.n	90f8 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    90da:	4b1e      	ldr	r3, [pc, #120]	; (9154 <nvm_execute_command+0x98>)
    90dc:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    90de:	2280      	movs	r2, #128	; 0x80
    90e0:	02d2      	lsls	r2, r2, #11
    90e2:	432a      	orrs	r2, r5
    90e4:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    90e6:	2220      	movs	r2, #32
    90e8:	32ff      	adds	r2, #255	; 0xff
    90ea:	831a      	strh	r2, [r3, #24]
    90ec:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    90ee:	07db      	lsls	r3, r3, #31
    90f0:	d403      	bmi.n	90fa <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    90f2:	4b18      	ldr	r3, [pc, #96]	; (9154 <nvm_execute_command+0x98>)
    90f4:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    90f6:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    90f8:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    90fa:	2c45      	cmp	r4, #69	; 0x45
    90fc:	d822      	bhi.n	9144 <nvm_execute_command+0x88>
    90fe:	00a3      	lsls	r3, r4, #2
    9100:	4a15      	ldr	r2, [pc, #84]	; (9158 <nvm_execute_command+0x9c>)
    9102:	58d3      	ldr	r3, [r2, r3]
    9104:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    9106:	4b13      	ldr	r3, [pc, #76]	; (9154 <nvm_execute_command+0x98>)
    9108:	8b1b      	ldrh	r3, [r3, #24]
    910a:	05db      	lsls	r3, r3, #23
    910c:	d503      	bpl.n	9116 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    910e:	4b11      	ldr	r3, [pc, #68]	; (9154 <nvm_execute_command+0x98>)
    9110:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    9112:	2010      	movs	r0, #16
    9114:	e7f0      	b.n	90f8 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    9116:	0889      	lsrs	r1, r1, #2
    9118:	0049      	lsls	r1, r1, #1
    911a:	4b0e      	ldr	r3, [pc, #56]	; (9154 <nvm_execute_command+0x98>)
    911c:	61d9      	str	r1, [r3, #28]
			break;
    911e:	e003      	b.n	9128 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    9120:	0889      	lsrs	r1, r1, #2
    9122:	0049      	lsls	r1, r1, #1
    9124:	4b0b      	ldr	r3, [pc, #44]	; (9154 <nvm_execute_command+0x98>)
    9126:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    9128:	20a5      	movs	r0, #165	; 0xa5
    912a:	0200      	lsls	r0, r0, #8
    912c:	4304      	orrs	r4, r0
    912e:	4b09      	ldr	r3, [pc, #36]	; (9154 <nvm_execute_command+0x98>)
    9130:	801c      	strh	r4, [r3, #0]
    9132:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    9134:	2201      	movs	r2, #1
    9136:	7d0b      	ldrb	r3, [r1, #20]
    9138:	4213      	tst	r3, r2
    913a:	d0fc      	beq.n	9136 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    913c:	4b05      	ldr	r3, [pc, #20]	; (9154 <nvm_execute_command+0x98>)
    913e:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    9140:	2000      	movs	r0, #0
    9142:	e7d9      	b.n	90f8 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    9144:	4b03      	ldr	r3, [pc, #12]	; (9154 <nvm_execute_command+0x98>)
    9146:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    9148:	2017      	movs	r0, #23
    914a:	e7d5      	b.n	90f8 <nvm_execute_command+0x3c>
    914c:	20000270 	.word	0x20000270
    9150:	ff7fc000 	.word	0xff7fc000
    9154:	41004000 	.word	0x41004000
    9158:	00012600 	.word	0x00012600

0000915c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    915e:	4b25      	ldr	r3, [pc, #148]	; (91f4 <nvm_write_buffer+0x98>)
    9160:	881d      	ldrh	r5, [r3, #0]
    9162:	885b      	ldrh	r3, [r3, #2]
    9164:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9166:	2418      	movs	r4, #24
	if (destination_address >
    9168:	4283      	cmp	r3, r0
    916a:	d201      	bcs.n	9170 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    916c:	0020      	movs	r0, r4
    916e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    9170:	1e6b      	subs	r3, r5, #1
    9172:	4218      	tst	r0, r3
    9174:	d1fa      	bne.n	916c <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    9176:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    9178:	4295      	cmp	r5, r2
    917a:	d3f7      	bcc.n	916c <nvm_write_buffer+0x10>
    917c:	4b1e      	ldr	r3, [pc, #120]	; (91f8 <nvm_write_buffer+0x9c>)
    917e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    9180:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    9182:	07db      	lsls	r3, r3, #31
    9184:	d5f2      	bpl.n	916c <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    9186:	4c1d      	ldr	r4, [pc, #116]	; (91fc <nvm_write_buffer+0xa0>)
    9188:	4b1b      	ldr	r3, [pc, #108]	; (91f8 <nvm_write_buffer+0x9c>)
    918a:	801c      	strh	r4, [r3, #0]
    918c:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    918e:	2401      	movs	r4, #1
    9190:	7d2b      	ldrb	r3, [r5, #20]
    9192:	4223      	tst	r3, r4
    9194:	d0fc      	beq.n	9190 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9196:	2420      	movs	r4, #32
    9198:	34ff      	adds	r4, #255	; 0xff
    919a:	4b17      	ldr	r3, [pc, #92]	; (91f8 <nvm_write_buffer+0x9c>)
    919c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    919e:	2a00      	cmp	r2, #0
    91a0:	d022      	beq.n	91e8 <nvm_write_buffer+0x8c>
    91a2:	2301      	movs	r3, #1
    91a4:	0005      	movs	r5, r0
    91a6:	439d      	bics	r5, r3
    91a8:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    91aa:	1e57      	subs	r7, r2, #1
    91ac:	e009      	b.n	91c2 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    91ae:	18ce      	adds	r6, r1, r3
    91b0:	7876      	ldrb	r6, [r6, #1]
    91b2:	0236      	lsls	r6, r6, #8
    91b4:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    91b6:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    91b8:	3302      	adds	r3, #2
    91ba:	b29b      	uxth	r3, r3
    91bc:	3502      	adds	r5, #2
    91be:	429a      	cmp	r2, r3
    91c0:	d904      	bls.n	91cc <nvm_write_buffer+0x70>
		data = buffer[i];
    91c2:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    91c4:	42bb      	cmp	r3, r7
    91c6:	dbf2      	blt.n	91ae <nvm_write_buffer+0x52>
		data = buffer[i];
    91c8:	b2a4      	uxth	r4, r4
    91ca:	e7f4      	b.n	91b6 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    91cc:	4b09      	ldr	r3, [pc, #36]	; (91f4 <nvm_write_buffer+0x98>)
    91ce:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    91d0:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    91d2:	2b00      	cmp	r3, #0
    91d4:	d1ca      	bne.n	916c <nvm_write_buffer+0x10>
    91d6:	2a3f      	cmp	r2, #63	; 0x3f
    91d8:	d8c8      	bhi.n	916c <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    91da:	2200      	movs	r2, #0
    91dc:	0001      	movs	r1, r0
    91de:	2004      	movs	r0, #4
    91e0:	4b07      	ldr	r3, [pc, #28]	; (9200 <nvm_write_buffer+0xa4>)
    91e2:	4798      	blx	r3
    91e4:	0004      	movs	r4, r0
    91e6:	e7c1      	b.n	916c <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    91e8:	4b02      	ldr	r3, [pc, #8]	; (91f4 <nvm_write_buffer+0x98>)
    91ea:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    91ec:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    91ee:	2b00      	cmp	r3, #0
    91f0:	d0f3      	beq.n	91da <nvm_write_buffer+0x7e>
    91f2:	e7bb      	b.n	916c <nvm_write_buffer+0x10>
    91f4:	20000270 	.word	0x20000270
    91f8:	41004000 	.word	0x41004000
    91fc:	ffffa544 	.word	0xffffa544
    9200:	000090bd 	.word	0x000090bd

00009204 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    9204:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9206:	4b18      	ldr	r3, [pc, #96]	; (9268 <nvm_read_buffer+0x64>)
    9208:	881d      	ldrh	r5, [r3, #0]
    920a:	885b      	ldrh	r3, [r3, #2]
    920c:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    920e:	2418      	movs	r4, #24
	if (source_address >
    9210:	4283      	cmp	r3, r0
    9212:	d201      	bcs.n	9218 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    9214:	0020      	movs	r0, r4
    9216:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    9218:	1e6b      	subs	r3, r5, #1
    921a:	4218      	tst	r0, r3
    921c:	d1fa      	bne.n	9214 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    921e:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    9220:	4295      	cmp	r5, r2
    9222:	d3f7      	bcc.n	9214 <nvm_read_buffer+0x10>
    9224:	4b11      	ldr	r3, [pc, #68]	; (926c <nvm_read_buffer+0x68>)
    9226:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    9228:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    922a:	07db      	lsls	r3, r3, #31
    922c:	d5f2      	bpl.n	9214 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    922e:	2420      	movs	r4, #32
    9230:	34ff      	adds	r4, #255	; 0xff
    9232:	4b0e      	ldr	r3, [pc, #56]	; (926c <nvm_read_buffer+0x68>)
    9234:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    9236:	2a00      	cmp	r2, #0
    9238:	d014      	beq.n	9264 <nvm_read_buffer+0x60>
    923a:	2301      	movs	r3, #1
    923c:	4398      	bics	r0, r3
    923e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    9240:	1e56      	subs	r6, r2, #1
    9242:	e004      	b.n	924e <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    9244:	3302      	adds	r3, #2
    9246:	b29b      	uxth	r3, r3
    9248:	3002      	adds	r0, #2
    924a:	429a      	cmp	r2, r3
    924c:	d908      	bls.n	9260 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    924e:	8804      	ldrh	r4, [r0, #0]
    9250:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    9252:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    9254:	42b3      	cmp	r3, r6
    9256:	daf5      	bge.n	9244 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    9258:	18cd      	adds	r5, r1, r3
    925a:	0a24      	lsrs	r4, r4, #8
    925c:	706c      	strb	r4, [r5, #1]
    925e:	e7f1      	b.n	9244 <nvm_read_buffer+0x40>
	return STATUS_OK;
    9260:	2400      	movs	r4, #0
    9262:	e7d7      	b.n	9214 <nvm_read_buffer+0x10>
    9264:	2400      	movs	r4, #0
    9266:	e7d5      	b.n	9214 <nvm_read_buffer+0x10>
    9268:	20000270 	.word	0x20000270
    926c:	41004000 	.word	0x41004000

00009270 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9270:	4b13      	ldr	r3, [pc, #76]	; (92c0 <nvm_erase_row+0x50>)
    9272:	881a      	ldrh	r2, [r3, #0]
    9274:	885b      	ldrh	r3, [r3, #2]
    9276:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9278:	2118      	movs	r1, #24
	if (row_address >
    927a:	4283      	cmp	r3, r0
    927c:	d201      	bcs.n	9282 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    927e:	0008      	movs	r0, r1
    9280:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    9282:	0092      	lsls	r2, r2, #2
    9284:	3a01      	subs	r2, #1
    9286:	4210      	tst	r0, r2
    9288:	d1f9      	bne.n	927e <nvm_erase_row+0xe>
    928a:	4b0e      	ldr	r3, [pc, #56]	; (92c4 <nvm_erase_row+0x54>)
    928c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    928e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    9290:	07db      	lsls	r3, r3, #31
    9292:	d5f4      	bpl.n	927e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9294:	4b0b      	ldr	r3, [pc, #44]	; (92c4 <nvm_erase_row+0x54>)
    9296:	2220      	movs	r2, #32
    9298:	32ff      	adds	r2, #255	; 0xff
    929a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    929c:	0880      	lsrs	r0, r0, #2
    929e:	0040      	lsls	r0, r0, #1
    92a0:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    92a2:	4a09      	ldr	r2, [pc, #36]	; (92c8 <nvm_erase_row+0x58>)
    92a4:	801a      	strh	r2, [r3, #0]
    92a6:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    92a8:	2201      	movs	r2, #1
    92aa:	7d0b      	ldrb	r3, [r1, #20]
    92ac:	4213      	tst	r3, r2
    92ae:	d0fc      	beq.n	92aa <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    92b0:	4b04      	ldr	r3, [pc, #16]	; (92c4 <nvm_erase_row+0x54>)
    92b2:	8b19      	ldrh	r1, [r3, #24]
    92b4:	201c      	movs	r0, #28
    92b6:	4001      	ands	r1, r0
	return STATUS_OK;
    92b8:	1e48      	subs	r0, r1, #1
    92ba:	4181      	sbcs	r1, r0
    92bc:	0089      	lsls	r1, r1, #2
    92be:	e7de      	b.n	927e <nvm_erase_row+0xe>
    92c0:	20000270 	.word	0x20000270
    92c4:	41004000 	.word	0x41004000
    92c8:	ffffa502 	.word	0xffffa502

000092cc <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    92cc:	4b13      	ldr	r3, [pc, #76]	; (931c <nvm_get_parameters+0x50>)
    92ce:	2220      	movs	r2, #32
    92d0:	32ff      	adds	r2, #255	; 0xff
    92d2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    92d4:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    92d6:	034a      	lsls	r2, r1, #13
    92d8:	0f52      	lsrs	r2, r2, #29
    92da:	2308      	movs	r3, #8
    92dc:	4093      	lsls	r3, r2
	parameters->page_size =
    92de:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    92e0:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    92e2:	4b0f      	ldr	r3, [pc, #60]	; (9320 <nvm_get_parameters+0x54>)
    92e4:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    92e6:	065b      	lsls	r3, r3, #25
    92e8:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    92ea:	2b07      	cmp	r3, #7
    92ec:	d010      	beq.n	9310 <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    92ee:	2206      	movs	r2, #6
    92f0:	1ad2      	subs	r2, r2, r3
    92f2:	2304      	movs	r3, #4
    92f4:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    92f6:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    92f8:	4b09      	ldr	r3, [pc, #36]	; (9320 <nvm_get_parameters+0x54>)
    92fa:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    92fc:	2207      	movs	r2, #7
    92fe:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    9300:	2b07      	cmp	r3, #7
    9302:	d008      	beq.n	9316 <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    9304:	2207      	movs	r2, #7
    9306:	1ad2      	subs	r2, r2, r3
    9308:	2304      	movs	r3, #4
    930a:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    930c:	6083      	str	r3, [r0, #8]
	}
}
    930e:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    9310:	2300      	movs	r3, #0
    9312:	6043      	str	r3, [r0, #4]
    9314:	e7f0      	b.n	92f8 <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
    9316:	2300      	movs	r3, #0
    9318:	6083      	str	r3, [r0, #8]
    931a:	e7f8      	b.n	930e <nvm_get_parameters+0x42>
    931c:	41004000 	.word	0x41004000
    9320:	00804000 	.word	0x00804000

00009324 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    9324:	b500      	push	{lr}
    9326:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9328:	ab01      	add	r3, sp, #4
    932a:	2280      	movs	r2, #128	; 0x80
    932c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    932e:	780a      	ldrb	r2, [r1, #0]
    9330:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    9332:	784a      	ldrb	r2, [r1, #1]
    9334:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    9336:	788a      	ldrb	r2, [r1, #2]
    9338:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    933a:	0019      	movs	r1, r3
    933c:	4b01      	ldr	r3, [pc, #4]	; (9344 <port_pin_set_config+0x20>)
    933e:	4798      	blx	r3
}
    9340:	b003      	add	sp, #12
    9342:	bd00      	pop	{pc}
    9344:	00009af9 	.word	0x00009af9

00009348 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    9348:	4770      	bx	lr
	...

0000934c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    934c:	4b0c      	ldr	r3, [pc, #48]	; (9380 <cpu_irq_enter_critical+0x34>)
    934e:	681b      	ldr	r3, [r3, #0]
    9350:	2b00      	cmp	r3, #0
    9352:	d106      	bne.n	9362 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9354:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    9358:	2b00      	cmp	r3, #0
    935a:	d007      	beq.n	936c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    935c:	2200      	movs	r2, #0
    935e:	4b09      	ldr	r3, [pc, #36]	; (9384 <cpu_irq_enter_critical+0x38>)
    9360:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    9362:	4a07      	ldr	r2, [pc, #28]	; (9380 <cpu_irq_enter_critical+0x34>)
    9364:	6813      	ldr	r3, [r2, #0]
    9366:	3301      	adds	r3, #1
    9368:	6013      	str	r3, [r2, #0]
}
    936a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    936c:	b672      	cpsid	i
    936e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    9372:	2200      	movs	r2, #0
    9374:	4b04      	ldr	r3, [pc, #16]	; (9388 <cpu_irq_enter_critical+0x3c>)
    9376:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    9378:	3201      	adds	r2, #1
    937a:	4b02      	ldr	r3, [pc, #8]	; (9384 <cpu_irq_enter_critical+0x38>)
    937c:	701a      	strb	r2, [r3, #0]
    937e:	e7f0      	b.n	9362 <cpu_irq_enter_critical+0x16>
    9380:	20000278 	.word	0x20000278
    9384:	2000027c 	.word	0x2000027c
    9388:	2000000a 	.word	0x2000000a

0000938c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    938c:	4b08      	ldr	r3, [pc, #32]	; (93b0 <cpu_irq_leave_critical+0x24>)
    938e:	681a      	ldr	r2, [r3, #0]
    9390:	3a01      	subs	r2, #1
    9392:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    9394:	681b      	ldr	r3, [r3, #0]
    9396:	2b00      	cmp	r3, #0
    9398:	d109      	bne.n	93ae <cpu_irq_leave_critical+0x22>
    939a:	4b06      	ldr	r3, [pc, #24]	; (93b4 <cpu_irq_leave_critical+0x28>)
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	2b00      	cmp	r3, #0
    93a0:	d005      	beq.n	93ae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    93a2:	2201      	movs	r2, #1
    93a4:	4b04      	ldr	r3, [pc, #16]	; (93b8 <cpu_irq_leave_critical+0x2c>)
    93a6:	701a      	strb	r2, [r3, #0]
    93a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    93ac:	b662      	cpsie	i
	}
}
    93ae:	4770      	bx	lr
    93b0:	20000278 	.word	0x20000278
    93b4:	2000027c 	.word	0x2000027c
    93b8:	2000000a 	.word	0x2000000a

000093bc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    93bc:	b510      	push	{r4, lr}
	switch (clock_source) {
    93be:	2808      	cmp	r0, #8
    93c0:	d803      	bhi.n	93ca <system_clock_source_get_hz+0xe>
    93c2:	0080      	lsls	r0, r0, #2
    93c4:	4b1b      	ldr	r3, [pc, #108]	; (9434 <system_clock_source_get_hz+0x78>)
    93c6:	581b      	ldr	r3, [r3, r0]
    93c8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    93ca:	2000      	movs	r0, #0
    93cc:	e030      	b.n	9430 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    93ce:	4b1a      	ldr	r3, [pc, #104]	; (9438 <system_clock_source_get_hz+0x7c>)
    93d0:	6918      	ldr	r0, [r3, #16]
    93d2:	e02d      	b.n	9430 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    93d4:	4b19      	ldr	r3, [pc, #100]	; (943c <system_clock_source_get_hz+0x80>)
    93d6:	6a1b      	ldr	r3, [r3, #32]
    93d8:	059b      	lsls	r3, r3, #22
    93da:	0f9b      	lsrs	r3, r3, #30
    93dc:	4818      	ldr	r0, [pc, #96]	; (9440 <system_clock_source_get_hz+0x84>)
    93de:	40d8      	lsrs	r0, r3
    93e0:	e026      	b.n	9430 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    93e2:	4b15      	ldr	r3, [pc, #84]	; (9438 <system_clock_source_get_hz+0x7c>)
    93e4:	6958      	ldr	r0, [r3, #20]
    93e6:	e023      	b.n	9430 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    93e8:	4b13      	ldr	r3, [pc, #76]	; (9438 <system_clock_source_get_hz+0x7c>)
    93ea:	681b      	ldr	r3, [r3, #0]
			return 0;
    93ec:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    93ee:	079b      	lsls	r3, r3, #30
    93f0:	d51e      	bpl.n	9430 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    93f2:	4912      	ldr	r1, [pc, #72]	; (943c <system_clock_source_get_hz+0x80>)
    93f4:	2210      	movs	r2, #16
    93f6:	68cb      	ldr	r3, [r1, #12]
    93f8:	421a      	tst	r2, r3
    93fa:	d0fc      	beq.n	93f6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    93fc:	4b0e      	ldr	r3, [pc, #56]	; (9438 <system_clock_source_get_hz+0x7c>)
    93fe:	681b      	ldr	r3, [r3, #0]
    9400:	075b      	lsls	r3, r3, #29
    9402:	d401      	bmi.n	9408 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    9404:	480f      	ldr	r0, [pc, #60]	; (9444 <system_clock_source_get_hz+0x88>)
    9406:	e013      	b.n	9430 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9408:	2000      	movs	r0, #0
    940a:	4b0f      	ldr	r3, [pc, #60]	; (9448 <system_clock_source_get_hz+0x8c>)
    940c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    940e:	4b0a      	ldr	r3, [pc, #40]	; (9438 <system_clock_source_get_hz+0x7c>)
    9410:	689b      	ldr	r3, [r3, #8]
    9412:	041b      	lsls	r3, r3, #16
    9414:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9416:	4358      	muls	r0, r3
    9418:	e00a      	b.n	9430 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    941a:	2350      	movs	r3, #80	; 0x50
    941c:	4a07      	ldr	r2, [pc, #28]	; (943c <system_clock_source_get_hz+0x80>)
    941e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    9420:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    9422:	075b      	lsls	r3, r3, #29
    9424:	d504      	bpl.n	9430 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    9426:	4b04      	ldr	r3, [pc, #16]	; (9438 <system_clock_source_get_hz+0x7c>)
    9428:	68d8      	ldr	r0, [r3, #12]
    942a:	e001      	b.n	9430 <system_clock_source_get_hz+0x74>
		return 32768UL;
    942c:	2080      	movs	r0, #128	; 0x80
    942e:	0200      	lsls	r0, r0, #8
	}
}
    9430:	bd10      	pop	{r4, pc}
    9432:	46c0      	nop			; (mov r8, r8)
    9434:	00012718 	.word	0x00012718
    9438:	20000280 	.word	0x20000280
    943c:	40000800 	.word	0x40000800
    9440:	007a1200 	.word	0x007a1200
    9444:	02dc6c00 	.word	0x02dc6c00
    9448:	00009a1d 	.word	0x00009a1d

0000944c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    944c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    944e:	490c      	ldr	r1, [pc, #48]	; (9480 <system_clock_source_osc8m_set_config+0x34>)
    9450:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    9452:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    9454:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    9456:	7840      	ldrb	r0, [r0, #1]
    9458:	2201      	movs	r2, #1
    945a:	4010      	ands	r0, r2
    945c:	0180      	lsls	r0, r0, #6
    945e:	2640      	movs	r6, #64	; 0x40
    9460:	43b3      	bics	r3, r6
    9462:	4303      	orrs	r3, r0
    9464:	402a      	ands	r2, r5
    9466:	01d2      	lsls	r2, r2, #7
    9468:	2080      	movs	r0, #128	; 0x80
    946a:	4383      	bics	r3, r0
    946c:	4313      	orrs	r3, r2
    946e:	2203      	movs	r2, #3
    9470:	4022      	ands	r2, r4
    9472:	0212      	lsls	r2, r2, #8
    9474:	4803      	ldr	r0, [pc, #12]	; (9484 <system_clock_source_osc8m_set_config+0x38>)
    9476:	4003      	ands	r3, r0
    9478:	4313      	orrs	r3, r2
    947a:	620b      	str	r3, [r1, #32]
}
    947c:	bd70      	pop	{r4, r5, r6, pc}
    947e:	46c0      	nop			; (mov r8, r8)
    9480:	40000800 	.word	0x40000800
    9484:	fffffcff 	.word	0xfffffcff

00009488 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    9488:	b5f0      	push	{r4, r5, r6, r7, lr}
    948a:	46de      	mov	lr, fp
    948c:	4657      	mov	r7, sl
    948e:	464e      	mov	r6, r9
    9490:	4645      	mov	r5, r8
    9492:	b5e0      	push	{r5, r6, r7, lr}
    9494:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    9496:	4b26      	ldr	r3, [pc, #152]	; (9530 <system_clock_source_xosc32k_set_config+0xa8>)
    9498:	469b      	mov	fp, r3
    949a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    949c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    949e:	7800      	ldrb	r0, [r0, #0]
    94a0:	4242      	negs	r2, r0
    94a2:	4142      	adcs	r2, r0
    94a4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    94a6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    94a8:	78ca      	ldrb	r2, [r1, #3]
    94aa:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    94ac:	790a      	ldrb	r2, [r1, #4]
    94ae:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    94b0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    94b2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    94b4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    94b6:	688a      	ldr	r2, [r1, #8]
    94b8:	491e      	ldr	r1, [pc, #120]	; (9534 <system_clock_source_xosc32k_set_config+0xac>)
    94ba:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    94bc:	2101      	movs	r1, #1
    94be:	464a      	mov	r2, r9
    94c0:	0092      	lsls	r2, r2, #2
    94c2:	4691      	mov	r9, r2
    94c4:	2204      	movs	r2, #4
    94c6:	4393      	bics	r3, r2
    94c8:	464a      	mov	r2, r9
    94ca:	4313      	orrs	r3, r2
    94cc:	4642      	mov	r2, r8
    94ce:	400a      	ands	r2, r1
    94d0:	00d2      	lsls	r2, r2, #3
    94d2:	4690      	mov	r8, r2
    94d4:	2208      	movs	r2, #8
    94d6:	4393      	bics	r3, r2
    94d8:	4642      	mov	r2, r8
    94da:	4313      	orrs	r3, r2
    94dc:	4662      	mov	r2, ip
    94de:	400a      	ands	r2, r1
    94e0:	0112      	lsls	r2, r2, #4
    94e2:	4694      	mov	ip, r2
    94e4:	2210      	movs	r2, #16
    94e6:	4393      	bics	r3, r2
    94e8:	4662      	mov	r2, ip
    94ea:	4313      	orrs	r3, r2
    94ec:	4008      	ands	r0, r1
    94ee:	0140      	lsls	r0, r0, #5
    94f0:	2220      	movs	r2, #32
    94f2:	4393      	bics	r3, r2
    94f4:	4303      	orrs	r3, r0
    94f6:	400f      	ands	r7, r1
    94f8:	01bf      	lsls	r7, r7, #6
    94fa:	2040      	movs	r0, #64	; 0x40
    94fc:	4383      	bics	r3, r0
    94fe:	433b      	orrs	r3, r7
    9500:	400e      	ands	r6, r1
    9502:	01f6      	lsls	r6, r6, #7
    9504:	3040      	adds	r0, #64	; 0x40
    9506:	4383      	bics	r3, r0
    9508:	4333      	orrs	r3, r6
    950a:	3879      	subs	r0, #121	; 0x79
    950c:	4005      	ands	r5, r0
    950e:	022d      	lsls	r5, r5, #8
    9510:	4809      	ldr	r0, [pc, #36]	; (9538 <system_clock_source_xosc32k_set_config+0xb0>)
    9512:	4003      	ands	r3, r0
    9514:	432b      	orrs	r3, r5
    9516:	4021      	ands	r1, r4
    9518:	0309      	lsls	r1, r1, #12
    951a:	4808      	ldr	r0, [pc, #32]	; (953c <system_clock_source_xosc32k_set_config+0xb4>)
    951c:	4003      	ands	r3, r0
    951e:	430b      	orrs	r3, r1
    9520:	465a      	mov	r2, fp
    9522:	8293      	strh	r3, [r2, #20]
}
    9524:	bc3c      	pop	{r2, r3, r4, r5}
    9526:	4690      	mov	r8, r2
    9528:	4699      	mov	r9, r3
    952a:	46a2      	mov	sl, r4
    952c:	46ab      	mov	fp, r5
    952e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9530:	40000800 	.word	0x40000800
    9534:	20000280 	.word	0x20000280
    9538:	fffff8ff 	.word	0xfffff8ff
    953c:	ffffefff 	.word	0xffffefff

00009540 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    9540:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9542:	7a03      	ldrb	r3, [r0, #8]
    9544:	069b      	lsls	r3, r3, #26
    9546:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    9548:	8942      	ldrh	r2, [r0, #10]
    954a:	0592      	lsls	r2, r2, #22
    954c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    954e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    9550:	4918      	ldr	r1, [pc, #96]	; (95b4 <system_clock_source_dfll_set_config+0x74>)
    9552:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    9554:	7983      	ldrb	r3, [r0, #6]
    9556:	79c2      	ldrb	r2, [r0, #7]
    9558:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    955a:	8842      	ldrh	r2, [r0, #2]
    955c:	8884      	ldrh	r4, [r0, #4]
    955e:	4322      	orrs	r2, r4
    9560:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    9562:	7842      	ldrb	r2, [r0, #1]
    9564:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    9566:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    9568:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    956a:	7803      	ldrb	r3, [r0, #0]
    956c:	2b04      	cmp	r3, #4
    956e:	d011      	beq.n	9594 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    9570:	2b20      	cmp	r3, #32
    9572:	d10e      	bne.n	9592 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9574:	7b03      	ldrb	r3, [r0, #12]
    9576:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9578:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    957a:	4313      	orrs	r3, r2
    957c:	89c2      	ldrh	r2, [r0, #14]
    957e:	0412      	lsls	r2, r2, #16
    9580:	490d      	ldr	r1, [pc, #52]	; (95b8 <system_clock_source_dfll_set_config+0x78>)
    9582:	400a      	ands	r2, r1
    9584:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    9586:	4a0b      	ldr	r2, [pc, #44]	; (95b4 <system_clock_source_dfll_set_config+0x74>)
    9588:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    958a:	6811      	ldr	r1, [r2, #0]
    958c:	4b0b      	ldr	r3, [pc, #44]	; (95bc <system_clock_source_dfll_set_config+0x7c>)
    958e:	430b      	orrs	r3, r1
    9590:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    9592:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9594:	7b03      	ldrb	r3, [r0, #12]
    9596:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9598:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    959a:	4313      	orrs	r3, r2
    959c:	89c2      	ldrh	r2, [r0, #14]
    959e:	0412      	lsls	r2, r2, #16
    95a0:	4905      	ldr	r1, [pc, #20]	; (95b8 <system_clock_source_dfll_set_config+0x78>)
    95a2:	400a      	ands	r2, r1
    95a4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    95a6:	4a03      	ldr	r2, [pc, #12]	; (95b4 <system_clock_source_dfll_set_config+0x74>)
    95a8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    95aa:	6813      	ldr	r3, [r2, #0]
    95ac:	2104      	movs	r1, #4
    95ae:	430b      	orrs	r3, r1
    95b0:	6013      	str	r3, [r2, #0]
    95b2:	e7ee      	b.n	9592 <system_clock_source_dfll_set_config+0x52>
    95b4:	20000280 	.word	0x20000280
    95b8:	03ff0000 	.word	0x03ff0000
    95bc:	00000424 	.word	0x00000424

000095c0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    95c0:	2808      	cmp	r0, #8
    95c2:	d803      	bhi.n	95cc <system_clock_source_enable+0xc>
    95c4:	0080      	lsls	r0, r0, #2
    95c6:	4b25      	ldr	r3, [pc, #148]	; (965c <system_clock_source_enable+0x9c>)
    95c8:	581b      	ldr	r3, [r3, r0]
    95ca:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    95cc:	2017      	movs	r0, #23
    95ce:	e044      	b.n	965a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    95d0:	4a23      	ldr	r2, [pc, #140]	; (9660 <system_clock_source_enable+0xa0>)
    95d2:	6a13      	ldr	r3, [r2, #32]
    95d4:	2102      	movs	r1, #2
    95d6:	430b      	orrs	r3, r1
    95d8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    95da:	2000      	movs	r0, #0
    95dc:	e03d      	b.n	965a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    95de:	4a20      	ldr	r2, [pc, #128]	; (9660 <system_clock_source_enable+0xa0>)
    95e0:	6993      	ldr	r3, [r2, #24]
    95e2:	2102      	movs	r1, #2
    95e4:	430b      	orrs	r3, r1
    95e6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    95e8:	2000      	movs	r0, #0
		break;
    95ea:	e036      	b.n	965a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    95ec:	4a1c      	ldr	r2, [pc, #112]	; (9660 <system_clock_source_enable+0xa0>)
    95ee:	8a13      	ldrh	r3, [r2, #16]
    95f0:	2102      	movs	r1, #2
    95f2:	430b      	orrs	r3, r1
    95f4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    95f6:	2000      	movs	r0, #0
		break;
    95f8:	e02f      	b.n	965a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    95fa:	4a19      	ldr	r2, [pc, #100]	; (9660 <system_clock_source_enable+0xa0>)
    95fc:	8a93      	ldrh	r3, [r2, #20]
    95fe:	2102      	movs	r1, #2
    9600:	430b      	orrs	r3, r1
    9602:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    9604:	2000      	movs	r0, #0
		break;
    9606:	e028      	b.n	965a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    9608:	4916      	ldr	r1, [pc, #88]	; (9664 <system_clock_source_enable+0xa4>)
    960a:	680b      	ldr	r3, [r1, #0]
    960c:	2202      	movs	r2, #2
    960e:	4313      	orrs	r3, r2
    9610:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    9612:	4b13      	ldr	r3, [pc, #76]	; (9660 <system_clock_source_enable+0xa0>)
    9614:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    9616:	0019      	movs	r1, r3
    9618:	320e      	adds	r2, #14
    961a:	68cb      	ldr	r3, [r1, #12]
    961c:	421a      	tst	r2, r3
    961e:	d0fc      	beq.n	961a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    9620:	4a10      	ldr	r2, [pc, #64]	; (9664 <system_clock_source_enable+0xa4>)
    9622:	6891      	ldr	r1, [r2, #8]
    9624:	4b0e      	ldr	r3, [pc, #56]	; (9660 <system_clock_source_enable+0xa0>)
    9626:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    9628:	6852      	ldr	r2, [r2, #4]
    962a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    962c:	2200      	movs	r2, #0
    962e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    9630:	0019      	movs	r1, r3
    9632:	3210      	adds	r2, #16
    9634:	68cb      	ldr	r3, [r1, #12]
    9636:	421a      	tst	r2, r3
    9638:	d0fc      	beq.n	9634 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    963a:	4b0a      	ldr	r3, [pc, #40]	; (9664 <system_clock_source_enable+0xa4>)
    963c:	681b      	ldr	r3, [r3, #0]
    963e:	b29b      	uxth	r3, r3
    9640:	4a07      	ldr	r2, [pc, #28]	; (9660 <system_clock_source_enable+0xa0>)
    9642:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    9644:	2000      	movs	r0, #0
    9646:	e008      	b.n	965a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    9648:	4905      	ldr	r1, [pc, #20]	; (9660 <system_clock_source_enable+0xa0>)
    964a:	2244      	movs	r2, #68	; 0x44
    964c:	5c8b      	ldrb	r3, [r1, r2]
    964e:	2002      	movs	r0, #2
    9650:	4303      	orrs	r3, r0
    9652:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    9654:	2000      	movs	r0, #0
		break;
    9656:	e000      	b.n	965a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    9658:	2000      	movs	r0, #0
}
    965a:	4770      	bx	lr
    965c:	0001273c 	.word	0x0001273c
    9660:	40000800 	.word	0x40000800
    9664:	20000280 	.word	0x20000280

00009668 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    9668:	b5f0      	push	{r4, r5, r6, r7, lr}
    966a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    966c:	22c2      	movs	r2, #194	; 0xc2
    966e:	00d2      	lsls	r2, r2, #3
    9670:	4b47      	ldr	r3, [pc, #284]	; (9790 <system_clock_init+0x128>)
    9672:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    9674:	4a47      	ldr	r2, [pc, #284]	; (9794 <system_clock_init+0x12c>)
    9676:	6853      	ldr	r3, [r2, #4]
    9678:	211e      	movs	r1, #30
    967a:	438b      	bics	r3, r1
    967c:	391a      	subs	r1, #26
    967e:	430b      	orrs	r3, r1
    9680:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    9682:	2202      	movs	r2, #2
    9684:	ab01      	add	r3, sp, #4
    9686:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9688:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    968a:	4d43      	ldr	r5, [pc, #268]	; (9798 <system_clock_init+0x130>)
    968c:	b2e0      	uxtb	r0, r4
    968e:	a901      	add	r1, sp, #4
    9690:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9692:	3401      	adds	r4, #1
    9694:	2c25      	cmp	r4, #37	; 0x25
    9696:	d1f9      	bne.n	968c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    9698:	a80a      	add	r0, sp, #40	; 0x28
    969a:	2300      	movs	r3, #0
    969c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    969e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    96a0:	2280      	movs	r2, #128	; 0x80
    96a2:	0212      	lsls	r2, r2, #8
    96a4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    96a6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    96a8:	2201      	movs	r2, #1
    96aa:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    96ac:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    96ae:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    96b0:	3202      	adds	r2, #2
    96b2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    96b4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    96b6:	4b39      	ldr	r3, [pc, #228]	; (979c <system_clock_init+0x134>)
    96b8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    96ba:	2005      	movs	r0, #5
    96bc:	4b38      	ldr	r3, [pc, #224]	; (97a0 <system_clock_init+0x138>)
    96be:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    96c0:	4933      	ldr	r1, [pc, #204]	; (9790 <system_clock_init+0x128>)
    96c2:	2202      	movs	r2, #2
    96c4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    96c6:	421a      	tst	r2, r3
    96c8:	d0fc      	beq.n	96c4 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    96ca:	4a31      	ldr	r2, [pc, #196]	; (9790 <system_clock_init+0x128>)
    96cc:	8a93      	ldrh	r3, [r2, #20]
    96ce:	2180      	movs	r1, #128	; 0x80
    96d0:	430b      	orrs	r3, r1
    96d2:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    96d4:	ab05      	add	r3, sp, #20
    96d6:	2100      	movs	r1, #0
    96d8:	2200      	movs	r2, #0
    96da:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    96dc:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    96de:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    96e0:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    96e2:	313f      	adds	r1, #63	; 0x3f
    96e4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    96e6:	393b      	subs	r1, #59	; 0x3b
    96e8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    96ea:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    96ec:	4b2d      	ldr	r3, [pc, #180]	; (97a4 <system_clock_init+0x13c>)
    96ee:	681b      	ldr	r3, [r3, #0]
    96f0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    96f2:	2b3f      	cmp	r3, #63	; 0x3f
    96f4:	d04a      	beq.n	978c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    96f6:	a805      	add	r0, sp, #20
    96f8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    96fa:	4b2b      	ldr	r3, [pc, #172]	; (97a8 <system_clock_init+0x140>)
    96fc:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    96fe:	2307      	movs	r3, #7
    9700:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    9702:	3338      	adds	r3, #56	; 0x38
    9704:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    9706:	4b29      	ldr	r3, [pc, #164]	; (97ac <system_clock_init+0x144>)
    9708:	4798      	blx	r3
	config->run_in_standby  = false;
    970a:	a804      	add	r0, sp, #16
    970c:	2500      	movs	r5, #0
    970e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    9710:	2601      	movs	r6, #1
    9712:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    9714:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    9716:	4b26      	ldr	r3, [pc, #152]	; (97b0 <system_clock_init+0x148>)
    9718:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    971a:	2006      	movs	r0, #6
    971c:	4f20      	ldr	r7, [pc, #128]	; (97a0 <system_clock_init+0x138>)
    971e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    9720:	4b24      	ldr	r3, [pc, #144]	; (97b4 <system_clock_init+0x14c>)
    9722:	4798      	blx	r3
	config->division_factor    = 1;
    9724:	ac01      	add	r4, sp, #4
    9726:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    9728:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    972a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    972c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    972e:	2305      	movs	r3, #5
    9730:	7023      	strb	r3, [r4, #0]
    9732:	0021      	movs	r1, r4
    9734:	2001      	movs	r0, #1
    9736:	4b20      	ldr	r3, [pc, #128]	; (97b8 <system_clock_init+0x150>)
    9738:	4798      	blx	r3
    973a:	2001      	movs	r0, #1
    973c:	4b1f      	ldr	r3, [pc, #124]	; (97bc <system_clock_init+0x154>)
    973e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    9740:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    9742:	0021      	movs	r1, r4
    9744:	2000      	movs	r0, #0
    9746:	4b14      	ldr	r3, [pc, #80]	; (9798 <system_clock_init+0x130>)
    9748:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    974a:	2000      	movs	r0, #0
    974c:	4b1c      	ldr	r3, [pc, #112]	; (97c0 <system_clock_init+0x158>)
    974e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    9750:	2007      	movs	r0, #7
    9752:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    9754:	490e      	ldr	r1, [pc, #56]	; (9790 <system_clock_init+0x128>)
    9756:	22d0      	movs	r2, #208	; 0xd0
    9758:	68cb      	ldr	r3, [r1, #12]
    975a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    975c:	2bd0      	cmp	r3, #208	; 0xd0
    975e:	d1fb      	bne.n	9758 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    9760:	4a18      	ldr	r2, [pc, #96]	; (97c4 <system_clock_init+0x15c>)
    9762:	2300      	movs	r3, #0
    9764:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    9766:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    9768:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    976a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    976c:	a901      	add	r1, sp, #4
    976e:	2201      	movs	r2, #1
    9770:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    9772:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    9774:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    9776:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    9778:	3307      	adds	r3, #7
    977a:	700b      	strb	r3, [r1, #0]
    977c:	2000      	movs	r0, #0
    977e:	4b0e      	ldr	r3, [pc, #56]	; (97b8 <system_clock_init+0x150>)
    9780:	4798      	blx	r3
    9782:	2000      	movs	r0, #0
    9784:	4b0d      	ldr	r3, [pc, #52]	; (97bc <system_clock_init+0x154>)
    9786:	4798      	blx	r3
#endif
}
    9788:	b00f      	add	sp, #60	; 0x3c
    978a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    978c:	3b20      	subs	r3, #32
    978e:	e7b2      	b.n	96f6 <system_clock_init+0x8e>
    9790:	40000800 	.word	0x40000800
    9794:	41004000 	.word	0x41004000
    9798:	00009a01 	.word	0x00009a01
    979c:	00009489 	.word	0x00009489
    97a0:	000095c1 	.word	0x000095c1
    97a4:	00806024 	.word	0x00806024
    97a8:	000005b9 	.word	0x000005b9
    97ac:	00009541 	.word	0x00009541
    97b0:	0000944d 	.word	0x0000944d
    97b4:	000097c9 	.word	0x000097c9
    97b8:	000097ed 	.word	0x000097ed
    97bc:	000098a5 	.word	0x000098a5
    97c0:	00009975 	.word	0x00009975
    97c4:	40000400 	.word	0x40000400

000097c8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    97c8:	4a06      	ldr	r2, [pc, #24]	; (97e4 <system_gclk_init+0x1c>)
    97ca:	6993      	ldr	r3, [r2, #24]
    97cc:	2108      	movs	r1, #8
    97ce:	430b      	orrs	r3, r1
    97d0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    97d2:	2201      	movs	r2, #1
    97d4:	4b04      	ldr	r3, [pc, #16]	; (97e8 <system_gclk_init+0x20>)
    97d6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    97d8:	0019      	movs	r1, r3
    97da:	780b      	ldrb	r3, [r1, #0]
    97dc:	4213      	tst	r3, r2
    97de:	d1fc      	bne.n	97da <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    97e0:	4770      	bx	lr
    97e2:	46c0      	nop			; (mov r8, r8)
    97e4:	40000400 	.word	0x40000400
    97e8:	40000c00 	.word	0x40000c00

000097ec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    97ec:	b570      	push	{r4, r5, r6, lr}
    97ee:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    97f0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    97f2:	780d      	ldrb	r5, [r1, #0]
    97f4:	022d      	lsls	r5, r5, #8
    97f6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    97f8:	784b      	ldrb	r3, [r1, #1]
    97fa:	2b00      	cmp	r3, #0
    97fc:	d002      	beq.n	9804 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    97fe:	2380      	movs	r3, #128	; 0x80
    9800:	02db      	lsls	r3, r3, #11
    9802:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    9804:	7a4b      	ldrb	r3, [r1, #9]
    9806:	2b00      	cmp	r3, #0
    9808:	d002      	beq.n	9810 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    980a:	2380      	movs	r3, #128	; 0x80
    980c:	031b      	lsls	r3, r3, #12
    980e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    9810:	6848      	ldr	r0, [r1, #4]
    9812:	2801      	cmp	r0, #1
    9814:	d910      	bls.n	9838 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    9816:	1e43      	subs	r3, r0, #1
    9818:	4218      	tst	r0, r3
    981a:	d134      	bne.n	9886 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    981c:	2802      	cmp	r0, #2
    981e:	d930      	bls.n	9882 <system_gclk_gen_set_config+0x96>
    9820:	2302      	movs	r3, #2
    9822:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    9824:	3201      	adds	r2, #1
						mask <<= 1) {
    9826:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    9828:	4298      	cmp	r0, r3
    982a:	d8fb      	bhi.n	9824 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    982c:	0212      	lsls	r2, r2, #8
    982e:	4332      	orrs	r2, r6
    9830:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    9832:	2380      	movs	r3, #128	; 0x80
    9834:	035b      	lsls	r3, r3, #13
    9836:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    9838:	7a0b      	ldrb	r3, [r1, #8]
    983a:	2b00      	cmp	r3, #0
    983c:	d002      	beq.n	9844 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    983e:	2380      	movs	r3, #128	; 0x80
    9840:	039b      	lsls	r3, r3, #14
    9842:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    9844:	4a13      	ldr	r2, [pc, #76]	; (9894 <system_gclk_gen_set_config+0xa8>)
    9846:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    9848:	b25b      	sxtb	r3, r3
    984a:	2b00      	cmp	r3, #0
    984c:	dbfb      	blt.n	9846 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    984e:	4b12      	ldr	r3, [pc, #72]	; (9898 <system_gclk_gen_set_config+0xac>)
    9850:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9852:	4b12      	ldr	r3, [pc, #72]	; (989c <system_gclk_gen_set_config+0xb0>)
    9854:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    9856:	4a0f      	ldr	r2, [pc, #60]	; (9894 <system_gclk_gen_set_config+0xa8>)
    9858:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    985a:	b25b      	sxtb	r3, r3
    985c:	2b00      	cmp	r3, #0
    985e:	dbfb      	blt.n	9858 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    9860:	4b0c      	ldr	r3, [pc, #48]	; (9894 <system_gclk_gen_set_config+0xa8>)
    9862:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    9864:	001a      	movs	r2, r3
    9866:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    9868:	b25b      	sxtb	r3, r3
    986a:	2b00      	cmp	r3, #0
    986c:	dbfb      	blt.n	9866 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    986e:	4a09      	ldr	r2, [pc, #36]	; (9894 <system_gclk_gen_set_config+0xa8>)
    9870:	6853      	ldr	r3, [r2, #4]
    9872:	2180      	movs	r1, #128	; 0x80
    9874:	0249      	lsls	r1, r1, #9
    9876:	400b      	ands	r3, r1
    9878:	431d      	orrs	r5, r3
    987a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    987c:	4b08      	ldr	r3, [pc, #32]	; (98a0 <system_gclk_gen_set_config+0xb4>)
    987e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    9880:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    9882:	2200      	movs	r2, #0
    9884:	e7d2      	b.n	982c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    9886:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    9888:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    988a:	2380      	movs	r3, #128	; 0x80
    988c:	029b      	lsls	r3, r3, #10
    988e:	431d      	orrs	r5, r3
    9890:	e7d2      	b.n	9838 <system_gclk_gen_set_config+0x4c>
    9892:	46c0      	nop			; (mov r8, r8)
    9894:	40000c00 	.word	0x40000c00
    9898:	0000934d 	.word	0x0000934d
    989c:	40000c08 	.word	0x40000c08
    98a0:	0000938d 	.word	0x0000938d

000098a4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    98a4:	b510      	push	{r4, lr}
    98a6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    98a8:	4a0b      	ldr	r2, [pc, #44]	; (98d8 <system_gclk_gen_enable+0x34>)
    98aa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    98ac:	b25b      	sxtb	r3, r3
    98ae:	2b00      	cmp	r3, #0
    98b0:	dbfb      	blt.n	98aa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    98b2:	4b0a      	ldr	r3, [pc, #40]	; (98dc <system_gclk_gen_enable+0x38>)
    98b4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    98b6:	4b0a      	ldr	r3, [pc, #40]	; (98e0 <system_gclk_gen_enable+0x3c>)
    98b8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    98ba:	4a07      	ldr	r2, [pc, #28]	; (98d8 <system_gclk_gen_enable+0x34>)
    98bc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    98be:	b25b      	sxtb	r3, r3
    98c0:	2b00      	cmp	r3, #0
    98c2:	dbfb      	blt.n	98bc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    98c4:	4a04      	ldr	r2, [pc, #16]	; (98d8 <system_gclk_gen_enable+0x34>)
    98c6:	6851      	ldr	r1, [r2, #4]
    98c8:	2380      	movs	r3, #128	; 0x80
    98ca:	025b      	lsls	r3, r3, #9
    98cc:	430b      	orrs	r3, r1
    98ce:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    98d0:	4b04      	ldr	r3, [pc, #16]	; (98e4 <system_gclk_gen_enable+0x40>)
    98d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    98d4:	bd10      	pop	{r4, pc}
    98d6:	46c0      	nop			; (mov r8, r8)
    98d8:	40000c00 	.word	0x40000c00
    98dc:	0000934d 	.word	0x0000934d
    98e0:	40000c04 	.word	0x40000c04
    98e4:	0000938d 	.word	0x0000938d

000098e8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    98e8:	b570      	push	{r4, r5, r6, lr}
    98ea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    98ec:	4a1a      	ldr	r2, [pc, #104]	; (9958 <system_gclk_gen_get_hz+0x70>)
    98ee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    98f0:	b25b      	sxtb	r3, r3
    98f2:	2b00      	cmp	r3, #0
    98f4:	dbfb      	blt.n	98ee <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    98f6:	4b19      	ldr	r3, [pc, #100]	; (995c <system_gclk_gen_get_hz+0x74>)
    98f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    98fa:	4b19      	ldr	r3, [pc, #100]	; (9960 <system_gclk_gen_get_hz+0x78>)
    98fc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    98fe:	4a16      	ldr	r2, [pc, #88]	; (9958 <system_gclk_gen_get_hz+0x70>)
    9900:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    9902:	b25b      	sxtb	r3, r3
    9904:	2b00      	cmp	r3, #0
    9906:	dbfb      	blt.n	9900 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    9908:	4e13      	ldr	r6, [pc, #76]	; (9958 <system_gclk_gen_get_hz+0x70>)
    990a:	6870      	ldr	r0, [r6, #4]
    990c:	04c0      	lsls	r0, r0, #19
    990e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    9910:	4b14      	ldr	r3, [pc, #80]	; (9964 <system_gclk_gen_get_hz+0x7c>)
    9912:	4798      	blx	r3
    9914:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9916:	4b12      	ldr	r3, [pc, #72]	; (9960 <system_gclk_gen_get_hz+0x78>)
    9918:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    991a:	6876      	ldr	r6, [r6, #4]
    991c:	02f6      	lsls	r6, r6, #11
    991e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9920:	4b11      	ldr	r3, [pc, #68]	; (9968 <system_gclk_gen_get_hz+0x80>)
    9922:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    9924:	4a0c      	ldr	r2, [pc, #48]	; (9958 <system_gclk_gen_get_hz+0x70>)
    9926:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    9928:	b25b      	sxtb	r3, r3
    992a:	2b00      	cmp	r3, #0
    992c:	dbfb      	blt.n	9926 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    992e:	4b0a      	ldr	r3, [pc, #40]	; (9958 <system_gclk_gen_get_hz+0x70>)
    9930:	689c      	ldr	r4, [r3, #8]
    9932:	0224      	lsls	r4, r4, #8
    9934:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    9936:	4b0d      	ldr	r3, [pc, #52]	; (996c <system_gclk_gen_get_hz+0x84>)
    9938:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    993a:	2e00      	cmp	r6, #0
    993c:	d107      	bne.n	994e <system_gclk_gen_get_hz+0x66>
    993e:	2c01      	cmp	r4, #1
    9940:	d907      	bls.n	9952 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    9942:	0021      	movs	r1, r4
    9944:	0028      	movs	r0, r5
    9946:	4b0a      	ldr	r3, [pc, #40]	; (9970 <system_gclk_gen_get_hz+0x88>)
    9948:	4798      	blx	r3
    994a:	0005      	movs	r5, r0
    994c:	e001      	b.n	9952 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    994e:	3401      	adds	r4, #1
    9950:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    9952:	0028      	movs	r0, r5
    9954:	bd70      	pop	{r4, r5, r6, pc}
    9956:	46c0      	nop			; (mov r8, r8)
    9958:	40000c00 	.word	0x40000c00
    995c:	0000934d 	.word	0x0000934d
    9960:	40000c04 	.word	0x40000c04
    9964:	000093bd 	.word	0x000093bd
    9968:	40000c08 	.word	0x40000c08
    996c:	0000938d 	.word	0x0000938d
    9970:	0000e099 	.word	0x0000e099

00009974 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    9974:	b510      	push	{r4, lr}
    9976:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    9978:	4b06      	ldr	r3, [pc, #24]	; (9994 <system_gclk_chan_enable+0x20>)
    997a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    997c:	4b06      	ldr	r3, [pc, #24]	; (9998 <system_gclk_chan_enable+0x24>)
    997e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    9980:	4a06      	ldr	r2, [pc, #24]	; (999c <system_gclk_chan_enable+0x28>)
    9982:	8853      	ldrh	r3, [r2, #2]
    9984:	2180      	movs	r1, #128	; 0x80
    9986:	01c9      	lsls	r1, r1, #7
    9988:	430b      	orrs	r3, r1
    998a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    998c:	4b04      	ldr	r3, [pc, #16]	; (99a0 <system_gclk_chan_enable+0x2c>)
    998e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    9990:	bd10      	pop	{r4, pc}
    9992:	46c0      	nop			; (mov r8, r8)
    9994:	0000934d 	.word	0x0000934d
    9998:	40000c02 	.word	0x40000c02
    999c:	40000c00 	.word	0x40000c00
    99a0:	0000938d 	.word	0x0000938d

000099a4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    99a4:	b510      	push	{r4, lr}
    99a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    99a8:	4b0f      	ldr	r3, [pc, #60]	; (99e8 <system_gclk_chan_disable+0x44>)
    99aa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    99ac:	4b0f      	ldr	r3, [pc, #60]	; (99ec <system_gclk_chan_disable+0x48>)
    99ae:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    99b0:	4a0f      	ldr	r2, [pc, #60]	; (99f0 <system_gclk_chan_disable+0x4c>)
    99b2:	8853      	ldrh	r3, [r2, #2]
    99b4:	051b      	lsls	r3, r3, #20
    99b6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    99b8:	8853      	ldrh	r3, [r2, #2]
    99ba:	490e      	ldr	r1, [pc, #56]	; (99f4 <system_gclk_chan_disable+0x50>)
    99bc:	400b      	ands	r3, r1
    99be:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    99c0:	8853      	ldrh	r3, [r2, #2]
    99c2:	490d      	ldr	r1, [pc, #52]	; (99f8 <system_gclk_chan_disable+0x54>)
    99c4:	400b      	ands	r3, r1
    99c6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    99c8:	0011      	movs	r1, r2
    99ca:	2280      	movs	r2, #128	; 0x80
    99cc:	01d2      	lsls	r2, r2, #7
    99ce:	884b      	ldrh	r3, [r1, #2]
    99d0:	4213      	tst	r3, r2
    99d2:	d1fc      	bne.n	99ce <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    99d4:	4906      	ldr	r1, [pc, #24]	; (99f0 <system_gclk_chan_disable+0x4c>)
    99d6:	884a      	ldrh	r2, [r1, #2]
    99d8:	0203      	lsls	r3, r0, #8
    99da:	4806      	ldr	r0, [pc, #24]	; (99f4 <system_gclk_chan_disable+0x50>)
    99dc:	4002      	ands	r2, r0
    99de:	4313      	orrs	r3, r2
    99e0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    99e2:	4b06      	ldr	r3, [pc, #24]	; (99fc <system_gclk_chan_disable+0x58>)
    99e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    99e6:	bd10      	pop	{r4, pc}
    99e8:	0000934d 	.word	0x0000934d
    99ec:	40000c02 	.word	0x40000c02
    99f0:	40000c00 	.word	0x40000c00
    99f4:	fffff0ff 	.word	0xfffff0ff
    99f8:	ffffbfff 	.word	0xffffbfff
    99fc:	0000938d 	.word	0x0000938d

00009a00 <system_gclk_chan_set_config>:
{
    9a00:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    9a02:	780c      	ldrb	r4, [r1, #0]
    9a04:	0224      	lsls	r4, r4, #8
    9a06:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    9a08:	4b02      	ldr	r3, [pc, #8]	; (9a14 <system_gclk_chan_set_config+0x14>)
    9a0a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    9a0c:	b2a4      	uxth	r4, r4
    9a0e:	4b02      	ldr	r3, [pc, #8]	; (9a18 <system_gclk_chan_set_config+0x18>)
    9a10:	805c      	strh	r4, [r3, #2]
}
    9a12:	bd10      	pop	{r4, pc}
    9a14:	000099a5 	.word	0x000099a5
    9a18:	40000c00 	.word	0x40000c00

00009a1c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    9a1c:	b510      	push	{r4, lr}
    9a1e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    9a20:	4b06      	ldr	r3, [pc, #24]	; (9a3c <system_gclk_chan_get_hz+0x20>)
    9a22:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9a24:	4b06      	ldr	r3, [pc, #24]	; (9a40 <system_gclk_chan_get_hz+0x24>)
    9a26:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    9a28:	4b06      	ldr	r3, [pc, #24]	; (9a44 <system_gclk_chan_get_hz+0x28>)
    9a2a:	885c      	ldrh	r4, [r3, #2]
    9a2c:	0524      	lsls	r4, r4, #20
    9a2e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    9a30:	4b05      	ldr	r3, [pc, #20]	; (9a48 <system_gclk_chan_get_hz+0x2c>)
    9a32:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    9a34:	0020      	movs	r0, r4
    9a36:	4b05      	ldr	r3, [pc, #20]	; (9a4c <system_gclk_chan_get_hz+0x30>)
    9a38:	4798      	blx	r3
}
    9a3a:	bd10      	pop	{r4, pc}
    9a3c:	0000934d 	.word	0x0000934d
    9a40:	40000c02 	.word	0x40000c02
    9a44:	40000c00 	.word	0x40000c00
    9a48:	0000938d 	.word	0x0000938d
    9a4c:	000098e9 	.word	0x000098e9

00009a50 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    9a50:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    9a52:	78d3      	ldrb	r3, [r2, #3]
    9a54:	2b00      	cmp	r3, #0
    9a56:	d135      	bne.n	9ac4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    9a58:	7813      	ldrb	r3, [r2, #0]
    9a5a:	2b80      	cmp	r3, #128	; 0x80
    9a5c:	d029      	beq.n	9ab2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    9a5e:	061b      	lsls	r3, r3, #24
    9a60:	2480      	movs	r4, #128	; 0x80
    9a62:	0264      	lsls	r4, r4, #9
    9a64:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9a66:	7854      	ldrb	r4, [r2, #1]
    9a68:	2502      	movs	r5, #2
    9a6a:	43ac      	bics	r4, r5
    9a6c:	d106      	bne.n	9a7c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    9a6e:	7894      	ldrb	r4, [r2, #2]
    9a70:	2c00      	cmp	r4, #0
    9a72:	d120      	bne.n	9ab6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    9a74:	2480      	movs	r4, #128	; 0x80
    9a76:	02a4      	lsls	r4, r4, #10
    9a78:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    9a7a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9a7c:	7854      	ldrb	r4, [r2, #1]
    9a7e:	3c01      	subs	r4, #1
    9a80:	2c01      	cmp	r4, #1
    9a82:	d91c      	bls.n	9abe <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    9a84:	040d      	lsls	r5, r1, #16
    9a86:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9a88:	24a0      	movs	r4, #160	; 0xa0
    9a8a:	05e4      	lsls	r4, r4, #23
    9a8c:	432c      	orrs	r4, r5
    9a8e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9a90:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    9a92:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9a94:	24d0      	movs	r4, #208	; 0xd0
    9a96:	0624      	lsls	r4, r4, #24
    9a98:	432c      	orrs	r4, r5
    9a9a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9a9c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    9a9e:	78d4      	ldrb	r4, [r2, #3]
    9aa0:	2c00      	cmp	r4, #0
    9aa2:	d122      	bne.n	9aea <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    9aa4:	035b      	lsls	r3, r3, #13
    9aa6:	d51c      	bpl.n	9ae2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    9aa8:	7893      	ldrb	r3, [r2, #2]
    9aaa:	2b01      	cmp	r3, #1
    9aac:	d01e      	beq.n	9aec <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    9aae:	6141      	str	r1, [r0, #20]
    9ab0:	e017      	b.n	9ae2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    9ab2:	2300      	movs	r3, #0
    9ab4:	e7d7      	b.n	9a66 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9ab6:	24c0      	movs	r4, #192	; 0xc0
    9ab8:	02e4      	lsls	r4, r4, #11
    9aba:	4323      	orrs	r3, r4
    9abc:	e7dd      	b.n	9a7a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9abe:	4c0d      	ldr	r4, [pc, #52]	; (9af4 <_system_pinmux_config+0xa4>)
    9ac0:	4023      	ands	r3, r4
    9ac2:	e7df      	b.n	9a84 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    9ac4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    9ac6:	040c      	lsls	r4, r1, #16
    9ac8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9aca:	23a0      	movs	r3, #160	; 0xa0
    9acc:	05db      	lsls	r3, r3, #23
    9ace:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9ad0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    9ad2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9ad4:	23d0      	movs	r3, #208	; 0xd0
    9ad6:	061b      	lsls	r3, r3, #24
    9ad8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9ada:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    9adc:	78d3      	ldrb	r3, [r2, #3]
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d103      	bne.n	9aea <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9ae2:	7853      	ldrb	r3, [r2, #1]
    9ae4:	3b01      	subs	r3, #1
    9ae6:	2b01      	cmp	r3, #1
    9ae8:	d902      	bls.n	9af0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    9aea:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    9aec:	6181      	str	r1, [r0, #24]
    9aee:	e7f8      	b.n	9ae2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    9af0:	6081      	str	r1, [r0, #8]
}
    9af2:	e7fa      	b.n	9aea <_system_pinmux_config+0x9a>
    9af4:	fffbffff 	.word	0xfffbffff

00009af8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    9af8:	b510      	push	{r4, lr}
    9afa:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    9afc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    9afe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9b00:	2900      	cmp	r1, #0
    9b02:	d104      	bne.n	9b0e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    9b04:	0943      	lsrs	r3, r0, #5
    9b06:	01db      	lsls	r3, r3, #7
    9b08:	4905      	ldr	r1, [pc, #20]	; (9b20 <system_pinmux_pin_set_config+0x28>)
    9b0a:	468c      	mov	ip, r1
    9b0c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    9b0e:	241f      	movs	r4, #31
    9b10:	4020      	ands	r0, r4
    9b12:	2101      	movs	r1, #1
    9b14:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    9b16:	0018      	movs	r0, r3
    9b18:	4b02      	ldr	r3, [pc, #8]	; (9b24 <system_pinmux_pin_set_config+0x2c>)
    9b1a:	4798      	blx	r3
}
    9b1c:	bd10      	pop	{r4, pc}
    9b1e:	46c0      	nop			; (mov r8, r8)
    9b20:	41004400 	.word	0x41004400
    9b24:	00009a51 	.word	0x00009a51

00009b28 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    9b28:	4770      	bx	lr
	...

00009b2c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    9b2c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    9b2e:	4b05      	ldr	r3, [pc, #20]	; (9b44 <system_init+0x18>)
    9b30:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    9b32:	4b05      	ldr	r3, [pc, #20]	; (9b48 <system_init+0x1c>)
    9b34:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    9b36:	4b05      	ldr	r3, [pc, #20]	; (9b4c <system_init+0x20>)
    9b38:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    9b3a:	4b05      	ldr	r3, [pc, #20]	; (9b50 <system_init+0x24>)
    9b3c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    9b3e:	4b05      	ldr	r3, [pc, #20]	; (9b54 <system_init+0x28>)
    9b40:	4798      	blx	r3
}
    9b42:	bd10      	pop	{r4, pc}
    9b44:	00009669 	.word	0x00009669
    9b48:	00009349 	.word	0x00009349
    9b4c:	00009b29 	.word	0x00009b29
    9b50:	0000292d 	.word	0x0000292d
    9b54:	00009b29 	.word	0x00009b29

00009b58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9b58:	e7fe      	b.n	9b58 <Dummy_Handler>
	...

00009b5c <Reset_Handler>:
{
    9b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    9b5e:	4a2a      	ldr	r2, [pc, #168]	; (9c08 <Reset_Handler+0xac>)
    9b60:	4b2a      	ldr	r3, [pc, #168]	; (9c0c <Reset_Handler+0xb0>)
    9b62:	429a      	cmp	r2, r3
    9b64:	d011      	beq.n	9b8a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    9b66:	001a      	movs	r2, r3
    9b68:	4b29      	ldr	r3, [pc, #164]	; (9c10 <Reset_Handler+0xb4>)
    9b6a:	429a      	cmp	r2, r3
    9b6c:	d20d      	bcs.n	9b8a <Reset_Handler+0x2e>
    9b6e:	4a29      	ldr	r2, [pc, #164]	; (9c14 <Reset_Handler+0xb8>)
    9b70:	3303      	adds	r3, #3
    9b72:	1a9b      	subs	r3, r3, r2
    9b74:	089b      	lsrs	r3, r3, #2
    9b76:	3301      	adds	r3, #1
    9b78:	009b      	lsls	r3, r3, #2
    9b7a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    9b7c:	4823      	ldr	r0, [pc, #140]	; (9c0c <Reset_Handler+0xb0>)
    9b7e:	4922      	ldr	r1, [pc, #136]	; (9c08 <Reset_Handler+0xac>)
    9b80:	588c      	ldr	r4, [r1, r2]
    9b82:	5084      	str	r4, [r0, r2]
    9b84:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    9b86:	429a      	cmp	r2, r3
    9b88:	d1fa      	bne.n	9b80 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    9b8a:	4a23      	ldr	r2, [pc, #140]	; (9c18 <Reset_Handler+0xbc>)
    9b8c:	4b23      	ldr	r3, [pc, #140]	; (9c1c <Reset_Handler+0xc0>)
    9b8e:	429a      	cmp	r2, r3
    9b90:	d20a      	bcs.n	9ba8 <Reset_Handler+0x4c>
    9b92:	43d3      	mvns	r3, r2
    9b94:	4921      	ldr	r1, [pc, #132]	; (9c1c <Reset_Handler+0xc0>)
    9b96:	185b      	adds	r3, r3, r1
    9b98:	2103      	movs	r1, #3
    9b9a:	438b      	bics	r3, r1
    9b9c:	3304      	adds	r3, #4
    9b9e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    9ba0:	2100      	movs	r1, #0
    9ba2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    9ba4:	4293      	cmp	r3, r2
    9ba6:	d1fc      	bne.n	9ba2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9ba8:	4a1d      	ldr	r2, [pc, #116]	; (9c20 <Reset_Handler+0xc4>)
    9baa:	21ff      	movs	r1, #255	; 0xff
    9bac:	4b1d      	ldr	r3, [pc, #116]	; (9c24 <Reset_Handler+0xc8>)
    9bae:	438b      	bics	r3, r1
    9bb0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    9bb2:	39fd      	subs	r1, #253	; 0xfd
    9bb4:	2390      	movs	r3, #144	; 0x90
    9bb6:	005b      	lsls	r3, r3, #1
    9bb8:	4a1b      	ldr	r2, [pc, #108]	; (9c28 <Reset_Handler+0xcc>)
    9bba:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9bbc:	4a1b      	ldr	r2, [pc, #108]	; (9c2c <Reset_Handler+0xd0>)
    9bbe:	78d3      	ldrb	r3, [r2, #3]
    9bc0:	2503      	movs	r5, #3
    9bc2:	43ab      	bics	r3, r5
    9bc4:	2402      	movs	r4, #2
    9bc6:	4323      	orrs	r3, r4
    9bc8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9bca:	78d3      	ldrb	r3, [r2, #3]
    9bcc:	270c      	movs	r7, #12
    9bce:	43bb      	bics	r3, r7
    9bd0:	2608      	movs	r6, #8
    9bd2:	4333      	orrs	r3, r6
    9bd4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    9bd6:	4b16      	ldr	r3, [pc, #88]	; (9c30 <Reset_Handler+0xd4>)
    9bd8:	7b98      	ldrb	r0, [r3, #14]
    9bda:	2230      	movs	r2, #48	; 0x30
    9bdc:	4390      	bics	r0, r2
    9bde:	2220      	movs	r2, #32
    9be0:	4310      	orrs	r0, r2
    9be2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9be4:	7b99      	ldrb	r1, [r3, #14]
    9be6:	43b9      	bics	r1, r7
    9be8:	4331      	orrs	r1, r6
    9bea:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9bec:	7b9a      	ldrb	r2, [r3, #14]
    9bee:	43aa      	bics	r2, r5
    9bf0:	4322      	orrs	r2, r4
    9bf2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    9bf4:	4a0f      	ldr	r2, [pc, #60]	; (9c34 <Reset_Handler+0xd8>)
    9bf6:	6853      	ldr	r3, [r2, #4]
    9bf8:	2180      	movs	r1, #128	; 0x80
    9bfa:	430b      	orrs	r3, r1
    9bfc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    9bfe:	4b0e      	ldr	r3, [pc, #56]	; (9c38 <Reset_Handler+0xdc>)
    9c00:	4798      	blx	r3
        main();
    9c02:	4b0e      	ldr	r3, [pc, #56]	; (9c3c <Reset_Handler+0xe0>)
    9c04:	4798      	blx	r3
    9c06:	e7fe      	b.n	9c06 <Reset_Handler+0xaa>
    9c08:	00012e38 	.word	0x00012e38
    9c0c:	20000000 	.word	0x20000000
    9c10:	200001dc 	.word	0x200001dc
    9c14:	20000004 	.word	0x20000004
    9c18:	200001dc 	.word	0x200001dc
    9c1c:	20000a44 	.word	0x20000a44
    9c20:	e000ed00 	.word	0xe000ed00
    9c24:	00000000 	.word	0x00000000
    9c28:	41007000 	.word	0x41007000
    9c2c:	41005000 	.word	0x41005000
    9c30:	41004800 	.word	0x41004800
    9c34:	41004000 	.word	0x41004000
    9c38:	0000b055 	.word	0x0000b055
    9c3c:	0000a01d 	.word	0x0000a01d

00009c40 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    9c40:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    9c42:	4a06      	ldr	r2, [pc, #24]	; (9c5c <_sbrk+0x1c>)
    9c44:	6812      	ldr	r2, [r2, #0]
    9c46:	2a00      	cmp	r2, #0
    9c48:	d004      	beq.n	9c54 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    9c4a:	4a04      	ldr	r2, [pc, #16]	; (9c5c <_sbrk+0x1c>)
    9c4c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    9c4e:	18c3      	adds	r3, r0, r3
    9c50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    9c52:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    9c54:	4902      	ldr	r1, [pc, #8]	; (9c60 <_sbrk+0x20>)
    9c56:	4a01      	ldr	r2, [pc, #4]	; (9c5c <_sbrk+0x1c>)
    9c58:	6011      	str	r1, [r2, #0]
    9c5a:	e7f6      	b.n	9c4a <_sbrk+0xa>
    9c5c:	20000298 	.word	0x20000298
    9c60:	20002a48 	.word	0x20002a48

00009c64 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    9c64:	2001      	movs	r0, #1
    9c66:	4240      	negs	r0, r0
    9c68:	4770      	bx	lr

00009c6a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    9c6a:	2380      	movs	r3, #128	; 0x80
    9c6c:	019b      	lsls	r3, r3, #6
    9c6e:	604b      	str	r3, [r1, #4]

	return 0;
}
    9c70:	2000      	movs	r0, #0
    9c72:	4770      	bx	lr

00009c74 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    9c74:	2001      	movs	r0, #1
    9c76:	4770      	bx	lr

00009c78 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    9c78:	2000      	movs	r0, #0
    9c7a:	4770      	bx	lr

00009c7c <firmware_request_download_callback>:
	configure_port_pins_set(relay);
	port_pin_set_output_level(relay, on_or_off);
}

void firmware_request_download_callback(uint32_t options)
{
    9c7c:	b500      	push	{lr}
    9c7e:	b087      	sub	sp, #28
	printf("firmware download requested\r\n");
    9c80:	4814      	ldr	r0, [pc, #80]	; (9cd4 <firmware_request_download_callback+0x58>)
    9c82:	4b15      	ldr	r3, [pc, #84]	; (9cd8 <firmware_request_download_callback+0x5c>)
    9c84:	4798      	blx	r3
	deconfigure_mqtt();
    9c86:	4b15      	ldr	r3, [pc, #84]	; (9cdc <firmware_request_download_callback+0x60>)
    9c88:	4798      	blx	r3

	wifi_config new_wifi_configuration;
	get_default_wifi_config(&new_wifi_configuration);
    9c8a:	a801      	add	r0, sp, #4
    9c8c:	4b14      	ldr	r3, [pc, #80]	; (9ce0 <firmware_request_download_callback+0x64>)
    9c8e:	4798      	blx	r3
	new_wifi_configuration.firmware_header_http_address = "https://www.seas.upenn.edu/~warcher/ese516/metadata-cli.bin";
    9c90:	4b14      	ldr	r3, [pc, #80]	; (9ce4 <firmware_request_download_callback+0x68>)
    9c92:	9304      	str	r3, [sp, #16]
	new_wifi_configuration.firmware_http_address = "https://www.seas.upenn.edu/~warcher/ese516/cli.bin";
    9c94:	4b14      	ldr	r3, [pc, #80]	; (9ce8 <firmware_request_download_callback+0x6c>)
    9c96:	9305      	str	r3, [sp, #20]
	configure_wifi_module(&new_wifi_configuration);
    9c98:	a801      	add	r0, sp, #4
    9c9a:	4b14      	ldr	r3, [pc, #80]	; (9cec <firmware_request_download_callback+0x70>)
    9c9c:	4798      	blx	r3
	configure_flash();
    9c9e:	4b14      	ldr	r3, [pc, #80]	; (9cf0 <firmware_request_download_callback+0x74>)
    9ca0:	4798      	blx	r3
	configure_nvm();
    9ca2:	4b14      	ldr	r3, [pc, #80]	; (9cf4 <firmware_request_download_callback+0x78>)
    9ca4:	4798      	blx	r3
	if (check_for_update()) {
    9ca6:	4b14      	ldr	r3, [pc, #80]	; (9cf8 <firmware_request_download_callback+0x7c>)
    9ca8:	4798      	blx	r3
    9caa:	2800      	cmp	r0, #0
    9cac:	d00b      	beq.n	9cc6 <firmware_request_download_callback+0x4a>
		if (download_firmware()) {
    9cae:	4b13      	ldr	r3, [pc, #76]	; (9cfc <firmware_request_download_callback+0x80>)
    9cb0:	4798      	blx	r3
    9cb2:	2800      	cmp	r0, #0
    9cb4:	d003      	beq.n	9cbe <firmware_request_download_callback+0x42>
			printf("firmware successfully downloaded!\r\n");
    9cb6:	4812      	ldr	r0, [pc, #72]	; (9d00 <firmware_request_download_callback+0x84>)
    9cb8:	4b07      	ldr	r3, [pc, #28]	; (9cd8 <firmware_request_download_callback+0x5c>)
    9cba:	4798      	blx	r3
    9cbc:	e006      	b.n	9ccc <firmware_request_download_callback+0x50>
			} else {
			printf("firmware unsuccessful. Check log for more details.\r\n");
    9cbe:	4811      	ldr	r0, [pc, #68]	; (9d04 <firmware_request_download_callback+0x88>)
    9cc0:	4b05      	ldr	r3, [pc, #20]	; (9cd8 <firmware_request_download_callback+0x5c>)
    9cc2:	4798      	blx	r3
    9cc4:	e002      	b.n	9ccc <firmware_request_download_callback+0x50>
		}
		} else {
		printf("No update found.\r\n");
    9cc6:	4810      	ldr	r0, [pc, #64]	; (9d08 <firmware_request_download_callback+0x8c>)
    9cc8:	4b03      	ldr	r3, [pc, #12]	; (9cd8 <firmware_request_download_callback+0x5c>)
    9cca:	4798      	blx	r3
	}
	deconfigure_wifi_module();
    9ccc:	4b0f      	ldr	r3, [pc, #60]	; (9d0c <firmware_request_download_callback+0x90>)
    9cce:	4798      	blx	r3
	
}
    9cd0:	b007      	add	sp, #28
    9cd2:	bd00      	pop	{pc}
    9cd4:	00012760 	.word	0x00012760
    9cd8:	0000bc59 	.word	0x0000bc59
    9cdc:	00000805 	.word	0x00000805
    9ce0:	00001489 	.word	0x00001489
    9ce4:	00012780 	.word	0x00012780
    9ce8:	000127bc 	.word	0x000127bc
    9cec:	000014b1 	.word	0x000014b1
    9cf0:	0000024d 	.word	0x0000024d
    9cf4:	00000335 	.word	0x00000335
    9cf8:	000015f1 	.word	0x000015f1
    9cfc:	00001645 	.word	0x00001645
    9d00:	000127f0 	.word	0x000127f0
    9d04:	00012814 	.word	0x00012814
    9d08:	00012848 	.word	0x00012848
    9d0c:	000015ad 	.word	0x000015ad

00009d10 <configure_port_pins_set>:
{
    9d10:	b500      	push	{lr}
    9d12:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    9d14:	a901      	add	r1, sp, #4
    9d16:	2301      	movs	r3, #1
    9d18:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    9d1a:	2200      	movs	r2, #0
    9d1c:	708a      	strb	r2, [r1, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    9d1e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(pin, &config_port_pin);
    9d20:	b2c0      	uxtb	r0, r0
    9d22:	4b02      	ldr	r3, [pc, #8]	; (9d2c <configure_port_pins_set+0x1c>)
    9d24:	4798      	blx	r3
}
    9d26:	b003      	add	sp, #12
    9d28:	bd00      	pop	{pc}
    9d2a:	46c0      	nop			; (mov r8, r8)
    9d2c:	00009325 	.word	0x00009325

00009d30 <led_request_callback>:
void led_request_callback(uint8_t options) {
    9d30:	b510      	push	{r4, lr}
    9d32:	0004      	movs	r4, r0
		configure_port_pins_set(PIN_PA03);
    9d34:	2003      	movs	r0, #3
    9d36:	4b06      	ldr	r3, [pc, #24]	; (9d50 <led_request_callback+0x20>)
    9d38:	4798      	blx	r3
	if (level) {
    9d3a:	2c00      	cmp	r4, #0
    9d3c:	d103      	bne.n	9d46 <led_request_callback+0x16>
		port_base->OUTCLR.reg = pin_mask;
    9d3e:	2208      	movs	r2, #8
    9d40:	4b04      	ldr	r3, [pc, #16]	; (9d54 <led_request_callback+0x24>)
    9d42:	615a      	str	r2, [r3, #20]
}
    9d44:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    9d46:	2208      	movs	r2, #8
    9d48:	4b02      	ldr	r3, [pc, #8]	; (9d54 <led_request_callback+0x24>)
    9d4a:	619a      	str	r2, [r3, #24]
    9d4c:	e7fa      	b.n	9d44 <led_request_callback+0x14>
    9d4e:	46c0      	nop			; (mov r8, r8)
    9d50:	00009d11 	.word	0x00009d11
    9d54:	41004400 	.word	0x41004400

00009d58 <pump_request_callback>:
{
    9d58:	b510      	push	{r4, lr}
    9d5a:	0004      	movs	r4, r0
	configure_port_pins_set(PIN_PB23);
    9d5c:	2037      	movs	r0, #55	; 0x37
    9d5e:	4b0b      	ldr	r3, [pc, #44]	; (9d8c <pump_request_callback+0x34>)
    9d60:	4798      	blx	r3
    9d62:	2280      	movs	r2, #128	; 0x80
    9d64:	0412      	lsls	r2, r2, #16
    9d66:	4b0a      	ldr	r3, [pc, #40]	; (9d90 <pump_request_callback+0x38>)
    9d68:	619a      	str	r2, [r3, #24]
	delay_ms(options);
    9d6a:	2c00      	cmp	r4, #0
    9d6c:	d10a      	bne.n	9d84 <pump_request_callback+0x2c>
    9d6e:	2001      	movs	r0, #1
    9d70:	4b08      	ldr	r3, [pc, #32]	; (9d94 <pump_request_callback+0x3c>)
    9d72:	4798      	blx	r3
	configure_port_pins_set(PIN_PB23);
    9d74:	2037      	movs	r0, #55	; 0x37
    9d76:	4b05      	ldr	r3, [pc, #20]	; (9d8c <pump_request_callback+0x34>)
    9d78:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    9d7a:	2280      	movs	r2, #128	; 0x80
    9d7c:	0412      	lsls	r2, r2, #16
    9d7e:	4b04      	ldr	r3, [pc, #16]	; (9d90 <pump_request_callback+0x38>)
    9d80:	615a      	str	r2, [r3, #20]
}
    9d82:	bd10      	pop	{r4, pc}
	delay_ms(options);
    9d84:	0020      	movs	r0, r4
    9d86:	4b04      	ldr	r3, [pc, #16]	; (9d98 <pump_request_callback+0x40>)
    9d88:	4798      	blx	r3
    9d8a:	e7f3      	b.n	9d74 <pump_request_callback+0x1c>
    9d8c:	00009d11 	.word	0x00009d11
    9d90:	41004480 	.word	0x41004480
    9d94:	00005cd9 	.word	0x00005cd9
    9d98:	00005d05 	.word	0x00005d05

00009d9c <relay_request_callback>:
{
    9d9c:	b570      	push	{r4, r5, r6, lr}
	uint8_t which_relay = options & 0b10;
    9d9e:	b2c4      	uxtb	r4, r0
	uint8_t on_or_off = options & 1;
    9da0:	2501      	movs	r5, #1
    9da2:	4025      	ands	r5, r4
	uint32_t relay = (which_relay) ? PIN_PB03 : PIN_PB02;
    9da4:	07a4      	lsls	r4, r4, #30
    9da6:	0fe4      	lsrs	r4, r4, #31
    9da8:	3422      	adds	r4, #34	; 0x22
	configure_port_pins_set(relay);
    9daa:	0020      	movs	r0, r4
    9dac:	4b0a      	ldr	r3, [pc, #40]	; (9dd8 <relay_request_callback+0x3c>)
    9dae:	4798      	blx	r3
	port_pin_set_output_level(relay, on_or_off);
    9db0:	b2e4      	uxtb	r4, r4
    9db2:	0963      	lsrs	r3, r4, #5
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9db4:	221f      	movs	r2, #31
    9db6:	4014      	ands	r4, r2
    9db8:	3a1e      	subs	r2, #30
    9dba:	40a2      	lsls	r2, r4
	if (level) {
    9dbc:	2d00      	cmp	r5, #0
    9dbe:	d105      	bne.n	9dcc <relay_request_callback+0x30>
		port_base->OUTCLR.reg = pin_mask;
    9dc0:	01db      	lsls	r3, r3, #7
    9dc2:	4906      	ldr	r1, [pc, #24]	; (9ddc <relay_request_callback+0x40>)
    9dc4:	468c      	mov	ip, r1
    9dc6:	4463      	add	r3, ip
    9dc8:	615a      	str	r2, [r3, #20]
}
    9dca:	bd70      	pop	{r4, r5, r6, pc}
		port_base->OUTSET.reg = pin_mask;
    9dcc:	01db      	lsls	r3, r3, #7
    9dce:	4903      	ldr	r1, [pc, #12]	; (9ddc <relay_request_callback+0x40>)
    9dd0:	468c      	mov	ip, r1
    9dd2:	4463      	add	r3, ip
    9dd4:	619a      	str	r2, [r3, #24]
    9dd6:	e7f8      	b.n	9dca <relay_request_callback+0x2e>
    9dd8:	00009d11 	.word	0x00009d11
    9ddc:	41004400 	.word	0x41004400

00009de0 <configure_adc>:
{
    9de0:	b510      	push	{r4, lr}
    9de2:	b08c      	sub	sp, #48	; 0x30
    9de4:	0004      	movs	r4, r0
	adc_get_config_defaults(&config_adc);
    9de6:	4668      	mov	r0, sp
    9de8:	4b13      	ldr	r3, [pc, #76]	; (9e38 <configure_adc+0x58>)
    9dea:	4798      	blx	r3
	config_adc.positive_input = pin;
    9dec:	466b      	mov	r3, sp
    9dee:	731c      	strb	r4, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    9df0:	2301      	movs	r3, #1
    9df2:	466a      	mov	r2, sp
    9df4:	7053      	strb	r3, [r2, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    9df6:	2380      	movs	r3, #128	; 0x80
    9df8:	009b      	lsls	r3, r3, #2
    9dfa:	8053      	strh	r3, [r2, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    9dfc:	4c0f      	ldr	r4, [pc, #60]	; (9e3c <configure_adc+0x5c>)
    9dfe:	4910      	ldr	r1, [pc, #64]	; (9e40 <configure_adc+0x60>)
    9e00:	0020      	movs	r0, r4
    9e02:	4b10      	ldr	r3, [pc, #64]	; (9e44 <configure_adc+0x64>)
    9e04:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    9e06:	6822      	ldr	r2, [r4, #0]
    9e08:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    9e0a:	b25b      	sxtb	r3, r3
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	dbfb      	blt.n	9e08 <configure_adc+0x28>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9e10:	2180      	movs	r1, #128	; 0x80
    9e12:	0409      	lsls	r1, r1, #16
    9e14:	4b0c      	ldr	r3, [pc, #48]	; (9e48 <configure_adc+0x68>)
    9e16:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    9e18:	230f      	movs	r3, #15
    9e1a:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    9e1c:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    9e1e:	7813      	ldrb	r3, [r2, #0]
    9e20:	2102      	movs	r1, #2
    9e22:	430b      	orrs	r3, r1
    9e24:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    9e26:	4b05      	ldr	r3, [pc, #20]	; (9e3c <configure_adc+0x5c>)
    9e28:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    9e2a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    9e2c:	b25b      	sxtb	r3, r3
    9e2e:	2b00      	cmp	r3, #0
    9e30:	dbfb      	blt.n	9e2a <configure_adc+0x4a>
}
    9e32:	b00c      	add	sp, #48	; 0x30
    9e34:	bd10      	pop	{r4, pc}
    9e36:	46c0      	nop			; (mov r8, r8)
    9e38:	000023e5 	.word	0x000023e5
    9e3c:	20000a20 	.word	0x20000a20
    9e40:	42004000 	.word	0x42004000
    9e44:	0000242d 	.word	0x0000242d
    9e48:	e000e100 	.word	0xe000e100

00009e4c <get_moisture>:
{
    9e4c:	b570      	push	{r4, r5, r6, lr}
	configure_port_pins_set(PIN_PA17);
    9e4e:	2011      	movs	r0, #17
    9e50:	4b26      	ldr	r3, [pc, #152]	; (9eec <get_moisture+0xa0>)
    9e52:	4798      	blx	r3
    9e54:	2280      	movs	r2, #128	; 0x80
    9e56:	0292      	lsls	r2, r2, #10
    9e58:	4b25      	ldr	r3, [pc, #148]	; (9ef0 <get_moisture+0xa4>)
    9e5a:	619a      	str	r2, [r3, #24]
	delay_ms(500);
    9e5c:	20fa      	movs	r0, #250	; 0xfa
    9e5e:	0040      	lsls	r0, r0, #1
    9e60:	4b24      	ldr	r3, [pc, #144]	; (9ef4 <get_moisture+0xa8>)
    9e62:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    9e64:	4b24      	ldr	r3, [pc, #144]	; (9ef8 <get_moisture+0xac>)
    9e66:	6819      	ldr	r1, [r3, #0]
    9e68:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    9e6a:	b25b      	sxtb	r3, r3
    9e6c:	2b00      	cmp	r3, #0
    9e6e:	dbfb      	blt.n	9e68 <get_moisture+0x1c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    9e70:	7b0b      	ldrb	r3, [r1, #12]
    9e72:	2202      	movs	r2, #2
    9e74:	4313      	orrs	r3, r2
    9e76:	730b      	strb	r3, [r1, #12]
    9e78:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    9e7a:	b25b      	sxtb	r3, r3
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	dbfb      	blt.n	9e78 <get_moisture+0x2c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    9e80:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    9e82:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    9e84:	2402      	movs	r4, #2
    9e86:	e001      	b.n	9e8c <get_moisture+0x40>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    9e88:	4210      	tst	r0, r2
    9e8a:	d10a      	bne.n	9ea2 <get_moisture+0x56>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    9e8c:	7e0b      	ldrb	r3, [r1, #24]
    9e8e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    9e90:	0002      	movs	r2, r0
    9e92:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    9e94:	421d      	tst	r5, r3
    9e96:	d000      	beq.n	9e9a <get_moisture+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
    9e98:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    9e9a:	421c      	tst	r4, r3
    9e9c:	d0f4      	beq.n	9e88 <get_moisture+0x3c>
		status_flags |= ADC_STATUS_OVERRUN;
    9e9e:	432a      	orrs	r2, r5
    9ea0:	e7f2      	b.n	9e88 <get_moisture+0x3c>
    9ea2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    9ea4:	b25b      	sxtb	r3, r3
    9ea6:	2b00      	cmp	r3, #0
    9ea8:	dbfb      	blt.n	9ea2 <get_moisture+0x56>
	*result = adc_module->RESULT.reg;
    9eaa:	8b48      	ldrh	r0, [r1, #26]
    9eac:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    9eae:	2301      	movs	r3, #1
    9eb0:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    9eb2:	7e0a      	ldrb	r2, [r1, #24]
    9eb4:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    9eb6:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    9eb8:	0754      	lsls	r4, r2, #29
    9eba:	d501      	bpl.n	9ec0 <get_moisture+0x74>
		status_flags |= ADC_STATUS_WINDOW;
    9ebc:	2402      	movs	r4, #2
    9ebe:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    9ec0:	0792      	lsls	r2, r2, #30
    9ec2:	d501      	bpl.n	9ec8 <get_moisture+0x7c>
		status_flags |= ADC_STATUS_OVERRUN;
    9ec4:	2204      	movs	r2, #4
    9ec6:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    9ec8:	075b      	lsls	r3, r3, #29
    9eca:	d501      	bpl.n	9ed0 <get_moisture+0x84>
	adc_module->INTFLAG.reg = int_flags;
    9ecc:	2302      	movs	r3, #2
    9ece:	760b      	strb	r3, [r1, #24]
		port_base->OUTCLR.reg = pin_mask;
    9ed0:	2280      	movs	r2, #128	; 0x80
    9ed2:	0292      	lsls	r2, r2, #10
    9ed4:	4b06      	ldr	r3, [pc, #24]	; (9ef0 <get_moisture+0xa4>)
    9ed6:	615a      	str	r2, [r3, #20]
	float moisture = (adc_result/4095.0f)*(100.0f);
    9ed8:	4b08      	ldr	r3, [pc, #32]	; (9efc <get_moisture+0xb0>)
    9eda:	4798      	blx	r3
    9edc:	4908      	ldr	r1, [pc, #32]	; (9f00 <get_moisture+0xb4>)
    9ede:	4b09      	ldr	r3, [pc, #36]	; (9f04 <get_moisture+0xb8>)
    9ee0:	4798      	blx	r3
    9ee2:	4909      	ldr	r1, [pc, #36]	; (9f08 <get_moisture+0xbc>)
    9ee4:	4b09      	ldr	r3, [pc, #36]	; (9f0c <get_moisture+0xc0>)
    9ee6:	4798      	blx	r3
}
    9ee8:	bd70      	pop	{r4, r5, r6, pc}
    9eea:	46c0      	nop			; (mov r8, r8)
    9eec:	00009d11 	.word	0x00009d11
    9ef0:	41004400 	.word	0x41004400
    9ef4:	00005d05 	.word	0x00005d05
    9ef8:	20000a20 	.word	0x20000a20
    9efc:	0000e925 	.word	0x0000e925
    9f00:	457ff000 	.word	0x457ff000
    9f04:	0000e455 	.word	0x0000e455
    9f08:	42c80000 	.word	0x42c80000
    9f0c:	0000e6e5 	.word	0x0000e6e5

00009f10 <publish_sensors>:

void publish_sensors()
{
    9f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f12:	b095      	sub	sp, #84	; 0x54
	
	double temp = get_temp();
    9f14:	4b2a      	ldr	r3, [pc, #168]	; (9fc0 <publish_sensors+0xb0>)
    9f16:	4798      	blx	r3
    9f18:	9000      	str	r0, [sp, #0]
    9f1a:	9101      	str	r1, [sp, #4]
	double humidity = get_humidity();
    9f1c:	4b29      	ldr	r3, [pc, #164]	; (9fc4 <publish_sensors+0xb4>)
    9f1e:	4798      	blx	r3
    9f20:	9002      	str	r0, [sp, #8]
    9f22:	9103      	str	r1, [sp, #12]
	printf("tsl device id 0x%02x", get_tsl2561_device_id());
    9f24:	4b28      	ldr	r3, [pc, #160]	; (9fc8 <publish_sensors+0xb8>)
    9f26:	4798      	blx	r3
    9f28:	0001      	movs	r1, r0
    9f2a:	4828      	ldr	r0, [pc, #160]	; (9fcc <publish_sensors+0xbc>)
    9f2c:	4b28      	ldr	r3, [pc, #160]	; (9fd0 <publish_sensors+0xc0>)
    9f2e:	4798      	blx	r3
	power_on_tsl2561();
    9f30:	4b28      	ldr	r3, [pc, #160]	; (9fd4 <publish_sensors+0xc4>)
    9f32:	4798      	blx	r3
	int lux = get_lux();
    9f34:	4b28      	ldr	r3, [pc, #160]	; (9fd8 <publish_sensors+0xc8>)
    9f36:	4798      	blx	r3
    9f38:	0004      	movs	r4, r0
	power_off_tsl2561();
    9f3a:	4b28      	ldr	r3, [pc, #160]	; (9fdc <publish_sensors+0xcc>)
    9f3c:	4798      	blx	r3
	float moisture = get_moisture();
    9f3e:	4b28      	ldr	r3, [pc, #160]	; (9fe0 <publish_sensors+0xd0>)
    9f40:	4798      	blx	r3
    9f42:	1c05      	adds	r5, r0, #0
	
	char mqtt_array[MQTT_SEND_BUFFER_SIZE] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    9f44:	2240      	movs	r2, #64	; 0x40
    9f46:	2100      	movs	r1, #0
    9f48:	a804      	add	r0, sp, #16
    9f4a:	4b26      	ldr	r3, [pc, #152]	; (9fe4 <publish_sensors+0xd4>)
    9f4c:	4798      	blx	r3
	sprintf(mqtt_array, "%.2f", moisture);
    9f4e:	1c28      	adds	r0, r5, #0
    9f50:	4b25      	ldr	r3, [pc, #148]	; (9fe8 <publish_sensors+0xd8>)
    9f52:	4798      	blx	r3
    9f54:	0002      	movs	r2, r0
    9f56:	000b      	movs	r3, r1
    9f58:	4924      	ldr	r1, [pc, #144]	; (9fec <publish_sensors+0xdc>)
    9f5a:	a804      	add	r0, sp, #16
    9f5c:	4f24      	ldr	r7, [pc, #144]	; (9ff0 <publish_sensors+0xe0>)
    9f5e:	47b8      	blx	r7
	publish_to_topic(MOISTURE_TOPIC, mqtt_array, strlen(mqtt_array));
    9f60:	a804      	add	r0, sp, #16
    9f62:	4e24      	ldr	r6, [pc, #144]	; (9ff4 <publish_sensors+0xe4>)
    9f64:	47b0      	blx	r6
    9f66:	0002      	movs	r2, r0
    9f68:	a904      	add	r1, sp, #16
    9f6a:	4823      	ldr	r0, [pc, #140]	; (9ff8 <publish_sensors+0xe8>)
    9f6c:	4d23      	ldr	r5, [pc, #140]	; (9ffc <publish_sensors+0xec>)
    9f6e:	47a8      	blx	r5
	sprintf(mqtt_array, "%d", lux);
    9f70:	0022      	movs	r2, r4
    9f72:	4923      	ldr	r1, [pc, #140]	; (a000 <publish_sensors+0xf0>)
    9f74:	a804      	add	r0, sp, #16
    9f76:	47b8      	blx	r7
	publish_to_topic(LUX_TOPIC, mqtt_array, strlen(mqtt_array));
    9f78:	a804      	add	r0, sp, #16
    9f7a:	47b0      	blx	r6
    9f7c:	0002      	movs	r2, r0
    9f7e:	a904      	add	r1, sp, #16
    9f80:	4820      	ldr	r0, [pc, #128]	; (a004 <publish_sensors+0xf4>)
    9f82:	47a8      	blx	r5
	sprintf(mqtt_array, "%2.2f", temp);
    9f84:	4c20      	ldr	r4, [pc, #128]	; (a008 <publish_sensors+0xf8>)
    9f86:	9a00      	ldr	r2, [sp, #0]
    9f88:	9b01      	ldr	r3, [sp, #4]
    9f8a:	0021      	movs	r1, r4
    9f8c:	a804      	add	r0, sp, #16
    9f8e:	47b8      	blx	r7
	publish_to_topic(TEMPERATURE_TOPIC, mqtt_array, strlen(mqtt_array));
    9f90:	a804      	add	r0, sp, #16
    9f92:	47b0      	blx	r6
    9f94:	0002      	movs	r2, r0
    9f96:	a904      	add	r1, sp, #16
    9f98:	481c      	ldr	r0, [pc, #112]	; (a00c <publish_sensors+0xfc>)
    9f9a:	47a8      	blx	r5
	sprintf(mqtt_array, "%2.2f", humidity);
    9f9c:	9a02      	ldr	r2, [sp, #8]
    9f9e:	9b03      	ldr	r3, [sp, #12]
    9fa0:	0021      	movs	r1, r4
    9fa2:	a804      	add	r0, sp, #16
    9fa4:	47b8      	blx	r7
	publish_to_topic(HUMIDITY_TOPIC, mqtt_array, strlen(mqtt_array));
    9fa6:	a804      	add	r0, sp, #16
    9fa8:	47b0      	blx	r6
    9faa:	0002      	movs	r2, r0
    9fac:	a904      	add	r1, sp, #16
    9fae:	4818      	ldr	r0, [pc, #96]	; (a010 <publish_sensors+0x100>)
    9fb0:	47a8      	blx	r5
	publish_to_topic(HEARTBEAT_TOPIC, "beat", sizeof("beat"));
    9fb2:	2205      	movs	r2, #5
    9fb4:	4917      	ldr	r1, [pc, #92]	; (a014 <publish_sensors+0x104>)
    9fb6:	4818      	ldr	r0, [pc, #96]	; (a018 <publish_sensors+0x108>)
    9fb8:	47a8      	blx	r5
}
    9fba:	b015      	add	sp, #84	; 0x54
    9fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fbe:	46c0      	nop			; (mov r8, r8)
    9fc0:	00000555 	.word	0x00000555
    9fc4:	00000525 	.word	0x00000525
    9fc8:	00001869 	.word	0x00001869
    9fcc:	00012978 	.word	0x00012978
    9fd0:	0000bb3d 	.word	0x0000bb3d
    9fd4:	0000183d 	.word	0x0000183d
    9fd8:	000018c9 	.word	0x000018c9
    9fdc:	00001859 	.word	0x00001859
    9fe0:	00009e4d 	.word	0x00009e4d
    9fe4:	0000b0fb 	.word	0x0000b0fb
    9fe8:	00010515 	.word	0x00010515
    9fec:	00012990 	.word	0x00012990
    9ff0:	0000bdfd 	.word	0x0000bdfd
    9ff4:	0000be9f 	.word	0x0000be9f
    9ff8:	00012998 	.word	0x00012998
    9ffc:	000009dd 	.word	0x000009dd
    a000:	000129ac 	.word	0x000129ac
    a004:	000129b0 	.word	0x000129b0
    a008:	000129c0 	.word	0x000129c0
    a00c:	000129c8 	.word	0x000129c8
    a010:	000129dc 	.word	0x000129dc
    a014:	000129ec 	.word	0x000129ec
    a018:	000129f4 	.word	0x000129f4

0000a01c <main>:

int main (void)
{
    a01c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a01e:	b089      	sub	sp, #36	; 0x24
	system_init();
    a020:	4b47      	ldr	r3, [pc, #284]	; (a140 <main+0x124>)
    a022:	4798      	blx	r3
	cpu_irq_enable();
    a024:	2201      	movs	r2, #1
    a026:	4b47      	ldr	r3, [pc, #284]	; (a144 <main+0x128>)
    a028:	701a      	strb	r2, [r3, #0]
    a02a:	f3bf 8f5f 	dmb	sy
    a02e:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_init();
    a030:	4b45      	ldr	r3, [pc, #276]	; (a148 <main+0x12c>)
    a032:	4798      	blx	r3
	configure_usart();
    a034:	4b45      	ldr	r3, [pc, #276]	; (a14c <main+0x130>)
    a036:	4798      	blx	r3
	
	configure_port_pins_set(PIN_PB23);
    a038:	2037      	movs	r0, #55	; 0x37
    a03a:	4b45      	ldr	r3, [pc, #276]	; (a150 <main+0x134>)
    a03c:	4798      	blx	r3
    a03e:	2280      	movs	r2, #128	; 0x80
    a040:	0412      	lsls	r2, r2, #16
    a042:	4b44      	ldr	r3, [pc, #272]	; (a154 <main+0x138>)
    a044:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB23, false);
	
	printf("--- starting Evergreen V%d ---- \r\n", FIRMWARE_VERSION);
    a046:	2100      	movs	r1, #0
    a048:	4843      	ldr	r0, [pc, #268]	; (a158 <main+0x13c>)
    a04a:	4b44      	ldr	r3, [pc, #272]	; (a15c <main+0x140>)
    a04c:	4798      	blx	r3
	
	mqtt_inst_config new_mqtt;
	get_mqtt_config_defaults(&new_mqtt);
    a04e:	a803      	add	r0, sp, #12
    a050:	4b43      	ldr	r3, [pc, #268]	; (a160 <main+0x144>)
    a052:	4798      	blx	r3
	
	int mqtt_result = mqtt_initialize(&new_mqtt);
    a054:	a803      	add	r0, sp, #12
    a056:	4b43      	ldr	r3, [pc, #268]	; (a164 <main+0x148>)
    a058:	4798      	blx	r3
	
	if (WIFI_SUCCESS != mqtt_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
    a05a:	2800      	cmp	r0, #0
    a05c:	d15f      	bne.n	a11e <main+0x102>

	printf("Board initialized.\r\n");
    a05e:	4842      	ldr	r0, [pc, #264]	; (a168 <main+0x14c>)
    a060:	4b42      	ldr	r3, [pc, #264]	; (a16c <main+0x150>)
    a062:	4798      	blx	r3
	uint32_t mqtt_counter = 0;

	/* Connect to router. */
	m2m_wifi_connect(new_mqtt.ssid, strlen(new_mqtt.ssid), new_mqtt.auth, new_mqtt.password, M2M_WIFI_CH_ALL);
    a064:	ad03      	add	r5, sp, #12
    a066:	9c03      	ldr	r4, [sp, #12]
    a068:	0020      	movs	r0, r4
    a06a:	4b41      	ldr	r3, [pc, #260]	; (a170 <main+0x154>)
    a06c:	4798      	blx	r3
    a06e:	68ab      	ldr	r3, [r5, #8]
    a070:	792a      	ldrb	r2, [r5, #4]
    a072:	b2c1      	uxtb	r1, r0
    a074:	20ff      	movs	r0, #255	; 0xff
    a076:	9000      	str	r0, [sp, #0]
    a078:	0020      	movs	r0, r4
    a07a:	4c3e      	ldr	r4, [pc, #248]	; (a174 <main+0x158>)
    a07c:	47a0      	blx	r4

	while (!(wifi_connected)) {
    a07e:	4b3e      	ldr	r3, [pc, #248]	; (a178 <main+0x15c>)
    a080:	681b      	ldr	r3, [r3, #0]
    a082:	2b00      	cmp	r3, #0
    a084:	d106      	bne.n	a094 <main+0x78>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    a086:	4d3d      	ldr	r5, [pc, #244]	; (a17c <main+0x160>)
	while (!(wifi_connected)) {
    a088:	4c3b      	ldr	r4, [pc, #236]	; (a178 <main+0x15c>)
		m2m_wifi_handle_events(NULL);
    a08a:	2000      	movs	r0, #0
    a08c:	47a8      	blx	r5
	while (!(wifi_connected)) {
    a08e:	6823      	ldr	r3, [r4, #0]
    a090:	2b00      	cmp	r3, #0
    a092:	d0fa      	beq.n	a08a <main+0x6e>
		/* Checks the timer timeout. */
		//sw_timer_task(&swt_module_inst);
	}

	while (!(mqtt_connected)) {
    a094:	4b3a      	ldr	r3, [pc, #232]	; (a180 <main+0x164>)
    a096:	681b      	ldr	r3, [r3, #0]
    a098:	2b00      	cmp	r3, #0
    a09a:	d106      	bne.n	a0aa <main+0x8e>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    a09c:	4d37      	ldr	r5, [pc, #220]	; (a17c <main+0x160>)
	while (!(mqtt_connected)) {
    a09e:	4c38      	ldr	r4, [pc, #224]	; (a180 <main+0x164>)
		m2m_wifi_handle_events(NULL);
    a0a0:	2000      	movs	r0, #0
    a0a2:	47a8      	blx	r5
	while (!(mqtt_connected)) {
    a0a4:	6823      	ldr	r3, [r4, #0]
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	d0fa      	beq.n	a0a0 <main+0x84>
		/* Checks the timer timeout. */
		//sw_timer_task(&swt_module_inst);
	}
	
	configure_port_pins_set(PIN_PA21);
    a0aa:	2015      	movs	r0, #21
    a0ac:	4b28      	ldr	r3, [pc, #160]	; (a150 <main+0x134>)
    a0ae:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    a0b0:	2280      	movs	r2, #128	; 0x80
    a0b2:	0392      	lsls	r2, r2, #14
    a0b4:	4b33      	ldr	r3, [pc, #204]	; (a184 <main+0x168>)
    a0b6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA21, 1);
	
	configure_adc(ADC_POSITIVE_INPUT_PIN0);
    a0b8:	2000      	movs	r0, #0
    a0ba:	4b33      	ldr	r3, [pc, #204]	; (a188 <main+0x16c>)
    a0bc:	4798      	blx	r3
	
	configure_i2c_hdc();
    a0be:	4b33      	ldr	r3, [pc, #204]	; (a18c <main+0x170>)
    a0c0:	4798      	blx	r3
	configure_i2c_tsl2561(ADDR_FLOAT);
    a0c2:	2039      	movs	r0, #57	; 0x39
    a0c4:	4b32      	ldr	r3, [pc, #200]	; (a190 <main+0x174>)
    a0c6:	4798      	blx	r3
	printf("tsl manufacturer id: 0x%02x\r\n", get_tsl2561_device_id());
    a0c8:	4b32      	ldr	r3, [pc, #200]	; (a194 <main+0x178>)
    a0ca:	4798      	blx	r3
    a0cc:	0001      	movs	r1, r0
    a0ce:	4832      	ldr	r0, [pc, #200]	; (a198 <main+0x17c>)
    a0d0:	4c22      	ldr	r4, [pc, #136]	; (a15c <main+0x140>)
    a0d2:	47a0      	blx	r4
	set_resolution(FOURTEEN_BIT_RESOLUTION, FOURTEEN_BIT_RESOLUTION);
    a0d4:	2102      	movs	r1, #2
    a0d6:	2002      	movs	r0, #2
    a0d8:	4b30      	ldr	r3, [pc, #192]	; (a19c <main+0x180>)
    a0da:	4798      	blx	r3
	printf("Running as MQTT User: %s\r\n", MQTT_USER);
    a0dc:	4930      	ldr	r1, [pc, #192]	; (a1a0 <main+0x184>)
    a0de:	4831      	ldr	r0, [pc, #196]	; (a1a4 <main+0x188>)
    a0e0:	47a0      	blx	r4
	register_request_topic(LED_TOPIC, '#', &led_request_callback);
    a0e2:	4a31      	ldr	r2, [pc, #196]	; (a1a8 <main+0x18c>)
    a0e4:	2123      	movs	r1, #35	; 0x23
    a0e6:	4831      	ldr	r0, [pc, #196]	; (a1ac <main+0x190>)
    a0e8:	4c31      	ldr	r4, [pc, #196]	; (a1b0 <main+0x194>)
    a0ea:	47a0      	blx	r4
	register_request_topic(RELAY1_TOPIC, '#', &relay_request_callback);
    a0ec:	4d31      	ldr	r5, [pc, #196]	; (a1b4 <main+0x198>)
    a0ee:	002a      	movs	r2, r5
    a0f0:	2123      	movs	r1, #35	; 0x23
    a0f2:	4831      	ldr	r0, [pc, #196]	; (a1b8 <main+0x19c>)
    a0f4:	47a0      	blx	r4
	register_request_topic(RELAY2_TOPIC, '#', &relay_request_callback);
    a0f6:	002a      	movs	r2, r5
    a0f8:	2123      	movs	r1, #35	; 0x23
    a0fa:	4830      	ldr	r0, [pc, #192]	; (a1bc <main+0x1a0>)
    a0fc:	47a0      	blx	r4
	register_request_topic(UPGRADE_TOPIC, '#', &firmware_request_download_callback);
    a0fe:	4a30      	ldr	r2, [pc, #192]	; (a1c0 <main+0x1a4>)
    a100:	2123      	movs	r1, #35	; 0x23
    a102:	4830      	ldr	r0, [pc, #192]	; (a1c4 <main+0x1a8>)
    a104:	47a0      	blx	r4
	register_request_topic(PUMP_TOPIC, '#', &pump_request_callback);
    a106:	4a30      	ldr	r2, [pc, #192]	; (a1c8 <main+0x1ac>)
    a108:	2123      	movs	r1, #35	; 0x23
    a10a:	4830      	ldr	r0, [pc, #192]	; (a1cc <main+0x1b0>)
    a10c:	47a0      	blx	r4
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    a10e:	2000      	movs	r0, #0
    a110:	4b1a      	ldr	r3, [pc, #104]	; (a17c <main+0x160>)
    a112:	4798      	blx	r3
	uint32_t mqtt_counter = 0;
    a114:	2400      	movs	r4, #0
		m2m_wifi_handle_events(NULL);
    a116:	4d19      	ldr	r5, [pc, #100]	; (a17c <main+0x160>)
		/* Checks the timer timeout. */
		//sw_timer_task(&swt_module_inst);

		if ((mqtt_counter >= COUNTER_MAX)) {
			mqtt_counter = 0; //reset sensor counter
			printf("Sending sensor values to Cloud.\r\n");
    a118:	4e2d      	ldr	r6, [pc, #180]	; (a1d0 <main+0x1b4>)
    a11a:	4f14      	ldr	r7, [pc, #80]	; (a16c <main+0x150>)
    a11c:	e008      	b.n	a130 <main+0x114>
	if (WIFI_SUCCESS != mqtt_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
    a11e:	482d      	ldr	r0, [pc, #180]	; (a1d4 <main+0x1b8>)
    a120:	4b12      	ldr	r3, [pc, #72]	; (a16c <main+0x150>)
    a122:	4798      	blx	r3
    a124:	e79b      	b.n	a05e <main+0x42>
			printf("Sending sensor values to Cloud.\r\n");
    a126:	0030      	movs	r0, r6
    a128:	47b8      	blx	r7
			publish_sensors();
    a12a:	4b2b      	ldr	r3, [pc, #172]	; (a1d8 <main+0x1bc>)
    a12c:	4798      	blx	r3
			mqtt_counter = 0; //reset sensor counter
    a12e:	2400      	movs	r4, #0
			//publish_sensor_values();
		}

		mqtt_counter++;
    a130:	3401      	adds	r4, #1
		m2m_wifi_handle_events(NULL);
    a132:	2000      	movs	r0, #0
    a134:	47a8      	blx	r5
		if ((mqtt_counter >= COUNTER_MAX)) {
    a136:	4b29      	ldr	r3, [pc, #164]	; (a1dc <main+0x1c0>)
    a138:	429c      	cmp	r4, r3
    a13a:	d9f9      	bls.n	a130 <main+0x114>
    a13c:	e7f3      	b.n	a126 <main+0x10a>
    a13e:	46c0      	nop			; (mov r8, r8)
    a140:	00009b2d 	.word	0x00009b2d
    a144:	2000000a 	.word	0x2000000a
    a148:	00005c99 	.word	0x00005c99
    a14c:	00000159 	.word	0x00000159
    a150:	00009d11 	.word	0x00009d11
    a154:	41004480 	.word	0x41004480
    a158:	0001285c 	.word	0x0001285c
    a15c:	0000bb3d 	.word	0x0000bb3d
    a160:	00000a15 	.word	0x00000a15
    a164:	00000849 	.word	0x00000849
    a168:	000128a4 	.word	0x000128a4
    a16c:	0000bc59 	.word	0x0000bc59
    a170:	0000be9f 	.word	0x0000be9f
    a174:	00007101 	.word	0x00007101
    a178:	20000200 	.word	0x20000200
    a17c:	00006e65 	.word	0x00006e65
    a180:	200001f8 	.word	0x200001f8
    a184:	41004400 	.word	0x41004400
    a188:	00009de1 	.word	0x00009de1
    a18c:	00000365 	.word	0x00000365
    a190:	000016a1 	.word	0x000016a1
    a194:	00001869 	.word	0x00001869
    a198:	000128b8 	.word	0x000128b8
    a19c:	0000040d 	.word	0x0000040d
    a1a0:	000128fc 	.word	0x000128fc
    a1a4:	000128d8 	.word	0x000128d8
    a1a8:	00009d31 	.word	0x00009d31
    a1ac:	000128f4 	.word	0x000128f4
    a1b0:	00000919 	.word	0x00000919
    a1b4:	00009d9d 	.word	0x00009d9d
    a1b8:	00012904 	.word	0x00012904
    a1bc:	00012918 	.word	0x00012918
    a1c0:	00009c7d 	.word	0x00009c7d
    a1c4:	0001292c 	.word	0x0001292c
    a1c8:	00009d59 	.word	0x00009d59
    a1cc:	00012940 	.word	0x00012940
    a1d0:	00012954 	.word	0x00012954
    a1d4:	00012880 	.word	0x00012880
    a1d8:	00009f11 	.word	0x00009f11
    a1dc:	00009c3f 	.word	0x00009c3f

0000a1e0 <_hwerr_to_stderr>:
    a1e0:	1c03      	adds	r3, r0, #0
    a1e2:	300e      	adds	r0, #14
    a1e4:	b500      	push	{lr}
    a1e6:	280e      	cmp	r0, #14
    a1e8:	d819      	bhi.n	a21e <_hwerr_to_stderr+0x3e>
    a1ea:	f003 ff4b 	bl	e084 <__gnu_thumb1_case_uqi>
    a1ee:	1416      	.short	0x1416
    a1f0:	1b181012 	.word	0x1b181012
    a1f4:	180c0e18 	.word	0x180c0e18
    a1f8:	1d0a0e0e 	.word	0x1d0a0e0e
    a1fc:	08          	.byte	0x08
    a1fd:	00          	.byte	0x00
    a1fe:	2000      	movs	r0, #0
    a200:	e014      	b.n	a22c <_hwerr_to_stderr+0x4c>
    a202:	2070      	movs	r0, #112	; 0x70
    a204:	e011      	b.n	a22a <_hwerr_to_stderr+0x4a>
    a206:	2016      	movs	r0, #22
    a208:	e00f      	b.n	a22a <_hwerr_to_stderr+0x4a>
    a20a:	200c      	movs	r0, #12
    a20c:	e00d      	b.n	a22a <_hwerr_to_stderr+0x4a>
    a20e:	2079      	movs	r0, #121	; 0x79
    a210:	e00b      	b.n	a22a <_hwerr_to_stderr+0x4a>
    a212:	2068      	movs	r0, #104	; 0x68
    a214:	e009      	b.n	a22a <_hwerr_to_stderr+0x4a>
    a216:	200b      	movs	r0, #11
    a218:	e007      	b.n	a22a <_hwerr_to_stderr+0x4a>
    a21a:	2010      	movs	r0, #16
    a21c:	e005      	b.n	a22a <_hwerr_to_stderr+0x4a>
    a21e:	2000      	movs	r0, #0
    a220:	4283      	cmp	r3, r0
    a222:	da03      	bge.n	a22c <_hwerr_to_stderr+0x4c>
    a224:	2005      	movs	r0, #5
    a226:	e000      	b.n	a22a <_hwerr_to_stderr+0x4a>
    a228:	2002      	movs	r0, #2
    a22a:	4240      	negs	r0, r0
    a22c:	bd00      	pop	{pc}
	...

0000a230 <_mqtt_send_wait>:
    a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a232:	1c04      	adds	r4, r0, #0
    a234:	3443      	adds	r4, #67	; 0x43
    a236:	7823      	ldrb	r3, [r4, #0]
    a238:	1c05      	adds	r5, r0, #0
    a23a:	07d8      	lsls	r0, r3, #31
    a23c:	d51c      	bpl.n	a278 <_mqtt_send_wait+0x48>
    a23e:	2604      	movs	r6, #4
    a240:	4333      	orrs	r3, r6
    a242:	7023      	strb	r3, [r4, #0]
    a244:	2002      	movs	r0, #2
    a246:	5628      	ldrsb	r0, [r5, r0]
    a248:	b292      	uxth	r2, r2
    a24a:	2300      	movs	r3, #0
    a24c:	4f0c      	ldr	r7, [pc, #48]	; (a280 <_mqtt_send_wait+0x50>)
    a24e:	47b8      	blx	r7
    a250:	2800      	cmp	r0, #0
    a252:	da05      	bge.n	a260 <_mqtt_send_wait+0x30>
    a254:	7823      	ldrb	r3, [r4, #0]
    a256:	43b3      	bics	r3, r6
    a258:	7023      	strb	r3, [r4, #0]
    a25a:	4b0a      	ldr	r3, [pc, #40]	; (a284 <_mqtt_send_wait+0x54>)
    a25c:	4798      	blx	r3
    a25e:	e00d      	b.n	a27c <_mqtt_send_wait+0x4c>
    a260:	7822      	ldrb	r2, [r4, #0]
    a262:	2314      	movs	r3, #20
    a264:	4013      	ands	r3, r2
    a266:	2000      	movs	r0, #0
    a268:	2b04      	cmp	r3, #4
    a26a:	d107      	bne.n	a27c <_mqtt_send_wait+0x4c>
    a26c:	4b06      	ldr	r3, [pc, #24]	; (a288 <_mqtt_send_wait+0x58>)
    a26e:	4798      	blx	r3
    a270:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    a272:	4b06      	ldr	r3, [pc, #24]	; (a28c <_mqtt_send_wait+0x5c>)
    a274:	4798      	blx	r3
    a276:	e7f3      	b.n	a260 <_mqtt_send_wait+0x30>
    a278:	2001      	movs	r0, #1
    a27a:	4240      	negs	r0, r0
    a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a27e:	46c0      	nop			; (mov r8, r8)
    a280:	00008c05 	.word	0x00008c05
    a284:	0000a1e1 	.word	0x0000a1e1
    a288:	00006e65 	.word	0x00006e65
    a28c:	0000430d 	.word	0x0000430d

0000a290 <mqtt_get_config_defaults>:
    a290:	4b07      	ldr	r3, [pc, #28]	; (a2b0 <mqtt_get_config_defaults+0x20>)
    a292:	2240      	movs	r2, #64	; 0x40
    a294:	8003      	strh	r3, [r0, #0]
    a296:	2396      	movs	r3, #150	; 0x96
    a298:	009b      	lsls	r3, r3, #2
    a29a:	8103      	strh	r3, [r0, #8]
    a29c:	6102      	str	r2, [r0, #16]
    a29e:	2300      	movs	r3, #0
    a2a0:	2220      	movs	r2, #32
    a2a2:	7083      	strb	r3, [r0, #2]
    a2a4:	6043      	str	r3, [r0, #4]
    a2a6:	60c3      	str	r3, [r0, #12]
    a2a8:	6142      	str	r2, [r0, #20]
    a2aa:	7603      	strb	r3, [r0, #24]
    a2ac:	4770      	bx	lr
    a2ae:	46c0      	nop			; (mov r8, r8)
    a2b0:	0000075b 	.word	0x0000075b

0000a2b4 <mqtt_init>:
    a2b4:	b538      	push	{r3, r4, r5, lr}
    a2b6:	1c04      	adds	r4, r0, #0
    a2b8:	1c0d      	adds	r5, r1, #0
    a2ba:	2800      	cmp	r0, #0
    a2bc:	d030      	beq.n	a320 <mqtt_init+0x6c>
    a2be:	2900      	cmp	r1, #0
    a2c0:	d02e      	beq.n	a320 <mqtt_init+0x6c>
    a2c2:	690b      	ldr	r3, [r1, #16]
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d02b      	beq.n	a320 <mqtt_init+0x6c>
    a2c8:	684b      	ldr	r3, [r1, #4]
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	d028      	beq.n	a320 <mqtt_init+0x6c>
    a2ce:	2100      	movs	r1, #0
    a2d0:	2274      	movs	r2, #116	; 0x74
    a2d2:	4b16      	ldr	r3, [pc, #88]	; (a32c <mqtt_init+0x78>)
    a2d4:	4798      	blx	r3
    a2d6:	1c20      	adds	r0, r4, #0
    a2d8:	4b15      	ldr	r3, [pc, #84]	; (a330 <mqtt_init+0x7c>)
    a2da:	3058      	adds	r0, #88	; 0x58
    a2dc:	1c29      	adds	r1, r5, #0
    a2de:	221c      	movs	r2, #28
    a2e0:	4798      	blx	r3
    a2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a2e4:	2b00      	cmp	r3, #0
    a2e6:	d10b      	bne.n	a300 <mqtt_init+0x4c>
    a2e8:	6928      	ldr	r0, [r5, #16]
    a2ea:	4b12      	ldr	r3, [pc, #72]	; (a334 <mqtt_init+0x80>)
    a2ec:	4798      	blx	r3
    a2ee:	6660      	str	r0, [r4, #100]	; 0x64
    a2f0:	2800      	cmp	r0, #0
    a2f2:	d017      	beq.n	a324 <mqtt_init+0x70>
    a2f4:	1c23      	adds	r3, r4, #0
    a2f6:	3343      	adds	r3, #67	; 0x43
    a2f8:	781a      	ldrb	r2, [r3, #0]
    a2fa:	2120      	movs	r1, #32
    a2fc:	430a      	orrs	r2, r1
    a2fe:	701a      	strb	r2, [r3, #0]
    a300:	892a      	ldrh	r2, [r5, #8]
    a302:	23fa      	movs	r3, #250	; 0xfa
    a304:	005b      	lsls	r3, r3, #1
    a306:	4353      	muls	r3, r2
    a308:	6868      	ldr	r0, [r5, #4]
    a30a:	490b      	ldr	r1, [pc, #44]	; (a338 <mqtt_init+0x84>)
    a30c:	1c22      	adds	r2, r4, #0
    a30e:	4d0b      	ldr	r5, [pc, #44]	; (a33c <mqtt_init+0x88>)
    a310:	47a8      	blx	r5
    a312:	1c03      	adds	r3, r0, #0
    a314:	6520      	str	r0, [r4, #80]	; 0x50
    a316:	2000      	movs	r0, #0
    a318:	4283      	cmp	r3, r0
    a31a:	da05      	bge.n	a328 <mqtt_init+0x74>
    a31c:	201c      	movs	r0, #28
    a31e:	e002      	b.n	a326 <mqtt_init+0x72>
    a320:	2016      	movs	r0, #22
    a322:	e000      	b.n	a326 <mqtt_init+0x72>
    a324:	200c      	movs	r0, #12
    a326:	4240      	negs	r0, r0
    a328:	bd38      	pop	{r3, r4, r5, pc}
    a32a:	46c0      	nop			; (mov r8, r8)
    a32c:	0000b0fb 	.word	0x0000b0fb
    a330:	0000b0c5 	.word	0x0000b0c5
    a334:	0000b09d 	.word	0x0000b09d
    a338:	0000ab15 	.word	0x0000ab15
    a33c:	00004289 	.word	0x00004289

0000a340 <mqtt_deinit>:
    a340:	b510      	push	{r4, lr}
    a342:	1e04      	subs	r4, r0, #0
    a344:	d014      	beq.n	a370 <mqtt_deinit+0x30>
    a346:	6e40      	ldr	r0, [r0, #100]	; 0x64
    a348:	2800      	cmp	r0, #0
    a34a:	d008      	beq.n	a35e <mqtt_deinit+0x1e>
    a34c:	1c23      	adds	r3, r4, #0
    a34e:	3343      	adds	r3, #67	; 0x43
    a350:	781b      	ldrb	r3, [r3, #0]
    a352:	069a      	lsls	r2, r3, #26
    a354:	d503      	bpl.n	a35e <mqtt_deinit+0x1e>
    a356:	4b09      	ldr	r3, [pc, #36]	; (a37c <mqtt_deinit+0x3c>)
    a358:	4798      	blx	r3
    a35a:	2300      	movs	r3, #0
    a35c:	6663      	str	r3, [r4, #100]	; 0x64
    a35e:	6d21      	ldr	r1, [r4, #80]	; 0x50
    a360:	2900      	cmp	r1, #0
    a362:	db08      	blt.n	a376 <mqtt_deinit+0x36>
    a364:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    a366:	2800      	cmp	r0, #0
    a368:	d006      	beq.n	a378 <mqtt_deinit+0x38>
    a36a:	4b05      	ldr	r3, [pc, #20]	; (a380 <mqtt_deinit+0x40>)
    a36c:	4798      	blx	r3
    a36e:	e002      	b.n	a376 <mqtt_deinit+0x36>
    a370:	2016      	movs	r0, #22
    a372:	4240      	negs	r0, r0
    a374:	e000      	b.n	a378 <mqtt_deinit+0x38>
    a376:	2000      	movs	r0, #0
    a378:	bd10      	pop	{r4, pc}
    a37a:	46c0      	nop			; (mov r8, r8)
    a37c:	0000b0b1 	.word	0x0000b0b1
    a380:	000042c1 	.word	0x000042c1

0000a384 <mqtt_register_callback>:
    a384:	2800      	cmp	r0, #0
    a386:	d002      	beq.n	a38e <mqtt_register_callback+0xa>
    a388:	6541      	str	r1, [r0, #84]	; 0x54
    a38a:	2000      	movs	r0, #0
    a38c:	e001      	b.n	a392 <mqtt_register_callback+0xe>
    a38e:	2016      	movs	r0, #22
    a390:	4240      	negs	r0, r0
    a392:	4770      	bx	lr

0000a394 <mqtt_unregister_callback>:
    a394:	2800      	cmp	r0, #0
    a396:	d003      	beq.n	a3a0 <mqtt_unregister_callback+0xc>
    a398:	2300      	movs	r3, #0
    a39a:	6543      	str	r3, [r0, #84]	; 0x54
    a39c:	1c18      	adds	r0, r3, #0
    a39e:	e001      	b.n	a3a4 <mqtt_unregister_callback+0x10>
    a3a0:	2016      	movs	r0, #22
    a3a2:	4240      	negs	r0, r0
    a3a4:	4770      	bx	lr
	...

0000a3a8 <mqtt_socket_resolve_handler>:
    a3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3aa:	1c06      	adds	r6, r0, #0
    a3ac:	b085      	sub	sp, #20
    a3ae:	1c0f      	adds	r7, r1, #0
    a3b0:	2400      	movs	r4, #0
    a3b2:	4b0f      	ldr	r3, [pc, #60]	; (a3f0 <mqtt_socket_resolve_handler+0x48>)
    a3b4:	58e5      	ldr	r5, [r4, r3]
    a3b6:	2d00      	cmp	r5, #0
    a3b8:	d015      	beq.n	a3e6 <mqtt_socket_resolve_handler+0x3e>
    a3ba:	1ce9      	adds	r1, r5, #3
    a3bc:	1c30      	adds	r0, r6, #0
    a3be:	4b0d      	ldr	r3, [pc, #52]	; (a3f4 <mqtt_socket_resolve_handler+0x4c>)
    a3c0:	4798      	blx	r3
    a3c2:	2800      	cmp	r0, #0
    a3c4:	d10f      	bne.n	a3e6 <mqtt_socket_resolve_handler+0x3e>
    a3c6:	466a      	mov	r2, sp
    a3c8:	2302      	movs	r3, #2
    a3ca:	8013      	strh	r3, [r2, #0]
    a3cc:	1c2b      	adds	r3, r5, #0
    a3ce:	3358      	adds	r3, #88	; 0x58
    a3d0:	881b      	ldrh	r3, [r3, #0]
    a3d2:	9701      	str	r7, [sp, #4]
    a3d4:	ba5b      	rev16	r3, r3
    a3d6:	8053      	strh	r3, [r2, #2]
    a3d8:	2002      	movs	r0, #2
    a3da:	5628      	ldrsb	r0, [r5, r0]
    a3dc:	4669      	mov	r1, sp
    a3de:	2210      	movs	r2, #16
    a3e0:	4b05      	ldr	r3, [pc, #20]	; (a3f8 <mqtt_socket_resolve_handler+0x50>)
    a3e2:	4798      	blx	r3
    a3e4:	e002      	b.n	a3ec <mqtt_socket_resolve_handler+0x44>
    a3e6:	3404      	adds	r4, #4
    a3e8:	2c1c      	cmp	r4, #28
    a3ea:	d1e2      	bne.n	a3b2 <mqtt_socket_resolve_handler+0xa>
    a3ec:	b005      	add	sp, #20
    a3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3f0:	2000029c 	.word	0x2000029c
    a3f4:	0000be41 	.word	0x0000be41
    a3f8:	00008b75 	.word	0x00008b75

0000a3fc <mqtt_connect>:
    a3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3fe:	1c04      	adds	r4, r0, #0
    a400:	b089      	sub	sp, #36	; 0x24
    a402:	1c0d      	adds	r5, r1, #0
    a404:	2800      	cmp	r0, #0
    a406:	d051      	beq.n	a4ac <mqtt_connect+0xb0>
    a408:	2900      	cmp	r1, #0
    a40a:	d04f      	beq.n	a4ac <mqtt_connect+0xb0>
    a40c:	1c08      	adds	r0, r1, #0
    a40e:	4b39      	ldr	r3, [pc, #228]	; (a4f4 <mqtt_connect+0xf8>)
    a410:	4798      	blx	r3
    a412:	2840      	cmp	r0, #64	; 0x40
    a414:	d84c      	bhi.n	a4b0 <mqtt_connect+0xb4>
    a416:	1c21      	adds	r1, r4, #0
    a418:	3143      	adds	r1, #67	; 0x43
    a41a:	780b      	ldrb	r3, [r1, #0]
    a41c:	9101      	str	r1, [sp, #4]
    a41e:	07db      	lsls	r3, r3, #31
    a420:	0fd9      	lsrs	r1, r3, #31
    a422:	466a      	mov	r2, sp
    a424:	b2ce      	uxtb	r6, r1
    a426:	1ce0      	adds	r0, r4, #3
    a428:	7211      	strb	r1, [r2, #8]
    a42a:	2e00      	cmp	r6, #0
    a42c:	d142      	bne.n	a4b4 <mqtt_connect+0xb8>
    a42e:	2701      	movs	r7, #1
    a430:	1c29      	adds	r1, r5, #0
    a432:	4b31      	ldr	r3, [pc, #196]	; (a4f8 <mqtt_connect+0xfc>)
    a434:	8027      	strh	r7, [r4, #0]
    a436:	4798      	blx	r3
    a438:	9a01      	ldr	r2, [sp, #4]
    a43a:	2002      	movs	r0, #2
    a43c:	7813      	ldrb	r3, [r2, #0]
    a43e:	9901      	ldr	r1, [sp, #4]
    a440:	43bb      	bics	r3, r7
    a442:	4383      	bics	r3, r0
    a444:	22e3      	movs	r2, #227	; 0xe3
    a446:	4013      	ands	r3, r2
    a448:	466a      	mov	r2, sp
    a44a:	700b      	strb	r3, [r1, #0]
    a44c:	7a12      	ldrb	r2, [r2, #8]
    a44e:	1c23      	adds	r3, r4, #0
    a450:	3348      	adds	r3, #72	; 0x48
    a452:	6466      	str	r6, [r4, #68]	; 0x44
    a454:	701a      	strb	r2, [r3, #0]
    a456:	7c9a      	ldrb	r2, [r3, #18]
    a458:	805e      	strh	r6, [r3, #2]
    a45a:	1e53      	subs	r3, r2, #1
    a45c:	419a      	sbcs	r2, r3
    a45e:	b2d2      	uxtb	r2, r2
    a460:	1c39      	adds	r1, r7, #0
    a462:	4b26      	ldr	r3, [pc, #152]	; (a4fc <mqtt_connect+0x100>)
    a464:	4798      	blx	r3
    a466:	70a0      	strb	r0, [r4, #2]
    a468:	2800      	cmp	r0, #0
    a46a:	db25      	blt.n	a4b8 <mqtt_connect+0xbc>
    a46c:	4b24      	ldr	r3, [pc, #144]	; (a500 <mqtt_connect+0x104>)
    a46e:	0080      	lsls	r0, r0, #2
    a470:	50c4      	str	r4, [r0, r3]
    a472:	1c2b      	adds	r3, r5, #0
    a474:	781f      	ldrb	r7, [r3, #0]
    a476:	2f00      	cmp	r7, #0
    a478:	d026      	beq.n	a4c8 <mqtt_connect+0xcc>
    a47a:	2220      	movs	r2, #32
    a47c:	1c39      	adds	r1, r7, #0
    a47e:	4391      	bics	r1, r2
    a480:	1c0a      	adds	r2, r1, #0
    a482:	3a41      	subs	r2, #65	; 0x41
    a484:	b2d2      	uxtb	r2, r2
    a486:	3301      	adds	r3, #1
    a488:	2a05      	cmp	r2, #5
    a48a:	d90d      	bls.n	a4a8 <mqtt_connect+0xac>
    a48c:	2f3a      	cmp	r7, #58	; 0x3a
    a48e:	d00b      	beq.n	a4a8 <mqtt_connect+0xac>
    a490:	2f2f      	cmp	r7, #47	; 0x2f
    a492:	d009      	beq.n	a4a8 <mqtt_connect+0xac>
    a494:	2f2e      	cmp	r7, #46	; 0x2e
    a496:	d102      	bne.n	a49e <mqtt_connect+0xa2>
    a498:	2e00      	cmp	r6, #0
    a49a:	d0eb      	beq.n	a474 <mqtt_connect+0x78>
    a49c:	e00f      	b.n	a4be <mqtt_connect+0xc2>
    a49e:	2230      	movs	r2, #48	; 0x30
    a4a0:	4017      	ands	r7, r2
    a4a2:	4297      	cmp	r7, r2
    a4a4:	d0e6      	beq.n	a474 <mqtt_connect+0x78>
    a4a6:	e00a      	b.n	a4be <mqtt_connect+0xc2>
    a4a8:	2601      	movs	r6, #1
    a4aa:	e7e3      	b.n	a474 <mqtt_connect+0x78>
    a4ac:	2016      	movs	r0, #22
    a4ae:	e004      	b.n	a4ba <mqtt_connect+0xbe>
    a4b0:	205b      	movs	r0, #91	; 0x5b
    a4b2:	e002      	b.n	a4ba <mqtt_connect+0xbe>
    a4b4:	2078      	movs	r0, #120	; 0x78
    a4b6:	e000      	b.n	a4ba <mqtt_connect+0xbe>
    a4b8:	201c      	movs	r0, #28
    a4ba:	4240      	negs	r0, r0
    a4bc:	e017      	b.n	a4ee <mqtt_connect+0xf2>
    a4be:	1c28      	adds	r0, r5, #0
    a4c0:	4b10      	ldr	r3, [pc, #64]	; (a504 <mqtt_connect+0x108>)
    a4c2:	4798      	blx	r3
    a4c4:	2000      	movs	r0, #0
    a4c6:	e012      	b.n	a4ee <mqtt_connect+0xf2>
    a4c8:	466a      	mov	r2, sp
    a4ca:	2302      	movs	r3, #2
    a4cc:	8213      	strh	r3, [r2, #16]
    a4ce:	1c23      	adds	r3, r4, #0
    a4d0:	3358      	adds	r3, #88	; 0x58
    a4d2:	881b      	ldrh	r3, [r3, #0]
    a4d4:	1c28      	adds	r0, r5, #0
    a4d6:	ba5b      	rev16	r3, r3
    a4d8:	8253      	strh	r3, [r2, #18]
    a4da:	4b0b      	ldr	r3, [pc, #44]	; (a508 <mqtt_connect+0x10c>)
    a4dc:	4798      	blx	r3
    a4de:	9005      	str	r0, [sp, #20]
    a4e0:	2002      	movs	r0, #2
    a4e2:	5620      	ldrsb	r0, [r4, r0]
    a4e4:	a904      	add	r1, sp, #16
    a4e6:	2210      	movs	r2, #16
    a4e8:	4b08      	ldr	r3, [pc, #32]	; (a50c <mqtt_connect+0x110>)
    a4ea:	4798      	blx	r3
    a4ec:	1c38      	adds	r0, r7, #0
    a4ee:	b009      	add	sp, #36	; 0x24
    a4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4f2:	46c0      	nop			; (mov r8, r8)
    a4f4:	0000be9f 	.word	0x0000be9f
    a4f8:	0000be55 	.word	0x0000be55
    a4fc:	000089f1 	.word	0x000089f1
    a500:	2000029c 	.word	0x2000029c
    a504:	00008e39 	.word	0x00008e39
    a508:	00008dcd 	.word	0x00008dcd
    a50c:	00008b75 	.word	0x00008b75

0000a510 <mqtt_connect_broker>:
    a510:	b5f0      	push	{r4, r5, r6, r7, lr}
    a512:	b095      	sub	sp, #84	; 0x54
    a514:	af02      	add	r7, sp, #8
    a516:	617b      	str	r3, [r7, #20]
    a518:	1c3b      	adds	r3, r7, #0
    a51a:	3370      	adds	r3, #112	; 0x70
    a51c:	781b      	ldrb	r3, [r3, #0]
    a51e:	1c05      	adds	r5, r0, #0
    a520:	60fb      	str	r3, [r7, #12]
    a522:	1c3b      	adds	r3, r7, #0
    a524:	3374      	adds	r3, #116	; 0x74
    a526:	781b      	ldrb	r3, [r3, #0]
    a528:	6139      	str	r1, [r7, #16]
    a52a:	61fa      	str	r2, [r7, #28]
    a52c:	60bb      	str	r3, [r7, #8]
    a52e:	2800      	cmp	r0, #0
    a530:	d101      	bne.n	a536 <mqtt_connect_broker+0x26>
    a532:	2016      	movs	r0, #22
    a534:	e129      	b.n	a78a <mqtt_connect_broker+0x27a>
    a536:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a538:	4668      	mov	r0, sp
    a53a:	3307      	adds	r3, #7
    a53c:	08db      	lsrs	r3, r3, #3
    a53e:	00db      	lsls	r3, r3, #3
    a540:	1ac0      	subs	r0, r0, r3
    a542:	4685      	mov	sp, r0
    a544:	ac02      	add	r4, sp, #8
    a546:	607c      	str	r4, [r7, #4]
    a548:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    a54a:	2c00      	cmp	r4, #0
    a54c:	d0f1      	beq.n	a532 <mqtt_connect_broker+0x22>
    a54e:	1c2b      	adds	r3, r5, #0
    a550:	3343      	adds	r3, #67	; 0x43
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	07d8      	lsls	r0, r3, #31
    a556:	d400      	bmi.n	a55a <mqtt_connect_broker+0x4a>
    a558:	e112      	b.n	a780 <mqtt_connect_broker+0x270>
    a55a:	079a      	lsls	r2, r3, #30
    a55c:	d500      	bpl.n	a560 <mqtt_connect_broker+0x50>
    a55e:	e111      	b.n	a784 <mqtt_connect_broker+0x274>
    a560:	071c      	lsls	r4, r3, #28
    a562:	d40b      	bmi.n	a57c <mqtt_connect_broker+0x6c>
    a564:	4e8b      	ldr	r6, [pc, #556]	; (a794 <mqtt_connect_broker+0x284>)
    a566:	6e38      	ldr	r0, [r7, #96]	; 0x60
    a568:	47b0      	blx	r6
    a56a:	1c03      	adds	r3, r0, #0
    a56c:	61b8      	str	r0, [r7, #24]
    a56e:	69f8      	ldr	r0, [r7, #28]
    a570:	330e      	adds	r3, #14
    a572:	1c34      	adds	r4, r6, #0
    a574:	2800      	cmp	r0, #0
    a576:	d113      	bne.n	a5a0 <mqtt_connect_broker+0x90>
    a578:	1c1e      	adds	r6, r3, #0
    a57a:	e01d      	b.n	a5b8 <mqtt_connect_broker+0xa8>
    a57c:	1c2b      	adds	r3, r5, #0
    a57e:	3370      	adds	r3, #112	; 0x70
    a580:	781b      	ldrb	r3, [r3, #0]
    a582:	2b00      	cmp	r3, #0
    a584:	d000      	beq.n	a588 <mqtt_connect_broker+0x78>
    a586:	e0ff      	b.n	a788 <mqtt_connect_broker+0x278>
    a588:	1c2b      	adds	r3, r5, #0
    a58a:	3343      	adds	r3, #67	; 0x43
    a58c:	781b      	ldrb	r3, [r3, #0]
    a58e:	071a      	lsls	r2, r3, #28
    a590:	d5e8      	bpl.n	a564 <mqtt_connect_broker+0x54>
    a592:	4b81      	ldr	r3, [pc, #516]	; (a798 <mqtt_connect_broker+0x288>)
    a594:	2000      	movs	r0, #0
    a596:	4798      	blx	r3
    a598:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    a59a:	4b80      	ldr	r3, [pc, #512]	; (a79c <mqtt_connect_broker+0x28c>)
    a59c:	4798      	blx	r3
    a59e:	e7f3      	b.n	a588 <mqtt_connect_broker+0x78>
    a5a0:	69f8      	ldr	r0, [r7, #28]
    a5a2:	47b0      	blx	r6
    a5a4:	69be      	ldr	r6, [r7, #24]
    a5a6:	697b      	ldr	r3, [r7, #20]
    a5a8:	3610      	adds	r6, #16
    a5aa:	1836      	adds	r6, r6, r0
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d003      	beq.n	a5b8 <mqtt_connect_broker+0xa8>
    a5b0:	1c18      	adds	r0, r3, #0
    a5b2:	47a0      	blx	r4
    a5b4:	3602      	adds	r6, #2
    a5b6:	1836      	adds	r6, r6, r0
    a5b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
    a5ba:	2800      	cmp	r0, #0
    a5bc:	d007      	beq.n	a5ce <mqtt_connect_broker+0xbe>
    a5be:	47a0      	blx	r4
    a5c0:	3602      	adds	r6, #2
    a5c2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    a5c4:	1830      	adds	r0, r6, r0
    a5c6:	1906      	adds	r6, r0, r4
    a5c8:	2c00      	cmp	r4, #0
    a5ca:	d100      	bne.n	a5ce <mqtt_connect_broker+0xbe>
    a5cc:	1c06      	adds	r6, r0, #0
    a5ce:	69fc      	ldr	r4, [r7, #28]
    a5d0:	2c00      	cmp	r4, #0
    a5d2:	d006      	beq.n	a5e2 <mqtt_connect_broker+0xd2>
    a5d4:	24c0      	movs	r4, #192	; 0xc0
    a5d6:	61bc      	str	r4, [r7, #24]
    a5d8:	697c      	ldr	r4, [r7, #20]
    a5da:	2c00      	cmp	r4, #0
    a5dc:	d103      	bne.n	a5e6 <mqtt_connect_broker+0xd6>
    a5de:	2480      	movs	r4, #128	; 0x80
    a5e0:	e000      	b.n	a5e4 <mqtt_connect_broker+0xd4>
    a5e2:	69fc      	ldr	r4, [r7, #28]
    a5e4:	61bc      	str	r4, [r7, #24]
    a5e6:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    a5e8:	2c00      	cmp	r4, #0
    a5ea:	d00f      	beq.n	a60c <mqtt_connect_broker+0xfc>
    a5ec:	68bc      	ldr	r4, [r7, #8]
    a5ee:	2c00      	cmp	r4, #0
    a5f0:	d003      	beq.n	a5fa <mqtt_connect_broker+0xea>
    a5f2:	69bc      	ldr	r4, [r7, #24]
    a5f4:	2320      	movs	r3, #32
    a5f6:	431c      	orrs	r4, r3
    a5f8:	61bc      	str	r4, [r7, #24]
    a5fa:	68fc      	ldr	r4, [r7, #12]
    a5fc:	2303      	movs	r3, #3
    a5fe:	4023      	ands	r3, r4
    a600:	00db      	lsls	r3, r3, #3
    a602:	69bc      	ldr	r4, [r7, #24]
    a604:	2204      	movs	r2, #4
    a606:	4313      	orrs	r3, r2
    a608:	431c      	orrs	r4, r3
    a60a:	61bc      	str	r4, [r7, #24]
    a60c:	693c      	ldr	r4, [r7, #16]
    a60e:	2c00      	cmp	r4, #0
    a610:	d003      	beq.n	a61a <mqtt_connect_broker+0x10a>
    a612:	69bc      	ldr	r4, [r7, #24]
    a614:	2302      	movs	r3, #2
    a616:	431c      	orrs	r4, r3
    a618:	61bc      	str	r4, [r7, #24]
    a61a:	1c2b      	adds	r3, r5, #0
    a61c:	3343      	adds	r3, #67	; 0x43
    a61e:	781a      	ldrb	r2, [r3, #0]
    a620:	2108      	movs	r1, #8
    a622:	430a      	orrs	r2, r1
    a624:	701a      	strb	r2, [r3, #0]
    a626:	1c38      	adds	r0, r7, #0
    a628:	9500      	str	r5, [sp, #0]
    a62a:	3020      	adds	r0, #32
    a62c:	6879      	ldr	r1, [r7, #4]
    a62e:	4b5c      	ldr	r3, [pc, #368]	; (a7a0 <mqtt_connect_broker+0x290>)
    a630:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    a632:	4c5c      	ldr	r4, [pc, #368]	; (a7a4 <mqtt_connect_broker+0x294>)
    a634:	47a0      	blx	r4
    a636:	1c38      	adds	r0, r7, #0
    a638:	3020      	adds	r0, #32
    a63a:	2110      	movs	r1, #16
    a63c:	4b5a      	ldr	r3, [pc, #360]	; (a7a8 <mqtt_connect_broker+0x298>)
    a63e:	4798      	blx	r3
    a640:	2e80      	cmp	r6, #128	; 0x80
    a642:	dd09      	ble.n	a658 <mqtt_connect_broker+0x148>
    a644:	2180      	movs	r1, #128	; 0x80
    a646:	4249      	negs	r1, r1
    a648:	4331      	orrs	r1, r6
    a64a:	1c38      	adds	r0, r7, #0
    a64c:	b249      	sxtb	r1, r1
    a64e:	3020      	adds	r0, #32
    a650:	4c55      	ldr	r4, [pc, #340]	; (a7a8 <mqtt_connect_broker+0x298>)
    a652:	47a0      	blx	r4
    a654:	11f6      	asrs	r6, r6, #7
    a656:	e7f3      	b.n	a640 <mqtt_connect_broker+0x130>
    a658:	4b54      	ldr	r3, [pc, #336]	; (a7ac <mqtt_connect_broker+0x29c>)
    a65a:	401e      	ands	r6, r3
    a65c:	d504      	bpl.n	a668 <mqtt_connect_broker+0x158>
    a65e:	2380      	movs	r3, #128	; 0x80
    a660:	3e01      	subs	r6, #1
    a662:	425b      	negs	r3, r3
    a664:	431e      	orrs	r6, r3
    a666:	3601      	adds	r6, #1
    a668:	1c38      	adds	r0, r7, #0
    a66a:	b271      	sxtb	r1, r6
    a66c:	3020      	adds	r0, #32
    a66e:	4c4e      	ldr	r4, [pc, #312]	; (a7a8 <mqtt_connect_broker+0x298>)
    a670:	47a0      	blx	r4
    a672:	1c38      	adds	r0, r7, #0
    a674:	4c4e      	ldr	r4, [pc, #312]	; (a7b0 <mqtt_connect_broker+0x2a0>)
    a676:	3020      	adds	r0, #32
    a678:	2106      	movs	r1, #6
    a67a:	47a0      	blx	r4
    a67c:	1c38      	adds	r0, r7, #0
    a67e:	4b4d      	ldr	r3, [pc, #308]	; (a7b4 <mqtt_connect_broker+0x2a4>)
    a680:	3020      	adds	r0, #32
    a682:	494d      	ldr	r1, [pc, #308]	; (a7b8 <mqtt_connect_broker+0x2a8>)
    a684:	2206      	movs	r2, #6
    a686:	4798      	blx	r3
    a688:	1c38      	adds	r0, r7, #0
    a68a:	3020      	adds	r0, #32
    a68c:	2103      	movs	r1, #3
    a68e:	4a46      	ldr	r2, [pc, #280]	; (a7a8 <mqtt_connect_broker+0x298>)
    a690:	4790      	blx	r2
    a692:	69bb      	ldr	r3, [r7, #24]
    a694:	1c38      	adds	r0, r7, #0
    a696:	4a44      	ldr	r2, [pc, #272]	; (a7a8 <mqtt_connect_broker+0x298>)
    a698:	b259      	sxtb	r1, r3
    a69a:	3020      	adds	r0, #32
    a69c:	4790      	blx	r2
    a69e:	1c2b      	adds	r3, r5, #0
    a6a0:	3360      	adds	r3, #96	; 0x60
    a6a2:	2000      	movs	r0, #0
    a6a4:	5e19      	ldrsh	r1, [r3, r0]
    a6a6:	1c38      	adds	r0, r7, #0
    a6a8:	3020      	adds	r0, #32
    a6aa:	47a0      	blx	r4
    a6ac:	4e39      	ldr	r6, [pc, #228]	; (a794 <mqtt_connect_broker+0x284>)
    a6ae:	6e38      	ldr	r0, [r7, #96]	; 0x60
    a6b0:	47b0      	blx	r6
    a6b2:	b201      	sxth	r1, r0
    a6b4:	1c38      	adds	r0, r7, #0
    a6b6:	3020      	adds	r0, #32
    a6b8:	47a0      	blx	r4
    a6ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
    a6bc:	47b0      	blx	r6
    a6be:	1c02      	adds	r2, r0, #0
    a6c0:	1c38      	adds	r0, r7, #0
    a6c2:	3020      	adds	r0, #32
    a6c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
    a6c6:	4b3b      	ldr	r3, [pc, #236]	; (a7b4 <mqtt_connect_broker+0x2a4>)
    a6c8:	4798      	blx	r3
    a6ca:	6e78      	ldr	r0, [r7, #100]	; 0x64
    a6cc:	2800      	cmp	r0, #0
    a6ce:	d015      	beq.n	a6fc <mqtt_connect_broker+0x1ec>
    a6d0:	47b0      	blx	r6
    a6d2:	b201      	sxth	r1, r0
    a6d4:	1c38      	adds	r0, r7, #0
    a6d6:	3020      	adds	r0, #32
    a6d8:	47a0      	blx	r4
    a6da:	6e78      	ldr	r0, [r7, #100]	; 0x64
    a6dc:	47b0      	blx	r6
    a6de:	1c02      	adds	r2, r0, #0
    a6e0:	1c38      	adds	r0, r7, #0
    a6e2:	4c34      	ldr	r4, [pc, #208]	; (a7b4 <mqtt_connect_broker+0x2a4>)
    a6e4:	3020      	adds	r0, #32
    a6e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
    a6e8:	47a0      	blx	r4
    a6ea:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    a6ec:	2c00      	cmp	r4, #0
    a6ee:	d005      	beq.n	a6fc <mqtt_connect_broker+0x1ec>
    a6f0:	1c38      	adds	r0, r7, #0
    a6f2:	1c21      	adds	r1, r4, #0
    a6f4:	3020      	adds	r0, #32
    a6f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    a6f8:	4c2e      	ldr	r4, [pc, #184]	; (a7b4 <mqtt_connect_broker+0x2a4>)
    a6fa:	47a0      	blx	r4
    a6fc:	69fc      	ldr	r4, [r7, #28]
    a6fe:	2c00      	cmp	r4, #0
    a700:	d01f      	beq.n	a742 <mqtt_connect_broker+0x232>
    a702:	4e24      	ldr	r6, [pc, #144]	; (a794 <mqtt_connect_broker+0x284>)
    a704:	1c20      	adds	r0, r4, #0
    a706:	47b0      	blx	r6
    a708:	b201      	sxth	r1, r0
    a70a:	1c38      	adds	r0, r7, #0
    a70c:	3020      	adds	r0, #32
    a70e:	4c28      	ldr	r4, [pc, #160]	; (a7b0 <mqtt_connect_broker+0x2a0>)
    a710:	47a0      	blx	r4
    a712:	69f8      	ldr	r0, [r7, #28]
    a714:	47b0      	blx	r6
    a716:	1c02      	adds	r2, r0, #0
    a718:	1c38      	adds	r0, r7, #0
    a71a:	3020      	adds	r0, #32
    a71c:	69f9      	ldr	r1, [r7, #28]
    a71e:	4c25      	ldr	r4, [pc, #148]	; (a7b4 <mqtt_connect_broker+0x2a4>)
    a720:	47a0      	blx	r4
    a722:	6978      	ldr	r0, [r7, #20]
    a724:	2800      	cmp	r0, #0
    a726:	d00c      	beq.n	a742 <mqtt_connect_broker+0x232>
    a728:	47b0      	blx	r6
    a72a:	b201      	sxth	r1, r0
    a72c:	1c38      	adds	r0, r7, #0
    a72e:	4a20      	ldr	r2, [pc, #128]	; (a7b0 <mqtt_connect_broker+0x2a0>)
    a730:	3020      	adds	r0, #32
    a732:	4790      	blx	r2
    a734:	6978      	ldr	r0, [r7, #20]
    a736:	47b0      	blx	r6
    a738:	1c02      	adds	r2, r0, #0
    a73a:	1c38      	adds	r0, r7, #0
    a73c:	3020      	adds	r0, #32
    a73e:	6979      	ldr	r1, [r7, #20]
    a740:	47a0      	blx	r4
    a742:	1c38      	adds	r0, r7, #0
    a744:	1c2c      	adds	r4, r5, #0
    a746:	3020      	adds	r0, #32
    a748:	4b1c      	ldr	r3, [pc, #112]	; (a7bc <mqtt_connect_broker+0x2ac>)
    a74a:	3443      	adds	r4, #67	; 0x43
    a74c:	4798      	blx	r3
    a74e:	7821      	ldrb	r1, [r4, #0]
    a750:	0789      	lsls	r1, r1, #30
    a752:	0fc9      	lsrs	r1, r1, #31
    a754:	2901      	cmp	r1, #1
    a756:	d10b      	bne.n	a770 <mqtt_connect_broker+0x260>
    a758:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    a75a:	2a00      	cmp	r2, #0
    a75c:	d108      	bne.n	a770 <mqtt_connect_broker+0x260>
    a75e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    a760:	2b00      	cmp	r3, #0
    a762:	d005      	beq.n	a770 <mqtt_connect_broker+0x260>
    a764:	2034      	movs	r0, #52	; 0x34
    a766:	55c2      	strb	r2, [r0, r7]
    a768:	1c3a      	adds	r2, r7, #0
    a76a:	1c28      	adds	r0, r5, #0
    a76c:	3234      	adds	r2, #52	; 0x34
    a76e:	4798      	blx	r3
    a770:	7823      	ldrb	r3, [r4, #0]
    a772:	2202      	movs	r2, #2
    a774:	4313      	orrs	r3, r2
    a776:	2208      	movs	r2, #8
    a778:	4393      	bics	r3, r2
    a77a:	7023      	strb	r3, [r4, #0]
    a77c:	2000      	movs	r0, #0
    a77e:	e005      	b.n	a78c <mqtt_connect_broker+0x27c>
    a780:	2080      	movs	r0, #128	; 0x80
    a782:	e002      	b.n	a78a <mqtt_connect_broker+0x27a>
    a784:	2078      	movs	r0, #120	; 0x78
    a786:	e000      	b.n	a78a <mqtt_connect_broker+0x27a>
    a788:	200b      	movs	r0, #11
    a78a:	4240      	negs	r0, r0
    a78c:	46bd      	mov	sp, r7
    a78e:	b013      	add	sp, #76	; 0x4c
    a790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a792:	46c0      	nop			; (mov r8, r8)
    a794:	0000be9f 	.word	0x0000be9f
    a798:	00006e65 	.word	0x00006e65
    a79c:	0000430d 	.word	0x0000430d
    a7a0:	0000a231 	.word	0x0000a231
    a7a4:	0000411d 	.word	0x0000411d
    a7a8:	00004149 	.word	0x00004149
    a7ac:	8000007f 	.word	0x8000007f
    a7b0:	00004171 	.word	0x00004171
    a7b4:	00004189 	.word	0x00004189
    a7b8:	00012a0c 	.word	0x00012a0c
    a7bc:	0000412d 	.word	0x0000412d

0000a7c0 <mqtt_publish>:
    a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7c2:	b093      	sub	sp, #76	; 0x4c
    a7c4:	af02      	add	r7, sp, #8
    a7c6:	60fb      	str	r3, [r7, #12]
    a7c8:	1c3b      	adds	r3, r7, #0
    a7ca:	3358      	adds	r3, #88	; 0x58
    a7cc:	781b      	ldrb	r3, [r3, #0]
    a7ce:	1c04      	adds	r4, r0, #0
    a7d0:	613b      	str	r3, [r7, #16]
    a7d2:	1c3b      	adds	r3, r7, #0
    a7d4:	335c      	adds	r3, #92	; 0x5c
    a7d6:	781b      	ldrb	r3, [r3, #0]
    a7d8:	6179      	str	r1, [r7, #20]
    a7da:	60ba      	str	r2, [r7, #8]
    a7dc:	607b      	str	r3, [r7, #4]
    a7de:	2800      	cmp	r0, #0
    a7e0:	d101      	bne.n	a7e6 <mqtt_publish+0x26>
    a7e2:	2516      	movs	r5, #22
    a7e4:	e0a7      	b.n	a936 <mqtt_publish+0x176>
    a7e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a7e8:	466a      	mov	r2, sp
    a7ea:	3307      	adds	r3, #7
    a7ec:	08db      	lsrs	r3, r3, #3
    a7ee:	00db      	lsls	r3, r3, #3
    a7f0:	1ad2      	subs	r2, r2, r3
    a7f2:	697b      	ldr	r3, [r7, #20]
    a7f4:	4695      	mov	sp, r2
    a7f6:	ae02      	add	r6, sp, #8
    a7f8:	2b00      	cmp	r3, #0
    a7fa:	d0f2      	beq.n	a7e2 <mqtt_publish+0x22>
    a7fc:	693a      	ldr	r2, [r7, #16]
    a7fe:	2a02      	cmp	r2, #2
    a800:	d8ef      	bhi.n	a7e2 <mqtt_publish+0x22>
    a802:	1c05      	adds	r5, r0, #0
    a804:	3543      	adds	r5, #67	; 0x43
    a806:	782b      	ldrb	r3, [r5, #0]
    a808:	079a      	lsls	r2, r3, #30
    a80a:	d400      	bmi.n	a80e <mqtt_publish+0x4e>
    a80c:	e090      	b.n	a930 <mqtt_publish+0x170>
    a80e:	071a      	lsls	r2, r3, #28
    a810:	d40a      	bmi.n	a828 <mqtt_publish+0x68>
    a812:	4b4b      	ldr	r3, [pc, #300]	; (a940 <mqtt_publish+0x180>)
    a814:	6978      	ldr	r0, [r7, #20]
    a816:	4798      	blx	r3
    a818:	68fd      	ldr	r5, [r7, #12]
    a81a:	693b      	ldr	r3, [r7, #16]
    a81c:	3502      	adds	r5, #2
    a81e:	182d      	adds	r5, r5, r0
    a820:	2b00      	cmp	r3, #0
    a822:	d011      	beq.n	a848 <mqtt_publish+0x88>
    a824:	3502      	adds	r5, #2
    a826:	e00f      	b.n	a848 <mqtt_publish+0x88>
    a828:	1c03      	adds	r3, r0, #0
    a82a:	3370      	adds	r3, #112	; 0x70
    a82c:	781b      	ldrb	r3, [r3, #0]
    a82e:	2b00      	cmp	r3, #0
    a830:	d000      	beq.n	a834 <mqtt_publish+0x74>
    a832:	e07f      	b.n	a934 <mqtt_publish+0x174>
    a834:	782b      	ldrb	r3, [r5, #0]
    a836:	071a      	lsls	r2, r3, #28
    a838:	d5eb      	bpl.n	a812 <mqtt_publish+0x52>
    a83a:	4b42      	ldr	r3, [pc, #264]	; (a944 <mqtt_publish+0x184>)
    a83c:	2000      	movs	r0, #0
    a83e:	4798      	blx	r3
    a840:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    a842:	4b41      	ldr	r3, [pc, #260]	; (a948 <mqtt_publish+0x188>)
    a844:	4798      	blx	r3
    a846:	e7f5      	b.n	a834 <mqtt_publish+0x74>
    a848:	1c23      	adds	r3, r4, #0
    a84a:	3343      	adds	r3, #67	; 0x43
    a84c:	781a      	ldrb	r2, [r3, #0]
    a84e:	2108      	movs	r1, #8
    a850:	430a      	orrs	r2, r1
    a852:	701a      	strb	r2, [r3, #0]
    a854:	1c38      	adds	r0, r7, #0
    a856:	9400      	str	r4, [sp, #0]
    a858:	1c31      	adds	r1, r6, #0
    a85a:	302c      	adds	r0, #44	; 0x2c
    a85c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    a85e:	4b3b      	ldr	r3, [pc, #236]	; (a94c <mqtt_publish+0x18c>)
    a860:	4e3b      	ldr	r6, [pc, #236]	; (a950 <mqtt_publish+0x190>)
    a862:	47b0      	blx	r6
    a864:	687b      	ldr	r3, [r7, #4]
    a866:	2101      	movs	r1, #1
    a868:	4019      	ands	r1, r3
    a86a:	2330      	movs	r3, #48	; 0x30
    a86c:	4319      	orrs	r1, r3
    a86e:	693b      	ldr	r3, [r7, #16]
    a870:	1c38      	adds	r0, r7, #0
    a872:	005a      	lsls	r2, r3, #1
    a874:	2306      	movs	r3, #6
    a876:	4013      	ands	r3, r2
    a878:	4319      	orrs	r1, r3
    a87a:	302c      	adds	r0, #44	; 0x2c
    a87c:	4b35      	ldr	r3, [pc, #212]	; (a954 <mqtt_publish+0x194>)
    a87e:	4798      	blx	r3
    a880:	4b34      	ldr	r3, [pc, #208]	; (a954 <mqtt_publish+0x194>)
    a882:	2d80      	cmp	r5, #128	; 0x80
    a884:	dd08      	ble.n	a898 <mqtt_publish+0xd8>
    a886:	2180      	movs	r1, #128	; 0x80
    a888:	4249      	negs	r1, r1
    a88a:	4329      	orrs	r1, r5
    a88c:	1c38      	adds	r0, r7, #0
    a88e:	b249      	sxtb	r1, r1
    a890:	302c      	adds	r0, #44	; 0x2c
    a892:	4798      	blx	r3
    a894:	11ed      	asrs	r5, r5, #7
    a896:	e7f3      	b.n	a880 <mqtt_publish+0xc0>
    a898:	4a2f      	ldr	r2, [pc, #188]	; (a958 <mqtt_publish+0x198>)
    a89a:	4015      	ands	r5, r2
    a89c:	d504      	bpl.n	a8a8 <mqtt_publish+0xe8>
    a89e:	2280      	movs	r2, #128	; 0x80
    a8a0:	3d01      	subs	r5, #1
    a8a2:	4252      	negs	r2, r2
    a8a4:	4315      	orrs	r5, r2
    a8a6:	3501      	adds	r5, #1
    a8a8:	1c38      	adds	r0, r7, #0
    a8aa:	b269      	sxtb	r1, r5
    a8ac:	302c      	adds	r0, #44	; 0x2c
    a8ae:	4798      	blx	r3
    a8b0:	4e23      	ldr	r6, [pc, #140]	; (a940 <mqtt_publish+0x180>)
    a8b2:	6978      	ldr	r0, [r7, #20]
    a8b4:	47b0      	blx	r6
    a8b6:	b201      	sxth	r1, r0
    a8b8:	1c38      	adds	r0, r7, #0
    a8ba:	302c      	adds	r0, #44	; 0x2c
    a8bc:	4d27      	ldr	r5, [pc, #156]	; (a95c <mqtt_publish+0x19c>)
    a8be:	47a8      	blx	r5
    a8c0:	6978      	ldr	r0, [r7, #20]
    a8c2:	47b0      	blx	r6
    a8c4:	1c02      	adds	r2, r0, #0
    a8c6:	1c38      	adds	r0, r7, #0
    a8c8:	302c      	adds	r0, #44	; 0x2c
    a8ca:	6979      	ldr	r1, [r7, #20]
    a8cc:	4e24      	ldr	r6, [pc, #144]	; (a960 <mqtt_publish+0x1a0>)
    a8ce:	47b0      	blx	r6
    a8d0:	693a      	ldr	r2, [r7, #16]
    a8d2:	2a00      	cmp	r2, #0
    a8d4:	d006      	beq.n	a8e4 <mqtt_publish+0x124>
    a8d6:	8821      	ldrh	r1, [r4, #0]
    a8d8:	1c38      	adds	r0, r7, #0
    a8da:	1c4b      	adds	r3, r1, #1
    a8dc:	8023      	strh	r3, [r4, #0]
    a8de:	b209      	sxth	r1, r1
    a8e0:	302c      	adds	r0, #44	; 0x2c
    a8e2:	47a8      	blx	r5
    a8e4:	8823      	ldrh	r3, [r4, #0]
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d101      	bne.n	a8ee <mqtt_publish+0x12e>
    a8ea:	2301      	movs	r3, #1
    a8ec:	8023      	strh	r3, [r4, #0]
    a8ee:	68bb      	ldr	r3, [r7, #8]
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	d006      	beq.n	a902 <mqtt_publish+0x142>
    a8f4:	68fa      	ldr	r2, [r7, #12]
    a8f6:	2a00      	cmp	r2, #0
    a8f8:	d003      	beq.n	a902 <mqtt_publish+0x142>
    a8fa:	1c38      	adds	r0, r7, #0
    a8fc:	302c      	adds	r0, #44	; 0x2c
    a8fe:	1c19      	adds	r1, r3, #0
    a900:	47b0      	blx	r6
    a902:	1c38      	adds	r0, r7, #0
    a904:	4b17      	ldr	r3, [pc, #92]	; (a964 <mqtt_publish+0x1a4>)
    a906:	302c      	adds	r0, #44	; 0x2c
    a908:	4798      	blx	r3
    a90a:	1c23      	adds	r3, r4, #0
    a90c:	3343      	adds	r3, #67	; 0x43
    a90e:	781a      	ldrb	r2, [r3, #0]
    a910:	2108      	movs	r1, #8
    a912:	438a      	bics	r2, r1
    a914:	701a      	strb	r2, [r3, #0]
    a916:	693b      	ldr	r3, [r7, #16]
    a918:	2500      	movs	r5, #0
    a91a:	42ab      	cmp	r3, r5
    a91c:	d10c      	bne.n	a938 <mqtt_publish+0x178>
    a91e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a920:	42ab      	cmp	r3, r5
    a922:	d009      	beq.n	a938 <mqtt_publish+0x178>
    a924:	1c3a      	adds	r2, r7, #0
    a926:	1c20      	adds	r0, r4, #0
    a928:	2102      	movs	r1, #2
    a92a:	3218      	adds	r2, #24
    a92c:	4798      	blx	r3
    a92e:	e003      	b.n	a938 <mqtt_publish+0x178>
    a930:	2580      	movs	r5, #128	; 0x80
    a932:	e000      	b.n	a936 <mqtt_publish+0x176>
    a934:	250b      	movs	r5, #11
    a936:	426d      	negs	r5, r5
    a938:	1c28      	adds	r0, r5, #0
    a93a:	46bd      	mov	sp, r7
    a93c:	b011      	add	sp, #68	; 0x44
    a93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a940:	0000be9f 	.word	0x0000be9f
    a944:	00006e65 	.word	0x00006e65
    a948:	0000430d 	.word	0x0000430d
    a94c:	0000a231 	.word	0x0000a231
    a950:	0000411d 	.word	0x0000411d
    a954:	00004149 	.word	0x00004149
    a958:	8000007f 	.word	0x8000007f
    a95c:	00004171 	.word	0x00004171
    a960:	00004189 	.word	0x00004189
    a964:	0000412d 	.word	0x0000412d

0000a968 <mqtt_subscribe>:
    a968:	b5f0      	push	{r4, r5, r6, r7, lr}
    a96a:	b08d      	sub	sp, #52	; 0x34
    a96c:	af02      	add	r7, sp, #8
    a96e:	1c04      	adds	r4, r0, #0
    a970:	60b9      	str	r1, [r7, #8]
    a972:	607a      	str	r2, [r7, #4]
    a974:	d101      	bne.n	a97a <mqtt_subscribe+0x12>
    a976:	2016      	movs	r0, #22
    a978:	e086      	b.n	aa88 <mqtt_subscribe+0x120>
    a97a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a97c:	466a      	mov	r2, sp
    a97e:	3307      	adds	r3, #7
    a980:	08db      	lsrs	r3, r3, #3
    a982:	00db      	lsls	r3, r3, #3
    a984:	1ad2      	subs	r2, r2, r3
    a986:	4695      	mov	sp, r2
    a988:	ad02      	add	r5, sp, #8
    a98a:	603d      	str	r5, [r7, #0]
    a98c:	68bd      	ldr	r5, [r7, #8]
    a98e:	2d00      	cmp	r5, #0
    a990:	d0f1      	beq.n	a976 <mqtt_subscribe+0xe>
    a992:	687d      	ldr	r5, [r7, #4]
    a994:	2d02      	cmp	r5, #2
    a996:	d8ee      	bhi.n	a976 <mqtt_subscribe+0xe>
    a998:	1c05      	adds	r5, r0, #0
    a99a:	3543      	adds	r5, #67	; 0x43
    a99c:	782b      	ldrb	r3, [r5, #0]
    a99e:	079a      	lsls	r2, r3, #30
    a9a0:	d56f      	bpl.n	aa82 <mqtt_subscribe+0x11a>
    a9a2:	071a      	lsls	r2, r3, #28
    a9a4:	d41a      	bmi.n	a9dc <mqtt_subscribe+0x74>
    a9a6:	68b8      	ldr	r0, [r7, #8]
    a9a8:	4d39      	ldr	r5, [pc, #228]	; (aa90 <mqtt_subscribe+0x128>)
    a9aa:	47a8      	blx	r5
    a9ac:	1c25      	adds	r5, r4, #0
    a9ae:	3543      	adds	r5, #67	; 0x43
    a9b0:	782b      	ldrb	r3, [r5, #0]
    a9b2:	2208      	movs	r2, #8
    a9b4:	4313      	orrs	r3, r2
    a9b6:	702b      	strb	r3, [r5, #0]
    a9b8:	60fd      	str	r5, [r7, #12]
    a9ba:	1d46      	adds	r6, r0, #5
    a9bc:	9400      	str	r4, [sp, #0]
    a9be:	1c38      	adds	r0, r7, #0
    a9c0:	3014      	adds	r0, #20
    a9c2:	6839      	ldr	r1, [r7, #0]
    a9c4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    a9c6:	4b33      	ldr	r3, [pc, #204]	; (aa94 <mqtt_subscribe+0x12c>)
    a9c8:	4d33      	ldr	r5, [pc, #204]	; (aa98 <mqtt_subscribe+0x130>)
    a9ca:	47a8      	blx	r5
    a9cc:	1c38      	adds	r0, r7, #0
    a9ce:	217e      	movs	r1, #126	; 0x7e
    a9d0:	3014      	adds	r0, #20
    a9d2:	4249      	negs	r1, r1
    a9d4:	4b31      	ldr	r3, [pc, #196]	; (aa9c <mqtt_subscribe+0x134>)
    a9d6:	4798      	blx	r3
    a9d8:	4d2d      	ldr	r5, [pc, #180]	; (aa90 <mqtt_subscribe+0x128>)
    a9da:	e00e      	b.n	a9fa <mqtt_subscribe+0x92>
    a9dc:	1c03      	adds	r3, r0, #0
    a9de:	3370      	adds	r3, #112	; 0x70
    a9e0:	781b      	ldrb	r3, [r3, #0]
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d14f      	bne.n	aa86 <mqtt_subscribe+0x11e>
    a9e6:	782b      	ldrb	r3, [r5, #0]
    a9e8:	071a      	lsls	r2, r3, #28
    a9ea:	d5dc      	bpl.n	a9a6 <mqtt_subscribe+0x3e>
    a9ec:	4b2c      	ldr	r3, [pc, #176]	; (aaa0 <mqtt_subscribe+0x138>)
    a9ee:	2000      	movs	r0, #0
    a9f0:	4798      	blx	r3
    a9f2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    a9f4:	4b2b      	ldr	r3, [pc, #172]	; (aaa4 <mqtt_subscribe+0x13c>)
    a9f6:	4798      	blx	r3
    a9f8:	e7f5      	b.n	a9e6 <mqtt_subscribe+0x7e>
    a9fa:	4b28      	ldr	r3, [pc, #160]	; (aa9c <mqtt_subscribe+0x134>)
    a9fc:	2e80      	cmp	r6, #128	; 0x80
    a9fe:	dd08      	ble.n	aa12 <mqtt_subscribe+0xaa>
    aa00:	2180      	movs	r1, #128	; 0x80
    aa02:	4249      	negs	r1, r1
    aa04:	4331      	orrs	r1, r6
    aa06:	1c38      	adds	r0, r7, #0
    aa08:	b249      	sxtb	r1, r1
    aa0a:	3014      	adds	r0, #20
    aa0c:	4798      	blx	r3
    aa0e:	11f6      	asrs	r6, r6, #7
    aa10:	e7f3      	b.n	a9fa <mqtt_subscribe+0x92>
    aa12:	4925      	ldr	r1, [pc, #148]	; (aaa8 <mqtt_subscribe+0x140>)
    aa14:	4031      	ands	r1, r6
    aa16:	d504      	bpl.n	aa22 <mqtt_subscribe+0xba>
    aa18:	2280      	movs	r2, #128	; 0x80
    aa1a:	3901      	subs	r1, #1
    aa1c:	4252      	negs	r2, r2
    aa1e:	4311      	orrs	r1, r2
    aa20:	3101      	adds	r1, #1
    aa22:	1c38      	adds	r0, r7, #0
    aa24:	b249      	sxtb	r1, r1
    aa26:	3014      	adds	r0, #20
    aa28:	4798      	blx	r3
    aa2a:	8821      	ldrh	r1, [r4, #0]
    aa2c:	1c38      	adds	r0, r7, #0
    aa2e:	1c4b      	adds	r3, r1, #1
    aa30:	8023      	strh	r3, [r4, #0]
    aa32:	b209      	sxth	r1, r1
    aa34:	3014      	adds	r0, #20
    aa36:	4e1d      	ldr	r6, [pc, #116]	; (aaac <mqtt_subscribe+0x144>)
    aa38:	47b0      	blx	r6
    aa3a:	8823      	ldrh	r3, [r4, #0]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d101      	bne.n	aa44 <mqtt_subscribe+0xdc>
    aa40:	2301      	movs	r3, #1
    aa42:	8023      	strh	r3, [r4, #0]
    aa44:	68b8      	ldr	r0, [r7, #8]
    aa46:	47a8      	blx	r5
    aa48:	b201      	sxth	r1, r0
    aa4a:	1c38      	adds	r0, r7, #0
    aa4c:	3014      	adds	r0, #20
    aa4e:	47b0      	blx	r6
    aa50:	68b8      	ldr	r0, [r7, #8]
    aa52:	47a8      	blx	r5
    aa54:	1c02      	adds	r2, r0, #0
    aa56:	1c38      	adds	r0, r7, #0
    aa58:	3014      	adds	r0, #20
    aa5a:	68b9      	ldr	r1, [r7, #8]
    aa5c:	4b14      	ldr	r3, [pc, #80]	; (aab0 <mqtt_subscribe+0x148>)
    aa5e:	4798      	blx	r3
    aa60:	687d      	ldr	r5, [r7, #4]
    aa62:	1c38      	adds	r0, r7, #0
    aa64:	b269      	sxtb	r1, r5
    aa66:	3014      	adds	r0, #20
    aa68:	4b0c      	ldr	r3, [pc, #48]	; (aa9c <mqtt_subscribe+0x134>)
    aa6a:	4798      	blx	r3
    aa6c:	1c38      	adds	r0, r7, #0
    aa6e:	3014      	adds	r0, #20
    aa70:	4b10      	ldr	r3, [pc, #64]	; (aab4 <mqtt_subscribe+0x14c>)
    aa72:	4798      	blx	r3
    aa74:	68fd      	ldr	r5, [r7, #12]
    aa76:	2208      	movs	r2, #8
    aa78:	782b      	ldrb	r3, [r5, #0]
    aa7a:	2000      	movs	r0, #0
    aa7c:	4393      	bics	r3, r2
    aa7e:	702b      	strb	r3, [r5, #0]
    aa80:	e003      	b.n	aa8a <mqtt_subscribe+0x122>
    aa82:	2080      	movs	r0, #128	; 0x80
    aa84:	e000      	b.n	aa88 <mqtt_subscribe+0x120>
    aa86:	200b      	movs	r0, #11
    aa88:	4240      	negs	r0, r0
    aa8a:	46bd      	mov	sp, r7
    aa8c:	b00b      	add	sp, #44	; 0x2c
    aa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa90:	0000be9f 	.word	0x0000be9f
    aa94:	0000a231 	.word	0x0000a231
    aa98:	0000411d 	.word	0x0000411d
    aa9c:	00004149 	.word	0x00004149
    aaa0:	00006e65 	.word	0x00006e65
    aaa4:	0000430d 	.word	0x0000430d
    aaa8:	8000007f 	.word	0x8000007f
    aaac:	00004171 	.word	0x00004171
    aab0:	00004189 	.word	0x00004189
    aab4:	0000412d 	.word	0x0000412d

0000aab8 <_mqtt_ping>:
    aab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aaba:	23c0      	movs	r3, #192	; 0xc0
    aabc:	a901      	add	r1, sp, #4
    aabe:	2500      	movs	r5, #0
    aac0:	700b      	strb	r3, [r1, #0]
    aac2:	704d      	strb	r5, [r1, #1]
    aac4:	42a8      	cmp	r0, r5
    aac6:	d019      	beq.n	aafc <_mqtt_ping+0x44>
    aac8:	1c04      	adds	r4, r0, #0
    aaca:	3443      	adds	r4, #67	; 0x43
    aacc:	7823      	ldrb	r3, [r4, #0]
    aace:	079a      	lsls	r2, r3, #30
    aad0:	d516      	bpl.n	ab00 <_mqtt_ping+0x48>
    aad2:	071a      	lsls	r2, r3, #28
    aad4:	d416      	bmi.n	ab04 <_mqtt_ping+0x4c>
    aad6:	2608      	movs	r6, #8
    aad8:	4333      	orrs	r3, r6
    aada:	7023      	strb	r3, [r4, #0]
    aadc:	7880      	ldrb	r0, [r0, #2]
    aade:	1c2b      	adds	r3, r5, #0
    aae0:	b240      	sxtb	r0, r0
    aae2:	2202      	movs	r2, #2
    aae4:	4f09      	ldr	r7, [pc, #36]	; (ab0c <_mqtt_ping+0x54>)
    aae6:	47b8      	blx	r7
    aae8:	1c2b      	adds	r3, r5, #0
    aaea:	42a8      	cmp	r0, r5
    aaec:	da0c      	bge.n	ab08 <_mqtt_ping+0x50>
    aaee:	7823      	ldrb	r3, [r4, #0]
    aaf0:	43b3      	bics	r3, r6
    aaf2:	7023      	strb	r3, [r4, #0]
    aaf4:	4b06      	ldr	r3, [pc, #24]	; (ab10 <_mqtt_ping+0x58>)
    aaf6:	4798      	blx	r3
    aaf8:	1c03      	adds	r3, r0, #0
    aafa:	e005      	b.n	ab08 <_mqtt_ping+0x50>
    aafc:	2316      	movs	r3, #22
    aafe:	e002      	b.n	ab06 <_mqtt_ping+0x4e>
    ab00:	2380      	movs	r3, #128	; 0x80
    ab02:	e000      	b.n	ab06 <_mqtt_ping+0x4e>
    ab04:	230b      	movs	r3, #11
    ab06:	425b      	negs	r3, r3
    ab08:	1c18      	adds	r0, r3, #0
    ab0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ab0c:	00008c05 	.word	0x00008c05
    ab10:	0000a1e1 	.word	0x0000a1e1

0000ab14 <mqtt_timer_callback>:
    ab14:	b570      	push	{r4, r5, r6, lr}
    ab16:	1c05      	adds	r5, r0, #0
    ab18:	b086      	sub	sp, #24
    ab1a:	1c0e      	adds	r6, r1, #0
    ab1c:	1c14      	adds	r4, r2, #0
    ab1e:	2800      	cmp	r0, #0
    ab20:	d012      	beq.n	ab48 <mqtt_timer_callback+0x34>
    ab22:	2a00      	cmp	r2, #0
    ab24:	d010      	beq.n	ab48 <mqtt_timer_callback+0x34>
    ab26:	1c10      	adds	r0, r2, #0
    ab28:	4b08      	ldr	r3, [pc, #32]	; (ab4c <mqtt_timer_callback+0x38>)
    ab2a:	4798      	blx	r3
    ab2c:	2800      	cmp	r0, #0
    ab2e:	da04      	bge.n	ab3a <mqtt_timer_callback+0x26>
    ab30:	1c28      	adds	r0, r5, #0
    ab32:	1c31      	adds	r1, r6, #0
    ab34:	2200      	movs	r2, #0
    ab36:	4b06      	ldr	r3, [pc, #24]	; (ab50 <mqtt_timer_callback+0x3c>)
    ab38:	e005      	b.n	ab46 <mqtt_timer_callback+0x32>
    ab3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ab3c:	2b00      	cmp	r3, #0
    ab3e:	d003      	beq.n	ab48 <mqtt_timer_callback+0x34>
    ab40:	1c20      	adds	r0, r4, #0
    ab42:	2107      	movs	r1, #7
    ab44:	aa01      	add	r2, sp, #4
    ab46:	4798      	blx	r3
    ab48:	b006      	add	sp, #24
    ab4a:	bd70      	pop	{r4, r5, r6, pc}
    ab4c:	0000aab9 	.word	0x0000aab9
    ab50:	000042d1 	.word	0x000042d1

0000ab54 <_mqtt_puback>:
    ab54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ab56:	2302      	movs	r3, #2
    ab58:	ac01      	add	r4, sp, #4
    ab5a:	2700      	movs	r7, #0
    ab5c:	7063      	strb	r3, [r4, #1]
    ab5e:	42b8      	cmp	r0, r7
    ab60:	d01e      	beq.n	aba0 <_mqtt_puback+0x4c>
    ab62:	1c05      	adds	r5, r0, #0
    ab64:	3543      	adds	r5, #67	; 0x43
    ab66:	782b      	ldrb	r3, [r5, #0]
    ab68:	079e      	lsls	r6, r3, #30
    ab6a:	d51b      	bpl.n	aba4 <_mqtt_puback+0x50>
    ab6c:	071e      	lsls	r6, r3, #28
    ab6e:	d41b      	bmi.n	aba8 <_mqtt_puback+0x54>
    ab70:	2608      	movs	r6, #8
    ab72:	4333      	orrs	r3, r6
    ab74:	702b      	strb	r3, [r5, #0]
    ab76:	7880      	ldrb	r0, [r0, #2]
    ab78:	7021      	strb	r1, [r4, #0]
    ab7a:	0a11      	lsrs	r1, r2, #8
    ab7c:	70a1      	strb	r1, [r4, #2]
    ab7e:	70e2      	strb	r2, [r4, #3]
    ab80:	1c21      	adds	r1, r4, #0
    ab82:	1c3b      	adds	r3, r7, #0
    ab84:	b240      	sxtb	r0, r0
    ab86:	2204      	movs	r2, #4
    ab88:	4c09      	ldr	r4, [pc, #36]	; (abb0 <_mqtt_puback+0x5c>)
    ab8a:	47a0      	blx	r4
    ab8c:	1c3b      	adds	r3, r7, #0
    ab8e:	42b8      	cmp	r0, r7
    ab90:	da0c      	bge.n	abac <_mqtt_puback+0x58>
    ab92:	782b      	ldrb	r3, [r5, #0]
    ab94:	43b3      	bics	r3, r6
    ab96:	702b      	strb	r3, [r5, #0]
    ab98:	4b06      	ldr	r3, [pc, #24]	; (abb4 <_mqtt_puback+0x60>)
    ab9a:	4798      	blx	r3
    ab9c:	1c03      	adds	r3, r0, #0
    ab9e:	e005      	b.n	abac <_mqtt_puback+0x58>
    aba0:	2316      	movs	r3, #22
    aba2:	e002      	b.n	abaa <_mqtt_puback+0x56>
    aba4:	2380      	movs	r3, #128	; 0x80
    aba6:	e000      	b.n	abaa <_mqtt_puback+0x56>
    aba8:	230b      	movs	r3, #11
    abaa:	425b      	negs	r3, r3
    abac:	1c18      	adds	r0, r3, #0
    abae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    abb0:	00008c05 	.word	0x00008c05
    abb4:	0000a1e1 	.word	0x0000a1e1

0000abb8 <mqtt_clear_conn>:
    abb8:	b530      	push	{r4, r5, lr}
    abba:	1c04      	adds	r4, r0, #0
    abbc:	b087      	sub	sp, #28
    abbe:	2800      	cmp	r0, #0
    abc0:	d01c      	beq.n	abfc <mqtt_clear_conn+0x44>
    abc2:	2002      	movs	r0, #2
    abc4:	4b0e      	ldr	r3, [pc, #56]	; (ac00 <mqtt_clear_conn+0x48>)
    abc6:	5620      	ldrsb	r0, [r4, r0]
    abc8:	4798      	blx	r3
    abca:	1c23      	adds	r3, r4, #0
    abcc:	3343      	adds	r3, #67	; 0x43
    abce:	781a      	ldrb	r2, [r3, #0]
    abd0:	21fc      	movs	r1, #252	; 0xfc
    abd2:	0795      	lsls	r5, r2, #30
    abd4:	400a      	ands	r2, r1
    abd6:	701a      	strb	r2, [r3, #0]
    abd8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    abda:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    abdc:	9301      	str	r3, [sp, #4]
    abde:	2300      	movs	r3, #0
    abe0:	64e3      	str	r3, [r4, #76]	; 0x4c
    abe2:	6d21      	ldr	r1, [r4, #80]	; 0x50
    abe4:	4b07      	ldr	r3, [pc, #28]	; (ac04 <mqtt_clear_conn+0x4c>)
    abe6:	4798      	blx	r3
    abe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    abea:	0fed      	lsrs	r5, r5, #31
    abec:	2b00      	cmp	r3, #0
    abee:	d005      	beq.n	abfc <mqtt_clear_conn+0x44>
    abf0:	2d00      	cmp	r5, #0
    abf2:	d003      	beq.n	abfc <mqtt_clear_conn+0x44>
    abf4:	1c20      	adds	r0, r4, #0
    abf6:	2105      	movs	r1, #5
    abf8:	aa01      	add	r2, sp, #4
    abfa:	4798      	blx	r3
    abfc:	b007      	add	sp, #28
    abfe:	bd30      	pop	{r4, r5, pc}
    ac00:	00008d31 	.word	0x00008d31
    ac04:	000042fd 	.word	0x000042fd

0000ac08 <mqtt_disconnect>:
    ac08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac0a:	23e0      	movs	r3, #224	; 0xe0
    ac0c:	ae01      	add	r6, sp, #4
    ac0e:	2700      	movs	r7, #0
    ac10:	1c05      	adds	r5, r0, #0
    ac12:	7033      	strb	r3, [r6, #0]
    ac14:	7077      	strb	r7, [r6, #1]
    ac16:	42b8      	cmp	r0, r7
    ac18:	d036      	beq.n	ac88 <mqtt_disconnect+0x80>
    ac1a:	1c04      	adds	r4, r0, #0
    ac1c:	3443      	adds	r4, #67	; 0x43
    ac1e:	7823      	ldrb	r3, [r4, #0]
    ac20:	079a      	lsls	r2, r3, #30
    ac22:	d533      	bpl.n	ac8c <mqtt_disconnect+0x84>
    ac24:	42b9      	cmp	r1, r7
    ac26:	d12b      	bne.n	ac80 <mqtt_disconnect+0x78>
    ac28:	071a      	lsls	r2, r3, #28
    ac2a:	d414      	bmi.n	ac56 <mqtt_disconnect+0x4e>
    ac2c:	7823      	ldrb	r3, [r4, #0]
    ac2e:	2210      	movs	r2, #16
    ac30:	4313      	orrs	r3, r2
    ac32:	2708      	movs	r7, #8
    ac34:	433b      	orrs	r3, r7
    ac36:	7023      	strb	r3, [r4, #0]
    ac38:	2002      	movs	r0, #2
    ac3a:	5628      	ldrsb	r0, [r5, r0]
    ac3c:	1c31      	adds	r1, r6, #0
    ac3e:	2202      	movs	r2, #2
    ac40:	2300      	movs	r3, #0
    ac42:	4d15      	ldr	r5, [pc, #84]	; (ac98 <mqtt_disconnect+0x90>)
    ac44:	47a8      	blx	r5
    ac46:	2800      	cmp	r0, #0
    ac48:	da14      	bge.n	ac74 <mqtt_disconnect+0x6c>
    ac4a:	7823      	ldrb	r3, [r4, #0]
    ac4c:	43bb      	bics	r3, r7
    ac4e:	7023      	strb	r3, [r4, #0]
    ac50:	4b12      	ldr	r3, [pc, #72]	; (ac9c <mqtt_disconnect+0x94>)
    ac52:	4798      	blx	r3
    ac54:	e01e      	b.n	ac94 <mqtt_disconnect+0x8c>
    ac56:	1c03      	adds	r3, r0, #0
    ac58:	3370      	adds	r3, #112	; 0x70
    ac5a:	781b      	ldrb	r3, [r3, #0]
    ac5c:	2b00      	cmp	r3, #0
    ac5e:	d117      	bne.n	ac90 <mqtt_disconnect+0x88>
    ac60:	7823      	ldrb	r3, [r4, #0]
    ac62:	071a      	lsls	r2, r3, #28
    ac64:	d5e2      	bpl.n	ac2c <mqtt_disconnect+0x24>
    ac66:	4b0e      	ldr	r3, [pc, #56]	; (aca0 <mqtt_disconnect+0x98>)
    ac68:	2000      	movs	r0, #0
    ac6a:	4798      	blx	r3
    ac6c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    ac6e:	4b0d      	ldr	r3, [pc, #52]	; (aca4 <mqtt_disconnect+0x9c>)
    ac70:	4798      	blx	r3
    ac72:	e7f5      	b.n	ac60 <mqtt_disconnect+0x58>
    ac74:	7823      	ldrb	r3, [r4, #0]
    ac76:	2202      	movs	r2, #2
    ac78:	4393      	bics	r3, r2
    ac7a:	7023      	strb	r3, [r4, #0]
    ac7c:	2000      	movs	r0, #0
    ac7e:	e009      	b.n	ac94 <mqtt_disconnect+0x8c>
    ac80:	4b09      	ldr	r3, [pc, #36]	; (aca8 <mqtt_disconnect+0xa0>)
    ac82:	4798      	blx	r3
    ac84:	1c38      	adds	r0, r7, #0
    ac86:	e005      	b.n	ac94 <mqtt_disconnect+0x8c>
    ac88:	2016      	movs	r0, #22
    ac8a:	e002      	b.n	ac92 <mqtt_disconnect+0x8a>
    ac8c:	2080      	movs	r0, #128	; 0x80
    ac8e:	e000      	b.n	ac92 <mqtt_disconnect+0x8a>
    ac90:	200b      	movs	r0, #11
    ac92:	4240      	negs	r0, r0
    ac94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ac96:	46c0      	nop			; (mov r8, r8)
    ac98:	00008c05 	.word	0x00008c05
    ac9c:	0000a1e1 	.word	0x0000a1e1
    aca0:	00006e65 	.word	0x00006e65
    aca4:	0000430d 	.word	0x0000430d
    aca8:	0000abb9 	.word	0x0000abb9

0000acac <_mqtt_recv_handler>:
    acac:	b5f0      	push	{r4, r5, r6, r7, lr}
    acae:	1c04      	adds	r4, r0, #0
    acb0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    acb2:	230f      	movs	r3, #15
    acb4:	7802      	ldrb	r2, [r0, #0]
    acb6:	b087      	sub	sp, #28
    acb8:	1c15      	adds	r5, r2, #0
    acba:	439d      	bics	r5, r3
    acbc:	2d50      	cmp	r5, #80	; 0x50
    acbe:	d100      	bne.n	acc2 <_mqtt_recv_handler+0x16>
    acc0:	e098      	b.n	adf4 <_mqtt_recv_handler+0x148>
    acc2:	d808      	bhi.n	acd6 <_mqtt_recv_handler+0x2a>
    acc4:	2d30      	cmp	r5, #48	; 0x30
    acc6:	d03f      	beq.n	ad48 <_mqtt_recv_handler+0x9c>
    acc8:	2d40      	cmp	r5, #64	; 0x40
    acca:	d100      	bne.n	acce <_mqtt_recv_handler+0x22>
    accc:	e0b3      	b.n	ae36 <_mqtt_recv_handler+0x18a>
    acce:	2d20      	cmp	r5, #32
    acd0:	d000      	beq.n	acd4 <_mqtt_recv_handler+0x28>
    acd2:	e0c3      	b.n	ae5c <_mqtt_recv_handler+0x1b0>
    acd4:	e00e      	b.n	acf4 <_mqtt_recv_handler+0x48>
    acd6:	2d70      	cmp	r5, #112	; 0x70
    acd8:	d100      	bne.n	acdc <_mqtt_recv_handler+0x30>
    acda:	e0ac      	b.n	ae36 <_mqtt_recv_handler+0x18a>
    acdc:	d803      	bhi.n	ace6 <_mqtt_recv_handler+0x3a>
    acde:	2d60      	cmp	r5, #96	; 0x60
    ace0:	d100      	bne.n	ace4 <_mqtt_recv_handler+0x38>
    ace2:	e096      	b.n	ae12 <_mqtt_recv_handler+0x166>
    ace4:	e0ba      	b.n	ae5c <_mqtt_recv_handler+0x1b0>
    ace6:	2d90      	cmp	r5, #144	; 0x90
    ace8:	d100      	bne.n	acec <_mqtt_recv_handler+0x40>
    acea:	e0aa      	b.n	ae42 <_mqtt_recv_handler+0x196>
    acec:	2db0      	cmp	r5, #176	; 0xb0
    acee:	d100      	bne.n	acf2 <_mqtt_recv_handler+0x46>
    acf0:	e0ad      	b.n	ae4e <_mqtt_recv_handler+0x1a2>
    acf2:	e0b3      	b.n	ae5c <_mqtt_recv_handler+0x1b0>
    acf4:	aa01      	add	r2, sp, #4
    acf6:	2303      	movs	r3, #3
    acf8:	2901      	cmp	r1, #1
    acfa:	d900      	bls.n	acfe <_mqtt_recv_handler+0x52>
    acfc:	78c3      	ldrb	r3, [r0, #3]
    acfe:	7013      	strb	r3, [r2, #0]
    ad00:	7813      	ldrb	r3, [r2, #0]
    ad02:	2b00      	cmp	r3, #0
    ad04:	d00d      	beq.n	ad22 <_mqtt_recv_handler+0x76>
    ad06:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ad08:	2b00      	cmp	r3, #0
    ad0a:	d002      	beq.n	ad12 <_mqtt_recv_handler+0x66>
    ad0c:	1c20      	adds	r0, r4, #0
    ad0e:	2101      	movs	r1, #1
    ad10:	4798      	blx	r3
    ad12:	236f      	movs	r3, #111	; 0x6f
    ad14:	425b      	negs	r3, r3
    ad16:	64e3      	str	r3, [r4, #76]	; 0x4c
    ad18:	1c20      	adds	r0, r4, #0
    ad1a:	2100      	movs	r1, #0
    ad1c:	4b50      	ldr	r3, [pc, #320]	; (ae60 <_mqtt_recv_handler+0x1b4>)
    ad1e:	4798      	blx	r3
    ad20:	e09c      	b.n	ae5c <_mqtt_recv_handler+0x1b0>
    ad22:	1c23      	adds	r3, r4, #0
    ad24:	3343      	adds	r3, #67	; 0x43
    ad26:	7819      	ldrb	r1, [r3, #0]
    ad28:	0789      	lsls	r1, r1, #30
    ad2a:	0fc9      	lsrs	r1, r1, #31
    ad2c:	d105      	bne.n	ad3a <_mqtt_recv_handler+0x8e>
    ad2e:	781a      	ldrb	r2, [r3, #0]
    ad30:	64e1      	str	r1, [r4, #76]	; 0x4c
    ad32:	2102      	movs	r1, #2
    ad34:	430a      	orrs	r2, r1
    ad36:	701a      	strb	r2, [r3, #0]
    ad38:	e090      	b.n	ae5c <_mqtt_recv_handler+0x1b0>
    ad3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d100      	bne.n	ad42 <_mqtt_recv_handler+0x96>
    ad40:	e08c      	b.n	ae5c <_mqtt_recv_handler+0x1b0>
    ad42:	1c20      	adds	r0, r4, #0
    ad44:	2101      	movs	r1, #1
    ad46:	e088      	b.n	ae5a <_mqtt_recv_handler+0x1ae>
    ad48:	ad01      	add	r5, sp, #4
    ad4a:	0713      	lsls	r3, r2, #28
    ad4c:	7c2a      	ldrb	r2, [r5, #16]
    ad4e:	0fdb      	lsrs	r3, r3, #31
    ad50:	2604      	movs	r6, #4
    ad52:	009b      	lsls	r3, r3, #2
    ad54:	43b2      	bics	r2, r6
    ad56:	431a      	orrs	r2, r3
    ad58:	742a      	strb	r2, [r5, #16]
    ad5a:	7807      	ldrb	r7, [r0, #0]
    ad5c:	2303      	movs	r3, #3
    ad5e:	b2d2      	uxtb	r2, r2
    ad60:	087f      	lsrs	r7, r7, #1
    ad62:	439a      	bics	r2, r3
    ad64:	401f      	ands	r7, r3
    ad66:	1c13      	adds	r3, r2, #0
    ad68:	433b      	orrs	r3, r7
    ad6a:	742b      	strb	r3, [r5, #16]
    ad6c:	1c43      	adds	r3, r0, #1
    ad6e:	7818      	ldrb	r0, [r3, #0]
    ad70:	1c5a      	adds	r2, r3, #1
    ad72:	287f      	cmp	r0, #127	; 0x7f
    ad74:	d901      	bls.n	ad7a <_mqtt_recv_handler+0xce>
    ad76:	1c13      	adds	r3, r2, #0
    ad78:	e7f9      	b.n	ad6e <_mqtt_recv_handler+0xc2>
    ad7a:	7858      	ldrb	r0, [r3, #1]
    ad7c:	789e      	ldrb	r6, [r3, #2]
    ad7e:	0200      	lsls	r0, r0, #8
    ad80:	4330      	orrs	r0, r6
    ad82:	3303      	adds	r3, #3
    ad84:	2600      	movs	r6, #0
    ad86:	6068      	str	r0, [r5, #4]
    ad88:	9301      	str	r3, [sp, #4]
    ad8a:	1818      	adds	r0, r3, r0
    ad8c:	42b7      	cmp	r7, r6
    ad8e:	d004      	beq.n	ad9a <_mqtt_recv_handler+0xee>
    ad90:	7806      	ldrb	r6, [r0, #0]
    ad92:	7843      	ldrb	r3, [r0, #1]
    ad94:	0236      	lsls	r6, r6, #8
    ad96:	431e      	orrs	r6, r3
    ad98:	3002      	adds	r0, #2
    ad9a:	1851      	adds	r1, r2, r1
    ad9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ad9e:	60a8      	str	r0, [r5, #8]
    ada0:	1a08      	subs	r0, r1, r0
    ada2:	60e8      	str	r0, [r5, #12]
    ada4:	2b00      	cmp	r3, #0
    ada6:	d003      	beq.n	adb0 <_mqtt_recv_handler+0x104>
    ada8:	1c20      	adds	r0, r4, #0
    adaa:	2106      	movs	r1, #6
    adac:	1c2a      	adds	r2, r5, #0
    adae:	4798      	blx	r3
    adb0:	7c2b      	ldrb	r3, [r5, #16]
    adb2:	079b      	lsls	r3, r3, #30
    adb4:	0f9b      	lsrs	r3, r3, #30
    adb6:	2b01      	cmp	r3, #1
    adb8:	d10b      	bne.n	add2 <_mqtt_recv_handler+0x126>
    adba:	b2b6      	uxth	r6, r6
    adbc:	1c20      	adds	r0, r4, #0
    adbe:	2140      	movs	r1, #64	; 0x40
    adc0:	1c32      	adds	r2, r6, #0
    adc2:	4b28      	ldr	r3, [pc, #160]	; (ae64 <_mqtt_recv_handler+0x1b8>)
    adc4:	4798      	blx	r3
    adc6:	2800      	cmp	r0, #0
    adc8:	d048      	beq.n	ae5c <_mqtt_recv_handler+0x1b0>
    adca:	1c23      	adds	r3, r4, #0
    adcc:	3348      	adds	r3, #72	; 0x48
    adce:	2240      	movs	r2, #64	; 0x40
    add0:	e00c      	b.n	adec <_mqtt_recv_handler+0x140>
    add2:	2b02      	cmp	r3, #2
    add4:	d142      	bne.n	ae5c <_mqtt_recv_handler+0x1b0>
    add6:	b2b6      	uxth	r6, r6
    add8:	1c20      	adds	r0, r4, #0
    adda:	2150      	movs	r1, #80	; 0x50
    addc:	1c32      	adds	r2, r6, #0
    adde:	4b21      	ldr	r3, [pc, #132]	; (ae64 <_mqtt_recv_handler+0x1b8>)
    ade0:	4798      	blx	r3
    ade2:	2800      	cmp	r0, #0
    ade4:	d03a      	beq.n	ae5c <_mqtt_recv_handler+0x1b0>
    ade6:	1c23      	adds	r3, r4, #0
    ade8:	3348      	adds	r3, #72	; 0x48
    adea:	2250      	movs	r2, #80	; 0x50
    adec:	344a      	adds	r4, #74	; 0x4a
    adee:	701a      	strb	r2, [r3, #0]
    adf0:	8026      	strh	r6, [r4, #0]
    adf2:	e033      	b.n	ae5c <_mqtt_recv_handler+0x1b0>
    adf4:	7885      	ldrb	r5, [r0, #2]
    adf6:	78c3      	ldrb	r3, [r0, #3]
    adf8:	022d      	lsls	r5, r5, #8
    adfa:	431d      	orrs	r5, r3
    adfc:	1c20      	adds	r0, r4, #0
    adfe:	2162      	movs	r1, #98	; 0x62
    ae00:	1c2a      	adds	r2, r5, #0
    ae02:	4b18      	ldr	r3, [pc, #96]	; (ae64 <_mqtt_recv_handler+0x1b8>)
    ae04:	4798      	blx	r3
    ae06:	2800      	cmp	r0, #0
    ae08:	d028      	beq.n	ae5c <_mqtt_recv_handler+0x1b0>
    ae0a:	1c23      	adds	r3, r4, #0
    ae0c:	3348      	adds	r3, #72	; 0x48
    ae0e:	2260      	movs	r2, #96	; 0x60
    ae10:	e00d      	b.n	ae2e <_mqtt_recv_handler+0x182>
    ae12:	7885      	ldrb	r5, [r0, #2]
    ae14:	78c3      	ldrb	r3, [r0, #3]
    ae16:	022d      	lsls	r5, r5, #8
    ae18:	431d      	orrs	r5, r3
    ae1a:	1c20      	adds	r0, r4, #0
    ae1c:	2170      	movs	r1, #112	; 0x70
    ae1e:	1c2a      	adds	r2, r5, #0
    ae20:	4b10      	ldr	r3, [pc, #64]	; (ae64 <_mqtt_recv_handler+0x1b8>)
    ae22:	4798      	blx	r3
    ae24:	2800      	cmp	r0, #0
    ae26:	d019      	beq.n	ae5c <_mqtt_recv_handler+0x1b0>
    ae28:	1c23      	adds	r3, r4, #0
    ae2a:	3348      	adds	r3, #72	; 0x48
    ae2c:	2270      	movs	r2, #112	; 0x70
    ae2e:	344a      	adds	r4, #74	; 0x4a
    ae30:	701a      	strb	r2, [r3, #0]
    ae32:	8025      	strh	r5, [r4, #0]
    ae34:	e012      	b.n	ae5c <_mqtt_recv_handler+0x1b0>
    ae36:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d00f      	beq.n	ae5c <_mqtt_recv_handler+0x1b0>
    ae3c:	1c20      	adds	r0, r4, #0
    ae3e:	2102      	movs	r1, #2
    ae40:	e00a      	b.n	ae58 <_mqtt_recv_handler+0x1ac>
    ae42:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ae44:	2b00      	cmp	r3, #0
    ae46:	d009      	beq.n	ae5c <_mqtt_recv_handler+0x1b0>
    ae48:	1c20      	adds	r0, r4, #0
    ae4a:	2103      	movs	r1, #3
    ae4c:	e004      	b.n	ae58 <_mqtt_recv_handler+0x1ac>
    ae4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ae50:	2b00      	cmp	r3, #0
    ae52:	d003      	beq.n	ae5c <_mqtt_recv_handler+0x1b0>
    ae54:	1c20      	adds	r0, r4, #0
    ae56:	2104      	movs	r1, #4
    ae58:	aa01      	add	r2, sp, #4
    ae5a:	4798      	blx	r3
    ae5c:	b007      	add	sp, #28
    ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae60:	0000ac09 	.word	0x0000ac09
    ae64:	0000ab55 	.word	0x0000ab55

0000ae68 <mqtt_recv_packet>:
    ae68:	b538      	push	{r3, r4, r5, lr}
    ae6a:	1e04      	subs	r4, r0, #0
    ae6c:	d017      	beq.n	ae9e <mqtt_recv_packet+0x36>
    ae6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    ae70:	6e83      	ldr	r3, [r0, #104]	; 0x68
    ae72:	429a      	cmp	r2, r3
    ae74:	d906      	bls.n	ae84 <mqtt_recv_packet+0x1c>
    ae76:	238b      	movs	r3, #139	; 0x8b
    ae78:	425b      	negs	r3, r3
    ae7a:	64c3      	str	r3, [r0, #76]	; 0x4c
    ae7c:	2100      	movs	r1, #0
    ae7e:	4b08      	ldr	r3, [pc, #32]	; (aea0 <mqtt_recv_packet+0x38>)
    ae80:	4798      	blx	r3
    ae82:	e00c      	b.n	ae9e <mqtt_recv_packet+0x36>
    ae84:	6c62      	ldr	r2, [r4, #68]	; 0x44
    ae86:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ae88:	2002      	movs	r0, #2
    ae8a:	1899      	adds	r1, r3, r2
    ae8c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    ae8e:	5620      	ldrsb	r0, [r4, r0]
    ae90:	1a9a      	subs	r2, r3, r2
    ae92:	b292      	uxth	r2, r2
    ae94:	2300      	movs	r3, #0
    ae96:	4d03      	ldr	r5, [pc, #12]	; (aea4 <mqtt_recv_packet+0x3c>)
    ae98:	47a8      	blx	r5
    ae9a:	2800      	cmp	r0, #0
    ae9c:	d1f2      	bne.n	ae84 <mqtt_recv_packet+0x1c>
    ae9e:	bd38      	pop	{r3, r4, r5, pc}
    aea0:	0000ac09 	.word	0x0000ac09
    aea4:	00008c9d 	.word	0x00008c9d

0000aea8 <mqtt_recved_packet>:
    aea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aeaa:	1e04      	subs	r4, r0, #0
    aeac:	d042      	beq.n	af34 <mqtt_recved_packet+0x8c>
    aeae:	6c63      	ldr	r3, [r4, #68]	; 0x44
    aeb0:	6e67      	ldr	r7, [r4, #100]	; 0x64
    aeb2:	18ca      	adds	r2, r1, r3
    aeb4:	2301      	movs	r3, #1
    aeb6:	9701      	str	r7, [sp, #4]
    aeb8:	6462      	str	r2, [r4, #68]	; 0x44
    aeba:	2600      	movs	r6, #0
    aebc:	1c1d      	adds	r5, r3, #0
    aebe:	42a9      	cmp	r1, r5
    aec0:	dc03      	bgt.n	aeca <mqtt_recved_packet+0x22>
    aec2:	1c20      	adds	r0, r4, #0
    aec4:	4b1c      	ldr	r3, [pc, #112]	; (af38 <mqtt_recved_packet+0x90>)
    aec6:	4798      	blx	r3
    aec8:	e034      	b.n	af34 <mqtt_recved_packet+0x8c>
    aeca:	9f01      	ldr	r7, [sp, #4]
    aecc:	5d78      	ldrb	r0, [r7, r5]
    aece:	01df      	lsls	r7, r3, #7
    aed0:	46bc      	mov	ip, r7
    aed2:	2d03      	cmp	r5, #3
    aed4:	d101      	bne.n	aeda <mqtt_recved_packet+0x32>
    aed6:	234d      	movs	r3, #77	; 0x4d
    aed8:	e00e      	b.n	aef8 <mqtt_recved_packet+0x50>
    aeda:	277f      	movs	r7, #127	; 0x7f
    aedc:	4007      	ands	r7, r0
    aede:	437b      	muls	r3, r7
    aee0:	b240      	sxtb	r0, r0
    aee2:	3501      	adds	r5, #1
    aee4:	18f6      	adds	r6, r6, r3
    aee6:	2800      	cmp	r0, #0
    aee8:	da01      	bge.n	aeee <mqtt_recved_packet+0x46>
    aeea:	4663      	mov	r3, ip
    aeec:	e7e7      	b.n	aebe <mqtt_recved_packet+0x16>
    aeee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    aef0:	19af      	adds	r7, r5, r6
    aef2:	429f      	cmp	r7, r3
    aef4:	d907      	bls.n	af06 <mqtt_recved_packet+0x5e>
    aef6:	238b      	movs	r3, #139	; 0x8b
    aef8:	425b      	negs	r3, r3
    aefa:	64e3      	str	r3, [r4, #76]	; 0x4c
    aefc:	1c20      	adds	r0, r4, #0
    aefe:	2100      	movs	r1, #0
    af00:	4b0e      	ldr	r3, [pc, #56]	; (af3c <mqtt_recved_packet+0x94>)
    af02:	4798      	blx	r3
    af04:	e016      	b.n	af34 <mqtt_recved_packet+0x8c>
    af06:	42ba      	cmp	r2, r7
    af08:	d314      	bcc.n	af34 <mqtt_recved_packet+0x8c>
    af0a:	4b0d      	ldr	r3, [pc, #52]	; (af40 <mqtt_recved_packet+0x98>)
    af0c:	1c20      	adds	r0, r4, #0
    af0e:	1c31      	adds	r1, r6, #0
    af10:	4798      	blx	r3
    af12:	6c63      	ldr	r3, [r4, #68]	; 0x44
    af14:	42bb      	cmp	r3, r7
    af16:	d102      	bne.n	af1e <mqtt_recved_packet+0x76>
    af18:	2300      	movs	r3, #0
    af1a:	6463      	str	r3, [r4, #68]	; 0x44
    af1c:	e00a      	b.n	af34 <mqtt_recved_packet+0x8c>
    af1e:	1b9e      	subs	r6, r3, r6
    af20:	9b01      	ldr	r3, [sp, #4]
    af22:	1b75      	subs	r5, r6, r5
    af24:	19d9      	adds	r1, r3, r7
    af26:	1c18      	adds	r0, r3, #0
    af28:	1c2a      	adds	r2, r5, #0
    af2a:	4b06      	ldr	r3, [pc, #24]	; (af44 <mqtt_recved_packet+0x9c>)
    af2c:	4798      	blx	r3
    af2e:	6465      	str	r5, [r4, #68]	; 0x44
    af30:	2100      	movs	r1, #0
    af32:	e7bc      	b.n	aeae <mqtt_recved_packet+0x6>
    af34:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    af36:	46c0      	nop			; (mov r8, r8)
    af38:	0000ae69 	.word	0x0000ae69
    af3c:	0000ac09 	.word	0x0000ac09
    af40:	0000acad 	.word	0x0000acad
    af44:	0000b0d7 	.word	0x0000b0d7

0000af48 <mqtt_socket_event_handler>:
    af48:	b570      	push	{r4, r5, r6, lr}
    af4a:	4d37      	ldr	r5, [pc, #220]	; (b028 <mqtt_socket_event_handler+0xe0>)
    af4c:	0086      	lsls	r6, r0, #2
    af4e:	5974      	ldr	r4, [r6, r5]
    af50:	b086      	sub	sp, #24
    af52:	2c00      	cmp	r4, #0
    af54:	d066      	beq.n	b024 <mqtt_socket_event_handler+0xdc>
    af56:	2906      	cmp	r1, #6
    af58:	d02b      	beq.n	afb2 <mqtt_socket_event_handler+0x6a>
    af5a:	2907      	cmp	r1, #7
    af5c:	d039      	beq.n	afd2 <mqtt_socket_event_handler+0x8a>
    af5e:	2905      	cmp	r1, #5
    af60:	d160      	bne.n	b024 <mqtt_socket_event_handler+0xdc>
    af62:	2001      	movs	r0, #1
    af64:	5610      	ldrsb	r0, [r2, r0]
    af66:	4b31      	ldr	r3, [pc, #196]	; (b02c <mqtt_socket_event_handler+0xe4>)
    af68:	4798      	blx	r3
    af6a:	9001      	str	r0, [sp, #4]
    af6c:	2800      	cmp	r0, #0
    af6e:	da06      	bge.n	af7e <mqtt_socket_event_handler+0x36>
    af70:	2002      	movs	r0, #2
    af72:	4b2f      	ldr	r3, [pc, #188]	; (b030 <mqtt_socket_event_handler+0xe8>)
    af74:	5620      	ldrsb	r0, [r4, r0]
    af76:	4798      	blx	r3
    af78:	2300      	movs	r3, #0
    af7a:	5173      	str	r3, [r6, r5]
    af7c:	e011      	b.n	afa2 <mqtt_socket_event_handler+0x5a>
    af7e:	1c23      	adds	r3, r4, #0
    af80:	3343      	adds	r3, #67	; 0x43
    af82:	781a      	ldrb	r2, [r3, #0]
    af84:	2101      	movs	r1, #1
    af86:	430a      	orrs	r2, r1
    af88:	701a      	strb	r2, [r3, #0]
    af8a:	331d      	adds	r3, #29
    af8c:	881b      	ldrh	r3, [r3, #0]
    af8e:	2b00      	cmp	r3, #0
    af90:	d004      	beq.n	af9c <mqtt_socket_event_handler+0x54>
    af92:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    af94:	6d21      	ldr	r1, [r4, #80]	; 0x50
    af96:	2200      	movs	r2, #0
    af98:	4b26      	ldr	r3, [pc, #152]	; (b034 <mqtt_socket_event_handler+0xec>)
    af9a:	4798      	blx	r3
    af9c:	1c20      	adds	r0, r4, #0
    af9e:	4b26      	ldr	r3, [pc, #152]	; (b038 <mqtt_socket_event_handler+0xf0>)
    afa0:	4798      	blx	r3
    afa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    afa4:	2b00      	cmp	r3, #0
    afa6:	d03d      	beq.n	b024 <mqtt_socket_event_handler+0xdc>
    afa8:	1c20      	adds	r0, r4, #0
    afaa:	2100      	movs	r1, #0
    afac:	aa01      	add	r2, sp, #4
    afae:	4798      	blx	r3
    afb0:	e038      	b.n	b024 <mqtt_socket_event_handler+0xdc>
    afb2:	2304      	movs	r3, #4
    afb4:	5ed1      	ldrsh	r1, [r2, r3]
    afb6:	2900      	cmp	r1, #0
    afb8:	dd03      	ble.n	afc2 <mqtt_socket_event_handler+0x7a>
    afba:	1c20      	adds	r0, r4, #0
    afbc:	4b1f      	ldr	r3, [pc, #124]	; (b03c <mqtt_socket_event_handler+0xf4>)
    afbe:	4798      	blx	r3
    afc0:	e003      	b.n	afca <mqtt_socket_event_handler+0x82>
    afc2:	1c0b      	adds	r3, r1, #0
    afc4:	1c08      	adds	r0, r1, #0
    afc6:	330d      	adds	r3, #13
    afc8:	d11a      	bne.n	b000 <mqtt_socket_event_handler+0xb8>
    afca:	4b1b      	ldr	r3, [pc, #108]	; (b038 <mqtt_socket_event_handler+0xf0>)
    afcc:	1c20      	adds	r0, r4, #0
    afce:	4798      	blx	r3
    afd0:	e028      	b.n	b024 <mqtt_socket_event_handler+0xdc>
    afd2:	1c23      	adds	r3, r4, #0
    afd4:	3343      	adds	r3, #67	; 0x43
    afd6:	8810      	ldrh	r0, [r2, #0]
    afd8:	781a      	ldrb	r2, [r3, #0]
    afda:	0751      	lsls	r1, r2, #29
    afdc:	d402      	bmi.n	afe4 <mqtt_socket_event_handler+0x9c>
    afde:	2108      	movs	r1, #8
    afe0:	438a      	bics	r2, r1
    afe2:	701a      	strb	r2, [r3, #0]
    afe4:	781a      	ldrb	r2, [r3, #0]
    afe6:	2104      	movs	r1, #4
    afe8:	438a      	bics	r2, r1
    afea:	701a      	strb	r2, [r3, #0]
    afec:	06d3      	lsls	r3, r2, #27
    afee:	0fde      	lsrs	r6, r3, #31
    aff0:	b200      	sxth	r0, r0
    aff2:	2b00      	cmp	r3, #0
    aff4:	db02      	blt.n	affc <mqtt_socket_event_handler+0xb4>
    aff6:	2800      	cmp	r0, #0
    aff8:	da08      	bge.n	b00c <mqtt_socket_event_handler+0xc4>
    affa:	e001      	b.n	b000 <mqtt_socket_event_handler+0xb8>
    affc:	2800      	cmp	r0, #0
    affe:	da02      	bge.n	b006 <mqtt_socket_event_handler+0xbe>
    b000:	4b0a      	ldr	r3, [pc, #40]	; (b02c <mqtt_socket_event_handler+0xe4>)
    b002:	4798      	blx	r3
    b004:	64e0      	str	r0, [r4, #76]	; 0x4c
    b006:	1c20      	adds	r0, r4, #0
    b008:	4b0d      	ldr	r3, [pc, #52]	; (b040 <mqtt_socket_event_handler+0xf8>)
    b00a:	e7e0      	b.n	afce <mqtt_socket_event_handler+0x86>
    b00c:	1c25      	adds	r5, r4, #0
    b00e:	3548      	adds	r5, #72	; 0x48
    b010:	7829      	ldrb	r1, [r5, #0]
    b012:	2900      	cmp	r1, #0
    b014:	d006      	beq.n	b024 <mqtt_socket_event_handler+0xdc>
    b016:	1c23      	adds	r3, r4, #0
    b018:	334a      	adds	r3, #74	; 0x4a
    b01a:	881a      	ldrh	r2, [r3, #0]
    b01c:	1c20      	adds	r0, r4, #0
    b01e:	4b09      	ldr	r3, [pc, #36]	; (b044 <mqtt_socket_event_handler+0xfc>)
    b020:	4798      	blx	r3
    b022:	702e      	strb	r6, [r5, #0]
    b024:	b006      	add	sp, #24
    b026:	bd70      	pop	{r4, r5, r6, pc}
    b028:	2000029c 	.word	0x2000029c
    b02c:	0000a1e1 	.word	0x0000a1e1
    b030:	00008d31 	.word	0x00008d31
    b034:	000042d1 	.word	0x000042d1
    b038:	0000ae69 	.word	0x0000ae69
    b03c:	0000aea9 	.word	0x0000aea9
    b040:	0000abb9 	.word	0x0000abb9
    b044:	0000ab55 	.word	0x0000ab55

0000b048 <atoi>:
    b048:	b510      	push	{r4, lr}
    b04a:	220a      	movs	r2, #10
    b04c:	2100      	movs	r1, #0
    b04e:	f000 ffdd 	bl	c00c <strtol>
    b052:	bd10      	pop	{r4, pc}

0000b054 <__libc_init_array>:
    b054:	b570      	push	{r4, r5, r6, lr}
    b056:	2600      	movs	r6, #0
    b058:	4d0c      	ldr	r5, [pc, #48]	; (b08c <__libc_init_array+0x38>)
    b05a:	4c0d      	ldr	r4, [pc, #52]	; (b090 <__libc_init_array+0x3c>)
    b05c:	1b64      	subs	r4, r4, r5
    b05e:	10a4      	asrs	r4, r4, #2
    b060:	42a6      	cmp	r6, r4
    b062:	d109      	bne.n	b078 <__libc_init_array+0x24>
    b064:	2600      	movs	r6, #0
    b066:	f007 fed7 	bl	12e18 <_init>
    b06a:	4d0a      	ldr	r5, [pc, #40]	; (b094 <__libc_init_array+0x40>)
    b06c:	4c0a      	ldr	r4, [pc, #40]	; (b098 <__libc_init_array+0x44>)
    b06e:	1b64      	subs	r4, r4, r5
    b070:	10a4      	asrs	r4, r4, #2
    b072:	42a6      	cmp	r6, r4
    b074:	d105      	bne.n	b082 <__libc_init_array+0x2e>
    b076:	bd70      	pop	{r4, r5, r6, pc}
    b078:	00b3      	lsls	r3, r6, #2
    b07a:	58eb      	ldr	r3, [r5, r3]
    b07c:	4798      	blx	r3
    b07e:	3601      	adds	r6, #1
    b080:	e7ee      	b.n	b060 <__libc_init_array+0xc>
    b082:	00b3      	lsls	r3, r6, #2
    b084:	58eb      	ldr	r3, [r5, r3]
    b086:	4798      	blx	r3
    b088:	3601      	adds	r6, #1
    b08a:	e7f2      	b.n	b072 <__libc_init_array+0x1e>
    b08c:	00012e24 	.word	0x00012e24
    b090:	00012e24 	.word	0x00012e24
    b094:	00012e24 	.word	0x00012e24
    b098:	00012e28 	.word	0x00012e28

0000b09c <malloc>:
    b09c:	b510      	push	{r4, lr}
    b09e:	4b03      	ldr	r3, [pc, #12]	; (b0ac <malloc+0x10>)
    b0a0:	0001      	movs	r1, r0
    b0a2:	6818      	ldr	r0, [r3, #0]
    b0a4:	f000 f87c 	bl	b1a0 <_malloc_r>
    b0a8:	bd10      	pop	{r4, pc}
    b0aa:	46c0      	nop			; (mov r8, r8)
    b0ac:	2000000c 	.word	0x2000000c

0000b0b0 <free>:
    b0b0:	b510      	push	{r4, lr}
    b0b2:	4b03      	ldr	r3, [pc, #12]	; (b0c0 <free+0x10>)
    b0b4:	0001      	movs	r1, r0
    b0b6:	6818      	ldr	r0, [r3, #0]
    b0b8:	f000 f828 	bl	b10c <_free_r>
    b0bc:	bd10      	pop	{r4, pc}
    b0be:	46c0      	nop			; (mov r8, r8)
    b0c0:	2000000c 	.word	0x2000000c

0000b0c4 <memcpy>:
    b0c4:	2300      	movs	r3, #0
    b0c6:	b510      	push	{r4, lr}
    b0c8:	429a      	cmp	r2, r3
    b0ca:	d100      	bne.n	b0ce <memcpy+0xa>
    b0cc:	bd10      	pop	{r4, pc}
    b0ce:	5ccc      	ldrb	r4, [r1, r3]
    b0d0:	54c4      	strb	r4, [r0, r3]
    b0d2:	3301      	adds	r3, #1
    b0d4:	e7f8      	b.n	b0c8 <memcpy+0x4>

0000b0d6 <memmove>:
    b0d6:	b510      	push	{r4, lr}
    b0d8:	4288      	cmp	r0, r1
    b0da:	d902      	bls.n	b0e2 <memmove+0xc>
    b0dc:	188b      	adds	r3, r1, r2
    b0de:	4298      	cmp	r0, r3
    b0e0:	d308      	bcc.n	b0f4 <memmove+0x1e>
    b0e2:	2300      	movs	r3, #0
    b0e4:	429a      	cmp	r2, r3
    b0e6:	d007      	beq.n	b0f8 <memmove+0x22>
    b0e8:	5ccc      	ldrb	r4, [r1, r3]
    b0ea:	54c4      	strb	r4, [r0, r3]
    b0ec:	3301      	adds	r3, #1
    b0ee:	e7f9      	b.n	b0e4 <memmove+0xe>
    b0f0:	5c8b      	ldrb	r3, [r1, r2]
    b0f2:	5483      	strb	r3, [r0, r2]
    b0f4:	3a01      	subs	r2, #1
    b0f6:	d2fb      	bcs.n	b0f0 <memmove+0x1a>
    b0f8:	bd10      	pop	{r4, pc}

0000b0fa <memset>:
    b0fa:	0003      	movs	r3, r0
    b0fc:	1882      	adds	r2, r0, r2
    b0fe:	4293      	cmp	r3, r2
    b100:	d100      	bne.n	b104 <memset+0xa>
    b102:	4770      	bx	lr
    b104:	7019      	strb	r1, [r3, #0]
    b106:	3301      	adds	r3, #1
    b108:	e7f9      	b.n	b0fe <memset+0x4>
	...

0000b10c <_free_r>:
    b10c:	b570      	push	{r4, r5, r6, lr}
    b10e:	0005      	movs	r5, r0
    b110:	2900      	cmp	r1, #0
    b112:	d010      	beq.n	b136 <_free_r+0x2a>
    b114:	1f0c      	subs	r4, r1, #4
    b116:	6823      	ldr	r3, [r4, #0]
    b118:	2b00      	cmp	r3, #0
    b11a:	da00      	bge.n	b11e <_free_r+0x12>
    b11c:	18e4      	adds	r4, r4, r3
    b11e:	0028      	movs	r0, r5
    b120:	f002 f8e5 	bl	d2ee <__malloc_lock>
    b124:	4a1d      	ldr	r2, [pc, #116]	; (b19c <_free_r+0x90>)
    b126:	6813      	ldr	r3, [r2, #0]
    b128:	2b00      	cmp	r3, #0
    b12a:	d105      	bne.n	b138 <_free_r+0x2c>
    b12c:	6063      	str	r3, [r4, #4]
    b12e:	6014      	str	r4, [r2, #0]
    b130:	0028      	movs	r0, r5
    b132:	f002 f8dd 	bl	d2f0 <__malloc_unlock>
    b136:	bd70      	pop	{r4, r5, r6, pc}
    b138:	42a3      	cmp	r3, r4
    b13a:	d909      	bls.n	b150 <_free_r+0x44>
    b13c:	6821      	ldr	r1, [r4, #0]
    b13e:	1860      	adds	r0, r4, r1
    b140:	4283      	cmp	r3, r0
    b142:	d1f3      	bne.n	b12c <_free_r+0x20>
    b144:	6818      	ldr	r0, [r3, #0]
    b146:	685b      	ldr	r3, [r3, #4]
    b148:	1841      	adds	r1, r0, r1
    b14a:	6021      	str	r1, [r4, #0]
    b14c:	e7ee      	b.n	b12c <_free_r+0x20>
    b14e:	0013      	movs	r3, r2
    b150:	685a      	ldr	r2, [r3, #4]
    b152:	2a00      	cmp	r2, #0
    b154:	d001      	beq.n	b15a <_free_r+0x4e>
    b156:	42a2      	cmp	r2, r4
    b158:	d9f9      	bls.n	b14e <_free_r+0x42>
    b15a:	6819      	ldr	r1, [r3, #0]
    b15c:	1858      	adds	r0, r3, r1
    b15e:	42a0      	cmp	r0, r4
    b160:	d10b      	bne.n	b17a <_free_r+0x6e>
    b162:	6820      	ldr	r0, [r4, #0]
    b164:	1809      	adds	r1, r1, r0
    b166:	1858      	adds	r0, r3, r1
    b168:	6019      	str	r1, [r3, #0]
    b16a:	4282      	cmp	r2, r0
    b16c:	d1e0      	bne.n	b130 <_free_r+0x24>
    b16e:	6810      	ldr	r0, [r2, #0]
    b170:	6852      	ldr	r2, [r2, #4]
    b172:	1841      	adds	r1, r0, r1
    b174:	6019      	str	r1, [r3, #0]
    b176:	605a      	str	r2, [r3, #4]
    b178:	e7da      	b.n	b130 <_free_r+0x24>
    b17a:	42a0      	cmp	r0, r4
    b17c:	d902      	bls.n	b184 <_free_r+0x78>
    b17e:	230c      	movs	r3, #12
    b180:	602b      	str	r3, [r5, #0]
    b182:	e7d5      	b.n	b130 <_free_r+0x24>
    b184:	6821      	ldr	r1, [r4, #0]
    b186:	1860      	adds	r0, r4, r1
    b188:	4282      	cmp	r2, r0
    b18a:	d103      	bne.n	b194 <_free_r+0x88>
    b18c:	6810      	ldr	r0, [r2, #0]
    b18e:	6852      	ldr	r2, [r2, #4]
    b190:	1841      	adds	r1, r0, r1
    b192:	6021      	str	r1, [r4, #0]
    b194:	6062      	str	r2, [r4, #4]
    b196:	605c      	str	r4, [r3, #4]
    b198:	e7ca      	b.n	b130 <_free_r+0x24>
    b19a:	46c0      	nop			; (mov r8, r8)
    b19c:	200002b8 	.word	0x200002b8

0000b1a0 <_malloc_r>:
    b1a0:	2303      	movs	r3, #3
    b1a2:	b570      	push	{r4, r5, r6, lr}
    b1a4:	1ccd      	adds	r5, r1, #3
    b1a6:	439d      	bics	r5, r3
    b1a8:	3508      	adds	r5, #8
    b1aa:	0006      	movs	r6, r0
    b1ac:	2d0c      	cmp	r5, #12
    b1ae:	d21e      	bcs.n	b1ee <_malloc_r+0x4e>
    b1b0:	250c      	movs	r5, #12
    b1b2:	42a9      	cmp	r1, r5
    b1b4:	d81d      	bhi.n	b1f2 <_malloc_r+0x52>
    b1b6:	0030      	movs	r0, r6
    b1b8:	f002 f899 	bl	d2ee <__malloc_lock>
    b1bc:	4a25      	ldr	r2, [pc, #148]	; (b254 <_malloc_r+0xb4>)
    b1be:	6814      	ldr	r4, [r2, #0]
    b1c0:	0021      	movs	r1, r4
    b1c2:	2900      	cmp	r1, #0
    b1c4:	d119      	bne.n	b1fa <_malloc_r+0x5a>
    b1c6:	4c24      	ldr	r4, [pc, #144]	; (b258 <_malloc_r+0xb8>)
    b1c8:	6823      	ldr	r3, [r4, #0]
    b1ca:	2b00      	cmp	r3, #0
    b1cc:	d103      	bne.n	b1d6 <_malloc_r+0x36>
    b1ce:	0030      	movs	r0, r6
    b1d0:	f000 fd4c 	bl	bc6c <_sbrk_r>
    b1d4:	6020      	str	r0, [r4, #0]
    b1d6:	0029      	movs	r1, r5
    b1d8:	0030      	movs	r0, r6
    b1da:	f000 fd47 	bl	bc6c <_sbrk_r>
    b1de:	1c43      	adds	r3, r0, #1
    b1e0:	d12c      	bne.n	b23c <_malloc_r+0x9c>
    b1e2:	230c      	movs	r3, #12
    b1e4:	0030      	movs	r0, r6
    b1e6:	6033      	str	r3, [r6, #0]
    b1e8:	f002 f882 	bl	d2f0 <__malloc_unlock>
    b1ec:	e003      	b.n	b1f6 <_malloc_r+0x56>
    b1ee:	2d00      	cmp	r5, #0
    b1f0:	dadf      	bge.n	b1b2 <_malloc_r+0x12>
    b1f2:	230c      	movs	r3, #12
    b1f4:	6033      	str	r3, [r6, #0]
    b1f6:	2000      	movs	r0, #0
    b1f8:	bd70      	pop	{r4, r5, r6, pc}
    b1fa:	680b      	ldr	r3, [r1, #0]
    b1fc:	1b5b      	subs	r3, r3, r5
    b1fe:	d41a      	bmi.n	b236 <_malloc_r+0x96>
    b200:	2b0b      	cmp	r3, #11
    b202:	d903      	bls.n	b20c <_malloc_r+0x6c>
    b204:	600b      	str	r3, [r1, #0]
    b206:	18cc      	adds	r4, r1, r3
    b208:	6025      	str	r5, [r4, #0]
    b20a:	e003      	b.n	b214 <_malloc_r+0x74>
    b20c:	428c      	cmp	r4, r1
    b20e:	d10e      	bne.n	b22e <_malloc_r+0x8e>
    b210:	6863      	ldr	r3, [r4, #4]
    b212:	6013      	str	r3, [r2, #0]
    b214:	0030      	movs	r0, r6
    b216:	f002 f86b 	bl	d2f0 <__malloc_unlock>
    b21a:	0020      	movs	r0, r4
    b21c:	2207      	movs	r2, #7
    b21e:	300b      	adds	r0, #11
    b220:	1d23      	adds	r3, r4, #4
    b222:	4390      	bics	r0, r2
    b224:	1ac3      	subs	r3, r0, r3
    b226:	d0e7      	beq.n	b1f8 <_malloc_r+0x58>
    b228:	425a      	negs	r2, r3
    b22a:	50e2      	str	r2, [r4, r3]
    b22c:	e7e4      	b.n	b1f8 <_malloc_r+0x58>
    b22e:	684b      	ldr	r3, [r1, #4]
    b230:	6063      	str	r3, [r4, #4]
    b232:	000c      	movs	r4, r1
    b234:	e7ee      	b.n	b214 <_malloc_r+0x74>
    b236:	000c      	movs	r4, r1
    b238:	6849      	ldr	r1, [r1, #4]
    b23a:	e7c2      	b.n	b1c2 <_malloc_r+0x22>
    b23c:	2303      	movs	r3, #3
    b23e:	1cc4      	adds	r4, r0, #3
    b240:	439c      	bics	r4, r3
    b242:	42a0      	cmp	r0, r4
    b244:	d0e0      	beq.n	b208 <_malloc_r+0x68>
    b246:	1a21      	subs	r1, r4, r0
    b248:	0030      	movs	r0, r6
    b24a:	f000 fd0f 	bl	bc6c <_sbrk_r>
    b24e:	1c43      	adds	r3, r0, #1
    b250:	d1da      	bne.n	b208 <_malloc_r+0x68>
    b252:	e7c6      	b.n	b1e2 <_malloc_r+0x42>
    b254:	200002b8 	.word	0x200002b8
    b258:	200002bc 	.word	0x200002bc

0000b25c <__cvt>:
    b25c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b25e:	b08b      	sub	sp, #44	; 0x2c
    b260:	0014      	movs	r4, r2
    b262:	1e1d      	subs	r5, r3, #0
    b264:	9912      	ldr	r1, [sp, #72]	; 0x48
    b266:	da53      	bge.n	b310 <__cvt+0xb4>
    b268:	2480      	movs	r4, #128	; 0x80
    b26a:	0624      	lsls	r4, r4, #24
    b26c:	191b      	adds	r3, r3, r4
    b26e:	001d      	movs	r5, r3
    b270:	0014      	movs	r4, r2
    b272:	232d      	movs	r3, #45	; 0x2d
    b274:	700b      	strb	r3, [r1, #0]
    b276:	2320      	movs	r3, #32
    b278:	9e14      	ldr	r6, [sp, #80]	; 0x50
    b27a:	2203      	movs	r2, #3
    b27c:	439e      	bics	r6, r3
    b27e:	2e46      	cmp	r6, #70	; 0x46
    b280:	d007      	beq.n	b292 <__cvt+0x36>
    b282:	0033      	movs	r3, r6
    b284:	3b45      	subs	r3, #69	; 0x45
    b286:	4259      	negs	r1, r3
    b288:	414b      	adcs	r3, r1
    b28a:	9910      	ldr	r1, [sp, #64]	; 0x40
    b28c:	3a01      	subs	r2, #1
    b28e:	18cb      	adds	r3, r1, r3
    b290:	9310      	str	r3, [sp, #64]	; 0x40
    b292:	ab09      	add	r3, sp, #36	; 0x24
    b294:	9304      	str	r3, [sp, #16]
    b296:	ab08      	add	r3, sp, #32
    b298:	9303      	str	r3, [sp, #12]
    b29a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b29c:	9200      	str	r2, [sp, #0]
    b29e:	9302      	str	r3, [sp, #8]
    b2a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b2a2:	0022      	movs	r2, r4
    b2a4:	9301      	str	r3, [sp, #4]
    b2a6:	002b      	movs	r3, r5
    b2a8:	f001 f814 	bl	c2d4 <_dtoa_r>
    b2ac:	0007      	movs	r7, r0
    b2ae:	2e47      	cmp	r6, #71	; 0x47
    b2b0:	d102      	bne.n	b2b8 <__cvt+0x5c>
    b2b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b2b4:	07db      	lsls	r3, r3, #31
    b2b6:	d524      	bpl.n	b302 <__cvt+0xa6>
    b2b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b2ba:	18fb      	adds	r3, r7, r3
    b2bc:	9307      	str	r3, [sp, #28]
    b2be:	2e46      	cmp	r6, #70	; 0x46
    b2c0:	d114      	bne.n	b2ec <__cvt+0x90>
    b2c2:	783b      	ldrb	r3, [r7, #0]
    b2c4:	2b30      	cmp	r3, #48	; 0x30
    b2c6:	d10c      	bne.n	b2e2 <__cvt+0x86>
    b2c8:	2200      	movs	r2, #0
    b2ca:	2300      	movs	r3, #0
    b2cc:	0020      	movs	r0, r4
    b2ce:	0029      	movs	r1, r5
    b2d0:	f003 f868 	bl	e3a4 <__aeabi_dcmpeq>
    b2d4:	2800      	cmp	r0, #0
    b2d6:	d104      	bne.n	b2e2 <__cvt+0x86>
    b2d8:	2301      	movs	r3, #1
    b2da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b2dc:	1a9b      	subs	r3, r3, r2
    b2de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b2e0:	6013      	str	r3, [r2, #0]
    b2e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b2e4:	9a07      	ldr	r2, [sp, #28]
    b2e6:	681b      	ldr	r3, [r3, #0]
    b2e8:	18d3      	adds	r3, r2, r3
    b2ea:	9307      	str	r3, [sp, #28]
    b2ec:	2200      	movs	r2, #0
    b2ee:	2300      	movs	r3, #0
    b2f0:	0020      	movs	r0, r4
    b2f2:	0029      	movs	r1, r5
    b2f4:	f003 f856 	bl	e3a4 <__aeabi_dcmpeq>
    b2f8:	2230      	movs	r2, #48	; 0x30
    b2fa:	2800      	cmp	r0, #0
    b2fc:	d00d      	beq.n	b31a <__cvt+0xbe>
    b2fe:	9b07      	ldr	r3, [sp, #28]
    b300:	9309      	str	r3, [sp, #36]	; 0x24
    b302:	0038      	movs	r0, r7
    b304:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b306:	9a15      	ldr	r2, [sp, #84]	; 0x54
    b308:	1bdb      	subs	r3, r3, r7
    b30a:	6013      	str	r3, [r2, #0]
    b30c:	b00b      	add	sp, #44	; 0x2c
    b30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b310:	2300      	movs	r3, #0
    b312:	e7af      	b.n	b274 <__cvt+0x18>
    b314:	1c59      	adds	r1, r3, #1
    b316:	9109      	str	r1, [sp, #36]	; 0x24
    b318:	701a      	strb	r2, [r3, #0]
    b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b31c:	9907      	ldr	r1, [sp, #28]
    b31e:	4299      	cmp	r1, r3
    b320:	d8f8      	bhi.n	b314 <__cvt+0xb8>
    b322:	e7ee      	b.n	b302 <__cvt+0xa6>

0000b324 <__exponent>:
    b324:	b5f0      	push	{r4, r5, r6, r7, lr}
    b326:	232b      	movs	r3, #43	; 0x2b
    b328:	b085      	sub	sp, #20
    b32a:	0007      	movs	r7, r0
    b32c:	000c      	movs	r4, r1
    b32e:	7002      	strb	r2, [r0, #0]
    b330:	1c86      	adds	r6, r0, #2
    b332:	2900      	cmp	r1, #0
    b334:	da01      	bge.n	b33a <__exponent+0x16>
    b336:	232d      	movs	r3, #45	; 0x2d
    b338:	424c      	negs	r4, r1
    b33a:	707b      	strb	r3, [r7, #1]
    b33c:	2c09      	cmp	r4, #9
    b33e:	dd23      	ble.n	b388 <__exponent+0x64>
    b340:	ab02      	add	r3, sp, #8
    b342:	1ddd      	adds	r5, r3, #7
    b344:	1e6b      	subs	r3, r5, #1
    b346:	0020      	movs	r0, r4
    b348:	210a      	movs	r1, #10
    b34a:	9301      	str	r3, [sp, #4]
    b34c:	f003 f814 	bl	e378 <__aeabi_idivmod>
    b350:	1e6b      	subs	r3, r5, #1
    b352:	3130      	adds	r1, #48	; 0x30
    b354:	7019      	strb	r1, [r3, #0]
    b356:	0020      	movs	r0, r4
    b358:	210a      	movs	r1, #10
    b35a:	f002 ff27 	bl	e1ac <__divsi3>
    b35e:	0004      	movs	r4, r0
    b360:	2809      	cmp	r0, #9
    b362:	dc0a      	bgt.n	b37a <__exponent+0x56>
    b364:	3d02      	subs	r5, #2
    b366:	3430      	adds	r4, #48	; 0x30
    b368:	702c      	strb	r4, [r5, #0]
    b36a:	ab02      	add	r3, sp, #8
    b36c:	3307      	adds	r3, #7
    b36e:	0030      	movs	r0, r6
    b370:	42ab      	cmp	r3, r5
    b372:	d804      	bhi.n	b37e <__exponent+0x5a>
    b374:	1bc0      	subs	r0, r0, r7
    b376:	b005      	add	sp, #20
    b378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b37a:	9d01      	ldr	r5, [sp, #4]
    b37c:	e7e2      	b.n	b344 <__exponent+0x20>
    b37e:	782b      	ldrb	r3, [r5, #0]
    b380:	3501      	adds	r5, #1
    b382:	7033      	strb	r3, [r6, #0]
    b384:	3601      	adds	r6, #1
    b386:	e7f0      	b.n	b36a <__exponent+0x46>
    b388:	2330      	movs	r3, #48	; 0x30
    b38a:	18e4      	adds	r4, r4, r3
    b38c:	7033      	strb	r3, [r6, #0]
    b38e:	1cb0      	adds	r0, r6, #2
    b390:	7074      	strb	r4, [r6, #1]
    b392:	e7ef      	b.n	b374 <__exponent+0x50>

0000b394 <_printf_float>:
    b394:	b5f0      	push	{r4, r5, r6, r7, lr}
    b396:	b095      	sub	sp, #84	; 0x54
    b398:	000c      	movs	r4, r1
    b39a:	920a      	str	r2, [sp, #40]	; 0x28
    b39c:	930b      	str	r3, [sp, #44]	; 0x2c
    b39e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b3a0:	9009      	str	r0, [sp, #36]	; 0x24
    b3a2:	f001 ff0f 	bl	d1c4 <_localeconv_r>
    b3a6:	6803      	ldr	r3, [r0, #0]
    b3a8:	0018      	movs	r0, r3
    b3aa:	930d      	str	r3, [sp, #52]	; 0x34
    b3ac:	f000 fd77 	bl	be9e <strlen>
    b3b0:	2300      	movs	r3, #0
    b3b2:	9312      	str	r3, [sp, #72]	; 0x48
    b3b4:	6823      	ldr	r3, [r4, #0]
    b3b6:	900e      	str	r0, [sp, #56]	; 0x38
    b3b8:	930c      	str	r3, [sp, #48]	; 0x30
    b3ba:	990c      	ldr	r1, [sp, #48]	; 0x30
    b3bc:	7e27      	ldrb	r7, [r4, #24]
    b3be:	682b      	ldr	r3, [r5, #0]
    b3c0:	2207      	movs	r2, #7
    b3c2:	05c9      	lsls	r1, r1, #23
    b3c4:	d547      	bpl.n	b456 <_printf_float+0xc2>
    b3c6:	189b      	adds	r3, r3, r2
    b3c8:	4393      	bics	r3, r2
    b3ca:	001a      	movs	r2, r3
    b3cc:	3208      	adds	r2, #8
    b3ce:	602a      	str	r2, [r5, #0]
    b3d0:	681a      	ldr	r2, [r3, #0]
    b3d2:	685b      	ldr	r3, [r3, #4]
    b3d4:	64a2      	str	r2, [r4, #72]	; 0x48
    b3d6:	64e3      	str	r3, [r4, #76]	; 0x4c
    b3d8:	2201      	movs	r2, #1
    b3da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    b3dc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    b3de:	006b      	lsls	r3, r5, #1
    b3e0:	085b      	lsrs	r3, r3, #1
    b3e2:	930f      	str	r3, [sp, #60]	; 0x3c
    b3e4:	4252      	negs	r2, r2
    b3e6:	4ba7      	ldr	r3, [pc, #668]	; (b684 <_printf_float+0x2f0>)
    b3e8:	0030      	movs	r0, r6
    b3ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b3ec:	f004 ffc4 	bl	10378 <__aeabi_dcmpun>
    b3f0:	2800      	cmp	r0, #0
    b3f2:	d000      	beq.n	b3f6 <_printf_float+0x62>
    b3f4:	e206      	b.n	b804 <_printf_float+0x470>
    b3f6:	2201      	movs	r2, #1
    b3f8:	4ba2      	ldr	r3, [pc, #648]	; (b684 <_printf_float+0x2f0>)
    b3fa:	4252      	negs	r2, r2
    b3fc:	0030      	movs	r0, r6
    b3fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b400:	f002 ffe0 	bl	e3c4 <__aeabi_dcmple>
    b404:	2800      	cmp	r0, #0
    b406:	d000      	beq.n	b40a <_printf_float+0x76>
    b408:	e1fc      	b.n	b804 <_printf_float+0x470>
    b40a:	2200      	movs	r2, #0
    b40c:	2300      	movs	r3, #0
    b40e:	0030      	movs	r0, r6
    b410:	0029      	movs	r1, r5
    b412:	f002 ffcd 	bl	e3b0 <__aeabi_dcmplt>
    b416:	2800      	cmp	r0, #0
    b418:	d003      	beq.n	b422 <_printf_float+0x8e>
    b41a:	0023      	movs	r3, r4
    b41c:	222d      	movs	r2, #45	; 0x2d
    b41e:	3343      	adds	r3, #67	; 0x43
    b420:	701a      	strb	r2, [r3, #0]
    b422:	4d99      	ldr	r5, [pc, #612]	; (b688 <_printf_float+0x2f4>)
    b424:	2f47      	cmp	r7, #71	; 0x47
    b426:	d800      	bhi.n	b42a <_printf_float+0x96>
    b428:	4d98      	ldr	r5, [pc, #608]	; (b68c <_printf_float+0x2f8>)
    b42a:	2303      	movs	r3, #3
    b42c:	2600      	movs	r6, #0
    b42e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b430:	6123      	str	r3, [r4, #16]
    b432:	3301      	adds	r3, #1
    b434:	439a      	bics	r2, r3
    b436:	6022      	str	r2, [r4, #0]
    b438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b43a:	aa13      	add	r2, sp, #76	; 0x4c
    b43c:	9300      	str	r3, [sp, #0]
    b43e:	0021      	movs	r1, r4
    b440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b442:	9809      	ldr	r0, [sp, #36]	; 0x24
    b444:	f000 f9f2 	bl	b82c <_printf_common>
    b448:	1c43      	adds	r3, r0, #1
    b44a:	d000      	beq.n	b44e <_printf_float+0xba>
    b44c:	e09c      	b.n	b588 <_printf_float+0x1f4>
    b44e:	2001      	movs	r0, #1
    b450:	4240      	negs	r0, r0
    b452:	b015      	add	sp, #84	; 0x54
    b454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b456:	3307      	adds	r3, #7
    b458:	e7b6      	b.n	b3c8 <_printf_float+0x34>
    b45a:	2380      	movs	r3, #128	; 0x80
    b45c:	6862      	ldr	r2, [r4, #4]
    b45e:	00db      	lsls	r3, r3, #3
    b460:	1c51      	adds	r1, r2, #1
    b462:	d145      	bne.n	b4f0 <_printf_float+0x15c>
    b464:	3207      	adds	r2, #7
    b466:	6062      	str	r2, [r4, #4]
    b468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b46a:	2100      	movs	r1, #0
    b46c:	4313      	orrs	r3, r2
    b46e:	aa12      	add	r2, sp, #72	; 0x48
    b470:	9205      	str	r2, [sp, #20]
    b472:	aa11      	add	r2, sp, #68	; 0x44
    b474:	9203      	str	r2, [sp, #12]
    b476:	2223      	movs	r2, #35	; 0x23
    b478:	6023      	str	r3, [r4, #0]
    b47a:	9106      	str	r1, [sp, #24]
    b47c:	9301      	str	r3, [sp, #4]
    b47e:	a908      	add	r1, sp, #32
    b480:	6863      	ldr	r3, [r4, #4]
    b482:	1852      	adds	r2, r2, r1
    b484:	9202      	str	r2, [sp, #8]
    b486:	9300      	str	r3, [sp, #0]
    b488:	0032      	movs	r2, r6
    b48a:	002b      	movs	r3, r5
    b48c:	9704      	str	r7, [sp, #16]
    b48e:	9809      	ldr	r0, [sp, #36]	; 0x24
    b490:	f7ff fee4 	bl	b25c <__cvt>
    b494:	2320      	movs	r3, #32
    b496:	003a      	movs	r2, r7
    b498:	0005      	movs	r5, r0
    b49a:	439a      	bics	r2, r3
    b49c:	2a47      	cmp	r2, #71	; 0x47
    b49e:	d107      	bne.n	b4b0 <_printf_float+0x11c>
    b4a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b4a2:	1cda      	adds	r2, r3, #3
    b4a4:	db02      	blt.n	b4ac <_printf_float+0x118>
    b4a6:	6862      	ldr	r2, [r4, #4]
    b4a8:	4293      	cmp	r3, r2
    b4aa:	dd5b      	ble.n	b564 <_printf_float+0x1d0>
    b4ac:	3f02      	subs	r7, #2
    b4ae:	b2ff      	uxtb	r7, r7
    b4b0:	9911      	ldr	r1, [sp, #68]	; 0x44
    b4b2:	2f65      	cmp	r7, #101	; 0x65
    b4b4:	d83b      	bhi.n	b52e <_printf_float+0x19a>
    b4b6:	0020      	movs	r0, r4
    b4b8:	3901      	subs	r1, #1
    b4ba:	003a      	movs	r2, r7
    b4bc:	3050      	adds	r0, #80	; 0x50
    b4be:	9111      	str	r1, [sp, #68]	; 0x44
    b4c0:	f7ff ff30 	bl	b324 <__exponent>
    b4c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b4c6:	0006      	movs	r6, r0
    b4c8:	1883      	adds	r3, r0, r2
    b4ca:	6123      	str	r3, [r4, #16]
    b4cc:	2a01      	cmp	r2, #1
    b4ce:	dc02      	bgt.n	b4d6 <_printf_float+0x142>
    b4d0:	6822      	ldr	r2, [r4, #0]
    b4d2:	07d2      	lsls	r2, r2, #31
    b4d4:	d501      	bpl.n	b4da <_printf_float+0x146>
    b4d6:	3301      	adds	r3, #1
    b4d8:	6123      	str	r3, [r4, #16]
    b4da:	2323      	movs	r3, #35	; 0x23
    b4dc:	aa08      	add	r2, sp, #32
    b4de:	189b      	adds	r3, r3, r2
    b4e0:	781b      	ldrb	r3, [r3, #0]
    b4e2:	2b00      	cmp	r3, #0
    b4e4:	d0a8      	beq.n	b438 <_printf_float+0xa4>
    b4e6:	0023      	movs	r3, r4
    b4e8:	222d      	movs	r2, #45	; 0x2d
    b4ea:	3343      	adds	r3, #67	; 0x43
    b4ec:	701a      	strb	r2, [r3, #0]
    b4ee:	e7a3      	b.n	b438 <_printf_float+0xa4>
    b4f0:	2f67      	cmp	r7, #103	; 0x67
    b4f2:	d001      	beq.n	b4f8 <_printf_float+0x164>
    b4f4:	2f47      	cmp	r7, #71	; 0x47
    b4f6:	d1b7      	bne.n	b468 <_printf_float+0xd4>
    b4f8:	2a00      	cmp	r2, #0
    b4fa:	d016      	beq.n	b52a <_printf_float+0x196>
    b4fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    b4fe:	a808      	add	r0, sp, #32
    b500:	430b      	orrs	r3, r1
    b502:	2100      	movs	r1, #0
    b504:	9106      	str	r1, [sp, #24]
    b506:	a912      	add	r1, sp, #72	; 0x48
    b508:	9105      	str	r1, [sp, #20]
    b50a:	a911      	add	r1, sp, #68	; 0x44
    b50c:	9103      	str	r1, [sp, #12]
    b50e:	2123      	movs	r1, #35	; 0x23
    b510:	1809      	adds	r1, r1, r0
    b512:	6023      	str	r3, [r4, #0]
    b514:	9301      	str	r3, [sp, #4]
    b516:	9200      	str	r2, [sp, #0]
    b518:	002b      	movs	r3, r5
    b51a:	9704      	str	r7, [sp, #16]
    b51c:	9102      	str	r1, [sp, #8]
    b51e:	0032      	movs	r2, r6
    b520:	9809      	ldr	r0, [sp, #36]	; 0x24
    b522:	f7ff fe9b 	bl	b25c <__cvt>
    b526:	0005      	movs	r5, r0
    b528:	e7ba      	b.n	b4a0 <_printf_float+0x10c>
    b52a:	2201      	movs	r2, #1
    b52c:	e79b      	b.n	b466 <_printf_float+0xd2>
    b52e:	2f66      	cmp	r7, #102	; 0x66
    b530:	d119      	bne.n	b566 <_printf_float+0x1d2>
    b532:	6863      	ldr	r3, [r4, #4]
    b534:	2900      	cmp	r1, #0
    b536:	dd0c      	ble.n	b552 <_printf_float+0x1be>
    b538:	6121      	str	r1, [r4, #16]
    b53a:	2b00      	cmp	r3, #0
    b53c:	d102      	bne.n	b544 <_printf_float+0x1b0>
    b53e:	6822      	ldr	r2, [r4, #0]
    b540:	07d2      	lsls	r2, r2, #31
    b542:	d502      	bpl.n	b54a <_printf_float+0x1b6>
    b544:	3301      	adds	r3, #1
    b546:	185b      	adds	r3, r3, r1
    b548:	6123      	str	r3, [r4, #16]
    b54a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b54c:	2600      	movs	r6, #0
    b54e:	65a3      	str	r3, [r4, #88]	; 0x58
    b550:	e7c3      	b.n	b4da <_printf_float+0x146>
    b552:	2b00      	cmp	r3, #0
    b554:	d103      	bne.n	b55e <_printf_float+0x1ca>
    b556:	2201      	movs	r2, #1
    b558:	6821      	ldr	r1, [r4, #0]
    b55a:	4211      	tst	r1, r2
    b55c:	d000      	beq.n	b560 <_printf_float+0x1cc>
    b55e:	1c9a      	adds	r2, r3, #2
    b560:	6122      	str	r2, [r4, #16]
    b562:	e7f2      	b.n	b54a <_printf_float+0x1b6>
    b564:	2767      	movs	r7, #103	; 0x67
    b566:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b568:	9812      	ldr	r0, [sp, #72]	; 0x48
    b56a:	4283      	cmp	r3, r0
    b56c:	db05      	blt.n	b57a <_printf_float+0x1e6>
    b56e:	6822      	ldr	r2, [r4, #0]
    b570:	6123      	str	r3, [r4, #16]
    b572:	07d2      	lsls	r2, r2, #31
    b574:	d5e9      	bpl.n	b54a <_printf_float+0x1b6>
    b576:	3301      	adds	r3, #1
    b578:	e7e6      	b.n	b548 <_printf_float+0x1b4>
    b57a:	2201      	movs	r2, #1
    b57c:	2b00      	cmp	r3, #0
    b57e:	dc01      	bgt.n	b584 <_printf_float+0x1f0>
    b580:	1892      	adds	r2, r2, r2
    b582:	1ad2      	subs	r2, r2, r3
    b584:	1812      	adds	r2, r2, r0
    b586:	e7eb      	b.n	b560 <_printf_float+0x1cc>
    b588:	6822      	ldr	r2, [r4, #0]
    b58a:	0553      	lsls	r3, r2, #21
    b58c:	d408      	bmi.n	b5a0 <_printf_float+0x20c>
    b58e:	6923      	ldr	r3, [r4, #16]
    b590:	002a      	movs	r2, r5
    b592:	990a      	ldr	r1, [sp, #40]	; 0x28
    b594:	9809      	ldr	r0, [sp, #36]	; 0x24
    b596:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b598:	47a8      	blx	r5
    b59a:	1c43      	adds	r3, r0, #1
    b59c:	d129      	bne.n	b5f2 <_printf_float+0x25e>
    b59e:	e756      	b.n	b44e <_printf_float+0xba>
    b5a0:	2f65      	cmp	r7, #101	; 0x65
    b5a2:	d800      	bhi.n	b5a6 <_printf_float+0x212>
    b5a4:	e0dc      	b.n	b760 <_printf_float+0x3cc>
    b5a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    b5a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    b5aa:	2200      	movs	r2, #0
    b5ac:	2300      	movs	r3, #0
    b5ae:	f002 fef9 	bl	e3a4 <__aeabi_dcmpeq>
    b5b2:	2800      	cmp	r0, #0
    b5b4:	d035      	beq.n	b622 <_printf_float+0x28e>
    b5b6:	2301      	movs	r3, #1
    b5b8:	4a35      	ldr	r2, [pc, #212]	; (b690 <_printf_float+0x2fc>)
    b5ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    b5bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    b5be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b5c0:	47a8      	blx	r5
    b5c2:	1c43      	adds	r3, r0, #1
    b5c4:	d100      	bne.n	b5c8 <_printf_float+0x234>
    b5c6:	e742      	b.n	b44e <_printf_float+0xba>
    b5c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b5ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b5cc:	4293      	cmp	r3, r2
    b5ce:	db02      	blt.n	b5d6 <_printf_float+0x242>
    b5d0:	6823      	ldr	r3, [r4, #0]
    b5d2:	07db      	lsls	r3, r3, #31
    b5d4:	d50d      	bpl.n	b5f2 <_printf_float+0x25e>
    b5d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b5d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b5da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b5dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    b5de:	9809      	ldr	r0, [sp, #36]	; 0x24
    b5e0:	47a8      	blx	r5
    b5e2:	2500      	movs	r5, #0
    b5e4:	1c43      	adds	r3, r0, #1
    b5e6:	d100      	bne.n	b5ea <_printf_float+0x256>
    b5e8:	e731      	b.n	b44e <_printf_float+0xba>
    b5ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b5ec:	3b01      	subs	r3, #1
    b5ee:	429d      	cmp	r5, r3
    b5f0:	db0b      	blt.n	b60a <_printf_float+0x276>
    b5f2:	6823      	ldr	r3, [r4, #0]
    b5f4:	2500      	movs	r5, #0
    b5f6:	079b      	lsls	r3, r3, #30
    b5f8:	d500      	bpl.n	b5fc <_printf_float+0x268>
    b5fa:	e0fd      	b.n	b7f8 <_printf_float+0x464>
    b5fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b5fe:	68e0      	ldr	r0, [r4, #12]
    b600:	4298      	cmp	r0, r3
    b602:	db00      	blt.n	b606 <_printf_float+0x272>
    b604:	e725      	b.n	b452 <_printf_float+0xbe>
    b606:	0018      	movs	r0, r3
    b608:	e723      	b.n	b452 <_printf_float+0xbe>
    b60a:	0022      	movs	r2, r4
    b60c:	2301      	movs	r3, #1
    b60e:	321a      	adds	r2, #26
    b610:	990a      	ldr	r1, [sp, #40]	; 0x28
    b612:	9809      	ldr	r0, [sp, #36]	; 0x24
    b614:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b616:	47b0      	blx	r6
    b618:	1c43      	adds	r3, r0, #1
    b61a:	d100      	bne.n	b61e <_printf_float+0x28a>
    b61c:	e717      	b.n	b44e <_printf_float+0xba>
    b61e:	3501      	adds	r5, #1
    b620:	e7e3      	b.n	b5ea <_printf_float+0x256>
    b622:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b624:	2b00      	cmp	r3, #0
    b626:	dc35      	bgt.n	b694 <_printf_float+0x300>
    b628:	2301      	movs	r3, #1
    b62a:	4a19      	ldr	r2, [pc, #100]	; (b690 <_printf_float+0x2fc>)
    b62c:	990a      	ldr	r1, [sp, #40]	; 0x28
    b62e:	9809      	ldr	r0, [sp, #36]	; 0x24
    b630:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b632:	47b0      	blx	r6
    b634:	1c43      	adds	r3, r0, #1
    b636:	d100      	bne.n	b63a <_printf_float+0x2a6>
    b638:	e709      	b.n	b44e <_printf_float+0xba>
    b63a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b63c:	2b00      	cmp	r3, #0
    b63e:	d105      	bne.n	b64c <_printf_float+0x2b8>
    b640:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b642:	2b00      	cmp	r3, #0
    b644:	d102      	bne.n	b64c <_printf_float+0x2b8>
    b646:	6823      	ldr	r3, [r4, #0]
    b648:	07db      	lsls	r3, r3, #31
    b64a:	d5d2      	bpl.n	b5f2 <_printf_float+0x25e>
    b64c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b64e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b652:	990a      	ldr	r1, [sp, #40]	; 0x28
    b654:	9809      	ldr	r0, [sp, #36]	; 0x24
    b656:	47b0      	blx	r6
    b658:	2600      	movs	r6, #0
    b65a:	1c43      	adds	r3, r0, #1
    b65c:	d100      	bne.n	b660 <_printf_float+0x2cc>
    b65e:	e6f6      	b.n	b44e <_printf_float+0xba>
    b660:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b662:	425b      	negs	r3, r3
    b664:	429e      	cmp	r6, r3
    b666:	db01      	blt.n	b66c <_printf_float+0x2d8>
    b668:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b66a:	e791      	b.n	b590 <_printf_float+0x1fc>
    b66c:	0022      	movs	r2, r4
    b66e:	2301      	movs	r3, #1
    b670:	321a      	adds	r2, #26
    b672:	990a      	ldr	r1, [sp, #40]	; 0x28
    b674:	9809      	ldr	r0, [sp, #36]	; 0x24
    b676:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    b678:	47b8      	blx	r7
    b67a:	1c43      	adds	r3, r0, #1
    b67c:	d100      	bne.n	b680 <_printf_float+0x2ec>
    b67e:	e6e6      	b.n	b44e <_printf_float+0xba>
    b680:	3601      	adds	r6, #1
    b682:	e7ed      	b.n	b660 <_printf_float+0x2cc>
    b684:	7fefffff 	.word	0x7fefffff
    b688:	00012a1c 	.word	0x00012a1c
    b68c:	00012a18 	.word	0x00012a18
    b690:	00012a28 	.word	0x00012a28
    b694:	6da3      	ldr	r3, [r4, #88]	; 0x58
    b696:	9e12      	ldr	r6, [sp, #72]	; 0x48
    b698:	429e      	cmp	r6, r3
    b69a:	dd00      	ble.n	b69e <_printf_float+0x30a>
    b69c:	001e      	movs	r6, r3
    b69e:	2e00      	cmp	r6, #0
    b6a0:	dc35      	bgt.n	b70e <_printf_float+0x37a>
    b6a2:	2300      	movs	r3, #0
    b6a4:	930c      	str	r3, [sp, #48]	; 0x30
    b6a6:	43f3      	mvns	r3, r6
    b6a8:	17db      	asrs	r3, r3, #31
    b6aa:	930f      	str	r3, [sp, #60]	; 0x3c
    b6ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b6ae:	6da7      	ldr	r7, [r4, #88]	; 0x58
    b6b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b6b2:	4033      	ands	r3, r6
    b6b4:	1afb      	subs	r3, r7, r3
    b6b6:	429a      	cmp	r2, r3
    b6b8:	db32      	blt.n	b720 <_printf_float+0x38c>
    b6ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b6be:	4293      	cmp	r3, r2
    b6c0:	db3c      	blt.n	b73c <_printf_float+0x3a8>
    b6c2:	6823      	ldr	r3, [r4, #0]
    b6c4:	07db      	lsls	r3, r3, #31
    b6c6:	d439      	bmi.n	b73c <_printf_float+0x3a8>
    b6c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    b6ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b6cc:	1bf3      	subs	r3, r6, r7
    b6ce:	1ab6      	subs	r6, r6, r2
    b6d0:	429e      	cmp	r6, r3
    b6d2:	dd00      	ble.n	b6d6 <_printf_float+0x342>
    b6d4:	001e      	movs	r6, r3
    b6d6:	2e00      	cmp	r6, #0
    b6d8:	dc39      	bgt.n	b74e <_printf_float+0x3ba>
    b6da:	43f7      	mvns	r7, r6
    b6dc:	2500      	movs	r5, #0
    b6de:	17fb      	asrs	r3, r7, #31
    b6e0:	930c      	str	r3, [sp, #48]	; 0x30
    b6e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b6e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b6e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    b6e8:	1a9b      	subs	r3, r3, r2
    b6ea:	0032      	movs	r2, r6
    b6ec:	400a      	ands	r2, r1
    b6ee:	1a9b      	subs	r3, r3, r2
    b6f0:	429d      	cmp	r5, r3
    b6f2:	db00      	blt.n	b6f6 <_printf_float+0x362>
    b6f4:	e77d      	b.n	b5f2 <_printf_float+0x25e>
    b6f6:	0022      	movs	r2, r4
    b6f8:	2301      	movs	r3, #1
    b6fa:	321a      	adds	r2, #26
    b6fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    b6fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    b700:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    b702:	47b8      	blx	r7
    b704:	1c43      	adds	r3, r0, #1
    b706:	d100      	bne.n	b70a <_printf_float+0x376>
    b708:	e6a1      	b.n	b44e <_printf_float+0xba>
    b70a:	3501      	adds	r5, #1
    b70c:	e7e9      	b.n	b6e2 <_printf_float+0x34e>
    b70e:	0033      	movs	r3, r6
    b710:	002a      	movs	r2, r5
    b712:	990a      	ldr	r1, [sp, #40]	; 0x28
    b714:	9809      	ldr	r0, [sp, #36]	; 0x24
    b716:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    b718:	47b8      	blx	r7
    b71a:	1c43      	adds	r3, r0, #1
    b71c:	d1c1      	bne.n	b6a2 <_printf_float+0x30e>
    b71e:	e696      	b.n	b44e <_printf_float+0xba>
    b720:	0022      	movs	r2, r4
    b722:	2301      	movs	r3, #1
    b724:	321a      	adds	r2, #26
    b726:	990a      	ldr	r1, [sp, #40]	; 0x28
    b728:	9809      	ldr	r0, [sp, #36]	; 0x24
    b72a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    b72c:	47b8      	blx	r7
    b72e:	1c43      	adds	r3, r0, #1
    b730:	d100      	bne.n	b734 <_printf_float+0x3a0>
    b732:	e68c      	b.n	b44e <_printf_float+0xba>
    b734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b736:	3301      	adds	r3, #1
    b738:	930c      	str	r3, [sp, #48]	; 0x30
    b73a:	e7b7      	b.n	b6ac <_printf_float+0x318>
    b73c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b73e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b740:	990a      	ldr	r1, [sp, #40]	; 0x28
    b742:	9809      	ldr	r0, [sp, #36]	; 0x24
    b744:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b746:	47b0      	blx	r6
    b748:	1c43      	adds	r3, r0, #1
    b74a:	d1bd      	bne.n	b6c8 <_printf_float+0x334>
    b74c:	e67f      	b.n	b44e <_printf_float+0xba>
    b74e:	19ea      	adds	r2, r5, r7
    b750:	0033      	movs	r3, r6
    b752:	990a      	ldr	r1, [sp, #40]	; 0x28
    b754:	9809      	ldr	r0, [sp, #36]	; 0x24
    b756:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b758:	47a8      	blx	r5
    b75a:	1c43      	adds	r3, r0, #1
    b75c:	d1bd      	bne.n	b6da <_printf_float+0x346>
    b75e:	e676      	b.n	b44e <_printf_float+0xba>
    b760:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b762:	2b01      	cmp	r3, #1
    b764:	dc02      	bgt.n	b76c <_printf_float+0x3d8>
    b766:	2301      	movs	r3, #1
    b768:	421a      	tst	r2, r3
    b76a:	d038      	beq.n	b7de <_printf_float+0x44a>
    b76c:	2301      	movs	r3, #1
    b76e:	002a      	movs	r2, r5
    b770:	990a      	ldr	r1, [sp, #40]	; 0x28
    b772:	9809      	ldr	r0, [sp, #36]	; 0x24
    b774:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    b776:	47b8      	blx	r7
    b778:	1c43      	adds	r3, r0, #1
    b77a:	d100      	bne.n	b77e <_printf_float+0x3ea>
    b77c:	e667      	b.n	b44e <_printf_float+0xba>
    b77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b782:	990a      	ldr	r1, [sp, #40]	; 0x28
    b784:	9809      	ldr	r0, [sp, #36]	; 0x24
    b786:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    b788:	47b8      	blx	r7
    b78a:	1c43      	adds	r3, r0, #1
    b78c:	d100      	bne.n	b790 <_printf_float+0x3fc>
    b78e:	e65e      	b.n	b44e <_printf_float+0xba>
    b790:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    b792:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    b794:	2200      	movs	r2, #0
    b796:	2300      	movs	r3, #0
    b798:	f002 fe04 	bl	e3a4 <__aeabi_dcmpeq>
    b79c:	2800      	cmp	r0, #0
    b79e:	d008      	beq.n	b7b2 <_printf_float+0x41e>
    b7a0:	2500      	movs	r5, #0
    b7a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b7a4:	3b01      	subs	r3, #1
    b7a6:	429d      	cmp	r5, r3
    b7a8:	db0d      	blt.n	b7c6 <_printf_float+0x432>
    b7aa:	0022      	movs	r2, r4
    b7ac:	0033      	movs	r3, r6
    b7ae:	3250      	adds	r2, #80	; 0x50
    b7b0:	e6ef      	b.n	b592 <_printf_float+0x1fe>
    b7b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b7b4:	1c6a      	adds	r2, r5, #1
    b7b6:	3b01      	subs	r3, #1
    b7b8:	990a      	ldr	r1, [sp, #40]	; 0x28
    b7ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    b7bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b7be:	47a8      	blx	r5
    b7c0:	1c43      	adds	r3, r0, #1
    b7c2:	d1f2      	bne.n	b7aa <_printf_float+0x416>
    b7c4:	e643      	b.n	b44e <_printf_float+0xba>
    b7c6:	0022      	movs	r2, r4
    b7c8:	2301      	movs	r3, #1
    b7ca:	321a      	adds	r2, #26
    b7cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    b7ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    b7d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    b7d2:	47b8      	blx	r7
    b7d4:	1c43      	adds	r3, r0, #1
    b7d6:	d100      	bne.n	b7da <_printf_float+0x446>
    b7d8:	e639      	b.n	b44e <_printf_float+0xba>
    b7da:	3501      	adds	r5, #1
    b7dc:	e7e1      	b.n	b7a2 <_printf_float+0x40e>
    b7de:	002a      	movs	r2, r5
    b7e0:	e7ea      	b.n	b7b8 <_printf_float+0x424>
    b7e2:	0022      	movs	r2, r4
    b7e4:	2301      	movs	r3, #1
    b7e6:	3219      	adds	r2, #25
    b7e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    b7ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    b7ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b7ee:	47b0      	blx	r6
    b7f0:	1c43      	adds	r3, r0, #1
    b7f2:	d100      	bne.n	b7f6 <_printf_float+0x462>
    b7f4:	e62b      	b.n	b44e <_printf_float+0xba>
    b7f6:	3501      	adds	r5, #1
    b7f8:	68e3      	ldr	r3, [r4, #12]
    b7fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b7fc:	1a9b      	subs	r3, r3, r2
    b7fe:	429d      	cmp	r5, r3
    b800:	dbef      	blt.n	b7e2 <_printf_float+0x44e>
    b802:	e6fb      	b.n	b5fc <_printf_float+0x268>
    b804:	0032      	movs	r2, r6
    b806:	002b      	movs	r3, r5
    b808:	0030      	movs	r0, r6
    b80a:	0029      	movs	r1, r5
    b80c:	f004 fdb4 	bl	10378 <__aeabi_dcmpun>
    b810:	2800      	cmp	r0, #0
    b812:	d100      	bne.n	b816 <_printf_float+0x482>
    b814:	e621      	b.n	b45a <_printf_float+0xc6>
    b816:	4d03      	ldr	r5, [pc, #12]	; (b824 <_printf_float+0x490>)
    b818:	2f47      	cmp	r7, #71	; 0x47
    b81a:	d900      	bls.n	b81e <_printf_float+0x48a>
    b81c:	e605      	b.n	b42a <_printf_float+0x96>
    b81e:	4d02      	ldr	r5, [pc, #8]	; (b828 <_printf_float+0x494>)
    b820:	e603      	b.n	b42a <_printf_float+0x96>
    b822:	46c0      	nop			; (mov r8, r8)
    b824:	00012a24 	.word	0x00012a24
    b828:	00012a20 	.word	0x00012a20

0000b82c <_printf_common>:
    b82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b82e:	0015      	movs	r5, r2
    b830:	9301      	str	r3, [sp, #4]
    b832:	688a      	ldr	r2, [r1, #8]
    b834:	690b      	ldr	r3, [r1, #16]
    b836:	9000      	str	r0, [sp, #0]
    b838:	000c      	movs	r4, r1
    b83a:	4293      	cmp	r3, r2
    b83c:	da00      	bge.n	b840 <_printf_common+0x14>
    b83e:	0013      	movs	r3, r2
    b840:	0022      	movs	r2, r4
    b842:	602b      	str	r3, [r5, #0]
    b844:	3243      	adds	r2, #67	; 0x43
    b846:	7812      	ldrb	r2, [r2, #0]
    b848:	2a00      	cmp	r2, #0
    b84a:	d001      	beq.n	b850 <_printf_common+0x24>
    b84c:	3301      	adds	r3, #1
    b84e:	602b      	str	r3, [r5, #0]
    b850:	6823      	ldr	r3, [r4, #0]
    b852:	069b      	lsls	r3, r3, #26
    b854:	d502      	bpl.n	b85c <_printf_common+0x30>
    b856:	682b      	ldr	r3, [r5, #0]
    b858:	3302      	adds	r3, #2
    b85a:	602b      	str	r3, [r5, #0]
    b85c:	2706      	movs	r7, #6
    b85e:	6823      	ldr	r3, [r4, #0]
    b860:	401f      	ands	r7, r3
    b862:	d027      	beq.n	b8b4 <_printf_common+0x88>
    b864:	0023      	movs	r3, r4
    b866:	3343      	adds	r3, #67	; 0x43
    b868:	781b      	ldrb	r3, [r3, #0]
    b86a:	1e5a      	subs	r2, r3, #1
    b86c:	4193      	sbcs	r3, r2
    b86e:	6822      	ldr	r2, [r4, #0]
    b870:	0692      	lsls	r2, r2, #26
    b872:	d430      	bmi.n	b8d6 <_printf_common+0xaa>
    b874:	0022      	movs	r2, r4
    b876:	9901      	ldr	r1, [sp, #4]
    b878:	3243      	adds	r2, #67	; 0x43
    b87a:	9800      	ldr	r0, [sp, #0]
    b87c:	9e08      	ldr	r6, [sp, #32]
    b87e:	47b0      	blx	r6
    b880:	1c43      	adds	r3, r0, #1
    b882:	d025      	beq.n	b8d0 <_printf_common+0xa4>
    b884:	2306      	movs	r3, #6
    b886:	6820      	ldr	r0, [r4, #0]
    b888:	682a      	ldr	r2, [r5, #0]
    b88a:	68e1      	ldr	r1, [r4, #12]
    b88c:	4003      	ands	r3, r0
    b88e:	2500      	movs	r5, #0
    b890:	2b04      	cmp	r3, #4
    b892:	d103      	bne.n	b89c <_printf_common+0x70>
    b894:	1a8d      	subs	r5, r1, r2
    b896:	43eb      	mvns	r3, r5
    b898:	17db      	asrs	r3, r3, #31
    b89a:	401d      	ands	r5, r3
    b89c:	68a3      	ldr	r3, [r4, #8]
    b89e:	6922      	ldr	r2, [r4, #16]
    b8a0:	4293      	cmp	r3, r2
    b8a2:	dd01      	ble.n	b8a8 <_printf_common+0x7c>
    b8a4:	1a9b      	subs	r3, r3, r2
    b8a6:	18ed      	adds	r5, r5, r3
    b8a8:	2700      	movs	r7, #0
    b8aa:	42bd      	cmp	r5, r7
    b8ac:	d120      	bne.n	b8f0 <_printf_common+0xc4>
    b8ae:	2000      	movs	r0, #0
    b8b0:	e010      	b.n	b8d4 <_printf_common+0xa8>
    b8b2:	3701      	adds	r7, #1
    b8b4:	68e3      	ldr	r3, [r4, #12]
    b8b6:	682a      	ldr	r2, [r5, #0]
    b8b8:	1a9b      	subs	r3, r3, r2
    b8ba:	429f      	cmp	r7, r3
    b8bc:	dad2      	bge.n	b864 <_printf_common+0x38>
    b8be:	0022      	movs	r2, r4
    b8c0:	2301      	movs	r3, #1
    b8c2:	3219      	adds	r2, #25
    b8c4:	9901      	ldr	r1, [sp, #4]
    b8c6:	9800      	ldr	r0, [sp, #0]
    b8c8:	9e08      	ldr	r6, [sp, #32]
    b8ca:	47b0      	blx	r6
    b8cc:	1c43      	adds	r3, r0, #1
    b8ce:	d1f0      	bne.n	b8b2 <_printf_common+0x86>
    b8d0:	2001      	movs	r0, #1
    b8d2:	4240      	negs	r0, r0
    b8d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b8d6:	2030      	movs	r0, #48	; 0x30
    b8d8:	18e1      	adds	r1, r4, r3
    b8da:	3143      	adds	r1, #67	; 0x43
    b8dc:	7008      	strb	r0, [r1, #0]
    b8de:	0021      	movs	r1, r4
    b8e0:	1c5a      	adds	r2, r3, #1
    b8e2:	3145      	adds	r1, #69	; 0x45
    b8e4:	7809      	ldrb	r1, [r1, #0]
    b8e6:	18a2      	adds	r2, r4, r2
    b8e8:	3243      	adds	r2, #67	; 0x43
    b8ea:	3302      	adds	r3, #2
    b8ec:	7011      	strb	r1, [r2, #0]
    b8ee:	e7c1      	b.n	b874 <_printf_common+0x48>
    b8f0:	0022      	movs	r2, r4
    b8f2:	2301      	movs	r3, #1
    b8f4:	321a      	adds	r2, #26
    b8f6:	9901      	ldr	r1, [sp, #4]
    b8f8:	9800      	ldr	r0, [sp, #0]
    b8fa:	9e08      	ldr	r6, [sp, #32]
    b8fc:	47b0      	blx	r6
    b8fe:	1c43      	adds	r3, r0, #1
    b900:	d0e6      	beq.n	b8d0 <_printf_common+0xa4>
    b902:	3701      	adds	r7, #1
    b904:	e7d1      	b.n	b8aa <_printf_common+0x7e>
	...

0000b908 <_printf_i>:
    b908:	b5f0      	push	{r4, r5, r6, r7, lr}
    b90a:	b08b      	sub	sp, #44	; 0x2c
    b90c:	9206      	str	r2, [sp, #24]
    b90e:	000a      	movs	r2, r1
    b910:	3243      	adds	r2, #67	; 0x43
    b912:	9307      	str	r3, [sp, #28]
    b914:	9005      	str	r0, [sp, #20]
    b916:	9204      	str	r2, [sp, #16]
    b918:	7e0a      	ldrb	r2, [r1, #24]
    b91a:	000c      	movs	r4, r1
    b91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b91e:	2a6e      	cmp	r2, #110	; 0x6e
    b920:	d100      	bne.n	b924 <_printf_i+0x1c>
    b922:	e08f      	b.n	ba44 <_printf_i+0x13c>
    b924:	d817      	bhi.n	b956 <_printf_i+0x4e>
    b926:	2a63      	cmp	r2, #99	; 0x63
    b928:	d02c      	beq.n	b984 <_printf_i+0x7c>
    b92a:	d808      	bhi.n	b93e <_printf_i+0x36>
    b92c:	2a00      	cmp	r2, #0
    b92e:	d100      	bne.n	b932 <_printf_i+0x2a>
    b930:	e099      	b.n	ba66 <_printf_i+0x15e>
    b932:	2a58      	cmp	r2, #88	; 0x58
    b934:	d054      	beq.n	b9e0 <_printf_i+0xd8>
    b936:	0026      	movs	r6, r4
    b938:	3642      	adds	r6, #66	; 0x42
    b93a:	7032      	strb	r2, [r6, #0]
    b93c:	e029      	b.n	b992 <_printf_i+0x8a>
    b93e:	2a64      	cmp	r2, #100	; 0x64
    b940:	d001      	beq.n	b946 <_printf_i+0x3e>
    b942:	2a69      	cmp	r2, #105	; 0x69
    b944:	d1f7      	bne.n	b936 <_printf_i+0x2e>
    b946:	6821      	ldr	r1, [r4, #0]
    b948:	681a      	ldr	r2, [r3, #0]
    b94a:	0608      	lsls	r0, r1, #24
    b94c:	d523      	bpl.n	b996 <_printf_i+0x8e>
    b94e:	1d11      	adds	r1, r2, #4
    b950:	6019      	str	r1, [r3, #0]
    b952:	6815      	ldr	r5, [r2, #0]
    b954:	e025      	b.n	b9a2 <_printf_i+0x9a>
    b956:	2a73      	cmp	r2, #115	; 0x73
    b958:	d100      	bne.n	b95c <_printf_i+0x54>
    b95a:	e088      	b.n	ba6e <_printf_i+0x166>
    b95c:	d808      	bhi.n	b970 <_printf_i+0x68>
    b95e:	2a6f      	cmp	r2, #111	; 0x6f
    b960:	d029      	beq.n	b9b6 <_printf_i+0xae>
    b962:	2a70      	cmp	r2, #112	; 0x70
    b964:	d1e7      	bne.n	b936 <_printf_i+0x2e>
    b966:	2220      	movs	r2, #32
    b968:	6809      	ldr	r1, [r1, #0]
    b96a:	430a      	orrs	r2, r1
    b96c:	6022      	str	r2, [r4, #0]
    b96e:	e003      	b.n	b978 <_printf_i+0x70>
    b970:	2a75      	cmp	r2, #117	; 0x75
    b972:	d020      	beq.n	b9b6 <_printf_i+0xae>
    b974:	2a78      	cmp	r2, #120	; 0x78
    b976:	d1de      	bne.n	b936 <_printf_i+0x2e>
    b978:	0022      	movs	r2, r4
    b97a:	2178      	movs	r1, #120	; 0x78
    b97c:	3245      	adds	r2, #69	; 0x45
    b97e:	7011      	strb	r1, [r2, #0]
    b980:	4a6c      	ldr	r2, [pc, #432]	; (bb34 <_printf_i+0x22c>)
    b982:	e030      	b.n	b9e6 <_printf_i+0xde>
    b984:	000e      	movs	r6, r1
    b986:	681a      	ldr	r2, [r3, #0]
    b988:	3642      	adds	r6, #66	; 0x42
    b98a:	1d11      	adds	r1, r2, #4
    b98c:	6019      	str	r1, [r3, #0]
    b98e:	6813      	ldr	r3, [r2, #0]
    b990:	7033      	strb	r3, [r6, #0]
    b992:	2301      	movs	r3, #1
    b994:	e079      	b.n	ba8a <_printf_i+0x182>
    b996:	0649      	lsls	r1, r1, #25
    b998:	d5d9      	bpl.n	b94e <_printf_i+0x46>
    b99a:	1d11      	adds	r1, r2, #4
    b99c:	6019      	str	r1, [r3, #0]
    b99e:	2300      	movs	r3, #0
    b9a0:	5ed5      	ldrsh	r5, [r2, r3]
    b9a2:	2d00      	cmp	r5, #0
    b9a4:	da03      	bge.n	b9ae <_printf_i+0xa6>
    b9a6:	232d      	movs	r3, #45	; 0x2d
    b9a8:	9a04      	ldr	r2, [sp, #16]
    b9aa:	426d      	negs	r5, r5
    b9ac:	7013      	strb	r3, [r2, #0]
    b9ae:	4b62      	ldr	r3, [pc, #392]	; (bb38 <_printf_i+0x230>)
    b9b0:	270a      	movs	r7, #10
    b9b2:	9303      	str	r3, [sp, #12]
    b9b4:	e02f      	b.n	ba16 <_printf_i+0x10e>
    b9b6:	6820      	ldr	r0, [r4, #0]
    b9b8:	6819      	ldr	r1, [r3, #0]
    b9ba:	0605      	lsls	r5, r0, #24
    b9bc:	d503      	bpl.n	b9c6 <_printf_i+0xbe>
    b9be:	1d08      	adds	r0, r1, #4
    b9c0:	6018      	str	r0, [r3, #0]
    b9c2:	680d      	ldr	r5, [r1, #0]
    b9c4:	e005      	b.n	b9d2 <_printf_i+0xca>
    b9c6:	0640      	lsls	r0, r0, #25
    b9c8:	d5f9      	bpl.n	b9be <_printf_i+0xb6>
    b9ca:	680d      	ldr	r5, [r1, #0]
    b9cc:	1d08      	adds	r0, r1, #4
    b9ce:	6018      	str	r0, [r3, #0]
    b9d0:	b2ad      	uxth	r5, r5
    b9d2:	4b59      	ldr	r3, [pc, #356]	; (bb38 <_printf_i+0x230>)
    b9d4:	2708      	movs	r7, #8
    b9d6:	9303      	str	r3, [sp, #12]
    b9d8:	2a6f      	cmp	r2, #111	; 0x6f
    b9da:	d018      	beq.n	ba0e <_printf_i+0x106>
    b9dc:	270a      	movs	r7, #10
    b9de:	e016      	b.n	ba0e <_printf_i+0x106>
    b9e0:	3145      	adds	r1, #69	; 0x45
    b9e2:	700a      	strb	r2, [r1, #0]
    b9e4:	4a54      	ldr	r2, [pc, #336]	; (bb38 <_printf_i+0x230>)
    b9e6:	9203      	str	r2, [sp, #12]
    b9e8:	681a      	ldr	r2, [r3, #0]
    b9ea:	6821      	ldr	r1, [r4, #0]
    b9ec:	1d10      	adds	r0, r2, #4
    b9ee:	6018      	str	r0, [r3, #0]
    b9f0:	6815      	ldr	r5, [r2, #0]
    b9f2:	0608      	lsls	r0, r1, #24
    b9f4:	d522      	bpl.n	ba3c <_printf_i+0x134>
    b9f6:	07cb      	lsls	r3, r1, #31
    b9f8:	d502      	bpl.n	ba00 <_printf_i+0xf8>
    b9fa:	2320      	movs	r3, #32
    b9fc:	4319      	orrs	r1, r3
    b9fe:	6021      	str	r1, [r4, #0]
    ba00:	2710      	movs	r7, #16
    ba02:	2d00      	cmp	r5, #0
    ba04:	d103      	bne.n	ba0e <_printf_i+0x106>
    ba06:	2320      	movs	r3, #32
    ba08:	6822      	ldr	r2, [r4, #0]
    ba0a:	439a      	bics	r2, r3
    ba0c:	6022      	str	r2, [r4, #0]
    ba0e:	0023      	movs	r3, r4
    ba10:	2200      	movs	r2, #0
    ba12:	3343      	adds	r3, #67	; 0x43
    ba14:	701a      	strb	r2, [r3, #0]
    ba16:	6863      	ldr	r3, [r4, #4]
    ba18:	60a3      	str	r3, [r4, #8]
    ba1a:	2b00      	cmp	r3, #0
    ba1c:	db5c      	blt.n	bad8 <_printf_i+0x1d0>
    ba1e:	2204      	movs	r2, #4
    ba20:	6821      	ldr	r1, [r4, #0]
    ba22:	4391      	bics	r1, r2
    ba24:	6021      	str	r1, [r4, #0]
    ba26:	2d00      	cmp	r5, #0
    ba28:	d158      	bne.n	badc <_printf_i+0x1d4>
    ba2a:	9e04      	ldr	r6, [sp, #16]
    ba2c:	2b00      	cmp	r3, #0
    ba2e:	d064      	beq.n	bafa <_printf_i+0x1f2>
    ba30:	0026      	movs	r6, r4
    ba32:	9b03      	ldr	r3, [sp, #12]
    ba34:	3642      	adds	r6, #66	; 0x42
    ba36:	781b      	ldrb	r3, [r3, #0]
    ba38:	7033      	strb	r3, [r6, #0]
    ba3a:	e05e      	b.n	bafa <_printf_i+0x1f2>
    ba3c:	0648      	lsls	r0, r1, #25
    ba3e:	d5da      	bpl.n	b9f6 <_printf_i+0xee>
    ba40:	b2ad      	uxth	r5, r5
    ba42:	e7d8      	b.n	b9f6 <_printf_i+0xee>
    ba44:	6809      	ldr	r1, [r1, #0]
    ba46:	681a      	ldr	r2, [r3, #0]
    ba48:	0608      	lsls	r0, r1, #24
    ba4a:	d505      	bpl.n	ba58 <_printf_i+0x150>
    ba4c:	1d11      	adds	r1, r2, #4
    ba4e:	6019      	str	r1, [r3, #0]
    ba50:	6813      	ldr	r3, [r2, #0]
    ba52:	6962      	ldr	r2, [r4, #20]
    ba54:	601a      	str	r2, [r3, #0]
    ba56:	e006      	b.n	ba66 <_printf_i+0x15e>
    ba58:	0649      	lsls	r1, r1, #25
    ba5a:	d5f7      	bpl.n	ba4c <_printf_i+0x144>
    ba5c:	1d11      	adds	r1, r2, #4
    ba5e:	6019      	str	r1, [r3, #0]
    ba60:	6813      	ldr	r3, [r2, #0]
    ba62:	8aa2      	ldrh	r2, [r4, #20]
    ba64:	801a      	strh	r2, [r3, #0]
    ba66:	2300      	movs	r3, #0
    ba68:	9e04      	ldr	r6, [sp, #16]
    ba6a:	6123      	str	r3, [r4, #16]
    ba6c:	e054      	b.n	bb18 <_printf_i+0x210>
    ba6e:	681a      	ldr	r2, [r3, #0]
    ba70:	1d11      	adds	r1, r2, #4
    ba72:	6019      	str	r1, [r3, #0]
    ba74:	6816      	ldr	r6, [r2, #0]
    ba76:	2100      	movs	r1, #0
    ba78:	6862      	ldr	r2, [r4, #4]
    ba7a:	0030      	movs	r0, r6
    ba7c:	f001 fc2c 	bl	d2d8 <memchr>
    ba80:	2800      	cmp	r0, #0
    ba82:	d001      	beq.n	ba88 <_printf_i+0x180>
    ba84:	1b80      	subs	r0, r0, r6
    ba86:	6060      	str	r0, [r4, #4]
    ba88:	6863      	ldr	r3, [r4, #4]
    ba8a:	6123      	str	r3, [r4, #16]
    ba8c:	2300      	movs	r3, #0
    ba8e:	9a04      	ldr	r2, [sp, #16]
    ba90:	7013      	strb	r3, [r2, #0]
    ba92:	e041      	b.n	bb18 <_printf_i+0x210>
    ba94:	6923      	ldr	r3, [r4, #16]
    ba96:	0032      	movs	r2, r6
    ba98:	9906      	ldr	r1, [sp, #24]
    ba9a:	9805      	ldr	r0, [sp, #20]
    ba9c:	9d07      	ldr	r5, [sp, #28]
    ba9e:	47a8      	blx	r5
    baa0:	1c43      	adds	r3, r0, #1
    baa2:	d043      	beq.n	bb2c <_printf_i+0x224>
    baa4:	6823      	ldr	r3, [r4, #0]
    baa6:	2500      	movs	r5, #0
    baa8:	079b      	lsls	r3, r3, #30
    baaa:	d40f      	bmi.n	bacc <_printf_i+0x1c4>
    baac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    baae:	68e0      	ldr	r0, [r4, #12]
    bab0:	4298      	cmp	r0, r3
    bab2:	da3d      	bge.n	bb30 <_printf_i+0x228>
    bab4:	0018      	movs	r0, r3
    bab6:	e03b      	b.n	bb30 <_printf_i+0x228>
    bab8:	0022      	movs	r2, r4
    baba:	2301      	movs	r3, #1
    babc:	3219      	adds	r2, #25
    babe:	9906      	ldr	r1, [sp, #24]
    bac0:	9805      	ldr	r0, [sp, #20]
    bac2:	9e07      	ldr	r6, [sp, #28]
    bac4:	47b0      	blx	r6
    bac6:	1c43      	adds	r3, r0, #1
    bac8:	d030      	beq.n	bb2c <_printf_i+0x224>
    baca:	3501      	adds	r5, #1
    bacc:	68e3      	ldr	r3, [r4, #12]
    bace:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bad0:	1a9b      	subs	r3, r3, r2
    bad2:	429d      	cmp	r5, r3
    bad4:	dbf0      	blt.n	bab8 <_printf_i+0x1b0>
    bad6:	e7e9      	b.n	baac <_printf_i+0x1a4>
    bad8:	2d00      	cmp	r5, #0
    bada:	d0a9      	beq.n	ba30 <_printf_i+0x128>
    badc:	9e04      	ldr	r6, [sp, #16]
    bade:	0028      	movs	r0, r5
    bae0:	0039      	movs	r1, r7
    bae2:	f002 fb5f 	bl	e1a4 <__aeabi_uidivmod>
    bae6:	9b03      	ldr	r3, [sp, #12]
    bae8:	3e01      	subs	r6, #1
    baea:	5c5b      	ldrb	r3, [r3, r1]
    baec:	0028      	movs	r0, r5
    baee:	7033      	strb	r3, [r6, #0]
    baf0:	0039      	movs	r1, r7
    baf2:	f002 fad1 	bl	e098 <__udivsi3>
    baf6:	1e05      	subs	r5, r0, #0
    baf8:	d1f1      	bne.n	bade <_printf_i+0x1d6>
    bafa:	2f08      	cmp	r7, #8
    bafc:	d109      	bne.n	bb12 <_printf_i+0x20a>
    bafe:	6823      	ldr	r3, [r4, #0]
    bb00:	07db      	lsls	r3, r3, #31
    bb02:	d506      	bpl.n	bb12 <_printf_i+0x20a>
    bb04:	6863      	ldr	r3, [r4, #4]
    bb06:	6922      	ldr	r2, [r4, #16]
    bb08:	4293      	cmp	r3, r2
    bb0a:	dc02      	bgt.n	bb12 <_printf_i+0x20a>
    bb0c:	2330      	movs	r3, #48	; 0x30
    bb0e:	3e01      	subs	r6, #1
    bb10:	7033      	strb	r3, [r6, #0]
    bb12:	9b04      	ldr	r3, [sp, #16]
    bb14:	1b9b      	subs	r3, r3, r6
    bb16:	6123      	str	r3, [r4, #16]
    bb18:	9b07      	ldr	r3, [sp, #28]
    bb1a:	aa09      	add	r2, sp, #36	; 0x24
    bb1c:	9300      	str	r3, [sp, #0]
    bb1e:	0021      	movs	r1, r4
    bb20:	9b06      	ldr	r3, [sp, #24]
    bb22:	9805      	ldr	r0, [sp, #20]
    bb24:	f7ff fe82 	bl	b82c <_printf_common>
    bb28:	1c43      	adds	r3, r0, #1
    bb2a:	d1b3      	bne.n	ba94 <_printf_i+0x18c>
    bb2c:	2001      	movs	r0, #1
    bb2e:	4240      	negs	r0, r0
    bb30:	b00b      	add	sp, #44	; 0x2c
    bb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb34:	00012a3b 	.word	0x00012a3b
    bb38:	00012a2a 	.word	0x00012a2a

0000bb3c <iprintf>:
    bb3c:	b40f      	push	{r0, r1, r2, r3}
    bb3e:	4b0b      	ldr	r3, [pc, #44]	; (bb6c <iprintf+0x30>)
    bb40:	b513      	push	{r0, r1, r4, lr}
    bb42:	681c      	ldr	r4, [r3, #0]
    bb44:	2c00      	cmp	r4, #0
    bb46:	d005      	beq.n	bb54 <iprintf+0x18>
    bb48:	69a3      	ldr	r3, [r4, #24]
    bb4a:	2b00      	cmp	r3, #0
    bb4c:	d102      	bne.n	bb54 <iprintf+0x18>
    bb4e:	0020      	movs	r0, r4
    bb50:	f001 faa0 	bl	d094 <__sinit>
    bb54:	ab05      	add	r3, sp, #20
    bb56:	9a04      	ldr	r2, [sp, #16]
    bb58:	68a1      	ldr	r1, [r4, #8]
    bb5a:	0020      	movs	r0, r4
    bb5c:	9301      	str	r3, [sp, #4]
    bb5e:	f002 f847 	bl	dbf0 <_vfiprintf_r>
    bb62:	bc16      	pop	{r1, r2, r4}
    bb64:	bc08      	pop	{r3}
    bb66:	b004      	add	sp, #16
    bb68:	4718      	bx	r3
    bb6a:	46c0      	nop			; (mov r8, r8)
    bb6c:	2000000c 	.word	0x2000000c

0000bb70 <putchar>:
    bb70:	4b08      	ldr	r3, [pc, #32]	; (bb94 <putchar+0x24>)
    bb72:	b570      	push	{r4, r5, r6, lr}
    bb74:	681c      	ldr	r4, [r3, #0]
    bb76:	0005      	movs	r5, r0
    bb78:	2c00      	cmp	r4, #0
    bb7a:	d005      	beq.n	bb88 <putchar+0x18>
    bb7c:	69a3      	ldr	r3, [r4, #24]
    bb7e:	2b00      	cmp	r3, #0
    bb80:	d102      	bne.n	bb88 <putchar+0x18>
    bb82:	0020      	movs	r0, r4
    bb84:	f001 fa86 	bl	d094 <__sinit>
    bb88:	0029      	movs	r1, r5
    bb8a:	68a2      	ldr	r2, [r4, #8]
    bb8c:	0020      	movs	r0, r4
    bb8e:	f002 f94b 	bl	de28 <_putc_r>
    bb92:	bd70      	pop	{r4, r5, r6, pc}
    bb94:	2000000c 	.word	0x2000000c

0000bb98 <_puts_r>:
    bb98:	b570      	push	{r4, r5, r6, lr}
    bb9a:	0005      	movs	r5, r0
    bb9c:	000e      	movs	r6, r1
    bb9e:	2800      	cmp	r0, #0
    bba0:	d004      	beq.n	bbac <_puts_r+0x14>
    bba2:	6983      	ldr	r3, [r0, #24]
    bba4:	2b00      	cmp	r3, #0
    bba6:	d101      	bne.n	bbac <_puts_r+0x14>
    bba8:	f001 fa74 	bl	d094 <__sinit>
    bbac:	69ab      	ldr	r3, [r5, #24]
    bbae:	68ac      	ldr	r4, [r5, #8]
    bbb0:	2b00      	cmp	r3, #0
    bbb2:	d102      	bne.n	bbba <_puts_r+0x22>
    bbb4:	0028      	movs	r0, r5
    bbb6:	f001 fa6d 	bl	d094 <__sinit>
    bbba:	4b24      	ldr	r3, [pc, #144]	; (bc4c <_puts_r+0xb4>)
    bbbc:	429c      	cmp	r4, r3
    bbbe:	d10f      	bne.n	bbe0 <_puts_r+0x48>
    bbc0:	686c      	ldr	r4, [r5, #4]
    bbc2:	89a3      	ldrh	r3, [r4, #12]
    bbc4:	071b      	lsls	r3, r3, #28
    bbc6:	d502      	bpl.n	bbce <_puts_r+0x36>
    bbc8:	6923      	ldr	r3, [r4, #16]
    bbca:	2b00      	cmp	r3, #0
    bbcc:	d120      	bne.n	bc10 <_puts_r+0x78>
    bbce:	0021      	movs	r1, r4
    bbd0:	0028      	movs	r0, r5
    bbd2:	f000 fa85 	bl	c0e0 <__swsetup_r>
    bbd6:	2800      	cmp	r0, #0
    bbd8:	d01a      	beq.n	bc10 <_puts_r+0x78>
    bbda:	2001      	movs	r0, #1
    bbdc:	4240      	negs	r0, r0
    bbde:	bd70      	pop	{r4, r5, r6, pc}
    bbe0:	4b1b      	ldr	r3, [pc, #108]	; (bc50 <_puts_r+0xb8>)
    bbe2:	429c      	cmp	r4, r3
    bbe4:	d101      	bne.n	bbea <_puts_r+0x52>
    bbe6:	68ac      	ldr	r4, [r5, #8]
    bbe8:	e7eb      	b.n	bbc2 <_puts_r+0x2a>
    bbea:	4b1a      	ldr	r3, [pc, #104]	; (bc54 <_puts_r+0xbc>)
    bbec:	429c      	cmp	r4, r3
    bbee:	d1e8      	bne.n	bbc2 <_puts_r+0x2a>
    bbf0:	68ec      	ldr	r4, [r5, #12]
    bbf2:	e7e6      	b.n	bbc2 <_puts_r+0x2a>
    bbf4:	3b01      	subs	r3, #1
    bbf6:	3601      	adds	r6, #1
    bbf8:	60a3      	str	r3, [r4, #8]
    bbfa:	2b00      	cmp	r3, #0
    bbfc:	da04      	bge.n	bc08 <_puts_r+0x70>
    bbfe:	69a2      	ldr	r2, [r4, #24]
    bc00:	4293      	cmp	r3, r2
    bc02:	db16      	blt.n	bc32 <_puts_r+0x9a>
    bc04:	290a      	cmp	r1, #10
    bc06:	d014      	beq.n	bc32 <_puts_r+0x9a>
    bc08:	6823      	ldr	r3, [r4, #0]
    bc0a:	1c5a      	adds	r2, r3, #1
    bc0c:	6022      	str	r2, [r4, #0]
    bc0e:	7019      	strb	r1, [r3, #0]
    bc10:	7831      	ldrb	r1, [r6, #0]
    bc12:	68a3      	ldr	r3, [r4, #8]
    bc14:	2900      	cmp	r1, #0
    bc16:	d1ed      	bne.n	bbf4 <_puts_r+0x5c>
    bc18:	3b01      	subs	r3, #1
    bc1a:	60a3      	str	r3, [r4, #8]
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	da0f      	bge.n	bc40 <_puts_r+0xa8>
    bc20:	0022      	movs	r2, r4
    bc22:	310a      	adds	r1, #10
    bc24:	0028      	movs	r0, r5
    bc26:	f000 fa05 	bl	c034 <__swbuf_r>
    bc2a:	1c43      	adds	r3, r0, #1
    bc2c:	d0d5      	beq.n	bbda <_puts_r+0x42>
    bc2e:	200a      	movs	r0, #10
    bc30:	e7d5      	b.n	bbde <_puts_r+0x46>
    bc32:	0022      	movs	r2, r4
    bc34:	0028      	movs	r0, r5
    bc36:	f000 f9fd 	bl	c034 <__swbuf_r>
    bc3a:	1c43      	adds	r3, r0, #1
    bc3c:	d1e8      	bne.n	bc10 <_puts_r+0x78>
    bc3e:	e7cc      	b.n	bbda <_puts_r+0x42>
    bc40:	200a      	movs	r0, #10
    bc42:	6823      	ldr	r3, [r4, #0]
    bc44:	1c5a      	adds	r2, r3, #1
    bc46:	6022      	str	r2, [r4, #0]
    bc48:	7018      	strb	r0, [r3, #0]
    bc4a:	e7c8      	b.n	bbde <_puts_r+0x46>
    bc4c:	00012a7c 	.word	0x00012a7c
    bc50:	00012a9c 	.word	0x00012a9c
    bc54:	00012a5c 	.word	0x00012a5c

0000bc58 <puts>:
    bc58:	b510      	push	{r4, lr}
    bc5a:	4b03      	ldr	r3, [pc, #12]	; (bc68 <puts+0x10>)
    bc5c:	0001      	movs	r1, r0
    bc5e:	6818      	ldr	r0, [r3, #0]
    bc60:	f7ff ff9a 	bl	bb98 <_puts_r>
    bc64:	bd10      	pop	{r4, pc}
    bc66:	46c0      	nop			; (mov r8, r8)
    bc68:	2000000c 	.word	0x2000000c

0000bc6c <_sbrk_r>:
    bc6c:	2300      	movs	r3, #0
    bc6e:	b570      	push	{r4, r5, r6, lr}
    bc70:	4c06      	ldr	r4, [pc, #24]	; (bc8c <_sbrk_r+0x20>)
    bc72:	0005      	movs	r5, r0
    bc74:	0008      	movs	r0, r1
    bc76:	6023      	str	r3, [r4, #0]
    bc78:	f7fd ffe2 	bl	9c40 <_sbrk>
    bc7c:	1c43      	adds	r3, r0, #1
    bc7e:	d103      	bne.n	bc88 <_sbrk_r+0x1c>
    bc80:	6823      	ldr	r3, [r4, #0]
    bc82:	2b00      	cmp	r3, #0
    bc84:	d000      	beq.n	bc88 <_sbrk_r+0x1c>
    bc86:	602b      	str	r3, [r5, #0]
    bc88:	bd70      	pop	{r4, r5, r6, pc}
    bc8a:	46c0      	nop			; (mov r8, r8)
    bc8c:	20000a40 	.word	0x20000a40

0000bc90 <setbuf>:
    bc90:	424a      	negs	r2, r1
    bc92:	414a      	adcs	r2, r1
    bc94:	2380      	movs	r3, #128	; 0x80
    bc96:	b510      	push	{r4, lr}
    bc98:	0052      	lsls	r2, r2, #1
    bc9a:	00db      	lsls	r3, r3, #3
    bc9c:	f000 f802 	bl	bca4 <setvbuf>
    bca0:	bd10      	pop	{r4, pc}
	...

0000bca4 <setvbuf>:
    bca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bca6:	001d      	movs	r5, r3
    bca8:	4b4f      	ldr	r3, [pc, #316]	; (bde8 <setvbuf+0x144>)
    bcaa:	b085      	sub	sp, #20
    bcac:	681e      	ldr	r6, [r3, #0]
    bcae:	0004      	movs	r4, r0
    bcb0:	000f      	movs	r7, r1
    bcb2:	9200      	str	r2, [sp, #0]
    bcb4:	2e00      	cmp	r6, #0
    bcb6:	d005      	beq.n	bcc4 <setvbuf+0x20>
    bcb8:	69b3      	ldr	r3, [r6, #24]
    bcba:	2b00      	cmp	r3, #0
    bcbc:	d102      	bne.n	bcc4 <setvbuf+0x20>
    bcbe:	0030      	movs	r0, r6
    bcc0:	f001 f9e8 	bl	d094 <__sinit>
    bcc4:	4b49      	ldr	r3, [pc, #292]	; (bdec <setvbuf+0x148>)
    bcc6:	429c      	cmp	r4, r3
    bcc8:	d150      	bne.n	bd6c <setvbuf+0xc8>
    bcca:	6874      	ldr	r4, [r6, #4]
    bccc:	9b00      	ldr	r3, [sp, #0]
    bcce:	2b02      	cmp	r3, #2
    bcd0:	d005      	beq.n	bcde <setvbuf+0x3a>
    bcd2:	2b01      	cmp	r3, #1
    bcd4:	d900      	bls.n	bcd8 <setvbuf+0x34>
    bcd6:	e084      	b.n	bde2 <setvbuf+0x13e>
    bcd8:	2d00      	cmp	r5, #0
    bcda:	da00      	bge.n	bcde <setvbuf+0x3a>
    bcdc:	e081      	b.n	bde2 <setvbuf+0x13e>
    bcde:	0021      	movs	r1, r4
    bce0:	0030      	movs	r0, r6
    bce2:	f001 f969 	bl	cfb8 <_fflush_r>
    bce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bce8:	2900      	cmp	r1, #0
    bcea:	d008      	beq.n	bcfe <setvbuf+0x5a>
    bcec:	0023      	movs	r3, r4
    bcee:	3344      	adds	r3, #68	; 0x44
    bcf0:	4299      	cmp	r1, r3
    bcf2:	d002      	beq.n	bcfa <setvbuf+0x56>
    bcf4:	0030      	movs	r0, r6
    bcf6:	f7ff fa09 	bl	b10c <_free_r>
    bcfa:	2300      	movs	r3, #0
    bcfc:	6363      	str	r3, [r4, #52]	; 0x34
    bcfe:	2300      	movs	r3, #0
    bd00:	61a3      	str	r3, [r4, #24]
    bd02:	6063      	str	r3, [r4, #4]
    bd04:	89a3      	ldrh	r3, [r4, #12]
    bd06:	061b      	lsls	r3, r3, #24
    bd08:	d503      	bpl.n	bd12 <setvbuf+0x6e>
    bd0a:	6921      	ldr	r1, [r4, #16]
    bd0c:	0030      	movs	r0, r6
    bd0e:	f7ff f9fd 	bl	b10c <_free_r>
    bd12:	89a3      	ldrh	r3, [r4, #12]
    bd14:	4a36      	ldr	r2, [pc, #216]	; (bdf0 <setvbuf+0x14c>)
    bd16:	4013      	ands	r3, r2
    bd18:	81a3      	strh	r3, [r4, #12]
    bd1a:	9b00      	ldr	r3, [sp, #0]
    bd1c:	2b02      	cmp	r3, #2
    bd1e:	d05a      	beq.n	bdd6 <setvbuf+0x132>
    bd20:	ab03      	add	r3, sp, #12
    bd22:	aa02      	add	r2, sp, #8
    bd24:	0021      	movs	r1, r4
    bd26:	0030      	movs	r0, r6
    bd28:	f001 fa58 	bl	d1dc <__swhatbuf_r>
    bd2c:	89a3      	ldrh	r3, [r4, #12]
    bd2e:	4318      	orrs	r0, r3
    bd30:	81a0      	strh	r0, [r4, #12]
    bd32:	2d00      	cmp	r5, #0
    bd34:	d124      	bne.n	bd80 <setvbuf+0xdc>
    bd36:	9d02      	ldr	r5, [sp, #8]
    bd38:	0028      	movs	r0, r5
    bd3a:	f7ff f9af 	bl	b09c <malloc>
    bd3e:	9501      	str	r5, [sp, #4]
    bd40:	1e07      	subs	r7, r0, #0
    bd42:	d142      	bne.n	bdca <setvbuf+0x126>
    bd44:	9b02      	ldr	r3, [sp, #8]
    bd46:	9301      	str	r3, [sp, #4]
    bd48:	42ab      	cmp	r3, r5
    bd4a:	d139      	bne.n	bdc0 <setvbuf+0x11c>
    bd4c:	2001      	movs	r0, #1
    bd4e:	4240      	negs	r0, r0
    bd50:	2302      	movs	r3, #2
    bd52:	89a2      	ldrh	r2, [r4, #12]
    bd54:	4313      	orrs	r3, r2
    bd56:	81a3      	strh	r3, [r4, #12]
    bd58:	2300      	movs	r3, #0
    bd5a:	60a3      	str	r3, [r4, #8]
    bd5c:	0023      	movs	r3, r4
    bd5e:	3347      	adds	r3, #71	; 0x47
    bd60:	6023      	str	r3, [r4, #0]
    bd62:	6123      	str	r3, [r4, #16]
    bd64:	2301      	movs	r3, #1
    bd66:	6163      	str	r3, [r4, #20]
    bd68:	b005      	add	sp, #20
    bd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd6c:	4b21      	ldr	r3, [pc, #132]	; (bdf4 <setvbuf+0x150>)
    bd6e:	429c      	cmp	r4, r3
    bd70:	d101      	bne.n	bd76 <setvbuf+0xd2>
    bd72:	68b4      	ldr	r4, [r6, #8]
    bd74:	e7aa      	b.n	bccc <setvbuf+0x28>
    bd76:	4b20      	ldr	r3, [pc, #128]	; (bdf8 <setvbuf+0x154>)
    bd78:	429c      	cmp	r4, r3
    bd7a:	d1a7      	bne.n	bccc <setvbuf+0x28>
    bd7c:	68f4      	ldr	r4, [r6, #12]
    bd7e:	e7a5      	b.n	bccc <setvbuf+0x28>
    bd80:	2f00      	cmp	r7, #0
    bd82:	d0d9      	beq.n	bd38 <setvbuf+0x94>
    bd84:	69b3      	ldr	r3, [r6, #24]
    bd86:	2b00      	cmp	r3, #0
    bd88:	d102      	bne.n	bd90 <setvbuf+0xec>
    bd8a:	0030      	movs	r0, r6
    bd8c:	f001 f982 	bl	d094 <__sinit>
    bd90:	9b00      	ldr	r3, [sp, #0]
    bd92:	2b01      	cmp	r3, #1
    bd94:	d103      	bne.n	bd9e <setvbuf+0xfa>
    bd96:	89a3      	ldrh	r3, [r4, #12]
    bd98:	9a00      	ldr	r2, [sp, #0]
    bd9a:	431a      	orrs	r2, r3
    bd9c:	81a2      	strh	r2, [r4, #12]
    bd9e:	2008      	movs	r0, #8
    bda0:	89a3      	ldrh	r3, [r4, #12]
    bda2:	6027      	str	r7, [r4, #0]
    bda4:	6127      	str	r7, [r4, #16]
    bda6:	6165      	str	r5, [r4, #20]
    bda8:	4018      	ands	r0, r3
    bdaa:	d018      	beq.n	bdde <setvbuf+0x13a>
    bdac:	2001      	movs	r0, #1
    bdae:	4018      	ands	r0, r3
    bdb0:	2300      	movs	r3, #0
    bdb2:	4298      	cmp	r0, r3
    bdb4:	d011      	beq.n	bdda <setvbuf+0x136>
    bdb6:	426d      	negs	r5, r5
    bdb8:	60a3      	str	r3, [r4, #8]
    bdba:	61a5      	str	r5, [r4, #24]
    bdbc:	0018      	movs	r0, r3
    bdbe:	e7d3      	b.n	bd68 <setvbuf+0xc4>
    bdc0:	9801      	ldr	r0, [sp, #4]
    bdc2:	f7ff f96b 	bl	b09c <malloc>
    bdc6:	1e07      	subs	r7, r0, #0
    bdc8:	d0c0      	beq.n	bd4c <setvbuf+0xa8>
    bdca:	2380      	movs	r3, #128	; 0x80
    bdcc:	89a2      	ldrh	r2, [r4, #12]
    bdce:	9d01      	ldr	r5, [sp, #4]
    bdd0:	4313      	orrs	r3, r2
    bdd2:	81a3      	strh	r3, [r4, #12]
    bdd4:	e7d6      	b.n	bd84 <setvbuf+0xe0>
    bdd6:	2000      	movs	r0, #0
    bdd8:	e7ba      	b.n	bd50 <setvbuf+0xac>
    bdda:	60a5      	str	r5, [r4, #8]
    bddc:	e7c4      	b.n	bd68 <setvbuf+0xc4>
    bdde:	60a0      	str	r0, [r4, #8]
    bde0:	e7c2      	b.n	bd68 <setvbuf+0xc4>
    bde2:	2001      	movs	r0, #1
    bde4:	4240      	negs	r0, r0
    bde6:	e7bf      	b.n	bd68 <setvbuf+0xc4>
    bde8:	2000000c 	.word	0x2000000c
    bdec:	00012a7c 	.word	0x00012a7c
    bdf0:	fffff35c 	.word	0xfffff35c
    bdf4:	00012a9c 	.word	0x00012a9c
    bdf8:	00012a5c 	.word	0x00012a5c

0000bdfc <siprintf>:
    bdfc:	b40e      	push	{r1, r2, r3}
    bdfe:	b510      	push	{r4, lr}
    be00:	b09d      	sub	sp, #116	; 0x74
    be02:	a902      	add	r1, sp, #8
    be04:	9002      	str	r0, [sp, #8]
    be06:	6108      	str	r0, [r1, #16]
    be08:	480b      	ldr	r0, [pc, #44]	; (be38 <siprintf+0x3c>)
    be0a:	2482      	movs	r4, #130	; 0x82
    be0c:	6088      	str	r0, [r1, #8]
    be0e:	6148      	str	r0, [r1, #20]
    be10:	2001      	movs	r0, #1
    be12:	4240      	negs	r0, r0
    be14:	ab1f      	add	r3, sp, #124	; 0x7c
    be16:	81c8      	strh	r0, [r1, #14]
    be18:	4808      	ldr	r0, [pc, #32]	; (be3c <siprintf+0x40>)
    be1a:	cb04      	ldmia	r3!, {r2}
    be1c:	00a4      	lsls	r4, r4, #2
    be1e:	6800      	ldr	r0, [r0, #0]
    be20:	9301      	str	r3, [sp, #4]
    be22:	818c      	strh	r4, [r1, #12]
    be24:	f001 fdb8 	bl	d998 <_svfiprintf_r>
    be28:	2300      	movs	r3, #0
    be2a:	9a02      	ldr	r2, [sp, #8]
    be2c:	7013      	strb	r3, [r2, #0]
    be2e:	b01d      	add	sp, #116	; 0x74
    be30:	bc10      	pop	{r4}
    be32:	bc08      	pop	{r3}
    be34:	b003      	add	sp, #12
    be36:	4718      	bx	r3
    be38:	7fffffff 	.word	0x7fffffff
    be3c:	2000000c 	.word	0x2000000c

0000be40 <strcmp>:
    be40:	7802      	ldrb	r2, [r0, #0]
    be42:	780b      	ldrb	r3, [r1, #0]
    be44:	2a00      	cmp	r2, #0
    be46:	d003      	beq.n	be50 <strcmp+0x10>
    be48:	3001      	adds	r0, #1
    be4a:	3101      	adds	r1, #1
    be4c:	429a      	cmp	r2, r3
    be4e:	d0f7      	beq.n	be40 <strcmp>
    be50:	1ad0      	subs	r0, r2, r3
    be52:	4770      	bx	lr

0000be54 <strcpy>:
    be54:	1c03      	adds	r3, r0, #0
    be56:	780a      	ldrb	r2, [r1, #0]
    be58:	3101      	adds	r1, #1
    be5a:	701a      	strb	r2, [r3, #0]
    be5c:	3301      	adds	r3, #1
    be5e:	2a00      	cmp	r2, #0
    be60:	d1f9      	bne.n	be56 <strcpy+0x2>
    be62:	4770      	bx	lr

0000be64 <strdup>:
    be64:	b510      	push	{r4, lr}
    be66:	4b03      	ldr	r3, [pc, #12]	; (be74 <strdup+0x10>)
    be68:	0001      	movs	r1, r0
    be6a:	6818      	ldr	r0, [r3, #0]
    be6c:	f000 f804 	bl	be78 <_strdup_r>
    be70:	bd10      	pop	{r4, pc}
    be72:	46c0      	nop			; (mov r8, r8)
    be74:	2000000c 	.word	0x2000000c

0000be78 <_strdup_r>:
    be78:	b570      	push	{r4, r5, r6, lr}
    be7a:	0005      	movs	r5, r0
    be7c:	0008      	movs	r0, r1
    be7e:	000e      	movs	r6, r1
    be80:	f000 f80d 	bl	be9e <strlen>
    be84:	1c44      	adds	r4, r0, #1
    be86:	0021      	movs	r1, r4
    be88:	0028      	movs	r0, r5
    be8a:	f7ff f989 	bl	b1a0 <_malloc_r>
    be8e:	1e05      	subs	r5, r0, #0
    be90:	d003      	beq.n	be9a <_strdup_r+0x22>
    be92:	0022      	movs	r2, r4
    be94:	0031      	movs	r1, r6
    be96:	f7ff f915 	bl	b0c4 <memcpy>
    be9a:	0028      	movs	r0, r5
    be9c:	bd70      	pop	{r4, r5, r6, pc}

0000be9e <strlen>:
    be9e:	2300      	movs	r3, #0
    bea0:	5cc2      	ldrb	r2, [r0, r3]
    bea2:	3301      	adds	r3, #1
    bea4:	2a00      	cmp	r2, #0
    bea6:	d1fb      	bne.n	bea0 <strlen+0x2>
    bea8:	1e58      	subs	r0, r3, #1
    beaa:	4770      	bx	lr

0000beac <strncmp>:
    beac:	2300      	movs	r3, #0
    beae:	b530      	push	{r4, r5, lr}
    beb0:	429a      	cmp	r2, r3
    beb2:	d00a      	beq.n	beca <strncmp+0x1e>
    beb4:	3a01      	subs	r2, #1
    beb6:	5cc4      	ldrb	r4, [r0, r3]
    beb8:	5ccd      	ldrb	r5, [r1, r3]
    beba:	42ac      	cmp	r4, r5
    bebc:	d104      	bne.n	bec8 <strncmp+0x1c>
    bebe:	429a      	cmp	r2, r3
    bec0:	d002      	beq.n	bec8 <strncmp+0x1c>
    bec2:	3301      	adds	r3, #1
    bec4:	2c00      	cmp	r4, #0
    bec6:	d1f6      	bne.n	beb6 <strncmp+0xa>
    bec8:	1b63      	subs	r3, r4, r5
    beca:	0018      	movs	r0, r3
    becc:	bd30      	pop	{r4, r5, pc}

0000bece <strstr>:
    bece:	b510      	push	{r4, lr}
    bed0:	0002      	movs	r2, r0
    bed2:	7800      	ldrb	r0, [r0, #0]
    bed4:	2800      	cmp	r0, #0
    bed6:	d104      	bne.n	bee2 <strstr+0x14>
    bed8:	7809      	ldrb	r1, [r1, #0]
    beda:	2900      	cmp	r1, #0
    bedc:	d00d      	beq.n	befa <strstr+0x2c>
    bede:	bd10      	pop	{r4, pc}
    bee0:	3201      	adds	r2, #1
    bee2:	7810      	ldrb	r0, [r2, #0]
    bee4:	2800      	cmp	r0, #0
    bee6:	d0fa      	beq.n	bede <strstr+0x10>
    bee8:	2300      	movs	r3, #0
    beea:	5cc8      	ldrb	r0, [r1, r3]
    beec:	2800      	cmp	r0, #0
    beee:	d004      	beq.n	befa <strstr+0x2c>
    bef0:	5cd4      	ldrb	r4, [r2, r3]
    bef2:	4284      	cmp	r4, r0
    bef4:	d1f4      	bne.n	bee0 <strstr+0x12>
    bef6:	3301      	adds	r3, #1
    bef8:	e7f7      	b.n	beea <strstr+0x1c>
    befa:	0010      	movs	r0, r2
    befc:	e7ef      	b.n	bede <strstr+0x10>
	...

0000bf00 <_strtol_l.isra.0>:
    bf00:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf02:	001f      	movs	r7, r3
    bf04:	000e      	movs	r6, r1
    bf06:	b087      	sub	sp, #28
    bf08:	9005      	str	r0, [sp, #20]
    bf0a:	9103      	str	r1, [sp, #12]
    bf0c:	9202      	str	r2, [sp, #8]
    bf0e:	980c      	ldr	r0, [sp, #48]	; 0x30
    bf10:	7834      	ldrb	r4, [r6, #0]
    bf12:	f001 f954 	bl	d1be <__locale_ctype_ptr_l>
    bf16:	2208      	movs	r2, #8
    bf18:	1900      	adds	r0, r0, r4
    bf1a:	7843      	ldrb	r3, [r0, #1]
    bf1c:	1c75      	adds	r5, r6, #1
    bf1e:	4013      	ands	r3, r2
    bf20:	d10c      	bne.n	bf3c <_strtol_l.isra.0+0x3c>
    bf22:	2c2d      	cmp	r4, #45	; 0x2d
    bf24:	d10c      	bne.n	bf40 <_strtol_l.isra.0+0x40>
    bf26:	3301      	adds	r3, #1
    bf28:	782c      	ldrb	r4, [r5, #0]
    bf2a:	9301      	str	r3, [sp, #4]
    bf2c:	1cb5      	adds	r5, r6, #2
    bf2e:	2f00      	cmp	r7, #0
    bf30:	d00c      	beq.n	bf4c <_strtol_l.isra.0+0x4c>
    bf32:	2f10      	cmp	r7, #16
    bf34:	d114      	bne.n	bf60 <_strtol_l.isra.0+0x60>
    bf36:	2c30      	cmp	r4, #48	; 0x30
    bf38:	d00a      	beq.n	bf50 <_strtol_l.isra.0+0x50>
    bf3a:	e011      	b.n	bf60 <_strtol_l.isra.0+0x60>
    bf3c:	002e      	movs	r6, r5
    bf3e:	e7e6      	b.n	bf0e <_strtol_l.isra.0+0xe>
    bf40:	9301      	str	r3, [sp, #4]
    bf42:	2c2b      	cmp	r4, #43	; 0x2b
    bf44:	d1f3      	bne.n	bf2e <_strtol_l.isra.0+0x2e>
    bf46:	782c      	ldrb	r4, [r5, #0]
    bf48:	1cb5      	adds	r5, r6, #2
    bf4a:	e7f0      	b.n	bf2e <_strtol_l.isra.0+0x2e>
    bf4c:	2c30      	cmp	r4, #48	; 0x30
    bf4e:	d12f      	bne.n	bfb0 <_strtol_l.isra.0+0xb0>
    bf50:	2220      	movs	r2, #32
    bf52:	782b      	ldrb	r3, [r5, #0]
    bf54:	4393      	bics	r3, r2
    bf56:	2b58      	cmp	r3, #88	; 0x58
    bf58:	d151      	bne.n	bffe <_strtol_l.isra.0+0xfe>
    bf5a:	2710      	movs	r7, #16
    bf5c:	786c      	ldrb	r4, [r5, #1]
    bf5e:	3502      	adds	r5, #2
    bf60:	9b01      	ldr	r3, [sp, #4]
    bf62:	4a29      	ldr	r2, [pc, #164]	; (c008 <_strtol_l.isra.0+0x108>)
    bf64:	0039      	movs	r1, r7
    bf66:	189e      	adds	r6, r3, r2
    bf68:	0030      	movs	r0, r6
    bf6a:	f002 f91b 	bl	e1a4 <__aeabi_uidivmod>
    bf6e:	0030      	movs	r0, r6
    bf70:	9104      	str	r1, [sp, #16]
    bf72:	0039      	movs	r1, r7
    bf74:	f002 f890 	bl	e098 <__udivsi3>
    bf78:	2101      	movs	r1, #1
    bf7a:	2300      	movs	r3, #0
    bf7c:	4249      	negs	r1, r1
    bf7e:	0002      	movs	r2, r0
    bf80:	468c      	mov	ip, r1
    bf82:	0018      	movs	r0, r3
    bf84:	0021      	movs	r1, r4
    bf86:	3930      	subs	r1, #48	; 0x30
    bf88:	2909      	cmp	r1, #9
    bf8a:	d813      	bhi.n	bfb4 <_strtol_l.isra.0+0xb4>
    bf8c:	000c      	movs	r4, r1
    bf8e:	42a7      	cmp	r7, r4
    bf90:	dd1c      	ble.n	bfcc <_strtol_l.isra.0+0xcc>
    bf92:	1c59      	adds	r1, r3, #1
    bf94:	d009      	beq.n	bfaa <_strtol_l.isra.0+0xaa>
    bf96:	4663      	mov	r3, ip
    bf98:	4282      	cmp	r2, r0
    bf9a:	d306      	bcc.n	bfaa <_strtol_l.isra.0+0xaa>
    bf9c:	d102      	bne.n	bfa4 <_strtol_l.isra.0+0xa4>
    bf9e:	9904      	ldr	r1, [sp, #16]
    bfa0:	42a1      	cmp	r1, r4
    bfa2:	db02      	blt.n	bfaa <_strtol_l.isra.0+0xaa>
    bfa4:	2301      	movs	r3, #1
    bfa6:	4378      	muls	r0, r7
    bfa8:	1820      	adds	r0, r4, r0
    bfaa:	782c      	ldrb	r4, [r5, #0]
    bfac:	3501      	adds	r5, #1
    bfae:	e7e9      	b.n	bf84 <_strtol_l.isra.0+0x84>
    bfb0:	270a      	movs	r7, #10
    bfb2:	e7d5      	b.n	bf60 <_strtol_l.isra.0+0x60>
    bfb4:	0021      	movs	r1, r4
    bfb6:	3941      	subs	r1, #65	; 0x41
    bfb8:	2919      	cmp	r1, #25
    bfba:	d801      	bhi.n	bfc0 <_strtol_l.isra.0+0xc0>
    bfbc:	3c37      	subs	r4, #55	; 0x37
    bfbe:	e7e6      	b.n	bf8e <_strtol_l.isra.0+0x8e>
    bfc0:	0021      	movs	r1, r4
    bfc2:	3961      	subs	r1, #97	; 0x61
    bfc4:	2919      	cmp	r1, #25
    bfc6:	d801      	bhi.n	bfcc <_strtol_l.isra.0+0xcc>
    bfc8:	3c57      	subs	r4, #87	; 0x57
    bfca:	e7e0      	b.n	bf8e <_strtol_l.isra.0+0x8e>
    bfcc:	1c5a      	adds	r2, r3, #1
    bfce:	d108      	bne.n	bfe2 <_strtol_l.isra.0+0xe2>
    bfd0:	9a05      	ldr	r2, [sp, #20]
    bfd2:	3323      	adds	r3, #35	; 0x23
    bfd4:	6013      	str	r3, [r2, #0]
    bfd6:	9b02      	ldr	r3, [sp, #8]
    bfd8:	0030      	movs	r0, r6
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d10b      	bne.n	bff6 <_strtol_l.isra.0+0xf6>
    bfde:	b007      	add	sp, #28
    bfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfe2:	9a01      	ldr	r2, [sp, #4]
    bfe4:	2a00      	cmp	r2, #0
    bfe6:	d000      	beq.n	bfea <_strtol_l.isra.0+0xea>
    bfe8:	4240      	negs	r0, r0
    bfea:	9a02      	ldr	r2, [sp, #8]
    bfec:	2a00      	cmp	r2, #0
    bfee:	d0f6      	beq.n	bfde <_strtol_l.isra.0+0xde>
    bff0:	9a03      	ldr	r2, [sp, #12]
    bff2:	2b00      	cmp	r3, #0
    bff4:	d000      	beq.n	bff8 <_strtol_l.isra.0+0xf8>
    bff6:	1e6a      	subs	r2, r5, #1
    bff8:	9b02      	ldr	r3, [sp, #8]
    bffa:	601a      	str	r2, [r3, #0]
    bffc:	e7ef      	b.n	bfde <_strtol_l.isra.0+0xde>
    bffe:	2430      	movs	r4, #48	; 0x30
    c000:	2f00      	cmp	r7, #0
    c002:	d1ad      	bne.n	bf60 <_strtol_l.isra.0+0x60>
    c004:	3708      	adds	r7, #8
    c006:	e7ab      	b.n	bf60 <_strtol_l.isra.0+0x60>
    c008:	7fffffff 	.word	0x7fffffff

0000c00c <strtol>:
    c00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c00e:	0013      	movs	r3, r2
    c010:	4a06      	ldr	r2, [pc, #24]	; (c02c <strtol+0x20>)
    c012:	0005      	movs	r5, r0
    c014:	6810      	ldr	r0, [r2, #0]
    c016:	6a04      	ldr	r4, [r0, #32]
    c018:	2c00      	cmp	r4, #0
    c01a:	d100      	bne.n	c01e <strtol+0x12>
    c01c:	4c04      	ldr	r4, [pc, #16]	; (c030 <strtol+0x24>)
    c01e:	000a      	movs	r2, r1
    c020:	9400      	str	r4, [sp, #0]
    c022:	0029      	movs	r1, r5
    c024:	f7ff ff6c 	bl	bf00 <_strtol_l.isra.0>
    c028:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c02a:	46c0      	nop			; (mov r8, r8)
    c02c:	2000000c 	.word	0x2000000c
    c030:	20000070 	.word	0x20000070

0000c034 <__swbuf_r>:
    c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c036:	0005      	movs	r5, r0
    c038:	000e      	movs	r6, r1
    c03a:	0014      	movs	r4, r2
    c03c:	2800      	cmp	r0, #0
    c03e:	d004      	beq.n	c04a <__swbuf_r+0x16>
    c040:	6983      	ldr	r3, [r0, #24]
    c042:	2b00      	cmp	r3, #0
    c044:	d101      	bne.n	c04a <__swbuf_r+0x16>
    c046:	f001 f825 	bl	d094 <__sinit>
    c04a:	4b22      	ldr	r3, [pc, #136]	; (c0d4 <__swbuf_r+0xa0>)
    c04c:	429c      	cmp	r4, r3
    c04e:	d12d      	bne.n	c0ac <__swbuf_r+0x78>
    c050:	686c      	ldr	r4, [r5, #4]
    c052:	69a3      	ldr	r3, [r4, #24]
    c054:	60a3      	str	r3, [r4, #8]
    c056:	89a3      	ldrh	r3, [r4, #12]
    c058:	071b      	lsls	r3, r3, #28
    c05a:	d531      	bpl.n	c0c0 <__swbuf_r+0x8c>
    c05c:	6923      	ldr	r3, [r4, #16]
    c05e:	2b00      	cmp	r3, #0
    c060:	d02e      	beq.n	c0c0 <__swbuf_r+0x8c>
    c062:	6823      	ldr	r3, [r4, #0]
    c064:	6922      	ldr	r2, [r4, #16]
    c066:	b2f7      	uxtb	r7, r6
    c068:	1a98      	subs	r0, r3, r2
    c06a:	6963      	ldr	r3, [r4, #20]
    c06c:	b2f6      	uxtb	r6, r6
    c06e:	4298      	cmp	r0, r3
    c070:	db05      	blt.n	c07e <__swbuf_r+0x4a>
    c072:	0021      	movs	r1, r4
    c074:	0028      	movs	r0, r5
    c076:	f000 ff9f 	bl	cfb8 <_fflush_r>
    c07a:	2800      	cmp	r0, #0
    c07c:	d126      	bne.n	c0cc <__swbuf_r+0x98>
    c07e:	68a3      	ldr	r3, [r4, #8]
    c080:	3001      	adds	r0, #1
    c082:	3b01      	subs	r3, #1
    c084:	60a3      	str	r3, [r4, #8]
    c086:	6823      	ldr	r3, [r4, #0]
    c088:	1c5a      	adds	r2, r3, #1
    c08a:	6022      	str	r2, [r4, #0]
    c08c:	701f      	strb	r7, [r3, #0]
    c08e:	6963      	ldr	r3, [r4, #20]
    c090:	4298      	cmp	r0, r3
    c092:	d004      	beq.n	c09e <__swbuf_r+0x6a>
    c094:	89a3      	ldrh	r3, [r4, #12]
    c096:	07db      	lsls	r3, r3, #31
    c098:	d51a      	bpl.n	c0d0 <__swbuf_r+0x9c>
    c09a:	2e0a      	cmp	r6, #10
    c09c:	d118      	bne.n	c0d0 <__swbuf_r+0x9c>
    c09e:	0021      	movs	r1, r4
    c0a0:	0028      	movs	r0, r5
    c0a2:	f000 ff89 	bl	cfb8 <_fflush_r>
    c0a6:	2800      	cmp	r0, #0
    c0a8:	d012      	beq.n	c0d0 <__swbuf_r+0x9c>
    c0aa:	e00f      	b.n	c0cc <__swbuf_r+0x98>
    c0ac:	4b0a      	ldr	r3, [pc, #40]	; (c0d8 <__swbuf_r+0xa4>)
    c0ae:	429c      	cmp	r4, r3
    c0b0:	d101      	bne.n	c0b6 <__swbuf_r+0x82>
    c0b2:	68ac      	ldr	r4, [r5, #8]
    c0b4:	e7cd      	b.n	c052 <__swbuf_r+0x1e>
    c0b6:	4b09      	ldr	r3, [pc, #36]	; (c0dc <__swbuf_r+0xa8>)
    c0b8:	429c      	cmp	r4, r3
    c0ba:	d1ca      	bne.n	c052 <__swbuf_r+0x1e>
    c0bc:	68ec      	ldr	r4, [r5, #12]
    c0be:	e7c8      	b.n	c052 <__swbuf_r+0x1e>
    c0c0:	0021      	movs	r1, r4
    c0c2:	0028      	movs	r0, r5
    c0c4:	f000 f80c 	bl	c0e0 <__swsetup_r>
    c0c8:	2800      	cmp	r0, #0
    c0ca:	d0ca      	beq.n	c062 <__swbuf_r+0x2e>
    c0cc:	2601      	movs	r6, #1
    c0ce:	4276      	negs	r6, r6
    c0d0:	0030      	movs	r0, r6
    c0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0d4:	00012a7c 	.word	0x00012a7c
    c0d8:	00012a9c 	.word	0x00012a9c
    c0dc:	00012a5c 	.word	0x00012a5c

0000c0e0 <__swsetup_r>:
    c0e0:	4b36      	ldr	r3, [pc, #216]	; (c1bc <__swsetup_r+0xdc>)
    c0e2:	b570      	push	{r4, r5, r6, lr}
    c0e4:	681d      	ldr	r5, [r3, #0]
    c0e6:	0006      	movs	r6, r0
    c0e8:	000c      	movs	r4, r1
    c0ea:	2d00      	cmp	r5, #0
    c0ec:	d005      	beq.n	c0fa <__swsetup_r+0x1a>
    c0ee:	69ab      	ldr	r3, [r5, #24]
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	d102      	bne.n	c0fa <__swsetup_r+0x1a>
    c0f4:	0028      	movs	r0, r5
    c0f6:	f000 ffcd 	bl	d094 <__sinit>
    c0fa:	4b31      	ldr	r3, [pc, #196]	; (c1c0 <__swsetup_r+0xe0>)
    c0fc:	429c      	cmp	r4, r3
    c0fe:	d10f      	bne.n	c120 <__swsetup_r+0x40>
    c100:	686c      	ldr	r4, [r5, #4]
    c102:	230c      	movs	r3, #12
    c104:	5ee2      	ldrsh	r2, [r4, r3]
    c106:	b293      	uxth	r3, r2
    c108:	0719      	lsls	r1, r3, #28
    c10a:	d42d      	bmi.n	c168 <__swsetup_r+0x88>
    c10c:	06d9      	lsls	r1, r3, #27
    c10e:	d411      	bmi.n	c134 <__swsetup_r+0x54>
    c110:	2309      	movs	r3, #9
    c112:	2001      	movs	r0, #1
    c114:	6033      	str	r3, [r6, #0]
    c116:	3337      	adds	r3, #55	; 0x37
    c118:	4313      	orrs	r3, r2
    c11a:	81a3      	strh	r3, [r4, #12]
    c11c:	4240      	negs	r0, r0
    c11e:	bd70      	pop	{r4, r5, r6, pc}
    c120:	4b28      	ldr	r3, [pc, #160]	; (c1c4 <__swsetup_r+0xe4>)
    c122:	429c      	cmp	r4, r3
    c124:	d101      	bne.n	c12a <__swsetup_r+0x4a>
    c126:	68ac      	ldr	r4, [r5, #8]
    c128:	e7eb      	b.n	c102 <__swsetup_r+0x22>
    c12a:	4b27      	ldr	r3, [pc, #156]	; (c1c8 <__swsetup_r+0xe8>)
    c12c:	429c      	cmp	r4, r3
    c12e:	d1e8      	bne.n	c102 <__swsetup_r+0x22>
    c130:	68ec      	ldr	r4, [r5, #12]
    c132:	e7e6      	b.n	c102 <__swsetup_r+0x22>
    c134:	075b      	lsls	r3, r3, #29
    c136:	d513      	bpl.n	c160 <__swsetup_r+0x80>
    c138:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c13a:	2900      	cmp	r1, #0
    c13c:	d008      	beq.n	c150 <__swsetup_r+0x70>
    c13e:	0023      	movs	r3, r4
    c140:	3344      	adds	r3, #68	; 0x44
    c142:	4299      	cmp	r1, r3
    c144:	d002      	beq.n	c14c <__swsetup_r+0x6c>
    c146:	0030      	movs	r0, r6
    c148:	f7fe ffe0 	bl	b10c <_free_r>
    c14c:	2300      	movs	r3, #0
    c14e:	6363      	str	r3, [r4, #52]	; 0x34
    c150:	2224      	movs	r2, #36	; 0x24
    c152:	89a3      	ldrh	r3, [r4, #12]
    c154:	4393      	bics	r3, r2
    c156:	81a3      	strh	r3, [r4, #12]
    c158:	2300      	movs	r3, #0
    c15a:	6063      	str	r3, [r4, #4]
    c15c:	6923      	ldr	r3, [r4, #16]
    c15e:	6023      	str	r3, [r4, #0]
    c160:	2308      	movs	r3, #8
    c162:	89a2      	ldrh	r2, [r4, #12]
    c164:	4313      	orrs	r3, r2
    c166:	81a3      	strh	r3, [r4, #12]
    c168:	6923      	ldr	r3, [r4, #16]
    c16a:	2b00      	cmp	r3, #0
    c16c:	d10b      	bne.n	c186 <__swsetup_r+0xa6>
    c16e:	21a0      	movs	r1, #160	; 0xa0
    c170:	2280      	movs	r2, #128	; 0x80
    c172:	89a3      	ldrh	r3, [r4, #12]
    c174:	0089      	lsls	r1, r1, #2
    c176:	0092      	lsls	r2, r2, #2
    c178:	400b      	ands	r3, r1
    c17a:	4293      	cmp	r3, r2
    c17c:	d003      	beq.n	c186 <__swsetup_r+0xa6>
    c17e:	0021      	movs	r1, r4
    c180:	0030      	movs	r0, r6
    c182:	f001 f853 	bl	d22c <__smakebuf_r>
    c186:	2301      	movs	r3, #1
    c188:	89a2      	ldrh	r2, [r4, #12]
    c18a:	4013      	ands	r3, r2
    c18c:	d011      	beq.n	c1b2 <__swsetup_r+0xd2>
    c18e:	2300      	movs	r3, #0
    c190:	60a3      	str	r3, [r4, #8]
    c192:	6963      	ldr	r3, [r4, #20]
    c194:	425b      	negs	r3, r3
    c196:	61a3      	str	r3, [r4, #24]
    c198:	2000      	movs	r0, #0
    c19a:	6923      	ldr	r3, [r4, #16]
    c19c:	4283      	cmp	r3, r0
    c19e:	d1be      	bne.n	c11e <__swsetup_r+0x3e>
    c1a0:	230c      	movs	r3, #12
    c1a2:	5ee2      	ldrsh	r2, [r4, r3]
    c1a4:	0613      	lsls	r3, r2, #24
    c1a6:	d5ba      	bpl.n	c11e <__swsetup_r+0x3e>
    c1a8:	2340      	movs	r3, #64	; 0x40
    c1aa:	4313      	orrs	r3, r2
    c1ac:	81a3      	strh	r3, [r4, #12]
    c1ae:	3801      	subs	r0, #1
    c1b0:	e7b5      	b.n	c11e <__swsetup_r+0x3e>
    c1b2:	0792      	lsls	r2, r2, #30
    c1b4:	d400      	bmi.n	c1b8 <__swsetup_r+0xd8>
    c1b6:	6963      	ldr	r3, [r4, #20]
    c1b8:	60a3      	str	r3, [r4, #8]
    c1ba:	e7ed      	b.n	c198 <__swsetup_r+0xb8>
    c1bc:	2000000c 	.word	0x2000000c
    c1c0:	00012a7c 	.word	0x00012a7c
    c1c4:	00012a9c 	.word	0x00012a9c
    c1c8:	00012a5c 	.word	0x00012a5c

0000c1cc <quorem>:
    c1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1ce:	6903      	ldr	r3, [r0, #16]
    c1d0:	690c      	ldr	r4, [r1, #16]
    c1d2:	b089      	sub	sp, #36	; 0x24
    c1d4:	0007      	movs	r7, r0
    c1d6:	9105      	str	r1, [sp, #20]
    c1d8:	2600      	movs	r6, #0
    c1da:	429c      	cmp	r4, r3
    c1dc:	dc6d      	bgt.n	c2ba <quorem+0xee>
    c1de:	000b      	movs	r3, r1
    c1e0:	3c01      	subs	r4, #1
    c1e2:	3314      	adds	r3, #20
    c1e4:	00a5      	lsls	r5, r4, #2
    c1e6:	9303      	str	r3, [sp, #12]
    c1e8:	195b      	adds	r3, r3, r5
    c1ea:	9304      	str	r3, [sp, #16]
    c1ec:	0003      	movs	r3, r0
    c1ee:	3314      	adds	r3, #20
    c1f0:	9302      	str	r3, [sp, #8]
    c1f2:	195d      	adds	r5, r3, r5
    c1f4:	9b04      	ldr	r3, [sp, #16]
    c1f6:	6828      	ldr	r0, [r5, #0]
    c1f8:	681b      	ldr	r3, [r3, #0]
    c1fa:	1c59      	adds	r1, r3, #1
    c1fc:	9301      	str	r3, [sp, #4]
    c1fe:	f001 ff4b 	bl	e098 <__udivsi3>
    c202:	9001      	str	r0, [sp, #4]
    c204:	42b0      	cmp	r0, r6
    c206:	d02d      	beq.n	c264 <quorem+0x98>
    c208:	9b03      	ldr	r3, [sp, #12]
    c20a:	9802      	ldr	r0, [sp, #8]
    c20c:	469c      	mov	ip, r3
    c20e:	9606      	str	r6, [sp, #24]
    c210:	4662      	mov	r2, ip
    c212:	ca08      	ldmia	r2!, {r3}
    c214:	4694      	mov	ip, r2
    c216:	9a01      	ldr	r2, [sp, #4]
    c218:	b299      	uxth	r1, r3
    c21a:	4351      	muls	r1, r2
    c21c:	0c1b      	lsrs	r3, r3, #16
    c21e:	4353      	muls	r3, r2
    c220:	1989      	adds	r1, r1, r6
    c222:	0c0a      	lsrs	r2, r1, #16
    c224:	189b      	adds	r3, r3, r2
    c226:	9307      	str	r3, [sp, #28]
    c228:	8802      	ldrh	r2, [r0, #0]
    c22a:	0c1e      	lsrs	r6, r3, #16
    c22c:	9b06      	ldr	r3, [sp, #24]
    c22e:	b289      	uxth	r1, r1
    c230:	18d2      	adds	r2, r2, r3
    c232:	6803      	ldr	r3, [r0, #0]
    c234:	1a52      	subs	r2, r2, r1
    c236:	0c19      	lsrs	r1, r3, #16
    c238:	466b      	mov	r3, sp
    c23a:	8b9b      	ldrh	r3, [r3, #28]
    c23c:	1acb      	subs	r3, r1, r3
    c23e:	1411      	asrs	r1, r2, #16
    c240:	185b      	adds	r3, r3, r1
    c242:	1419      	asrs	r1, r3, #16
    c244:	b292      	uxth	r2, r2
    c246:	041b      	lsls	r3, r3, #16
    c248:	431a      	orrs	r2, r3
    c24a:	9b04      	ldr	r3, [sp, #16]
    c24c:	9106      	str	r1, [sp, #24]
    c24e:	c004      	stmia	r0!, {r2}
    c250:	4563      	cmp	r3, ip
    c252:	d2dd      	bcs.n	c210 <quorem+0x44>
    c254:	682b      	ldr	r3, [r5, #0]
    c256:	2b00      	cmp	r3, #0
    c258:	d104      	bne.n	c264 <quorem+0x98>
    c25a:	9b02      	ldr	r3, [sp, #8]
    c25c:	3d04      	subs	r5, #4
    c25e:	42ab      	cmp	r3, r5
    c260:	d32e      	bcc.n	c2c0 <quorem+0xf4>
    c262:	613c      	str	r4, [r7, #16]
    c264:	9905      	ldr	r1, [sp, #20]
    c266:	0038      	movs	r0, r7
    c268:	f001 fa55 	bl	d716 <__mcmp>
    c26c:	2800      	cmp	r0, #0
    c26e:	db23      	blt.n	c2b8 <quorem+0xec>
    c270:	2500      	movs	r5, #0
    c272:	9b01      	ldr	r3, [sp, #4]
    c274:	9802      	ldr	r0, [sp, #8]
    c276:	3301      	adds	r3, #1
    c278:	9903      	ldr	r1, [sp, #12]
    c27a:	9301      	str	r3, [sp, #4]
    c27c:	c908      	ldmia	r1!, {r3}
    c27e:	8802      	ldrh	r2, [r0, #0]
    c280:	1955      	adds	r5, r2, r5
    c282:	b29a      	uxth	r2, r3
    c284:	1aaa      	subs	r2, r5, r2
    c286:	6805      	ldr	r5, [r0, #0]
    c288:	0c1b      	lsrs	r3, r3, #16
    c28a:	0c2d      	lsrs	r5, r5, #16
    c28c:	1aeb      	subs	r3, r5, r3
    c28e:	1415      	asrs	r5, r2, #16
    c290:	195b      	adds	r3, r3, r5
    c292:	141d      	asrs	r5, r3, #16
    c294:	b292      	uxth	r2, r2
    c296:	041b      	lsls	r3, r3, #16
    c298:	4313      	orrs	r3, r2
    c29a:	c008      	stmia	r0!, {r3}
    c29c:	9b04      	ldr	r3, [sp, #16]
    c29e:	428b      	cmp	r3, r1
    c2a0:	d2ec      	bcs.n	c27c <quorem+0xb0>
    c2a2:	9a02      	ldr	r2, [sp, #8]
    c2a4:	00a3      	lsls	r3, r4, #2
    c2a6:	18d3      	adds	r3, r2, r3
    c2a8:	681a      	ldr	r2, [r3, #0]
    c2aa:	2a00      	cmp	r2, #0
    c2ac:	d104      	bne.n	c2b8 <quorem+0xec>
    c2ae:	9a02      	ldr	r2, [sp, #8]
    c2b0:	3b04      	subs	r3, #4
    c2b2:	429a      	cmp	r2, r3
    c2b4:	d309      	bcc.n	c2ca <quorem+0xfe>
    c2b6:	613c      	str	r4, [r7, #16]
    c2b8:	9e01      	ldr	r6, [sp, #4]
    c2ba:	0030      	movs	r0, r6
    c2bc:	b009      	add	sp, #36	; 0x24
    c2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2c0:	682b      	ldr	r3, [r5, #0]
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	d1cd      	bne.n	c262 <quorem+0x96>
    c2c6:	3c01      	subs	r4, #1
    c2c8:	e7c7      	b.n	c25a <quorem+0x8e>
    c2ca:	681a      	ldr	r2, [r3, #0]
    c2cc:	2a00      	cmp	r2, #0
    c2ce:	d1f2      	bne.n	c2b6 <quorem+0xea>
    c2d0:	3c01      	subs	r4, #1
    c2d2:	e7ec      	b.n	c2ae <quorem+0xe2>

0000c2d4 <_dtoa_r>:
    c2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2d6:	0016      	movs	r6, r2
    c2d8:	001f      	movs	r7, r3
    c2da:	6a44      	ldr	r4, [r0, #36]	; 0x24
    c2dc:	b09d      	sub	sp, #116	; 0x74
    c2de:	9004      	str	r0, [sp, #16]
    c2e0:	9d25      	ldr	r5, [sp, #148]	; 0x94
    c2e2:	9606      	str	r6, [sp, #24]
    c2e4:	9707      	str	r7, [sp, #28]
    c2e6:	2c00      	cmp	r4, #0
    c2e8:	d108      	bne.n	c2fc <_dtoa_r+0x28>
    c2ea:	2010      	movs	r0, #16
    c2ec:	f7fe fed6 	bl	b09c <malloc>
    c2f0:	9b04      	ldr	r3, [sp, #16]
    c2f2:	6258      	str	r0, [r3, #36]	; 0x24
    c2f4:	6044      	str	r4, [r0, #4]
    c2f6:	6084      	str	r4, [r0, #8]
    c2f8:	6004      	str	r4, [r0, #0]
    c2fa:	60c4      	str	r4, [r0, #12]
    c2fc:	9b04      	ldr	r3, [sp, #16]
    c2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c300:	6819      	ldr	r1, [r3, #0]
    c302:	2900      	cmp	r1, #0
    c304:	d00b      	beq.n	c31e <_dtoa_r+0x4a>
    c306:	685a      	ldr	r2, [r3, #4]
    c308:	2301      	movs	r3, #1
    c30a:	4093      	lsls	r3, r2
    c30c:	604a      	str	r2, [r1, #4]
    c30e:	608b      	str	r3, [r1, #8]
    c310:	9804      	ldr	r0, [sp, #16]
    c312:	f001 f826 	bl	d362 <_Bfree>
    c316:	2200      	movs	r2, #0
    c318:	9b04      	ldr	r3, [sp, #16]
    c31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c31c:	601a      	str	r2, [r3, #0]
    c31e:	9b07      	ldr	r3, [sp, #28]
    c320:	2b00      	cmp	r3, #0
    c322:	da1f      	bge.n	c364 <_dtoa_r+0x90>
    c324:	2301      	movs	r3, #1
    c326:	602b      	str	r3, [r5, #0]
    c328:	007b      	lsls	r3, r7, #1
    c32a:	085b      	lsrs	r3, r3, #1
    c32c:	9307      	str	r3, [sp, #28]
    c32e:	9c07      	ldr	r4, [sp, #28]
    c330:	4bb7      	ldr	r3, [pc, #732]	; (c610 <_dtoa_r+0x33c>)
    c332:	0022      	movs	r2, r4
    c334:	9319      	str	r3, [sp, #100]	; 0x64
    c336:	401a      	ands	r2, r3
    c338:	429a      	cmp	r2, r3
    c33a:	d116      	bne.n	c36a <_dtoa_r+0x96>
    c33c:	4bb5      	ldr	r3, [pc, #724]	; (c614 <_dtoa_r+0x340>)
    c33e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c340:	6013      	str	r3, [r2, #0]
    c342:	9b06      	ldr	r3, [sp, #24]
    c344:	2b00      	cmp	r3, #0
    c346:	d103      	bne.n	c350 <_dtoa_r+0x7c>
    c348:	0324      	lsls	r4, r4, #12
    c34a:	d101      	bne.n	c350 <_dtoa_r+0x7c>
    c34c:	f000 fd91 	bl	ce72 <_dtoa_r+0xb9e>
    c350:	4bb1      	ldr	r3, [pc, #708]	; (c618 <_dtoa_r+0x344>)
    c352:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c354:	930a      	str	r3, [sp, #40]	; 0x28
    c356:	4bb1      	ldr	r3, [pc, #708]	; (c61c <_dtoa_r+0x348>)
    c358:	2a00      	cmp	r2, #0
    c35a:	d001      	beq.n	c360 <_dtoa_r+0x8c>
    c35c:	f000 fd8f 	bl	ce7e <_dtoa_r+0xbaa>
    c360:	f000 fd8f 	bl	ce82 <_dtoa_r+0xbae>
    c364:	2300      	movs	r3, #0
    c366:	602b      	str	r3, [r5, #0]
    c368:	e7e1      	b.n	c32e <_dtoa_r+0x5a>
    c36a:	9e06      	ldr	r6, [sp, #24]
    c36c:	9f07      	ldr	r7, [sp, #28]
    c36e:	2200      	movs	r2, #0
    c370:	2300      	movs	r3, #0
    c372:	0030      	movs	r0, r6
    c374:	0039      	movs	r1, r7
    c376:	f002 f815 	bl	e3a4 <__aeabi_dcmpeq>
    c37a:	1e05      	subs	r5, r0, #0
    c37c:	d00e      	beq.n	c39c <_dtoa_r+0xc8>
    c37e:	2301      	movs	r3, #1
    c380:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c382:	6013      	str	r3, [r2, #0]
    c384:	4ba6      	ldr	r3, [pc, #664]	; (c620 <_dtoa_r+0x34c>)
    c386:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c388:	930a      	str	r3, [sp, #40]	; 0x28
    c38a:	2a00      	cmp	r2, #0
    c38c:	d101      	bne.n	c392 <_dtoa_r+0xbe>
    c38e:	f000 fd78 	bl	ce82 <_dtoa_r+0xbae>
    c392:	4aa4      	ldr	r2, [pc, #656]	; (c624 <_dtoa_r+0x350>)
    c394:	9926      	ldr	r1, [sp, #152]	; 0x98
    c396:	600a      	str	r2, [r1, #0]
    c398:	f000 fd73 	bl	ce82 <_dtoa_r+0xbae>
    c39c:	ab1a      	add	r3, sp, #104	; 0x68
    c39e:	9301      	str	r3, [sp, #4]
    c3a0:	ab1b      	add	r3, sp, #108	; 0x6c
    c3a2:	9300      	str	r3, [sp, #0]
    c3a4:	0032      	movs	r2, r6
    c3a6:	003b      	movs	r3, r7
    c3a8:	9804      	ldr	r0, [sp, #16]
    c3aa:	f001 fa31 	bl	d810 <__d2b>
    c3ae:	0063      	lsls	r3, r4, #1
    c3b0:	9005      	str	r0, [sp, #20]
    c3b2:	0d5b      	lsrs	r3, r3, #21
    c3b4:	d100      	bne.n	c3b8 <_dtoa_r+0xe4>
    c3b6:	e07f      	b.n	c4b8 <_dtoa_r+0x1e4>
    c3b8:	033a      	lsls	r2, r7, #12
    c3ba:	4c9b      	ldr	r4, [pc, #620]	; (c628 <_dtoa_r+0x354>)
    c3bc:	0b12      	lsrs	r2, r2, #12
    c3be:	4314      	orrs	r4, r2
    c3c0:	0021      	movs	r1, r4
    c3c2:	4a9a      	ldr	r2, [pc, #616]	; (c62c <_dtoa_r+0x358>)
    c3c4:	0030      	movs	r0, r6
    c3c6:	9518      	str	r5, [sp, #96]	; 0x60
    c3c8:	189e      	adds	r6, r3, r2
    c3ca:	2200      	movs	r2, #0
    c3cc:	4b98      	ldr	r3, [pc, #608]	; (c630 <_dtoa_r+0x35c>)
    c3ce:	f003 fcbd 	bl	fd4c <__aeabi_dsub>
    c3d2:	4a98      	ldr	r2, [pc, #608]	; (c634 <_dtoa_r+0x360>)
    c3d4:	4b98      	ldr	r3, [pc, #608]	; (c638 <_dtoa_r+0x364>)
    c3d6:	f003 fa39 	bl	f84c <__aeabi_dmul>
    c3da:	4a98      	ldr	r2, [pc, #608]	; (c63c <_dtoa_r+0x368>)
    c3dc:	4b98      	ldr	r3, [pc, #608]	; (c640 <_dtoa_r+0x36c>)
    c3de:	f002 faf1 	bl	e9c4 <__aeabi_dadd>
    c3e2:	0004      	movs	r4, r0
    c3e4:	0030      	movs	r0, r6
    c3e6:	000d      	movs	r5, r1
    c3e8:	f004 f81a 	bl	10420 <__aeabi_i2d>
    c3ec:	4a95      	ldr	r2, [pc, #596]	; (c644 <_dtoa_r+0x370>)
    c3ee:	4b96      	ldr	r3, [pc, #600]	; (c648 <_dtoa_r+0x374>)
    c3f0:	f003 fa2c 	bl	f84c <__aeabi_dmul>
    c3f4:	0002      	movs	r2, r0
    c3f6:	000b      	movs	r3, r1
    c3f8:	0020      	movs	r0, r4
    c3fa:	0029      	movs	r1, r5
    c3fc:	f002 fae2 	bl	e9c4 <__aeabi_dadd>
    c400:	0004      	movs	r4, r0
    c402:	000d      	movs	r5, r1
    c404:	f003 ffd8 	bl	103b8 <__aeabi_d2iz>
    c408:	2200      	movs	r2, #0
    c40a:	9003      	str	r0, [sp, #12]
    c40c:	2300      	movs	r3, #0
    c40e:	0020      	movs	r0, r4
    c410:	0029      	movs	r1, r5
    c412:	f001 ffcd 	bl	e3b0 <__aeabi_dcmplt>
    c416:	2800      	cmp	r0, #0
    c418:	d00e      	beq.n	c438 <_dtoa_r+0x164>
    c41a:	9803      	ldr	r0, [sp, #12]
    c41c:	f004 f800 	bl	10420 <__aeabi_i2d>
    c420:	000b      	movs	r3, r1
    c422:	0002      	movs	r2, r0
    c424:	0029      	movs	r1, r5
    c426:	0020      	movs	r0, r4
    c428:	f001 ffbc 	bl	e3a4 <__aeabi_dcmpeq>
    c42c:	0003      	movs	r3, r0
    c42e:	4258      	negs	r0, r3
    c430:	4158      	adcs	r0, r3
    c432:	9b03      	ldr	r3, [sp, #12]
    c434:	1a1b      	subs	r3, r3, r0
    c436:	9303      	str	r3, [sp, #12]
    c438:	2301      	movs	r3, #1
    c43a:	9316      	str	r3, [sp, #88]	; 0x58
    c43c:	9b03      	ldr	r3, [sp, #12]
    c43e:	2b16      	cmp	r3, #22
    c440:	d80f      	bhi.n	c462 <_dtoa_r+0x18e>
    c442:	4982      	ldr	r1, [pc, #520]	; (c64c <_dtoa_r+0x378>)
    c444:	00db      	lsls	r3, r3, #3
    c446:	18c9      	adds	r1, r1, r3
    c448:	6808      	ldr	r0, [r1, #0]
    c44a:	6849      	ldr	r1, [r1, #4]
    c44c:	9a06      	ldr	r2, [sp, #24]
    c44e:	9b07      	ldr	r3, [sp, #28]
    c450:	f001 ffc2 	bl	e3d8 <__aeabi_dcmpgt>
    c454:	2800      	cmp	r0, #0
    c456:	d04b      	beq.n	c4f0 <_dtoa_r+0x21c>
    c458:	9b03      	ldr	r3, [sp, #12]
    c45a:	3b01      	subs	r3, #1
    c45c:	9303      	str	r3, [sp, #12]
    c45e:	2300      	movs	r3, #0
    c460:	9316      	str	r3, [sp, #88]	; 0x58
    c462:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c464:	1b9e      	subs	r6, r3, r6
    c466:	2300      	movs	r3, #0
    c468:	930b      	str	r3, [sp, #44]	; 0x2c
    c46a:	0033      	movs	r3, r6
    c46c:	3b01      	subs	r3, #1
    c46e:	930c      	str	r3, [sp, #48]	; 0x30
    c470:	d504      	bpl.n	c47c <_dtoa_r+0x1a8>
    c472:	2301      	movs	r3, #1
    c474:	1b9b      	subs	r3, r3, r6
    c476:	930b      	str	r3, [sp, #44]	; 0x2c
    c478:	2300      	movs	r3, #0
    c47a:	930c      	str	r3, [sp, #48]	; 0x30
    c47c:	9b03      	ldr	r3, [sp, #12]
    c47e:	2b00      	cmp	r3, #0
    c480:	db38      	blt.n	c4f4 <_dtoa_r+0x220>
    c482:	9a03      	ldr	r2, [sp, #12]
    c484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c486:	4694      	mov	ip, r2
    c488:	4463      	add	r3, ip
    c48a:	930c      	str	r3, [sp, #48]	; 0x30
    c48c:	2300      	movs	r3, #0
    c48e:	920f      	str	r2, [sp, #60]	; 0x3c
    c490:	9308      	str	r3, [sp, #32]
    c492:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c494:	2501      	movs	r5, #1
    c496:	2b09      	cmp	r3, #9
    c498:	d900      	bls.n	c49c <_dtoa_r+0x1c8>
    c49a:	e091      	b.n	c5c0 <_dtoa_r+0x2ec>
    c49c:	2b05      	cmp	r3, #5
    c49e:	dd02      	ble.n	c4a6 <_dtoa_r+0x1d2>
    c4a0:	2500      	movs	r5, #0
    c4a2:	3b04      	subs	r3, #4
    c4a4:	9322      	str	r3, [sp, #136]	; 0x88
    c4a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c4a8:	1e98      	subs	r0, r3, #2
    c4aa:	2803      	cmp	r0, #3
    c4ac:	d900      	bls.n	c4b0 <_dtoa_r+0x1dc>
    c4ae:	e091      	b.n	c5d4 <_dtoa_r+0x300>
    c4b0:	f001 fde8 	bl	e084 <__gnu_thumb1_case_uqi>
    c4b4:	76298482 	.word	0x76298482
    c4b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c4ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4bc:	189e      	adds	r6, r3, r2
    c4be:	4b64      	ldr	r3, [pc, #400]	; (c650 <_dtoa_r+0x37c>)
    c4c0:	18f2      	adds	r2, r6, r3
    c4c2:	2a20      	cmp	r2, #32
    c4c4:	dd0f      	ble.n	c4e6 <_dtoa_r+0x212>
    c4c6:	4b63      	ldr	r3, [pc, #396]	; (c654 <_dtoa_r+0x380>)
    c4c8:	9806      	ldr	r0, [sp, #24]
    c4ca:	18f3      	adds	r3, r6, r3
    c4cc:	40d8      	lsrs	r0, r3
    c4ce:	2340      	movs	r3, #64	; 0x40
    c4d0:	1a9b      	subs	r3, r3, r2
    c4d2:	409c      	lsls	r4, r3
    c4d4:	4320      	orrs	r0, r4
    c4d6:	f003 ffe5 	bl	104a4 <__aeabi_ui2d>
    c4da:	2301      	movs	r3, #1
    c4dc:	4c5e      	ldr	r4, [pc, #376]	; (c658 <_dtoa_r+0x384>)
    c4de:	3e01      	subs	r6, #1
    c4e0:	1909      	adds	r1, r1, r4
    c4e2:	9318      	str	r3, [sp, #96]	; 0x60
    c4e4:	e771      	b.n	c3ca <_dtoa_r+0xf6>
    c4e6:	2320      	movs	r3, #32
    c4e8:	9806      	ldr	r0, [sp, #24]
    c4ea:	1a9b      	subs	r3, r3, r2
    c4ec:	4098      	lsls	r0, r3
    c4ee:	e7f2      	b.n	c4d6 <_dtoa_r+0x202>
    c4f0:	9016      	str	r0, [sp, #88]	; 0x58
    c4f2:	e7b6      	b.n	c462 <_dtoa_r+0x18e>
    c4f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4f6:	9a03      	ldr	r2, [sp, #12]
    c4f8:	1a9b      	subs	r3, r3, r2
    c4fa:	930b      	str	r3, [sp, #44]	; 0x2c
    c4fc:	4253      	negs	r3, r2
    c4fe:	9308      	str	r3, [sp, #32]
    c500:	2300      	movs	r3, #0
    c502:	930f      	str	r3, [sp, #60]	; 0x3c
    c504:	e7c5      	b.n	c492 <_dtoa_r+0x1be>
    c506:	2301      	movs	r3, #1
    c508:	930e      	str	r3, [sp, #56]	; 0x38
    c50a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c50c:	2b00      	cmp	r3, #0
    c50e:	dd65      	ble.n	c5dc <_dtoa_r+0x308>
    c510:	001f      	movs	r7, r3
    c512:	930d      	str	r3, [sp, #52]	; 0x34
    c514:	9a04      	ldr	r2, [sp, #16]
    c516:	6a54      	ldr	r4, [r2, #36]	; 0x24
    c518:	2200      	movs	r2, #0
    c51a:	6062      	str	r2, [r4, #4]
    c51c:	3204      	adds	r2, #4
    c51e:	0011      	movs	r1, r2
    c520:	3114      	adds	r1, #20
    c522:	4299      	cmp	r1, r3
    c524:	d95f      	bls.n	c5e6 <_dtoa_r+0x312>
    c526:	6861      	ldr	r1, [r4, #4]
    c528:	9804      	ldr	r0, [sp, #16]
    c52a:	f000 fee2 	bl	d2f2 <_Balloc>
    c52e:	9b04      	ldr	r3, [sp, #16]
    c530:	6020      	str	r0, [r4, #0]
    c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c534:	681b      	ldr	r3, [r3, #0]
    c536:	930a      	str	r3, [sp, #40]	; 0x28
    c538:	2f0e      	cmp	r7, #14
    c53a:	d900      	bls.n	c53e <_dtoa_r+0x26a>
    c53c:	e105      	b.n	c74a <_dtoa_r+0x476>
    c53e:	2d00      	cmp	r5, #0
    c540:	d100      	bne.n	c544 <_dtoa_r+0x270>
    c542:	e102      	b.n	c74a <_dtoa_r+0x476>
    c544:	9b06      	ldr	r3, [sp, #24]
    c546:	9c07      	ldr	r4, [sp, #28]
    c548:	9314      	str	r3, [sp, #80]	; 0x50
    c54a:	9415      	str	r4, [sp, #84]	; 0x54
    c54c:	9b03      	ldr	r3, [sp, #12]
    c54e:	2b00      	cmp	r3, #0
    c550:	dc00      	bgt.n	c554 <_dtoa_r+0x280>
    c552:	e085      	b.n	c660 <_dtoa_r+0x38c>
    c554:	001a      	movs	r2, r3
    c556:	210f      	movs	r1, #15
    c558:	4b3c      	ldr	r3, [pc, #240]	; (c64c <_dtoa_r+0x378>)
    c55a:	400a      	ands	r2, r1
    c55c:	00d2      	lsls	r2, r2, #3
    c55e:	189b      	adds	r3, r3, r2
    c560:	685c      	ldr	r4, [r3, #4]
    c562:	681b      	ldr	r3, [r3, #0]
    c564:	9310      	str	r3, [sp, #64]	; 0x40
    c566:	9411      	str	r4, [sp, #68]	; 0x44
    c568:	9b03      	ldr	r3, [sp, #12]
    c56a:	2402      	movs	r4, #2
    c56c:	111d      	asrs	r5, r3, #4
    c56e:	06eb      	lsls	r3, r5, #27
    c570:	d50a      	bpl.n	c588 <_dtoa_r+0x2b4>
    c572:	4b3a      	ldr	r3, [pc, #232]	; (c65c <_dtoa_r+0x388>)
    c574:	400d      	ands	r5, r1
    c576:	6a1a      	ldr	r2, [r3, #32]
    c578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c57a:	9814      	ldr	r0, [sp, #80]	; 0x50
    c57c:	9915      	ldr	r1, [sp, #84]	; 0x54
    c57e:	f002 fd31 	bl	efe4 <__aeabi_ddiv>
    c582:	9006      	str	r0, [sp, #24]
    c584:	9107      	str	r1, [sp, #28]
    c586:	3401      	adds	r4, #1
    c588:	4e34      	ldr	r6, [pc, #208]	; (c65c <_dtoa_r+0x388>)
    c58a:	2d00      	cmp	r5, #0
    c58c:	d130      	bne.n	c5f0 <_dtoa_r+0x31c>
    c58e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c590:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c592:	9806      	ldr	r0, [sp, #24]
    c594:	9907      	ldr	r1, [sp, #28]
    c596:	f002 fd25 	bl	efe4 <__aeabi_ddiv>
    c59a:	9006      	str	r0, [sp, #24]
    c59c:	9107      	str	r1, [sp, #28]
    c59e:	e07a      	b.n	c696 <_dtoa_r+0x3c2>
    c5a0:	2301      	movs	r3, #1
    c5a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    c5a4:	930e      	str	r3, [sp, #56]	; 0x38
    c5a6:	4694      	mov	ip, r2
    c5a8:	9b03      	ldr	r3, [sp, #12]
    c5aa:	4463      	add	r3, ip
    c5ac:	1c5f      	adds	r7, r3, #1
    c5ae:	930d      	str	r3, [sp, #52]	; 0x34
    c5b0:	1e3b      	subs	r3, r7, #0
    c5b2:	dcaf      	bgt.n	c514 <_dtoa_r+0x240>
    c5b4:	2301      	movs	r3, #1
    c5b6:	e7ad      	b.n	c514 <_dtoa_r+0x240>
    c5b8:	2300      	movs	r3, #0
    c5ba:	e7a5      	b.n	c508 <_dtoa_r+0x234>
    c5bc:	2300      	movs	r3, #0
    c5be:	e7f0      	b.n	c5a2 <_dtoa_r+0x2ce>
    c5c0:	2300      	movs	r3, #0
    c5c2:	950e      	str	r5, [sp, #56]	; 0x38
    c5c4:	9322      	str	r3, [sp, #136]	; 0x88
    c5c6:	3b01      	subs	r3, #1
    c5c8:	2200      	movs	r2, #0
    c5ca:	930d      	str	r3, [sp, #52]	; 0x34
    c5cc:	001f      	movs	r7, r3
    c5ce:	3313      	adds	r3, #19
    c5d0:	9223      	str	r2, [sp, #140]	; 0x8c
    c5d2:	e79f      	b.n	c514 <_dtoa_r+0x240>
    c5d4:	2301      	movs	r3, #1
    c5d6:	930e      	str	r3, [sp, #56]	; 0x38
    c5d8:	3b02      	subs	r3, #2
    c5da:	e7f5      	b.n	c5c8 <_dtoa_r+0x2f4>
    c5dc:	2301      	movs	r3, #1
    c5de:	930d      	str	r3, [sp, #52]	; 0x34
    c5e0:	001f      	movs	r7, r3
    c5e2:	001a      	movs	r2, r3
    c5e4:	e7f4      	b.n	c5d0 <_dtoa_r+0x2fc>
    c5e6:	6861      	ldr	r1, [r4, #4]
    c5e8:	0052      	lsls	r2, r2, #1
    c5ea:	3101      	adds	r1, #1
    c5ec:	6061      	str	r1, [r4, #4]
    c5ee:	e796      	b.n	c51e <_dtoa_r+0x24a>
    c5f0:	2301      	movs	r3, #1
    c5f2:	421d      	tst	r5, r3
    c5f4:	d008      	beq.n	c608 <_dtoa_r+0x334>
    c5f6:	9810      	ldr	r0, [sp, #64]	; 0x40
    c5f8:	9911      	ldr	r1, [sp, #68]	; 0x44
    c5fa:	18e4      	adds	r4, r4, r3
    c5fc:	6832      	ldr	r2, [r6, #0]
    c5fe:	6873      	ldr	r3, [r6, #4]
    c600:	f003 f924 	bl	f84c <__aeabi_dmul>
    c604:	9010      	str	r0, [sp, #64]	; 0x40
    c606:	9111      	str	r1, [sp, #68]	; 0x44
    c608:	106d      	asrs	r5, r5, #1
    c60a:	3608      	adds	r6, #8
    c60c:	e7bd      	b.n	c58a <_dtoa_r+0x2b6>
    c60e:	46c0      	nop			; (mov r8, r8)
    c610:	7ff00000 	.word	0x7ff00000
    c614:	0000270f 	.word	0x0000270f
    c618:	00012a55 	.word	0x00012a55
    c61c:	00012a58 	.word	0x00012a58
    c620:	00012a28 	.word	0x00012a28
    c624:	00012a29 	.word	0x00012a29
    c628:	3ff00000 	.word	0x3ff00000
    c62c:	fffffc01 	.word	0xfffffc01
    c630:	3ff80000 	.word	0x3ff80000
    c634:	636f4361 	.word	0x636f4361
    c638:	3fd287a7 	.word	0x3fd287a7
    c63c:	8b60c8b3 	.word	0x8b60c8b3
    c640:	3fc68a28 	.word	0x3fc68a28
    c644:	509f79fb 	.word	0x509f79fb
    c648:	3fd34413 	.word	0x3fd34413
    c64c:	00012af0 	.word	0x00012af0
    c650:	00000432 	.word	0x00000432
    c654:	00000412 	.word	0x00000412
    c658:	fe100000 	.word	0xfe100000
    c65c:	00012ac8 	.word	0x00012ac8
    c660:	9b03      	ldr	r3, [sp, #12]
    c662:	2402      	movs	r4, #2
    c664:	2b00      	cmp	r3, #0
    c666:	d016      	beq.n	c696 <_dtoa_r+0x3c2>
    c668:	9814      	ldr	r0, [sp, #80]	; 0x50
    c66a:	9915      	ldr	r1, [sp, #84]	; 0x54
    c66c:	425d      	negs	r5, r3
    c66e:	230f      	movs	r3, #15
    c670:	4aca      	ldr	r2, [pc, #808]	; (c99c <_dtoa_r+0x6c8>)
    c672:	402b      	ands	r3, r5
    c674:	00db      	lsls	r3, r3, #3
    c676:	18d3      	adds	r3, r2, r3
    c678:	681a      	ldr	r2, [r3, #0]
    c67a:	685b      	ldr	r3, [r3, #4]
    c67c:	f003 f8e6 	bl	f84c <__aeabi_dmul>
    c680:	2300      	movs	r3, #0
    c682:	9006      	str	r0, [sp, #24]
    c684:	9107      	str	r1, [sp, #28]
    c686:	4ec6      	ldr	r6, [pc, #792]	; (c9a0 <_dtoa_r+0x6cc>)
    c688:	112d      	asrs	r5, r5, #4
    c68a:	2d00      	cmp	r5, #0
    c68c:	d000      	beq.n	c690 <_dtoa_r+0x3bc>
    c68e:	e08c      	b.n	c7aa <_dtoa_r+0x4d6>
    c690:	2b00      	cmp	r3, #0
    c692:	d000      	beq.n	c696 <_dtoa_r+0x3c2>
    c694:	e781      	b.n	c59a <_dtoa_r+0x2c6>
    c696:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c698:	2b00      	cmp	r3, #0
    c69a:	d100      	bne.n	c69e <_dtoa_r+0x3ca>
    c69c:	e091      	b.n	c7c2 <_dtoa_r+0x4ee>
    c69e:	9a06      	ldr	r2, [sp, #24]
    c6a0:	9b07      	ldr	r3, [sp, #28]
    c6a2:	9210      	str	r2, [sp, #64]	; 0x40
    c6a4:	9311      	str	r3, [sp, #68]	; 0x44
    c6a6:	9810      	ldr	r0, [sp, #64]	; 0x40
    c6a8:	9911      	ldr	r1, [sp, #68]	; 0x44
    c6aa:	2200      	movs	r2, #0
    c6ac:	4bbd      	ldr	r3, [pc, #756]	; (c9a4 <_dtoa_r+0x6d0>)
    c6ae:	f001 fe7f 	bl	e3b0 <__aeabi_dcmplt>
    c6b2:	2800      	cmp	r0, #0
    c6b4:	d100      	bne.n	c6b8 <_dtoa_r+0x3e4>
    c6b6:	e084      	b.n	c7c2 <_dtoa_r+0x4ee>
    c6b8:	2f00      	cmp	r7, #0
    c6ba:	d100      	bne.n	c6be <_dtoa_r+0x3ea>
    c6bc:	e081      	b.n	c7c2 <_dtoa_r+0x4ee>
    c6be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c6c0:	2b00      	cmp	r3, #0
    c6c2:	dd3e      	ble.n	c742 <_dtoa_r+0x46e>
    c6c4:	9810      	ldr	r0, [sp, #64]	; 0x40
    c6c6:	9911      	ldr	r1, [sp, #68]	; 0x44
    c6c8:	9b03      	ldr	r3, [sp, #12]
    c6ca:	2200      	movs	r2, #0
    c6cc:	1e5e      	subs	r6, r3, #1
    c6ce:	4bb6      	ldr	r3, [pc, #728]	; (c9a8 <_dtoa_r+0x6d4>)
    c6d0:	f003 f8bc 	bl	f84c <__aeabi_dmul>
    c6d4:	9006      	str	r0, [sp, #24]
    c6d6:	9107      	str	r1, [sp, #28]
    c6d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c6da:	3401      	adds	r4, #1
    c6dc:	0020      	movs	r0, r4
    c6de:	f003 fe9f 	bl	10420 <__aeabi_i2d>
    c6e2:	9a06      	ldr	r2, [sp, #24]
    c6e4:	9b07      	ldr	r3, [sp, #28]
    c6e6:	f003 f8b1 	bl	f84c <__aeabi_dmul>
    c6ea:	2200      	movs	r2, #0
    c6ec:	4baf      	ldr	r3, [pc, #700]	; (c9ac <_dtoa_r+0x6d8>)
    c6ee:	f002 f969 	bl	e9c4 <__aeabi_dadd>
    c6f2:	9012      	str	r0, [sp, #72]	; 0x48
    c6f4:	9113      	str	r1, [sp, #76]	; 0x4c
    c6f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c6f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    c6fa:	4aad      	ldr	r2, [pc, #692]	; (c9b0 <_dtoa_r+0x6dc>)
    c6fc:	9310      	str	r3, [sp, #64]	; 0x40
    c6fe:	9411      	str	r4, [sp, #68]	; 0x44
    c700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c702:	189c      	adds	r4, r3, r2
    c704:	9411      	str	r4, [sp, #68]	; 0x44
    c706:	2d00      	cmp	r5, #0
    c708:	d15e      	bne.n	c7c8 <_dtoa_r+0x4f4>
    c70a:	9806      	ldr	r0, [sp, #24]
    c70c:	9907      	ldr	r1, [sp, #28]
    c70e:	2200      	movs	r2, #0
    c710:	4ba8      	ldr	r3, [pc, #672]	; (c9b4 <_dtoa_r+0x6e0>)
    c712:	f003 fb1b 	bl	fd4c <__aeabi_dsub>
    c716:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c718:	0023      	movs	r3, r4
    c71a:	9006      	str	r0, [sp, #24]
    c71c:	9107      	str	r1, [sp, #28]
    c71e:	f001 fe5b 	bl	e3d8 <__aeabi_dcmpgt>
    c722:	2800      	cmp	r0, #0
    c724:	d000      	beq.n	c728 <_dtoa_r+0x454>
    c726:	e301      	b.n	cd2c <_dtoa_r+0xa58>
    c728:	48a3      	ldr	r0, [pc, #652]	; (c9b8 <_dtoa_r+0x6e4>)
    c72a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c72c:	4684      	mov	ip, r0
    c72e:	4461      	add	r1, ip
    c730:	000b      	movs	r3, r1
    c732:	9806      	ldr	r0, [sp, #24]
    c734:	9907      	ldr	r1, [sp, #28]
    c736:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c738:	f001 fe3a 	bl	e3b0 <__aeabi_dcmplt>
    c73c:	2800      	cmp	r0, #0
    c73e:	d000      	beq.n	c742 <_dtoa_r+0x46e>
    c740:	e2e8      	b.n	cd14 <_dtoa_r+0xa40>
    c742:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c744:	9c15      	ldr	r4, [sp, #84]	; 0x54
    c746:	9306      	str	r3, [sp, #24]
    c748:	9407      	str	r4, [sp, #28]
    c74a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c74c:	2b00      	cmp	r3, #0
    c74e:	da00      	bge.n	c752 <_dtoa_r+0x47e>
    c750:	e157      	b.n	ca02 <_dtoa_r+0x72e>
    c752:	9a03      	ldr	r2, [sp, #12]
    c754:	2a0e      	cmp	r2, #14
    c756:	dd00      	ble.n	c75a <_dtoa_r+0x486>
    c758:	e153      	b.n	ca02 <_dtoa_r+0x72e>
    c75a:	4b90      	ldr	r3, [pc, #576]	; (c99c <_dtoa_r+0x6c8>)
    c75c:	00d2      	lsls	r2, r2, #3
    c75e:	189b      	adds	r3, r3, r2
    c760:	685c      	ldr	r4, [r3, #4]
    c762:	681b      	ldr	r3, [r3, #0]
    c764:	9308      	str	r3, [sp, #32]
    c766:	9409      	str	r4, [sp, #36]	; 0x24
    c768:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c76a:	2b00      	cmp	r3, #0
    c76c:	db00      	blt.n	c770 <_dtoa_r+0x49c>
    c76e:	e0ce      	b.n	c90e <_dtoa_r+0x63a>
    c770:	2f00      	cmp	r7, #0
    c772:	dd00      	ble.n	c776 <_dtoa_r+0x4a2>
    c774:	e0cb      	b.n	c90e <_dtoa_r+0x63a>
    c776:	d000      	beq.n	c77a <_dtoa_r+0x4a6>
    c778:	e2cf      	b.n	cd1a <_dtoa_r+0xa46>
    c77a:	9808      	ldr	r0, [sp, #32]
    c77c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c77e:	2200      	movs	r2, #0
    c780:	4b8c      	ldr	r3, [pc, #560]	; (c9b4 <_dtoa_r+0x6e0>)
    c782:	f003 f863 	bl	f84c <__aeabi_dmul>
    c786:	9a06      	ldr	r2, [sp, #24]
    c788:	9b07      	ldr	r3, [sp, #28]
    c78a:	f001 fe2f 	bl	e3ec <__aeabi_dcmpge>
    c78e:	003e      	movs	r6, r7
    c790:	9708      	str	r7, [sp, #32]
    c792:	2800      	cmp	r0, #0
    c794:	d000      	beq.n	c798 <_dtoa_r+0x4c4>
    c796:	e2a4      	b.n	cce2 <_dtoa_r+0xa0e>
    c798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c79a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c79c:	1c5d      	adds	r5, r3, #1
    c79e:	2331      	movs	r3, #49	; 0x31
    c7a0:	7013      	strb	r3, [r2, #0]
    c7a2:	9b03      	ldr	r3, [sp, #12]
    c7a4:	3301      	adds	r3, #1
    c7a6:	9303      	str	r3, [sp, #12]
    c7a8:	e29f      	b.n	ccea <_dtoa_r+0xa16>
    c7aa:	2201      	movs	r2, #1
    c7ac:	4215      	tst	r5, r2
    c7ae:	d005      	beq.n	c7bc <_dtoa_r+0x4e8>
    c7b0:	18a4      	adds	r4, r4, r2
    c7b2:	6832      	ldr	r2, [r6, #0]
    c7b4:	6873      	ldr	r3, [r6, #4]
    c7b6:	f003 f849 	bl	f84c <__aeabi_dmul>
    c7ba:	2301      	movs	r3, #1
    c7bc:	106d      	asrs	r5, r5, #1
    c7be:	3608      	adds	r6, #8
    c7c0:	e763      	b.n	c68a <_dtoa_r+0x3b6>
    c7c2:	9e03      	ldr	r6, [sp, #12]
    c7c4:	003d      	movs	r5, r7
    c7c6:	e789      	b.n	c6dc <_dtoa_r+0x408>
    c7c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c7ca:	1e69      	subs	r1, r5, #1
    c7cc:	1952      	adds	r2, r2, r5
    c7ce:	9217      	str	r2, [sp, #92]	; 0x5c
    c7d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c7d2:	4b72      	ldr	r3, [pc, #456]	; (c99c <_dtoa_r+0x6c8>)
    c7d4:	00c9      	lsls	r1, r1, #3
    c7d6:	2a00      	cmp	r2, #0
    c7d8:	d04a      	beq.n	c870 <_dtoa_r+0x59c>
    c7da:	185b      	adds	r3, r3, r1
    c7dc:	681a      	ldr	r2, [r3, #0]
    c7de:	685b      	ldr	r3, [r3, #4]
    c7e0:	2000      	movs	r0, #0
    c7e2:	4976      	ldr	r1, [pc, #472]	; (c9bc <_dtoa_r+0x6e8>)
    c7e4:	f002 fbfe 	bl	efe4 <__aeabi_ddiv>
    c7e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c7ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c7ec:	f003 faae 	bl	fd4c <__aeabi_dsub>
    c7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c7f2:	9010      	str	r0, [sp, #64]	; 0x40
    c7f4:	9111      	str	r1, [sp, #68]	; 0x44
    c7f6:	9312      	str	r3, [sp, #72]	; 0x48
    c7f8:	9806      	ldr	r0, [sp, #24]
    c7fa:	9907      	ldr	r1, [sp, #28]
    c7fc:	f003 fddc 	bl	103b8 <__aeabi_d2iz>
    c800:	0004      	movs	r4, r0
    c802:	f003 fe0d 	bl	10420 <__aeabi_i2d>
    c806:	0002      	movs	r2, r0
    c808:	000b      	movs	r3, r1
    c80a:	9806      	ldr	r0, [sp, #24]
    c80c:	9907      	ldr	r1, [sp, #28]
    c80e:	f003 fa9d 	bl	fd4c <__aeabi_dsub>
    c812:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c814:	3430      	adds	r4, #48	; 0x30
    c816:	1c5d      	adds	r5, r3, #1
    c818:	701c      	strb	r4, [r3, #0]
    c81a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c81c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c81e:	9006      	str	r0, [sp, #24]
    c820:	9107      	str	r1, [sp, #28]
    c822:	f001 fdc5 	bl	e3b0 <__aeabi_dcmplt>
    c826:	2800      	cmp	r0, #0
    c828:	d165      	bne.n	c8f6 <_dtoa_r+0x622>
    c82a:	9a06      	ldr	r2, [sp, #24]
    c82c:	9b07      	ldr	r3, [sp, #28]
    c82e:	2000      	movs	r0, #0
    c830:	495c      	ldr	r1, [pc, #368]	; (c9a4 <_dtoa_r+0x6d0>)
    c832:	f003 fa8b 	bl	fd4c <__aeabi_dsub>
    c836:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c838:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c83a:	f001 fdb9 	bl	e3b0 <__aeabi_dcmplt>
    c83e:	2800      	cmp	r0, #0
    c840:	d000      	beq.n	c844 <_dtoa_r+0x570>
    c842:	e0be      	b.n	c9c2 <_dtoa_r+0x6ee>
    c844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c846:	429d      	cmp	r5, r3
    c848:	d100      	bne.n	c84c <_dtoa_r+0x578>
    c84a:	e77a      	b.n	c742 <_dtoa_r+0x46e>
    c84c:	9810      	ldr	r0, [sp, #64]	; 0x40
    c84e:	9911      	ldr	r1, [sp, #68]	; 0x44
    c850:	2200      	movs	r2, #0
    c852:	4b55      	ldr	r3, [pc, #340]	; (c9a8 <_dtoa_r+0x6d4>)
    c854:	f002 fffa 	bl	f84c <__aeabi_dmul>
    c858:	2200      	movs	r2, #0
    c85a:	9010      	str	r0, [sp, #64]	; 0x40
    c85c:	9111      	str	r1, [sp, #68]	; 0x44
    c85e:	9806      	ldr	r0, [sp, #24]
    c860:	9907      	ldr	r1, [sp, #28]
    c862:	4b51      	ldr	r3, [pc, #324]	; (c9a8 <_dtoa_r+0x6d4>)
    c864:	f002 fff2 	bl	f84c <__aeabi_dmul>
    c868:	9512      	str	r5, [sp, #72]	; 0x48
    c86a:	9006      	str	r0, [sp, #24]
    c86c:	9107      	str	r1, [sp, #28]
    c86e:	e7c3      	b.n	c7f8 <_dtoa_r+0x524>
    c870:	1859      	adds	r1, r3, r1
    c872:	6808      	ldr	r0, [r1, #0]
    c874:	6849      	ldr	r1, [r1, #4]
    c876:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c878:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c87a:	f002 ffe7 	bl	f84c <__aeabi_dmul>
    c87e:	9010      	str	r0, [sp, #64]	; 0x40
    c880:	9111      	str	r1, [sp, #68]	; 0x44
    c882:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c884:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    c886:	9806      	ldr	r0, [sp, #24]
    c888:	9907      	ldr	r1, [sp, #28]
    c88a:	f003 fd95 	bl	103b8 <__aeabi_d2iz>
    c88e:	9012      	str	r0, [sp, #72]	; 0x48
    c890:	f003 fdc6 	bl	10420 <__aeabi_i2d>
    c894:	0002      	movs	r2, r0
    c896:	000b      	movs	r3, r1
    c898:	9806      	ldr	r0, [sp, #24]
    c89a:	9907      	ldr	r1, [sp, #28]
    c89c:	f003 fa56 	bl	fd4c <__aeabi_dsub>
    c8a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c8a2:	9006      	str	r0, [sp, #24]
    c8a4:	9107      	str	r1, [sp, #28]
    c8a6:	3330      	adds	r3, #48	; 0x30
    c8a8:	7023      	strb	r3, [r4, #0]
    c8aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c8ac:	3401      	adds	r4, #1
    c8ae:	2200      	movs	r2, #0
    c8b0:	42a3      	cmp	r3, r4
    c8b2:	d124      	bne.n	c8fe <_dtoa_r+0x62a>
    c8b4:	4b41      	ldr	r3, [pc, #260]	; (c9bc <_dtoa_r+0x6e8>)
    c8b6:	9810      	ldr	r0, [sp, #64]	; 0x40
    c8b8:	9911      	ldr	r1, [sp, #68]	; 0x44
    c8ba:	f002 f883 	bl	e9c4 <__aeabi_dadd>
    c8be:	0002      	movs	r2, r0
    c8c0:	000b      	movs	r3, r1
    c8c2:	9806      	ldr	r0, [sp, #24]
    c8c4:	9907      	ldr	r1, [sp, #28]
    c8c6:	f001 fd87 	bl	e3d8 <__aeabi_dcmpgt>
    c8ca:	2800      	cmp	r0, #0
    c8cc:	d000      	beq.n	c8d0 <_dtoa_r+0x5fc>
    c8ce:	e078      	b.n	c9c2 <_dtoa_r+0x6ee>
    c8d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c8d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c8d4:	2000      	movs	r0, #0
    c8d6:	4939      	ldr	r1, [pc, #228]	; (c9bc <_dtoa_r+0x6e8>)
    c8d8:	f003 fa38 	bl	fd4c <__aeabi_dsub>
    c8dc:	0002      	movs	r2, r0
    c8de:	000b      	movs	r3, r1
    c8e0:	9806      	ldr	r0, [sp, #24]
    c8e2:	9907      	ldr	r1, [sp, #28]
    c8e4:	f001 fd64 	bl	e3b0 <__aeabi_dcmplt>
    c8e8:	2800      	cmp	r0, #0
    c8ea:	d100      	bne.n	c8ee <_dtoa_r+0x61a>
    c8ec:	e729      	b.n	c742 <_dtoa_r+0x46e>
    c8ee:	1e6b      	subs	r3, r5, #1
    c8f0:	781a      	ldrb	r2, [r3, #0]
    c8f2:	2a30      	cmp	r2, #48	; 0x30
    c8f4:	d001      	beq.n	c8fa <_dtoa_r+0x626>
    c8f6:	9603      	str	r6, [sp, #12]
    c8f8:	e03f      	b.n	c97a <_dtoa_r+0x6a6>
    c8fa:	001d      	movs	r5, r3
    c8fc:	e7f7      	b.n	c8ee <_dtoa_r+0x61a>
    c8fe:	9806      	ldr	r0, [sp, #24]
    c900:	9907      	ldr	r1, [sp, #28]
    c902:	4b29      	ldr	r3, [pc, #164]	; (c9a8 <_dtoa_r+0x6d4>)
    c904:	f002 ffa2 	bl	f84c <__aeabi_dmul>
    c908:	9006      	str	r0, [sp, #24]
    c90a:	9107      	str	r1, [sp, #28]
    c90c:	e7bb      	b.n	c886 <_dtoa_r+0x5b2>
    c90e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c910:	9a08      	ldr	r2, [sp, #32]
    c912:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c914:	9806      	ldr	r0, [sp, #24]
    c916:	9907      	ldr	r1, [sp, #28]
    c918:	f002 fb64 	bl	efe4 <__aeabi_ddiv>
    c91c:	f003 fd4c 	bl	103b8 <__aeabi_d2iz>
    c920:	0004      	movs	r4, r0
    c922:	f003 fd7d 	bl	10420 <__aeabi_i2d>
    c926:	9a08      	ldr	r2, [sp, #32]
    c928:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c92a:	f002 ff8f 	bl	f84c <__aeabi_dmul>
    c92e:	000b      	movs	r3, r1
    c930:	0002      	movs	r2, r0
    c932:	9806      	ldr	r0, [sp, #24]
    c934:	9907      	ldr	r1, [sp, #28]
    c936:	f003 fa09 	bl	fd4c <__aeabi_dsub>
    c93a:	0023      	movs	r3, r4
    c93c:	3330      	adds	r3, #48	; 0x30
    c93e:	7033      	strb	r3, [r6, #0]
    c940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c942:	1c75      	adds	r5, r6, #1
    c944:	1aeb      	subs	r3, r5, r3
    c946:	429f      	cmp	r7, r3
    c948:	d14c      	bne.n	c9e4 <_dtoa_r+0x710>
    c94a:	0002      	movs	r2, r0
    c94c:	000b      	movs	r3, r1
    c94e:	f002 f839 	bl	e9c4 <__aeabi_dadd>
    c952:	0006      	movs	r6, r0
    c954:	000f      	movs	r7, r1
    c956:	0002      	movs	r2, r0
    c958:	000b      	movs	r3, r1
    c95a:	9808      	ldr	r0, [sp, #32]
    c95c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c95e:	f001 fd27 	bl	e3b0 <__aeabi_dcmplt>
    c962:	2800      	cmp	r0, #0
    c964:	d12c      	bne.n	c9c0 <_dtoa_r+0x6ec>
    c966:	9808      	ldr	r0, [sp, #32]
    c968:	9909      	ldr	r1, [sp, #36]	; 0x24
    c96a:	0032      	movs	r2, r6
    c96c:	003b      	movs	r3, r7
    c96e:	f001 fd19 	bl	e3a4 <__aeabi_dcmpeq>
    c972:	2800      	cmp	r0, #0
    c974:	d001      	beq.n	c97a <_dtoa_r+0x6a6>
    c976:	07e3      	lsls	r3, r4, #31
    c978:	d422      	bmi.n	c9c0 <_dtoa_r+0x6ec>
    c97a:	9905      	ldr	r1, [sp, #20]
    c97c:	9804      	ldr	r0, [sp, #16]
    c97e:	f000 fcf0 	bl	d362 <_Bfree>
    c982:	2300      	movs	r3, #0
    c984:	702b      	strb	r3, [r5, #0]
    c986:	9b03      	ldr	r3, [sp, #12]
    c988:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c98a:	3301      	adds	r3, #1
    c98c:	6013      	str	r3, [r2, #0]
    c98e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c990:	2b00      	cmp	r3, #0
    c992:	d100      	bne.n	c996 <_dtoa_r+0x6c2>
    c994:	e275      	b.n	ce82 <_dtoa_r+0xbae>
    c996:	601d      	str	r5, [r3, #0]
    c998:	e273      	b.n	ce82 <_dtoa_r+0xbae>
    c99a:	46c0      	nop			; (mov r8, r8)
    c99c:	00012af0 	.word	0x00012af0
    c9a0:	00012ac8 	.word	0x00012ac8
    c9a4:	3ff00000 	.word	0x3ff00000
    c9a8:	40240000 	.word	0x40240000
    c9ac:	401c0000 	.word	0x401c0000
    c9b0:	fcc00000 	.word	0xfcc00000
    c9b4:	40140000 	.word	0x40140000
    c9b8:	7cc00000 	.word	0x7cc00000
    c9bc:	3fe00000 	.word	0x3fe00000
    c9c0:	9e03      	ldr	r6, [sp, #12]
    c9c2:	1e6b      	subs	r3, r5, #1
    c9c4:	781a      	ldrb	r2, [r3, #0]
    c9c6:	2a39      	cmp	r2, #57	; 0x39
    c9c8:	d106      	bne.n	c9d8 <_dtoa_r+0x704>
    c9ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c9cc:	429a      	cmp	r2, r3
    c9ce:	d107      	bne.n	c9e0 <_dtoa_r+0x70c>
    c9d0:	2330      	movs	r3, #48	; 0x30
    c9d2:	7013      	strb	r3, [r2, #0]
    c9d4:	0013      	movs	r3, r2
    c9d6:	3601      	adds	r6, #1
    c9d8:	781a      	ldrb	r2, [r3, #0]
    c9da:	3201      	adds	r2, #1
    c9dc:	701a      	strb	r2, [r3, #0]
    c9de:	e78a      	b.n	c8f6 <_dtoa_r+0x622>
    c9e0:	001d      	movs	r5, r3
    c9e2:	e7ee      	b.n	c9c2 <_dtoa_r+0x6ee>
    c9e4:	2200      	movs	r2, #0
    c9e6:	4bcf      	ldr	r3, [pc, #828]	; (cd24 <_dtoa_r+0xa50>)
    c9e8:	f002 ff30 	bl	f84c <__aeabi_dmul>
    c9ec:	2200      	movs	r2, #0
    c9ee:	2300      	movs	r3, #0
    c9f0:	9006      	str	r0, [sp, #24]
    c9f2:	9107      	str	r1, [sp, #28]
    c9f4:	002e      	movs	r6, r5
    c9f6:	f001 fcd5 	bl	e3a4 <__aeabi_dcmpeq>
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d100      	bne.n	ca00 <_dtoa_r+0x72c>
    c9fe:	e787      	b.n	c910 <_dtoa_r+0x63c>
    ca00:	e7bb      	b.n	c97a <_dtoa_r+0x6a6>
    ca02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ca04:	2a00      	cmp	r2, #0
    ca06:	d100      	bne.n	ca0a <_dtoa_r+0x736>
    ca08:	e087      	b.n	cb1a <_dtoa_r+0x846>
    ca0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    ca0c:	2a01      	cmp	r2, #1
    ca0e:	dc6e      	bgt.n	caee <_dtoa_r+0x81a>
    ca10:	9a18      	ldr	r2, [sp, #96]	; 0x60
    ca12:	2a00      	cmp	r2, #0
    ca14:	d067      	beq.n	cae6 <_dtoa_r+0x812>
    ca16:	4ac4      	ldr	r2, [pc, #784]	; (cd28 <_dtoa_r+0xa54>)
    ca18:	189b      	adds	r3, r3, r2
    ca1a:	9d08      	ldr	r5, [sp, #32]
    ca1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ca1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca20:	2101      	movs	r1, #1
    ca22:	18d2      	adds	r2, r2, r3
    ca24:	920b      	str	r2, [sp, #44]	; 0x2c
    ca26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca28:	9804      	ldr	r0, [sp, #16]
    ca2a:	18d3      	adds	r3, r2, r3
    ca2c:	930c      	str	r3, [sp, #48]	; 0x30
    ca2e:	f000 fd36 	bl	d49e <__i2b>
    ca32:	0006      	movs	r6, r0
    ca34:	2c00      	cmp	r4, #0
    ca36:	dd0e      	ble.n	ca56 <_dtoa_r+0x782>
    ca38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	dd0b      	ble.n	ca56 <_dtoa_r+0x782>
    ca3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca40:	0023      	movs	r3, r4
    ca42:	4294      	cmp	r4, r2
    ca44:	dd00      	ble.n	ca48 <_dtoa_r+0x774>
    ca46:	0013      	movs	r3, r2
    ca48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca4a:	1ae4      	subs	r4, r4, r3
    ca4c:	1ad2      	subs	r2, r2, r3
    ca4e:	920b      	str	r2, [sp, #44]	; 0x2c
    ca50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca52:	1ad3      	subs	r3, r2, r3
    ca54:	930c      	str	r3, [sp, #48]	; 0x30
    ca56:	9b08      	ldr	r3, [sp, #32]
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d01e      	beq.n	ca9a <_dtoa_r+0x7c6>
    ca5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d05f      	beq.n	cb22 <_dtoa_r+0x84e>
    ca62:	2d00      	cmp	r5, #0
    ca64:	dd11      	ble.n	ca8a <_dtoa_r+0x7b6>
    ca66:	0031      	movs	r1, r6
    ca68:	002a      	movs	r2, r5
    ca6a:	9804      	ldr	r0, [sp, #16]
    ca6c:	f000 fdb0 	bl	d5d0 <__pow5mult>
    ca70:	9a05      	ldr	r2, [sp, #20]
    ca72:	0001      	movs	r1, r0
    ca74:	0006      	movs	r6, r0
    ca76:	9804      	ldr	r0, [sp, #16]
    ca78:	f000 fd1a 	bl	d4b0 <__multiply>
    ca7c:	9905      	ldr	r1, [sp, #20]
    ca7e:	9010      	str	r0, [sp, #64]	; 0x40
    ca80:	9804      	ldr	r0, [sp, #16]
    ca82:	f000 fc6e 	bl	d362 <_Bfree>
    ca86:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ca88:	9305      	str	r3, [sp, #20]
    ca8a:	9b08      	ldr	r3, [sp, #32]
    ca8c:	1b5a      	subs	r2, r3, r5
    ca8e:	d004      	beq.n	ca9a <_dtoa_r+0x7c6>
    ca90:	9905      	ldr	r1, [sp, #20]
    ca92:	9804      	ldr	r0, [sp, #16]
    ca94:	f000 fd9c 	bl	d5d0 <__pow5mult>
    ca98:	9005      	str	r0, [sp, #20]
    ca9a:	2101      	movs	r1, #1
    ca9c:	9804      	ldr	r0, [sp, #16]
    ca9e:	f000 fcfe 	bl	d49e <__i2b>
    caa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    caa4:	9008      	str	r0, [sp, #32]
    caa6:	2b00      	cmp	r3, #0
    caa8:	dd3d      	ble.n	cb26 <_dtoa_r+0x852>
    caaa:	001a      	movs	r2, r3
    caac:	0001      	movs	r1, r0
    caae:	9804      	ldr	r0, [sp, #16]
    cab0:	f000 fd8e 	bl	d5d0 <__pow5mult>
    cab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cab6:	9008      	str	r0, [sp, #32]
    cab8:	2500      	movs	r5, #0
    caba:	2b01      	cmp	r3, #1
    cabc:	dc3b      	bgt.n	cb36 <_dtoa_r+0x862>
    cabe:	2500      	movs	r5, #0
    cac0:	9b06      	ldr	r3, [sp, #24]
    cac2:	42ab      	cmp	r3, r5
    cac4:	d133      	bne.n	cb2e <_dtoa_r+0x85a>
    cac6:	9b07      	ldr	r3, [sp, #28]
    cac8:	031b      	lsls	r3, r3, #12
    caca:	42ab      	cmp	r3, r5
    cacc:	d12f      	bne.n	cb2e <_dtoa_r+0x85a>
    cace:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cad0:	9a07      	ldr	r2, [sp, #28]
    cad2:	4213      	tst	r3, r2
    cad4:	d02b      	beq.n	cb2e <_dtoa_r+0x85a>
    cad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cad8:	3501      	adds	r5, #1
    cada:	3301      	adds	r3, #1
    cadc:	930b      	str	r3, [sp, #44]	; 0x2c
    cade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cae0:	3301      	adds	r3, #1
    cae2:	930c      	str	r3, [sp, #48]	; 0x30
    cae4:	e023      	b.n	cb2e <_dtoa_r+0x85a>
    cae6:	2336      	movs	r3, #54	; 0x36
    cae8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    caea:	1a9b      	subs	r3, r3, r2
    caec:	e795      	b.n	ca1a <_dtoa_r+0x746>
    caee:	9b08      	ldr	r3, [sp, #32]
    caf0:	1e7d      	subs	r5, r7, #1
    caf2:	42ab      	cmp	r3, r5
    caf4:	db06      	blt.n	cb04 <_dtoa_r+0x830>
    caf6:	1b5d      	subs	r5, r3, r5
    caf8:	2f00      	cmp	r7, #0
    cafa:	da0b      	bge.n	cb14 <_dtoa_r+0x840>
    cafc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cafe:	1bdc      	subs	r4, r3, r7
    cb00:	2300      	movs	r3, #0
    cb02:	e78c      	b.n	ca1e <_dtoa_r+0x74a>
    cb04:	9b08      	ldr	r3, [sp, #32]
    cb06:	9508      	str	r5, [sp, #32]
    cb08:	1aea      	subs	r2, r5, r3
    cb0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cb0c:	2500      	movs	r5, #0
    cb0e:	189b      	adds	r3, r3, r2
    cb10:	930f      	str	r3, [sp, #60]	; 0x3c
    cb12:	e7f1      	b.n	caf8 <_dtoa_r+0x824>
    cb14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cb16:	003b      	movs	r3, r7
    cb18:	e781      	b.n	ca1e <_dtoa_r+0x74a>
    cb1a:	9d08      	ldr	r5, [sp, #32]
    cb1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cb1e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    cb20:	e788      	b.n	ca34 <_dtoa_r+0x760>
    cb22:	9a08      	ldr	r2, [sp, #32]
    cb24:	e7b4      	b.n	ca90 <_dtoa_r+0x7bc>
    cb26:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cb28:	2500      	movs	r5, #0
    cb2a:	2b01      	cmp	r3, #1
    cb2c:	ddc7      	ble.n	cabe <_dtoa_r+0x7ea>
    cb2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cb30:	2001      	movs	r0, #1
    cb32:	2b00      	cmp	r3, #0
    cb34:	d00b      	beq.n	cb4e <_dtoa_r+0x87a>
    cb36:	9b08      	ldr	r3, [sp, #32]
    cb38:	9a08      	ldr	r2, [sp, #32]
    cb3a:	691b      	ldr	r3, [r3, #16]
    cb3c:	930f      	str	r3, [sp, #60]	; 0x3c
    cb3e:	3303      	adds	r3, #3
    cb40:	009b      	lsls	r3, r3, #2
    cb42:	18d3      	adds	r3, r2, r3
    cb44:	6858      	ldr	r0, [r3, #4]
    cb46:	f000 fc61 	bl	d40c <__hi0bits>
    cb4a:	2320      	movs	r3, #32
    cb4c:	1a18      	subs	r0, r3, r0
    cb4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb50:	18c0      	adds	r0, r0, r3
    cb52:	231f      	movs	r3, #31
    cb54:	4018      	ands	r0, r3
    cb56:	d100      	bne.n	cb5a <_dtoa_r+0x886>
    cb58:	e0ab      	b.n	ccb2 <_dtoa_r+0x9de>
    cb5a:	3301      	adds	r3, #1
    cb5c:	1a1b      	subs	r3, r3, r0
    cb5e:	2b04      	cmp	r3, #4
    cb60:	dc00      	bgt.n	cb64 <_dtoa_r+0x890>
    cb62:	e09b      	b.n	cc9c <_dtoa_r+0x9c8>
    cb64:	231c      	movs	r3, #28
    cb66:	1a18      	subs	r0, r3, r0
    cb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb6a:	1824      	adds	r4, r4, r0
    cb6c:	181b      	adds	r3, r3, r0
    cb6e:	930b      	str	r3, [sp, #44]	; 0x2c
    cb70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb72:	181b      	adds	r3, r3, r0
    cb74:	930c      	str	r3, [sp, #48]	; 0x30
    cb76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb78:	2b00      	cmp	r3, #0
    cb7a:	dd05      	ble.n	cb88 <_dtoa_r+0x8b4>
    cb7c:	001a      	movs	r2, r3
    cb7e:	9905      	ldr	r1, [sp, #20]
    cb80:	9804      	ldr	r0, [sp, #16]
    cb82:	f000 fd77 	bl	d674 <__lshift>
    cb86:	9005      	str	r0, [sp, #20]
    cb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	dd05      	ble.n	cb9a <_dtoa_r+0x8c6>
    cb8e:	001a      	movs	r2, r3
    cb90:	9908      	ldr	r1, [sp, #32]
    cb92:	9804      	ldr	r0, [sp, #16]
    cb94:	f000 fd6e 	bl	d674 <__lshift>
    cb98:	9008      	str	r0, [sp, #32]
    cb9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d100      	bne.n	cba2 <_dtoa_r+0x8ce>
    cba0:	e089      	b.n	ccb6 <_dtoa_r+0x9e2>
    cba2:	9908      	ldr	r1, [sp, #32]
    cba4:	9805      	ldr	r0, [sp, #20]
    cba6:	f000 fdb6 	bl	d716 <__mcmp>
    cbaa:	2800      	cmp	r0, #0
    cbac:	db00      	blt.n	cbb0 <_dtoa_r+0x8dc>
    cbae:	e082      	b.n	ccb6 <_dtoa_r+0x9e2>
    cbb0:	9b03      	ldr	r3, [sp, #12]
    cbb2:	220a      	movs	r2, #10
    cbb4:	3b01      	subs	r3, #1
    cbb6:	9303      	str	r3, [sp, #12]
    cbb8:	9905      	ldr	r1, [sp, #20]
    cbba:	2300      	movs	r3, #0
    cbbc:	9804      	ldr	r0, [sp, #16]
    cbbe:	f000 fbe9 	bl	d394 <__multadd>
    cbc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cbc4:	9005      	str	r0, [sp, #20]
    cbc6:	2b00      	cmp	r3, #0
    cbc8:	d100      	bne.n	cbcc <_dtoa_r+0x8f8>
    cbca:	e15d      	b.n	ce88 <_dtoa_r+0xbb4>
    cbcc:	2300      	movs	r3, #0
    cbce:	0031      	movs	r1, r6
    cbd0:	220a      	movs	r2, #10
    cbd2:	9804      	ldr	r0, [sp, #16]
    cbd4:	f000 fbde 	bl	d394 <__multadd>
    cbd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbda:	0006      	movs	r6, r0
    cbdc:	2b00      	cmp	r3, #0
    cbde:	dc02      	bgt.n	cbe6 <_dtoa_r+0x912>
    cbe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cbe2:	2b02      	cmp	r3, #2
    cbe4:	dc6d      	bgt.n	ccc2 <_dtoa_r+0x9ee>
    cbe6:	2c00      	cmp	r4, #0
    cbe8:	dd05      	ble.n	cbf6 <_dtoa_r+0x922>
    cbea:	0031      	movs	r1, r6
    cbec:	0022      	movs	r2, r4
    cbee:	9804      	ldr	r0, [sp, #16]
    cbf0:	f000 fd40 	bl	d674 <__lshift>
    cbf4:	0006      	movs	r6, r0
    cbf6:	0030      	movs	r0, r6
    cbf8:	2d00      	cmp	r5, #0
    cbfa:	d011      	beq.n	cc20 <_dtoa_r+0x94c>
    cbfc:	6871      	ldr	r1, [r6, #4]
    cbfe:	9804      	ldr	r0, [sp, #16]
    cc00:	f000 fb77 	bl	d2f2 <_Balloc>
    cc04:	0031      	movs	r1, r6
    cc06:	0004      	movs	r4, r0
    cc08:	6933      	ldr	r3, [r6, #16]
    cc0a:	310c      	adds	r1, #12
    cc0c:	1c9a      	adds	r2, r3, #2
    cc0e:	0092      	lsls	r2, r2, #2
    cc10:	300c      	adds	r0, #12
    cc12:	f7fe fa57 	bl	b0c4 <memcpy>
    cc16:	2201      	movs	r2, #1
    cc18:	0021      	movs	r1, r4
    cc1a:	9804      	ldr	r0, [sp, #16]
    cc1c:	f000 fd2a 	bl	d674 <__lshift>
    cc20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    cc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc24:	3f01      	subs	r7, #1
    cc26:	930b      	str	r3, [sp, #44]	; 0x2c
    cc28:	19db      	adds	r3, r3, r7
    cc2a:	0037      	movs	r7, r6
    cc2c:	0006      	movs	r6, r0
    cc2e:	930f      	str	r3, [sp, #60]	; 0x3c
    cc30:	9908      	ldr	r1, [sp, #32]
    cc32:	9805      	ldr	r0, [sp, #20]
    cc34:	f7ff faca 	bl	c1cc <quorem>
    cc38:	0039      	movs	r1, r7
    cc3a:	900d      	str	r0, [sp, #52]	; 0x34
    cc3c:	0004      	movs	r4, r0
    cc3e:	9805      	ldr	r0, [sp, #20]
    cc40:	f000 fd69 	bl	d716 <__mcmp>
    cc44:	0032      	movs	r2, r6
    cc46:	900e      	str	r0, [sp, #56]	; 0x38
    cc48:	9908      	ldr	r1, [sp, #32]
    cc4a:	9804      	ldr	r0, [sp, #16]
    cc4c:	f000 fd7c 	bl	d748 <__mdiff>
    cc50:	2301      	movs	r3, #1
    cc52:	930c      	str	r3, [sp, #48]	; 0x30
    cc54:	68c3      	ldr	r3, [r0, #12]
    cc56:	3430      	adds	r4, #48	; 0x30
    cc58:	0005      	movs	r5, r0
    cc5a:	2b00      	cmp	r3, #0
    cc5c:	d104      	bne.n	cc68 <_dtoa_r+0x994>
    cc5e:	0001      	movs	r1, r0
    cc60:	9805      	ldr	r0, [sp, #20]
    cc62:	f000 fd58 	bl	d716 <__mcmp>
    cc66:	900c      	str	r0, [sp, #48]	; 0x30
    cc68:	0029      	movs	r1, r5
    cc6a:	9804      	ldr	r0, [sp, #16]
    cc6c:	f000 fb79 	bl	d362 <_Bfree>
    cc70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc72:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cc74:	4313      	orrs	r3, r2
    cc76:	d000      	beq.n	cc7a <_dtoa_r+0x9a6>
    cc78:	e089      	b.n	cd8e <_dtoa_r+0xaba>
    cc7a:	9a06      	ldr	r2, [sp, #24]
    cc7c:	3301      	adds	r3, #1
    cc7e:	4213      	tst	r3, r2
    cc80:	d000      	beq.n	cc84 <_dtoa_r+0x9b0>
    cc82:	e084      	b.n	cd8e <_dtoa_r+0xaba>
    cc84:	2c39      	cmp	r4, #57	; 0x39
    cc86:	d100      	bne.n	cc8a <_dtoa_r+0x9b6>
    cc88:	e0a3      	b.n	cdd2 <_dtoa_r+0xafe>
    cc8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	dd01      	ble.n	cc94 <_dtoa_r+0x9c0>
    cc90:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cc92:	3431      	adds	r4, #49	; 0x31
    cc94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc96:	1c5d      	adds	r5, r3, #1
    cc98:	701c      	strb	r4, [r3, #0]
    cc9a:	e027      	b.n	ccec <_dtoa_r+0xa18>
    cc9c:	2b04      	cmp	r3, #4
    cc9e:	d100      	bne.n	cca2 <_dtoa_r+0x9ce>
    cca0:	e769      	b.n	cb76 <_dtoa_r+0x8a2>
    cca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cca4:	331c      	adds	r3, #28
    cca6:	18d2      	adds	r2, r2, r3
    cca8:	920b      	str	r2, [sp, #44]	; 0x2c
    ccaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ccac:	18e4      	adds	r4, r4, r3
    ccae:	18d3      	adds	r3, r2, r3
    ccb0:	e760      	b.n	cb74 <_dtoa_r+0x8a0>
    ccb2:	0003      	movs	r3, r0
    ccb4:	e7f5      	b.n	cca2 <_dtoa_r+0x9ce>
    ccb6:	2f00      	cmp	r7, #0
    ccb8:	dc3c      	bgt.n	cd34 <_dtoa_r+0xa60>
    ccba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ccbc:	2b02      	cmp	r3, #2
    ccbe:	dd39      	ble.n	cd34 <_dtoa_r+0xa60>
    ccc0:	970d      	str	r7, [sp, #52]	; 0x34
    ccc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccc4:	2b00      	cmp	r3, #0
    ccc6:	d10c      	bne.n	cce2 <_dtoa_r+0xa0e>
    ccc8:	9908      	ldr	r1, [sp, #32]
    ccca:	2205      	movs	r2, #5
    cccc:	9804      	ldr	r0, [sp, #16]
    ccce:	f000 fb61 	bl	d394 <__multadd>
    ccd2:	9008      	str	r0, [sp, #32]
    ccd4:	0001      	movs	r1, r0
    ccd6:	9805      	ldr	r0, [sp, #20]
    ccd8:	f000 fd1d 	bl	d716 <__mcmp>
    ccdc:	2800      	cmp	r0, #0
    ccde:	dd00      	ble.n	cce2 <_dtoa_r+0xa0e>
    cce0:	e55a      	b.n	c798 <_dtoa_r+0x4c4>
    cce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cce4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    cce6:	43db      	mvns	r3, r3
    cce8:	9303      	str	r3, [sp, #12]
    ccea:	2700      	movs	r7, #0
    ccec:	9908      	ldr	r1, [sp, #32]
    ccee:	9804      	ldr	r0, [sp, #16]
    ccf0:	f000 fb37 	bl	d362 <_Bfree>
    ccf4:	2e00      	cmp	r6, #0
    ccf6:	d100      	bne.n	ccfa <_dtoa_r+0xa26>
    ccf8:	e63f      	b.n	c97a <_dtoa_r+0x6a6>
    ccfa:	2f00      	cmp	r7, #0
    ccfc:	d005      	beq.n	cd0a <_dtoa_r+0xa36>
    ccfe:	42b7      	cmp	r7, r6
    cd00:	d003      	beq.n	cd0a <_dtoa_r+0xa36>
    cd02:	0039      	movs	r1, r7
    cd04:	9804      	ldr	r0, [sp, #16]
    cd06:	f000 fb2c 	bl	d362 <_Bfree>
    cd0a:	0031      	movs	r1, r6
    cd0c:	9804      	ldr	r0, [sp, #16]
    cd0e:	f000 fb28 	bl	d362 <_Bfree>
    cd12:	e632      	b.n	c97a <_dtoa_r+0x6a6>
    cd14:	9508      	str	r5, [sp, #32]
    cd16:	002e      	movs	r6, r5
    cd18:	e7e3      	b.n	cce2 <_dtoa_r+0xa0e>
    cd1a:	2300      	movs	r3, #0
    cd1c:	9308      	str	r3, [sp, #32]
    cd1e:	001e      	movs	r6, r3
    cd20:	e7df      	b.n	cce2 <_dtoa_r+0xa0e>
    cd22:	46c0      	nop			; (mov r8, r8)
    cd24:	40240000 	.word	0x40240000
    cd28:	00000433 	.word	0x00000433
    cd2c:	9603      	str	r6, [sp, #12]
    cd2e:	9508      	str	r5, [sp, #32]
    cd30:	002e      	movs	r6, r5
    cd32:	e531      	b.n	c798 <_dtoa_r+0x4c4>
    cd34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cd36:	970d      	str	r7, [sp, #52]	; 0x34
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d000      	beq.n	cd3e <_dtoa_r+0xa6a>
    cd3c:	e753      	b.n	cbe6 <_dtoa_r+0x912>
    cd3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    cd40:	9908      	ldr	r1, [sp, #32]
    cd42:	9805      	ldr	r0, [sp, #20]
    cd44:	f7ff fa42 	bl	c1cc <quorem>
    cd48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd4a:	3030      	adds	r0, #48	; 0x30
    cd4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cd4e:	7028      	strb	r0, [r5, #0]
    cd50:	3501      	adds	r5, #1
    cd52:	0004      	movs	r4, r0
    cd54:	1aeb      	subs	r3, r5, r3
    cd56:	429a      	cmp	r2, r3
    cd58:	dc78      	bgt.n	ce4c <_dtoa_r+0xb78>
    cd5a:	1e15      	subs	r5, r2, #0
    cd5c:	dc00      	bgt.n	cd60 <_dtoa_r+0xa8c>
    cd5e:	2501      	movs	r5, #1
    cd60:	2700      	movs	r7, #0
    cd62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd64:	195d      	adds	r5, r3, r5
    cd66:	9905      	ldr	r1, [sp, #20]
    cd68:	2201      	movs	r2, #1
    cd6a:	9804      	ldr	r0, [sp, #16]
    cd6c:	f000 fc82 	bl	d674 <__lshift>
    cd70:	9908      	ldr	r1, [sp, #32]
    cd72:	9005      	str	r0, [sp, #20]
    cd74:	f000 fccf 	bl	d716 <__mcmp>
    cd78:	2800      	cmp	r0, #0
    cd7a:	dc2f      	bgt.n	cddc <_dtoa_r+0xb08>
    cd7c:	d101      	bne.n	cd82 <_dtoa_r+0xaae>
    cd7e:	07e3      	lsls	r3, r4, #31
    cd80:	d42c      	bmi.n	cddc <_dtoa_r+0xb08>
    cd82:	1e6b      	subs	r3, r5, #1
    cd84:	781a      	ldrb	r2, [r3, #0]
    cd86:	2a30      	cmp	r2, #48	; 0x30
    cd88:	d1b0      	bne.n	ccec <_dtoa_r+0xa18>
    cd8a:	001d      	movs	r5, r3
    cd8c:	e7f9      	b.n	cd82 <_dtoa_r+0xaae>
    cd8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cd90:	2b00      	cmp	r3, #0
    cd92:	db07      	blt.n	cda4 <_dtoa_r+0xad0>
    cd94:	001d      	movs	r5, r3
    cd96:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cd98:	431d      	orrs	r5, r3
    cd9a:	d126      	bne.n	cdea <_dtoa_r+0xb16>
    cd9c:	2301      	movs	r3, #1
    cd9e:	9a06      	ldr	r2, [sp, #24]
    cda0:	4213      	tst	r3, r2
    cda2:	d122      	bne.n	cdea <_dtoa_r+0xb16>
    cda4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cda6:	2b00      	cmp	r3, #0
    cda8:	dc00      	bgt.n	cdac <_dtoa_r+0xad8>
    cdaa:	e773      	b.n	cc94 <_dtoa_r+0x9c0>
    cdac:	9905      	ldr	r1, [sp, #20]
    cdae:	2201      	movs	r2, #1
    cdb0:	9804      	ldr	r0, [sp, #16]
    cdb2:	f000 fc5f 	bl	d674 <__lshift>
    cdb6:	9908      	ldr	r1, [sp, #32]
    cdb8:	9005      	str	r0, [sp, #20]
    cdba:	f000 fcac 	bl	d716 <__mcmp>
    cdbe:	2800      	cmp	r0, #0
    cdc0:	dc04      	bgt.n	cdcc <_dtoa_r+0xaf8>
    cdc2:	d000      	beq.n	cdc6 <_dtoa_r+0xaf2>
    cdc4:	e766      	b.n	cc94 <_dtoa_r+0x9c0>
    cdc6:	07e3      	lsls	r3, r4, #31
    cdc8:	d400      	bmi.n	cdcc <_dtoa_r+0xaf8>
    cdca:	e763      	b.n	cc94 <_dtoa_r+0x9c0>
    cdcc:	2c39      	cmp	r4, #57	; 0x39
    cdce:	d000      	beq.n	cdd2 <_dtoa_r+0xafe>
    cdd0:	e75e      	b.n	cc90 <_dtoa_r+0x9bc>
    cdd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cdd6:	1c5d      	adds	r5, r3, #1
    cdd8:	2339      	movs	r3, #57	; 0x39
    cdda:	7013      	strb	r3, [r2, #0]
    cddc:	1e6b      	subs	r3, r5, #1
    cdde:	781a      	ldrb	r2, [r3, #0]
    cde0:	2a39      	cmp	r2, #57	; 0x39
    cde2:	d03b      	beq.n	ce5c <_dtoa_r+0xb88>
    cde4:	3201      	adds	r2, #1
    cde6:	701a      	strb	r2, [r3, #0]
    cde8:	e780      	b.n	ccec <_dtoa_r+0xa18>
    cdea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdec:	3301      	adds	r3, #1
    cdee:	930d      	str	r3, [sp, #52]	; 0x34
    cdf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	dd05      	ble.n	ce02 <_dtoa_r+0xb2e>
    cdf6:	2c39      	cmp	r4, #57	; 0x39
    cdf8:	d0eb      	beq.n	cdd2 <_dtoa_r+0xafe>
    cdfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cdfc:	3401      	adds	r4, #1
    cdfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce00:	e74a      	b.n	cc98 <_dtoa_r+0x9c4>
    ce02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ce06:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ce08:	701c      	strb	r4, [r3, #0]
    ce0a:	4293      	cmp	r3, r2
    ce0c:	d0ab      	beq.n	cd66 <_dtoa_r+0xa92>
    ce0e:	2300      	movs	r3, #0
    ce10:	220a      	movs	r2, #10
    ce12:	9905      	ldr	r1, [sp, #20]
    ce14:	9804      	ldr	r0, [sp, #16]
    ce16:	f000 fabd 	bl	d394 <__multadd>
    ce1a:	2300      	movs	r3, #0
    ce1c:	9005      	str	r0, [sp, #20]
    ce1e:	220a      	movs	r2, #10
    ce20:	0039      	movs	r1, r7
    ce22:	9804      	ldr	r0, [sp, #16]
    ce24:	42b7      	cmp	r7, r6
    ce26:	d106      	bne.n	ce36 <_dtoa_r+0xb62>
    ce28:	f000 fab4 	bl	d394 <__multadd>
    ce2c:	0007      	movs	r7, r0
    ce2e:	0006      	movs	r6, r0
    ce30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce32:	930b      	str	r3, [sp, #44]	; 0x2c
    ce34:	e6fc      	b.n	cc30 <_dtoa_r+0x95c>
    ce36:	f000 faad 	bl	d394 <__multadd>
    ce3a:	0031      	movs	r1, r6
    ce3c:	0007      	movs	r7, r0
    ce3e:	2300      	movs	r3, #0
    ce40:	220a      	movs	r2, #10
    ce42:	9804      	ldr	r0, [sp, #16]
    ce44:	f000 faa6 	bl	d394 <__multadd>
    ce48:	0006      	movs	r6, r0
    ce4a:	e7f1      	b.n	ce30 <_dtoa_r+0xb5c>
    ce4c:	2300      	movs	r3, #0
    ce4e:	220a      	movs	r2, #10
    ce50:	9905      	ldr	r1, [sp, #20]
    ce52:	9804      	ldr	r0, [sp, #16]
    ce54:	f000 fa9e 	bl	d394 <__multadd>
    ce58:	9005      	str	r0, [sp, #20]
    ce5a:	e771      	b.n	cd40 <_dtoa_r+0xa6c>
    ce5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ce5e:	429a      	cmp	r2, r3
    ce60:	d105      	bne.n	ce6e <_dtoa_r+0xb9a>
    ce62:	9b03      	ldr	r3, [sp, #12]
    ce64:	3301      	adds	r3, #1
    ce66:	9303      	str	r3, [sp, #12]
    ce68:	2331      	movs	r3, #49	; 0x31
    ce6a:	7013      	strb	r3, [r2, #0]
    ce6c:	e73e      	b.n	ccec <_dtoa_r+0xa18>
    ce6e:	001d      	movs	r5, r3
    ce70:	e7b4      	b.n	cddc <_dtoa_r+0xb08>
    ce72:	4b0a      	ldr	r3, [pc, #40]	; (ce9c <_dtoa_r+0xbc8>)
    ce74:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ce76:	930a      	str	r3, [sp, #40]	; 0x28
    ce78:	4b09      	ldr	r3, [pc, #36]	; (cea0 <_dtoa_r+0xbcc>)
    ce7a:	2a00      	cmp	r2, #0
    ce7c:	d001      	beq.n	ce82 <_dtoa_r+0xbae>
    ce7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ce80:	6013      	str	r3, [r2, #0]
    ce82:	980a      	ldr	r0, [sp, #40]	; 0x28
    ce84:	b01d      	add	sp, #116	; 0x74
    ce86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	dd00      	ble.n	ce90 <_dtoa_r+0xbbc>
    ce8e:	e756      	b.n	cd3e <_dtoa_r+0xa6a>
    ce90:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ce92:	2b02      	cmp	r3, #2
    ce94:	dc00      	bgt.n	ce98 <_dtoa_r+0xbc4>
    ce96:	e752      	b.n	cd3e <_dtoa_r+0xa6a>
    ce98:	e713      	b.n	ccc2 <_dtoa_r+0x9ee>
    ce9a:	46c0      	nop			; (mov r8, r8)
    ce9c:	00012a4c 	.word	0x00012a4c
    cea0:	00012a54 	.word	0x00012a54

0000cea4 <__sflush_r>:
    cea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cea6:	898a      	ldrh	r2, [r1, #12]
    cea8:	0005      	movs	r5, r0
    ceaa:	000c      	movs	r4, r1
    ceac:	0713      	lsls	r3, r2, #28
    ceae:	d460      	bmi.n	cf72 <__sflush_r+0xce>
    ceb0:	684b      	ldr	r3, [r1, #4]
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	dc04      	bgt.n	cec0 <__sflush_r+0x1c>
    ceb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    ceb8:	2b00      	cmp	r3, #0
    ceba:	dc01      	bgt.n	cec0 <__sflush_r+0x1c>
    cebc:	2000      	movs	r0, #0
    cebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    cec0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    cec2:	2f00      	cmp	r7, #0
    cec4:	d0fa      	beq.n	cebc <__sflush_r+0x18>
    cec6:	2300      	movs	r3, #0
    cec8:	682e      	ldr	r6, [r5, #0]
    ceca:	602b      	str	r3, [r5, #0]
    cecc:	2380      	movs	r3, #128	; 0x80
    cece:	015b      	lsls	r3, r3, #5
    ced0:	401a      	ands	r2, r3
    ced2:	d034      	beq.n	cf3e <__sflush_r+0x9a>
    ced4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    ced6:	89a3      	ldrh	r3, [r4, #12]
    ced8:	075b      	lsls	r3, r3, #29
    ceda:	d506      	bpl.n	ceea <__sflush_r+0x46>
    cedc:	6863      	ldr	r3, [r4, #4]
    cede:	1ac0      	subs	r0, r0, r3
    cee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cee2:	2b00      	cmp	r3, #0
    cee4:	d001      	beq.n	ceea <__sflush_r+0x46>
    cee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    cee8:	1ac0      	subs	r0, r0, r3
    ceea:	0002      	movs	r2, r0
    ceec:	6a21      	ldr	r1, [r4, #32]
    ceee:	2300      	movs	r3, #0
    cef0:	0028      	movs	r0, r5
    cef2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    cef4:	47b8      	blx	r7
    cef6:	89a1      	ldrh	r1, [r4, #12]
    cef8:	1c43      	adds	r3, r0, #1
    cefa:	d106      	bne.n	cf0a <__sflush_r+0x66>
    cefc:	682b      	ldr	r3, [r5, #0]
    cefe:	2b1d      	cmp	r3, #29
    cf00:	d831      	bhi.n	cf66 <__sflush_r+0xc2>
    cf02:	4a2c      	ldr	r2, [pc, #176]	; (cfb4 <__sflush_r+0x110>)
    cf04:	40da      	lsrs	r2, r3
    cf06:	07d3      	lsls	r3, r2, #31
    cf08:	d52d      	bpl.n	cf66 <__sflush_r+0xc2>
    cf0a:	2300      	movs	r3, #0
    cf0c:	6063      	str	r3, [r4, #4]
    cf0e:	6923      	ldr	r3, [r4, #16]
    cf10:	6023      	str	r3, [r4, #0]
    cf12:	04cb      	lsls	r3, r1, #19
    cf14:	d505      	bpl.n	cf22 <__sflush_r+0x7e>
    cf16:	1c43      	adds	r3, r0, #1
    cf18:	d102      	bne.n	cf20 <__sflush_r+0x7c>
    cf1a:	682b      	ldr	r3, [r5, #0]
    cf1c:	2b00      	cmp	r3, #0
    cf1e:	d100      	bne.n	cf22 <__sflush_r+0x7e>
    cf20:	6560      	str	r0, [r4, #84]	; 0x54
    cf22:	6b61      	ldr	r1, [r4, #52]	; 0x34
    cf24:	602e      	str	r6, [r5, #0]
    cf26:	2900      	cmp	r1, #0
    cf28:	d0c8      	beq.n	cebc <__sflush_r+0x18>
    cf2a:	0023      	movs	r3, r4
    cf2c:	3344      	adds	r3, #68	; 0x44
    cf2e:	4299      	cmp	r1, r3
    cf30:	d002      	beq.n	cf38 <__sflush_r+0x94>
    cf32:	0028      	movs	r0, r5
    cf34:	f7fe f8ea 	bl	b10c <_free_r>
    cf38:	2000      	movs	r0, #0
    cf3a:	6360      	str	r0, [r4, #52]	; 0x34
    cf3c:	e7bf      	b.n	cebe <__sflush_r+0x1a>
    cf3e:	2301      	movs	r3, #1
    cf40:	6a21      	ldr	r1, [r4, #32]
    cf42:	0028      	movs	r0, r5
    cf44:	47b8      	blx	r7
    cf46:	1c43      	adds	r3, r0, #1
    cf48:	d1c5      	bne.n	ced6 <__sflush_r+0x32>
    cf4a:	682b      	ldr	r3, [r5, #0]
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d0c2      	beq.n	ced6 <__sflush_r+0x32>
    cf50:	2b1d      	cmp	r3, #29
    cf52:	d001      	beq.n	cf58 <__sflush_r+0xb4>
    cf54:	2b16      	cmp	r3, #22
    cf56:	d101      	bne.n	cf5c <__sflush_r+0xb8>
    cf58:	602e      	str	r6, [r5, #0]
    cf5a:	e7af      	b.n	cebc <__sflush_r+0x18>
    cf5c:	2340      	movs	r3, #64	; 0x40
    cf5e:	89a2      	ldrh	r2, [r4, #12]
    cf60:	4313      	orrs	r3, r2
    cf62:	81a3      	strh	r3, [r4, #12]
    cf64:	e7ab      	b.n	cebe <__sflush_r+0x1a>
    cf66:	2340      	movs	r3, #64	; 0x40
    cf68:	430b      	orrs	r3, r1
    cf6a:	2001      	movs	r0, #1
    cf6c:	81a3      	strh	r3, [r4, #12]
    cf6e:	4240      	negs	r0, r0
    cf70:	e7a5      	b.n	cebe <__sflush_r+0x1a>
    cf72:	690f      	ldr	r7, [r1, #16]
    cf74:	2f00      	cmp	r7, #0
    cf76:	d0a1      	beq.n	cebc <__sflush_r+0x18>
    cf78:	680b      	ldr	r3, [r1, #0]
    cf7a:	600f      	str	r7, [r1, #0]
    cf7c:	1bdb      	subs	r3, r3, r7
    cf7e:	9301      	str	r3, [sp, #4]
    cf80:	2300      	movs	r3, #0
    cf82:	0792      	lsls	r2, r2, #30
    cf84:	d100      	bne.n	cf88 <__sflush_r+0xe4>
    cf86:	694b      	ldr	r3, [r1, #20]
    cf88:	60a3      	str	r3, [r4, #8]
    cf8a:	9b01      	ldr	r3, [sp, #4]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	dc00      	bgt.n	cf92 <__sflush_r+0xee>
    cf90:	e794      	b.n	cebc <__sflush_r+0x18>
    cf92:	9b01      	ldr	r3, [sp, #4]
    cf94:	003a      	movs	r2, r7
    cf96:	6a21      	ldr	r1, [r4, #32]
    cf98:	0028      	movs	r0, r5
    cf9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    cf9c:	47b0      	blx	r6
    cf9e:	2800      	cmp	r0, #0
    cfa0:	dc03      	bgt.n	cfaa <__sflush_r+0x106>
    cfa2:	2340      	movs	r3, #64	; 0x40
    cfa4:	89a2      	ldrh	r2, [r4, #12]
    cfa6:	4313      	orrs	r3, r2
    cfa8:	e7df      	b.n	cf6a <__sflush_r+0xc6>
    cfaa:	9b01      	ldr	r3, [sp, #4]
    cfac:	183f      	adds	r7, r7, r0
    cfae:	1a1b      	subs	r3, r3, r0
    cfb0:	9301      	str	r3, [sp, #4]
    cfb2:	e7ea      	b.n	cf8a <__sflush_r+0xe6>
    cfb4:	20400001 	.word	0x20400001

0000cfb8 <_fflush_r>:
    cfb8:	690b      	ldr	r3, [r1, #16]
    cfba:	b570      	push	{r4, r5, r6, lr}
    cfbc:	0005      	movs	r5, r0
    cfbe:	000c      	movs	r4, r1
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	d101      	bne.n	cfc8 <_fflush_r+0x10>
    cfc4:	2000      	movs	r0, #0
    cfc6:	bd70      	pop	{r4, r5, r6, pc}
    cfc8:	2800      	cmp	r0, #0
    cfca:	d004      	beq.n	cfd6 <_fflush_r+0x1e>
    cfcc:	6983      	ldr	r3, [r0, #24]
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d101      	bne.n	cfd6 <_fflush_r+0x1e>
    cfd2:	f000 f85f 	bl	d094 <__sinit>
    cfd6:	4b0b      	ldr	r3, [pc, #44]	; (d004 <_fflush_r+0x4c>)
    cfd8:	429c      	cmp	r4, r3
    cfda:	d109      	bne.n	cff0 <_fflush_r+0x38>
    cfdc:	686c      	ldr	r4, [r5, #4]
    cfde:	220c      	movs	r2, #12
    cfe0:	5ea3      	ldrsh	r3, [r4, r2]
    cfe2:	2b00      	cmp	r3, #0
    cfe4:	d0ee      	beq.n	cfc4 <_fflush_r+0xc>
    cfe6:	0021      	movs	r1, r4
    cfe8:	0028      	movs	r0, r5
    cfea:	f7ff ff5b 	bl	cea4 <__sflush_r>
    cfee:	e7ea      	b.n	cfc6 <_fflush_r+0xe>
    cff0:	4b05      	ldr	r3, [pc, #20]	; (d008 <_fflush_r+0x50>)
    cff2:	429c      	cmp	r4, r3
    cff4:	d101      	bne.n	cffa <_fflush_r+0x42>
    cff6:	68ac      	ldr	r4, [r5, #8]
    cff8:	e7f1      	b.n	cfde <_fflush_r+0x26>
    cffa:	4b04      	ldr	r3, [pc, #16]	; (d00c <_fflush_r+0x54>)
    cffc:	429c      	cmp	r4, r3
    cffe:	d1ee      	bne.n	cfde <_fflush_r+0x26>
    d000:	68ec      	ldr	r4, [r5, #12]
    d002:	e7ec      	b.n	cfde <_fflush_r+0x26>
    d004:	00012a7c 	.word	0x00012a7c
    d008:	00012a9c 	.word	0x00012a9c
    d00c:	00012a5c 	.word	0x00012a5c

0000d010 <_cleanup_r>:
    d010:	b510      	push	{r4, lr}
    d012:	4902      	ldr	r1, [pc, #8]	; (d01c <_cleanup_r+0xc>)
    d014:	f000 f8b2 	bl	d17c <_fwalk_reent>
    d018:	bd10      	pop	{r4, pc}
    d01a:	46c0      	nop			; (mov r8, r8)
    d01c:	0000cfb9 	.word	0x0000cfb9

0000d020 <std.isra.0>:
    d020:	2300      	movs	r3, #0
    d022:	b510      	push	{r4, lr}
    d024:	0004      	movs	r4, r0
    d026:	6003      	str	r3, [r0, #0]
    d028:	6043      	str	r3, [r0, #4]
    d02a:	6083      	str	r3, [r0, #8]
    d02c:	8181      	strh	r1, [r0, #12]
    d02e:	6643      	str	r3, [r0, #100]	; 0x64
    d030:	81c2      	strh	r2, [r0, #14]
    d032:	6103      	str	r3, [r0, #16]
    d034:	6143      	str	r3, [r0, #20]
    d036:	6183      	str	r3, [r0, #24]
    d038:	0019      	movs	r1, r3
    d03a:	2208      	movs	r2, #8
    d03c:	305c      	adds	r0, #92	; 0x5c
    d03e:	f7fe f85c 	bl	b0fa <memset>
    d042:	4b05      	ldr	r3, [pc, #20]	; (d058 <std.isra.0+0x38>)
    d044:	6224      	str	r4, [r4, #32]
    d046:	6263      	str	r3, [r4, #36]	; 0x24
    d048:	4b04      	ldr	r3, [pc, #16]	; (d05c <std.isra.0+0x3c>)
    d04a:	62a3      	str	r3, [r4, #40]	; 0x28
    d04c:	4b04      	ldr	r3, [pc, #16]	; (d060 <std.isra.0+0x40>)
    d04e:	62e3      	str	r3, [r4, #44]	; 0x2c
    d050:	4b04      	ldr	r3, [pc, #16]	; (d064 <std.isra.0+0x44>)
    d052:	6323      	str	r3, [r4, #48]	; 0x30
    d054:	bd10      	pop	{r4, pc}
    d056:	46c0      	nop			; (mov r8, r8)
    d058:	0000de95 	.word	0x0000de95
    d05c:	0000debd 	.word	0x0000debd
    d060:	0000def5 	.word	0x0000def5
    d064:	0000df21 	.word	0x0000df21

0000d068 <__sfmoreglue>:
    d068:	b570      	push	{r4, r5, r6, lr}
    d06a:	2568      	movs	r5, #104	; 0x68
    d06c:	1e4a      	subs	r2, r1, #1
    d06e:	4355      	muls	r5, r2
    d070:	000e      	movs	r6, r1
    d072:	0029      	movs	r1, r5
    d074:	3174      	adds	r1, #116	; 0x74
    d076:	f7fe f893 	bl	b1a0 <_malloc_r>
    d07a:	1e04      	subs	r4, r0, #0
    d07c:	d008      	beq.n	d090 <__sfmoreglue+0x28>
    d07e:	2100      	movs	r1, #0
    d080:	002a      	movs	r2, r5
    d082:	6001      	str	r1, [r0, #0]
    d084:	6046      	str	r6, [r0, #4]
    d086:	300c      	adds	r0, #12
    d088:	60a0      	str	r0, [r4, #8]
    d08a:	3268      	adds	r2, #104	; 0x68
    d08c:	f7fe f835 	bl	b0fa <memset>
    d090:	0020      	movs	r0, r4
    d092:	bd70      	pop	{r4, r5, r6, pc}

0000d094 <__sinit>:
    d094:	6983      	ldr	r3, [r0, #24]
    d096:	b513      	push	{r0, r1, r4, lr}
    d098:	0004      	movs	r4, r0
    d09a:	2b00      	cmp	r3, #0
    d09c:	d128      	bne.n	d0f0 <__sinit+0x5c>
    d09e:	6483      	str	r3, [r0, #72]	; 0x48
    d0a0:	64c3      	str	r3, [r0, #76]	; 0x4c
    d0a2:	6503      	str	r3, [r0, #80]	; 0x50
    d0a4:	4b13      	ldr	r3, [pc, #76]	; (d0f4 <__sinit+0x60>)
    d0a6:	4a14      	ldr	r2, [pc, #80]	; (d0f8 <__sinit+0x64>)
    d0a8:	681b      	ldr	r3, [r3, #0]
    d0aa:	6282      	str	r2, [r0, #40]	; 0x28
    d0ac:	9301      	str	r3, [sp, #4]
    d0ae:	4298      	cmp	r0, r3
    d0b0:	d101      	bne.n	d0b6 <__sinit+0x22>
    d0b2:	2301      	movs	r3, #1
    d0b4:	6183      	str	r3, [r0, #24]
    d0b6:	0020      	movs	r0, r4
    d0b8:	f000 f820 	bl	d0fc <__sfp>
    d0bc:	6060      	str	r0, [r4, #4]
    d0be:	0020      	movs	r0, r4
    d0c0:	f000 f81c 	bl	d0fc <__sfp>
    d0c4:	60a0      	str	r0, [r4, #8]
    d0c6:	0020      	movs	r0, r4
    d0c8:	f000 f818 	bl	d0fc <__sfp>
    d0cc:	2200      	movs	r2, #0
    d0ce:	60e0      	str	r0, [r4, #12]
    d0d0:	2104      	movs	r1, #4
    d0d2:	6860      	ldr	r0, [r4, #4]
    d0d4:	f7ff ffa4 	bl	d020 <std.isra.0>
    d0d8:	2201      	movs	r2, #1
    d0da:	2109      	movs	r1, #9
    d0dc:	68a0      	ldr	r0, [r4, #8]
    d0de:	f7ff ff9f 	bl	d020 <std.isra.0>
    d0e2:	2202      	movs	r2, #2
    d0e4:	2112      	movs	r1, #18
    d0e6:	68e0      	ldr	r0, [r4, #12]
    d0e8:	f7ff ff9a 	bl	d020 <std.isra.0>
    d0ec:	2301      	movs	r3, #1
    d0ee:	61a3      	str	r3, [r4, #24]
    d0f0:	bd13      	pop	{r0, r1, r4, pc}
    d0f2:	46c0      	nop			; (mov r8, r8)
    d0f4:	00012a14 	.word	0x00012a14
    d0f8:	0000d011 	.word	0x0000d011

0000d0fc <__sfp>:
    d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0fe:	4b1e      	ldr	r3, [pc, #120]	; (d178 <__sfp+0x7c>)
    d100:	0007      	movs	r7, r0
    d102:	681e      	ldr	r6, [r3, #0]
    d104:	69b3      	ldr	r3, [r6, #24]
    d106:	2b00      	cmp	r3, #0
    d108:	d102      	bne.n	d110 <__sfp+0x14>
    d10a:	0030      	movs	r0, r6
    d10c:	f7ff ffc2 	bl	d094 <__sinit>
    d110:	3648      	adds	r6, #72	; 0x48
    d112:	68b4      	ldr	r4, [r6, #8]
    d114:	6873      	ldr	r3, [r6, #4]
    d116:	3b01      	subs	r3, #1
    d118:	d504      	bpl.n	d124 <__sfp+0x28>
    d11a:	6833      	ldr	r3, [r6, #0]
    d11c:	2b00      	cmp	r3, #0
    d11e:	d007      	beq.n	d130 <__sfp+0x34>
    d120:	6836      	ldr	r6, [r6, #0]
    d122:	e7f6      	b.n	d112 <__sfp+0x16>
    d124:	220c      	movs	r2, #12
    d126:	5ea5      	ldrsh	r5, [r4, r2]
    d128:	2d00      	cmp	r5, #0
    d12a:	d00d      	beq.n	d148 <__sfp+0x4c>
    d12c:	3468      	adds	r4, #104	; 0x68
    d12e:	e7f2      	b.n	d116 <__sfp+0x1a>
    d130:	2104      	movs	r1, #4
    d132:	0038      	movs	r0, r7
    d134:	f7ff ff98 	bl	d068 <__sfmoreglue>
    d138:	6030      	str	r0, [r6, #0]
    d13a:	2800      	cmp	r0, #0
    d13c:	d1f0      	bne.n	d120 <__sfp+0x24>
    d13e:	230c      	movs	r3, #12
    d140:	0004      	movs	r4, r0
    d142:	603b      	str	r3, [r7, #0]
    d144:	0020      	movs	r0, r4
    d146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d148:	2301      	movs	r3, #1
    d14a:	0020      	movs	r0, r4
    d14c:	425b      	negs	r3, r3
    d14e:	81e3      	strh	r3, [r4, #14]
    d150:	3302      	adds	r3, #2
    d152:	81a3      	strh	r3, [r4, #12]
    d154:	6665      	str	r5, [r4, #100]	; 0x64
    d156:	6025      	str	r5, [r4, #0]
    d158:	60a5      	str	r5, [r4, #8]
    d15a:	6065      	str	r5, [r4, #4]
    d15c:	6125      	str	r5, [r4, #16]
    d15e:	6165      	str	r5, [r4, #20]
    d160:	61a5      	str	r5, [r4, #24]
    d162:	2208      	movs	r2, #8
    d164:	0029      	movs	r1, r5
    d166:	305c      	adds	r0, #92	; 0x5c
    d168:	f7fd ffc7 	bl	b0fa <memset>
    d16c:	6365      	str	r5, [r4, #52]	; 0x34
    d16e:	63a5      	str	r5, [r4, #56]	; 0x38
    d170:	64a5      	str	r5, [r4, #72]	; 0x48
    d172:	64e5      	str	r5, [r4, #76]	; 0x4c
    d174:	e7e6      	b.n	d144 <__sfp+0x48>
    d176:	46c0      	nop			; (mov r8, r8)
    d178:	00012a14 	.word	0x00012a14

0000d17c <_fwalk_reent>:
    d17c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d17e:	0004      	movs	r4, r0
    d180:	0007      	movs	r7, r0
    d182:	2600      	movs	r6, #0
    d184:	9101      	str	r1, [sp, #4]
    d186:	3448      	adds	r4, #72	; 0x48
    d188:	2c00      	cmp	r4, #0
    d18a:	d101      	bne.n	d190 <_fwalk_reent+0x14>
    d18c:	0030      	movs	r0, r6
    d18e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d190:	6863      	ldr	r3, [r4, #4]
    d192:	68a5      	ldr	r5, [r4, #8]
    d194:	9300      	str	r3, [sp, #0]
    d196:	9b00      	ldr	r3, [sp, #0]
    d198:	3b01      	subs	r3, #1
    d19a:	9300      	str	r3, [sp, #0]
    d19c:	d501      	bpl.n	d1a2 <_fwalk_reent+0x26>
    d19e:	6824      	ldr	r4, [r4, #0]
    d1a0:	e7f2      	b.n	d188 <_fwalk_reent+0xc>
    d1a2:	89ab      	ldrh	r3, [r5, #12]
    d1a4:	2b01      	cmp	r3, #1
    d1a6:	d908      	bls.n	d1ba <_fwalk_reent+0x3e>
    d1a8:	220e      	movs	r2, #14
    d1aa:	5eab      	ldrsh	r3, [r5, r2]
    d1ac:	3301      	adds	r3, #1
    d1ae:	d004      	beq.n	d1ba <_fwalk_reent+0x3e>
    d1b0:	0029      	movs	r1, r5
    d1b2:	0038      	movs	r0, r7
    d1b4:	9b01      	ldr	r3, [sp, #4]
    d1b6:	4798      	blx	r3
    d1b8:	4306      	orrs	r6, r0
    d1ba:	3568      	adds	r5, #104	; 0x68
    d1bc:	e7eb      	b.n	d196 <_fwalk_reent+0x1a>

0000d1be <__locale_ctype_ptr_l>:
    d1be:	30ec      	adds	r0, #236	; 0xec
    d1c0:	6800      	ldr	r0, [r0, #0]
    d1c2:	4770      	bx	lr

0000d1c4 <_localeconv_r>:
    d1c4:	4b03      	ldr	r3, [pc, #12]	; (d1d4 <_localeconv_r+0x10>)
    d1c6:	681b      	ldr	r3, [r3, #0]
    d1c8:	6a18      	ldr	r0, [r3, #32]
    d1ca:	2800      	cmp	r0, #0
    d1cc:	d100      	bne.n	d1d0 <_localeconv_r+0xc>
    d1ce:	4802      	ldr	r0, [pc, #8]	; (d1d8 <_localeconv_r+0x14>)
    d1d0:	30f0      	adds	r0, #240	; 0xf0
    d1d2:	4770      	bx	lr
    d1d4:	2000000c 	.word	0x2000000c
    d1d8:	20000070 	.word	0x20000070

0000d1dc <__swhatbuf_r>:
    d1dc:	b570      	push	{r4, r5, r6, lr}
    d1de:	000e      	movs	r6, r1
    d1e0:	001d      	movs	r5, r3
    d1e2:	230e      	movs	r3, #14
    d1e4:	5ec9      	ldrsh	r1, [r1, r3]
    d1e6:	b090      	sub	sp, #64	; 0x40
    d1e8:	0014      	movs	r4, r2
    d1ea:	2900      	cmp	r1, #0
    d1ec:	da07      	bge.n	d1fe <__swhatbuf_r+0x22>
    d1ee:	2300      	movs	r3, #0
    d1f0:	602b      	str	r3, [r5, #0]
    d1f2:	89b3      	ldrh	r3, [r6, #12]
    d1f4:	061b      	lsls	r3, r3, #24
    d1f6:	d411      	bmi.n	d21c <__swhatbuf_r+0x40>
    d1f8:	2380      	movs	r3, #128	; 0x80
    d1fa:	00db      	lsls	r3, r3, #3
    d1fc:	e00f      	b.n	d21e <__swhatbuf_r+0x42>
    d1fe:	aa01      	add	r2, sp, #4
    d200:	f000 fec6 	bl	df90 <_fstat_r>
    d204:	2800      	cmp	r0, #0
    d206:	dbf2      	blt.n	d1ee <__swhatbuf_r+0x12>
    d208:	22f0      	movs	r2, #240	; 0xf0
    d20a:	9b02      	ldr	r3, [sp, #8]
    d20c:	0212      	lsls	r2, r2, #8
    d20e:	4013      	ands	r3, r2
    d210:	4a05      	ldr	r2, [pc, #20]	; (d228 <__swhatbuf_r+0x4c>)
    d212:	189b      	adds	r3, r3, r2
    d214:	425a      	negs	r2, r3
    d216:	4153      	adcs	r3, r2
    d218:	602b      	str	r3, [r5, #0]
    d21a:	e7ed      	b.n	d1f8 <__swhatbuf_r+0x1c>
    d21c:	2340      	movs	r3, #64	; 0x40
    d21e:	2000      	movs	r0, #0
    d220:	6023      	str	r3, [r4, #0]
    d222:	b010      	add	sp, #64	; 0x40
    d224:	bd70      	pop	{r4, r5, r6, pc}
    d226:	46c0      	nop			; (mov r8, r8)
    d228:	ffffe000 	.word	0xffffe000

0000d22c <__smakebuf_r>:
    d22c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d22e:	2602      	movs	r6, #2
    d230:	898b      	ldrh	r3, [r1, #12]
    d232:	0005      	movs	r5, r0
    d234:	000c      	movs	r4, r1
    d236:	4233      	tst	r3, r6
    d238:	d006      	beq.n	d248 <__smakebuf_r+0x1c>
    d23a:	0023      	movs	r3, r4
    d23c:	3347      	adds	r3, #71	; 0x47
    d23e:	6023      	str	r3, [r4, #0]
    d240:	6123      	str	r3, [r4, #16]
    d242:	2301      	movs	r3, #1
    d244:	6163      	str	r3, [r4, #20]
    d246:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d248:	ab01      	add	r3, sp, #4
    d24a:	466a      	mov	r2, sp
    d24c:	f7ff ffc6 	bl	d1dc <__swhatbuf_r>
    d250:	9900      	ldr	r1, [sp, #0]
    d252:	0007      	movs	r7, r0
    d254:	0028      	movs	r0, r5
    d256:	f7fd ffa3 	bl	b1a0 <_malloc_r>
    d25a:	2800      	cmp	r0, #0
    d25c:	d108      	bne.n	d270 <__smakebuf_r+0x44>
    d25e:	220c      	movs	r2, #12
    d260:	5ea3      	ldrsh	r3, [r4, r2]
    d262:	059a      	lsls	r2, r3, #22
    d264:	d4ef      	bmi.n	d246 <__smakebuf_r+0x1a>
    d266:	2203      	movs	r2, #3
    d268:	4393      	bics	r3, r2
    d26a:	431e      	orrs	r6, r3
    d26c:	81a6      	strh	r6, [r4, #12]
    d26e:	e7e4      	b.n	d23a <__smakebuf_r+0xe>
    d270:	4b0f      	ldr	r3, [pc, #60]	; (d2b0 <__smakebuf_r+0x84>)
    d272:	62ab      	str	r3, [r5, #40]	; 0x28
    d274:	2380      	movs	r3, #128	; 0x80
    d276:	89a2      	ldrh	r2, [r4, #12]
    d278:	6020      	str	r0, [r4, #0]
    d27a:	4313      	orrs	r3, r2
    d27c:	81a3      	strh	r3, [r4, #12]
    d27e:	9b00      	ldr	r3, [sp, #0]
    d280:	6120      	str	r0, [r4, #16]
    d282:	6163      	str	r3, [r4, #20]
    d284:	9b01      	ldr	r3, [sp, #4]
    d286:	2b00      	cmp	r3, #0
    d288:	d00d      	beq.n	d2a6 <__smakebuf_r+0x7a>
    d28a:	230e      	movs	r3, #14
    d28c:	5ee1      	ldrsh	r1, [r4, r3]
    d28e:	0028      	movs	r0, r5
    d290:	f000 fe90 	bl	dfb4 <_isatty_r>
    d294:	2800      	cmp	r0, #0
    d296:	d006      	beq.n	d2a6 <__smakebuf_r+0x7a>
    d298:	2203      	movs	r2, #3
    d29a:	89a3      	ldrh	r3, [r4, #12]
    d29c:	4393      	bics	r3, r2
    d29e:	001a      	movs	r2, r3
    d2a0:	2301      	movs	r3, #1
    d2a2:	4313      	orrs	r3, r2
    d2a4:	81a3      	strh	r3, [r4, #12]
    d2a6:	89a0      	ldrh	r0, [r4, #12]
    d2a8:	4338      	orrs	r0, r7
    d2aa:	81a0      	strh	r0, [r4, #12]
    d2ac:	e7cb      	b.n	d246 <__smakebuf_r+0x1a>
    d2ae:	46c0      	nop			; (mov r8, r8)
    d2b0:	0000d011 	.word	0x0000d011

0000d2b4 <__ascii_mbtowc>:
    d2b4:	b082      	sub	sp, #8
    d2b6:	2900      	cmp	r1, #0
    d2b8:	d100      	bne.n	d2bc <__ascii_mbtowc+0x8>
    d2ba:	a901      	add	r1, sp, #4
    d2bc:	1e10      	subs	r0, r2, #0
    d2be:	d006      	beq.n	d2ce <__ascii_mbtowc+0x1a>
    d2c0:	2b00      	cmp	r3, #0
    d2c2:	d006      	beq.n	d2d2 <__ascii_mbtowc+0x1e>
    d2c4:	7813      	ldrb	r3, [r2, #0]
    d2c6:	600b      	str	r3, [r1, #0]
    d2c8:	7810      	ldrb	r0, [r2, #0]
    d2ca:	1e43      	subs	r3, r0, #1
    d2cc:	4198      	sbcs	r0, r3
    d2ce:	b002      	add	sp, #8
    d2d0:	4770      	bx	lr
    d2d2:	2002      	movs	r0, #2
    d2d4:	4240      	negs	r0, r0
    d2d6:	e7fa      	b.n	d2ce <__ascii_mbtowc+0x1a>

0000d2d8 <memchr>:
    d2d8:	b2c9      	uxtb	r1, r1
    d2da:	1882      	adds	r2, r0, r2
    d2dc:	4290      	cmp	r0, r2
    d2de:	d101      	bne.n	d2e4 <memchr+0xc>
    d2e0:	2000      	movs	r0, #0
    d2e2:	4770      	bx	lr
    d2e4:	7803      	ldrb	r3, [r0, #0]
    d2e6:	428b      	cmp	r3, r1
    d2e8:	d0fb      	beq.n	d2e2 <memchr+0xa>
    d2ea:	3001      	adds	r0, #1
    d2ec:	e7f6      	b.n	d2dc <memchr+0x4>

0000d2ee <__malloc_lock>:
    d2ee:	4770      	bx	lr

0000d2f0 <__malloc_unlock>:
    d2f0:	4770      	bx	lr

0000d2f2 <_Balloc>:
    d2f2:	b570      	push	{r4, r5, r6, lr}
    d2f4:	6a46      	ldr	r6, [r0, #36]	; 0x24
    d2f6:	0004      	movs	r4, r0
    d2f8:	000d      	movs	r5, r1
    d2fa:	2e00      	cmp	r6, #0
    d2fc:	d107      	bne.n	d30e <_Balloc+0x1c>
    d2fe:	2010      	movs	r0, #16
    d300:	f7fd fecc 	bl	b09c <malloc>
    d304:	6260      	str	r0, [r4, #36]	; 0x24
    d306:	6046      	str	r6, [r0, #4]
    d308:	6086      	str	r6, [r0, #8]
    d30a:	6006      	str	r6, [r0, #0]
    d30c:	60c6      	str	r6, [r0, #12]
    d30e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    d310:	68f3      	ldr	r3, [r6, #12]
    d312:	2b00      	cmp	r3, #0
    d314:	d013      	beq.n	d33e <_Balloc+0x4c>
    d316:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d318:	00aa      	lsls	r2, r5, #2
    d31a:	68db      	ldr	r3, [r3, #12]
    d31c:	189b      	adds	r3, r3, r2
    d31e:	6818      	ldr	r0, [r3, #0]
    d320:	2800      	cmp	r0, #0
    d322:	d118      	bne.n	d356 <_Balloc+0x64>
    d324:	2101      	movs	r1, #1
    d326:	000e      	movs	r6, r1
    d328:	40ae      	lsls	r6, r5
    d32a:	1d72      	adds	r2, r6, #5
    d32c:	0092      	lsls	r2, r2, #2
    d32e:	0020      	movs	r0, r4
    d330:	f000 fac2 	bl	d8b8 <_calloc_r>
    d334:	2800      	cmp	r0, #0
    d336:	d00c      	beq.n	d352 <_Balloc+0x60>
    d338:	6045      	str	r5, [r0, #4]
    d33a:	6086      	str	r6, [r0, #8]
    d33c:	e00d      	b.n	d35a <_Balloc+0x68>
    d33e:	2221      	movs	r2, #33	; 0x21
    d340:	2104      	movs	r1, #4
    d342:	0020      	movs	r0, r4
    d344:	f000 fab8 	bl	d8b8 <_calloc_r>
    d348:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d34a:	60f0      	str	r0, [r6, #12]
    d34c:	68db      	ldr	r3, [r3, #12]
    d34e:	2b00      	cmp	r3, #0
    d350:	d1e1      	bne.n	d316 <_Balloc+0x24>
    d352:	2000      	movs	r0, #0
    d354:	bd70      	pop	{r4, r5, r6, pc}
    d356:	6802      	ldr	r2, [r0, #0]
    d358:	601a      	str	r2, [r3, #0]
    d35a:	2300      	movs	r3, #0
    d35c:	6103      	str	r3, [r0, #16]
    d35e:	60c3      	str	r3, [r0, #12]
    d360:	e7f8      	b.n	d354 <_Balloc+0x62>

0000d362 <_Bfree>:
    d362:	b570      	push	{r4, r5, r6, lr}
    d364:	6a44      	ldr	r4, [r0, #36]	; 0x24
    d366:	0006      	movs	r6, r0
    d368:	000d      	movs	r5, r1
    d36a:	2c00      	cmp	r4, #0
    d36c:	d107      	bne.n	d37e <_Bfree+0x1c>
    d36e:	2010      	movs	r0, #16
    d370:	f7fd fe94 	bl	b09c <malloc>
    d374:	6270      	str	r0, [r6, #36]	; 0x24
    d376:	6044      	str	r4, [r0, #4]
    d378:	6084      	str	r4, [r0, #8]
    d37a:	6004      	str	r4, [r0, #0]
    d37c:	60c4      	str	r4, [r0, #12]
    d37e:	2d00      	cmp	r5, #0
    d380:	d007      	beq.n	d392 <_Bfree+0x30>
    d382:	6a73      	ldr	r3, [r6, #36]	; 0x24
    d384:	686a      	ldr	r2, [r5, #4]
    d386:	68db      	ldr	r3, [r3, #12]
    d388:	0092      	lsls	r2, r2, #2
    d38a:	189b      	adds	r3, r3, r2
    d38c:	681a      	ldr	r2, [r3, #0]
    d38e:	602a      	str	r2, [r5, #0]
    d390:	601d      	str	r5, [r3, #0]
    d392:	bd70      	pop	{r4, r5, r6, pc}

0000d394 <__multadd>:
    d394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d396:	001e      	movs	r6, r3
    d398:	2314      	movs	r3, #20
    d39a:	469c      	mov	ip, r3
    d39c:	0007      	movs	r7, r0
    d39e:	000c      	movs	r4, r1
    d3a0:	2000      	movs	r0, #0
    d3a2:	690d      	ldr	r5, [r1, #16]
    d3a4:	448c      	add	ip, r1
    d3a6:	4663      	mov	r3, ip
    d3a8:	8819      	ldrh	r1, [r3, #0]
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	4351      	muls	r1, r2
    d3ae:	0c1b      	lsrs	r3, r3, #16
    d3b0:	4353      	muls	r3, r2
    d3b2:	1989      	adds	r1, r1, r6
    d3b4:	0c0e      	lsrs	r6, r1, #16
    d3b6:	199b      	adds	r3, r3, r6
    d3b8:	b289      	uxth	r1, r1
    d3ba:	0c1e      	lsrs	r6, r3, #16
    d3bc:	041b      	lsls	r3, r3, #16
    d3be:	185b      	adds	r3, r3, r1
    d3c0:	4661      	mov	r1, ip
    d3c2:	3001      	adds	r0, #1
    d3c4:	c108      	stmia	r1!, {r3}
    d3c6:	468c      	mov	ip, r1
    d3c8:	4285      	cmp	r5, r0
    d3ca:	dcec      	bgt.n	d3a6 <__multadd+0x12>
    d3cc:	2e00      	cmp	r6, #0
    d3ce:	d01b      	beq.n	d408 <__multadd+0x74>
    d3d0:	68a3      	ldr	r3, [r4, #8]
    d3d2:	429d      	cmp	r5, r3
    d3d4:	db12      	blt.n	d3fc <__multadd+0x68>
    d3d6:	6863      	ldr	r3, [r4, #4]
    d3d8:	0038      	movs	r0, r7
    d3da:	1c59      	adds	r1, r3, #1
    d3dc:	f7ff ff89 	bl	d2f2 <_Balloc>
    d3e0:	0021      	movs	r1, r4
    d3e2:	6923      	ldr	r3, [r4, #16]
    d3e4:	9001      	str	r0, [sp, #4]
    d3e6:	1c9a      	adds	r2, r3, #2
    d3e8:	0092      	lsls	r2, r2, #2
    d3ea:	310c      	adds	r1, #12
    d3ec:	300c      	adds	r0, #12
    d3ee:	f7fd fe69 	bl	b0c4 <memcpy>
    d3f2:	0021      	movs	r1, r4
    d3f4:	0038      	movs	r0, r7
    d3f6:	f7ff ffb4 	bl	d362 <_Bfree>
    d3fa:	9c01      	ldr	r4, [sp, #4]
    d3fc:	1d2b      	adds	r3, r5, #4
    d3fe:	009b      	lsls	r3, r3, #2
    d400:	18e3      	adds	r3, r4, r3
    d402:	3501      	adds	r5, #1
    d404:	605e      	str	r6, [r3, #4]
    d406:	6125      	str	r5, [r4, #16]
    d408:	0020      	movs	r0, r4
    d40a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000d40c <__hi0bits>:
    d40c:	0003      	movs	r3, r0
    d40e:	0c02      	lsrs	r2, r0, #16
    d410:	2000      	movs	r0, #0
    d412:	4282      	cmp	r2, r0
    d414:	d101      	bne.n	d41a <__hi0bits+0xe>
    d416:	041b      	lsls	r3, r3, #16
    d418:	3010      	adds	r0, #16
    d41a:	0e1a      	lsrs	r2, r3, #24
    d41c:	d101      	bne.n	d422 <__hi0bits+0x16>
    d41e:	3008      	adds	r0, #8
    d420:	021b      	lsls	r3, r3, #8
    d422:	0f1a      	lsrs	r2, r3, #28
    d424:	d101      	bne.n	d42a <__hi0bits+0x1e>
    d426:	3004      	adds	r0, #4
    d428:	011b      	lsls	r3, r3, #4
    d42a:	0f9a      	lsrs	r2, r3, #30
    d42c:	d101      	bne.n	d432 <__hi0bits+0x26>
    d42e:	3002      	adds	r0, #2
    d430:	009b      	lsls	r3, r3, #2
    d432:	2b00      	cmp	r3, #0
    d434:	db03      	blt.n	d43e <__hi0bits+0x32>
    d436:	3001      	adds	r0, #1
    d438:	005b      	lsls	r3, r3, #1
    d43a:	d400      	bmi.n	d43e <__hi0bits+0x32>
    d43c:	2020      	movs	r0, #32
    d43e:	4770      	bx	lr

0000d440 <__lo0bits>:
    d440:	2207      	movs	r2, #7
    d442:	6803      	ldr	r3, [r0, #0]
    d444:	b510      	push	{r4, lr}
    d446:	0001      	movs	r1, r0
    d448:	401a      	ands	r2, r3
    d44a:	d00d      	beq.n	d468 <__lo0bits+0x28>
    d44c:	2401      	movs	r4, #1
    d44e:	2000      	movs	r0, #0
    d450:	4223      	tst	r3, r4
    d452:	d105      	bne.n	d460 <__lo0bits+0x20>
    d454:	3002      	adds	r0, #2
    d456:	4203      	tst	r3, r0
    d458:	d003      	beq.n	d462 <__lo0bits+0x22>
    d45a:	40e3      	lsrs	r3, r4
    d45c:	0020      	movs	r0, r4
    d45e:	600b      	str	r3, [r1, #0]
    d460:	bd10      	pop	{r4, pc}
    d462:	089b      	lsrs	r3, r3, #2
    d464:	600b      	str	r3, [r1, #0]
    d466:	e7fb      	b.n	d460 <__lo0bits+0x20>
    d468:	b29c      	uxth	r4, r3
    d46a:	0010      	movs	r0, r2
    d46c:	2c00      	cmp	r4, #0
    d46e:	d101      	bne.n	d474 <__lo0bits+0x34>
    d470:	2010      	movs	r0, #16
    d472:	0c1b      	lsrs	r3, r3, #16
    d474:	b2da      	uxtb	r2, r3
    d476:	2a00      	cmp	r2, #0
    d478:	d101      	bne.n	d47e <__lo0bits+0x3e>
    d47a:	3008      	adds	r0, #8
    d47c:	0a1b      	lsrs	r3, r3, #8
    d47e:	071a      	lsls	r2, r3, #28
    d480:	d101      	bne.n	d486 <__lo0bits+0x46>
    d482:	3004      	adds	r0, #4
    d484:	091b      	lsrs	r3, r3, #4
    d486:	079a      	lsls	r2, r3, #30
    d488:	d101      	bne.n	d48e <__lo0bits+0x4e>
    d48a:	3002      	adds	r0, #2
    d48c:	089b      	lsrs	r3, r3, #2
    d48e:	07da      	lsls	r2, r3, #31
    d490:	d4e8      	bmi.n	d464 <__lo0bits+0x24>
    d492:	085b      	lsrs	r3, r3, #1
    d494:	d001      	beq.n	d49a <__lo0bits+0x5a>
    d496:	3001      	adds	r0, #1
    d498:	e7e4      	b.n	d464 <__lo0bits+0x24>
    d49a:	2020      	movs	r0, #32
    d49c:	e7e0      	b.n	d460 <__lo0bits+0x20>

0000d49e <__i2b>:
    d49e:	b510      	push	{r4, lr}
    d4a0:	000c      	movs	r4, r1
    d4a2:	2101      	movs	r1, #1
    d4a4:	f7ff ff25 	bl	d2f2 <_Balloc>
    d4a8:	2301      	movs	r3, #1
    d4aa:	6144      	str	r4, [r0, #20]
    d4ac:	6103      	str	r3, [r0, #16]
    d4ae:	bd10      	pop	{r4, pc}

0000d4b0 <__multiply>:
    d4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4b2:	690b      	ldr	r3, [r1, #16]
    d4b4:	0015      	movs	r5, r2
    d4b6:	6912      	ldr	r2, [r2, #16]
    d4b8:	b089      	sub	sp, #36	; 0x24
    d4ba:	000c      	movs	r4, r1
    d4bc:	4293      	cmp	r3, r2
    d4be:	da01      	bge.n	d4c4 <__multiply+0x14>
    d4c0:	002c      	movs	r4, r5
    d4c2:	000d      	movs	r5, r1
    d4c4:	6927      	ldr	r7, [r4, #16]
    d4c6:	692e      	ldr	r6, [r5, #16]
    d4c8:	68a2      	ldr	r2, [r4, #8]
    d4ca:	19bb      	adds	r3, r7, r6
    d4cc:	6861      	ldr	r1, [r4, #4]
    d4ce:	9301      	str	r3, [sp, #4]
    d4d0:	4293      	cmp	r3, r2
    d4d2:	dd00      	ble.n	d4d6 <__multiply+0x26>
    d4d4:	3101      	adds	r1, #1
    d4d6:	f7ff ff0c 	bl	d2f2 <_Balloc>
    d4da:	0003      	movs	r3, r0
    d4dc:	3314      	adds	r3, #20
    d4de:	9300      	str	r3, [sp, #0]
    d4e0:	9a00      	ldr	r2, [sp, #0]
    d4e2:	19bb      	adds	r3, r7, r6
    d4e4:	4694      	mov	ip, r2
    d4e6:	009b      	lsls	r3, r3, #2
    d4e8:	449c      	add	ip, r3
    d4ea:	0013      	movs	r3, r2
    d4ec:	2200      	movs	r2, #0
    d4ee:	9004      	str	r0, [sp, #16]
    d4f0:	4563      	cmp	r3, ip
    d4f2:	d31c      	bcc.n	d52e <__multiply+0x7e>
    d4f4:	002a      	movs	r2, r5
    d4f6:	3414      	adds	r4, #20
    d4f8:	00bf      	lsls	r7, r7, #2
    d4fa:	19e3      	adds	r3, r4, r7
    d4fc:	3214      	adds	r2, #20
    d4fe:	00b6      	lsls	r6, r6, #2
    d500:	9305      	str	r3, [sp, #20]
    d502:	1993      	adds	r3, r2, r6
    d504:	9402      	str	r4, [sp, #8]
    d506:	9306      	str	r3, [sp, #24]
    d508:	9b06      	ldr	r3, [sp, #24]
    d50a:	429a      	cmp	r2, r3
    d50c:	d311      	bcc.n	d532 <__multiply+0x82>
    d50e:	9b01      	ldr	r3, [sp, #4]
    d510:	2b00      	cmp	r3, #0
    d512:	dd06      	ble.n	d522 <__multiply+0x72>
    d514:	2304      	movs	r3, #4
    d516:	425b      	negs	r3, r3
    d518:	449c      	add	ip, r3
    d51a:	4663      	mov	r3, ip
    d51c:	681b      	ldr	r3, [r3, #0]
    d51e:	2b00      	cmp	r3, #0
    d520:	d051      	beq.n	d5c6 <__multiply+0x116>
    d522:	9b04      	ldr	r3, [sp, #16]
    d524:	9a01      	ldr	r2, [sp, #4]
    d526:	0018      	movs	r0, r3
    d528:	611a      	str	r2, [r3, #16]
    d52a:	b009      	add	sp, #36	; 0x24
    d52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d52e:	c304      	stmia	r3!, {r2}
    d530:	e7de      	b.n	d4f0 <__multiply+0x40>
    d532:	8814      	ldrh	r4, [r2, #0]
    d534:	2c00      	cmp	r4, #0
    d536:	d01e      	beq.n	d576 <__multiply+0xc6>
    d538:	2600      	movs	r6, #0
    d53a:	9d00      	ldr	r5, [sp, #0]
    d53c:	9f02      	ldr	r7, [sp, #8]
    d53e:	cf01      	ldmia	r7!, {r0}
    d540:	9507      	str	r5, [sp, #28]
    d542:	cd08      	ldmia	r5!, {r3}
    d544:	9303      	str	r3, [sp, #12]
    d546:	b283      	uxth	r3, r0
    d548:	4363      	muls	r3, r4
    d54a:	0019      	movs	r1, r3
    d54c:	466b      	mov	r3, sp
    d54e:	0c00      	lsrs	r0, r0, #16
    d550:	899b      	ldrh	r3, [r3, #12]
    d552:	4360      	muls	r0, r4
    d554:	18cb      	adds	r3, r1, r3
    d556:	9903      	ldr	r1, [sp, #12]
    d558:	199b      	adds	r3, r3, r6
    d55a:	0c09      	lsrs	r1, r1, #16
    d55c:	1841      	adds	r1, r0, r1
    d55e:	0c18      	lsrs	r0, r3, #16
    d560:	1809      	adds	r1, r1, r0
    d562:	0c0e      	lsrs	r6, r1, #16
    d564:	b29b      	uxth	r3, r3
    d566:	0409      	lsls	r1, r1, #16
    d568:	430b      	orrs	r3, r1
    d56a:	9907      	ldr	r1, [sp, #28]
    d56c:	600b      	str	r3, [r1, #0]
    d56e:	9b05      	ldr	r3, [sp, #20]
    d570:	42bb      	cmp	r3, r7
    d572:	d8e4      	bhi.n	d53e <__multiply+0x8e>
    d574:	602e      	str	r6, [r5, #0]
    d576:	6813      	ldr	r3, [r2, #0]
    d578:	0c1b      	lsrs	r3, r3, #16
    d57a:	9303      	str	r3, [sp, #12]
    d57c:	d01e      	beq.n	d5bc <__multiply+0x10c>
    d57e:	2600      	movs	r6, #0
    d580:	9b00      	ldr	r3, [sp, #0]
    d582:	9c02      	ldr	r4, [sp, #8]
    d584:	681b      	ldr	r3, [r3, #0]
    d586:	9800      	ldr	r0, [sp, #0]
    d588:	0007      	movs	r7, r0
    d58a:	8821      	ldrh	r1, [r4, #0]
    d58c:	9d03      	ldr	r5, [sp, #12]
    d58e:	b29b      	uxth	r3, r3
    d590:	4369      	muls	r1, r5
    d592:	c820      	ldmia	r0!, {r5}
    d594:	0c2d      	lsrs	r5, r5, #16
    d596:	1949      	adds	r1, r1, r5
    d598:	198e      	adds	r6, r1, r6
    d59a:	0431      	lsls	r1, r6, #16
    d59c:	430b      	orrs	r3, r1
    d59e:	603b      	str	r3, [r7, #0]
    d5a0:	cc08      	ldmia	r4!, {r3}
    d5a2:	9903      	ldr	r1, [sp, #12]
    d5a4:	0c1b      	lsrs	r3, r3, #16
    d5a6:	434b      	muls	r3, r1
    d5a8:	6879      	ldr	r1, [r7, #4]
    d5aa:	0c36      	lsrs	r6, r6, #16
    d5ac:	b289      	uxth	r1, r1
    d5ae:	185b      	adds	r3, r3, r1
    d5b0:	9905      	ldr	r1, [sp, #20]
    d5b2:	199b      	adds	r3, r3, r6
    d5b4:	0c1e      	lsrs	r6, r3, #16
    d5b6:	42a1      	cmp	r1, r4
    d5b8:	d8e6      	bhi.n	d588 <__multiply+0xd8>
    d5ba:	6003      	str	r3, [r0, #0]
    d5bc:	9b00      	ldr	r3, [sp, #0]
    d5be:	3204      	adds	r2, #4
    d5c0:	3304      	adds	r3, #4
    d5c2:	9300      	str	r3, [sp, #0]
    d5c4:	e7a0      	b.n	d508 <__multiply+0x58>
    d5c6:	9b01      	ldr	r3, [sp, #4]
    d5c8:	3b01      	subs	r3, #1
    d5ca:	9301      	str	r3, [sp, #4]
    d5cc:	e79f      	b.n	d50e <__multiply+0x5e>
	...

0000d5d0 <__pow5mult>:
    d5d0:	2303      	movs	r3, #3
    d5d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d5d4:	4013      	ands	r3, r2
    d5d6:	0005      	movs	r5, r0
    d5d8:	000e      	movs	r6, r1
    d5da:	0014      	movs	r4, r2
    d5dc:	2b00      	cmp	r3, #0
    d5de:	d008      	beq.n	d5f2 <__pow5mult+0x22>
    d5e0:	4922      	ldr	r1, [pc, #136]	; (d66c <__pow5mult+0x9c>)
    d5e2:	3b01      	subs	r3, #1
    d5e4:	009a      	lsls	r2, r3, #2
    d5e6:	5852      	ldr	r2, [r2, r1]
    d5e8:	2300      	movs	r3, #0
    d5ea:	0031      	movs	r1, r6
    d5ec:	f7ff fed2 	bl	d394 <__multadd>
    d5f0:	0006      	movs	r6, r0
    d5f2:	10a3      	asrs	r3, r4, #2
    d5f4:	9301      	str	r3, [sp, #4]
    d5f6:	d036      	beq.n	d666 <__pow5mult+0x96>
    d5f8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    d5fa:	2c00      	cmp	r4, #0
    d5fc:	d107      	bne.n	d60e <__pow5mult+0x3e>
    d5fe:	2010      	movs	r0, #16
    d600:	f7fd fd4c 	bl	b09c <malloc>
    d604:	6268      	str	r0, [r5, #36]	; 0x24
    d606:	6044      	str	r4, [r0, #4]
    d608:	6084      	str	r4, [r0, #8]
    d60a:	6004      	str	r4, [r0, #0]
    d60c:	60c4      	str	r4, [r0, #12]
    d60e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    d610:	68bc      	ldr	r4, [r7, #8]
    d612:	2c00      	cmp	r4, #0
    d614:	d107      	bne.n	d626 <__pow5mult+0x56>
    d616:	4916      	ldr	r1, [pc, #88]	; (d670 <__pow5mult+0xa0>)
    d618:	0028      	movs	r0, r5
    d61a:	f7ff ff40 	bl	d49e <__i2b>
    d61e:	2300      	movs	r3, #0
    d620:	0004      	movs	r4, r0
    d622:	60b8      	str	r0, [r7, #8]
    d624:	6003      	str	r3, [r0, #0]
    d626:	2201      	movs	r2, #1
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	4213      	tst	r3, r2
    d62c:	d00a      	beq.n	d644 <__pow5mult+0x74>
    d62e:	0031      	movs	r1, r6
    d630:	0022      	movs	r2, r4
    d632:	0028      	movs	r0, r5
    d634:	f7ff ff3c 	bl	d4b0 <__multiply>
    d638:	0007      	movs	r7, r0
    d63a:	0031      	movs	r1, r6
    d63c:	0028      	movs	r0, r5
    d63e:	f7ff fe90 	bl	d362 <_Bfree>
    d642:	003e      	movs	r6, r7
    d644:	9b01      	ldr	r3, [sp, #4]
    d646:	105b      	asrs	r3, r3, #1
    d648:	9301      	str	r3, [sp, #4]
    d64a:	d00c      	beq.n	d666 <__pow5mult+0x96>
    d64c:	6820      	ldr	r0, [r4, #0]
    d64e:	2800      	cmp	r0, #0
    d650:	d107      	bne.n	d662 <__pow5mult+0x92>
    d652:	0022      	movs	r2, r4
    d654:	0021      	movs	r1, r4
    d656:	0028      	movs	r0, r5
    d658:	f7ff ff2a 	bl	d4b0 <__multiply>
    d65c:	2300      	movs	r3, #0
    d65e:	6020      	str	r0, [r4, #0]
    d660:	6003      	str	r3, [r0, #0]
    d662:	0004      	movs	r4, r0
    d664:	e7df      	b.n	d626 <__pow5mult+0x56>
    d666:	0030      	movs	r0, r6
    d668:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d66a:	46c0      	nop			; (mov r8, r8)
    d66c:	00012bb8 	.word	0x00012bb8
    d670:	00000271 	.word	0x00000271

0000d674 <__lshift>:
    d674:	b5f0      	push	{r4, r5, r6, r7, lr}
    d676:	000d      	movs	r5, r1
    d678:	0017      	movs	r7, r2
    d67a:	692b      	ldr	r3, [r5, #16]
    d67c:	1154      	asrs	r4, r2, #5
    d67e:	b085      	sub	sp, #20
    d680:	18e3      	adds	r3, r4, r3
    d682:	9302      	str	r3, [sp, #8]
    d684:	3301      	adds	r3, #1
    d686:	9301      	str	r3, [sp, #4]
    d688:	6849      	ldr	r1, [r1, #4]
    d68a:	68ab      	ldr	r3, [r5, #8]
    d68c:	9003      	str	r0, [sp, #12]
    d68e:	9a01      	ldr	r2, [sp, #4]
    d690:	4293      	cmp	r3, r2
    d692:	db34      	blt.n	d6fe <__lshift+0x8a>
    d694:	9803      	ldr	r0, [sp, #12]
    d696:	f7ff fe2c 	bl	d2f2 <_Balloc>
    d69a:	2300      	movs	r3, #0
    d69c:	0002      	movs	r2, r0
    d69e:	0006      	movs	r6, r0
    d6a0:	0019      	movs	r1, r3
    d6a2:	3214      	adds	r2, #20
    d6a4:	42a3      	cmp	r3, r4
    d6a6:	db2d      	blt.n	d704 <__lshift+0x90>
    d6a8:	43e3      	mvns	r3, r4
    d6aa:	17db      	asrs	r3, r3, #31
    d6ac:	401c      	ands	r4, r3
    d6ae:	002b      	movs	r3, r5
    d6b0:	211f      	movs	r1, #31
    d6b2:	00a4      	lsls	r4, r4, #2
    d6b4:	1914      	adds	r4, r2, r4
    d6b6:	692a      	ldr	r2, [r5, #16]
    d6b8:	3314      	adds	r3, #20
    d6ba:	0092      	lsls	r2, r2, #2
    d6bc:	189a      	adds	r2, r3, r2
    d6be:	400f      	ands	r7, r1
    d6c0:	d024      	beq.n	d70c <__lshift+0x98>
    d6c2:	3101      	adds	r1, #1
    d6c4:	1bc9      	subs	r1, r1, r7
    d6c6:	468c      	mov	ip, r1
    d6c8:	2100      	movs	r1, #0
    d6ca:	6818      	ldr	r0, [r3, #0]
    d6cc:	40b8      	lsls	r0, r7
    d6ce:	4301      	orrs	r1, r0
    d6d0:	4660      	mov	r0, ip
    d6d2:	6021      	str	r1, [r4, #0]
    d6d4:	cb02      	ldmia	r3!, {r1}
    d6d6:	3404      	adds	r4, #4
    d6d8:	40c1      	lsrs	r1, r0
    d6da:	429a      	cmp	r2, r3
    d6dc:	d8f5      	bhi.n	d6ca <__lshift+0x56>
    d6de:	6021      	str	r1, [r4, #0]
    d6e0:	2900      	cmp	r1, #0
    d6e2:	d002      	beq.n	d6ea <__lshift+0x76>
    d6e4:	9b02      	ldr	r3, [sp, #8]
    d6e6:	3302      	adds	r3, #2
    d6e8:	9301      	str	r3, [sp, #4]
    d6ea:	9b01      	ldr	r3, [sp, #4]
    d6ec:	9803      	ldr	r0, [sp, #12]
    d6ee:	3b01      	subs	r3, #1
    d6f0:	6133      	str	r3, [r6, #16]
    d6f2:	0029      	movs	r1, r5
    d6f4:	f7ff fe35 	bl	d362 <_Bfree>
    d6f8:	0030      	movs	r0, r6
    d6fa:	b005      	add	sp, #20
    d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6fe:	3101      	adds	r1, #1
    d700:	005b      	lsls	r3, r3, #1
    d702:	e7c4      	b.n	d68e <__lshift+0x1a>
    d704:	0098      	lsls	r0, r3, #2
    d706:	5011      	str	r1, [r2, r0]
    d708:	3301      	adds	r3, #1
    d70a:	e7cb      	b.n	d6a4 <__lshift+0x30>
    d70c:	cb02      	ldmia	r3!, {r1}
    d70e:	c402      	stmia	r4!, {r1}
    d710:	429a      	cmp	r2, r3
    d712:	d8fb      	bhi.n	d70c <__lshift+0x98>
    d714:	e7e9      	b.n	d6ea <__lshift+0x76>

0000d716 <__mcmp>:
    d716:	690a      	ldr	r2, [r1, #16]
    d718:	6903      	ldr	r3, [r0, #16]
    d71a:	b530      	push	{r4, r5, lr}
    d71c:	1a9b      	subs	r3, r3, r2
    d71e:	d10e      	bne.n	d73e <__mcmp+0x28>
    d720:	0092      	lsls	r2, r2, #2
    d722:	3014      	adds	r0, #20
    d724:	3114      	adds	r1, #20
    d726:	1884      	adds	r4, r0, r2
    d728:	1889      	adds	r1, r1, r2
    d72a:	3c04      	subs	r4, #4
    d72c:	3904      	subs	r1, #4
    d72e:	6822      	ldr	r2, [r4, #0]
    d730:	680d      	ldr	r5, [r1, #0]
    d732:	42aa      	cmp	r2, r5
    d734:	d005      	beq.n	d742 <__mcmp+0x2c>
    d736:	42aa      	cmp	r2, r5
    d738:	4192      	sbcs	r2, r2
    d73a:	2301      	movs	r3, #1
    d73c:	4313      	orrs	r3, r2
    d73e:	0018      	movs	r0, r3
    d740:	bd30      	pop	{r4, r5, pc}
    d742:	42a0      	cmp	r0, r4
    d744:	d3f1      	bcc.n	d72a <__mcmp+0x14>
    d746:	e7fa      	b.n	d73e <__mcmp+0x28>

0000d748 <__mdiff>:
    d748:	b5f0      	push	{r4, r5, r6, r7, lr}
    d74a:	000d      	movs	r5, r1
    d74c:	b085      	sub	sp, #20
    d74e:	0007      	movs	r7, r0
    d750:	0011      	movs	r1, r2
    d752:	0028      	movs	r0, r5
    d754:	0014      	movs	r4, r2
    d756:	f7ff ffde 	bl	d716 <__mcmp>
    d75a:	1e06      	subs	r6, r0, #0
    d75c:	d108      	bne.n	d770 <__mdiff+0x28>
    d75e:	0001      	movs	r1, r0
    d760:	0038      	movs	r0, r7
    d762:	f7ff fdc6 	bl	d2f2 <_Balloc>
    d766:	2301      	movs	r3, #1
    d768:	6146      	str	r6, [r0, #20]
    d76a:	6103      	str	r3, [r0, #16]
    d76c:	b005      	add	sp, #20
    d76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d770:	2301      	movs	r3, #1
    d772:	9301      	str	r3, [sp, #4]
    d774:	2800      	cmp	r0, #0
    d776:	db04      	blt.n	d782 <__mdiff+0x3a>
    d778:	0023      	movs	r3, r4
    d77a:	002c      	movs	r4, r5
    d77c:	001d      	movs	r5, r3
    d77e:	2300      	movs	r3, #0
    d780:	9301      	str	r3, [sp, #4]
    d782:	6861      	ldr	r1, [r4, #4]
    d784:	0038      	movs	r0, r7
    d786:	f7ff fdb4 	bl	d2f2 <_Balloc>
    d78a:	002f      	movs	r7, r5
    d78c:	2200      	movs	r2, #0
    d78e:	9b01      	ldr	r3, [sp, #4]
    d790:	6926      	ldr	r6, [r4, #16]
    d792:	60c3      	str	r3, [r0, #12]
    d794:	3414      	adds	r4, #20
    d796:	00b3      	lsls	r3, r6, #2
    d798:	18e3      	adds	r3, r4, r3
    d79a:	9302      	str	r3, [sp, #8]
    d79c:	692b      	ldr	r3, [r5, #16]
    d79e:	3714      	adds	r7, #20
    d7a0:	009b      	lsls	r3, r3, #2
    d7a2:	18fb      	adds	r3, r7, r3
    d7a4:	9303      	str	r3, [sp, #12]
    d7a6:	0003      	movs	r3, r0
    d7a8:	4694      	mov	ip, r2
    d7aa:	3314      	adds	r3, #20
    d7ac:	cc20      	ldmia	r4!, {r5}
    d7ae:	cf04      	ldmia	r7!, {r2}
    d7b0:	9201      	str	r2, [sp, #4]
    d7b2:	b2aa      	uxth	r2, r5
    d7b4:	4494      	add	ip, r2
    d7b6:	466a      	mov	r2, sp
    d7b8:	4661      	mov	r1, ip
    d7ba:	8892      	ldrh	r2, [r2, #4]
    d7bc:	0c2d      	lsrs	r5, r5, #16
    d7be:	1a8a      	subs	r2, r1, r2
    d7c0:	9901      	ldr	r1, [sp, #4]
    d7c2:	0c09      	lsrs	r1, r1, #16
    d7c4:	1a69      	subs	r1, r5, r1
    d7c6:	1415      	asrs	r5, r2, #16
    d7c8:	1949      	adds	r1, r1, r5
    d7ca:	140d      	asrs	r5, r1, #16
    d7cc:	b292      	uxth	r2, r2
    d7ce:	0409      	lsls	r1, r1, #16
    d7d0:	430a      	orrs	r2, r1
    d7d2:	601a      	str	r2, [r3, #0]
    d7d4:	9a03      	ldr	r2, [sp, #12]
    d7d6:	46ac      	mov	ip, r5
    d7d8:	3304      	adds	r3, #4
    d7da:	42ba      	cmp	r2, r7
    d7dc:	d8e6      	bhi.n	d7ac <__mdiff+0x64>
    d7de:	9902      	ldr	r1, [sp, #8]
    d7e0:	001a      	movs	r2, r3
    d7e2:	428c      	cmp	r4, r1
    d7e4:	d305      	bcc.n	d7f2 <__mdiff+0xaa>
    d7e6:	3a04      	subs	r2, #4
    d7e8:	6813      	ldr	r3, [r2, #0]
    d7ea:	2b00      	cmp	r3, #0
    d7ec:	d00e      	beq.n	d80c <__mdiff+0xc4>
    d7ee:	6106      	str	r6, [r0, #16]
    d7f0:	e7bc      	b.n	d76c <__mdiff+0x24>
    d7f2:	cc04      	ldmia	r4!, {r2}
    d7f4:	b291      	uxth	r1, r2
    d7f6:	4461      	add	r1, ip
    d7f8:	140d      	asrs	r5, r1, #16
    d7fa:	0c12      	lsrs	r2, r2, #16
    d7fc:	1952      	adds	r2, r2, r5
    d7fe:	1415      	asrs	r5, r2, #16
    d800:	b289      	uxth	r1, r1
    d802:	0412      	lsls	r2, r2, #16
    d804:	430a      	orrs	r2, r1
    d806:	46ac      	mov	ip, r5
    d808:	c304      	stmia	r3!, {r2}
    d80a:	e7e8      	b.n	d7de <__mdiff+0x96>
    d80c:	3e01      	subs	r6, #1
    d80e:	e7ea      	b.n	d7e6 <__mdiff+0x9e>

0000d810 <__d2b>:
    d810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d812:	001d      	movs	r5, r3
    d814:	2101      	movs	r1, #1
    d816:	9f08      	ldr	r7, [sp, #32]
    d818:	0014      	movs	r4, r2
    d81a:	f7ff fd6a 	bl	d2f2 <_Balloc>
    d81e:	032b      	lsls	r3, r5, #12
    d820:	006d      	lsls	r5, r5, #1
    d822:	0006      	movs	r6, r0
    d824:	0b1b      	lsrs	r3, r3, #12
    d826:	0d6d      	lsrs	r5, r5, #21
    d828:	d124      	bne.n	d874 <__d2b+0x64>
    d82a:	9301      	str	r3, [sp, #4]
    d82c:	2c00      	cmp	r4, #0
    d82e:	d027      	beq.n	d880 <__d2b+0x70>
    d830:	4668      	mov	r0, sp
    d832:	9400      	str	r4, [sp, #0]
    d834:	f7ff fe04 	bl	d440 <__lo0bits>
    d838:	9c00      	ldr	r4, [sp, #0]
    d83a:	2800      	cmp	r0, #0
    d83c:	d01e      	beq.n	d87c <__d2b+0x6c>
    d83e:	9b01      	ldr	r3, [sp, #4]
    d840:	2120      	movs	r1, #32
    d842:	001a      	movs	r2, r3
    d844:	1a09      	subs	r1, r1, r0
    d846:	408a      	lsls	r2, r1
    d848:	40c3      	lsrs	r3, r0
    d84a:	4322      	orrs	r2, r4
    d84c:	6172      	str	r2, [r6, #20]
    d84e:	9301      	str	r3, [sp, #4]
    d850:	9c01      	ldr	r4, [sp, #4]
    d852:	61b4      	str	r4, [r6, #24]
    d854:	1e63      	subs	r3, r4, #1
    d856:	419c      	sbcs	r4, r3
    d858:	3401      	adds	r4, #1
    d85a:	6134      	str	r4, [r6, #16]
    d85c:	2d00      	cmp	r5, #0
    d85e:	d018      	beq.n	d892 <__d2b+0x82>
    d860:	4b12      	ldr	r3, [pc, #72]	; (d8ac <__d2b+0x9c>)
    d862:	18ed      	adds	r5, r5, r3
    d864:	2335      	movs	r3, #53	; 0x35
    d866:	182d      	adds	r5, r5, r0
    d868:	603d      	str	r5, [r7, #0]
    d86a:	1a18      	subs	r0, r3, r0
    d86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d86e:	6018      	str	r0, [r3, #0]
    d870:	0030      	movs	r0, r6
    d872:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d874:	2280      	movs	r2, #128	; 0x80
    d876:	0352      	lsls	r2, r2, #13
    d878:	4313      	orrs	r3, r2
    d87a:	e7d6      	b.n	d82a <__d2b+0x1a>
    d87c:	6174      	str	r4, [r6, #20]
    d87e:	e7e7      	b.n	d850 <__d2b+0x40>
    d880:	a801      	add	r0, sp, #4
    d882:	f7ff fddd 	bl	d440 <__lo0bits>
    d886:	2401      	movs	r4, #1
    d888:	9b01      	ldr	r3, [sp, #4]
    d88a:	6134      	str	r4, [r6, #16]
    d88c:	6173      	str	r3, [r6, #20]
    d88e:	3020      	adds	r0, #32
    d890:	e7e4      	b.n	d85c <__d2b+0x4c>
    d892:	4b07      	ldr	r3, [pc, #28]	; (d8b0 <__d2b+0xa0>)
    d894:	18c0      	adds	r0, r0, r3
    d896:	4b07      	ldr	r3, [pc, #28]	; (d8b4 <__d2b+0xa4>)
    d898:	6038      	str	r0, [r7, #0]
    d89a:	18e3      	adds	r3, r4, r3
    d89c:	009b      	lsls	r3, r3, #2
    d89e:	18f3      	adds	r3, r6, r3
    d8a0:	6958      	ldr	r0, [r3, #20]
    d8a2:	f7ff fdb3 	bl	d40c <__hi0bits>
    d8a6:	0164      	lsls	r4, r4, #5
    d8a8:	1a20      	subs	r0, r4, r0
    d8aa:	e7df      	b.n	d86c <__d2b+0x5c>
    d8ac:	fffffbcd 	.word	0xfffffbcd
    d8b0:	fffffbce 	.word	0xfffffbce
    d8b4:	3fffffff 	.word	0x3fffffff

0000d8b8 <_calloc_r>:
    d8b8:	434a      	muls	r2, r1
    d8ba:	b570      	push	{r4, r5, r6, lr}
    d8bc:	0011      	movs	r1, r2
    d8be:	0014      	movs	r4, r2
    d8c0:	f7fd fc6e 	bl	b1a0 <_malloc_r>
    d8c4:	1e05      	subs	r5, r0, #0
    d8c6:	d003      	beq.n	d8d0 <_calloc_r+0x18>
    d8c8:	0022      	movs	r2, r4
    d8ca:	2100      	movs	r1, #0
    d8cc:	f7fd fc15 	bl	b0fa <memset>
    d8d0:	0028      	movs	r0, r5
    d8d2:	bd70      	pop	{r4, r5, r6, pc}

0000d8d4 <__ssputs_r>:
    d8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8d6:	688e      	ldr	r6, [r1, #8]
    d8d8:	b085      	sub	sp, #20
    d8da:	0007      	movs	r7, r0
    d8dc:	000c      	movs	r4, r1
    d8de:	9203      	str	r2, [sp, #12]
    d8e0:	9301      	str	r3, [sp, #4]
    d8e2:	429e      	cmp	r6, r3
    d8e4:	d839      	bhi.n	d95a <__ssputs_r+0x86>
    d8e6:	2390      	movs	r3, #144	; 0x90
    d8e8:	898a      	ldrh	r2, [r1, #12]
    d8ea:	00db      	lsls	r3, r3, #3
    d8ec:	421a      	tst	r2, r3
    d8ee:	d034      	beq.n	d95a <__ssputs_r+0x86>
    d8f0:	2503      	movs	r5, #3
    d8f2:	6909      	ldr	r1, [r1, #16]
    d8f4:	6823      	ldr	r3, [r4, #0]
    d8f6:	1a5b      	subs	r3, r3, r1
    d8f8:	9302      	str	r3, [sp, #8]
    d8fa:	6963      	ldr	r3, [r4, #20]
    d8fc:	9802      	ldr	r0, [sp, #8]
    d8fe:	435d      	muls	r5, r3
    d900:	0feb      	lsrs	r3, r5, #31
    d902:	195d      	adds	r5, r3, r5
    d904:	9b01      	ldr	r3, [sp, #4]
    d906:	106d      	asrs	r5, r5, #1
    d908:	3301      	adds	r3, #1
    d90a:	181b      	adds	r3, r3, r0
    d90c:	42ab      	cmp	r3, r5
    d90e:	d900      	bls.n	d912 <__ssputs_r+0x3e>
    d910:	001d      	movs	r5, r3
    d912:	0553      	lsls	r3, r2, #21
    d914:	d532      	bpl.n	d97c <__ssputs_r+0xa8>
    d916:	0029      	movs	r1, r5
    d918:	0038      	movs	r0, r7
    d91a:	f7fd fc41 	bl	b1a0 <_malloc_r>
    d91e:	1e06      	subs	r6, r0, #0
    d920:	d109      	bne.n	d936 <__ssputs_r+0x62>
    d922:	230c      	movs	r3, #12
    d924:	603b      	str	r3, [r7, #0]
    d926:	2340      	movs	r3, #64	; 0x40
    d928:	2001      	movs	r0, #1
    d92a:	89a2      	ldrh	r2, [r4, #12]
    d92c:	4240      	negs	r0, r0
    d92e:	4313      	orrs	r3, r2
    d930:	81a3      	strh	r3, [r4, #12]
    d932:	b005      	add	sp, #20
    d934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d936:	9a02      	ldr	r2, [sp, #8]
    d938:	6921      	ldr	r1, [r4, #16]
    d93a:	f7fd fbc3 	bl	b0c4 <memcpy>
    d93e:	89a3      	ldrh	r3, [r4, #12]
    d940:	4a14      	ldr	r2, [pc, #80]	; (d994 <__ssputs_r+0xc0>)
    d942:	401a      	ands	r2, r3
    d944:	2380      	movs	r3, #128	; 0x80
    d946:	4313      	orrs	r3, r2
    d948:	81a3      	strh	r3, [r4, #12]
    d94a:	9b02      	ldr	r3, [sp, #8]
    d94c:	6126      	str	r6, [r4, #16]
    d94e:	18f6      	adds	r6, r6, r3
    d950:	6026      	str	r6, [r4, #0]
    d952:	6165      	str	r5, [r4, #20]
    d954:	9e01      	ldr	r6, [sp, #4]
    d956:	1aed      	subs	r5, r5, r3
    d958:	60a5      	str	r5, [r4, #8]
    d95a:	9b01      	ldr	r3, [sp, #4]
    d95c:	42b3      	cmp	r3, r6
    d95e:	d200      	bcs.n	d962 <__ssputs_r+0x8e>
    d960:	001e      	movs	r6, r3
    d962:	0032      	movs	r2, r6
    d964:	9903      	ldr	r1, [sp, #12]
    d966:	6820      	ldr	r0, [r4, #0]
    d968:	f7fd fbb5 	bl	b0d6 <memmove>
    d96c:	68a3      	ldr	r3, [r4, #8]
    d96e:	2000      	movs	r0, #0
    d970:	1b9b      	subs	r3, r3, r6
    d972:	60a3      	str	r3, [r4, #8]
    d974:	6823      	ldr	r3, [r4, #0]
    d976:	199e      	adds	r6, r3, r6
    d978:	6026      	str	r6, [r4, #0]
    d97a:	e7da      	b.n	d932 <__ssputs_r+0x5e>
    d97c:	002a      	movs	r2, r5
    d97e:	0038      	movs	r0, r7
    d980:	f000 fb3e 	bl	e000 <_realloc_r>
    d984:	1e06      	subs	r6, r0, #0
    d986:	d1e0      	bne.n	d94a <__ssputs_r+0x76>
    d988:	6921      	ldr	r1, [r4, #16]
    d98a:	0038      	movs	r0, r7
    d98c:	f7fd fbbe 	bl	b10c <_free_r>
    d990:	e7c7      	b.n	d922 <__ssputs_r+0x4e>
    d992:	46c0      	nop			; (mov r8, r8)
    d994:	fffffb7f 	.word	0xfffffb7f

0000d998 <_svfiprintf_r>:
    d998:	b5f0      	push	{r4, r5, r6, r7, lr}
    d99a:	b09f      	sub	sp, #124	; 0x7c
    d99c:	9002      	str	r0, [sp, #8]
    d99e:	9305      	str	r3, [sp, #20]
    d9a0:	898b      	ldrh	r3, [r1, #12]
    d9a2:	000f      	movs	r7, r1
    d9a4:	0016      	movs	r6, r2
    d9a6:	061b      	lsls	r3, r3, #24
    d9a8:	d511      	bpl.n	d9ce <_svfiprintf_r+0x36>
    d9aa:	690b      	ldr	r3, [r1, #16]
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d10e      	bne.n	d9ce <_svfiprintf_r+0x36>
    d9b0:	2140      	movs	r1, #64	; 0x40
    d9b2:	f7fd fbf5 	bl	b1a0 <_malloc_r>
    d9b6:	6038      	str	r0, [r7, #0]
    d9b8:	6138      	str	r0, [r7, #16]
    d9ba:	2800      	cmp	r0, #0
    d9bc:	d105      	bne.n	d9ca <_svfiprintf_r+0x32>
    d9be:	230c      	movs	r3, #12
    d9c0:	9a02      	ldr	r2, [sp, #8]
    d9c2:	3801      	subs	r0, #1
    d9c4:	6013      	str	r3, [r2, #0]
    d9c6:	b01f      	add	sp, #124	; 0x7c
    d9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9ca:	2340      	movs	r3, #64	; 0x40
    d9cc:	617b      	str	r3, [r7, #20]
    d9ce:	2300      	movs	r3, #0
    d9d0:	ad06      	add	r5, sp, #24
    d9d2:	616b      	str	r3, [r5, #20]
    d9d4:	3320      	adds	r3, #32
    d9d6:	766b      	strb	r3, [r5, #25]
    d9d8:	3310      	adds	r3, #16
    d9da:	76ab      	strb	r3, [r5, #26]
    d9dc:	0034      	movs	r4, r6
    d9de:	7823      	ldrb	r3, [r4, #0]
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d147      	bne.n	da74 <_svfiprintf_r+0xdc>
    d9e4:	1ba3      	subs	r3, r4, r6
    d9e6:	9304      	str	r3, [sp, #16]
    d9e8:	d00d      	beq.n	da06 <_svfiprintf_r+0x6e>
    d9ea:	1ba3      	subs	r3, r4, r6
    d9ec:	0032      	movs	r2, r6
    d9ee:	0039      	movs	r1, r7
    d9f0:	9802      	ldr	r0, [sp, #8]
    d9f2:	f7ff ff6f 	bl	d8d4 <__ssputs_r>
    d9f6:	1c43      	adds	r3, r0, #1
    d9f8:	d100      	bne.n	d9fc <_svfiprintf_r+0x64>
    d9fa:	e0b5      	b.n	db68 <_svfiprintf_r+0x1d0>
    d9fc:	696a      	ldr	r2, [r5, #20]
    d9fe:	9b04      	ldr	r3, [sp, #16]
    da00:	4694      	mov	ip, r2
    da02:	4463      	add	r3, ip
    da04:	616b      	str	r3, [r5, #20]
    da06:	7823      	ldrb	r3, [r4, #0]
    da08:	2b00      	cmp	r3, #0
    da0a:	d100      	bne.n	da0e <_svfiprintf_r+0x76>
    da0c:	e0ac      	b.n	db68 <_svfiprintf_r+0x1d0>
    da0e:	2201      	movs	r2, #1
    da10:	2300      	movs	r3, #0
    da12:	4252      	negs	r2, r2
    da14:	606a      	str	r2, [r5, #4]
    da16:	a902      	add	r1, sp, #8
    da18:	3254      	adds	r2, #84	; 0x54
    da1a:	1852      	adds	r2, r2, r1
    da1c:	3401      	adds	r4, #1
    da1e:	602b      	str	r3, [r5, #0]
    da20:	60eb      	str	r3, [r5, #12]
    da22:	60ab      	str	r3, [r5, #8]
    da24:	7013      	strb	r3, [r2, #0]
    da26:	65ab      	str	r3, [r5, #88]	; 0x58
    da28:	4e58      	ldr	r6, [pc, #352]	; (db8c <_svfiprintf_r+0x1f4>)
    da2a:	2205      	movs	r2, #5
    da2c:	7821      	ldrb	r1, [r4, #0]
    da2e:	0030      	movs	r0, r6
    da30:	f7ff fc52 	bl	d2d8 <memchr>
    da34:	1c62      	adds	r2, r4, #1
    da36:	2800      	cmp	r0, #0
    da38:	d120      	bne.n	da7c <_svfiprintf_r+0xe4>
    da3a:	6829      	ldr	r1, [r5, #0]
    da3c:	06cb      	lsls	r3, r1, #27
    da3e:	d504      	bpl.n	da4a <_svfiprintf_r+0xb2>
    da40:	2353      	movs	r3, #83	; 0x53
    da42:	ae02      	add	r6, sp, #8
    da44:	3020      	adds	r0, #32
    da46:	199b      	adds	r3, r3, r6
    da48:	7018      	strb	r0, [r3, #0]
    da4a:	070b      	lsls	r3, r1, #28
    da4c:	d504      	bpl.n	da58 <_svfiprintf_r+0xc0>
    da4e:	2353      	movs	r3, #83	; 0x53
    da50:	202b      	movs	r0, #43	; 0x2b
    da52:	ae02      	add	r6, sp, #8
    da54:	199b      	adds	r3, r3, r6
    da56:	7018      	strb	r0, [r3, #0]
    da58:	7823      	ldrb	r3, [r4, #0]
    da5a:	2b2a      	cmp	r3, #42	; 0x2a
    da5c:	d016      	beq.n	da8c <_svfiprintf_r+0xf4>
    da5e:	2000      	movs	r0, #0
    da60:	210a      	movs	r1, #10
    da62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da64:	7822      	ldrb	r2, [r4, #0]
    da66:	3a30      	subs	r2, #48	; 0x30
    da68:	2a09      	cmp	r2, #9
    da6a:	d955      	bls.n	db18 <_svfiprintf_r+0x180>
    da6c:	2800      	cmp	r0, #0
    da6e:	d015      	beq.n	da9c <_svfiprintf_r+0x104>
    da70:	9309      	str	r3, [sp, #36]	; 0x24
    da72:	e013      	b.n	da9c <_svfiprintf_r+0x104>
    da74:	2b25      	cmp	r3, #37	; 0x25
    da76:	d0b5      	beq.n	d9e4 <_svfiprintf_r+0x4c>
    da78:	3401      	adds	r4, #1
    da7a:	e7b0      	b.n	d9de <_svfiprintf_r+0x46>
    da7c:	2301      	movs	r3, #1
    da7e:	1b80      	subs	r0, r0, r6
    da80:	4083      	lsls	r3, r0
    da82:	6829      	ldr	r1, [r5, #0]
    da84:	0014      	movs	r4, r2
    da86:	430b      	orrs	r3, r1
    da88:	602b      	str	r3, [r5, #0]
    da8a:	e7cd      	b.n	da28 <_svfiprintf_r+0x90>
    da8c:	9b05      	ldr	r3, [sp, #20]
    da8e:	1d18      	adds	r0, r3, #4
    da90:	681b      	ldr	r3, [r3, #0]
    da92:	9005      	str	r0, [sp, #20]
    da94:	2b00      	cmp	r3, #0
    da96:	db39      	blt.n	db0c <_svfiprintf_r+0x174>
    da98:	9309      	str	r3, [sp, #36]	; 0x24
    da9a:	0014      	movs	r4, r2
    da9c:	7823      	ldrb	r3, [r4, #0]
    da9e:	2b2e      	cmp	r3, #46	; 0x2e
    daa0:	d10b      	bne.n	daba <_svfiprintf_r+0x122>
    daa2:	7863      	ldrb	r3, [r4, #1]
    daa4:	1c62      	adds	r2, r4, #1
    daa6:	2b2a      	cmp	r3, #42	; 0x2a
    daa8:	d13e      	bne.n	db28 <_svfiprintf_r+0x190>
    daaa:	9b05      	ldr	r3, [sp, #20]
    daac:	3402      	adds	r4, #2
    daae:	1d1a      	adds	r2, r3, #4
    dab0:	681b      	ldr	r3, [r3, #0]
    dab2:	9205      	str	r2, [sp, #20]
    dab4:	2b00      	cmp	r3, #0
    dab6:	db34      	blt.n	db22 <_svfiprintf_r+0x18a>
    dab8:	9307      	str	r3, [sp, #28]
    daba:	4e35      	ldr	r6, [pc, #212]	; (db90 <_svfiprintf_r+0x1f8>)
    dabc:	7821      	ldrb	r1, [r4, #0]
    dabe:	2203      	movs	r2, #3
    dac0:	0030      	movs	r0, r6
    dac2:	f7ff fc09 	bl	d2d8 <memchr>
    dac6:	2800      	cmp	r0, #0
    dac8:	d006      	beq.n	dad8 <_svfiprintf_r+0x140>
    daca:	2340      	movs	r3, #64	; 0x40
    dacc:	1b80      	subs	r0, r0, r6
    dace:	4083      	lsls	r3, r0
    dad0:	682a      	ldr	r2, [r5, #0]
    dad2:	3401      	adds	r4, #1
    dad4:	4313      	orrs	r3, r2
    dad6:	602b      	str	r3, [r5, #0]
    dad8:	7821      	ldrb	r1, [r4, #0]
    dada:	2206      	movs	r2, #6
    dadc:	482d      	ldr	r0, [pc, #180]	; (db94 <_svfiprintf_r+0x1fc>)
    dade:	1c66      	adds	r6, r4, #1
    dae0:	7629      	strb	r1, [r5, #24]
    dae2:	f7ff fbf9 	bl	d2d8 <memchr>
    dae6:	2800      	cmp	r0, #0
    dae8:	d046      	beq.n	db78 <_svfiprintf_r+0x1e0>
    daea:	4b2b      	ldr	r3, [pc, #172]	; (db98 <_svfiprintf_r+0x200>)
    daec:	2b00      	cmp	r3, #0
    daee:	d12f      	bne.n	db50 <_svfiprintf_r+0x1b8>
    daf0:	6829      	ldr	r1, [r5, #0]
    daf2:	9b05      	ldr	r3, [sp, #20]
    daf4:	2207      	movs	r2, #7
    daf6:	05c9      	lsls	r1, r1, #23
    daf8:	d528      	bpl.n	db4c <_svfiprintf_r+0x1b4>
    dafa:	189b      	adds	r3, r3, r2
    dafc:	4393      	bics	r3, r2
    dafe:	3308      	adds	r3, #8
    db00:	9305      	str	r3, [sp, #20]
    db02:	696b      	ldr	r3, [r5, #20]
    db04:	9a03      	ldr	r2, [sp, #12]
    db06:	189b      	adds	r3, r3, r2
    db08:	616b      	str	r3, [r5, #20]
    db0a:	e767      	b.n	d9dc <_svfiprintf_r+0x44>
    db0c:	425b      	negs	r3, r3
    db0e:	60eb      	str	r3, [r5, #12]
    db10:	2302      	movs	r3, #2
    db12:	430b      	orrs	r3, r1
    db14:	602b      	str	r3, [r5, #0]
    db16:	e7c0      	b.n	da9a <_svfiprintf_r+0x102>
    db18:	434b      	muls	r3, r1
    db1a:	3401      	adds	r4, #1
    db1c:	189b      	adds	r3, r3, r2
    db1e:	2001      	movs	r0, #1
    db20:	e7a0      	b.n	da64 <_svfiprintf_r+0xcc>
    db22:	2301      	movs	r3, #1
    db24:	425b      	negs	r3, r3
    db26:	e7c7      	b.n	dab8 <_svfiprintf_r+0x120>
    db28:	2300      	movs	r3, #0
    db2a:	0014      	movs	r4, r2
    db2c:	200a      	movs	r0, #10
    db2e:	001a      	movs	r2, r3
    db30:	606b      	str	r3, [r5, #4]
    db32:	7821      	ldrb	r1, [r4, #0]
    db34:	3930      	subs	r1, #48	; 0x30
    db36:	2909      	cmp	r1, #9
    db38:	d903      	bls.n	db42 <_svfiprintf_r+0x1aa>
    db3a:	2b00      	cmp	r3, #0
    db3c:	d0bd      	beq.n	daba <_svfiprintf_r+0x122>
    db3e:	9207      	str	r2, [sp, #28]
    db40:	e7bb      	b.n	daba <_svfiprintf_r+0x122>
    db42:	4342      	muls	r2, r0
    db44:	3401      	adds	r4, #1
    db46:	1852      	adds	r2, r2, r1
    db48:	2301      	movs	r3, #1
    db4a:	e7f2      	b.n	db32 <_svfiprintf_r+0x19a>
    db4c:	3307      	adds	r3, #7
    db4e:	e7d5      	b.n	dafc <_svfiprintf_r+0x164>
    db50:	ab05      	add	r3, sp, #20
    db52:	9300      	str	r3, [sp, #0]
    db54:	003a      	movs	r2, r7
    db56:	4b11      	ldr	r3, [pc, #68]	; (db9c <_svfiprintf_r+0x204>)
    db58:	0029      	movs	r1, r5
    db5a:	9802      	ldr	r0, [sp, #8]
    db5c:	f7fd fc1a 	bl	b394 <_printf_float>
    db60:	9003      	str	r0, [sp, #12]
    db62:	9b03      	ldr	r3, [sp, #12]
    db64:	3301      	adds	r3, #1
    db66:	d1cc      	bne.n	db02 <_svfiprintf_r+0x16a>
    db68:	89bb      	ldrh	r3, [r7, #12]
    db6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    db6c:	065b      	lsls	r3, r3, #25
    db6e:	d400      	bmi.n	db72 <_svfiprintf_r+0x1da>
    db70:	e729      	b.n	d9c6 <_svfiprintf_r+0x2e>
    db72:	2001      	movs	r0, #1
    db74:	4240      	negs	r0, r0
    db76:	e726      	b.n	d9c6 <_svfiprintf_r+0x2e>
    db78:	ab05      	add	r3, sp, #20
    db7a:	9300      	str	r3, [sp, #0]
    db7c:	003a      	movs	r2, r7
    db7e:	4b07      	ldr	r3, [pc, #28]	; (db9c <_svfiprintf_r+0x204>)
    db80:	0029      	movs	r1, r5
    db82:	9802      	ldr	r0, [sp, #8]
    db84:	f7fd fec0 	bl	b908 <_printf_i>
    db88:	e7ea      	b.n	db60 <_svfiprintf_r+0x1c8>
    db8a:	46c0      	nop			; (mov r8, r8)
    db8c:	00012bc4 	.word	0x00012bc4
    db90:	00012bca 	.word	0x00012bca
    db94:	00012bce 	.word	0x00012bce
    db98:	0000b395 	.word	0x0000b395
    db9c:	0000d8d5 	.word	0x0000d8d5

0000dba0 <__sfputc_r>:
    dba0:	6893      	ldr	r3, [r2, #8]
    dba2:	b510      	push	{r4, lr}
    dba4:	3b01      	subs	r3, #1
    dba6:	6093      	str	r3, [r2, #8]
    dba8:	2b00      	cmp	r3, #0
    dbaa:	da05      	bge.n	dbb8 <__sfputc_r+0x18>
    dbac:	6994      	ldr	r4, [r2, #24]
    dbae:	42a3      	cmp	r3, r4
    dbb0:	db08      	blt.n	dbc4 <__sfputc_r+0x24>
    dbb2:	b2cb      	uxtb	r3, r1
    dbb4:	2b0a      	cmp	r3, #10
    dbb6:	d005      	beq.n	dbc4 <__sfputc_r+0x24>
    dbb8:	6813      	ldr	r3, [r2, #0]
    dbba:	1c58      	adds	r0, r3, #1
    dbbc:	6010      	str	r0, [r2, #0]
    dbbe:	7019      	strb	r1, [r3, #0]
    dbc0:	b2c8      	uxtb	r0, r1
    dbc2:	bd10      	pop	{r4, pc}
    dbc4:	f7fe fa36 	bl	c034 <__swbuf_r>
    dbc8:	e7fb      	b.n	dbc2 <__sfputc_r+0x22>

0000dbca <__sfputs_r>:
    dbca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbcc:	0006      	movs	r6, r0
    dbce:	000f      	movs	r7, r1
    dbd0:	0014      	movs	r4, r2
    dbd2:	18d5      	adds	r5, r2, r3
    dbd4:	42ac      	cmp	r4, r5
    dbd6:	d101      	bne.n	dbdc <__sfputs_r+0x12>
    dbd8:	2000      	movs	r0, #0
    dbda:	e007      	b.n	dbec <__sfputs_r+0x22>
    dbdc:	7821      	ldrb	r1, [r4, #0]
    dbde:	003a      	movs	r2, r7
    dbe0:	0030      	movs	r0, r6
    dbe2:	f7ff ffdd 	bl	dba0 <__sfputc_r>
    dbe6:	3401      	adds	r4, #1
    dbe8:	1c43      	adds	r3, r0, #1
    dbea:	d1f3      	bne.n	dbd4 <__sfputs_r+0xa>
    dbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000dbf0 <_vfiprintf_r>:
    dbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbf2:	b09f      	sub	sp, #124	; 0x7c
    dbf4:	0006      	movs	r6, r0
    dbf6:	000f      	movs	r7, r1
    dbf8:	0014      	movs	r4, r2
    dbfa:	9305      	str	r3, [sp, #20]
    dbfc:	2800      	cmp	r0, #0
    dbfe:	d004      	beq.n	dc0a <_vfiprintf_r+0x1a>
    dc00:	6983      	ldr	r3, [r0, #24]
    dc02:	2b00      	cmp	r3, #0
    dc04:	d101      	bne.n	dc0a <_vfiprintf_r+0x1a>
    dc06:	f7ff fa45 	bl	d094 <__sinit>
    dc0a:	4b7f      	ldr	r3, [pc, #508]	; (de08 <_vfiprintf_r+0x218>)
    dc0c:	429f      	cmp	r7, r3
    dc0e:	d15c      	bne.n	dcca <_vfiprintf_r+0xda>
    dc10:	6877      	ldr	r7, [r6, #4]
    dc12:	89bb      	ldrh	r3, [r7, #12]
    dc14:	071b      	lsls	r3, r3, #28
    dc16:	d562      	bpl.n	dcde <_vfiprintf_r+0xee>
    dc18:	693b      	ldr	r3, [r7, #16]
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d05f      	beq.n	dcde <_vfiprintf_r+0xee>
    dc1e:	2300      	movs	r3, #0
    dc20:	ad06      	add	r5, sp, #24
    dc22:	616b      	str	r3, [r5, #20]
    dc24:	3320      	adds	r3, #32
    dc26:	766b      	strb	r3, [r5, #25]
    dc28:	3310      	adds	r3, #16
    dc2a:	76ab      	strb	r3, [r5, #26]
    dc2c:	9402      	str	r4, [sp, #8]
    dc2e:	9c02      	ldr	r4, [sp, #8]
    dc30:	7823      	ldrb	r3, [r4, #0]
    dc32:	2b00      	cmp	r3, #0
    dc34:	d15d      	bne.n	dcf2 <_vfiprintf_r+0x102>
    dc36:	9b02      	ldr	r3, [sp, #8]
    dc38:	1ae3      	subs	r3, r4, r3
    dc3a:	9304      	str	r3, [sp, #16]
    dc3c:	d00d      	beq.n	dc5a <_vfiprintf_r+0x6a>
    dc3e:	9b04      	ldr	r3, [sp, #16]
    dc40:	9a02      	ldr	r2, [sp, #8]
    dc42:	0039      	movs	r1, r7
    dc44:	0030      	movs	r0, r6
    dc46:	f7ff ffc0 	bl	dbca <__sfputs_r>
    dc4a:	1c43      	adds	r3, r0, #1
    dc4c:	d100      	bne.n	dc50 <_vfiprintf_r+0x60>
    dc4e:	e0cc      	b.n	ddea <_vfiprintf_r+0x1fa>
    dc50:	696a      	ldr	r2, [r5, #20]
    dc52:	9b04      	ldr	r3, [sp, #16]
    dc54:	4694      	mov	ip, r2
    dc56:	4463      	add	r3, ip
    dc58:	616b      	str	r3, [r5, #20]
    dc5a:	7823      	ldrb	r3, [r4, #0]
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	d100      	bne.n	dc62 <_vfiprintf_r+0x72>
    dc60:	e0c3      	b.n	ddea <_vfiprintf_r+0x1fa>
    dc62:	2201      	movs	r2, #1
    dc64:	2300      	movs	r3, #0
    dc66:	4252      	negs	r2, r2
    dc68:	606a      	str	r2, [r5, #4]
    dc6a:	a902      	add	r1, sp, #8
    dc6c:	3254      	adds	r2, #84	; 0x54
    dc6e:	1852      	adds	r2, r2, r1
    dc70:	3401      	adds	r4, #1
    dc72:	602b      	str	r3, [r5, #0]
    dc74:	60eb      	str	r3, [r5, #12]
    dc76:	60ab      	str	r3, [r5, #8]
    dc78:	7013      	strb	r3, [r2, #0]
    dc7a:	65ab      	str	r3, [r5, #88]	; 0x58
    dc7c:	7821      	ldrb	r1, [r4, #0]
    dc7e:	2205      	movs	r2, #5
    dc80:	4862      	ldr	r0, [pc, #392]	; (de0c <_vfiprintf_r+0x21c>)
    dc82:	f7ff fb29 	bl	d2d8 <memchr>
    dc86:	1c63      	adds	r3, r4, #1
    dc88:	469c      	mov	ip, r3
    dc8a:	2800      	cmp	r0, #0
    dc8c:	d135      	bne.n	dcfa <_vfiprintf_r+0x10a>
    dc8e:	6829      	ldr	r1, [r5, #0]
    dc90:	06cb      	lsls	r3, r1, #27
    dc92:	d504      	bpl.n	dc9e <_vfiprintf_r+0xae>
    dc94:	2353      	movs	r3, #83	; 0x53
    dc96:	aa02      	add	r2, sp, #8
    dc98:	3020      	adds	r0, #32
    dc9a:	189b      	adds	r3, r3, r2
    dc9c:	7018      	strb	r0, [r3, #0]
    dc9e:	070b      	lsls	r3, r1, #28
    dca0:	d504      	bpl.n	dcac <_vfiprintf_r+0xbc>
    dca2:	2353      	movs	r3, #83	; 0x53
    dca4:	202b      	movs	r0, #43	; 0x2b
    dca6:	aa02      	add	r2, sp, #8
    dca8:	189b      	adds	r3, r3, r2
    dcaa:	7018      	strb	r0, [r3, #0]
    dcac:	7823      	ldrb	r3, [r4, #0]
    dcae:	2b2a      	cmp	r3, #42	; 0x2a
    dcb0:	d02c      	beq.n	dd0c <_vfiprintf_r+0x11c>
    dcb2:	2000      	movs	r0, #0
    dcb4:	210a      	movs	r1, #10
    dcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dcb8:	7822      	ldrb	r2, [r4, #0]
    dcba:	3a30      	subs	r2, #48	; 0x30
    dcbc:	2a09      	cmp	r2, #9
    dcbe:	d800      	bhi.n	dcc2 <_vfiprintf_r+0xd2>
    dcc0:	e06b      	b.n	dd9a <_vfiprintf_r+0x1aa>
    dcc2:	2800      	cmp	r0, #0
    dcc4:	d02a      	beq.n	dd1c <_vfiprintf_r+0x12c>
    dcc6:	9309      	str	r3, [sp, #36]	; 0x24
    dcc8:	e028      	b.n	dd1c <_vfiprintf_r+0x12c>
    dcca:	4b51      	ldr	r3, [pc, #324]	; (de10 <_vfiprintf_r+0x220>)
    dccc:	429f      	cmp	r7, r3
    dcce:	d101      	bne.n	dcd4 <_vfiprintf_r+0xe4>
    dcd0:	68b7      	ldr	r7, [r6, #8]
    dcd2:	e79e      	b.n	dc12 <_vfiprintf_r+0x22>
    dcd4:	4b4f      	ldr	r3, [pc, #316]	; (de14 <_vfiprintf_r+0x224>)
    dcd6:	429f      	cmp	r7, r3
    dcd8:	d19b      	bne.n	dc12 <_vfiprintf_r+0x22>
    dcda:	68f7      	ldr	r7, [r6, #12]
    dcdc:	e799      	b.n	dc12 <_vfiprintf_r+0x22>
    dcde:	0039      	movs	r1, r7
    dce0:	0030      	movs	r0, r6
    dce2:	f7fe f9fd 	bl	c0e0 <__swsetup_r>
    dce6:	2800      	cmp	r0, #0
    dce8:	d099      	beq.n	dc1e <_vfiprintf_r+0x2e>
    dcea:	2001      	movs	r0, #1
    dcec:	4240      	negs	r0, r0
    dcee:	b01f      	add	sp, #124	; 0x7c
    dcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcf2:	2b25      	cmp	r3, #37	; 0x25
    dcf4:	d09f      	beq.n	dc36 <_vfiprintf_r+0x46>
    dcf6:	3401      	adds	r4, #1
    dcf8:	e79a      	b.n	dc30 <_vfiprintf_r+0x40>
    dcfa:	4b44      	ldr	r3, [pc, #272]	; (de0c <_vfiprintf_r+0x21c>)
    dcfc:	6829      	ldr	r1, [r5, #0]
    dcfe:	1ac0      	subs	r0, r0, r3
    dd00:	2301      	movs	r3, #1
    dd02:	4083      	lsls	r3, r0
    dd04:	430b      	orrs	r3, r1
    dd06:	602b      	str	r3, [r5, #0]
    dd08:	4664      	mov	r4, ip
    dd0a:	e7b7      	b.n	dc7c <_vfiprintf_r+0x8c>
    dd0c:	9b05      	ldr	r3, [sp, #20]
    dd0e:	1d18      	adds	r0, r3, #4
    dd10:	681b      	ldr	r3, [r3, #0]
    dd12:	9005      	str	r0, [sp, #20]
    dd14:	2b00      	cmp	r3, #0
    dd16:	db3a      	blt.n	dd8e <_vfiprintf_r+0x19e>
    dd18:	9309      	str	r3, [sp, #36]	; 0x24
    dd1a:	4664      	mov	r4, ip
    dd1c:	7823      	ldrb	r3, [r4, #0]
    dd1e:	2b2e      	cmp	r3, #46	; 0x2e
    dd20:	d10b      	bne.n	dd3a <_vfiprintf_r+0x14a>
    dd22:	7863      	ldrb	r3, [r4, #1]
    dd24:	1c62      	adds	r2, r4, #1
    dd26:	2b2a      	cmp	r3, #42	; 0x2a
    dd28:	d13f      	bne.n	ddaa <_vfiprintf_r+0x1ba>
    dd2a:	9b05      	ldr	r3, [sp, #20]
    dd2c:	3402      	adds	r4, #2
    dd2e:	1d1a      	adds	r2, r3, #4
    dd30:	681b      	ldr	r3, [r3, #0]
    dd32:	9205      	str	r2, [sp, #20]
    dd34:	2b00      	cmp	r3, #0
    dd36:	db35      	blt.n	dda4 <_vfiprintf_r+0x1b4>
    dd38:	9307      	str	r3, [sp, #28]
    dd3a:	7821      	ldrb	r1, [r4, #0]
    dd3c:	2203      	movs	r2, #3
    dd3e:	4836      	ldr	r0, [pc, #216]	; (de18 <_vfiprintf_r+0x228>)
    dd40:	f7ff faca 	bl	d2d8 <memchr>
    dd44:	2800      	cmp	r0, #0
    dd46:	d007      	beq.n	dd58 <_vfiprintf_r+0x168>
    dd48:	4b33      	ldr	r3, [pc, #204]	; (de18 <_vfiprintf_r+0x228>)
    dd4a:	682a      	ldr	r2, [r5, #0]
    dd4c:	1ac0      	subs	r0, r0, r3
    dd4e:	2340      	movs	r3, #64	; 0x40
    dd50:	4083      	lsls	r3, r0
    dd52:	4313      	orrs	r3, r2
    dd54:	602b      	str	r3, [r5, #0]
    dd56:	3401      	adds	r4, #1
    dd58:	7821      	ldrb	r1, [r4, #0]
    dd5a:	1c63      	adds	r3, r4, #1
    dd5c:	2206      	movs	r2, #6
    dd5e:	482f      	ldr	r0, [pc, #188]	; (de1c <_vfiprintf_r+0x22c>)
    dd60:	9302      	str	r3, [sp, #8]
    dd62:	7629      	strb	r1, [r5, #24]
    dd64:	f7ff fab8 	bl	d2d8 <memchr>
    dd68:	2800      	cmp	r0, #0
    dd6a:	d044      	beq.n	ddf6 <_vfiprintf_r+0x206>
    dd6c:	4b2c      	ldr	r3, [pc, #176]	; (de20 <_vfiprintf_r+0x230>)
    dd6e:	2b00      	cmp	r3, #0
    dd70:	d12f      	bne.n	ddd2 <_vfiprintf_r+0x1e2>
    dd72:	6829      	ldr	r1, [r5, #0]
    dd74:	9b05      	ldr	r3, [sp, #20]
    dd76:	2207      	movs	r2, #7
    dd78:	05c9      	lsls	r1, r1, #23
    dd7a:	d528      	bpl.n	ddce <_vfiprintf_r+0x1de>
    dd7c:	189b      	adds	r3, r3, r2
    dd7e:	4393      	bics	r3, r2
    dd80:	3308      	adds	r3, #8
    dd82:	9305      	str	r3, [sp, #20]
    dd84:	696b      	ldr	r3, [r5, #20]
    dd86:	9a03      	ldr	r2, [sp, #12]
    dd88:	189b      	adds	r3, r3, r2
    dd8a:	616b      	str	r3, [r5, #20]
    dd8c:	e74f      	b.n	dc2e <_vfiprintf_r+0x3e>
    dd8e:	425b      	negs	r3, r3
    dd90:	60eb      	str	r3, [r5, #12]
    dd92:	2302      	movs	r3, #2
    dd94:	430b      	orrs	r3, r1
    dd96:	602b      	str	r3, [r5, #0]
    dd98:	e7bf      	b.n	dd1a <_vfiprintf_r+0x12a>
    dd9a:	434b      	muls	r3, r1
    dd9c:	3401      	adds	r4, #1
    dd9e:	189b      	adds	r3, r3, r2
    dda0:	2001      	movs	r0, #1
    dda2:	e789      	b.n	dcb8 <_vfiprintf_r+0xc8>
    dda4:	2301      	movs	r3, #1
    dda6:	425b      	negs	r3, r3
    dda8:	e7c6      	b.n	dd38 <_vfiprintf_r+0x148>
    ddaa:	2300      	movs	r3, #0
    ddac:	0014      	movs	r4, r2
    ddae:	200a      	movs	r0, #10
    ddb0:	001a      	movs	r2, r3
    ddb2:	606b      	str	r3, [r5, #4]
    ddb4:	7821      	ldrb	r1, [r4, #0]
    ddb6:	3930      	subs	r1, #48	; 0x30
    ddb8:	2909      	cmp	r1, #9
    ddba:	d903      	bls.n	ddc4 <_vfiprintf_r+0x1d4>
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d0bc      	beq.n	dd3a <_vfiprintf_r+0x14a>
    ddc0:	9207      	str	r2, [sp, #28]
    ddc2:	e7ba      	b.n	dd3a <_vfiprintf_r+0x14a>
    ddc4:	4342      	muls	r2, r0
    ddc6:	3401      	adds	r4, #1
    ddc8:	1852      	adds	r2, r2, r1
    ddca:	2301      	movs	r3, #1
    ddcc:	e7f2      	b.n	ddb4 <_vfiprintf_r+0x1c4>
    ddce:	3307      	adds	r3, #7
    ddd0:	e7d5      	b.n	dd7e <_vfiprintf_r+0x18e>
    ddd2:	ab05      	add	r3, sp, #20
    ddd4:	9300      	str	r3, [sp, #0]
    ddd6:	003a      	movs	r2, r7
    ddd8:	4b12      	ldr	r3, [pc, #72]	; (de24 <_vfiprintf_r+0x234>)
    ddda:	0029      	movs	r1, r5
    dddc:	0030      	movs	r0, r6
    ddde:	f7fd fad9 	bl	b394 <_printf_float>
    dde2:	9003      	str	r0, [sp, #12]
    dde4:	9b03      	ldr	r3, [sp, #12]
    dde6:	3301      	adds	r3, #1
    dde8:	d1cc      	bne.n	dd84 <_vfiprintf_r+0x194>
    ddea:	89bb      	ldrh	r3, [r7, #12]
    ddec:	065b      	lsls	r3, r3, #25
    ddee:	d500      	bpl.n	ddf2 <_vfiprintf_r+0x202>
    ddf0:	e77b      	b.n	dcea <_vfiprintf_r+0xfa>
    ddf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ddf4:	e77b      	b.n	dcee <_vfiprintf_r+0xfe>
    ddf6:	ab05      	add	r3, sp, #20
    ddf8:	9300      	str	r3, [sp, #0]
    ddfa:	003a      	movs	r2, r7
    ddfc:	4b09      	ldr	r3, [pc, #36]	; (de24 <_vfiprintf_r+0x234>)
    ddfe:	0029      	movs	r1, r5
    de00:	0030      	movs	r0, r6
    de02:	f7fd fd81 	bl	b908 <_printf_i>
    de06:	e7ec      	b.n	dde2 <_vfiprintf_r+0x1f2>
    de08:	00012a7c 	.word	0x00012a7c
    de0c:	00012bc4 	.word	0x00012bc4
    de10:	00012a9c 	.word	0x00012a9c
    de14:	00012a5c 	.word	0x00012a5c
    de18:	00012bca 	.word	0x00012bca
    de1c:	00012bce 	.word	0x00012bce
    de20:	0000b395 	.word	0x0000b395
    de24:	0000dbcb 	.word	0x0000dbcb

0000de28 <_putc_r>:
    de28:	b570      	push	{r4, r5, r6, lr}
    de2a:	0006      	movs	r6, r0
    de2c:	000d      	movs	r5, r1
    de2e:	0014      	movs	r4, r2
    de30:	2800      	cmp	r0, #0
    de32:	d004      	beq.n	de3e <_putc_r+0x16>
    de34:	6983      	ldr	r3, [r0, #24]
    de36:	2b00      	cmp	r3, #0
    de38:	d101      	bne.n	de3e <_putc_r+0x16>
    de3a:	f7ff f92b 	bl	d094 <__sinit>
    de3e:	4b12      	ldr	r3, [pc, #72]	; (de88 <_putc_r+0x60>)
    de40:	429c      	cmp	r4, r3
    de42:	d111      	bne.n	de68 <_putc_r+0x40>
    de44:	6874      	ldr	r4, [r6, #4]
    de46:	68a3      	ldr	r3, [r4, #8]
    de48:	3b01      	subs	r3, #1
    de4a:	60a3      	str	r3, [r4, #8]
    de4c:	2b00      	cmp	r3, #0
    de4e:	da05      	bge.n	de5c <_putc_r+0x34>
    de50:	69a2      	ldr	r2, [r4, #24]
    de52:	4293      	cmp	r3, r2
    de54:	db12      	blt.n	de7c <_putc_r+0x54>
    de56:	b2eb      	uxtb	r3, r5
    de58:	2b0a      	cmp	r3, #10
    de5a:	d00f      	beq.n	de7c <_putc_r+0x54>
    de5c:	6823      	ldr	r3, [r4, #0]
    de5e:	b2e8      	uxtb	r0, r5
    de60:	1c5a      	adds	r2, r3, #1
    de62:	6022      	str	r2, [r4, #0]
    de64:	701d      	strb	r5, [r3, #0]
    de66:	bd70      	pop	{r4, r5, r6, pc}
    de68:	4b08      	ldr	r3, [pc, #32]	; (de8c <_putc_r+0x64>)
    de6a:	429c      	cmp	r4, r3
    de6c:	d101      	bne.n	de72 <_putc_r+0x4a>
    de6e:	68b4      	ldr	r4, [r6, #8]
    de70:	e7e9      	b.n	de46 <_putc_r+0x1e>
    de72:	4b07      	ldr	r3, [pc, #28]	; (de90 <_putc_r+0x68>)
    de74:	429c      	cmp	r4, r3
    de76:	d1e6      	bne.n	de46 <_putc_r+0x1e>
    de78:	68f4      	ldr	r4, [r6, #12]
    de7a:	e7e4      	b.n	de46 <_putc_r+0x1e>
    de7c:	0022      	movs	r2, r4
    de7e:	0029      	movs	r1, r5
    de80:	0030      	movs	r0, r6
    de82:	f7fe f8d7 	bl	c034 <__swbuf_r>
    de86:	e7ee      	b.n	de66 <_putc_r+0x3e>
    de88:	00012a7c 	.word	0x00012a7c
    de8c:	00012a9c 	.word	0x00012a9c
    de90:	00012a5c 	.word	0x00012a5c

0000de94 <__sread>:
    de94:	b570      	push	{r4, r5, r6, lr}
    de96:	000c      	movs	r4, r1
    de98:	250e      	movs	r5, #14
    de9a:	5f49      	ldrsh	r1, [r1, r5]
    de9c:	f000 f8d6 	bl	e04c <_read_r>
    dea0:	2800      	cmp	r0, #0
    dea2:	db03      	blt.n	deac <__sread+0x18>
    dea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    dea6:	181b      	adds	r3, r3, r0
    dea8:	6563      	str	r3, [r4, #84]	; 0x54
    deaa:	bd70      	pop	{r4, r5, r6, pc}
    deac:	89a3      	ldrh	r3, [r4, #12]
    deae:	4a02      	ldr	r2, [pc, #8]	; (deb8 <__sread+0x24>)
    deb0:	4013      	ands	r3, r2
    deb2:	81a3      	strh	r3, [r4, #12]
    deb4:	e7f9      	b.n	deaa <__sread+0x16>
    deb6:	46c0      	nop			; (mov r8, r8)
    deb8:	ffffefff 	.word	0xffffefff

0000debc <__swrite>:
    debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    debe:	001f      	movs	r7, r3
    dec0:	898b      	ldrh	r3, [r1, #12]
    dec2:	0005      	movs	r5, r0
    dec4:	000c      	movs	r4, r1
    dec6:	0016      	movs	r6, r2
    dec8:	05db      	lsls	r3, r3, #23
    deca:	d505      	bpl.n	ded8 <__swrite+0x1c>
    decc:	230e      	movs	r3, #14
    dece:	5ec9      	ldrsh	r1, [r1, r3]
    ded0:	2200      	movs	r2, #0
    ded2:	2302      	movs	r3, #2
    ded4:	f000 f880 	bl	dfd8 <_lseek_r>
    ded8:	89a3      	ldrh	r3, [r4, #12]
    deda:	4a05      	ldr	r2, [pc, #20]	; (def0 <__swrite+0x34>)
    dedc:	0028      	movs	r0, r5
    dede:	4013      	ands	r3, r2
    dee0:	81a3      	strh	r3, [r4, #12]
    dee2:	0032      	movs	r2, r6
    dee4:	230e      	movs	r3, #14
    dee6:	5ee1      	ldrsh	r1, [r4, r3]
    dee8:	003b      	movs	r3, r7
    deea:	f000 f82b 	bl	df44 <_write_r>
    deee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    def0:	ffffefff 	.word	0xffffefff

0000def4 <__sseek>:
    def4:	b570      	push	{r4, r5, r6, lr}
    def6:	000c      	movs	r4, r1
    def8:	250e      	movs	r5, #14
    defa:	5f49      	ldrsh	r1, [r1, r5]
    defc:	f000 f86c 	bl	dfd8 <_lseek_r>
    df00:	89a3      	ldrh	r3, [r4, #12]
    df02:	1c42      	adds	r2, r0, #1
    df04:	d103      	bne.n	df0e <__sseek+0x1a>
    df06:	4a05      	ldr	r2, [pc, #20]	; (df1c <__sseek+0x28>)
    df08:	4013      	ands	r3, r2
    df0a:	81a3      	strh	r3, [r4, #12]
    df0c:	bd70      	pop	{r4, r5, r6, pc}
    df0e:	2280      	movs	r2, #128	; 0x80
    df10:	0152      	lsls	r2, r2, #5
    df12:	4313      	orrs	r3, r2
    df14:	81a3      	strh	r3, [r4, #12]
    df16:	6560      	str	r0, [r4, #84]	; 0x54
    df18:	e7f8      	b.n	df0c <__sseek+0x18>
    df1a:	46c0      	nop			; (mov r8, r8)
    df1c:	ffffefff 	.word	0xffffefff

0000df20 <__sclose>:
    df20:	b510      	push	{r4, lr}
    df22:	230e      	movs	r3, #14
    df24:	5ec9      	ldrsh	r1, [r1, r3]
    df26:	f000 f821 	bl	df6c <_close_r>
    df2a:	bd10      	pop	{r4, pc}

0000df2c <__ascii_wctomb>:
    df2c:	1e0b      	subs	r3, r1, #0
    df2e:	d004      	beq.n	df3a <__ascii_wctomb+0xe>
    df30:	2aff      	cmp	r2, #255	; 0xff
    df32:	d904      	bls.n	df3e <__ascii_wctomb+0x12>
    df34:	238a      	movs	r3, #138	; 0x8a
    df36:	6003      	str	r3, [r0, #0]
    df38:	3b8b      	subs	r3, #139	; 0x8b
    df3a:	0018      	movs	r0, r3
    df3c:	4770      	bx	lr
    df3e:	700a      	strb	r2, [r1, #0]
    df40:	2301      	movs	r3, #1
    df42:	e7fa      	b.n	df3a <__ascii_wctomb+0xe>

0000df44 <_write_r>:
    df44:	b570      	push	{r4, r5, r6, lr}
    df46:	0005      	movs	r5, r0
    df48:	0008      	movs	r0, r1
    df4a:	0011      	movs	r1, r2
    df4c:	2200      	movs	r2, #0
    df4e:	4c06      	ldr	r4, [pc, #24]	; (df68 <_write_r+0x24>)
    df50:	6022      	str	r2, [r4, #0]
    df52:	001a      	movs	r2, r3
    df54:	f7f5 f898 	bl	3088 <_write>
    df58:	1c43      	adds	r3, r0, #1
    df5a:	d103      	bne.n	df64 <_write_r+0x20>
    df5c:	6823      	ldr	r3, [r4, #0]
    df5e:	2b00      	cmp	r3, #0
    df60:	d000      	beq.n	df64 <_write_r+0x20>
    df62:	602b      	str	r3, [r5, #0]
    df64:	bd70      	pop	{r4, r5, r6, pc}
    df66:	46c0      	nop			; (mov r8, r8)
    df68:	20000a40 	.word	0x20000a40

0000df6c <_close_r>:
    df6c:	2300      	movs	r3, #0
    df6e:	b570      	push	{r4, r5, r6, lr}
    df70:	4c06      	ldr	r4, [pc, #24]	; (df8c <_close_r+0x20>)
    df72:	0005      	movs	r5, r0
    df74:	0008      	movs	r0, r1
    df76:	6023      	str	r3, [r4, #0]
    df78:	f7fb fe74 	bl	9c64 <_close>
    df7c:	1c43      	adds	r3, r0, #1
    df7e:	d103      	bne.n	df88 <_close_r+0x1c>
    df80:	6823      	ldr	r3, [r4, #0]
    df82:	2b00      	cmp	r3, #0
    df84:	d000      	beq.n	df88 <_close_r+0x1c>
    df86:	602b      	str	r3, [r5, #0]
    df88:	bd70      	pop	{r4, r5, r6, pc}
    df8a:	46c0      	nop			; (mov r8, r8)
    df8c:	20000a40 	.word	0x20000a40

0000df90 <_fstat_r>:
    df90:	2300      	movs	r3, #0
    df92:	b570      	push	{r4, r5, r6, lr}
    df94:	4c06      	ldr	r4, [pc, #24]	; (dfb0 <_fstat_r+0x20>)
    df96:	0005      	movs	r5, r0
    df98:	0008      	movs	r0, r1
    df9a:	0011      	movs	r1, r2
    df9c:	6023      	str	r3, [r4, #0]
    df9e:	f7fb fe64 	bl	9c6a <_fstat>
    dfa2:	1c43      	adds	r3, r0, #1
    dfa4:	d103      	bne.n	dfae <_fstat_r+0x1e>
    dfa6:	6823      	ldr	r3, [r4, #0]
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	d000      	beq.n	dfae <_fstat_r+0x1e>
    dfac:	602b      	str	r3, [r5, #0]
    dfae:	bd70      	pop	{r4, r5, r6, pc}
    dfb0:	20000a40 	.word	0x20000a40

0000dfb4 <_isatty_r>:
    dfb4:	2300      	movs	r3, #0
    dfb6:	b570      	push	{r4, r5, r6, lr}
    dfb8:	4c06      	ldr	r4, [pc, #24]	; (dfd4 <_isatty_r+0x20>)
    dfba:	0005      	movs	r5, r0
    dfbc:	0008      	movs	r0, r1
    dfbe:	6023      	str	r3, [r4, #0]
    dfc0:	f7fb fe58 	bl	9c74 <_isatty>
    dfc4:	1c43      	adds	r3, r0, #1
    dfc6:	d103      	bne.n	dfd0 <_isatty_r+0x1c>
    dfc8:	6823      	ldr	r3, [r4, #0]
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d000      	beq.n	dfd0 <_isatty_r+0x1c>
    dfce:	602b      	str	r3, [r5, #0]
    dfd0:	bd70      	pop	{r4, r5, r6, pc}
    dfd2:	46c0      	nop			; (mov r8, r8)
    dfd4:	20000a40 	.word	0x20000a40

0000dfd8 <_lseek_r>:
    dfd8:	b570      	push	{r4, r5, r6, lr}
    dfda:	0005      	movs	r5, r0
    dfdc:	0008      	movs	r0, r1
    dfde:	0011      	movs	r1, r2
    dfe0:	2200      	movs	r2, #0
    dfe2:	4c06      	ldr	r4, [pc, #24]	; (dffc <_lseek_r+0x24>)
    dfe4:	6022      	str	r2, [r4, #0]
    dfe6:	001a      	movs	r2, r3
    dfe8:	f7fb fe46 	bl	9c78 <_lseek>
    dfec:	1c43      	adds	r3, r0, #1
    dfee:	d103      	bne.n	dff8 <_lseek_r+0x20>
    dff0:	6823      	ldr	r3, [r4, #0]
    dff2:	2b00      	cmp	r3, #0
    dff4:	d000      	beq.n	dff8 <_lseek_r+0x20>
    dff6:	602b      	str	r3, [r5, #0]
    dff8:	bd70      	pop	{r4, r5, r6, pc}
    dffa:	46c0      	nop			; (mov r8, r8)
    dffc:	20000a40 	.word	0x20000a40

0000e000 <_realloc_r>:
    e000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e002:	0007      	movs	r7, r0
    e004:	000d      	movs	r5, r1
    e006:	0016      	movs	r6, r2
    e008:	2900      	cmp	r1, #0
    e00a:	d105      	bne.n	e018 <_realloc_r+0x18>
    e00c:	0011      	movs	r1, r2
    e00e:	f7fd f8c7 	bl	b1a0 <_malloc_r>
    e012:	0004      	movs	r4, r0
    e014:	0020      	movs	r0, r4
    e016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e018:	2a00      	cmp	r2, #0
    e01a:	d103      	bne.n	e024 <_realloc_r+0x24>
    e01c:	f7fd f876 	bl	b10c <_free_r>
    e020:	0034      	movs	r4, r6
    e022:	e7f7      	b.n	e014 <_realloc_r+0x14>
    e024:	f000 f826 	bl	e074 <_malloc_usable_size_r>
    e028:	002c      	movs	r4, r5
    e02a:	4286      	cmp	r6, r0
    e02c:	d9f2      	bls.n	e014 <_realloc_r+0x14>
    e02e:	0031      	movs	r1, r6
    e030:	0038      	movs	r0, r7
    e032:	f7fd f8b5 	bl	b1a0 <_malloc_r>
    e036:	1e04      	subs	r4, r0, #0
    e038:	d0ec      	beq.n	e014 <_realloc_r+0x14>
    e03a:	0029      	movs	r1, r5
    e03c:	0032      	movs	r2, r6
    e03e:	f7fd f841 	bl	b0c4 <memcpy>
    e042:	0029      	movs	r1, r5
    e044:	0038      	movs	r0, r7
    e046:	f7fd f861 	bl	b10c <_free_r>
    e04a:	e7e3      	b.n	e014 <_realloc_r+0x14>

0000e04c <_read_r>:
    e04c:	b570      	push	{r4, r5, r6, lr}
    e04e:	0005      	movs	r5, r0
    e050:	0008      	movs	r0, r1
    e052:	0011      	movs	r1, r2
    e054:	2200      	movs	r2, #0
    e056:	4c06      	ldr	r4, [pc, #24]	; (e070 <_read_r+0x24>)
    e058:	6022      	str	r2, [r4, #0]
    e05a:	001a      	movs	r2, r3
    e05c:	f7f4 fff2 	bl	3044 <_read>
    e060:	1c43      	adds	r3, r0, #1
    e062:	d103      	bne.n	e06c <_read_r+0x20>
    e064:	6823      	ldr	r3, [r4, #0]
    e066:	2b00      	cmp	r3, #0
    e068:	d000      	beq.n	e06c <_read_r+0x20>
    e06a:	602b      	str	r3, [r5, #0]
    e06c:	bd70      	pop	{r4, r5, r6, pc}
    e06e:	46c0      	nop			; (mov r8, r8)
    e070:	20000a40 	.word	0x20000a40

0000e074 <_malloc_usable_size_r>:
    e074:	1f0b      	subs	r3, r1, #4
    e076:	681b      	ldr	r3, [r3, #0]
    e078:	1f18      	subs	r0, r3, #4
    e07a:	2b00      	cmp	r3, #0
    e07c:	da01      	bge.n	e082 <_malloc_usable_size_r+0xe>
    e07e:	580b      	ldr	r3, [r1, r0]
    e080:	18c0      	adds	r0, r0, r3
    e082:	4770      	bx	lr

0000e084 <__gnu_thumb1_case_uqi>:
    e084:	b402      	push	{r1}
    e086:	4671      	mov	r1, lr
    e088:	0849      	lsrs	r1, r1, #1
    e08a:	0049      	lsls	r1, r1, #1
    e08c:	5c09      	ldrb	r1, [r1, r0]
    e08e:	0049      	lsls	r1, r1, #1
    e090:	448e      	add	lr, r1
    e092:	bc02      	pop	{r1}
    e094:	4770      	bx	lr
    e096:	46c0      	nop			; (mov r8, r8)

0000e098 <__udivsi3>:
    e098:	2200      	movs	r2, #0
    e09a:	0843      	lsrs	r3, r0, #1
    e09c:	428b      	cmp	r3, r1
    e09e:	d374      	bcc.n	e18a <__udivsi3+0xf2>
    e0a0:	0903      	lsrs	r3, r0, #4
    e0a2:	428b      	cmp	r3, r1
    e0a4:	d35f      	bcc.n	e166 <__udivsi3+0xce>
    e0a6:	0a03      	lsrs	r3, r0, #8
    e0a8:	428b      	cmp	r3, r1
    e0aa:	d344      	bcc.n	e136 <__udivsi3+0x9e>
    e0ac:	0b03      	lsrs	r3, r0, #12
    e0ae:	428b      	cmp	r3, r1
    e0b0:	d328      	bcc.n	e104 <__udivsi3+0x6c>
    e0b2:	0c03      	lsrs	r3, r0, #16
    e0b4:	428b      	cmp	r3, r1
    e0b6:	d30d      	bcc.n	e0d4 <__udivsi3+0x3c>
    e0b8:	22ff      	movs	r2, #255	; 0xff
    e0ba:	0209      	lsls	r1, r1, #8
    e0bc:	ba12      	rev	r2, r2
    e0be:	0c03      	lsrs	r3, r0, #16
    e0c0:	428b      	cmp	r3, r1
    e0c2:	d302      	bcc.n	e0ca <__udivsi3+0x32>
    e0c4:	1212      	asrs	r2, r2, #8
    e0c6:	0209      	lsls	r1, r1, #8
    e0c8:	d065      	beq.n	e196 <__udivsi3+0xfe>
    e0ca:	0b03      	lsrs	r3, r0, #12
    e0cc:	428b      	cmp	r3, r1
    e0ce:	d319      	bcc.n	e104 <__udivsi3+0x6c>
    e0d0:	e000      	b.n	e0d4 <__udivsi3+0x3c>
    e0d2:	0a09      	lsrs	r1, r1, #8
    e0d4:	0bc3      	lsrs	r3, r0, #15
    e0d6:	428b      	cmp	r3, r1
    e0d8:	d301      	bcc.n	e0de <__udivsi3+0x46>
    e0da:	03cb      	lsls	r3, r1, #15
    e0dc:	1ac0      	subs	r0, r0, r3
    e0de:	4152      	adcs	r2, r2
    e0e0:	0b83      	lsrs	r3, r0, #14
    e0e2:	428b      	cmp	r3, r1
    e0e4:	d301      	bcc.n	e0ea <__udivsi3+0x52>
    e0e6:	038b      	lsls	r3, r1, #14
    e0e8:	1ac0      	subs	r0, r0, r3
    e0ea:	4152      	adcs	r2, r2
    e0ec:	0b43      	lsrs	r3, r0, #13
    e0ee:	428b      	cmp	r3, r1
    e0f0:	d301      	bcc.n	e0f6 <__udivsi3+0x5e>
    e0f2:	034b      	lsls	r3, r1, #13
    e0f4:	1ac0      	subs	r0, r0, r3
    e0f6:	4152      	adcs	r2, r2
    e0f8:	0b03      	lsrs	r3, r0, #12
    e0fa:	428b      	cmp	r3, r1
    e0fc:	d301      	bcc.n	e102 <__udivsi3+0x6a>
    e0fe:	030b      	lsls	r3, r1, #12
    e100:	1ac0      	subs	r0, r0, r3
    e102:	4152      	adcs	r2, r2
    e104:	0ac3      	lsrs	r3, r0, #11
    e106:	428b      	cmp	r3, r1
    e108:	d301      	bcc.n	e10e <__udivsi3+0x76>
    e10a:	02cb      	lsls	r3, r1, #11
    e10c:	1ac0      	subs	r0, r0, r3
    e10e:	4152      	adcs	r2, r2
    e110:	0a83      	lsrs	r3, r0, #10
    e112:	428b      	cmp	r3, r1
    e114:	d301      	bcc.n	e11a <__udivsi3+0x82>
    e116:	028b      	lsls	r3, r1, #10
    e118:	1ac0      	subs	r0, r0, r3
    e11a:	4152      	adcs	r2, r2
    e11c:	0a43      	lsrs	r3, r0, #9
    e11e:	428b      	cmp	r3, r1
    e120:	d301      	bcc.n	e126 <__udivsi3+0x8e>
    e122:	024b      	lsls	r3, r1, #9
    e124:	1ac0      	subs	r0, r0, r3
    e126:	4152      	adcs	r2, r2
    e128:	0a03      	lsrs	r3, r0, #8
    e12a:	428b      	cmp	r3, r1
    e12c:	d301      	bcc.n	e132 <__udivsi3+0x9a>
    e12e:	020b      	lsls	r3, r1, #8
    e130:	1ac0      	subs	r0, r0, r3
    e132:	4152      	adcs	r2, r2
    e134:	d2cd      	bcs.n	e0d2 <__udivsi3+0x3a>
    e136:	09c3      	lsrs	r3, r0, #7
    e138:	428b      	cmp	r3, r1
    e13a:	d301      	bcc.n	e140 <__udivsi3+0xa8>
    e13c:	01cb      	lsls	r3, r1, #7
    e13e:	1ac0      	subs	r0, r0, r3
    e140:	4152      	adcs	r2, r2
    e142:	0983      	lsrs	r3, r0, #6
    e144:	428b      	cmp	r3, r1
    e146:	d301      	bcc.n	e14c <__udivsi3+0xb4>
    e148:	018b      	lsls	r3, r1, #6
    e14a:	1ac0      	subs	r0, r0, r3
    e14c:	4152      	adcs	r2, r2
    e14e:	0943      	lsrs	r3, r0, #5
    e150:	428b      	cmp	r3, r1
    e152:	d301      	bcc.n	e158 <__udivsi3+0xc0>
    e154:	014b      	lsls	r3, r1, #5
    e156:	1ac0      	subs	r0, r0, r3
    e158:	4152      	adcs	r2, r2
    e15a:	0903      	lsrs	r3, r0, #4
    e15c:	428b      	cmp	r3, r1
    e15e:	d301      	bcc.n	e164 <__udivsi3+0xcc>
    e160:	010b      	lsls	r3, r1, #4
    e162:	1ac0      	subs	r0, r0, r3
    e164:	4152      	adcs	r2, r2
    e166:	08c3      	lsrs	r3, r0, #3
    e168:	428b      	cmp	r3, r1
    e16a:	d301      	bcc.n	e170 <__udivsi3+0xd8>
    e16c:	00cb      	lsls	r3, r1, #3
    e16e:	1ac0      	subs	r0, r0, r3
    e170:	4152      	adcs	r2, r2
    e172:	0883      	lsrs	r3, r0, #2
    e174:	428b      	cmp	r3, r1
    e176:	d301      	bcc.n	e17c <__udivsi3+0xe4>
    e178:	008b      	lsls	r3, r1, #2
    e17a:	1ac0      	subs	r0, r0, r3
    e17c:	4152      	adcs	r2, r2
    e17e:	0843      	lsrs	r3, r0, #1
    e180:	428b      	cmp	r3, r1
    e182:	d301      	bcc.n	e188 <__udivsi3+0xf0>
    e184:	004b      	lsls	r3, r1, #1
    e186:	1ac0      	subs	r0, r0, r3
    e188:	4152      	adcs	r2, r2
    e18a:	1a41      	subs	r1, r0, r1
    e18c:	d200      	bcs.n	e190 <__udivsi3+0xf8>
    e18e:	4601      	mov	r1, r0
    e190:	4152      	adcs	r2, r2
    e192:	4610      	mov	r0, r2
    e194:	4770      	bx	lr
    e196:	e7ff      	b.n	e198 <__udivsi3+0x100>
    e198:	b501      	push	{r0, lr}
    e19a:	2000      	movs	r0, #0
    e19c:	f000 f8f0 	bl	e380 <__aeabi_idiv0>
    e1a0:	bd02      	pop	{r1, pc}
    e1a2:	46c0      	nop			; (mov r8, r8)

0000e1a4 <__aeabi_uidivmod>:
    e1a4:	2900      	cmp	r1, #0
    e1a6:	d0f7      	beq.n	e198 <__udivsi3+0x100>
    e1a8:	e776      	b.n	e098 <__udivsi3>
    e1aa:	4770      	bx	lr

0000e1ac <__divsi3>:
    e1ac:	4603      	mov	r3, r0
    e1ae:	430b      	orrs	r3, r1
    e1b0:	d47f      	bmi.n	e2b2 <__divsi3+0x106>
    e1b2:	2200      	movs	r2, #0
    e1b4:	0843      	lsrs	r3, r0, #1
    e1b6:	428b      	cmp	r3, r1
    e1b8:	d374      	bcc.n	e2a4 <__divsi3+0xf8>
    e1ba:	0903      	lsrs	r3, r0, #4
    e1bc:	428b      	cmp	r3, r1
    e1be:	d35f      	bcc.n	e280 <__divsi3+0xd4>
    e1c0:	0a03      	lsrs	r3, r0, #8
    e1c2:	428b      	cmp	r3, r1
    e1c4:	d344      	bcc.n	e250 <__divsi3+0xa4>
    e1c6:	0b03      	lsrs	r3, r0, #12
    e1c8:	428b      	cmp	r3, r1
    e1ca:	d328      	bcc.n	e21e <__divsi3+0x72>
    e1cc:	0c03      	lsrs	r3, r0, #16
    e1ce:	428b      	cmp	r3, r1
    e1d0:	d30d      	bcc.n	e1ee <__divsi3+0x42>
    e1d2:	22ff      	movs	r2, #255	; 0xff
    e1d4:	0209      	lsls	r1, r1, #8
    e1d6:	ba12      	rev	r2, r2
    e1d8:	0c03      	lsrs	r3, r0, #16
    e1da:	428b      	cmp	r3, r1
    e1dc:	d302      	bcc.n	e1e4 <__divsi3+0x38>
    e1de:	1212      	asrs	r2, r2, #8
    e1e0:	0209      	lsls	r1, r1, #8
    e1e2:	d065      	beq.n	e2b0 <__divsi3+0x104>
    e1e4:	0b03      	lsrs	r3, r0, #12
    e1e6:	428b      	cmp	r3, r1
    e1e8:	d319      	bcc.n	e21e <__divsi3+0x72>
    e1ea:	e000      	b.n	e1ee <__divsi3+0x42>
    e1ec:	0a09      	lsrs	r1, r1, #8
    e1ee:	0bc3      	lsrs	r3, r0, #15
    e1f0:	428b      	cmp	r3, r1
    e1f2:	d301      	bcc.n	e1f8 <__divsi3+0x4c>
    e1f4:	03cb      	lsls	r3, r1, #15
    e1f6:	1ac0      	subs	r0, r0, r3
    e1f8:	4152      	adcs	r2, r2
    e1fa:	0b83      	lsrs	r3, r0, #14
    e1fc:	428b      	cmp	r3, r1
    e1fe:	d301      	bcc.n	e204 <__divsi3+0x58>
    e200:	038b      	lsls	r3, r1, #14
    e202:	1ac0      	subs	r0, r0, r3
    e204:	4152      	adcs	r2, r2
    e206:	0b43      	lsrs	r3, r0, #13
    e208:	428b      	cmp	r3, r1
    e20a:	d301      	bcc.n	e210 <__divsi3+0x64>
    e20c:	034b      	lsls	r3, r1, #13
    e20e:	1ac0      	subs	r0, r0, r3
    e210:	4152      	adcs	r2, r2
    e212:	0b03      	lsrs	r3, r0, #12
    e214:	428b      	cmp	r3, r1
    e216:	d301      	bcc.n	e21c <__divsi3+0x70>
    e218:	030b      	lsls	r3, r1, #12
    e21a:	1ac0      	subs	r0, r0, r3
    e21c:	4152      	adcs	r2, r2
    e21e:	0ac3      	lsrs	r3, r0, #11
    e220:	428b      	cmp	r3, r1
    e222:	d301      	bcc.n	e228 <__divsi3+0x7c>
    e224:	02cb      	lsls	r3, r1, #11
    e226:	1ac0      	subs	r0, r0, r3
    e228:	4152      	adcs	r2, r2
    e22a:	0a83      	lsrs	r3, r0, #10
    e22c:	428b      	cmp	r3, r1
    e22e:	d301      	bcc.n	e234 <__divsi3+0x88>
    e230:	028b      	lsls	r3, r1, #10
    e232:	1ac0      	subs	r0, r0, r3
    e234:	4152      	adcs	r2, r2
    e236:	0a43      	lsrs	r3, r0, #9
    e238:	428b      	cmp	r3, r1
    e23a:	d301      	bcc.n	e240 <__divsi3+0x94>
    e23c:	024b      	lsls	r3, r1, #9
    e23e:	1ac0      	subs	r0, r0, r3
    e240:	4152      	adcs	r2, r2
    e242:	0a03      	lsrs	r3, r0, #8
    e244:	428b      	cmp	r3, r1
    e246:	d301      	bcc.n	e24c <__divsi3+0xa0>
    e248:	020b      	lsls	r3, r1, #8
    e24a:	1ac0      	subs	r0, r0, r3
    e24c:	4152      	adcs	r2, r2
    e24e:	d2cd      	bcs.n	e1ec <__divsi3+0x40>
    e250:	09c3      	lsrs	r3, r0, #7
    e252:	428b      	cmp	r3, r1
    e254:	d301      	bcc.n	e25a <__divsi3+0xae>
    e256:	01cb      	lsls	r3, r1, #7
    e258:	1ac0      	subs	r0, r0, r3
    e25a:	4152      	adcs	r2, r2
    e25c:	0983      	lsrs	r3, r0, #6
    e25e:	428b      	cmp	r3, r1
    e260:	d301      	bcc.n	e266 <__divsi3+0xba>
    e262:	018b      	lsls	r3, r1, #6
    e264:	1ac0      	subs	r0, r0, r3
    e266:	4152      	adcs	r2, r2
    e268:	0943      	lsrs	r3, r0, #5
    e26a:	428b      	cmp	r3, r1
    e26c:	d301      	bcc.n	e272 <__divsi3+0xc6>
    e26e:	014b      	lsls	r3, r1, #5
    e270:	1ac0      	subs	r0, r0, r3
    e272:	4152      	adcs	r2, r2
    e274:	0903      	lsrs	r3, r0, #4
    e276:	428b      	cmp	r3, r1
    e278:	d301      	bcc.n	e27e <__divsi3+0xd2>
    e27a:	010b      	lsls	r3, r1, #4
    e27c:	1ac0      	subs	r0, r0, r3
    e27e:	4152      	adcs	r2, r2
    e280:	08c3      	lsrs	r3, r0, #3
    e282:	428b      	cmp	r3, r1
    e284:	d301      	bcc.n	e28a <__divsi3+0xde>
    e286:	00cb      	lsls	r3, r1, #3
    e288:	1ac0      	subs	r0, r0, r3
    e28a:	4152      	adcs	r2, r2
    e28c:	0883      	lsrs	r3, r0, #2
    e28e:	428b      	cmp	r3, r1
    e290:	d301      	bcc.n	e296 <__divsi3+0xea>
    e292:	008b      	lsls	r3, r1, #2
    e294:	1ac0      	subs	r0, r0, r3
    e296:	4152      	adcs	r2, r2
    e298:	0843      	lsrs	r3, r0, #1
    e29a:	428b      	cmp	r3, r1
    e29c:	d301      	bcc.n	e2a2 <__divsi3+0xf6>
    e29e:	004b      	lsls	r3, r1, #1
    e2a0:	1ac0      	subs	r0, r0, r3
    e2a2:	4152      	adcs	r2, r2
    e2a4:	1a41      	subs	r1, r0, r1
    e2a6:	d200      	bcs.n	e2aa <__divsi3+0xfe>
    e2a8:	4601      	mov	r1, r0
    e2aa:	4152      	adcs	r2, r2
    e2ac:	4610      	mov	r0, r2
    e2ae:	4770      	bx	lr
    e2b0:	e05d      	b.n	e36e <__divsi3+0x1c2>
    e2b2:	0fca      	lsrs	r2, r1, #31
    e2b4:	d000      	beq.n	e2b8 <__divsi3+0x10c>
    e2b6:	4249      	negs	r1, r1
    e2b8:	1003      	asrs	r3, r0, #32
    e2ba:	d300      	bcc.n	e2be <__divsi3+0x112>
    e2bc:	4240      	negs	r0, r0
    e2be:	4053      	eors	r3, r2
    e2c0:	2200      	movs	r2, #0
    e2c2:	469c      	mov	ip, r3
    e2c4:	0903      	lsrs	r3, r0, #4
    e2c6:	428b      	cmp	r3, r1
    e2c8:	d32d      	bcc.n	e326 <__divsi3+0x17a>
    e2ca:	0a03      	lsrs	r3, r0, #8
    e2cc:	428b      	cmp	r3, r1
    e2ce:	d312      	bcc.n	e2f6 <__divsi3+0x14a>
    e2d0:	22fc      	movs	r2, #252	; 0xfc
    e2d2:	0189      	lsls	r1, r1, #6
    e2d4:	ba12      	rev	r2, r2
    e2d6:	0a03      	lsrs	r3, r0, #8
    e2d8:	428b      	cmp	r3, r1
    e2da:	d30c      	bcc.n	e2f6 <__divsi3+0x14a>
    e2dc:	0189      	lsls	r1, r1, #6
    e2de:	1192      	asrs	r2, r2, #6
    e2e0:	428b      	cmp	r3, r1
    e2e2:	d308      	bcc.n	e2f6 <__divsi3+0x14a>
    e2e4:	0189      	lsls	r1, r1, #6
    e2e6:	1192      	asrs	r2, r2, #6
    e2e8:	428b      	cmp	r3, r1
    e2ea:	d304      	bcc.n	e2f6 <__divsi3+0x14a>
    e2ec:	0189      	lsls	r1, r1, #6
    e2ee:	d03a      	beq.n	e366 <__divsi3+0x1ba>
    e2f0:	1192      	asrs	r2, r2, #6
    e2f2:	e000      	b.n	e2f6 <__divsi3+0x14a>
    e2f4:	0989      	lsrs	r1, r1, #6
    e2f6:	09c3      	lsrs	r3, r0, #7
    e2f8:	428b      	cmp	r3, r1
    e2fa:	d301      	bcc.n	e300 <__divsi3+0x154>
    e2fc:	01cb      	lsls	r3, r1, #7
    e2fe:	1ac0      	subs	r0, r0, r3
    e300:	4152      	adcs	r2, r2
    e302:	0983      	lsrs	r3, r0, #6
    e304:	428b      	cmp	r3, r1
    e306:	d301      	bcc.n	e30c <__divsi3+0x160>
    e308:	018b      	lsls	r3, r1, #6
    e30a:	1ac0      	subs	r0, r0, r3
    e30c:	4152      	adcs	r2, r2
    e30e:	0943      	lsrs	r3, r0, #5
    e310:	428b      	cmp	r3, r1
    e312:	d301      	bcc.n	e318 <__divsi3+0x16c>
    e314:	014b      	lsls	r3, r1, #5
    e316:	1ac0      	subs	r0, r0, r3
    e318:	4152      	adcs	r2, r2
    e31a:	0903      	lsrs	r3, r0, #4
    e31c:	428b      	cmp	r3, r1
    e31e:	d301      	bcc.n	e324 <__divsi3+0x178>
    e320:	010b      	lsls	r3, r1, #4
    e322:	1ac0      	subs	r0, r0, r3
    e324:	4152      	adcs	r2, r2
    e326:	08c3      	lsrs	r3, r0, #3
    e328:	428b      	cmp	r3, r1
    e32a:	d301      	bcc.n	e330 <__divsi3+0x184>
    e32c:	00cb      	lsls	r3, r1, #3
    e32e:	1ac0      	subs	r0, r0, r3
    e330:	4152      	adcs	r2, r2
    e332:	0883      	lsrs	r3, r0, #2
    e334:	428b      	cmp	r3, r1
    e336:	d301      	bcc.n	e33c <__divsi3+0x190>
    e338:	008b      	lsls	r3, r1, #2
    e33a:	1ac0      	subs	r0, r0, r3
    e33c:	4152      	adcs	r2, r2
    e33e:	d2d9      	bcs.n	e2f4 <__divsi3+0x148>
    e340:	0843      	lsrs	r3, r0, #1
    e342:	428b      	cmp	r3, r1
    e344:	d301      	bcc.n	e34a <__divsi3+0x19e>
    e346:	004b      	lsls	r3, r1, #1
    e348:	1ac0      	subs	r0, r0, r3
    e34a:	4152      	adcs	r2, r2
    e34c:	1a41      	subs	r1, r0, r1
    e34e:	d200      	bcs.n	e352 <__divsi3+0x1a6>
    e350:	4601      	mov	r1, r0
    e352:	4663      	mov	r3, ip
    e354:	4152      	adcs	r2, r2
    e356:	105b      	asrs	r3, r3, #1
    e358:	4610      	mov	r0, r2
    e35a:	d301      	bcc.n	e360 <__divsi3+0x1b4>
    e35c:	4240      	negs	r0, r0
    e35e:	2b00      	cmp	r3, #0
    e360:	d500      	bpl.n	e364 <__divsi3+0x1b8>
    e362:	4249      	negs	r1, r1
    e364:	4770      	bx	lr
    e366:	4663      	mov	r3, ip
    e368:	105b      	asrs	r3, r3, #1
    e36a:	d300      	bcc.n	e36e <__divsi3+0x1c2>
    e36c:	4240      	negs	r0, r0
    e36e:	b501      	push	{r0, lr}
    e370:	2000      	movs	r0, #0
    e372:	f000 f805 	bl	e380 <__aeabi_idiv0>
    e376:	bd02      	pop	{r1, pc}

0000e378 <__aeabi_idivmod>:
    e378:	2900      	cmp	r1, #0
    e37a:	d0f8      	beq.n	e36e <__divsi3+0x1c2>
    e37c:	e716      	b.n	e1ac <__divsi3>
    e37e:	4770      	bx	lr

0000e380 <__aeabi_idiv0>:
    e380:	4770      	bx	lr
    e382:	46c0      	nop			; (mov r8, r8)

0000e384 <__aeabi_cdrcmple>:
    e384:	4684      	mov	ip, r0
    e386:	1c10      	adds	r0, r2, #0
    e388:	4662      	mov	r2, ip
    e38a:	468c      	mov	ip, r1
    e38c:	1c19      	adds	r1, r3, #0
    e38e:	4663      	mov	r3, ip
    e390:	e000      	b.n	e394 <__aeabi_cdcmpeq>
    e392:	46c0      	nop			; (mov r8, r8)

0000e394 <__aeabi_cdcmpeq>:
    e394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e396:	f001 f9f7 	bl	f788 <__ledf2>
    e39a:	2800      	cmp	r0, #0
    e39c:	d401      	bmi.n	e3a2 <__aeabi_cdcmpeq+0xe>
    e39e:	2100      	movs	r1, #0
    e3a0:	42c8      	cmn	r0, r1
    e3a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000e3a4 <__aeabi_dcmpeq>:
    e3a4:	b510      	push	{r4, lr}
    e3a6:	f001 f951 	bl	f64c <__eqdf2>
    e3aa:	4240      	negs	r0, r0
    e3ac:	3001      	adds	r0, #1
    e3ae:	bd10      	pop	{r4, pc}

0000e3b0 <__aeabi_dcmplt>:
    e3b0:	b510      	push	{r4, lr}
    e3b2:	f001 f9e9 	bl	f788 <__ledf2>
    e3b6:	2800      	cmp	r0, #0
    e3b8:	db01      	blt.n	e3be <__aeabi_dcmplt+0xe>
    e3ba:	2000      	movs	r0, #0
    e3bc:	bd10      	pop	{r4, pc}
    e3be:	2001      	movs	r0, #1
    e3c0:	bd10      	pop	{r4, pc}
    e3c2:	46c0      	nop			; (mov r8, r8)

0000e3c4 <__aeabi_dcmple>:
    e3c4:	b510      	push	{r4, lr}
    e3c6:	f001 f9df 	bl	f788 <__ledf2>
    e3ca:	2800      	cmp	r0, #0
    e3cc:	dd01      	ble.n	e3d2 <__aeabi_dcmple+0xe>
    e3ce:	2000      	movs	r0, #0
    e3d0:	bd10      	pop	{r4, pc}
    e3d2:	2001      	movs	r0, #1
    e3d4:	bd10      	pop	{r4, pc}
    e3d6:	46c0      	nop			; (mov r8, r8)

0000e3d8 <__aeabi_dcmpgt>:
    e3d8:	b510      	push	{r4, lr}
    e3da:	f001 f971 	bl	f6c0 <__gedf2>
    e3de:	2800      	cmp	r0, #0
    e3e0:	dc01      	bgt.n	e3e6 <__aeabi_dcmpgt+0xe>
    e3e2:	2000      	movs	r0, #0
    e3e4:	bd10      	pop	{r4, pc}
    e3e6:	2001      	movs	r0, #1
    e3e8:	bd10      	pop	{r4, pc}
    e3ea:	46c0      	nop			; (mov r8, r8)

0000e3ec <__aeabi_dcmpge>:
    e3ec:	b510      	push	{r4, lr}
    e3ee:	f001 f967 	bl	f6c0 <__gedf2>
    e3f2:	2800      	cmp	r0, #0
    e3f4:	da01      	bge.n	e3fa <__aeabi_dcmpge+0xe>
    e3f6:	2000      	movs	r0, #0
    e3f8:	bd10      	pop	{r4, pc}
    e3fa:	2001      	movs	r0, #1
    e3fc:	bd10      	pop	{r4, pc}
    e3fe:	46c0      	nop			; (mov r8, r8)

0000e400 <__aeabi_lmul>:
    e400:	b5f0      	push	{r4, r5, r6, r7, lr}
    e402:	46ce      	mov	lr, r9
    e404:	4647      	mov	r7, r8
    e406:	0415      	lsls	r5, r2, #16
    e408:	0c2d      	lsrs	r5, r5, #16
    e40a:	002e      	movs	r6, r5
    e40c:	b580      	push	{r7, lr}
    e40e:	0407      	lsls	r7, r0, #16
    e410:	0c14      	lsrs	r4, r2, #16
    e412:	0c3f      	lsrs	r7, r7, #16
    e414:	4699      	mov	r9, r3
    e416:	0c03      	lsrs	r3, r0, #16
    e418:	437e      	muls	r6, r7
    e41a:	435d      	muls	r5, r3
    e41c:	4367      	muls	r7, r4
    e41e:	4363      	muls	r3, r4
    e420:	197f      	adds	r7, r7, r5
    e422:	0c34      	lsrs	r4, r6, #16
    e424:	19e4      	adds	r4, r4, r7
    e426:	469c      	mov	ip, r3
    e428:	42a5      	cmp	r5, r4
    e42a:	d903      	bls.n	e434 <__aeabi_lmul+0x34>
    e42c:	2380      	movs	r3, #128	; 0x80
    e42e:	025b      	lsls	r3, r3, #9
    e430:	4698      	mov	r8, r3
    e432:	44c4      	add	ip, r8
    e434:	464b      	mov	r3, r9
    e436:	4351      	muls	r1, r2
    e438:	4343      	muls	r3, r0
    e43a:	0436      	lsls	r6, r6, #16
    e43c:	0c36      	lsrs	r6, r6, #16
    e43e:	0c25      	lsrs	r5, r4, #16
    e440:	0424      	lsls	r4, r4, #16
    e442:	4465      	add	r5, ip
    e444:	19a4      	adds	r4, r4, r6
    e446:	1859      	adds	r1, r3, r1
    e448:	1949      	adds	r1, r1, r5
    e44a:	0020      	movs	r0, r4
    e44c:	bc0c      	pop	{r2, r3}
    e44e:	4690      	mov	r8, r2
    e450:	4699      	mov	r9, r3
    e452:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e454 <__aeabi_fdiv>:
    e454:	b5f0      	push	{r4, r5, r6, r7, lr}
    e456:	4657      	mov	r7, sl
    e458:	464e      	mov	r6, r9
    e45a:	46de      	mov	lr, fp
    e45c:	4645      	mov	r5, r8
    e45e:	b5e0      	push	{r5, r6, r7, lr}
    e460:	0244      	lsls	r4, r0, #9
    e462:	0043      	lsls	r3, r0, #1
    e464:	0fc6      	lsrs	r6, r0, #31
    e466:	b083      	sub	sp, #12
    e468:	1c0f      	adds	r7, r1, #0
    e46a:	0a64      	lsrs	r4, r4, #9
    e46c:	0e1b      	lsrs	r3, r3, #24
    e46e:	46b2      	mov	sl, r6
    e470:	d053      	beq.n	e51a <__aeabi_fdiv+0xc6>
    e472:	2bff      	cmp	r3, #255	; 0xff
    e474:	d027      	beq.n	e4c6 <__aeabi_fdiv+0x72>
    e476:	2280      	movs	r2, #128	; 0x80
    e478:	00e4      	lsls	r4, r4, #3
    e47a:	04d2      	lsls	r2, r2, #19
    e47c:	4314      	orrs	r4, r2
    e47e:	227f      	movs	r2, #127	; 0x7f
    e480:	4252      	negs	r2, r2
    e482:	4690      	mov	r8, r2
    e484:	4498      	add	r8, r3
    e486:	2300      	movs	r3, #0
    e488:	4699      	mov	r9, r3
    e48a:	469b      	mov	fp, r3
    e48c:	027d      	lsls	r5, r7, #9
    e48e:	0078      	lsls	r0, r7, #1
    e490:	0ffb      	lsrs	r3, r7, #31
    e492:	0a6d      	lsrs	r5, r5, #9
    e494:	0e00      	lsrs	r0, r0, #24
    e496:	9300      	str	r3, [sp, #0]
    e498:	d024      	beq.n	e4e4 <__aeabi_fdiv+0x90>
    e49a:	28ff      	cmp	r0, #255	; 0xff
    e49c:	d046      	beq.n	e52c <__aeabi_fdiv+0xd8>
    e49e:	2380      	movs	r3, #128	; 0x80
    e4a0:	2100      	movs	r1, #0
    e4a2:	00ed      	lsls	r5, r5, #3
    e4a4:	04db      	lsls	r3, r3, #19
    e4a6:	431d      	orrs	r5, r3
    e4a8:	387f      	subs	r0, #127	; 0x7f
    e4aa:	4647      	mov	r7, r8
    e4ac:	1a38      	subs	r0, r7, r0
    e4ae:	464f      	mov	r7, r9
    e4b0:	430f      	orrs	r7, r1
    e4b2:	00bf      	lsls	r7, r7, #2
    e4b4:	46b9      	mov	r9, r7
    e4b6:	0033      	movs	r3, r6
    e4b8:	9a00      	ldr	r2, [sp, #0]
    e4ba:	4f87      	ldr	r7, [pc, #540]	; (e6d8 <__aeabi_fdiv+0x284>)
    e4bc:	4053      	eors	r3, r2
    e4be:	464a      	mov	r2, r9
    e4c0:	58ba      	ldr	r2, [r7, r2]
    e4c2:	9301      	str	r3, [sp, #4]
    e4c4:	4697      	mov	pc, r2
    e4c6:	2c00      	cmp	r4, #0
    e4c8:	d14e      	bne.n	e568 <__aeabi_fdiv+0x114>
    e4ca:	2308      	movs	r3, #8
    e4cc:	4699      	mov	r9, r3
    e4ce:	33f7      	adds	r3, #247	; 0xf7
    e4d0:	4698      	mov	r8, r3
    e4d2:	3bfd      	subs	r3, #253	; 0xfd
    e4d4:	469b      	mov	fp, r3
    e4d6:	027d      	lsls	r5, r7, #9
    e4d8:	0078      	lsls	r0, r7, #1
    e4da:	0ffb      	lsrs	r3, r7, #31
    e4dc:	0a6d      	lsrs	r5, r5, #9
    e4de:	0e00      	lsrs	r0, r0, #24
    e4e0:	9300      	str	r3, [sp, #0]
    e4e2:	d1da      	bne.n	e49a <__aeabi_fdiv+0x46>
    e4e4:	2d00      	cmp	r5, #0
    e4e6:	d126      	bne.n	e536 <__aeabi_fdiv+0xe2>
    e4e8:	2000      	movs	r0, #0
    e4ea:	2101      	movs	r1, #1
    e4ec:	0033      	movs	r3, r6
    e4ee:	9a00      	ldr	r2, [sp, #0]
    e4f0:	4f7a      	ldr	r7, [pc, #488]	; (e6dc <__aeabi_fdiv+0x288>)
    e4f2:	4053      	eors	r3, r2
    e4f4:	4642      	mov	r2, r8
    e4f6:	1a10      	subs	r0, r2, r0
    e4f8:	464a      	mov	r2, r9
    e4fa:	430a      	orrs	r2, r1
    e4fc:	0092      	lsls	r2, r2, #2
    e4fe:	58ba      	ldr	r2, [r7, r2]
    e500:	001d      	movs	r5, r3
    e502:	4697      	mov	pc, r2
    e504:	9b00      	ldr	r3, [sp, #0]
    e506:	002c      	movs	r4, r5
    e508:	469a      	mov	sl, r3
    e50a:	468b      	mov	fp, r1
    e50c:	465b      	mov	r3, fp
    e50e:	2b02      	cmp	r3, #2
    e510:	d131      	bne.n	e576 <__aeabi_fdiv+0x122>
    e512:	4653      	mov	r3, sl
    e514:	21ff      	movs	r1, #255	; 0xff
    e516:	2400      	movs	r4, #0
    e518:	e038      	b.n	e58c <__aeabi_fdiv+0x138>
    e51a:	2c00      	cmp	r4, #0
    e51c:	d117      	bne.n	e54e <__aeabi_fdiv+0xfa>
    e51e:	2304      	movs	r3, #4
    e520:	4699      	mov	r9, r3
    e522:	2300      	movs	r3, #0
    e524:	4698      	mov	r8, r3
    e526:	3301      	adds	r3, #1
    e528:	469b      	mov	fp, r3
    e52a:	e7af      	b.n	e48c <__aeabi_fdiv+0x38>
    e52c:	20ff      	movs	r0, #255	; 0xff
    e52e:	2d00      	cmp	r5, #0
    e530:	d10b      	bne.n	e54a <__aeabi_fdiv+0xf6>
    e532:	2102      	movs	r1, #2
    e534:	e7da      	b.n	e4ec <__aeabi_fdiv+0x98>
    e536:	0028      	movs	r0, r5
    e538:	f002 f83e 	bl	105b8 <__clzsi2>
    e53c:	1f43      	subs	r3, r0, #5
    e53e:	409d      	lsls	r5, r3
    e540:	2376      	movs	r3, #118	; 0x76
    e542:	425b      	negs	r3, r3
    e544:	1a18      	subs	r0, r3, r0
    e546:	2100      	movs	r1, #0
    e548:	e7af      	b.n	e4aa <__aeabi_fdiv+0x56>
    e54a:	2103      	movs	r1, #3
    e54c:	e7ad      	b.n	e4aa <__aeabi_fdiv+0x56>
    e54e:	0020      	movs	r0, r4
    e550:	f002 f832 	bl	105b8 <__clzsi2>
    e554:	1f43      	subs	r3, r0, #5
    e556:	409c      	lsls	r4, r3
    e558:	2376      	movs	r3, #118	; 0x76
    e55a:	425b      	negs	r3, r3
    e55c:	1a1b      	subs	r3, r3, r0
    e55e:	4698      	mov	r8, r3
    e560:	2300      	movs	r3, #0
    e562:	4699      	mov	r9, r3
    e564:	469b      	mov	fp, r3
    e566:	e791      	b.n	e48c <__aeabi_fdiv+0x38>
    e568:	230c      	movs	r3, #12
    e56a:	4699      	mov	r9, r3
    e56c:	33f3      	adds	r3, #243	; 0xf3
    e56e:	4698      	mov	r8, r3
    e570:	3bfc      	subs	r3, #252	; 0xfc
    e572:	469b      	mov	fp, r3
    e574:	e78a      	b.n	e48c <__aeabi_fdiv+0x38>
    e576:	2b03      	cmp	r3, #3
    e578:	d100      	bne.n	e57c <__aeabi_fdiv+0x128>
    e57a:	e0a5      	b.n	e6c8 <__aeabi_fdiv+0x274>
    e57c:	4655      	mov	r5, sl
    e57e:	2b01      	cmp	r3, #1
    e580:	d000      	beq.n	e584 <__aeabi_fdiv+0x130>
    e582:	e081      	b.n	e688 <__aeabi_fdiv+0x234>
    e584:	2301      	movs	r3, #1
    e586:	2100      	movs	r1, #0
    e588:	2400      	movs	r4, #0
    e58a:	402b      	ands	r3, r5
    e58c:	0264      	lsls	r4, r4, #9
    e58e:	05c9      	lsls	r1, r1, #23
    e590:	0a60      	lsrs	r0, r4, #9
    e592:	07db      	lsls	r3, r3, #31
    e594:	4308      	orrs	r0, r1
    e596:	4318      	orrs	r0, r3
    e598:	b003      	add	sp, #12
    e59a:	bc3c      	pop	{r2, r3, r4, r5}
    e59c:	4690      	mov	r8, r2
    e59e:	4699      	mov	r9, r3
    e5a0:	46a2      	mov	sl, r4
    e5a2:	46ab      	mov	fp, r5
    e5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5a6:	2480      	movs	r4, #128	; 0x80
    e5a8:	2300      	movs	r3, #0
    e5aa:	03e4      	lsls	r4, r4, #15
    e5ac:	21ff      	movs	r1, #255	; 0xff
    e5ae:	e7ed      	b.n	e58c <__aeabi_fdiv+0x138>
    e5b0:	21ff      	movs	r1, #255	; 0xff
    e5b2:	2400      	movs	r4, #0
    e5b4:	e7ea      	b.n	e58c <__aeabi_fdiv+0x138>
    e5b6:	2301      	movs	r3, #1
    e5b8:	1a59      	subs	r1, r3, r1
    e5ba:	291b      	cmp	r1, #27
    e5bc:	dd66      	ble.n	e68c <__aeabi_fdiv+0x238>
    e5be:	9a01      	ldr	r2, [sp, #4]
    e5c0:	4013      	ands	r3, r2
    e5c2:	2100      	movs	r1, #0
    e5c4:	2400      	movs	r4, #0
    e5c6:	e7e1      	b.n	e58c <__aeabi_fdiv+0x138>
    e5c8:	2380      	movs	r3, #128	; 0x80
    e5ca:	03db      	lsls	r3, r3, #15
    e5cc:	421c      	tst	r4, r3
    e5ce:	d038      	beq.n	e642 <__aeabi_fdiv+0x1ee>
    e5d0:	421d      	tst	r5, r3
    e5d2:	d051      	beq.n	e678 <__aeabi_fdiv+0x224>
    e5d4:	431c      	orrs	r4, r3
    e5d6:	0264      	lsls	r4, r4, #9
    e5d8:	0a64      	lsrs	r4, r4, #9
    e5da:	0033      	movs	r3, r6
    e5dc:	21ff      	movs	r1, #255	; 0xff
    e5de:	e7d5      	b.n	e58c <__aeabi_fdiv+0x138>
    e5e0:	0163      	lsls	r3, r4, #5
    e5e2:	016c      	lsls	r4, r5, #5
    e5e4:	42a3      	cmp	r3, r4
    e5e6:	d23b      	bcs.n	e660 <__aeabi_fdiv+0x20c>
    e5e8:	261b      	movs	r6, #27
    e5ea:	2100      	movs	r1, #0
    e5ec:	3801      	subs	r0, #1
    e5ee:	2501      	movs	r5, #1
    e5f0:	001f      	movs	r7, r3
    e5f2:	0049      	lsls	r1, r1, #1
    e5f4:	005b      	lsls	r3, r3, #1
    e5f6:	2f00      	cmp	r7, #0
    e5f8:	db01      	blt.n	e5fe <__aeabi_fdiv+0x1aa>
    e5fa:	429c      	cmp	r4, r3
    e5fc:	d801      	bhi.n	e602 <__aeabi_fdiv+0x1ae>
    e5fe:	1b1b      	subs	r3, r3, r4
    e600:	4329      	orrs	r1, r5
    e602:	3e01      	subs	r6, #1
    e604:	2e00      	cmp	r6, #0
    e606:	d1f3      	bne.n	e5f0 <__aeabi_fdiv+0x19c>
    e608:	001c      	movs	r4, r3
    e60a:	1e63      	subs	r3, r4, #1
    e60c:	419c      	sbcs	r4, r3
    e60e:	430c      	orrs	r4, r1
    e610:	0001      	movs	r1, r0
    e612:	317f      	adds	r1, #127	; 0x7f
    e614:	2900      	cmp	r1, #0
    e616:	ddce      	ble.n	e5b6 <__aeabi_fdiv+0x162>
    e618:	0763      	lsls	r3, r4, #29
    e61a:	d004      	beq.n	e626 <__aeabi_fdiv+0x1d2>
    e61c:	230f      	movs	r3, #15
    e61e:	4023      	ands	r3, r4
    e620:	2b04      	cmp	r3, #4
    e622:	d000      	beq.n	e626 <__aeabi_fdiv+0x1d2>
    e624:	3404      	adds	r4, #4
    e626:	0123      	lsls	r3, r4, #4
    e628:	d503      	bpl.n	e632 <__aeabi_fdiv+0x1de>
    e62a:	0001      	movs	r1, r0
    e62c:	4b2c      	ldr	r3, [pc, #176]	; (e6e0 <__aeabi_fdiv+0x28c>)
    e62e:	3180      	adds	r1, #128	; 0x80
    e630:	401c      	ands	r4, r3
    e632:	29fe      	cmp	r1, #254	; 0xfe
    e634:	dd0d      	ble.n	e652 <__aeabi_fdiv+0x1fe>
    e636:	2301      	movs	r3, #1
    e638:	9a01      	ldr	r2, [sp, #4]
    e63a:	21ff      	movs	r1, #255	; 0xff
    e63c:	4013      	ands	r3, r2
    e63e:	2400      	movs	r4, #0
    e640:	e7a4      	b.n	e58c <__aeabi_fdiv+0x138>
    e642:	2380      	movs	r3, #128	; 0x80
    e644:	03db      	lsls	r3, r3, #15
    e646:	431c      	orrs	r4, r3
    e648:	0264      	lsls	r4, r4, #9
    e64a:	0a64      	lsrs	r4, r4, #9
    e64c:	0033      	movs	r3, r6
    e64e:	21ff      	movs	r1, #255	; 0xff
    e650:	e79c      	b.n	e58c <__aeabi_fdiv+0x138>
    e652:	2301      	movs	r3, #1
    e654:	9a01      	ldr	r2, [sp, #4]
    e656:	01a4      	lsls	r4, r4, #6
    e658:	0a64      	lsrs	r4, r4, #9
    e65a:	b2c9      	uxtb	r1, r1
    e65c:	4013      	ands	r3, r2
    e65e:	e795      	b.n	e58c <__aeabi_fdiv+0x138>
    e660:	1b1b      	subs	r3, r3, r4
    e662:	261a      	movs	r6, #26
    e664:	2101      	movs	r1, #1
    e666:	e7c2      	b.n	e5ee <__aeabi_fdiv+0x19a>
    e668:	9b00      	ldr	r3, [sp, #0]
    e66a:	468b      	mov	fp, r1
    e66c:	469a      	mov	sl, r3
    e66e:	2400      	movs	r4, #0
    e670:	e74c      	b.n	e50c <__aeabi_fdiv+0xb8>
    e672:	0263      	lsls	r3, r4, #9
    e674:	d5e5      	bpl.n	e642 <__aeabi_fdiv+0x1ee>
    e676:	2500      	movs	r5, #0
    e678:	2480      	movs	r4, #128	; 0x80
    e67a:	03e4      	lsls	r4, r4, #15
    e67c:	432c      	orrs	r4, r5
    e67e:	0264      	lsls	r4, r4, #9
    e680:	0a64      	lsrs	r4, r4, #9
    e682:	9b00      	ldr	r3, [sp, #0]
    e684:	21ff      	movs	r1, #255	; 0xff
    e686:	e781      	b.n	e58c <__aeabi_fdiv+0x138>
    e688:	9501      	str	r5, [sp, #4]
    e68a:	e7c1      	b.n	e610 <__aeabi_fdiv+0x1bc>
    e68c:	0023      	movs	r3, r4
    e68e:	2020      	movs	r0, #32
    e690:	40cb      	lsrs	r3, r1
    e692:	1a41      	subs	r1, r0, r1
    e694:	408c      	lsls	r4, r1
    e696:	1e61      	subs	r1, r4, #1
    e698:	418c      	sbcs	r4, r1
    e69a:	431c      	orrs	r4, r3
    e69c:	0763      	lsls	r3, r4, #29
    e69e:	d004      	beq.n	e6aa <__aeabi_fdiv+0x256>
    e6a0:	230f      	movs	r3, #15
    e6a2:	4023      	ands	r3, r4
    e6a4:	2b04      	cmp	r3, #4
    e6a6:	d000      	beq.n	e6aa <__aeabi_fdiv+0x256>
    e6a8:	3404      	adds	r4, #4
    e6aa:	0163      	lsls	r3, r4, #5
    e6ac:	d505      	bpl.n	e6ba <__aeabi_fdiv+0x266>
    e6ae:	2301      	movs	r3, #1
    e6b0:	9a01      	ldr	r2, [sp, #4]
    e6b2:	2101      	movs	r1, #1
    e6b4:	4013      	ands	r3, r2
    e6b6:	2400      	movs	r4, #0
    e6b8:	e768      	b.n	e58c <__aeabi_fdiv+0x138>
    e6ba:	2301      	movs	r3, #1
    e6bc:	9a01      	ldr	r2, [sp, #4]
    e6be:	01a4      	lsls	r4, r4, #6
    e6c0:	0a64      	lsrs	r4, r4, #9
    e6c2:	4013      	ands	r3, r2
    e6c4:	2100      	movs	r1, #0
    e6c6:	e761      	b.n	e58c <__aeabi_fdiv+0x138>
    e6c8:	2380      	movs	r3, #128	; 0x80
    e6ca:	03db      	lsls	r3, r3, #15
    e6cc:	431c      	orrs	r4, r3
    e6ce:	0264      	lsls	r4, r4, #9
    e6d0:	0a64      	lsrs	r4, r4, #9
    e6d2:	4653      	mov	r3, sl
    e6d4:	21ff      	movs	r1, #255	; 0xff
    e6d6:	e759      	b.n	e58c <__aeabi_fdiv+0x138>
    e6d8:	00012cd8 	.word	0x00012cd8
    e6dc:	00012d18 	.word	0x00012d18
    e6e0:	f7ffffff 	.word	0xf7ffffff

0000e6e4 <__aeabi_fmul>:
    e6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6e6:	4657      	mov	r7, sl
    e6e8:	464e      	mov	r6, r9
    e6ea:	4645      	mov	r5, r8
    e6ec:	46de      	mov	lr, fp
    e6ee:	b5e0      	push	{r5, r6, r7, lr}
    e6f0:	0247      	lsls	r7, r0, #9
    e6f2:	0046      	lsls	r6, r0, #1
    e6f4:	4688      	mov	r8, r1
    e6f6:	0a7f      	lsrs	r7, r7, #9
    e6f8:	0e36      	lsrs	r6, r6, #24
    e6fa:	0fc4      	lsrs	r4, r0, #31
    e6fc:	2e00      	cmp	r6, #0
    e6fe:	d047      	beq.n	e790 <__aeabi_fmul+0xac>
    e700:	2eff      	cmp	r6, #255	; 0xff
    e702:	d024      	beq.n	e74e <__aeabi_fmul+0x6a>
    e704:	00fb      	lsls	r3, r7, #3
    e706:	2780      	movs	r7, #128	; 0x80
    e708:	04ff      	lsls	r7, r7, #19
    e70a:	431f      	orrs	r7, r3
    e70c:	2300      	movs	r3, #0
    e70e:	4699      	mov	r9, r3
    e710:	469a      	mov	sl, r3
    e712:	3e7f      	subs	r6, #127	; 0x7f
    e714:	4643      	mov	r3, r8
    e716:	025d      	lsls	r5, r3, #9
    e718:	0058      	lsls	r0, r3, #1
    e71a:	0fdb      	lsrs	r3, r3, #31
    e71c:	0a6d      	lsrs	r5, r5, #9
    e71e:	0e00      	lsrs	r0, r0, #24
    e720:	4698      	mov	r8, r3
    e722:	d043      	beq.n	e7ac <__aeabi_fmul+0xc8>
    e724:	28ff      	cmp	r0, #255	; 0xff
    e726:	d03b      	beq.n	e7a0 <__aeabi_fmul+0xbc>
    e728:	00eb      	lsls	r3, r5, #3
    e72a:	2580      	movs	r5, #128	; 0x80
    e72c:	2200      	movs	r2, #0
    e72e:	04ed      	lsls	r5, r5, #19
    e730:	431d      	orrs	r5, r3
    e732:	387f      	subs	r0, #127	; 0x7f
    e734:	1836      	adds	r6, r6, r0
    e736:	1c73      	adds	r3, r6, #1
    e738:	4641      	mov	r1, r8
    e73a:	469b      	mov	fp, r3
    e73c:	464b      	mov	r3, r9
    e73e:	4061      	eors	r1, r4
    e740:	4313      	orrs	r3, r2
    e742:	2b0f      	cmp	r3, #15
    e744:	d864      	bhi.n	e810 <__aeabi_fmul+0x12c>
    e746:	4875      	ldr	r0, [pc, #468]	; (e91c <__aeabi_fmul+0x238>)
    e748:	009b      	lsls	r3, r3, #2
    e74a:	58c3      	ldr	r3, [r0, r3]
    e74c:	469f      	mov	pc, r3
    e74e:	2f00      	cmp	r7, #0
    e750:	d142      	bne.n	e7d8 <__aeabi_fmul+0xf4>
    e752:	2308      	movs	r3, #8
    e754:	4699      	mov	r9, r3
    e756:	3b06      	subs	r3, #6
    e758:	26ff      	movs	r6, #255	; 0xff
    e75a:	469a      	mov	sl, r3
    e75c:	e7da      	b.n	e714 <__aeabi_fmul+0x30>
    e75e:	4641      	mov	r1, r8
    e760:	2a02      	cmp	r2, #2
    e762:	d028      	beq.n	e7b6 <__aeabi_fmul+0xd2>
    e764:	2a03      	cmp	r2, #3
    e766:	d100      	bne.n	e76a <__aeabi_fmul+0x86>
    e768:	e0ce      	b.n	e908 <__aeabi_fmul+0x224>
    e76a:	2a01      	cmp	r2, #1
    e76c:	d000      	beq.n	e770 <__aeabi_fmul+0x8c>
    e76e:	e0ac      	b.n	e8ca <__aeabi_fmul+0x1e6>
    e770:	4011      	ands	r1, r2
    e772:	2000      	movs	r0, #0
    e774:	2200      	movs	r2, #0
    e776:	b2cc      	uxtb	r4, r1
    e778:	0240      	lsls	r0, r0, #9
    e77a:	05d2      	lsls	r2, r2, #23
    e77c:	0a40      	lsrs	r0, r0, #9
    e77e:	07e4      	lsls	r4, r4, #31
    e780:	4310      	orrs	r0, r2
    e782:	4320      	orrs	r0, r4
    e784:	bc3c      	pop	{r2, r3, r4, r5}
    e786:	4690      	mov	r8, r2
    e788:	4699      	mov	r9, r3
    e78a:	46a2      	mov	sl, r4
    e78c:	46ab      	mov	fp, r5
    e78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e790:	2f00      	cmp	r7, #0
    e792:	d115      	bne.n	e7c0 <__aeabi_fmul+0xdc>
    e794:	2304      	movs	r3, #4
    e796:	4699      	mov	r9, r3
    e798:	3b03      	subs	r3, #3
    e79a:	2600      	movs	r6, #0
    e79c:	469a      	mov	sl, r3
    e79e:	e7b9      	b.n	e714 <__aeabi_fmul+0x30>
    e7a0:	20ff      	movs	r0, #255	; 0xff
    e7a2:	2202      	movs	r2, #2
    e7a4:	2d00      	cmp	r5, #0
    e7a6:	d0c5      	beq.n	e734 <__aeabi_fmul+0x50>
    e7a8:	2203      	movs	r2, #3
    e7aa:	e7c3      	b.n	e734 <__aeabi_fmul+0x50>
    e7ac:	2d00      	cmp	r5, #0
    e7ae:	d119      	bne.n	e7e4 <__aeabi_fmul+0x100>
    e7b0:	2000      	movs	r0, #0
    e7b2:	2201      	movs	r2, #1
    e7b4:	e7be      	b.n	e734 <__aeabi_fmul+0x50>
    e7b6:	2401      	movs	r4, #1
    e7b8:	22ff      	movs	r2, #255	; 0xff
    e7ba:	400c      	ands	r4, r1
    e7bc:	2000      	movs	r0, #0
    e7be:	e7db      	b.n	e778 <__aeabi_fmul+0x94>
    e7c0:	0038      	movs	r0, r7
    e7c2:	f001 fef9 	bl	105b8 <__clzsi2>
    e7c6:	2676      	movs	r6, #118	; 0x76
    e7c8:	1f43      	subs	r3, r0, #5
    e7ca:	409f      	lsls	r7, r3
    e7cc:	2300      	movs	r3, #0
    e7ce:	4276      	negs	r6, r6
    e7d0:	1a36      	subs	r6, r6, r0
    e7d2:	4699      	mov	r9, r3
    e7d4:	469a      	mov	sl, r3
    e7d6:	e79d      	b.n	e714 <__aeabi_fmul+0x30>
    e7d8:	230c      	movs	r3, #12
    e7da:	4699      	mov	r9, r3
    e7dc:	3b09      	subs	r3, #9
    e7de:	26ff      	movs	r6, #255	; 0xff
    e7e0:	469a      	mov	sl, r3
    e7e2:	e797      	b.n	e714 <__aeabi_fmul+0x30>
    e7e4:	0028      	movs	r0, r5
    e7e6:	f001 fee7 	bl	105b8 <__clzsi2>
    e7ea:	1f43      	subs	r3, r0, #5
    e7ec:	409d      	lsls	r5, r3
    e7ee:	2376      	movs	r3, #118	; 0x76
    e7f0:	425b      	negs	r3, r3
    e7f2:	1a18      	subs	r0, r3, r0
    e7f4:	2200      	movs	r2, #0
    e7f6:	e79d      	b.n	e734 <__aeabi_fmul+0x50>
    e7f8:	2080      	movs	r0, #128	; 0x80
    e7fa:	2400      	movs	r4, #0
    e7fc:	03c0      	lsls	r0, r0, #15
    e7fe:	22ff      	movs	r2, #255	; 0xff
    e800:	e7ba      	b.n	e778 <__aeabi_fmul+0x94>
    e802:	003d      	movs	r5, r7
    e804:	4652      	mov	r2, sl
    e806:	e7ab      	b.n	e760 <__aeabi_fmul+0x7c>
    e808:	003d      	movs	r5, r7
    e80a:	0021      	movs	r1, r4
    e80c:	4652      	mov	r2, sl
    e80e:	e7a7      	b.n	e760 <__aeabi_fmul+0x7c>
    e810:	0c3b      	lsrs	r3, r7, #16
    e812:	469c      	mov	ip, r3
    e814:	042a      	lsls	r2, r5, #16
    e816:	0c12      	lsrs	r2, r2, #16
    e818:	0c2b      	lsrs	r3, r5, #16
    e81a:	0014      	movs	r4, r2
    e81c:	4660      	mov	r0, ip
    e81e:	4665      	mov	r5, ip
    e820:	043f      	lsls	r7, r7, #16
    e822:	0c3f      	lsrs	r7, r7, #16
    e824:	437c      	muls	r4, r7
    e826:	4342      	muls	r2, r0
    e828:	435d      	muls	r5, r3
    e82a:	437b      	muls	r3, r7
    e82c:	0c27      	lsrs	r7, r4, #16
    e82e:	189b      	adds	r3, r3, r2
    e830:	18ff      	adds	r7, r7, r3
    e832:	42ba      	cmp	r2, r7
    e834:	d903      	bls.n	e83e <__aeabi_fmul+0x15a>
    e836:	2380      	movs	r3, #128	; 0x80
    e838:	025b      	lsls	r3, r3, #9
    e83a:	469c      	mov	ip, r3
    e83c:	4465      	add	r5, ip
    e83e:	0424      	lsls	r4, r4, #16
    e840:	043a      	lsls	r2, r7, #16
    e842:	0c24      	lsrs	r4, r4, #16
    e844:	1912      	adds	r2, r2, r4
    e846:	0193      	lsls	r3, r2, #6
    e848:	1e5c      	subs	r4, r3, #1
    e84a:	41a3      	sbcs	r3, r4
    e84c:	0c3f      	lsrs	r7, r7, #16
    e84e:	0e92      	lsrs	r2, r2, #26
    e850:	197d      	adds	r5, r7, r5
    e852:	431a      	orrs	r2, r3
    e854:	01ad      	lsls	r5, r5, #6
    e856:	4315      	orrs	r5, r2
    e858:	012b      	lsls	r3, r5, #4
    e85a:	d504      	bpl.n	e866 <__aeabi_fmul+0x182>
    e85c:	2301      	movs	r3, #1
    e85e:	465e      	mov	r6, fp
    e860:	086a      	lsrs	r2, r5, #1
    e862:	401d      	ands	r5, r3
    e864:	4315      	orrs	r5, r2
    e866:	0032      	movs	r2, r6
    e868:	327f      	adds	r2, #127	; 0x7f
    e86a:	2a00      	cmp	r2, #0
    e86c:	dd25      	ble.n	e8ba <__aeabi_fmul+0x1d6>
    e86e:	076b      	lsls	r3, r5, #29
    e870:	d004      	beq.n	e87c <__aeabi_fmul+0x198>
    e872:	230f      	movs	r3, #15
    e874:	402b      	ands	r3, r5
    e876:	2b04      	cmp	r3, #4
    e878:	d000      	beq.n	e87c <__aeabi_fmul+0x198>
    e87a:	3504      	adds	r5, #4
    e87c:	012b      	lsls	r3, r5, #4
    e87e:	d503      	bpl.n	e888 <__aeabi_fmul+0x1a4>
    e880:	0032      	movs	r2, r6
    e882:	4b27      	ldr	r3, [pc, #156]	; (e920 <__aeabi_fmul+0x23c>)
    e884:	3280      	adds	r2, #128	; 0x80
    e886:	401d      	ands	r5, r3
    e888:	2afe      	cmp	r2, #254	; 0xfe
    e88a:	dc94      	bgt.n	e7b6 <__aeabi_fmul+0xd2>
    e88c:	2401      	movs	r4, #1
    e88e:	01a8      	lsls	r0, r5, #6
    e890:	0a40      	lsrs	r0, r0, #9
    e892:	b2d2      	uxtb	r2, r2
    e894:	400c      	ands	r4, r1
    e896:	e76f      	b.n	e778 <__aeabi_fmul+0x94>
    e898:	2080      	movs	r0, #128	; 0x80
    e89a:	03c0      	lsls	r0, r0, #15
    e89c:	4207      	tst	r7, r0
    e89e:	d007      	beq.n	e8b0 <__aeabi_fmul+0x1cc>
    e8a0:	4205      	tst	r5, r0
    e8a2:	d105      	bne.n	e8b0 <__aeabi_fmul+0x1cc>
    e8a4:	4328      	orrs	r0, r5
    e8a6:	0240      	lsls	r0, r0, #9
    e8a8:	0a40      	lsrs	r0, r0, #9
    e8aa:	4644      	mov	r4, r8
    e8ac:	22ff      	movs	r2, #255	; 0xff
    e8ae:	e763      	b.n	e778 <__aeabi_fmul+0x94>
    e8b0:	4338      	orrs	r0, r7
    e8b2:	0240      	lsls	r0, r0, #9
    e8b4:	0a40      	lsrs	r0, r0, #9
    e8b6:	22ff      	movs	r2, #255	; 0xff
    e8b8:	e75e      	b.n	e778 <__aeabi_fmul+0x94>
    e8ba:	2401      	movs	r4, #1
    e8bc:	1aa3      	subs	r3, r4, r2
    e8be:	2b1b      	cmp	r3, #27
    e8c0:	dd05      	ble.n	e8ce <__aeabi_fmul+0x1ea>
    e8c2:	400c      	ands	r4, r1
    e8c4:	2200      	movs	r2, #0
    e8c6:	2000      	movs	r0, #0
    e8c8:	e756      	b.n	e778 <__aeabi_fmul+0x94>
    e8ca:	465e      	mov	r6, fp
    e8cc:	e7cb      	b.n	e866 <__aeabi_fmul+0x182>
    e8ce:	002a      	movs	r2, r5
    e8d0:	2020      	movs	r0, #32
    e8d2:	40da      	lsrs	r2, r3
    e8d4:	1ac3      	subs	r3, r0, r3
    e8d6:	409d      	lsls	r5, r3
    e8d8:	002b      	movs	r3, r5
    e8da:	1e5d      	subs	r5, r3, #1
    e8dc:	41ab      	sbcs	r3, r5
    e8de:	4313      	orrs	r3, r2
    e8e0:	075a      	lsls	r2, r3, #29
    e8e2:	d004      	beq.n	e8ee <__aeabi_fmul+0x20a>
    e8e4:	220f      	movs	r2, #15
    e8e6:	401a      	ands	r2, r3
    e8e8:	2a04      	cmp	r2, #4
    e8ea:	d000      	beq.n	e8ee <__aeabi_fmul+0x20a>
    e8ec:	3304      	adds	r3, #4
    e8ee:	015a      	lsls	r2, r3, #5
    e8f0:	d504      	bpl.n	e8fc <__aeabi_fmul+0x218>
    e8f2:	2401      	movs	r4, #1
    e8f4:	2201      	movs	r2, #1
    e8f6:	400c      	ands	r4, r1
    e8f8:	2000      	movs	r0, #0
    e8fa:	e73d      	b.n	e778 <__aeabi_fmul+0x94>
    e8fc:	2401      	movs	r4, #1
    e8fe:	019b      	lsls	r3, r3, #6
    e900:	0a58      	lsrs	r0, r3, #9
    e902:	400c      	ands	r4, r1
    e904:	2200      	movs	r2, #0
    e906:	e737      	b.n	e778 <__aeabi_fmul+0x94>
    e908:	2080      	movs	r0, #128	; 0x80
    e90a:	2401      	movs	r4, #1
    e90c:	03c0      	lsls	r0, r0, #15
    e90e:	4328      	orrs	r0, r5
    e910:	0240      	lsls	r0, r0, #9
    e912:	0a40      	lsrs	r0, r0, #9
    e914:	400c      	ands	r4, r1
    e916:	22ff      	movs	r2, #255	; 0xff
    e918:	e72e      	b.n	e778 <__aeabi_fmul+0x94>
    e91a:	46c0      	nop			; (mov r8, r8)
    e91c:	00012d58 	.word	0x00012d58
    e920:	f7ffffff 	.word	0xf7ffffff

0000e924 <__aeabi_i2f>:
    e924:	b570      	push	{r4, r5, r6, lr}
    e926:	2800      	cmp	r0, #0
    e928:	d030      	beq.n	e98c <__aeabi_i2f+0x68>
    e92a:	17c3      	asrs	r3, r0, #31
    e92c:	18c4      	adds	r4, r0, r3
    e92e:	405c      	eors	r4, r3
    e930:	0fc5      	lsrs	r5, r0, #31
    e932:	0020      	movs	r0, r4
    e934:	f001 fe40 	bl	105b8 <__clzsi2>
    e938:	239e      	movs	r3, #158	; 0x9e
    e93a:	1a1b      	subs	r3, r3, r0
    e93c:	2b96      	cmp	r3, #150	; 0x96
    e93e:	dc0d      	bgt.n	e95c <__aeabi_i2f+0x38>
    e940:	2296      	movs	r2, #150	; 0x96
    e942:	1ad2      	subs	r2, r2, r3
    e944:	4094      	lsls	r4, r2
    e946:	002a      	movs	r2, r5
    e948:	0264      	lsls	r4, r4, #9
    e94a:	0a64      	lsrs	r4, r4, #9
    e94c:	b2db      	uxtb	r3, r3
    e94e:	0264      	lsls	r4, r4, #9
    e950:	05db      	lsls	r3, r3, #23
    e952:	0a60      	lsrs	r0, r4, #9
    e954:	07d2      	lsls	r2, r2, #31
    e956:	4318      	orrs	r0, r3
    e958:	4310      	orrs	r0, r2
    e95a:	bd70      	pop	{r4, r5, r6, pc}
    e95c:	2b99      	cmp	r3, #153	; 0x99
    e95e:	dc19      	bgt.n	e994 <__aeabi_i2f+0x70>
    e960:	2299      	movs	r2, #153	; 0x99
    e962:	1ad2      	subs	r2, r2, r3
    e964:	2a00      	cmp	r2, #0
    e966:	dd29      	ble.n	e9bc <__aeabi_i2f+0x98>
    e968:	4094      	lsls	r4, r2
    e96a:	0022      	movs	r2, r4
    e96c:	4c14      	ldr	r4, [pc, #80]	; (e9c0 <__aeabi_i2f+0x9c>)
    e96e:	4014      	ands	r4, r2
    e970:	0751      	lsls	r1, r2, #29
    e972:	d004      	beq.n	e97e <__aeabi_i2f+0x5a>
    e974:	210f      	movs	r1, #15
    e976:	400a      	ands	r2, r1
    e978:	2a04      	cmp	r2, #4
    e97a:	d000      	beq.n	e97e <__aeabi_i2f+0x5a>
    e97c:	3404      	adds	r4, #4
    e97e:	0162      	lsls	r2, r4, #5
    e980:	d413      	bmi.n	e9aa <__aeabi_i2f+0x86>
    e982:	01a4      	lsls	r4, r4, #6
    e984:	0a64      	lsrs	r4, r4, #9
    e986:	b2db      	uxtb	r3, r3
    e988:	002a      	movs	r2, r5
    e98a:	e7e0      	b.n	e94e <__aeabi_i2f+0x2a>
    e98c:	2200      	movs	r2, #0
    e98e:	2300      	movs	r3, #0
    e990:	2400      	movs	r4, #0
    e992:	e7dc      	b.n	e94e <__aeabi_i2f+0x2a>
    e994:	2205      	movs	r2, #5
    e996:	0021      	movs	r1, r4
    e998:	1a12      	subs	r2, r2, r0
    e99a:	40d1      	lsrs	r1, r2
    e99c:	22b9      	movs	r2, #185	; 0xb9
    e99e:	1ad2      	subs	r2, r2, r3
    e9a0:	4094      	lsls	r4, r2
    e9a2:	1e62      	subs	r2, r4, #1
    e9a4:	4194      	sbcs	r4, r2
    e9a6:	430c      	orrs	r4, r1
    e9a8:	e7da      	b.n	e960 <__aeabi_i2f+0x3c>
    e9aa:	4b05      	ldr	r3, [pc, #20]	; (e9c0 <__aeabi_i2f+0x9c>)
    e9ac:	002a      	movs	r2, r5
    e9ae:	401c      	ands	r4, r3
    e9b0:	239f      	movs	r3, #159	; 0x9f
    e9b2:	01a4      	lsls	r4, r4, #6
    e9b4:	1a1b      	subs	r3, r3, r0
    e9b6:	0a64      	lsrs	r4, r4, #9
    e9b8:	b2db      	uxtb	r3, r3
    e9ba:	e7c8      	b.n	e94e <__aeabi_i2f+0x2a>
    e9bc:	0022      	movs	r2, r4
    e9be:	e7d5      	b.n	e96c <__aeabi_i2f+0x48>
    e9c0:	fbffffff 	.word	0xfbffffff

0000e9c4 <__aeabi_dadd>:
    e9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9c6:	4645      	mov	r5, r8
    e9c8:	46de      	mov	lr, fp
    e9ca:	4657      	mov	r7, sl
    e9cc:	464e      	mov	r6, r9
    e9ce:	030c      	lsls	r4, r1, #12
    e9d0:	b5e0      	push	{r5, r6, r7, lr}
    e9d2:	004e      	lsls	r6, r1, #1
    e9d4:	0fc9      	lsrs	r1, r1, #31
    e9d6:	4688      	mov	r8, r1
    e9d8:	000d      	movs	r5, r1
    e9da:	0a61      	lsrs	r1, r4, #9
    e9dc:	0f44      	lsrs	r4, r0, #29
    e9de:	430c      	orrs	r4, r1
    e9e0:	00c7      	lsls	r7, r0, #3
    e9e2:	0319      	lsls	r1, r3, #12
    e9e4:	0058      	lsls	r0, r3, #1
    e9e6:	0fdb      	lsrs	r3, r3, #31
    e9e8:	469b      	mov	fp, r3
    e9ea:	0a4b      	lsrs	r3, r1, #9
    e9ec:	0f51      	lsrs	r1, r2, #29
    e9ee:	430b      	orrs	r3, r1
    e9f0:	0d76      	lsrs	r6, r6, #21
    e9f2:	0d40      	lsrs	r0, r0, #21
    e9f4:	0019      	movs	r1, r3
    e9f6:	00d2      	lsls	r2, r2, #3
    e9f8:	45d8      	cmp	r8, fp
    e9fa:	d100      	bne.n	e9fe <__aeabi_dadd+0x3a>
    e9fc:	e0ae      	b.n	eb5c <__aeabi_dadd+0x198>
    e9fe:	1a35      	subs	r5, r6, r0
    ea00:	2d00      	cmp	r5, #0
    ea02:	dc00      	bgt.n	ea06 <__aeabi_dadd+0x42>
    ea04:	e0f6      	b.n	ebf4 <__aeabi_dadd+0x230>
    ea06:	2800      	cmp	r0, #0
    ea08:	d10f      	bne.n	ea2a <__aeabi_dadd+0x66>
    ea0a:	4313      	orrs	r3, r2
    ea0c:	d100      	bne.n	ea10 <__aeabi_dadd+0x4c>
    ea0e:	e0db      	b.n	ebc8 <__aeabi_dadd+0x204>
    ea10:	1e6b      	subs	r3, r5, #1
    ea12:	2b00      	cmp	r3, #0
    ea14:	d000      	beq.n	ea18 <__aeabi_dadd+0x54>
    ea16:	e137      	b.n	ec88 <__aeabi_dadd+0x2c4>
    ea18:	1aba      	subs	r2, r7, r2
    ea1a:	4297      	cmp	r7, r2
    ea1c:	41bf      	sbcs	r7, r7
    ea1e:	1a64      	subs	r4, r4, r1
    ea20:	427f      	negs	r7, r7
    ea22:	1be4      	subs	r4, r4, r7
    ea24:	2601      	movs	r6, #1
    ea26:	0017      	movs	r7, r2
    ea28:	e024      	b.n	ea74 <__aeabi_dadd+0xb0>
    ea2a:	4bc6      	ldr	r3, [pc, #792]	; (ed44 <__aeabi_dadd+0x380>)
    ea2c:	429e      	cmp	r6, r3
    ea2e:	d04d      	beq.n	eacc <__aeabi_dadd+0x108>
    ea30:	2380      	movs	r3, #128	; 0x80
    ea32:	041b      	lsls	r3, r3, #16
    ea34:	4319      	orrs	r1, r3
    ea36:	2d38      	cmp	r5, #56	; 0x38
    ea38:	dd00      	ble.n	ea3c <__aeabi_dadd+0x78>
    ea3a:	e107      	b.n	ec4c <__aeabi_dadd+0x288>
    ea3c:	2d1f      	cmp	r5, #31
    ea3e:	dd00      	ble.n	ea42 <__aeabi_dadd+0x7e>
    ea40:	e138      	b.n	ecb4 <__aeabi_dadd+0x2f0>
    ea42:	2020      	movs	r0, #32
    ea44:	1b43      	subs	r3, r0, r5
    ea46:	469a      	mov	sl, r3
    ea48:	000b      	movs	r3, r1
    ea4a:	4650      	mov	r0, sl
    ea4c:	4083      	lsls	r3, r0
    ea4e:	4699      	mov	r9, r3
    ea50:	0013      	movs	r3, r2
    ea52:	4648      	mov	r0, r9
    ea54:	40eb      	lsrs	r3, r5
    ea56:	4318      	orrs	r0, r3
    ea58:	0003      	movs	r3, r0
    ea5a:	4650      	mov	r0, sl
    ea5c:	4082      	lsls	r2, r0
    ea5e:	1e50      	subs	r0, r2, #1
    ea60:	4182      	sbcs	r2, r0
    ea62:	40e9      	lsrs	r1, r5
    ea64:	431a      	orrs	r2, r3
    ea66:	1aba      	subs	r2, r7, r2
    ea68:	1a61      	subs	r1, r4, r1
    ea6a:	4297      	cmp	r7, r2
    ea6c:	41a4      	sbcs	r4, r4
    ea6e:	0017      	movs	r7, r2
    ea70:	4264      	negs	r4, r4
    ea72:	1b0c      	subs	r4, r1, r4
    ea74:	0223      	lsls	r3, r4, #8
    ea76:	d562      	bpl.n	eb3e <__aeabi_dadd+0x17a>
    ea78:	0264      	lsls	r4, r4, #9
    ea7a:	0a65      	lsrs	r5, r4, #9
    ea7c:	2d00      	cmp	r5, #0
    ea7e:	d100      	bne.n	ea82 <__aeabi_dadd+0xbe>
    ea80:	e0df      	b.n	ec42 <__aeabi_dadd+0x27e>
    ea82:	0028      	movs	r0, r5
    ea84:	f001 fd98 	bl	105b8 <__clzsi2>
    ea88:	0003      	movs	r3, r0
    ea8a:	3b08      	subs	r3, #8
    ea8c:	2b1f      	cmp	r3, #31
    ea8e:	dd00      	ble.n	ea92 <__aeabi_dadd+0xce>
    ea90:	e0d2      	b.n	ec38 <__aeabi_dadd+0x274>
    ea92:	2220      	movs	r2, #32
    ea94:	003c      	movs	r4, r7
    ea96:	1ad2      	subs	r2, r2, r3
    ea98:	409d      	lsls	r5, r3
    ea9a:	40d4      	lsrs	r4, r2
    ea9c:	409f      	lsls	r7, r3
    ea9e:	4325      	orrs	r5, r4
    eaa0:	429e      	cmp	r6, r3
    eaa2:	dd00      	ble.n	eaa6 <__aeabi_dadd+0xe2>
    eaa4:	e0c4      	b.n	ec30 <__aeabi_dadd+0x26c>
    eaa6:	1b9e      	subs	r6, r3, r6
    eaa8:	1c73      	adds	r3, r6, #1
    eaaa:	2b1f      	cmp	r3, #31
    eaac:	dd00      	ble.n	eab0 <__aeabi_dadd+0xec>
    eaae:	e0f1      	b.n	ec94 <__aeabi_dadd+0x2d0>
    eab0:	2220      	movs	r2, #32
    eab2:	0038      	movs	r0, r7
    eab4:	0029      	movs	r1, r5
    eab6:	1ad2      	subs	r2, r2, r3
    eab8:	40d8      	lsrs	r0, r3
    eaba:	4091      	lsls	r1, r2
    eabc:	4097      	lsls	r7, r2
    eabe:	002c      	movs	r4, r5
    eac0:	4301      	orrs	r1, r0
    eac2:	1e78      	subs	r0, r7, #1
    eac4:	4187      	sbcs	r7, r0
    eac6:	40dc      	lsrs	r4, r3
    eac8:	2600      	movs	r6, #0
    eaca:	430f      	orrs	r7, r1
    eacc:	077b      	lsls	r3, r7, #29
    eace:	d009      	beq.n	eae4 <__aeabi_dadd+0x120>
    ead0:	230f      	movs	r3, #15
    ead2:	403b      	ands	r3, r7
    ead4:	2b04      	cmp	r3, #4
    ead6:	d005      	beq.n	eae4 <__aeabi_dadd+0x120>
    ead8:	1d3b      	adds	r3, r7, #4
    eada:	42bb      	cmp	r3, r7
    eadc:	41bf      	sbcs	r7, r7
    eade:	427f      	negs	r7, r7
    eae0:	19e4      	adds	r4, r4, r7
    eae2:	001f      	movs	r7, r3
    eae4:	0223      	lsls	r3, r4, #8
    eae6:	d52c      	bpl.n	eb42 <__aeabi_dadd+0x17e>
    eae8:	4b96      	ldr	r3, [pc, #600]	; (ed44 <__aeabi_dadd+0x380>)
    eaea:	3601      	adds	r6, #1
    eaec:	429e      	cmp	r6, r3
    eaee:	d100      	bne.n	eaf2 <__aeabi_dadd+0x12e>
    eaf0:	e09a      	b.n	ec28 <__aeabi_dadd+0x264>
    eaf2:	4645      	mov	r5, r8
    eaf4:	4b94      	ldr	r3, [pc, #592]	; (ed48 <__aeabi_dadd+0x384>)
    eaf6:	08ff      	lsrs	r7, r7, #3
    eaf8:	401c      	ands	r4, r3
    eafa:	0760      	lsls	r0, r4, #29
    eafc:	0576      	lsls	r6, r6, #21
    eafe:	0264      	lsls	r4, r4, #9
    eb00:	4307      	orrs	r7, r0
    eb02:	0b24      	lsrs	r4, r4, #12
    eb04:	0d76      	lsrs	r6, r6, #21
    eb06:	2100      	movs	r1, #0
    eb08:	0324      	lsls	r4, r4, #12
    eb0a:	0b23      	lsrs	r3, r4, #12
    eb0c:	0d0c      	lsrs	r4, r1, #20
    eb0e:	4a8f      	ldr	r2, [pc, #572]	; (ed4c <__aeabi_dadd+0x388>)
    eb10:	0524      	lsls	r4, r4, #20
    eb12:	431c      	orrs	r4, r3
    eb14:	4014      	ands	r4, r2
    eb16:	0533      	lsls	r3, r6, #20
    eb18:	4323      	orrs	r3, r4
    eb1a:	005b      	lsls	r3, r3, #1
    eb1c:	07ed      	lsls	r5, r5, #31
    eb1e:	085b      	lsrs	r3, r3, #1
    eb20:	432b      	orrs	r3, r5
    eb22:	0038      	movs	r0, r7
    eb24:	0019      	movs	r1, r3
    eb26:	bc3c      	pop	{r2, r3, r4, r5}
    eb28:	4690      	mov	r8, r2
    eb2a:	4699      	mov	r9, r3
    eb2c:	46a2      	mov	sl, r4
    eb2e:	46ab      	mov	fp, r5
    eb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb32:	4664      	mov	r4, ip
    eb34:	4304      	orrs	r4, r0
    eb36:	d100      	bne.n	eb3a <__aeabi_dadd+0x176>
    eb38:	e211      	b.n	ef5e <__aeabi_dadd+0x59a>
    eb3a:	0004      	movs	r4, r0
    eb3c:	4667      	mov	r7, ip
    eb3e:	077b      	lsls	r3, r7, #29
    eb40:	d1c6      	bne.n	ead0 <__aeabi_dadd+0x10c>
    eb42:	4645      	mov	r5, r8
    eb44:	0760      	lsls	r0, r4, #29
    eb46:	08ff      	lsrs	r7, r7, #3
    eb48:	4307      	orrs	r7, r0
    eb4a:	08e4      	lsrs	r4, r4, #3
    eb4c:	4b7d      	ldr	r3, [pc, #500]	; (ed44 <__aeabi_dadd+0x380>)
    eb4e:	429e      	cmp	r6, r3
    eb50:	d030      	beq.n	ebb4 <__aeabi_dadd+0x1f0>
    eb52:	0324      	lsls	r4, r4, #12
    eb54:	0576      	lsls	r6, r6, #21
    eb56:	0b24      	lsrs	r4, r4, #12
    eb58:	0d76      	lsrs	r6, r6, #21
    eb5a:	e7d4      	b.n	eb06 <__aeabi_dadd+0x142>
    eb5c:	1a33      	subs	r3, r6, r0
    eb5e:	469a      	mov	sl, r3
    eb60:	2b00      	cmp	r3, #0
    eb62:	dd78      	ble.n	ec56 <__aeabi_dadd+0x292>
    eb64:	2800      	cmp	r0, #0
    eb66:	d031      	beq.n	ebcc <__aeabi_dadd+0x208>
    eb68:	4876      	ldr	r0, [pc, #472]	; (ed44 <__aeabi_dadd+0x380>)
    eb6a:	4286      	cmp	r6, r0
    eb6c:	d0ae      	beq.n	eacc <__aeabi_dadd+0x108>
    eb6e:	2080      	movs	r0, #128	; 0x80
    eb70:	0400      	lsls	r0, r0, #16
    eb72:	4301      	orrs	r1, r0
    eb74:	4653      	mov	r3, sl
    eb76:	2b38      	cmp	r3, #56	; 0x38
    eb78:	dc00      	bgt.n	eb7c <__aeabi_dadd+0x1b8>
    eb7a:	e0e9      	b.n	ed50 <__aeabi_dadd+0x38c>
    eb7c:	430a      	orrs	r2, r1
    eb7e:	1e51      	subs	r1, r2, #1
    eb80:	418a      	sbcs	r2, r1
    eb82:	2100      	movs	r1, #0
    eb84:	19d2      	adds	r2, r2, r7
    eb86:	42ba      	cmp	r2, r7
    eb88:	41bf      	sbcs	r7, r7
    eb8a:	1909      	adds	r1, r1, r4
    eb8c:	427c      	negs	r4, r7
    eb8e:	0017      	movs	r7, r2
    eb90:	190c      	adds	r4, r1, r4
    eb92:	0223      	lsls	r3, r4, #8
    eb94:	d5d3      	bpl.n	eb3e <__aeabi_dadd+0x17a>
    eb96:	4b6b      	ldr	r3, [pc, #428]	; (ed44 <__aeabi_dadd+0x380>)
    eb98:	3601      	adds	r6, #1
    eb9a:	429e      	cmp	r6, r3
    eb9c:	d100      	bne.n	eba0 <__aeabi_dadd+0x1dc>
    eb9e:	e13a      	b.n	ee16 <__aeabi_dadd+0x452>
    eba0:	2001      	movs	r0, #1
    eba2:	4b69      	ldr	r3, [pc, #420]	; (ed48 <__aeabi_dadd+0x384>)
    eba4:	401c      	ands	r4, r3
    eba6:	087b      	lsrs	r3, r7, #1
    eba8:	4007      	ands	r7, r0
    ebaa:	431f      	orrs	r7, r3
    ebac:	07e0      	lsls	r0, r4, #31
    ebae:	4307      	orrs	r7, r0
    ebb0:	0864      	lsrs	r4, r4, #1
    ebb2:	e78b      	b.n	eacc <__aeabi_dadd+0x108>
    ebb4:	0023      	movs	r3, r4
    ebb6:	433b      	orrs	r3, r7
    ebb8:	d100      	bne.n	ebbc <__aeabi_dadd+0x1f8>
    ebba:	e1cb      	b.n	ef54 <__aeabi_dadd+0x590>
    ebbc:	2280      	movs	r2, #128	; 0x80
    ebbe:	0312      	lsls	r2, r2, #12
    ebc0:	4314      	orrs	r4, r2
    ebc2:	0324      	lsls	r4, r4, #12
    ebc4:	0b24      	lsrs	r4, r4, #12
    ebc6:	e79e      	b.n	eb06 <__aeabi_dadd+0x142>
    ebc8:	002e      	movs	r6, r5
    ebca:	e77f      	b.n	eacc <__aeabi_dadd+0x108>
    ebcc:	0008      	movs	r0, r1
    ebce:	4310      	orrs	r0, r2
    ebd0:	d100      	bne.n	ebd4 <__aeabi_dadd+0x210>
    ebd2:	e0b4      	b.n	ed3e <__aeabi_dadd+0x37a>
    ebd4:	1e58      	subs	r0, r3, #1
    ebd6:	2800      	cmp	r0, #0
    ebd8:	d000      	beq.n	ebdc <__aeabi_dadd+0x218>
    ebda:	e0de      	b.n	ed9a <__aeabi_dadd+0x3d6>
    ebdc:	18ba      	adds	r2, r7, r2
    ebde:	42ba      	cmp	r2, r7
    ebe0:	419b      	sbcs	r3, r3
    ebe2:	1864      	adds	r4, r4, r1
    ebe4:	425b      	negs	r3, r3
    ebe6:	18e4      	adds	r4, r4, r3
    ebe8:	0017      	movs	r7, r2
    ebea:	2601      	movs	r6, #1
    ebec:	0223      	lsls	r3, r4, #8
    ebee:	d5a6      	bpl.n	eb3e <__aeabi_dadd+0x17a>
    ebf0:	2602      	movs	r6, #2
    ebf2:	e7d5      	b.n	eba0 <__aeabi_dadd+0x1dc>
    ebf4:	2d00      	cmp	r5, #0
    ebf6:	d16e      	bne.n	ecd6 <__aeabi_dadd+0x312>
    ebf8:	1c70      	adds	r0, r6, #1
    ebfa:	0540      	lsls	r0, r0, #21
    ebfc:	0d40      	lsrs	r0, r0, #21
    ebfe:	2801      	cmp	r0, #1
    ec00:	dc00      	bgt.n	ec04 <__aeabi_dadd+0x240>
    ec02:	e0f9      	b.n	edf8 <__aeabi_dadd+0x434>
    ec04:	1ab8      	subs	r0, r7, r2
    ec06:	4684      	mov	ip, r0
    ec08:	4287      	cmp	r7, r0
    ec0a:	4180      	sbcs	r0, r0
    ec0c:	1ae5      	subs	r5, r4, r3
    ec0e:	4240      	negs	r0, r0
    ec10:	1a2d      	subs	r5, r5, r0
    ec12:	0228      	lsls	r0, r5, #8
    ec14:	d400      	bmi.n	ec18 <__aeabi_dadd+0x254>
    ec16:	e089      	b.n	ed2c <__aeabi_dadd+0x368>
    ec18:	1bd7      	subs	r7, r2, r7
    ec1a:	42ba      	cmp	r2, r7
    ec1c:	4192      	sbcs	r2, r2
    ec1e:	1b1c      	subs	r4, r3, r4
    ec20:	4252      	negs	r2, r2
    ec22:	1aa5      	subs	r5, r4, r2
    ec24:	46d8      	mov	r8, fp
    ec26:	e729      	b.n	ea7c <__aeabi_dadd+0xb8>
    ec28:	4645      	mov	r5, r8
    ec2a:	2400      	movs	r4, #0
    ec2c:	2700      	movs	r7, #0
    ec2e:	e76a      	b.n	eb06 <__aeabi_dadd+0x142>
    ec30:	4c45      	ldr	r4, [pc, #276]	; (ed48 <__aeabi_dadd+0x384>)
    ec32:	1af6      	subs	r6, r6, r3
    ec34:	402c      	ands	r4, r5
    ec36:	e749      	b.n	eacc <__aeabi_dadd+0x108>
    ec38:	003d      	movs	r5, r7
    ec3a:	3828      	subs	r0, #40	; 0x28
    ec3c:	4085      	lsls	r5, r0
    ec3e:	2700      	movs	r7, #0
    ec40:	e72e      	b.n	eaa0 <__aeabi_dadd+0xdc>
    ec42:	0038      	movs	r0, r7
    ec44:	f001 fcb8 	bl	105b8 <__clzsi2>
    ec48:	3020      	adds	r0, #32
    ec4a:	e71d      	b.n	ea88 <__aeabi_dadd+0xc4>
    ec4c:	430a      	orrs	r2, r1
    ec4e:	1e51      	subs	r1, r2, #1
    ec50:	418a      	sbcs	r2, r1
    ec52:	2100      	movs	r1, #0
    ec54:	e707      	b.n	ea66 <__aeabi_dadd+0xa2>
    ec56:	2b00      	cmp	r3, #0
    ec58:	d000      	beq.n	ec5c <__aeabi_dadd+0x298>
    ec5a:	e0f3      	b.n	ee44 <__aeabi_dadd+0x480>
    ec5c:	1c70      	adds	r0, r6, #1
    ec5e:	0543      	lsls	r3, r0, #21
    ec60:	0d5b      	lsrs	r3, r3, #21
    ec62:	2b01      	cmp	r3, #1
    ec64:	dc00      	bgt.n	ec68 <__aeabi_dadd+0x2a4>
    ec66:	e0ad      	b.n	edc4 <__aeabi_dadd+0x400>
    ec68:	4b36      	ldr	r3, [pc, #216]	; (ed44 <__aeabi_dadd+0x380>)
    ec6a:	4298      	cmp	r0, r3
    ec6c:	d100      	bne.n	ec70 <__aeabi_dadd+0x2ac>
    ec6e:	e0d1      	b.n	ee14 <__aeabi_dadd+0x450>
    ec70:	18ba      	adds	r2, r7, r2
    ec72:	42ba      	cmp	r2, r7
    ec74:	41bf      	sbcs	r7, r7
    ec76:	1864      	adds	r4, r4, r1
    ec78:	427f      	negs	r7, r7
    ec7a:	19e4      	adds	r4, r4, r7
    ec7c:	07e7      	lsls	r7, r4, #31
    ec7e:	0852      	lsrs	r2, r2, #1
    ec80:	4317      	orrs	r7, r2
    ec82:	0864      	lsrs	r4, r4, #1
    ec84:	0006      	movs	r6, r0
    ec86:	e721      	b.n	eacc <__aeabi_dadd+0x108>
    ec88:	482e      	ldr	r0, [pc, #184]	; (ed44 <__aeabi_dadd+0x380>)
    ec8a:	4285      	cmp	r5, r0
    ec8c:	d100      	bne.n	ec90 <__aeabi_dadd+0x2cc>
    ec8e:	e093      	b.n	edb8 <__aeabi_dadd+0x3f4>
    ec90:	001d      	movs	r5, r3
    ec92:	e6d0      	b.n	ea36 <__aeabi_dadd+0x72>
    ec94:	0029      	movs	r1, r5
    ec96:	3e1f      	subs	r6, #31
    ec98:	40f1      	lsrs	r1, r6
    ec9a:	2b20      	cmp	r3, #32
    ec9c:	d100      	bne.n	eca0 <__aeabi_dadd+0x2dc>
    ec9e:	e08d      	b.n	edbc <__aeabi_dadd+0x3f8>
    eca0:	2240      	movs	r2, #64	; 0x40
    eca2:	1ad3      	subs	r3, r2, r3
    eca4:	409d      	lsls	r5, r3
    eca6:	432f      	orrs	r7, r5
    eca8:	1e7d      	subs	r5, r7, #1
    ecaa:	41af      	sbcs	r7, r5
    ecac:	2400      	movs	r4, #0
    ecae:	430f      	orrs	r7, r1
    ecb0:	2600      	movs	r6, #0
    ecb2:	e744      	b.n	eb3e <__aeabi_dadd+0x17a>
    ecb4:	002b      	movs	r3, r5
    ecb6:	0008      	movs	r0, r1
    ecb8:	3b20      	subs	r3, #32
    ecba:	40d8      	lsrs	r0, r3
    ecbc:	0003      	movs	r3, r0
    ecbe:	2d20      	cmp	r5, #32
    ecc0:	d100      	bne.n	ecc4 <__aeabi_dadd+0x300>
    ecc2:	e07d      	b.n	edc0 <__aeabi_dadd+0x3fc>
    ecc4:	2040      	movs	r0, #64	; 0x40
    ecc6:	1b45      	subs	r5, r0, r5
    ecc8:	40a9      	lsls	r1, r5
    ecca:	430a      	orrs	r2, r1
    eccc:	1e51      	subs	r1, r2, #1
    ecce:	418a      	sbcs	r2, r1
    ecd0:	2100      	movs	r1, #0
    ecd2:	431a      	orrs	r2, r3
    ecd4:	e6c7      	b.n	ea66 <__aeabi_dadd+0xa2>
    ecd6:	2e00      	cmp	r6, #0
    ecd8:	d050      	beq.n	ed7c <__aeabi_dadd+0x3b8>
    ecda:	4e1a      	ldr	r6, [pc, #104]	; (ed44 <__aeabi_dadd+0x380>)
    ecdc:	42b0      	cmp	r0, r6
    ecde:	d057      	beq.n	ed90 <__aeabi_dadd+0x3cc>
    ece0:	2680      	movs	r6, #128	; 0x80
    ece2:	426b      	negs	r3, r5
    ece4:	4699      	mov	r9, r3
    ece6:	0436      	lsls	r6, r6, #16
    ece8:	4334      	orrs	r4, r6
    ecea:	464b      	mov	r3, r9
    ecec:	2b38      	cmp	r3, #56	; 0x38
    ecee:	dd00      	ble.n	ecf2 <__aeabi_dadd+0x32e>
    ecf0:	e0d6      	b.n	eea0 <__aeabi_dadd+0x4dc>
    ecf2:	2b1f      	cmp	r3, #31
    ecf4:	dd00      	ble.n	ecf8 <__aeabi_dadd+0x334>
    ecf6:	e135      	b.n	ef64 <__aeabi_dadd+0x5a0>
    ecf8:	2620      	movs	r6, #32
    ecfa:	1af5      	subs	r5, r6, r3
    ecfc:	0026      	movs	r6, r4
    ecfe:	40ae      	lsls	r6, r5
    ed00:	46b2      	mov	sl, r6
    ed02:	003e      	movs	r6, r7
    ed04:	40de      	lsrs	r6, r3
    ed06:	46ac      	mov	ip, r5
    ed08:	0035      	movs	r5, r6
    ed0a:	4656      	mov	r6, sl
    ed0c:	432e      	orrs	r6, r5
    ed0e:	4665      	mov	r5, ip
    ed10:	40af      	lsls	r7, r5
    ed12:	1e7d      	subs	r5, r7, #1
    ed14:	41af      	sbcs	r7, r5
    ed16:	40dc      	lsrs	r4, r3
    ed18:	4337      	orrs	r7, r6
    ed1a:	1bd7      	subs	r7, r2, r7
    ed1c:	42ba      	cmp	r2, r7
    ed1e:	4192      	sbcs	r2, r2
    ed20:	1b0c      	subs	r4, r1, r4
    ed22:	4252      	negs	r2, r2
    ed24:	1aa4      	subs	r4, r4, r2
    ed26:	0006      	movs	r6, r0
    ed28:	46d8      	mov	r8, fp
    ed2a:	e6a3      	b.n	ea74 <__aeabi_dadd+0xb0>
    ed2c:	4664      	mov	r4, ip
    ed2e:	4667      	mov	r7, ip
    ed30:	432c      	orrs	r4, r5
    ed32:	d000      	beq.n	ed36 <__aeabi_dadd+0x372>
    ed34:	e6a2      	b.n	ea7c <__aeabi_dadd+0xb8>
    ed36:	2500      	movs	r5, #0
    ed38:	2600      	movs	r6, #0
    ed3a:	2700      	movs	r7, #0
    ed3c:	e706      	b.n	eb4c <__aeabi_dadd+0x188>
    ed3e:	001e      	movs	r6, r3
    ed40:	e6c4      	b.n	eacc <__aeabi_dadd+0x108>
    ed42:	46c0      	nop			; (mov r8, r8)
    ed44:	000007ff 	.word	0x000007ff
    ed48:	ff7fffff 	.word	0xff7fffff
    ed4c:	800fffff 	.word	0x800fffff
    ed50:	2b1f      	cmp	r3, #31
    ed52:	dc63      	bgt.n	ee1c <__aeabi_dadd+0x458>
    ed54:	2020      	movs	r0, #32
    ed56:	1ac3      	subs	r3, r0, r3
    ed58:	0008      	movs	r0, r1
    ed5a:	4098      	lsls	r0, r3
    ed5c:	469c      	mov	ip, r3
    ed5e:	4683      	mov	fp, r0
    ed60:	4653      	mov	r3, sl
    ed62:	0010      	movs	r0, r2
    ed64:	40d8      	lsrs	r0, r3
    ed66:	0003      	movs	r3, r0
    ed68:	4658      	mov	r0, fp
    ed6a:	4318      	orrs	r0, r3
    ed6c:	4663      	mov	r3, ip
    ed6e:	409a      	lsls	r2, r3
    ed70:	1e53      	subs	r3, r2, #1
    ed72:	419a      	sbcs	r2, r3
    ed74:	4653      	mov	r3, sl
    ed76:	4302      	orrs	r2, r0
    ed78:	40d9      	lsrs	r1, r3
    ed7a:	e703      	b.n	eb84 <__aeabi_dadd+0x1c0>
    ed7c:	0026      	movs	r6, r4
    ed7e:	433e      	orrs	r6, r7
    ed80:	d006      	beq.n	ed90 <__aeabi_dadd+0x3cc>
    ed82:	43eb      	mvns	r3, r5
    ed84:	4699      	mov	r9, r3
    ed86:	2b00      	cmp	r3, #0
    ed88:	d0c7      	beq.n	ed1a <__aeabi_dadd+0x356>
    ed8a:	4e94      	ldr	r6, [pc, #592]	; (efdc <__aeabi_dadd+0x618>)
    ed8c:	42b0      	cmp	r0, r6
    ed8e:	d1ac      	bne.n	ecea <__aeabi_dadd+0x326>
    ed90:	000c      	movs	r4, r1
    ed92:	0017      	movs	r7, r2
    ed94:	0006      	movs	r6, r0
    ed96:	46d8      	mov	r8, fp
    ed98:	e698      	b.n	eacc <__aeabi_dadd+0x108>
    ed9a:	4b90      	ldr	r3, [pc, #576]	; (efdc <__aeabi_dadd+0x618>)
    ed9c:	459a      	cmp	sl, r3
    ed9e:	d00b      	beq.n	edb8 <__aeabi_dadd+0x3f4>
    eda0:	4682      	mov	sl, r0
    eda2:	e6e7      	b.n	eb74 <__aeabi_dadd+0x1b0>
    eda4:	2800      	cmp	r0, #0
    eda6:	d000      	beq.n	edaa <__aeabi_dadd+0x3e6>
    eda8:	e09e      	b.n	eee8 <__aeabi_dadd+0x524>
    edaa:	0018      	movs	r0, r3
    edac:	4310      	orrs	r0, r2
    edae:	d100      	bne.n	edb2 <__aeabi_dadd+0x3ee>
    edb0:	e0e9      	b.n	ef86 <__aeabi_dadd+0x5c2>
    edb2:	001c      	movs	r4, r3
    edb4:	0017      	movs	r7, r2
    edb6:	46d8      	mov	r8, fp
    edb8:	4e88      	ldr	r6, [pc, #544]	; (efdc <__aeabi_dadd+0x618>)
    edba:	e687      	b.n	eacc <__aeabi_dadd+0x108>
    edbc:	2500      	movs	r5, #0
    edbe:	e772      	b.n	eca6 <__aeabi_dadd+0x2e2>
    edc0:	2100      	movs	r1, #0
    edc2:	e782      	b.n	ecca <__aeabi_dadd+0x306>
    edc4:	0023      	movs	r3, r4
    edc6:	433b      	orrs	r3, r7
    edc8:	2e00      	cmp	r6, #0
    edca:	d000      	beq.n	edce <__aeabi_dadd+0x40a>
    edcc:	e0ab      	b.n	ef26 <__aeabi_dadd+0x562>
    edce:	2b00      	cmp	r3, #0
    edd0:	d100      	bne.n	edd4 <__aeabi_dadd+0x410>
    edd2:	e0e7      	b.n	efa4 <__aeabi_dadd+0x5e0>
    edd4:	000b      	movs	r3, r1
    edd6:	4313      	orrs	r3, r2
    edd8:	d100      	bne.n	eddc <__aeabi_dadd+0x418>
    edda:	e677      	b.n	eacc <__aeabi_dadd+0x108>
    eddc:	18ba      	adds	r2, r7, r2
    edde:	42ba      	cmp	r2, r7
    ede0:	41bf      	sbcs	r7, r7
    ede2:	1864      	adds	r4, r4, r1
    ede4:	427f      	negs	r7, r7
    ede6:	19e4      	adds	r4, r4, r7
    ede8:	0223      	lsls	r3, r4, #8
    edea:	d400      	bmi.n	edee <__aeabi_dadd+0x42a>
    edec:	e0f2      	b.n	efd4 <__aeabi_dadd+0x610>
    edee:	4b7c      	ldr	r3, [pc, #496]	; (efe0 <__aeabi_dadd+0x61c>)
    edf0:	0017      	movs	r7, r2
    edf2:	401c      	ands	r4, r3
    edf4:	0006      	movs	r6, r0
    edf6:	e669      	b.n	eacc <__aeabi_dadd+0x108>
    edf8:	0020      	movs	r0, r4
    edfa:	4338      	orrs	r0, r7
    edfc:	2e00      	cmp	r6, #0
    edfe:	d1d1      	bne.n	eda4 <__aeabi_dadd+0x3e0>
    ee00:	2800      	cmp	r0, #0
    ee02:	d15b      	bne.n	eebc <__aeabi_dadd+0x4f8>
    ee04:	001c      	movs	r4, r3
    ee06:	4314      	orrs	r4, r2
    ee08:	d100      	bne.n	ee0c <__aeabi_dadd+0x448>
    ee0a:	e0a8      	b.n	ef5e <__aeabi_dadd+0x59a>
    ee0c:	001c      	movs	r4, r3
    ee0e:	0017      	movs	r7, r2
    ee10:	46d8      	mov	r8, fp
    ee12:	e65b      	b.n	eacc <__aeabi_dadd+0x108>
    ee14:	0006      	movs	r6, r0
    ee16:	2400      	movs	r4, #0
    ee18:	2700      	movs	r7, #0
    ee1a:	e697      	b.n	eb4c <__aeabi_dadd+0x188>
    ee1c:	4650      	mov	r0, sl
    ee1e:	000b      	movs	r3, r1
    ee20:	3820      	subs	r0, #32
    ee22:	40c3      	lsrs	r3, r0
    ee24:	4699      	mov	r9, r3
    ee26:	4653      	mov	r3, sl
    ee28:	2b20      	cmp	r3, #32
    ee2a:	d100      	bne.n	ee2e <__aeabi_dadd+0x46a>
    ee2c:	e095      	b.n	ef5a <__aeabi_dadd+0x596>
    ee2e:	2340      	movs	r3, #64	; 0x40
    ee30:	4650      	mov	r0, sl
    ee32:	1a1b      	subs	r3, r3, r0
    ee34:	4099      	lsls	r1, r3
    ee36:	430a      	orrs	r2, r1
    ee38:	1e51      	subs	r1, r2, #1
    ee3a:	418a      	sbcs	r2, r1
    ee3c:	464b      	mov	r3, r9
    ee3e:	2100      	movs	r1, #0
    ee40:	431a      	orrs	r2, r3
    ee42:	e69f      	b.n	eb84 <__aeabi_dadd+0x1c0>
    ee44:	2e00      	cmp	r6, #0
    ee46:	d130      	bne.n	eeaa <__aeabi_dadd+0x4e6>
    ee48:	0026      	movs	r6, r4
    ee4a:	433e      	orrs	r6, r7
    ee4c:	d067      	beq.n	ef1e <__aeabi_dadd+0x55a>
    ee4e:	43db      	mvns	r3, r3
    ee50:	469a      	mov	sl, r3
    ee52:	2b00      	cmp	r3, #0
    ee54:	d01c      	beq.n	ee90 <__aeabi_dadd+0x4cc>
    ee56:	4e61      	ldr	r6, [pc, #388]	; (efdc <__aeabi_dadd+0x618>)
    ee58:	42b0      	cmp	r0, r6
    ee5a:	d060      	beq.n	ef1e <__aeabi_dadd+0x55a>
    ee5c:	4653      	mov	r3, sl
    ee5e:	2b38      	cmp	r3, #56	; 0x38
    ee60:	dd00      	ble.n	ee64 <__aeabi_dadd+0x4a0>
    ee62:	e096      	b.n	ef92 <__aeabi_dadd+0x5ce>
    ee64:	2b1f      	cmp	r3, #31
    ee66:	dd00      	ble.n	ee6a <__aeabi_dadd+0x4a6>
    ee68:	e09f      	b.n	efaa <__aeabi_dadd+0x5e6>
    ee6a:	2620      	movs	r6, #32
    ee6c:	1af3      	subs	r3, r6, r3
    ee6e:	0026      	movs	r6, r4
    ee70:	409e      	lsls	r6, r3
    ee72:	469c      	mov	ip, r3
    ee74:	46b3      	mov	fp, r6
    ee76:	4653      	mov	r3, sl
    ee78:	003e      	movs	r6, r7
    ee7a:	40de      	lsrs	r6, r3
    ee7c:	0033      	movs	r3, r6
    ee7e:	465e      	mov	r6, fp
    ee80:	431e      	orrs	r6, r3
    ee82:	4663      	mov	r3, ip
    ee84:	409f      	lsls	r7, r3
    ee86:	1e7b      	subs	r3, r7, #1
    ee88:	419f      	sbcs	r7, r3
    ee8a:	4653      	mov	r3, sl
    ee8c:	40dc      	lsrs	r4, r3
    ee8e:	4337      	orrs	r7, r6
    ee90:	18bf      	adds	r7, r7, r2
    ee92:	4297      	cmp	r7, r2
    ee94:	4192      	sbcs	r2, r2
    ee96:	1864      	adds	r4, r4, r1
    ee98:	4252      	negs	r2, r2
    ee9a:	18a4      	adds	r4, r4, r2
    ee9c:	0006      	movs	r6, r0
    ee9e:	e678      	b.n	eb92 <__aeabi_dadd+0x1ce>
    eea0:	4327      	orrs	r7, r4
    eea2:	1e7c      	subs	r4, r7, #1
    eea4:	41a7      	sbcs	r7, r4
    eea6:	2400      	movs	r4, #0
    eea8:	e737      	b.n	ed1a <__aeabi_dadd+0x356>
    eeaa:	4e4c      	ldr	r6, [pc, #304]	; (efdc <__aeabi_dadd+0x618>)
    eeac:	42b0      	cmp	r0, r6
    eeae:	d036      	beq.n	ef1e <__aeabi_dadd+0x55a>
    eeb0:	2680      	movs	r6, #128	; 0x80
    eeb2:	425b      	negs	r3, r3
    eeb4:	0436      	lsls	r6, r6, #16
    eeb6:	469a      	mov	sl, r3
    eeb8:	4334      	orrs	r4, r6
    eeba:	e7cf      	b.n	ee5c <__aeabi_dadd+0x498>
    eebc:	0018      	movs	r0, r3
    eebe:	4310      	orrs	r0, r2
    eec0:	d100      	bne.n	eec4 <__aeabi_dadd+0x500>
    eec2:	e603      	b.n	eacc <__aeabi_dadd+0x108>
    eec4:	1ab8      	subs	r0, r7, r2
    eec6:	4684      	mov	ip, r0
    eec8:	4567      	cmp	r7, ip
    eeca:	41ad      	sbcs	r5, r5
    eecc:	1ae0      	subs	r0, r4, r3
    eece:	426d      	negs	r5, r5
    eed0:	1b40      	subs	r0, r0, r5
    eed2:	0205      	lsls	r5, r0, #8
    eed4:	d400      	bmi.n	eed8 <__aeabi_dadd+0x514>
    eed6:	e62c      	b.n	eb32 <__aeabi_dadd+0x16e>
    eed8:	1bd7      	subs	r7, r2, r7
    eeda:	42ba      	cmp	r2, r7
    eedc:	4192      	sbcs	r2, r2
    eede:	1b1c      	subs	r4, r3, r4
    eee0:	4252      	negs	r2, r2
    eee2:	1aa4      	subs	r4, r4, r2
    eee4:	46d8      	mov	r8, fp
    eee6:	e5f1      	b.n	eacc <__aeabi_dadd+0x108>
    eee8:	0018      	movs	r0, r3
    eeea:	4310      	orrs	r0, r2
    eeec:	d100      	bne.n	eef0 <__aeabi_dadd+0x52c>
    eeee:	e763      	b.n	edb8 <__aeabi_dadd+0x3f4>
    eef0:	08f8      	lsrs	r0, r7, #3
    eef2:	0767      	lsls	r7, r4, #29
    eef4:	4307      	orrs	r7, r0
    eef6:	2080      	movs	r0, #128	; 0x80
    eef8:	08e4      	lsrs	r4, r4, #3
    eefa:	0300      	lsls	r0, r0, #12
    eefc:	4204      	tst	r4, r0
    eefe:	d008      	beq.n	ef12 <__aeabi_dadd+0x54e>
    ef00:	08dd      	lsrs	r5, r3, #3
    ef02:	4205      	tst	r5, r0
    ef04:	d105      	bne.n	ef12 <__aeabi_dadd+0x54e>
    ef06:	08d2      	lsrs	r2, r2, #3
    ef08:	0759      	lsls	r1, r3, #29
    ef0a:	4311      	orrs	r1, r2
    ef0c:	000f      	movs	r7, r1
    ef0e:	002c      	movs	r4, r5
    ef10:	46d8      	mov	r8, fp
    ef12:	0f7b      	lsrs	r3, r7, #29
    ef14:	00e4      	lsls	r4, r4, #3
    ef16:	431c      	orrs	r4, r3
    ef18:	00ff      	lsls	r7, r7, #3
    ef1a:	4e30      	ldr	r6, [pc, #192]	; (efdc <__aeabi_dadd+0x618>)
    ef1c:	e5d6      	b.n	eacc <__aeabi_dadd+0x108>
    ef1e:	000c      	movs	r4, r1
    ef20:	0017      	movs	r7, r2
    ef22:	0006      	movs	r6, r0
    ef24:	e5d2      	b.n	eacc <__aeabi_dadd+0x108>
    ef26:	2b00      	cmp	r3, #0
    ef28:	d038      	beq.n	ef9c <__aeabi_dadd+0x5d8>
    ef2a:	000b      	movs	r3, r1
    ef2c:	4313      	orrs	r3, r2
    ef2e:	d100      	bne.n	ef32 <__aeabi_dadd+0x56e>
    ef30:	e742      	b.n	edb8 <__aeabi_dadd+0x3f4>
    ef32:	08f8      	lsrs	r0, r7, #3
    ef34:	0767      	lsls	r7, r4, #29
    ef36:	4307      	orrs	r7, r0
    ef38:	2080      	movs	r0, #128	; 0x80
    ef3a:	08e4      	lsrs	r4, r4, #3
    ef3c:	0300      	lsls	r0, r0, #12
    ef3e:	4204      	tst	r4, r0
    ef40:	d0e7      	beq.n	ef12 <__aeabi_dadd+0x54e>
    ef42:	08cb      	lsrs	r3, r1, #3
    ef44:	4203      	tst	r3, r0
    ef46:	d1e4      	bne.n	ef12 <__aeabi_dadd+0x54e>
    ef48:	08d2      	lsrs	r2, r2, #3
    ef4a:	0749      	lsls	r1, r1, #29
    ef4c:	4311      	orrs	r1, r2
    ef4e:	000f      	movs	r7, r1
    ef50:	001c      	movs	r4, r3
    ef52:	e7de      	b.n	ef12 <__aeabi_dadd+0x54e>
    ef54:	2700      	movs	r7, #0
    ef56:	2400      	movs	r4, #0
    ef58:	e5d5      	b.n	eb06 <__aeabi_dadd+0x142>
    ef5a:	2100      	movs	r1, #0
    ef5c:	e76b      	b.n	ee36 <__aeabi_dadd+0x472>
    ef5e:	2500      	movs	r5, #0
    ef60:	2700      	movs	r7, #0
    ef62:	e5f3      	b.n	eb4c <__aeabi_dadd+0x188>
    ef64:	464e      	mov	r6, r9
    ef66:	0025      	movs	r5, r4
    ef68:	3e20      	subs	r6, #32
    ef6a:	40f5      	lsrs	r5, r6
    ef6c:	464b      	mov	r3, r9
    ef6e:	002e      	movs	r6, r5
    ef70:	2b20      	cmp	r3, #32
    ef72:	d02d      	beq.n	efd0 <__aeabi_dadd+0x60c>
    ef74:	2540      	movs	r5, #64	; 0x40
    ef76:	1aed      	subs	r5, r5, r3
    ef78:	40ac      	lsls	r4, r5
    ef7a:	4327      	orrs	r7, r4
    ef7c:	1e7c      	subs	r4, r7, #1
    ef7e:	41a7      	sbcs	r7, r4
    ef80:	2400      	movs	r4, #0
    ef82:	4337      	orrs	r7, r6
    ef84:	e6c9      	b.n	ed1a <__aeabi_dadd+0x356>
    ef86:	2480      	movs	r4, #128	; 0x80
    ef88:	2500      	movs	r5, #0
    ef8a:	0324      	lsls	r4, r4, #12
    ef8c:	4e13      	ldr	r6, [pc, #76]	; (efdc <__aeabi_dadd+0x618>)
    ef8e:	2700      	movs	r7, #0
    ef90:	e5dc      	b.n	eb4c <__aeabi_dadd+0x188>
    ef92:	4327      	orrs	r7, r4
    ef94:	1e7c      	subs	r4, r7, #1
    ef96:	41a7      	sbcs	r7, r4
    ef98:	2400      	movs	r4, #0
    ef9a:	e779      	b.n	ee90 <__aeabi_dadd+0x4cc>
    ef9c:	000c      	movs	r4, r1
    ef9e:	0017      	movs	r7, r2
    efa0:	4e0e      	ldr	r6, [pc, #56]	; (efdc <__aeabi_dadd+0x618>)
    efa2:	e593      	b.n	eacc <__aeabi_dadd+0x108>
    efa4:	000c      	movs	r4, r1
    efa6:	0017      	movs	r7, r2
    efa8:	e590      	b.n	eacc <__aeabi_dadd+0x108>
    efaa:	4656      	mov	r6, sl
    efac:	0023      	movs	r3, r4
    efae:	3e20      	subs	r6, #32
    efb0:	40f3      	lsrs	r3, r6
    efb2:	4699      	mov	r9, r3
    efb4:	4653      	mov	r3, sl
    efb6:	2b20      	cmp	r3, #32
    efb8:	d00e      	beq.n	efd8 <__aeabi_dadd+0x614>
    efba:	2340      	movs	r3, #64	; 0x40
    efbc:	4656      	mov	r6, sl
    efbe:	1b9b      	subs	r3, r3, r6
    efc0:	409c      	lsls	r4, r3
    efc2:	4327      	orrs	r7, r4
    efc4:	1e7c      	subs	r4, r7, #1
    efc6:	41a7      	sbcs	r7, r4
    efc8:	464b      	mov	r3, r9
    efca:	2400      	movs	r4, #0
    efcc:	431f      	orrs	r7, r3
    efce:	e75f      	b.n	ee90 <__aeabi_dadd+0x4cc>
    efd0:	2400      	movs	r4, #0
    efd2:	e7d2      	b.n	ef7a <__aeabi_dadd+0x5b6>
    efd4:	0017      	movs	r7, r2
    efd6:	e5b2      	b.n	eb3e <__aeabi_dadd+0x17a>
    efd8:	2400      	movs	r4, #0
    efda:	e7f2      	b.n	efc2 <__aeabi_dadd+0x5fe>
    efdc:	000007ff 	.word	0x000007ff
    efe0:	ff7fffff 	.word	0xff7fffff

0000efe4 <__aeabi_ddiv>:
    efe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    efe6:	4657      	mov	r7, sl
    efe8:	4645      	mov	r5, r8
    efea:	46de      	mov	lr, fp
    efec:	464e      	mov	r6, r9
    efee:	b5e0      	push	{r5, r6, r7, lr}
    eff0:	004c      	lsls	r4, r1, #1
    eff2:	030e      	lsls	r6, r1, #12
    eff4:	b087      	sub	sp, #28
    eff6:	4683      	mov	fp, r0
    eff8:	4692      	mov	sl, r2
    effa:	001d      	movs	r5, r3
    effc:	4680      	mov	r8, r0
    effe:	0b36      	lsrs	r6, r6, #12
    f000:	0d64      	lsrs	r4, r4, #21
    f002:	0fcf      	lsrs	r7, r1, #31
    f004:	2c00      	cmp	r4, #0
    f006:	d04f      	beq.n	f0a8 <__aeabi_ddiv+0xc4>
    f008:	4b6f      	ldr	r3, [pc, #444]	; (f1c8 <__aeabi_ddiv+0x1e4>)
    f00a:	429c      	cmp	r4, r3
    f00c:	d035      	beq.n	f07a <__aeabi_ddiv+0x96>
    f00e:	2380      	movs	r3, #128	; 0x80
    f010:	0f42      	lsrs	r2, r0, #29
    f012:	041b      	lsls	r3, r3, #16
    f014:	00f6      	lsls	r6, r6, #3
    f016:	4313      	orrs	r3, r2
    f018:	4333      	orrs	r3, r6
    f01a:	4699      	mov	r9, r3
    f01c:	00c3      	lsls	r3, r0, #3
    f01e:	4698      	mov	r8, r3
    f020:	4b6a      	ldr	r3, [pc, #424]	; (f1cc <__aeabi_ddiv+0x1e8>)
    f022:	2600      	movs	r6, #0
    f024:	469c      	mov	ip, r3
    f026:	2300      	movs	r3, #0
    f028:	4464      	add	r4, ip
    f02a:	9303      	str	r3, [sp, #12]
    f02c:	032b      	lsls	r3, r5, #12
    f02e:	0b1b      	lsrs	r3, r3, #12
    f030:	469b      	mov	fp, r3
    f032:	006b      	lsls	r3, r5, #1
    f034:	0fed      	lsrs	r5, r5, #31
    f036:	4650      	mov	r0, sl
    f038:	0d5b      	lsrs	r3, r3, #21
    f03a:	9501      	str	r5, [sp, #4]
    f03c:	d05e      	beq.n	f0fc <__aeabi_ddiv+0x118>
    f03e:	4a62      	ldr	r2, [pc, #392]	; (f1c8 <__aeabi_ddiv+0x1e4>)
    f040:	4293      	cmp	r3, r2
    f042:	d053      	beq.n	f0ec <__aeabi_ddiv+0x108>
    f044:	465a      	mov	r2, fp
    f046:	00d1      	lsls	r1, r2, #3
    f048:	2280      	movs	r2, #128	; 0x80
    f04a:	0f40      	lsrs	r0, r0, #29
    f04c:	0412      	lsls	r2, r2, #16
    f04e:	4302      	orrs	r2, r0
    f050:	430a      	orrs	r2, r1
    f052:	4693      	mov	fp, r2
    f054:	4652      	mov	r2, sl
    f056:	00d1      	lsls	r1, r2, #3
    f058:	4a5c      	ldr	r2, [pc, #368]	; (f1cc <__aeabi_ddiv+0x1e8>)
    f05a:	4694      	mov	ip, r2
    f05c:	2200      	movs	r2, #0
    f05e:	4463      	add	r3, ip
    f060:	0038      	movs	r0, r7
    f062:	4068      	eors	r0, r5
    f064:	4684      	mov	ip, r0
    f066:	9002      	str	r0, [sp, #8]
    f068:	1ae4      	subs	r4, r4, r3
    f06a:	4316      	orrs	r6, r2
    f06c:	2e0f      	cmp	r6, #15
    f06e:	d900      	bls.n	f072 <__aeabi_ddiv+0x8e>
    f070:	e0b4      	b.n	f1dc <__aeabi_ddiv+0x1f8>
    f072:	4b57      	ldr	r3, [pc, #348]	; (f1d0 <__aeabi_ddiv+0x1ec>)
    f074:	00b6      	lsls	r6, r6, #2
    f076:	599b      	ldr	r3, [r3, r6]
    f078:	469f      	mov	pc, r3
    f07a:	0003      	movs	r3, r0
    f07c:	4333      	orrs	r3, r6
    f07e:	4699      	mov	r9, r3
    f080:	d16c      	bne.n	f15c <__aeabi_ddiv+0x178>
    f082:	2300      	movs	r3, #0
    f084:	4698      	mov	r8, r3
    f086:	3302      	adds	r3, #2
    f088:	2608      	movs	r6, #8
    f08a:	9303      	str	r3, [sp, #12]
    f08c:	e7ce      	b.n	f02c <__aeabi_ddiv+0x48>
    f08e:	46cb      	mov	fp, r9
    f090:	4641      	mov	r1, r8
    f092:	9a03      	ldr	r2, [sp, #12]
    f094:	9701      	str	r7, [sp, #4]
    f096:	2a02      	cmp	r2, #2
    f098:	d165      	bne.n	f166 <__aeabi_ddiv+0x182>
    f09a:	9b01      	ldr	r3, [sp, #4]
    f09c:	4c4a      	ldr	r4, [pc, #296]	; (f1c8 <__aeabi_ddiv+0x1e4>)
    f09e:	469c      	mov	ip, r3
    f0a0:	2300      	movs	r3, #0
    f0a2:	2200      	movs	r2, #0
    f0a4:	4698      	mov	r8, r3
    f0a6:	e06b      	b.n	f180 <__aeabi_ddiv+0x19c>
    f0a8:	0003      	movs	r3, r0
    f0aa:	4333      	orrs	r3, r6
    f0ac:	4699      	mov	r9, r3
    f0ae:	d04e      	beq.n	f14e <__aeabi_ddiv+0x16a>
    f0b0:	2e00      	cmp	r6, #0
    f0b2:	d100      	bne.n	f0b6 <__aeabi_ddiv+0xd2>
    f0b4:	e1bc      	b.n	f430 <__aeabi_ddiv+0x44c>
    f0b6:	0030      	movs	r0, r6
    f0b8:	f001 fa7e 	bl	105b8 <__clzsi2>
    f0bc:	0003      	movs	r3, r0
    f0be:	3b0b      	subs	r3, #11
    f0c0:	2b1c      	cmp	r3, #28
    f0c2:	dd00      	ble.n	f0c6 <__aeabi_ddiv+0xe2>
    f0c4:	e1ac      	b.n	f420 <__aeabi_ddiv+0x43c>
    f0c6:	221d      	movs	r2, #29
    f0c8:	1ad3      	subs	r3, r2, r3
    f0ca:	465a      	mov	r2, fp
    f0cc:	0001      	movs	r1, r0
    f0ce:	40da      	lsrs	r2, r3
    f0d0:	3908      	subs	r1, #8
    f0d2:	408e      	lsls	r6, r1
    f0d4:	0013      	movs	r3, r2
    f0d6:	4333      	orrs	r3, r6
    f0d8:	4699      	mov	r9, r3
    f0da:	465b      	mov	r3, fp
    f0dc:	408b      	lsls	r3, r1
    f0de:	4698      	mov	r8, r3
    f0e0:	2300      	movs	r3, #0
    f0e2:	4c3c      	ldr	r4, [pc, #240]	; (f1d4 <__aeabi_ddiv+0x1f0>)
    f0e4:	2600      	movs	r6, #0
    f0e6:	1a24      	subs	r4, r4, r0
    f0e8:	9303      	str	r3, [sp, #12]
    f0ea:	e79f      	b.n	f02c <__aeabi_ddiv+0x48>
    f0ec:	4651      	mov	r1, sl
    f0ee:	465a      	mov	r2, fp
    f0f0:	4311      	orrs	r1, r2
    f0f2:	d129      	bne.n	f148 <__aeabi_ddiv+0x164>
    f0f4:	2200      	movs	r2, #0
    f0f6:	4693      	mov	fp, r2
    f0f8:	3202      	adds	r2, #2
    f0fa:	e7b1      	b.n	f060 <__aeabi_ddiv+0x7c>
    f0fc:	4659      	mov	r1, fp
    f0fe:	4301      	orrs	r1, r0
    f100:	d01e      	beq.n	f140 <__aeabi_ddiv+0x15c>
    f102:	465b      	mov	r3, fp
    f104:	2b00      	cmp	r3, #0
    f106:	d100      	bne.n	f10a <__aeabi_ddiv+0x126>
    f108:	e19e      	b.n	f448 <__aeabi_ddiv+0x464>
    f10a:	4658      	mov	r0, fp
    f10c:	f001 fa54 	bl	105b8 <__clzsi2>
    f110:	0003      	movs	r3, r0
    f112:	3b0b      	subs	r3, #11
    f114:	2b1c      	cmp	r3, #28
    f116:	dd00      	ble.n	f11a <__aeabi_ddiv+0x136>
    f118:	e18f      	b.n	f43a <__aeabi_ddiv+0x456>
    f11a:	0002      	movs	r2, r0
    f11c:	4659      	mov	r1, fp
    f11e:	3a08      	subs	r2, #8
    f120:	4091      	lsls	r1, r2
    f122:	468b      	mov	fp, r1
    f124:	211d      	movs	r1, #29
    f126:	1acb      	subs	r3, r1, r3
    f128:	4651      	mov	r1, sl
    f12a:	40d9      	lsrs	r1, r3
    f12c:	000b      	movs	r3, r1
    f12e:	4659      	mov	r1, fp
    f130:	430b      	orrs	r3, r1
    f132:	4651      	mov	r1, sl
    f134:	469b      	mov	fp, r3
    f136:	4091      	lsls	r1, r2
    f138:	4b26      	ldr	r3, [pc, #152]	; (f1d4 <__aeabi_ddiv+0x1f0>)
    f13a:	2200      	movs	r2, #0
    f13c:	1a1b      	subs	r3, r3, r0
    f13e:	e78f      	b.n	f060 <__aeabi_ddiv+0x7c>
    f140:	2300      	movs	r3, #0
    f142:	2201      	movs	r2, #1
    f144:	469b      	mov	fp, r3
    f146:	e78b      	b.n	f060 <__aeabi_ddiv+0x7c>
    f148:	4651      	mov	r1, sl
    f14a:	2203      	movs	r2, #3
    f14c:	e788      	b.n	f060 <__aeabi_ddiv+0x7c>
    f14e:	2300      	movs	r3, #0
    f150:	4698      	mov	r8, r3
    f152:	3301      	adds	r3, #1
    f154:	2604      	movs	r6, #4
    f156:	2400      	movs	r4, #0
    f158:	9303      	str	r3, [sp, #12]
    f15a:	e767      	b.n	f02c <__aeabi_ddiv+0x48>
    f15c:	2303      	movs	r3, #3
    f15e:	46b1      	mov	r9, r6
    f160:	9303      	str	r3, [sp, #12]
    f162:	260c      	movs	r6, #12
    f164:	e762      	b.n	f02c <__aeabi_ddiv+0x48>
    f166:	2a03      	cmp	r2, #3
    f168:	d100      	bne.n	f16c <__aeabi_ddiv+0x188>
    f16a:	e25c      	b.n	f626 <__aeabi_ddiv+0x642>
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	2a01      	cmp	r2, #1
    f170:	d000      	beq.n	f174 <__aeabi_ddiv+0x190>
    f172:	e1e4      	b.n	f53e <__aeabi_ddiv+0x55a>
    f174:	4013      	ands	r3, r2
    f176:	469c      	mov	ip, r3
    f178:	2300      	movs	r3, #0
    f17a:	2400      	movs	r4, #0
    f17c:	2200      	movs	r2, #0
    f17e:	4698      	mov	r8, r3
    f180:	2100      	movs	r1, #0
    f182:	0312      	lsls	r2, r2, #12
    f184:	0b13      	lsrs	r3, r2, #12
    f186:	0d0a      	lsrs	r2, r1, #20
    f188:	0512      	lsls	r2, r2, #20
    f18a:	431a      	orrs	r2, r3
    f18c:	0523      	lsls	r3, r4, #20
    f18e:	4c12      	ldr	r4, [pc, #72]	; (f1d8 <__aeabi_ddiv+0x1f4>)
    f190:	4640      	mov	r0, r8
    f192:	4022      	ands	r2, r4
    f194:	4313      	orrs	r3, r2
    f196:	4662      	mov	r2, ip
    f198:	005b      	lsls	r3, r3, #1
    f19a:	07d2      	lsls	r2, r2, #31
    f19c:	085b      	lsrs	r3, r3, #1
    f19e:	4313      	orrs	r3, r2
    f1a0:	0019      	movs	r1, r3
    f1a2:	b007      	add	sp, #28
    f1a4:	bc3c      	pop	{r2, r3, r4, r5}
    f1a6:	4690      	mov	r8, r2
    f1a8:	4699      	mov	r9, r3
    f1aa:	46a2      	mov	sl, r4
    f1ac:	46ab      	mov	fp, r5
    f1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1b0:	2300      	movs	r3, #0
    f1b2:	2280      	movs	r2, #128	; 0x80
    f1b4:	469c      	mov	ip, r3
    f1b6:	0312      	lsls	r2, r2, #12
    f1b8:	4698      	mov	r8, r3
    f1ba:	4c03      	ldr	r4, [pc, #12]	; (f1c8 <__aeabi_ddiv+0x1e4>)
    f1bc:	e7e0      	b.n	f180 <__aeabi_ddiv+0x19c>
    f1be:	2300      	movs	r3, #0
    f1c0:	4c01      	ldr	r4, [pc, #4]	; (f1c8 <__aeabi_ddiv+0x1e4>)
    f1c2:	2200      	movs	r2, #0
    f1c4:	4698      	mov	r8, r3
    f1c6:	e7db      	b.n	f180 <__aeabi_ddiv+0x19c>
    f1c8:	000007ff 	.word	0x000007ff
    f1cc:	fffffc01 	.word	0xfffffc01
    f1d0:	00012d98 	.word	0x00012d98
    f1d4:	fffffc0d 	.word	0xfffffc0d
    f1d8:	800fffff 	.word	0x800fffff
    f1dc:	45d9      	cmp	r9, fp
    f1de:	d900      	bls.n	f1e2 <__aeabi_ddiv+0x1fe>
    f1e0:	e139      	b.n	f456 <__aeabi_ddiv+0x472>
    f1e2:	d100      	bne.n	f1e6 <__aeabi_ddiv+0x202>
    f1e4:	e134      	b.n	f450 <__aeabi_ddiv+0x46c>
    f1e6:	2300      	movs	r3, #0
    f1e8:	4646      	mov	r6, r8
    f1ea:	464d      	mov	r5, r9
    f1ec:	469a      	mov	sl, r3
    f1ee:	3c01      	subs	r4, #1
    f1f0:	465b      	mov	r3, fp
    f1f2:	0e0a      	lsrs	r2, r1, #24
    f1f4:	021b      	lsls	r3, r3, #8
    f1f6:	431a      	orrs	r2, r3
    f1f8:	020b      	lsls	r3, r1, #8
    f1fa:	0c17      	lsrs	r7, r2, #16
    f1fc:	9303      	str	r3, [sp, #12]
    f1fe:	0413      	lsls	r3, r2, #16
    f200:	0c1b      	lsrs	r3, r3, #16
    f202:	0039      	movs	r1, r7
    f204:	0028      	movs	r0, r5
    f206:	4690      	mov	r8, r2
    f208:	9301      	str	r3, [sp, #4]
    f20a:	f7fe ff45 	bl	e098 <__udivsi3>
    f20e:	0002      	movs	r2, r0
    f210:	9b01      	ldr	r3, [sp, #4]
    f212:	4683      	mov	fp, r0
    f214:	435a      	muls	r2, r3
    f216:	0028      	movs	r0, r5
    f218:	0039      	movs	r1, r7
    f21a:	4691      	mov	r9, r2
    f21c:	f7fe ffc2 	bl	e1a4 <__aeabi_uidivmod>
    f220:	0c35      	lsrs	r5, r6, #16
    f222:	0409      	lsls	r1, r1, #16
    f224:	430d      	orrs	r5, r1
    f226:	45a9      	cmp	r9, r5
    f228:	d90d      	bls.n	f246 <__aeabi_ddiv+0x262>
    f22a:	465b      	mov	r3, fp
    f22c:	4445      	add	r5, r8
    f22e:	3b01      	subs	r3, #1
    f230:	45a8      	cmp	r8, r5
    f232:	d900      	bls.n	f236 <__aeabi_ddiv+0x252>
    f234:	e13a      	b.n	f4ac <__aeabi_ddiv+0x4c8>
    f236:	45a9      	cmp	r9, r5
    f238:	d800      	bhi.n	f23c <__aeabi_ddiv+0x258>
    f23a:	e137      	b.n	f4ac <__aeabi_ddiv+0x4c8>
    f23c:	2302      	movs	r3, #2
    f23e:	425b      	negs	r3, r3
    f240:	469c      	mov	ip, r3
    f242:	4445      	add	r5, r8
    f244:	44e3      	add	fp, ip
    f246:	464b      	mov	r3, r9
    f248:	1aeb      	subs	r3, r5, r3
    f24a:	0039      	movs	r1, r7
    f24c:	0018      	movs	r0, r3
    f24e:	9304      	str	r3, [sp, #16]
    f250:	f7fe ff22 	bl	e098 <__udivsi3>
    f254:	9b01      	ldr	r3, [sp, #4]
    f256:	0005      	movs	r5, r0
    f258:	4343      	muls	r3, r0
    f25a:	0039      	movs	r1, r7
    f25c:	9804      	ldr	r0, [sp, #16]
    f25e:	4699      	mov	r9, r3
    f260:	f7fe ffa0 	bl	e1a4 <__aeabi_uidivmod>
    f264:	0433      	lsls	r3, r6, #16
    f266:	0409      	lsls	r1, r1, #16
    f268:	0c1b      	lsrs	r3, r3, #16
    f26a:	430b      	orrs	r3, r1
    f26c:	4599      	cmp	r9, r3
    f26e:	d909      	bls.n	f284 <__aeabi_ddiv+0x2a0>
    f270:	4443      	add	r3, r8
    f272:	1e6a      	subs	r2, r5, #1
    f274:	4598      	cmp	r8, r3
    f276:	d900      	bls.n	f27a <__aeabi_ddiv+0x296>
    f278:	e11a      	b.n	f4b0 <__aeabi_ddiv+0x4cc>
    f27a:	4599      	cmp	r9, r3
    f27c:	d800      	bhi.n	f280 <__aeabi_ddiv+0x29c>
    f27e:	e117      	b.n	f4b0 <__aeabi_ddiv+0x4cc>
    f280:	3d02      	subs	r5, #2
    f282:	4443      	add	r3, r8
    f284:	464a      	mov	r2, r9
    f286:	1a9b      	subs	r3, r3, r2
    f288:	465a      	mov	r2, fp
    f28a:	0412      	lsls	r2, r2, #16
    f28c:	432a      	orrs	r2, r5
    f28e:	9903      	ldr	r1, [sp, #12]
    f290:	4693      	mov	fp, r2
    f292:	0c10      	lsrs	r0, r2, #16
    f294:	0c0a      	lsrs	r2, r1, #16
    f296:	4691      	mov	r9, r2
    f298:	0409      	lsls	r1, r1, #16
    f29a:	465a      	mov	r2, fp
    f29c:	0c09      	lsrs	r1, r1, #16
    f29e:	464e      	mov	r6, r9
    f2a0:	000d      	movs	r5, r1
    f2a2:	0412      	lsls	r2, r2, #16
    f2a4:	0c12      	lsrs	r2, r2, #16
    f2a6:	4345      	muls	r5, r0
    f2a8:	9105      	str	r1, [sp, #20]
    f2aa:	4351      	muls	r1, r2
    f2ac:	4372      	muls	r2, r6
    f2ae:	4370      	muls	r0, r6
    f2b0:	1952      	adds	r2, r2, r5
    f2b2:	0c0e      	lsrs	r6, r1, #16
    f2b4:	18b2      	adds	r2, r6, r2
    f2b6:	4295      	cmp	r5, r2
    f2b8:	d903      	bls.n	f2c2 <__aeabi_ddiv+0x2de>
    f2ba:	2580      	movs	r5, #128	; 0x80
    f2bc:	026d      	lsls	r5, r5, #9
    f2be:	46ac      	mov	ip, r5
    f2c0:	4460      	add	r0, ip
    f2c2:	0c15      	lsrs	r5, r2, #16
    f2c4:	0409      	lsls	r1, r1, #16
    f2c6:	0412      	lsls	r2, r2, #16
    f2c8:	0c09      	lsrs	r1, r1, #16
    f2ca:	1828      	adds	r0, r5, r0
    f2cc:	1852      	adds	r2, r2, r1
    f2ce:	4283      	cmp	r3, r0
    f2d0:	d200      	bcs.n	f2d4 <__aeabi_ddiv+0x2f0>
    f2d2:	e0ce      	b.n	f472 <__aeabi_ddiv+0x48e>
    f2d4:	d100      	bne.n	f2d8 <__aeabi_ddiv+0x2f4>
    f2d6:	e0c8      	b.n	f46a <__aeabi_ddiv+0x486>
    f2d8:	1a1d      	subs	r5, r3, r0
    f2da:	4653      	mov	r3, sl
    f2dc:	1a9e      	subs	r6, r3, r2
    f2de:	45b2      	cmp	sl, r6
    f2e0:	4192      	sbcs	r2, r2
    f2e2:	4252      	negs	r2, r2
    f2e4:	1aab      	subs	r3, r5, r2
    f2e6:	469a      	mov	sl, r3
    f2e8:	4598      	cmp	r8, r3
    f2ea:	d100      	bne.n	f2ee <__aeabi_ddiv+0x30a>
    f2ec:	e117      	b.n	f51e <__aeabi_ddiv+0x53a>
    f2ee:	0039      	movs	r1, r7
    f2f0:	0018      	movs	r0, r3
    f2f2:	f7fe fed1 	bl	e098 <__udivsi3>
    f2f6:	9b01      	ldr	r3, [sp, #4]
    f2f8:	0005      	movs	r5, r0
    f2fa:	4343      	muls	r3, r0
    f2fc:	0039      	movs	r1, r7
    f2fe:	4650      	mov	r0, sl
    f300:	9304      	str	r3, [sp, #16]
    f302:	f7fe ff4f 	bl	e1a4 <__aeabi_uidivmod>
    f306:	9804      	ldr	r0, [sp, #16]
    f308:	040b      	lsls	r3, r1, #16
    f30a:	0c31      	lsrs	r1, r6, #16
    f30c:	4319      	orrs	r1, r3
    f30e:	4288      	cmp	r0, r1
    f310:	d909      	bls.n	f326 <__aeabi_ddiv+0x342>
    f312:	4441      	add	r1, r8
    f314:	1e6b      	subs	r3, r5, #1
    f316:	4588      	cmp	r8, r1
    f318:	d900      	bls.n	f31c <__aeabi_ddiv+0x338>
    f31a:	e107      	b.n	f52c <__aeabi_ddiv+0x548>
    f31c:	4288      	cmp	r0, r1
    f31e:	d800      	bhi.n	f322 <__aeabi_ddiv+0x33e>
    f320:	e104      	b.n	f52c <__aeabi_ddiv+0x548>
    f322:	3d02      	subs	r5, #2
    f324:	4441      	add	r1, r8
    f326:	9b04      	ldr	r3, [sp, #16]
    f328:	1acb      	subs	r3, r1, r3
    f32a:	0018      	movs	r0, r3
    f32c:	0039      	movs	r1, r7
    f32e:	9304      	str	r3, [sp, #16]
    f330:	f7fe feb2 	bl	e098 <__udivsi3>
    f334:	9b01      	ldr	r3, [sp, #4]
    f336:	4682      	mov	sl, r0
    f338:	4343      	muls	r3, r0
    f33a:	0039      	movs	r1, r7
    f33c:	9804      	ldr	r0, [sp, #16]
    f33e:	9301      	str	r3, [sp, #4]
    f340:	f7fe ff30 	bl	e1a4 <__aeabi_uidivmod>
    f344:	9801      	ldr	r0, [sp, #4]
    f346:	040b      	lsls	r3, r1, #16
    f348:	0431      	lsls	r1, r6, #16
    f34a:	0c09      	lsrs	r1, r1, #16
    f34c:	4319      	orrs	r1, r3
    f34e:	4288      	cmp	r0, r1
    f350:	d90d      	bls.n	f36e <__aeabi_ddiv+0x38a>
    f352:	4653      	mov	r3, sl
    f354:	4441      	add	r1, r8
    f356:	3b01      	subs	r3, #1
    f358:	4588      	cmp	r8, r1
    f35a:	d900      	bls.n	f35e <__aeabi_ddiv+0x37a>
    f35c:	e0e8      	b.n	f530 <__aeabi_ddiv+0x54c>
    f35e:	4288      	cmp	r0, r1
    f360:	d800      	bhi.n	f364 <__aeabi_ddiv+0x380>
    f362:	e0e5      	b.n	f530 <__aeabi_ddiv+0x54c>
    f364:	2302      	movs	r3, #2
    f366:	425b      	negs	r3, r3
    f368:	469c      	mov	ip, r3
    f36a:	4441      	add	r1, r8
    f36c:	44e2      	add	sl, ip
    f36e:	9b01      	ldr	r3, [sp, #4]
    f370:	042d      	lsls	r5, r5, #16
    f372:	1ace      	subs	r6, r1, r3
    f374:	4651      	mov	r1, sl
    f376:	4329      	orrs	r1, r5
    f378:	9d05      	ldr	r5, [sp, #20]
    f37a:	464f      	mov	r7, r9
    f37c:	002a      	movs	r2, r5
    f37e:	040b      	lsls	r3, r1, #16
    f380:	0c08      	lsrs	r0, r1, #16
    f382:	0c1b      	lsrs	r3, r3, #16
    f384:	435a      	muls	r2, r3
    f386:	4345      	muls	r5, r0
    f388:	437b      	muls	r3, r7
    f38a:	4378      	muls	r0, r7
    f38c:	195b      	adds	r3, r3, r5
    f38e:	0c17      	lsrs	r7, r2, #16
    f390:	18fb      	adds	r3, r7, r3
    f392:	429d      	cmp	r5, r3
    f394:	d903      	bls.n	f39e <__aeabi_ddiv+0x3ba>
    f396:	2580      	movs	r5, #128	; 0x80
    f398:	026d      	lsls	r5, r5, #9
    f39a:	46ac      	mov	ip, r5
    f39c:	4460      	add	r0, ip
    f39e:	0c1d      	lsrs	r5, r3, #16
    f3a0:	0412      	lsls	r2, r2, #16
    f3a2:	041b      	lsls	r3, r3, #16
    f3a4:	0c12      	lsrs	r2, r2, #16
    f3a6:	1828      	adds	r0, r5, r0
    f3a8:	189b      	adds	r3, r3, r2
    f3aa:	4286      	cmp	r6, r0
    f3ac:	d200      	bcs.n	f3b0 <__aeabi_ddiv+0x3cc>
    f3ae:	e093      	b.n	f4d8 <__aeabi_ddiv+0x4f4>
    f3b0:	d100      	bne.n	f3b4 <__aeabi_ddiv+0x3d0>
    f3b2:	e08e      	b.n	f4d2 <__aeabi_ddiv+0x4ee>
    f3b4:	2301      	movs	r3, #1
    f3b6:	4319      	orrs	r1, r3
    f3b8:	4ba0      	ldr	r3, [pc, #640]	; (f63c <__aeabi_ddiv+0x658>)
    f3ba:	18e3      	adds	r3, r4, r3
    f3bc:	2b00      	cmp	r3, #0
    f3be:	dc00      	bgt.n	f3c2 <__aeabi_ddiv+0x3de>
    f3c0:	e099      	b.n	f4f6 <__aeabi_ddiv+0x512>
    f3c2:	074a      	lsls	r2, r1, #29
    f3c4:	d000      	beq.n	f3c8 <__aeabi_ddiv+0x3e4>
    f3c6:	e09e      	b.n	f506 <__aeabi_ddiv+0x522>
    f3c8:	465a      	mov	r2, fp
    f3ca:	01d2      	lsls	r2, r2, #7
    f3cc:	d506      	bpl.n	f3dc <__aeabi_ddiv+0x3f8>
    f3ce:	465a      	mov	r2, fp
    f3d0:	4b9b      	ldr	r3, [pc, #620]	; (f640 <__aeabi_ddiv+0x65c>)
    f3d2:	401a      	ands	r2, r3
    f3d4:	2380      	movs	r3, #128	; 0x80
    f3d6:	4693      	mov	fp, r2
    f3d8:	00db      	lsls	r3, r3, #3
    f3da:	18e3      	adds	r3, r4, r3
    f3dc:	4a99      	ldr	r2, [pc, #612]	; (f644 <__aeabi_ddiv+0x660>)
    f3de:	4293      	cmp	r3, r2
    f3e0:	dd68      	ble.n	f4b4 <__aeabi_ddiv+0x4d0>
    f3e2:	2301      	movs	r3, #1
    f3e4:	9a02      	ldr	r2, [sp, #8]
    f3e6:	4c98      	ldr	r4, [pc, #608]	; (f648 <__aeabi_ddiv+0x664>)
    f3e8:	401a      	ands	r2, r3
    f3ea:	2300      	movs	r3, #0
    f3ec:	4694      	mov	ip, r2
    f3ee:	4698      	mov	r8, r3
    f3f0:	2200      	movs	r2, #0
    f3f2:	e6c5      	b.n	f180 <__aeabi_ddiv+0x19c>
    f3f4:	2280      	movs	r2, #128	; 0x80
    f3f6:	464b      	mov	r3, r9
    f3f8:	0312      	lsls	r2, r2, #12
    f3fa:	4213      	tst	r3, r2
    f3fc:	d00a      	beq.n	f414 <__aeabi_ddiv+0x430>
    f3fe:	465b      	mov	r3, fp
    f400:	4213      	tst	r3, r2
    f402:	d106      	bne.n	f412 <__aeabi_ddiv+0x42e>
    f404:	431a      	orrs	r2, r3
    f406:	0312      	lsls	r2, r2, #12
    f408:	0b12      	lsrs	r2, r2, #12
    f40a:	46ac      	mov	ip, r5
    f40c:	4688      	mov	r8, r1
    f40e:	4c8e      	ldr	r4, [pc, #568]	; (f648 <__aeabi_ddiv+0x664>)
    f410:	e6b6      	b.n	f180 <__aeabi_ddiv+0x19c>
    f412:	464b      	mov	r3, r9
    f414:	431a      	orrs	r2, r3
    f416:	0312      	lsls	r2, r2, #12
    f418:	0b12      	lsrs	r2, r2, #12
    f41a:	46bc      	mov	ip, r7
    f41c:	4c8a      	ldr	r4, [pc, #552]	; (f648 <__aeabi_ddiv+0x664>)
    f41e:	e6af      	b.n	f180 <__aeabi_ddiv+0x19c>
    f420:	0003      	movs	r3, r0
    f422:	465a      	mov	r2, fp
    f424:	3b28      	subs	r3, #40	; 0x28
    f426:	409a      	lsls	r2, r3
    f428:	2300      	movs	r3, #0
    f42a:	4691      	mov	r9, r2
    f42c:	4698      	mov	r8, r3
    f42e:	e657      	b.n	f0e0 <__aeabi_ddiv+0xfc>
    f430:	4658      	mov	r0, fp
    f432:	f001 f8c1 	bl	105b8 <__clzsi2>
    f436:	3020      	adds	r0, #32
    f438:	e640      	b.n	f0bc <__aeabi_ddiv+0xd8>
    f43a:	0003      	movs	r3, r0
    f43c:	4652      	mov	r2, sl
    f43e:	3b28      	subs	r3, #40	; 0x28
    f440:	409a      	lsls	r2, r3
    f442:	2100      	movs	r1, #0
    f444:	4693      	mov	fp, r2
    f446:	e677      	b.n	f138 <__aeabi_ddiv+0x154>
    f448:	f001 f8b6 	bl	105b8 <__clzsi2>
    f44c:	3020      	adds	r0, #32
    f44e:	e65f      	b.n	f110 <__aeabi_ddiv+0x12c>
    f450:	4588      	cmp	r8, r1
    f452:	d200      	bcs.n	f456 <__aeabi_ddiv+0x472>
    f454:	e6c7      	b.n	f1e6 <__aeabi_ddiv+0x202>
    f456:	464b      	mov	r3, r9
    f458:	07de      	lsls	r6, r3, #31
    f45a:	085d      	lsrs	r5, r3, #1
    f45c:	4643      	mov	r3, r8
    f45e:	085b      	lsrs	r3, r3, #1
    f460:	431e      	orrs	r6, r3
    f462:	4643      	mov	r3, r8
    f464:	07db      	lsls	r3, r3, #31
    f466:	469a      	mov	sl, r3
    f468:	e6c2      	b.n	f1f0 <__aeabi_ddiv+0x20c>
    f46a:	2500      	movs	r5, #0
    f46c:	4592      	cmp	sl, r2
    f46e:	d300      	bcc.n	f472 <__aeabi_ddiv+0x48e>
    f470:	e733      	b.n	f2da <__aeabi_ddiv+0x2f6>
    f472:	9e03      	ldr	r6, [sp, #12]
    f474:	4659      	mov	r1, fp
    f476:	46b4      	mov	ip, r6
    f478:	44e2      	add	sl, ip
    f47a:	45b2      	cmp	sl, r6
    f47c:	41ad      	sbcs	r5, r5
    f47e:	426d      	negs	r5, r5
    f480:	4445      	add	r5, r8
    f482:	18eb      	adds	r3, r5, r3
    f484:	3901      	subs	r1, #1
    f486:	4598      	cmp	r8, r3
    f488:	d207      	bcs.n	f49a <__aeabi_ddiv+0x4b6>
    f48a:	4298      	cmp	r0, r3
    f48c:	d900      	bls.n	f490 <__aeabi_ddiv+0x4ac>
    f48e:	e07f      	b.n	f590 <__aeabi_ddiv+0x5ac>
    f490:	d100      	bne.n	f494 <__aeabi_ddiv+0x4b0>
    f492:	e0bc      	b.n	f60e <__aeabi_ddiv+0x62a>
    f494:	1a1d      	subs	r5, r3, r0
    f496:	468b      	mov	fp, r1
    f498:	e71f      	b.n	f2da <__aeabi_ddiv+0x2f6>
    f49a:	4598      	cmp	r8, r3
    f49c:	d1fa      	bne.n	f494 <__aeabi_ddiv+0x4b0>
    f49e:	9d03      	ldr	r5, [sp, #12]
    f4a0:	4555      	cmp	r5, sl
    f4a2:	d9f2      	bls.n	f48a <__aeabi_ddiv+0x4a6>
    f4a4:	4643      	mov	r3, r8
    f4a6:	468b      	mov	fp, r1
    f4a8:	1a1d      	subs	r5, r3, r0
    f4aa:	e716      	b.n	f2da <__aeabi_ddiv+0x2f6>
    f4ac:	469b      	mov	fp, r3
    f4ae:	e6ca      	b.n	f246 <__aeabi_ddiv+0x262>
    f4b0:	0015      	movs	r5, r2
    f4b2:	e6e7      	b.n	f284 <__aeabi_ddiv+0x2a0>
    f4b4:	465a      	mov	r2, fp
    f4b6:	08c9      	lsrs	r1, r1, #3
    f4b8:	0752      	lsls	r2, r2, #29
    f4ba:	430a      	orrs	r2, r1
    f4bc:	055b      	lsls	r3, r3, #21
    f4be:	4690      	mov	r8, r2
    f4c0:	0d5c      	lsrs	r4, r3, #21
    f4c2:	465a      	mov	r2, fp
    f4c4:	2301      	movs	r3, #1
    f4c6:	9902      	ldr	r1, [sp, #8]
    f4c8:	0252      	lsls	r2, r2, #9
    f4ca:	4019      	ands	r1, r3
    f4cc:	0b12      	lsrs	r2, r2, #12
    f4ce:	468c      	mov	ip, r1
    f4d0:	e656      	b.n	f180 <__aeabi_ddiv+0x19c>
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	d100      	bne.n	f4d8 <__aeabi_ddiv+0x4f4>
    f4d6:	e76f      	b.n	f3b8 <__aeabi_ddiv+0x3d4>
    f4d8:	4446      	add	r6, r8
    f4da:	1e4a      	subs	r2, r1, #1
    f4dc:	45b0      	cmp	r8, r6
    f4de:	d929      	bls.n	f534 <__aeabi_ddiv+0x550>
    f4e0:	0011      	movs	r1, r2
    f4e2:	4286      	cmp	r6, r0
    f4e4:	d000      	beq.n	f4e8 <__aeabi_ddiv+0x504>
    f4e6:	e765      	b.n	f3b4 <__aeabi_ddiv+0x3d0>
    f4e8:	9a03      	ldr	r2, [sp, #12]
    f4ea:	4293      	cmp	r3, r2
    f4ec:	d000      	beq.n	f4f0 <__aeabi_ddiv+0x50c>
    f4ee:	e761      	b.n	f3b4 <__aeabi_ddiv+0x3d0>
    f4f0:	e762      	b.n	f3b8 <__aeabi_ddiv+0x3d4>
    f4f2:	2101      	movs	r1, #1
    f4f4:	4249      	negs	r1, r1
    f4f6:	2001      	movs	r0, #1
    f4f8:	1ac2      	subs	r2, r0, r3
    f4fa:	2a38      	cmp	r2, #56	; 0x38
    f4fc:	dd21      	ble.n	f542 <__aeabi_ddiv+0x55e>
    f4fe:	9b02      	ldr	r3, [sp, #8]
    f500:	4003      	ands	r3, r0
    f502:	469c      	mov	ip, r3
    f504:	e638      	b.n	f178 <__aeabi_ddiv+0x194>
    f506:	220f      	movs	r2, #15
    f508:	400a      	ands	r2, r1
    f50a:	2a04      	cmp	r2, #4
    f50c:	d100      	bne.n	f510 <__aeabi_ddiv+0x52c>
    f50e:	e75b      	b.n	f3c8 <__aeabi_ddiv+0x3e4>
    f510:	000a      	movs	r2, r1
    f512:	1d11      	adds	r1, r2, #4
    f514:	4291      	cmp	r1, r2
    f516:	4192      	sbcs	r2, r2
    f518:	4252      	negs	r2, r2
    f51a:	4493      	add	fp, r2
    f51c:	e754      	b.n	f3c8 <__aeabi_ddiv+0x3e4>
    f51e:	4b47      	ldr	r3, [pc, #284]	; (f63c <__aeabi_ddiv+0x658>)
    f520:	18e3      	adds	r3, r4, r3
    f522:	2b00      	cmp	r3, #0
    f524:	dde5      	ble.n	f4f2 <__aeabi_ddiv+0x50e>
    f526:	2201      	movs	r2, #1
    f528:	4252      	negs	r2, r2
    f52a:	e7f2      	b.n	f512 <__aeabi_ddiv+0x52e>
    f52c:	001d      	movs	r5, r3
    f52e:	e6fa      	b.n	f326 <__aeabi_ddiv+0x342>
    f530:	469a      	mov	sl, r3
    f532:	e71c      	b.n	f36e <__aeabi_ddiv+0x38a>
    f534:	42b0      	cmp	r0, r6
    f536:	d839      	bhi.n	f5ac <__aeabi_ddiv+0x5c8>
    f538:	d06e      	beq.n	f618 <__aeabi_ddiv+0x634>
    f53a:	0011      	movs	r1, r2
    f53c:	e73a      	b.n	f3b4 <__aeabi_ddiv+0x3d0>
    f53e:	9302      	str	r3, [sp, #8]
    f540:	e73a      	b.n	f3b8 <__aeabi_ddiv+0x3d4>
    f542:	2a1f      	cmp	r2, #31
    f544:	dc3c      	bgt.n	f5c0 <__aeabi_ddiv+0x5dc>
    f546:	2320      	movs	r3, #32
    f548:	1a9b      	subs	r3, r3, r2
    f54a:	000c      	movs	r4, r1
    f54c:	4658      	mov	r0, fp
    f54e:	4099      	lsls	r1, r3
    f550:	4098      	lsls	r0, r3
    f552:	1e4b      	subs	r3, r1, #1
    f554:	4199      	sbcs	r1, r3
    f556:	465b      	mov	r3, fp
    f558:	40d4      	lsrs	r4, r2
    f55a:	40d3      	lsrs	r3, r2
    f55c:	4320      	orrs	r0, r4
    f55e:	4308      	orrs	r0, r1
    f560:	001a      	movs	r2, r3
    f562:	0743      	lsls	r3, r0, #29
    f564:	d009      	beq.n	f57a <__aeabi_ddiv+0x596>
    f566:	230f      	movs	r3, #15
    f568:	4003      	ands	r3, r0
    f56a:	2b04      	cmp	r3, #4
    f56c:	d005      	beq.n	f57a <__aeabi_ddiv+0x596>
    f56e:	0001      	movs	r1, r0
    f570:	1d08      	adds	r0, r1, #4
    f572:	4288      	cmp	r0, r1
    f574:	419b      	sbcs	r3, r3
    f576:	425b      	negs	r3, r3
    f578:	18d2      	adds	r2, r2, r3
    f57a:	0213      	lsls	r3, r2, #8
    f57c:	d53a      	bpl.n	f5f4 <__aeabi_ddiv+0x610>
    f57e:	2301      	movs	r3, #1
    f580:	9a02      	ldr	r2, [sp, #8]
    f582:	2401      	movs	r4, #1
    f584:	401a      	ands	r2, r3
    f586:	2300      	movs	r3, #0
    f588:	4694      	mov	ip, r2
    f58a:	4698      	mov	r8, r3
    f58c:	2200      	movs	r2, #0
    f58e:	e5f7      	b.n	f180 <__aeabi_ddiv+0x19c>
    f590:	2102      	movs	r1, #2
    f592:	4249      	negs	r1, r1
    f594:	468c      	mov	ip, r1
    f596:	9d03      	ldr	r5, [sp, #12]
    f598:	44e3      	add	fp, ip
    f59a:	46ac      	mov	ip, r5
    f59c:	44e2      	add	sl, ip
    f59e:	45aa      	cmp	sl, r5
    f5a0:	41ad      	sbcs	r5, r5
    f5a2:	426d      	negs	r5, r5
    f5a4:	4445      	add	r5, r8
    f5a6:	18ed      	adds	r5, r5, r3
    f5a8:	1a2d      	subs	r5, r5, r0
    f5aa:	e696      	b.n	f2da <__aeabi_ddiv+0x2f6>
    f5ac:	1e8a      	subs	r2, r1, #2
    f5ae:	9903      	ldr	r1, [sp, #12]
    f5b0:	004d      	lsls	r5, r1, #1
    f5b2:	428d      	cmp	r5, r1
    f5b4:	4189      	sbcs	r1, r1
    f5b6:	4249      	negs	r1, r1
    f5b8:	4441      	add	r1, r8
    f5ba:	1876      	adds	r6, r6, r1
    f5bc:	9503      	str	r5, [sp, #12]
    f5be:	e78f      	b.n	f4e0 <__aeabi_ddiv+0x4fc>
    f5c0:	201f      	movs	r0, #31
    f5c2:	4240      	negs	r0, r0
    f5c4:	1ac3      	subs	r3, r0, r3
    f5c6:	4658      	mov	r0, fp
    f5c8:	40d8      	lsrs	r0, r3
    f5ca:	0003      	movs	r3, r0
    f5cc:	2a20      	cmp	r2, #32
    f5ce:	d028      	beq.n	f622 <__aeabi_ddiv+0x63e>
    f5d0:	2040      	movs	r0, #64	; 0x40
    f5d2:	465d      	mov	r5, fp
    f5d4:	1a82      	subs	r2, r0, r2
    f5d6:	4095      	lsls	r5, r2
    f5d8:	4329      	orrs	r1, r5
    f5da:	1e4a      	subs	r2, r1, #1
    f5dc:	4191      	sbcs	r1, r2
    f5de:	4319      	orrs	r1, r3
    f5e0:	2307      	movs	r3, #7
    f5e2:	2200      	movs	r2, #0
    f5e4:	400b      	ands	r3, r1
    f5e6:	d009      	beq.n	f5fc <__aeabi_ddiv+0x618>
    f5e8:	230f      	movs	r3, #15
    f5ea:	2200      	movs	r2, #0
    f5ec:	400b      	ands	r3, r1
    f5ee:	0008      	movs	r0, r1
    f5f0:	2b04      	cmp	r3, #4
    f5f2:	d1bd      	bne.n	f570 <__aeabi_ddiv+0x58c>
    f5f4:	0001      	movs	r1, r0
    f5f6:	0753      	lsls	r3, r2, #29
    f5f8:	0252      	lsls	r2, r2, #9
    f5fa:	0b12      	lsrs	r2, r2, #12
    f5fc:	08c9      	lsrs	r1, r1, #3
    f5fe:	4319      	orrs	r1, r3
    f600:	2301      	movs	r3, #1
    f602:	4688      	mov	r8, r1
    f604:	9902      	ldr	r1, [sp, #8]
    f606:	2400      	movs	r4, #0
    f608:	4019      	ands	r1, r3
    f60a:	468c      	mov	ip, r1
    f60c:	e5b8      	b.n	f180 <__aeabi_ddiv+0x19c>
    f60e:	4552      	cmp	r2, sl
    f610:	d8be      	bhi.n	f590 <__aeabi_ddiv+0x5ac>
    f612:	468b      	mov	fp, r1
    f614:	2500      	movs	r5, #0
    f616:	e660      	b.n	f2da <__aeabi_ddiv+0x2f6>
    f618:	9d03      	ldr	r5, [sp, #12]
    f61a:	429d      	cmp	r5, r3
    f61c:	d3c6      	bcc.n	f5ac <__aeabi_ddiv+0x5c8>
    f61e:	0011      	movs	r1, r2
    f620:	e762      	b.n	f4e8 <__aeabi_ddiv+0x504>
    f622:	2500      	movs	r5, #0
    f624:	e7d8      	b.n	f5d8 <__aeabi_ddiv+0x5f4>
    f626:	2280      	movs	r2, #128	; 0x80
    f628:	465b      	mov	r3, fp
    f62a:	0312      	lsls	r2, r2, #12
    f62c:	431a      	orrs	r2, r3
    f62e:	9b01      	ldr	r3, [sp, #4]
    f630:	0312      	lsls	r2, r2, #12
    f632:	0b12      	lsrs	r2, r2, #12
    f634:	469c      	mov	ip, r3
    f636:	4688      	mov	r8, r1
    f638:	4c03      	ldr	r4, [pc, #12]	; (f648 <__aeabi_ddiv+0x664>)
    f63a:	e5a1      	b.n	f180 <__aeabi_ddiv+0x19c>
    f63c:	000003ff 	.word	0x000003ff
    f640:	feffffff 	.word	0xfeffffff
    f644:	000007fe 	.word	0x000007fe
    f648:	000007ff 	.word	0x000007ff

0000f64c <__eqdf2>:
    f64c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f64e:	464f      	mov	r7, r9
    f650:	4646      	mov	r6, r8
    f652:	46d6      	mov	lr, sl
    f654:	005c      	lsls	r4, r3, #1
    f656:	b5c0      	push	{r6, r7, lr}
    f658:	031f      	lsls	r7, r3, #12
    f65a:	0fdb      	lsrs	r3, r3, #31
    f65c:	469a      	mov	sl, r3
    f65e:	4b17      	ldr	r3, [pc, #92]	; (f6bc <__eqdf2+0x70>)
    f660:	030e      	lsls	r6, r1, #12
    f662:	004d      	lsls	r5, r1, #1
    f664:	4684      	mov	ip, r0
    f666:	4680      	mov	r8, r0
    f668:	0b36      	lsrs	r6, r6, #12
    f66a:	0d6d      	lsrs	r5, r5, #21
    f66c:	0fc9      	lsrs	r1, r1, #31
    f66e:	4691      	mov	r9, r2
    f670:	0b3f      	lsrs	r7, r7, #12
    f672:	0d64      	lsrs	r4, r4, #21
    f674:	2001      	movs	r0, #1
    f676:	429d      	cmp	r5, r3
    f678:	d008      	beq.n	f68c <__eqdf2+0x40>
    f67a:	429c      	cmp	r4, r3
    f67c:	d001      	beq.n	f682 <__eqdf2+0x36>
    f67e:	42a5      	cmp	r5, r4
    f680:	d00b      	beq.n	f69a <__eqdf2+0x4e>
    f682:	bc1c      	pop	{r2, r3, r4}
    f684:	4690      	mov	r8, r2
    f686:	4699      	mov	r9, r3
    f688:	46a2      	mov	sl, r4
    f68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f68c:	4663      	mov	r3, ip
    f68e:	4333      	orrs	r3, r6
    f690:	d1f7      	bne.n	f682 <__eqdf2+0x36>
    f692:	42ac      	cmp	r4, r5
    f694:	d1f5      	bne.n	f682 <__eqdf2+0x36>
    f696:	433a      	orrs	r2, r7
    f698:	d1f3      	bne.n	f682 <__eqdf2+0x36>
    f69a:	2001      	movs	r0, #1
    f69c:	42be      	cmp	r6, r7
    f69e:	d1f0      	bne.n	f682 <__eqdf2+0x36>
    f6a0:	45c8      	cmp	r8, r9
    f6a2:	d1ee      	bne.n	f682 <__eqdf2+0x36>
    f6a4:	4551      	cmp	r1, sl
    f6a6:	d007      	beq.n	f6b8 <__eqdf2+0x6c>
    f6a8:	2d00      	cmp	r5, #0
    f6aa:	d1ea      	bne.n	f682 <__eqdf2+0x36>
    f6ac:	4663      	mov	r3, ip
    f6ae:	431e      	orrs	r6, r3
    f6b0:	0030      	movs	r0, r6
    f6b2:	1e46      	subs	r6, r0, #1
    f6b4:	41b0      	sbcs	r0, r6
    f6b6:	e7e4      	b.n	f682 <__eqdf2+0x36>
    f6b8:	2000      	movs	r0, #0
    f6ba:	e7e2      	b.n	f682 <__eqdf2+0x36>
    f6bc:	000007ff 	.word	0x000007ff

0000f6c0 <__gedf2>:
    f6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6c2:	4645      	mov	r5, r8
    f6c4:	46de      	mov	lr, fp
    f6c6:	4657      	mov	r7, sl
    f6c8:	464e      	mov	r6, r9
    f6ca:	b5e0      	push	{r5, r6, r7, lr}
    f6cc:	031f      	lsls	r7, r3, #12
    f6ce:	0b3d      	lsrs	r5, r7, #12
    f6d0:	4f2c      	ldr	r7, [pc, #176]	; (f784 <__gedf2+0xc4>)
    f6d2:	030e      	lsls	r6, r1, #12
    f6d4:	004c      	lsls	r4, r1, #1
    f6d6:	46ab      	mov	fp, r5
    f6d8:	005d      	lsls	r5, r3, #1
    f6da:	4684      	mov	ip, r0
    f6dc:	0b36      	lsrs	r6, r6, #12
    f6de:	0d64      	lsrs	r4, r4, #21
    f6e0:	0fc9      	lsrs	r1, r1, #31
    f6e2:	4690      	mov	r8, r2
    f6e4:	0d6d      	lsrs	r5, r5, #21
    f6e6:	0fdb      	lsrs	r3, r3, #31
    f6e8:	42bc      	cmp	r4, r7
    f6ea:	d02a      	beq.n	f742 <__gedf2+0x82>
    f6ec:	4f25      	ldr	r7, [pc, #148]	; (f784 <__gedf2+0xc4>)
    f6ee:	42bd      	cmp	r5, r7
    f6f0:	d02d      	beq.n	f74e <__gedf2+0x8e>
    f6f2:	2c00      	cmp	r4, #0
    f6f4:	d10f      	bne.n	f716 <__gedf2+0x56>
    f6f6:	4330      	orrs	r0, r6
    f6f8:	0007      	movs	r7, r0
    f6fa:	4681      	mov	r9, r0
    f6fc:	4278      	negs	r0, r7
    f6fe:	4178      	adcs	r0, r7
    f700:	b2c0      	uxtb	r0, r0
    f702:	2d00      	cmp	r5, #0
    f704:	d117      	bne.n	f736 <__gedf2+0x76>
    f706:	465f      	mov	r7, fp
    f708:	433a      	orrs	r2, r7
    f70a:	d114      	bne.n	f736 <__gedf2+0x76>
    f70c:	464b      	mov	r3, r9
    f70e:	2000      	movs	r0, #0
    f710:	2b00      	cmp	r3, #0
    f712:	d00a      	beq.n	f72a <__gedf2+0x6a>
    f714:	e006      	b.n	f724 <__gedf2+0x64>
    f716:	2d00      	cmp	r5, #0
    f718:	d102      	bne.n	f720 <__gedf2+0x60>
    f71a:	4658      	mov	r0, fp
    f71c:	4302      	orrs	r2, r0
    f71e:	d001      	beq.n	f724 <__gedf2+0x64>
    f720:	4299      	cmp	r1, r3
    f722:	d018      	beq.n	f756 <__gedf2+0x96>
    f724:	4248      	negs	r0, r1
    f726:	2101      	movs	r1, #1
    f728:	4308      	orrs	r0, r1
    f72a:	bc3c      	pop	{r2, r3, r4, r5}
    f72c:	4690      	mov	r8, r2
    f72e:	4699      	mov	r9, r3
    f730:	46a2      	mov	sl, r4
    f732:	46ab      	mov	fp, r5
    f734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f736:	2800      	cmp	r0, #0
    f738:	d0f2      	beq.n	f720 <__gedf2+0x60>
    f73a:	2001      	movs	r0, #1
    f73c:	3b01      	subs	r3, #1
    f73e:	4318      	orrs	r0, r3
    f740:	e7f3      	b.n	f72a <__gedf2+0x6a>
    f742:	0037      	movs	r7, r6
    f744:	4307      	orrs	r7, r0
    f746:	d0d1      	beq.n	f6ec <__gedf2+0x2c>
    f748:	2002      	movs	r0, #2
    f74a:	4240      	negs	r0, r0
    f74c:	e7ed      	b.n	f72a <__gedf2+0x6a>
    f74e:	465f      	mov	r7, fp
    f750:	4317      	orrs	r7, r2
    f752:	d0ce      	beq.n	f6f2 <__gedf2+0x32>
    f754:	e7f8      	b.n	f748 <__gedf2+0x88>
    f756:	42ac      	cmp	r4, r5
    f758:	dce4      	bgt.n	f724 <__gedf2+0x64>
    f75a:	da03      	bge.n	f764 <__gedf2+0xa4>
    f75c:	1e48      	subs	r0, r1, #1
    f75e:	2101      	movs	r1, #1
    f760:	4308      	orrs	r0, r1
    f762:	e7e2      	b.n	f72a <__gedf2+0x6a>
    f764:	455e      	cmp	r6, fp
    f766:	d8dd      	bhi.n	f724 <__gedf2+0x64>
    f768:	d006      	beq.n	f778 <__gedf2+0xb8>
    f76a:	2000      	movs	r0, #0
    f76c:	455e      	cmp	r6, fp
    f76e:	d2dc      	bcs.n	f72a <__gedf2+0x6a>
    f770:	2301      	movs	r3, #1
    f772:	1e48      	subs	r0, r1, #1
    f774:	4318      	orrs	r0, r3
    f776:	e7d8      	b.n	f72a <__gedf2+0x6a>
    f778:	45c4      	cmp	ip, r8
    f77a:	d8d3      	bhi.n	f724 <__gedf2+0x64>
    f77c:	2000      	movs	r0, #0
    f77e:	45c4      	cmp	ip, r8
    f780:	d3f6      	bcc.n	f770 <__gedf2+0xb0>
    f782:	e7d2      	b.n	f72a <__gedf2+0x6a>
    f784:	000007ff 	.word	0x000007ff

0000f788 <__ledf2>:
    f788:	b5f0      	push	{r4, r5, r6, r7, lr}
    f78a:	464e      	mov	r6, r9
    f78c:	4645      	mov	r5, r8
    f78e:	46de      	mov	lr, fp
    f790:	4657      	mov	r7, sl
    f792:	005c      	lsls	r4, r3, #1
    f794:	b5e0      	push	{r5, r6, r7, lr}
    f796:	031f      	lsls	r7, r3, #12
    f798:	0fdb      	lsrs	r3, r3, #31
    f79a:	4699      	mov	r9, r3
    f79c:	4b2a      	ldr	r3, [pc, #168]	; (f848 <__ledf2+0xc0>)
    f79e:	030e      	lsls	r6, r1, #12
    f7a0:	004d      	lsls	r5, r1, #1
    f7a2:	0fc9      	lsrs	r1, r1, #31
    f7a4:	4684      	mov	ip, r0
    f7a6:	0b36      	lsrs	r6, r6, #12
    f7a8:	0d6d      	lsrs	r5, r5, #21
    f7aa:	468b      	mov	fp, r1
    f7ac:	4690      	mov	r8, r2
    f7ae:	0b3f      	lsrs	r7, r7, #12
    f7b0:	0d64      	lsrs	r4, r4, #21
    f7b2:	429d      	cmp	r5, r3
    f7b4:	d020      	beq.n	f7f8 <__ledf2+0x70>
    f7b6:	4b24      	ldr	r3, [pc, #144]	; (f848 <__ledf2+0xc0>)
    f7b8:	429c      	cmp	r4, r3
    f7ba:	d022      	beq.n	f802 <__ledf2+0x7a>
    f7bc:	2d00      	cmp	r5, #0
    f7be:	d112      	bne.n	f7e6 <__ledf2+0x5e>
    f7c0:	4330      	orrs	r0, r6
    f7c2:	4243      	negs	r3, r0
    f7c4:	4143      	adcs	r3, r0
    f7c6:	b2db      	uxtb	r3, r3
    f7c8:	2c00      	cmp	r4, #0
    f7ca:	d01f      	beq.n	f80c <__ledf2+0x84>
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d00c      	beq.n	f7ea <__ledf2+0x62>
    f7d0:	464b      	mov	r3, r9
    f7d2:	2001      	movs	r0, #1
    f7d4:	3b01      	subs	r3, #1
    f7d6:	4303      	orrs	r3, r0
    f7d8:	0018      	movs	r0, r3
    f7da:	bc3c      	pop	{r2, r3, r4, r5}
    f7dc:	4690      	mov	r8, r2
    f7de:	4699      	mov	r9, r3
    f7e0:	46a2      	mov	sl, r4
    f7e2:	46ab      	mov	fp, r5
    f7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7e6:	2c00      	cmp	r4, #0
    f7e8:	d016      	beq.n	f818 <__ledf2+0x90>
    f7ea:	45cb      	cmp	fp, r9
    f7ec:	d017      	beq.n	f81e <__ledf2+0x96>
    f7ee:	465b      	mov	r3, fp
    f7f0:	4259      	negs	r1, r3
    f7f2:	2301      	movs	r3, #1
    f7f4:	430b      	orrs	r3, r1
    f7f6:	e7ef      	b.n	f7d8 <__ledf2+0x50>
    f7f8:	0031      	movs	r1, r6
    f7fa:	2302      	movs	r3, #2
    f7fc:	4301      	orrs	r1, r0
    f7fe:	d1eb      	bne.n	f7d8 <__ledf2+0x50>
    f800:	e7d9      	b.n	f7b6 <__ledf2+0x2e>
    f802:	0039      	movs	r1, r7
    f804:	2302      	movs	r3, #2
    f806:	4311      	orrs	r1, r2
    f808:	d1e6      	bne.n	f7d8 <__ledf2+0x50>
    f80a:	e7d7      	b.n	f7bc <__ledf2+0x34>
    f80c:	433a      	orrs	r2, r7
    f80e:	d1dd      	bne.n	f7cc <__ledf2+0x44>
    f810:	2300      	movs	r3, #0
    f812:	2800      	cmp	r0, #0
    f814:	d0e0      	beq.n	f7d8 <__ledf2+0x50>
    f816:	e7ea      	b.n	f7ee <__ledf2+0x66>
    f818:	433a      	orrs	r2, r7
    f81a:	d1e6      	bne.n	f7ea <__ledf2+0x62>
    f81c:	e7e7      	b.n	f7ee <__ledf2+0x66>
    f81e:	42a5      	cmp	r5, r4
    f820:	dce5      	bgt.n	f7ee <__ledf2+0x66>
    f822:	db05      	blt.n	f830 <__ledf2+0xa8>
    f824:	42be      	cmp	r6, r7
    f826:	d8e2      	bhi.n	f7ee <__ledf2+0x66>
    f828:	d007      	beq.n	f83a <__ledf2+0xb2>
    f82a:	2300      	movs	r3, #0
    f82c:	42be      	cmp	r6, r7
    f82e:	d2d3      	bcs.n	f7d8 <__ledf2+0x50>
    f830:	4659      	mov	r1, fp
    f832:	2301      	movs	r3, #1
    f834:	3901      	subs	r1, #1
    f836:	430b      	orrs	r3, r1
    f838:	e7ce      	b.n	f7d8 <__ledf2+0x50>
    f83a:	45c4      	cmp	ip, r8
    f83c:	d8d7      	bhi.n	f7ee <__ledf2+0x66>
    f83e:	2300      	movs	r3, #0
    f840:	45c4      	cmp	ip, r8
    f842:	d3f5      	bcc.n	f830 <__ledf2+0xa8>
    f844:	e7c8      	b.n	f7d8 <__ledf2+0x50>
    f846:	46c0      	nop			; (mov r8, r8)
    f848:	000007ff 	.word	0x000007ff

0000f84c <__aeabi_dmul>:
    f84c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f84e:	4657      	mov	r7, sl
    f850:	4645      	mov	r5, r8
    f852:	46de      	mov	lr, fp
    f854:	464e      	mov	r6, r9
    f856:	b5e0      	push	{r5, r6, r7, lr}
    f858:	030c      	lsls	r4, r1, #12
    f85a:	4698      	mov	r8, r3
    f85c:	004e      	lsls	r6, r1, #1
    f85e:	0b23      	lsrs	r3, r4, #12
    f860:	b087      	sub	sp, #28
    f862:	0007      	movs	r7, r0
    f864:	4692      	mov	sl, r2
    f866:	469b      	mov	fp, r3
    f868:	0d76      	lsrs	r6, r6, #21
    f86a:	0fcd      	lsrs	r5, r1, #31
    f86c:	2e00      	cmp	r6, #0
    f86e:	d06b      	beq.n	f948 <__aeabi_dmul+0xfc>
    f870:	4b6d      	ldr	r3, [pc, #436]	; (fa28 <__aeabi_dmul+0x1dc>)
    f872:	429e      	cmp	r6, r3
    f874:	d035      	beq.n	f8e2 <__aeabi_dmul+0x96>
    f876:	2480      	movs	r4, #128	; 0x80
    f878:	465b      	mov	r3, fp
    f87a:	0f42      	lsrs	r2, r0, #29
    f87c:	0424      	lsls	r4, r4, #16
    f87e:	00db      	lsls	r3, r3, #3
    f880:	4314      	orrs	r4, r2
    f882:	431c      	orrs	r4, r3
    f884:	00c3      	lsls	r3, r0, #3
    f886:	4699      	mov	r9, r3
    f888:	4b68      	ldr	r3, [pc, #416]	; (fa2c <__aeabi_dmul+0x1e0>)
    f88a:	46a3      	mov	fp, r4
    f88c:	469c      	mov	ip, r3
    f88e:	2300      	movs	r3, #0
    f890:	2700      	movs	r7, #0
    f892:	4466      	add	r6, ip
    f894:	9302      	str	r3, [sp, #8]
    f896:	4643      	mov	r3, r8
    f898:	031c      	lsls	r4, r3, #12
    f89a:	005a      	lsls	r2, r3, #1
    f89c:	0fdb      	lsrs	r3, r3, #31
    f89e:	4650      	mov	r0, sl
    f8a0:	0b24      	lsrs	r4, r4, #12
    f8a2:	0d52      	lsrs	r2, r2, #21
    f8a4:	4698      	mov	r8, r3
    f8a6:	d100      	bne.n	f8aa <__aeabi_dmul+0x5e>
    f8a8:	e076      	b.n	f998 <__aeabi_dmul+0x14c>
    f8aa:	4b5f      	ldr	r3, [pc, #380]	; (fa28 <__aeabi_dmul+0x1dc>)
    f8ac:	429a      	cmp	r2, r3
    f8ae:	d06d      	beq.n	f98c <__aeabi_dmul+0x140>
    f8b0:	2380      	movs	r3, #128	; 0x80
    f8b2:	0f41      	lsrs	r1, r0, #29
    f8b4:	041b      	lsls	r3, r3, #16
    f8b6:	430b      	orrs	r3, r1
    f8b8:	495c      	ldr	r1, [pc, #368]	; (fa2c <__aeabi_dmul+0x1e0>)
    f8ba:	00e4      	lsls	r4, r4, #3
    f8bc:	468c      	mov	ip, r1
    f8be:	431c      	orrs	r4, r3
    f8c0:	00c3      	lsls	r3, r0, #3
    f8c2:	2000      	movs	r0, #0
    f8c4:	4462      	add	r2, ip
    f8c6:	4641      	mov	r1, r8
    f8c8:	18b6      	adds	r6, r6, r2
    f8ca:	4069      	eors	r1, r5
    f8cc:	1c72      	adds	r2, r6, #1
    f8ce:	9101      	str	r1, [sp, #4]
    f8d0:	4694      	mov	ip, r2
    f8d2:	4307      	orrs	r7, r0
    f8d4:	2f0f      	cmp	r7, #15
    f8d6:	d900      	bls.n	f8da <__aeabi_dmul+0x8e>
    f8d8:	e0b0      	b.n	fa3c <__aeabi_dmul+0x1f0>
    f8da:	4a55      	ldr	r2, [pc, #340]	; (fa30 <__aeabi_dmul+0x1e4>)
    f8dc:	00bf      	lsls	r7, r7, #2
    f8de:	59d2      	ldr	r2, [r2, r7]
    f8e0:	4697      	mov	pc, r2
    f8e2:	465b      	mov	r3, fp
    f8e4:	4303      	orrs	r3, r0
    f8e6:	4699      	mov	r9, r3
    f8e8:	d000      	beq.n	f8ec <__aeabi_dmul+0xa0>
    f8ea:	e087      	b.n	f9fc <__aeabi_dmul+0x1b0>
    f8ec:	2300      	movs	r3, #0
    f8ee:	469b      	mov	fp, r3
    f8f0:	3302      	adds	r3, #2
    f8f2:	2708      	movs	r7, #8
    f8f4:	9302      	str	r3, [sp, #8]
    f8f6:	e7ce      	b.n	f896 <__aeabi_dmul+0x4a>
    f8f8:	4642      	mov	r2, r8
    f8fa:	9201      	str	r2, [sp, #4]
    f8fc:	2802      	cmp	r0, #2
    f8fe:	d067      	beq.n	f9d0 <__aeabi_dmul+0x184>
    f900:	2803      	cmp	r0, #3
    f902:	d100      	bne.n	f906 <__aeabi_dmul+0xba>
    f904:	e20e      	b.n	fd24 <__aeabi_dmul+0x4d8>
    f906:	2801      	cmp	r0, #1
    f908:	d000      	beq.n	f90c <__aeabi_dmul+0xc0>
    f90a:	e162      	b.n	fbd2 <__aeabi_dmul+0x386>
    f90c:	2300      	movs	r3, #0
    f90e:	2400      	movs	r4, #0
    f910:	2200      	movs	r2, #0
    f912:	4699      	mov	r9, r3
    f914:	9901      	ldr	r1, [sp, #4]
    f916:	4001      	ands	r1, r0
    f918:	b2cd      	uxtb	r5, r1
    f91a:	2100      	movs	r1, #0
    f91c:	0312      	lsls	r2, r2, #12
    f91e:	0d0b      	lsrs	r3, r1, #20
    f920:	0b12      	lsrs	r2, r2, #12
    f922:	051b      	lsls	r3, r3, #20
    f924:	4313      	orrs	r3, r2
    f926:	4a43      	ldr	r2, [pc, #268]	; (fa34 <__aeabi_dmul+0x1e8>)
    f928:	0524      	lsls	r4, r4, #20
    f92a:	4013      	ands	r3, r2
    f92c:	431c      	orrs	r4, r3
    f92e:	0064      	lsls	r4, r4, #1
    f930:	07ed      	lsls	r5, r5, #31
    f932:	0864      	lsrs	r4, r4, #1
    f934:	432c      	orrs	r4, r5
    f936:	4648      	mov	r0, r9
    f938:	0021      	movs	r1, r4
    f93a:	b007      	add	sp, #28
    f93c:	bc3c      	pop	{r2, r3, r4, r5}
    f93e:	4690      	mov	r8, r2
    f940:	4699      	mov	r9, r3
    f942:	46a2      	mov	sl, r4
    f944:	46ab      	mov	fp, r5
    f946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f948:	4303      	orrs	r3, r0
    f94a:	4699      	mov	r9, r3
    f94c:	d04f      	beq.n	f9ee <__aeabi_dmul+0x1a2>
    f94e:	465b      	mov	r3, fp
    f950:	2b00      	cmp	r3, #0
    f952:	d100      	bne.n	f956 <__aeabi_dmul+0x10a>
    f954:	e189      	b.n	fc6a <__aeabi_dmul+0x41e>
    f956:	4658      	mov	r0, fp
    f958:	f000 fe2e 	bl	105b8 <__clzsi2>
    f95c:	0003      	movs	r3, r0
    f95e:	3b0b      	subs	r3, #11
    f960:	2b1c      	cmp	r3, #28
    f962:	dd00      	ble.n	f966 <__aeabi_dmul+0x11a>
    f964:	e17a      	b.n	fc5c <__aeabi_dmul+0x410>
    f966:	221d      	movs	r2, #29
    f968:	1ad3      	subs	r3, r2, r3
    f96a:	003a      	movs	r2, r7
    f96c:	0001      	movs	r1, r0
    f96e:	465c      	mov	r4, fp
    f970:	40da      	lsrs	r2, r3
    f972:	3908      	subs	r1, #8
    f974:	408c      	lsls	r4, r1
    f976:	0013      	movs	r3, r2
    f978:	408f      	lsls	r7, r1
    f97a:	4323      	orrs	r3, r4
    f97c:	469b      	mov	fp, r3
    f97e:	46b9      	mov	r9, r7
    f980:	2300      	movs	r3, #0
    f982:	4e2d      	ldr	r6, [pc, #180]	; (fa38 <__aeabi_dmul+0x1ec>)
    f984:	2700      	movs	r7, #0
    f986:	1a36      	subs	r6, r6, r0
    f988:	9302      	str	r3, [sp, #8]
    f98a:	e784      	b.n	f896 <__aeabi_dmul+0x4a>
    f98c:	4653      	mov	r3, sl
    f98e:	4323      	orrs	r3, r4
    f990:	d12a      	bne.n	f9e8 <__aeabi_dmul+0x19c>
    f992:	2400      	movs	r4, #0
    f994:	2002      	movs	r0, #2
    f996:	e796      	b.n	f8c6 <__aeabi_dmul+0x7a>
    f998:	4653      	mov	r3, sl
    f99a:	4323      	orrs	r3, r4
    f99c:	d020      	beq.n	f9e0 <__aeabi_dmul+0x194>
    f99e:	2c00      	cmp	r4, #0
    f9a0:	d100      	bne.n	f9a4 <__aeabi_dmul+0x158>
    f9a2:	e157      	b.n	fc54 <__aeabi_dmul+0x408>
    f9a4:	0020      	movs	r0, r4
    f9a6:	f000 fe07 	bl	105b8 <__clzsi2>
    f9aa:	0003      	movs	r3, r0
    f9ac:	3b0b      	subs	r3, #11
    f9ae:	2b1c      	cmp	r3, #28
    f9b0:	dd00      	ble.n	f9b4 <__aeabi_dmul+0x168>
    f9b2:	e149      	b.n	fc48 <__aeabi_dmul+0x3fc>
    f9b4:	211d      	movs	r1, #29
    f9b6:	1acb      	subs	r3, r1, r3
    f9b8:	4651      	mov	r1, sl
    f9ba:	0002      	movs	r2, r0
    f9bc:	40d9      	lsrs	r1, r3
    f9be:	4653      	mov	r3, sl
    f9c0:	3a08      	subs	r2, #8
    f9c2:	4094      	lsls	r4, r2
    f9c4:	4093      	lsls	r3, r2
    f9c6:	430c      	orrs	r4, r1
    f9c8:	4a1b      	ldr	r2, [pc, #108]	; (fa38 <__aeabi_dmul+0x1ec>)
    f9ca:	1a12      	subs	r2, r2, r0
    f9cc:	2000      	movs	r0, #0
    f9ce:	e77a      	b.n	f8c6 <__aeabi_dmul+0x7a>
    f9d0:	2501      	movs	r5, #1
    f9d2:	9b01      	ldr	r3, [sp, #4]
    f9d4:	4c14      	ldr	r4, [pc, #80]	; (fa28 <__aeabi_dmul+0x1dc>)
    f9d6:	401d      	ands	r5, r3
    f9d8:	2300      	movs	r3, #0
    f9da:	2200      	movs	r2, #0
    f9dc:	4699      	mov	r9, r3
    f9de:	e79c      	b.n	f91a <__aeabi_dmul+0xce>
    f9e0:	2400      	movs	r4, #0
    f9e2:	2200      	movs	r2, #0
    f9e4:	2001      	movs	r0, #1
    f9e6:	e76e      	b.n	f8c6 <__aeabi_dmul+0x7a>
    f9e8:	4653      	mov	r3, sl
    f9ea:	2003      	movs	r0, #3
    f9ec:	e76b      	b.n	f8c6 <__aeabi_dmul+0x7a>
    f9ee:	2300      	movs	r3, #0
    f9f0:	469b      	mov	fp, r3
    f9f2:	3301      	adds	r3, #1
    f9f4:	2704      	movs	r7, #4
    f9f6:	2600      	movs	r6, #0
    f9f8:	9302      	str	r3, [sp, #8]
    f9fa:	e74c      	b.n	f896 <__aeabi_dmul+0x4a>
    f9fc:	2303      	movs	r3, #3
    f9fe:	4681      	mov	r9, r0
    fa00:	270c      	movs	r7, #12
    fa02:	9302      	str	r3, [sp, #8]
    fa04:	e747      	b.n	f896 <__aeabi_dmul+0x4a>
    fa06:	2280      	movs	r2, #128	; 0x80
    fa08:	2300      	movs	r3, #0
    fa0a:	2500      	movs	r5, #0
    fa0c:	0312      	lsls	r2, r2, #12
    fa0e:	4699      	mov	r9, r3
    fa10:	4c05      	ldr	r4, [pc, #20]	; (fa28 <__aeabi_dmul+0x1dc>)
    fa12:	e782      	b.n	f91a <__aeabi_dmul+0xce>
    fa14:	465c      	mov	r4, fp
    fa16:	464b      	mov	r3, r9
    fa18:	9802      	ldr	r0, [sp, #8]
    fa1a:	e76f      	b.n	f8fc <__aeabi_dmul+0xb0>
    fa1c:	465c      	mov	r4, fp
    fa1e:	464b      	mov	r3, r9
    fa20:	9501      	str	r5, [sp, #4]
    fa22:	9802      	ldr	r0, [sp, #8]
    fa24:	e76a      	b.n	f8fc <__aeabi_dmul+0xb0>
    fa26:	46c0      	nop			; (mov r8, r8)
    fa28:	000007ff 	.word	0x000007ff
    fa2c:	fffffc01 	.word	0xfffffc01
    fa30:	00012dd8 	.word	0x00012dd8
    fa34:	800fffff 	.word	0x800fffff
    fa38:	fffffc0d 	.word	0xfffffc0d
    fa3c:	464a      	mov	r2, r9
    fa3e:	4649      	mov	r1, r9
    fa40:	0c17      	lsrs	r7, r2, #16
    fa42:	0c1a      	lsrs	r2, r3, #16
    fa44:	041b      	lsls	r3, r3, #16
    fa46:	0c1b      	lsrs	r3, r3, #16
    fa48:	0408      	lsls	r0, r1, #16
    fa4a:	0019      	movs	r1, r3
    fa4c:	0c00      	lsrs	r0, r0, #16
    fa4e:	4341      	muls	r1, r0
    fa50:	0015      	movs	r5, r2
    fa52:	4688      	mov	r8, r1
    fa54:	0019      	movs	r1, r3
    fa56:	437d      	muls	r5, r7
    fa58:	4379      	muls	r1, r7
    fa5a:	9503      	str	r5, [sp, #12]
    fa5c:	4689      	mov	r9, r1
    fa5e:	0029      	movs	r1, r5
    fa60:	0015      	movs	r5, r2
    fa62:	4345      	muls	r5, r0
    fa64:	444d      	add	r5, r9
    fa66:	9502      	str	r5, [sp, #8]
    fa68:	4645      	mov	r5, r8
    fa6a:	0c2d      	lsrs	r5, r5, #16
    fa6c:	46aa      	mov	sl, r5
    fa6e:	9d02      	ldr	r5, [sp, #8]
    fa70:	4455      	add	r5, sl
    fa72:	45a9      	cmp	r9, r5
    fa74:	d906      	bls.n	fa84 <__aeabi_dmul+0x238>
    fa76:	468a      	mov	sl, r1
    fa78:	2180      	movs	r1, #128	; 0x80
    fa7a:	0249      	lsls	r1, r1, #9
    fa7c:	4689      	mov	r9, r1
    fa7e:	44ca      	add	sl, r9
    fa80:	4651      	mov	r1, sl
    fa82:	9103      	str	r1, [sp, #12]
    fa84:	0c29      	lsrs	r1, r5, #16
    fa86:	9104      	str	r1, [sp, #16]
    fa88:	4641      	mov	r1, r8
    fa8a:	0409      	lsls	r1, r1, #16
    fa8c:	042d      	lsls	r5, r5, #16
    fa8e:	0c09      	lsrs	r1, r1, #16
    fa90:	4688      	mov	r8, r1
    fa92:	0029      	movs	r1, r5
    fa94:	0c25      	lsrs	r5, r4, #16
    fa96:	0424      	lsls	r4, r4, #16
    fa98:	4441      	add	r1, r8
    fa9a:	0c24      	lsrs	r4, r4, #16
    fa9c:	9105      	str	r1, [sp, #20]
    fa9e:	0021      	movs	r1, r4
    faa0:	4341      	muls	r1, r0
    faa2:	4688      	mov	r8, r1
    faa4:	0021      	movs	r1, r4
    faa6:	4379      	muls	r1, r7
    faa8:	468a      	mov	sl, r1
    faaa:	4368      	muls	r0, r5
    faac:	4641      	mov	r1, r8
    faae:	4450      	add	r0, sl
    fab0:	4681      	mov	r9, r0
    fab2:	0c08      	lsrs	r0, r1, #16
    fab4:	4448      	add	r0, r9
    fab6:	436f      	muls	r7, r5
    fab8:	4582      	cmp	sl, r0
    faba:	d903      	bls.n	fac4 <__aeabi_dmul+0x278>
    fabc:	2180      	movs	r1, #128	; 0x80
    fabe:	0249      	lsls	r1, r1, #9
    fac0:	4689      	mov	r9, r1
    fac2:	444f      	add	r7, r9
    fac4:	0c01      	lsrs	r1, r0, #16
    fac6:	4689      	mov	r9, r1
    fac8:	0039      	movs	r1, r7
    faca:	4449      	add	r1, r9
    facc:	9102      	str	r1, [sp, #8]
    face:	4641      	mov	r1, r8
    fad0:	040f      	lsls	r7, r1, #16
    fad2:	9904      	ldr	r1, [sp, #16]
    fad4:	0c3f      	lsrs	r7, r7, #16
    fad6:	4688      	mov	r8, r1
    fad8:	0400      	lsls	r0, r0, #16
    fada:	19c0      	adds	r0, r0, r7
    fadc:	4480      	add	r8, r0
    fade:	4641      	mov	r1, r8
    fae0:	9104      	str	r1, [sp, #16]
    fae2:	4659      	mov	r1, fp
    fae4:	0c0f      	lsrs	r7, r1, #16
    fae6:	0409      	lsls	r1, r1, #16
    fae8:	0c09      	lsrs	r1, r1, #16
    faea:	4688      	mov	r8, r1
    faec:	4359      	muls	r1, r3
    faee:	468a      	mov	sl, r1
    faf0:	0039      	movs	r1, r7
    faf2:	4351      	muls	r1, r2
    faf4:	4689      	mov	r9, r1
    faf6:	4641      	mov	r1, r8
    faf8:	434a      	muls	r2, r1
    fafa:	4651      	mov	r1, sl
    fafc:	0c09      	lsrs	r1, r1, #16
    fafe:	468b      	mov	fp, r1
    fb00:	437b      	muls	r3, r7
    fb02:	18d2      	adds	r2, r2, r3
    fb04:	445a      	add	r2, fp
    fb06:	4293      	cmp	r3, r2
    fb08:	d903      	bls.n	fb12 <__aeabi_dmul+0x2c6>
    fb0a:	2380      	movs	r3, #128	; 0x80
    fb0c:	025b      	lsls	r3, r3, #9
    fb0e:	469b      	mov	fp, r3
    fb10:	44d9      	add	r9, fp
    fb12:	4651      	mov	r1, sl
    fb14:	0409      	lsls	r1, r1, #16
    fb16:	0c09      	lsrs	r1, r1, #16
    fb18:	468a      	mov	sl, r1
    fb1a:	4641      	mov	r1, r8
    fb1c:	4361      	muls	r1, r4
    fb1e:	437c      	muls	r4, r7
    fb20:	0c13      	lsrs	r3, r2, #16
    fb22:	0412      	lsls	r2, r2, #16
    fb24:	444b      	add	r3, r9
    fb26:	4452      	add	r2, sl
    fb28:	46a1      	mov	r9, r4
    fb2a:	468a      	mov	sl, r1
    fb2c:	003c      	movs	r4, r7
    fb2e:	4641      	mov	r1, r8
    fb30:	436c      	muls	r4, r5
    fb32:	434d      	muls	r5, r1
    fb34:	4651      	mov	r1, sl
    fb36:	444d      	add	r5, r9
    fb38:	0c0f      	lsrs	r7, r1, #16
    fb3a:	197d      	adds	r5, r7, r5
    fb3c:	45a9      	cmp	r9, r5
    fb3e:	d903      	bls.n	fb48 <__aeabi_dmul+0x2fc>
    fb40:	2180      	movs	r1, #128	; 0x80
    fb42:	0249      	lsls	r1, r1, #9
    fb44:	4688      	mov	r8, r1
    fb46:	4444      	add	r4, r8
    fb48:	9f04      	ldr	r7, [sp, #16]
    fb4a:	9903      	ldr	r1, [sp, #12]
    fb4c:	46b8      	mov	r8, r7
    fb4e:	4441      	add	r1, r8
    fb50:	468b      	mov	fp, r1
    fb52:	4583      	cmp	fp, r0
    fb54:	4180      	sbcs	r0, r0
    fb56:	4241      	negs	r1, r0
    fb58:	4688      	mov	r8, r1
    fb5a:	4651      	mov	r1, sl
    fb5c:	0408      	lsls	r0, r1, #16
    fb5e:	042f      	lsls	r7, r5, #16
    fb60:	0c00      	lsrs	r0, r0, #16
    fb62:	183f      	adds	r7, r7, r0
    fb64:	4658      	mov	r0, fp
    fb66:	9902      	ldr	r1, [sp, #8]
    fb68:	1810      	adds	r0, r2, r0
    fb6a:	4689      	mov	r9, r1
    fb6c:	4290      	cmp	r0, r2
    fb6e:	4192      	sbcs	r2, r2
    fb70:	444f      	add	r7, r9
    fb72:	46ba      	mov	sl, r7
    fb74:	4252      	negs	r2, r2
    fb76:	4699      	mov	r9, r3
    fb78:	4693      	mov	fp, r2
    fb7a:	44c2      	add	sl, r8
    fb7c:	44d1      	add	r9, sl
    fb7e:	44cb      	add	fp, r9
    fb80:	428f      	cmp	r7, r1
    fb82:	41bf      	sbcs	r7, r7
    fb84:	45c2      	cmp	sl, r8
    fb86:	4189      	sbcs	r1, r1
    fb88:	4599      	cmp	r9, r3
    fb8a:	419b      	sbcs	r3, r3
    fb8c:	4593      	cmp	fp, r2
    fb8e:	4192      	sbcs	r2, r2
    fb90:	427f      	negs	r7, r7
    fb92:	4249      	negs	r1, r1
    fb94:	0c2d      	lsrs	r5, r5, #16
    fb96:	4252      	negs	r2, r2
    fb98:	430f      	orrs	r7, r1
    fb9a:	425b      	negs	r3, r3
    fb9c:	4313      	orrs	r3, r2
    fb9e:	197f      	adds	r7, r7, r5
    fba0:	18ff      	adds	r7, r7, r3
    fba2:	465b      	mov	r3, fp
    fba4:	193c      	adds	r4, r7, r4
    fba6:	0ddb      	lsrs	r3, r3, #23
    fba8:	9a05      	ldr	r2, [sp, #20]
    fbaa:	0264      	lsls	r4, r4, #9
    fbac:	431c      	orrs	r4, r3
    fbae:	0243      	lsls	r3, r0, #9
    fbb0:	4313      	orrs	r3, r2
    fbb2:	1e5d      	subs	r5, r3, #1
    fbb4:	41ab      	sbcs	r3, r5
    fbb6:	465a      	mov	r2, fp
    fbb8:	0dc0      	lsrs	r0, r0, #23
    fbba:	4303      	orrs	r3, r0
    fbbc:	0252      	lsls	r2, r2, #9
    fbbe:	4313      	orrs	r3, r2
    fbc0:	01e2      	lsls	r2, r4, #7
    fbc2:	d556      	bpl.n	fc72 <__aeabi_dmul+0x426>
    fbc4:	2001      	movs	r0, #1
    fbc6:	085a      	lsrs	r2, r3, #1
    fbc8:	4003      	ands	r3, r0
    fbca:	4313      	orrs	r3, r2
    fbcc:	07e2      	lsls	r2, r4, #31
    fbce:	4313      	orrs	r3, r2
    fbd0:	0864      	lsrs	r4, r4, #1
    fbd2:	485a      	ldr	r0, [pc, #360]	; (fd3c <__aeabi_dmul+0x4f0>)
    fbd4:	4460      	add	r0, ip
    fbd6:	2800      	cmp	r0, #0
    fbd8:	dd4d      	ble.n	fc76 <__aeabi_dmul+0x42a>
    fbda:	075a      	lsls	r2, r3, #29
    fbdc:	d009      	beq.n	fbf2 <__aeabi_dmul+0x3a6>
    fbde:	220f      	movs	r2, #15
    fbe0:	401a      	ands	r2, r3
    fbe2:	2a04      	cmp	r2, #4
    fbe4:	d005      	beq.n	fbf2 <__aeabi_dmul+0x3a6>
    fbe6:	1d1a      	adds	r2, r3, #4
    fbe8:	429a      	cmp	r2, r3
    fbea:	419b      	sbcs	r3, r3
    fbec:	425b      	negs	r3, r3
    fbee:	18e4      	adds	r4, r4, r3
    fbf0:	0013      	movs	r3, r2
    fbf2:	01e2      	lsls	r2, r4, #7
    fbf4:	d504      	bpl.n	fc00 <__aeabi_dmul+0x3b4>
    fbf6:	2080      	movs	r0, #128	; 0x80
    fbf8:	4a51      	ldr	r2, [pc, #324]	; (fd40 <__aeabi_dmul+0x4f4>)
    fbfa:	00c0      	lsls	r0, r0, #3
    fbfc:	4014      	ands	r4, r2
    fbfe:	4460      	add	r0, ip
    fc00:	4a50      	ldr	r2, [pc, #320]	; (fd44 <__aeabi_dmul+0x4f8>)
    fc02:	4290      	cmp	r0, r2
    fc04:	dd00      	ble.n	fc08 <__aeabi_dmul+0x3bc>
    fc06:	e6e3      	b.n	f9d0 <__aeabi_dmul+0x184>
    fc08:	2501      	movs	r5, #1
    fc0a:	08db      	lsrs	r3, r3, #3
    fc0c:	0762      	lsls	r2, r4, #29
    fc0e:	431a      	orrs	r2, r3
    fc10:	0264      	lsls	r4, r4, #9
    fc12:	9b01      	ldr	r3, [sp, #4]
    fc14:	4691      	mov	r9, r2
    fc16:	0b22      	lsrs	r2, r4, #12
    fc18:	0544      	lsls	r4, r0, #21
    fc1a:	0d64      	lsrs	r4, r4, #21
    fc1c:	401d      	ands	r5, r3
    fc1e:	e67c      	b.n	f91a <__aeabi_dmul+0xce>
    fc20:	2280      	movs	r2, #128	; 0x80
    fc22:	4659      	mov	r1, fp
    fc24:	0312      	lsls	r2, r2, #12
    fc26:	4211      	tst	r1, r2
    fc28:	d008      	beq.n	fc3c <__aeabi_dmul+0x3f0>
    fc2a:	4214      	tst	r4, r2
    fc2c:	d106      	bne.n	fc3c <__aeabi_dmul+0x3f0>
    fc2e:	4322      	orrs	r2, r4
    fc30:	0312      	lsls	r2, r2, #12
    fc32:	0b12      	lsrs	r2, r2, #12
    fc34:	4645      	mov	r5, r8
    fc36:	4699      	mov	r9, r3
    fc38:	4c43      	ldr	r4, [pc, #268]	; (fd48 <__aeabi_dmul+0x4fc>)
    fc3a:	e66e      	b.n	f91a <__aeabi_dmul+0xce>
    fc3c:	465b      	mov	r3, fp
    fc3e:	431a      	orrs	r2, r3
    fc40:	0312      	lsls	r2, r2, #12
    fc42:	0b12      	lsrs	r2, r2, #12
    fc44:	4c40      	ldr	r4, [pc, #256]	; (fd48 <__aeabi_dmul+0x4fc>)
    fc46:	e668      	b.n	f91a <__aeabi_dmul+0xce>
    fc48:	0003      	movs	r3, r0
    fc4a:	4654      	mov	r4, sl
    fc4c:	3b28      	subs	r3, #40	; 0x28
    fc4e:	409c      	lsls	r4, r3
    fc50:	2300      	movs	r3, #0
    fc52:	e6b9      	b.n	f9c8 <__aeabi_dmul+0x17c>
    fc54:	f000 fcb0 	bl	105b8 <__clzsi2>
    fc58:	3020      	adds	r0, #32
    fc5a:	e6a6      	b.n	f9aa <__aeabi_dmul+0x15e>
    fc5c:	0003      	movs	r3, r0
    fc5e:	3b28      	subs	r3, #40	; 0x28
    fc60:	409f      	lsls	r7, r3
    fc62:	2300      	movs	r3, #0
    fc64:	46bb      	mov	fp, r7
    fc66:	4699      	mov	r9, r3
    fc68:	e68a      	b.n	f980 <__aeabi_dmul+0x134>
    fc6a:	f000 fca5 	bl	105b8 <__clzsi2>
    fc6e:	3020      	adds	r0, #32
    fc70:	e674      	b.n	f95c <__aeabi_dmul+0x110>
    fc72:	46b4      	mov	ip, r6
    fc74:	e7ad      	b.n	fbd2 <__aeabi_dmul+0x386>
    fc76:	2501      	movs	r5, #1
    fc78:	1a2a      	subs	r2, r5, r0
    fc7a:	2a38      	cmp	r2, #56	; 0x38
    fc7c:	dd06      	ble.n	fc8c <__aeabi_dmul+0x440>
    fc7e:	9b01      	ldr	r3, [sp, #4]
    fc80:	2400      	movs	r4, #0
    fc82:	401d      	ands	r5, r3
    fc84:	2300      	movs	r3, #0
    fc86:	2200      	movs	r2, #0
    fc88:	4699      	mov	r9, r3
    fc8a:	e646      	b.n	f91a <__aeabi_dmul+0xce>
    fc8c:	2a1f      	cmp	r2, #31
    fc8e:	dc21      	bgt.n	fcd4 <__aeabi_dmul+0x488>
    fc90:	2520      	movs	r5, #32
    fc92:	0020      	movs	r0, r4
    fc94:	1aad      	subs	r5, r5, r2
    fc96:	001e      	movs	r6, r3
    fc98:	40ab      	lsls	r3, r5
    fc9a:	40a8      	lsls	r0, r5
    fc9c:	40d6      	lsrs	r6, r2
    fc9e:	1e5d      	subs	r5, r3, #1
    fca0:	41ab      	sbcs	r3, r5
    fca2:	4330      	orrs	r0, r6
    fca4:	4318      	orrs	r0, r3
    fca6:	40d4      	lsrs	r4, r2
    fca8:	0743      	lsls	r3, r0, #29
    fcaa:	d009      	beq.n	fcc0 <__aeabi_dmul+0x474>
    fcac:	230f      	movs	r3, #15
    fcae:	4003      	ands	r3, r0
    fcb0:	2b04      	cmp	r3, #4
    fcb2:	d005      	beq.n	fcc0 <__aeabi_dmul+0x474>
    fcb4:	0003      	movs	r3, r0
    fcb6:	1d18      	adds	r0, r3, #4
    fcb8:	4298      	cmp	r0, r3
    fcba:	419b      	sbcs	r3, r3
    fcbc:	425b      	negs	r3, r3
    fcbe:	18e4      	adds	r4, r4, r3
    fcc0:	0223      	lsls	r3, r4, #8
    fcc2:	d521      	bpl.n	fd08 <__aeabi_dmul+0x4bc>
    fcc4:	2501      	movs	r5, #1
    fcc6:	9b01      	ldr	r3, [sp, #4]
    fcc8:	2401      	movs	r4, #1
    fcca:	401d      	ands	r5, r3
    fccc:	2300      	movs	r3, #0
    fcce:	2200      	movs	r2, #0
    fcd0:	4699      	mov	r9, r3
    fcd2:	e622      	b.n	f91a <__aeabi_dmul+0xce>
    fcd4:	251f      	movs	r5, #31
    fcd6:	0021      	movs	r1, r4
    fcd8:	426d      	negs	r5, r5
    fcda:	1a28      	subs	r0, r5, r0
    fcdc:	40c1      	lsrs	r1, r0
    fcde:	0008      	movs	r0, r1
    fce0:	2a20      	cmp	r2, #32
    fce2:	d01d      	beq.n	fd20 <__aeabi_dmul+0x4d4>
    fce4:	355f      	adds	r5, #95	; 0x5f
    fce6:	1aaa      	subs	r2, r5, r2
    fce8:	4094      	lsls	r4, r2
    fcea:	4323      	orrs	r3, r4
    fcec:	1e5c      	subs	r4, r3, #1
    fcee:	41a3      	sbcs	r3, r4
    fcf0:	2507      	movs	r5, #7
    fcf2:	4303      	orrs	r3, r0
    fcf4:	401d      	ands	r5, r3
    fcf6:	2200      	movs	r2, #0
    fcf8:	2d00      	cmp	r5, #0
    fcfa:	d009      	beq.n	fd10 <__aeabi_dmul+0x4c4>
    fcfc:	220f      	movs	r2, #15
    fcfe:	2400      	movs	r4, #0
    fd00:	401a      	ands	r2, r3
    fd02:	0018      	movs	r0, r3
    fd04:	2a04      	cmp	r2, #4
    fd06:	d1d6      	bne.n	fcb6 <__aeabi_dmul+0x46a>
    fd08:	0003      	movs	r3, r0
    fd0a:	0765      	lsls	r5, r4, #29
    fd0c:	0264      	lsls	r4, r4, #9
    fd0e:	0b22      	lsrs	r2, r4, #12
    fd10:	08db      	lsrs	r3, r3, #3
    fd12:	432b      	orrs	r3, r5
    fd14:	2501      	movs	r5, #1
    fd16:	4699      	mov	r9, r3
    fd18:	9b01      	ldr	r3, [sp, #4]
    fd1a:	2400      	movs	r4, #0
    fd1c:	401d      	ands	r5, r3
    fd1e:	e5fc      	b.n	f91a <__aeabi_dmul+0xce>
    fd20:	2400      	movs	r4, #0
    fd22:	e7e2      	b.n	fcea <__aeabi_dmul+0x49e>
    fd24:	2280      	movs	r2, #128	; 0x80
    fd26:	2501      	movs	r5, #1
    fd28:	0312      	lsls	r2, r2, #12
    fd2a:	4322      	orrs	r2, r4
    fd2c:	9901      	ldr	r1, [sp, #4]
    fd2e:	0312      	lsls	r2, r2, #12
    fd30:	0b12      	lsrs	r2, r2, #12
    fd32:	400d      	ands	r5, r1
    fd34:	4699      	mov	r9, r3
    fd36:	4c04      	ldr	r4, [pc, #16]	; (fd48 <__aeabi_dmul+0x4fc>)
    fd38:	e5ef      	b.n	f91a <__aeabi_dmul+0xce>
    fd3a:	46c0      	nop			; (mov r8, r8)
    fd3c:	000003ff 	.word	0x000003ff
    fd40:	feffffff 	.word	0xfeffffff
    fd44:	000007fe 	.word	0x000007fe
    fd48:	000007ff 	.word	0x000007ff

0000fd4c <__aeabi_dsub>:
    fd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd4e:	4646      	mov	r6, r8
    fd50:	46d6      	mov	lr, sl
    fd52:	464f      	mov	r7, r9
    fd54:	030c      	lsls	r4, r1, #12
    fd56:	b5c0      	push	{r6, r7, lr}
    fd58:	0fcd      	lsrs	r5, r1, #31
    fd5a:	004e      	lsls	r6, r1, #1
    fd5c:	0a61      	lsrs	r1, r4, #9
    fd5e:	0f44      	lsrs	r4, r0, #29
    fd60:	430c      	orrs	r4, r1
    fd62:	00c1      	lsls	r1, r0, #3
    fd64:	0058      	lsls	r0, r3, #1
    fd66:	0d40      	lsrs	r0, r0, #21
    fd68:	4684      	mov	ip, r0
    fd6a:	468a      	mov	sl, r1
    fd6c:	000f      	movs	r7, r1
    fd6e:	0319      	lsls	r1, r3, #12
    fd70:	0f50      	lsrs	r0, r2, #29
    fd72:	0a49      	lsrs	r1, r1, #9
    fd74:	4301      	orrs	r1, r0
    fd76:	48c6      	ldr	r0, [pc, #792]	; (10090 <__aeabi_dsub+0x344>)
    fd78:	0d76      	lsrs	r6, r6, #21
    fd7a:	46a8      	mov	r8, r5
    fd7c:	0fdb      	lsrs	r3, r3, #31
    fd7e:	00d2      	lsls	r2, r2, #3
    fd80:	4584      	cmp	ip, r0
    fd82:	d100      	bne.n	fd86 <__aeabi_dsub+0x3a>
    fd84:	e0d8      	b.n	ff38 <__aeabi_dsub+0x1ec>
    fd86:	2001      	movs	r0, #1
    fd88:	4043      	eors	r3, r0
    fd8a:	42ab      	cmp	r3, r5
    fd8c:	d100      	bne.n	fd90 <__aeabi_dsub+0x44>
    fd8e:	e0a6      	b.n	fede <__aeabi_dsub+0x192>
    fd90:	4660      	mov	r0, ip
    fd92:	1a35      	subs	r5, r6, r0
    fd94:	2d00      	cmp	r5, #0
    fd96:	dc00      	bgt.n	fd9a <__aeabi_dsub+0x4e>
    fd98:	e105      	b.n	ffa6 <__aeabi_dsub+0x25a>
    fd9a:	2800      	cmp	r0, #0
    fd9c:	d110      	bne.n	fdc0 <__aeabi_dsub+0x74>
    fd9e:	000b      	movs	r3, r1
    fda0:	4313      	orrs	r3, r2
    fda2:	d100      	bne.n	fda6 <__aeabi_dsub+0x5a>
    fda4:	e0d7      	b.n	ff56 <__aeabi_dsub+0x20a>
    fda6:	1e6b      	subs	r3, r5, #1
    fda8:	2b00      	cmp	r3, #0
    fdaa:	d000      	beq.n	fdae <__aeabi_dsub+0x62>
    fdac:	e14b      	b.n	10046 <__aeabi_dsub+0x2fa>
    fdae:	4653      	mov	r3, sl
    fdb0:	1a9f      	subs	r7, r3, r2
    fdb2:	45ba      	cmp	sl, r7
    fdb4:	4180      	sbcs	r0, r0
    fdb6:	1a64      	subs	r4, r4, r1
    fdb8:	4240      	negs	r0, r0
    fdba:	1a24      	subs	r4, r4, r0
    fdbc:	2601      	movs	r6, #1
    fdbe:	e01e      	b.n	fdfe <__aeabi_dsub+0xb2>
    fdc0:	4bb3      	ldr	r3, [pc, #716]	; (10090 <__aeabi_dsub+0x344>)
    fdc2:	429e      	cmp	r6, r3
    fdc4:	d048      	beq.n	fe58 <__aeabi_dsub+0x10c>
    fdc6:	2380      	movs	r3, #128	; 0x80
    fdc8:	041b      	lsls	r3, r3, #16
    fdca:	4319      	orrs	r1, r3
    fdcc:	2d38      	cmp	r5, #56	; 0x38
    fdce:	dd00      	ble.n	fdd2 <__aeabi_dsub+0x86>
    fdd0:	e119      	b.n	10006 <__aeabi_dsub+0x2ba>
    fdd2:	2d1f      	cmp	r5, #31
    fdd4:	dd00      	ble.n	fdd8 <__aeabi_dsub+0x8c>
    fdd6:	e14c      	b.n	10072 <__aeabi_dsub+0x326>
    fdd8:	2320      	movs	r3, #32
    fdda:	000f      	movs	r7, r1
    fddc:	1b5b      	subs	r3, r3, r5
    fdde:	0010      	movs	r0, r2
    fde0:	409a      	lsls	r2, r3
    fde2:	409f      	lsls	r7, r3
    fde4:	40e8      	lsrs	r0, r5
    fde6:	1e53      	subs	r3, r2, #1
    fde8:	419a      	sbcs	r2, r3
    fdea:	40e9      	lsrs	r1, r5
    fdec:	4307      	orrs	r7, r0
    fdee:	4317      	orrs	r7, r2
    fdf0:	4653      	mov	r3, sl
    fdf2:	1bdf      	subs	r7, r3, r7
    fdf4:	1a61      	subs	r1, r4, r1
    fdf6:	45ba      	cmp	sl, r7
    fdf8:	41a4      	sbcs	r4, r4
    fdfa:	4264      	negs	r4, r4
    fdfc:	1b0c      	subs	r4, r1, r4
    fdfe:	0223      	lsls	r3, r4, #8
    fe00:	d400      	bmi.n	fe04 <__aeabi_dsub+0xb8>
    fe02:	e0c5      	b.n	ff90 <__aeabi_dsub+0x244>
    fe04:	0264      	lsls	r4, r4, #9
    fe06:	0a65      	lsrs	r5, r4, #9
    fe08:	2d00      	cmp	r5, #0
    fe0a:	d100      	bne.n	fe0e <__aeabi_dsub+0xc2>
    fe0c:	e0f6      	b.n	fffc <__aeabi_dsub+0x2b0>
    fe0e:	0028      	movs	r0, r5
    fe10:	f000 fbd2 	bl	105b8 <__clzsi2>
    fe14:	0003      	movs	r3, r0
    fe16:	3b08      	subs	r3, #8
    fe18:	2b1f      	cmp	r3, #31
    fe1a:	dd00      	ble.n	fe1e <__aeabi_dsub+0xd2>
    fe1c:	e0e9      	b.n	fff2 <__aeabi_dsub+0x2a6>
    fe1e:	2220      	movs	r2, #32
    fe20:	003c      	movs	r4, r7
    fe22:	1ad2      	subs	r2, r2, r3
    fe24:	409d      	lsls	r5, r3
    fe26:	40d4      	lsrs	r4, r2
    fe28:	409f      	lsls	r7, r3
    fe2a:	4325      	orrs	r5, r4
    fe2c:	429e      	cmp	r6, r3
    fe2e:	dd00      	ble.n	fe32 <__aeabi_dsub+0xe6>
    fe30:	e0db      	b.n	ffea <__aeabi_dsub+0x29e>
    fe32:	1b9e      	subs	r6, r3, r6
    fe34:	1c73      	adds	r3, r6, #1
    fe36:	2b1f      	cmp	r3, #31
    fe38:	dd00      	ble.n	fe3c <__aeabi_dsub+0xf0>
    fe3a:	e10a      	b.n	10052 <__aeabi_dsub+0x306>
    fe3c:	2220      	movs	r2, #32
    fe3e:	0038      	movs	r0, r7
    fe40:	1ad2      	subs	r2, r2, r3
    fe42:	0029      	movs	r1, r5
    fe44:	4097      	lsls	r7, r2
    fe46:	002c      	movs	r4, r5
    fe48:	4091      	lsls	r1, r2
    fe4a:	40d8      	lsrs	r0, r3
    fe4c:	1e7a      	subs	r2, r7, #1
    fe4e:	4197      	sbcs	r7, r2
    fe50:	40dc      	lsrs	r4, r3
    fe52:	2600      	movs	r6, #0
    fe54:	4301      	orrs	r1, r0
    fe56:	430f      	orrs	r7, r1
    fe58:	077b      	lsls	r3, r7, #29
    fe5a:	d009      	beq.n	fe70 <__aeabi_dsub+0x124>
    fe5c:	230f      	movs	r3, #15
    fe5e:	403b      	ands	r3, r7
    fe60:	2b04      	cmp	r3, #4
    fe62:	d005      	beq.n	fe70 <__aeabi_dsub+0x124>
    fe64:	1d3b      	adds	r3, r7, #4
    fe66:	42bb      	cmp	r3, r7
    fe68:	41bf      	sbcs	r7, r7
    fe6a:	427f      	negs	r7, r7
    fe6c:	19e4      	adds	r4, r4, r7
    fe6e:	001f      	movs	r7, r3
    fe70:	0223      	lsls	r3, r4, #8
    fe72:	d525      	bpl.n	fec0 <__aeabi_dsub+0x174>
    fe74:	4b86      	ldr	r3, [pc, #536]	; (10090 <__aeabi_dsub+0x344>)
    fe76:	3601      	adds	r6, #1
    fe78:	429e      	cmp	r6, r3
    fe7a:	d100      	bne.n	fe7e <__aeabi_dsub+0x132>
    fe7c:	e0af      	b.n	ffde <__aeabi_dsub+0x292>
    fe7e:	4b85      	ldr	r3, [pc, #532]	; (10094 <__aeabi_dsub+0x348>)
    fe80:	2501      	movs	r5, #1
    fe82:	401c      	ands	r4, r3
    fe84:	4643      	mov	r3, r8
    fe86:	0762      	lsls	r2, r4, #29
    fe88:	08ff      	lsrs	r7, r7, #3
    fe8a:	0264      	lsls	r4, r4, #9
    fe8c:	0576      	lsls	r6, r6, #21
    fe8e:	4317      	orrs	r7, r2
    fe90:	0b24      	lsrs	r4, r4, #12
    fe92:	0d76      	lsrs	r6, r6, #21
    fe94:	401d      	ands	r5, r3
    fe96:	2100      	movs	r1, #0
    fe98:	0324      	lsls	r4, r4, #12
    fe9a:	0b23      	lsrs	r3, r4, #12
    fe9c:	0d0c      	lsrs	r4, r1, #20
    fe9e:	4a7e      	ldr	r2, [pc, #504]	; (10098 <__aeabi_dsub+0x34c>)
    fea0:	0524      	lsls	r4, r4, #20
    fea2:	431c      	orrs	r4, r3
    fea4:	4014      	ands	r4, r2
    fea6:	0533      	lsls	r3, r6, #20
    fea8:	4323      	orrs	r3, r4
    feaa:	005b      	lsls	r3, r3, #1
    feac:	07ed      	lsls	r5, r5, #31
    feae:	085b      	lsrs	r3, r3, #1
    feb0:	432b      	orrs	r3, r5
    feb2:	0038      	movs	r0, r7
    feb4:	0019      	movs	r1, r3
    feb6:	bc1c      	pop	{r2, r3, r4}
    feb8:	4690      	mov	r8, r2
    feba:	4699      	mov	r9, r3
    febc:	46a2      	mov	sl, r4
    febe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fec0:	2501      	movs	r5, #1
    fec2:	4643      	mov	r3, r8
    fec4:	0762      	lsls	r2, r4, #29
    fec6:	08ff      	lsrs	r7, r7, #3
    fec8:	4317      	orrs	r7, r2
    feca:	08e4      	lsrs	r4, r4, #3
    fecc:	401d      	ands	r5, r3
    fece:	4b70      	ldr	r3, [pc, #448]	; (10090 <__aeabi_dsub+0x344>)
    fed0:	429e      	cmp	r6, r3
    fed2:	d036      	beq.n	ff42 <__aeabi_dsub+0x1f6>
    fed4:	0324      	lsls	r4, r4, #12
    fed6:	0576      	lsls	r6, r6, #21
    fed8:	0b24      	lsrs	r4, r4, #12
    feda:	0d76      	lsrs	r6, r6, #21
    fedc:	e7db      	b.n	fe96 <__aeabi_dsub+0x14a>
    fede:	4663      	mov	r3, ip
    fee0:	1af3      	subs	r3, r6, r3
    fee2:	2b00      	cmp	r3, #0
    fee4:	dc00      	bgt.n	fee8 <__aeabi_dsub+0x19c>
    fee6:	e094      	b.n	10012 <__aeabi_dsub+0x2c6>
    fee8:	4660      	mov	r0, ip
    feea:	2800      	cmp	r0, #0
    feec:	d035      	beq.n	ff5a <__aeabi_dsub+0x20e>
    feee:	4868      	ldr	r0, [pc, #416]	; (10090 <__aeabi_dsub+0x344>)
    fef0:	4286      	cmp	r6, r0
    fef2:	d0b1      	beq.n	fe58 <__aeabi_dsub+0x10c>
    fef4:	2780      	movs	r7, #128	; 0x80
    fef6:	043f      	lsls	r7, r7, #16
    fef8:	4339      	orrs	r1, r7
    fefa:	2b38      	cmp	r3, #56	; 0x38
    fefc:	dc00      	bgt.n	ff00 <__aeabi_dsub+0x1b4>
    fefe:	e0fd      	b.n	100fc <__aeabi_dsub+0x3b0>
    ff00:	430a      	orrs	r2, r1
    ff02:	0017      	movs	r7, r2
    ff04:	2100      	movs	r1, #0
    ff06:	1e7a      	subs	r2, r7, #1
    ff08:	4197      	sbcs	r7, r2
    ff0a:	4457      	add	r7, sl
    ff0c:	4557      	cmp	r7, sl
    ff0e:	4180      	sbcs	r0, r0
    ff10:	1909      	adds	r1, r1, r4
    ff12:	4244      	negs	r4, r0
    ff14:	190c      	adds	r4, r1, r4
    ff16:	0223      	lsls	r3, r4, #8
    ff18:	d53a      	bpl.n	ff90 <__aeabi_dsub+0x244>
    ff1a:	4b5d      	ldr	r3, [pc, #372]	; (10090 <__aeabi_dsub+0x344>)
    ff1c:	3601      	adds	r6, #1
    ff1e:	429e      	cmp	r6, r3
    ff20:	d100      	bne.n	ff24 <__aeabi_dsub+0x1d8>
    ff22:	e14b      	b.n	101bc <__aeabi_dsub+0x470>
    ff24:	2201      	movs	r2, #1
    ff26:	4b5b      	ldr	r3, [pc, #364]	; (10094 <__aeabi_dsub+0x348>)
    ff28:	401c      	ands	r4, r3
    ff2a:	087b      	lsrs	r3, r7, #1
    ff2c:	4017      	ands	r7, r2
    ff2e:	431f      	orrs	r7, r3
    ff30:	07e2      	lsls	r2, r4, #31
    ff32:	4317      	orrs	r7, r2
    ff34:	0864      	lsrs	r4, r4, #1
    ff36:	e78f      	b.n	fe58 <__aeabi_dsub+0x10c>
    ff38:	0008      	movs	r0, r1
    ff3a:	4310      	orrs	r0, r2
    ff3c:	d000      	beq.n	ff40 <__aeabi_dsub+0x1f4>
    ff3e:	e724      	b.n	fd8a <__aeabi_dsub+0x3e>
    ff40:	e721      	b.n	fd86 <__aeabi_dsub+0x3a>
    ff42:	0023      	movs	r3, r4
    ff44:	433b      	orrs	r3, r7
    ff46:	d100      	bne.n	ff4a <__aeabi_dsub+0x1fe>
    ff48:	e1b9      	b.n	102be <__aeabi_dsub+0x572>
    ff4a:	2280      	movs	r2, #128	; 0x80
    ff4c:	0312      	lsls	r2, r2, #12
    ff4e:	4314      	orrs	r4, r2
    ff50:	0324      	lsls	r4, r4, #12
    ff52:	0b24      	lsrs	r4, r4, #12
    ff54:	e79f      	b.n	fe96 <__aeabi_dsub+0x14a>
    ff56:	002e      	movs	r6, r5
    ff58:	e77e      	b.n	fe58 <__aeabi_dsub+0x10c>
    ff5a:	0008      	movs	r0, r1
    ff5c:	4310      	orrs	r0, r2
    ff5e:	d100      	bne.n	ff62 <__aeabi_dsub+0x216>
    ff60:	e0ca      	b.n	100f8 <__aeabi_dsub+0x3ac>
    ff62:	1e58      	subs	r0, r3, #1
    ff64:	4684      	mov	ip, r0
    ff66:	2800      	cmp	r0, #0
    ff68:	d000      	beq.n	ff6c <__aeabi_dsub+0x220>
    ff6a:	e0e7      	b.n	1013c <__aeabi_dsub+0x3f0>
    ff6c:	4452      	add	r2, sl
    ff6e:	4552      	cmp	r2, sl
    ff70:	4180      	sbcs	r0, r0
    ff72:	1864      	adds	r4, r4, r1
    ff74:	4240      	negs	r0, r0
    ff76:	1824      	adds	r4, r4, r0
    ff78:	0017      	movs	r7, r2
    ff7a:	2601      	movs	r6, #1
    ff7c:	0223      	lsls	r3, r4, #8
    ff7e:	d507      	bpl.n	ff90 <__aeabi_dsub+0x244>
    ff80:	2602      	movs	r6, #2
    ff82:	e7cf      	b.n	ff24 <__aeabi_dsub+0x1d8>
    ff84:	4664      	mov	r4, ip
    ff86:	432c      	orrs	r4, r5
    ff88:	d100      	bne.n	ff8c <__aeabi_dsub+0x240>
    ff8a:	e1b3      	b.n	102f4 <__aeabi_dsub+0x5a8>
    ff8c:	002c      	movs	r4, r5
    ff8e:	4667      	mov	r7, ip
    ff90:	077b      	lsls	r3, r7, #29
    ff92:	d000      	beq.n	ff96 <__aeabi_dsub+0x24a>
    ff94:	e762      	b.n	fe5c <__aeabi_dsub+0x110>
    ff96:	0763      	lsls	r3, r4, #29
    ff98:	08ff      	lsrs	r7, r7, #3
    ff9a:	431f      	orrs	r7, r3
    ff9c:	2501      	movs	r5, #1
    ff9e:	4643      	mov	r3, r8
    ffa0:	08e4      	lsrs	r4, r4, #3
    ffa2:	401d      	ands	r5, r3
    ffa4:	e793      	b.n	fece <__aeabi_dsub+0x182>
    ffa6:	2d00      	cmp	r5, #0
    ffa8:	d178      	bne.n	1009c <__aeabi_dsub+0x350>
    ffaa:	1c75      	adds	r5, r6, #1
    ffac:	056d      	lsls	r5, r5, #21
    ffae:	0d6d      	lsrs	r5, r5, #21
    ffb0:	2d01      	cmp	r5, #1
    ffb2:	dc00      	bgt.n	ffb6 <__aeabi_dsub+0x26a>
    ffb4:	e0f2      	b.n	1019c <__aeabi_dsub+0x450>
    ffb6:	4650      	mov	r0, sl
    ffb8:	1a80      	subs	r0, r0, r2
    ffba:	4582      	cmp	sl, r0
    ffbc:	41bf      	sbcs	r7, r7
    ffbe:	1a65      	subs	r5, r4, r1
    ffc0:	427f      	negs	r7, r7
    ffc2:	1bed      	subs	r5, r5, r7
    ffc4:	4684      	mov	ip, r0
    ffc6:	0228      	lsls	r0, r5, #8
    ffc8:	d400      	bmi.n	ffcc <__aeabi_dsub+0x280>
    ffca:	e08c      	b.n	100e6 <__aeabi_dsub+0x39a>
    ffcc:	4650      	mov	r0, sl
    ffce:	1a17      	subs	r7, r2, r0
    ffd0:	42ba      	cmp	r2, r7
    ffd2:	4192      	sbcs	r2, r2
    ffd4:	1b0c      	subs	r4, r1, r4
    ffd6:	4255      	negs	r5, r2
    ffd8:	1b65      	subs	r5, r4, r5
    ffda:	4698      	mov	r8, r3
    ffdc:	e714      	b.n	fe08 <__aeabi_dsub+0xbc>
    ffde:	2501      	movs	r5, #1
    ffe0:	4643      	mov	r3, r8
    ffe2:	2400      	movs	r4, #0
    ffe4:	401d      	ands	r5, r3
    ffe6:	2700      	movs	r7, #0
    ffe8:	e755      	b.n	fe96 <__aeabi_dsub+0x14a>
    ffea:	4c2a      	ldr	r4, [pc, #168]	; (10094 <__aeabi_dsub+0x348>)
    ffec:	1af6      	subs	r6, r6, r3
    ffee:	402c      	ands	r4, r5
    fff0:	e732      	b.n	fe58 <__aeabi_dsub+0x10c>
    fff2:	003d      	movs	r5, r7
    fff4:	3828      	subs	r0, #40	; 0x28
    fff6:	4085      	lsls	r5, r0
    fff8:	2700      	movs	r7, #0
    fffa:	e717      	b.n	fe2c <__aeabi_dsub+0xe0>
    fffc:	0038      	movs	r0, r7
    fffe:	f000 fadb 	bl	105b8 <__clzsi2>
   10002:	3020      	adds	r0, #32
   10004:	e706      	b.n	fe14 <__aeabi_dsub+0xc8>
   10006:	430a      	orrs	r2, r1
   10008:	0017      	movs	r7, r2
   1000a:	2100      	movs	r1, #0
   1000c:	1e7a      	subs	r2, r7, #1
   1000e:	4197      	sbcs	r7, r2
   10010:	e6ee      	b.n	fdf0 <__aeabi_dsub+0xa4>
   10012:	2b00      	cmp	r3, #0
   10014:	d000      	beq.n	10018 <__aeabi_dsub+0x2cc>
   10016:	e0e5      	b.n	101e4 <__aeabi_dsub+0x498>
   10018:	1c73      	adds	r3, r6, #1
   1001a:	469c      	mov	ip, r3
   1001c:	055b      	lsls	r3, r3, #21
   1001e:	0d5b      	lsrs	r3, r3, #21
   10020:	2b01      	cmp	r3, #1
   10022:	dc00      	bgt.n	10026 <__aeabi_dsub+0x2da>
   10024:	e09f      	b.n	10166 <__aeabi_dsub+0x41a>
   10026:	4b1a      	ldr	r3, [pc, #104]	; (10090 <__aeabi_dsub+0x344>)
   10028:	459c      	cmp	ip, r3
   1002a:	d100      	bne.n	1002e <__aeabi_dsub+0x2e2>
   1002c:	e0c5      	b.n	101ba <__aeabi_dsub+0x46e>
   1002e:	4452      	add	r2, sl
   10030:	4552      	cmp	r2, sl
   10032:	4180      	sbcs	r0, r0
   10034:	1864      	adds	r4, r4, r1
   10036:	4240      	negs	r0, r0
   10038:	1824      	adds	r4, r4, r0
   1003a:	07e7      	lsls	r7, r4, #31
   1003c:	0852      	lsrs	r2, r2, #1
   1003e:	4317      	orrs	r7, r2
   10040:	0864      	lsrs	r4, r4, #1
   10042:	4666      	mov	r6, ip
   10044:	e708      	b.n	fe58 <__aeabi_dsub+0x10c>
   10046:	4812      	ldr	r0, [pc, #72]	; (10090 <__aeabi_dsub+0x344>)
   10048:	4285      	cmp	r5, r0
   1004a:	d100      	bne.n	1004e <__aeabi_dsub+0x302>
   1004c:	e085      	b.n	1015a <__aeabi_dsub+0x40e>
   1004e:	001d      	movs	r5, r3
   10050:	e6bc      	b.n	fdcc <__aeabi_dsub+0x80>
   10052:	0029      	movs	r1, r5
   10054:	3e1f      	subs	r6, #31
   10056:	40f1      	lsrs	r1, r6
   10058:	2b20      	cmp	r3, #32
   1005a:	d100      	bne.n	1005e <__aeabi_dsub+0x312>
   1005c:	e07f      	b.n	1015e <__aeabi_dsub+0x412>
   1005e:	2240      	movs	r2, #64	; 0x40
   10060:	1ad3      	subs	r3, r2, r3
   10062:	409d      	lsls	r5, r3
   10064:	432f      	orrs	r7, r5
   10066:	1e7d      	subs	r5, r7, #1
   10068:	41af      	sbcs	r7, r5
   1006a:	2400      	movs	r4, #0
   1006c:	430f      	orrs	r7, r1
   1006e:	2600      	movs	r6, #0
   10070:	e78e      	b.n	ff90 <__aeabi_dsub+0x244>
   10072:	002b      	movs	r3, r5
   10074:	000f      	movs	r7, r1
   10076:	3b20      	subs	r3, #32
   10078:	40df      	lsrs	r7, r3
   1007a:	2d20      	cmp	r5, #32
   1007c:	d071      	beq.n	10162 <__aeabi_dsub+0x416>
   1007e:	2340      	movs	r3, #64	; 0x40
   10080:	1b5d      	subs	r5, r3, r5
   10082:	40a9      	lsls	r1, r5
   10084:	430a      	orrs	r2, r1
   10086:	1e51      	subs	r1, r2, #1
   10088:	418a      	sbcs	r2, r1
   1008a:	2100      	movs	r1, #0
   1008c:	4317      	orrs	r7, r2
   1008e:	e6af      	b.n	fdf0 <__aeabi_dsub+0xa4>
   10090:	000007ff 	.word	0x000007ff
   10094:	ff7fffff 	.word	0xff7fffff
   10098:	800fffff 	.word	0x800fffff
   1009c:	2e00      	cmp	r6, #0
   1009e:	d03e      	beq.n	1011e <__aeabi_dsub+0x3d2>
   100a0:	4eb3      	ldr	r6, [pc, #716]	; (10370 <__aeabi_dsub+0x624>)
   100a2:	45b4      	cmp	ip, r6
   100a4:	d045      	beq.n	10132 <__aeabi_dsub+0x3e6>
   100a6:	2680      	movs	r6, #128	; 0x80
   100a8:	0436      	lsls	r6, r6, #16
   100aa:	426d      	negs	r5, r5
   100ac:	4334      	orrs	r4, r6
   100ae:	2d38      	cmp	r5, #56	; 0x38
   100b0:	dd00      	ble.n	100b4 <__aeabi_dsub+0x368>
   100b2:	e0a8      	b.n	10206 <__aeabi_dsub+0x4ba>
   100b4:	2d1f      	cmp	r5, #31
   100b6:	dd00      	ble.n	100ba <__aeabi_dsub+0x36e>
   100b8:	e11f      	b.n	102fa <__aeabi_dsub+0x5ae>
   100ba:	2620      	movs	r6, #32
   100bc:	0027      	movs	r7, r4
   100be:	4650      	mov	r0, sl
   100c0:	1b76      	subs	r6, r6, r5
   100c2:	40b7      	lsls	r7, r6
   100c4:	40e8      	lsrs	r0, r5
   100c6:	4307      	orrs	r7, r0
   100c8:	4650      	mov	r0, sl
   100ca:	40b0      	lsls	r0, r6
   100cc:	1e46      	subs	r6, r0, #1
   100ce:	41b0      	sbcs	r0, r6
   100d0:	40ec      	lsrs	r4, r5
   100d2:	4338      	orrs	r0, r7
   100d4:	1a17      	subs	r7, r2, r0
   100d6:	42ba      	cmp	r2, r7
   100d8:	4192      	sbcs	r2, r2
   100da:	1b0c      	subs	r4, r1, r4
   100dc:	4252      	negs	r2, r2
   100de:	1aa4      	subs	r4, r4, r2
   100e0:	4666      	mov	r6, ip
   100e2:	4698      	mov	r8, r3
   100e4:	e68b      	b.n	fdfe <__aeabi_dsub+0xb2>
   100e6:	4664      	mov	r4, ip
   100e8:	4667      	mov	r7, ip
   100ea:	432c      	orrs	r4, r5
   100ec:	d000      	beq.n	100f0 <__aeabi_dsub+0x3a4>
   100ee:	e68b      	b.n	fe08 <__aeabi_dsub+0xbc>
   100f0:	2500      	movs	r5, #0
   100f2:	2600      	movs	r6, #0
   100f4:	2700      	movs	r7, #0
   100f6:	e6ea      	b.n	fece <__aeabi_dsub+0x182>
   100f8:	001e      	movs	r6, r3
   100fa:	e6ad      	b.n	fe58 <__aeabi_dsub+0x10c>
   100fc:	2b1f      	cmp	r3, #31
   100fe:	dc60      	bgt.n	101c2 <__aeabi_dsub+0x476>
   10100:	2720      	movs	r7, #32
   10102:	1af8      	subs	r0, r7, r3
   10104:	000f      	movs	r7, r1
   10106:	4684      	mov	ip, r0
   10108:	4087      	lsls	r7, r0
   1010a:	0010      	movs	r0, r2
   1010c:	40d8      	lsrs	r0, r3
   1010e:	4307      	orrs	r7, r0
   10110:	4660      	mov	r0, ip
   10112:	4082      	lsls	r2, r0
   10114:	1e50      	subs	r0, r2, #1
   10116:	4182      	sbcs	r2, r0
   10118:	40d9      	lsrs	r1, r3
   1011a:	4317      	orrs	r7, r2
   1011c:	e6f5      	b.n	ff0a <__aeabi_dsub+0x1be>
   1011e:	0026      	movs	r6, r4
   10120:	4650      	mov	r0, sl
   10122:	4306      	orrs	r6, r0
   10124:	d005      	beq.n	10132 <__aeabi_dsub+0x3e6>
   10126:	43ed      	mvns	r5, r5
   10128:	2d00      	cmp	r5, #0
   1012a:	d0d3      	beq.n	100d4 <__aeabi_dsub+0x388>
   1012c:	4e90      	ldr	r6, [pc, #576]	; (10370 <__aeabi_dsub+0x624>)
   1012e:	45b4      	cmp	ip, r6
   10130:	d1bd      	bne.n	100ae <__aeabi_dsub+0x362>
   10132:	000c      	movs	r4, r1
   10134:	0017      	movs	r7, r2
   10136:	4666      	mov	r6, ip
   10138:	4698      	mov	r8, r3
   1013a:	e68d      	b.n	fe58 <__aeabi_dsub+0x10c>
   1013c:	488c      	ldr	r0, [pc, #560]	; (10370 <__aeabi_dsub+0x624>)
   1013e:	4283      	cmp	r3, r0
   10140:	d00b      	beq.n	1015a <__aeabi_dsub+0x40e>
   10142:	4663      	mov	r3, ip
   10144:	e6d9      	b.n	fefa <__aeabi_dsub+0x1ae>
   10146:	2d00      	cmp	r5, #0
   10148:	d000      	beq.n	1014c <__aeabi_dsub+0x400>
   1014a:	e096      	b.n	1027a <__aeabi_dsub+0x52e>
   1014c:	0008      	movs	r0, r1
   1014e:	4310      	orrs	r0, r2
   10150:	d100      	bne.n	10154 <__aeabi_dsub+0x408>
   10152:	e0e2      	b.n	1031a <__aeabi_dsub+0x5ce>
   10154:	000c      	movs	r4, r1
   10156:	0017      	movs	r7, r2
   10158:	4698      	mov	r8, r3
   1015a:	4e85      	ldr	r6, [pc, #532]	; (10370 <__aeabi_dsub+0x624>)
   1015c:	e67c      	b.n	fe58 <__aeabi_dsub+0x10c>
   1015e:	2500      	movs	r5, #0
   10160:	e780      	b.n	10064 <__aeabi_dsub+0x318>
   10162:	2100      	movs	r1, #0
   10164:	e78e      	b.n	10084 <__aeabi_dsub+0x338>
   10166:	0023      	movs	r3, r4
   10168:	4650      	mov	r0, sl
   1016a:	4303      	orrs	r3, r0
   1016c:	2e00      	cmp	r6, #0
   1016e:	d000      	beq.n	10172 <__aeabi_dsub+0x426>
   10170:	e0a8      	b.n	102c4 <__aeabi_dsub+0x578>
   10172:	2b00      	cmp	r3, #0
   10174:	d100      	bne.n	10178 <__aeabi_dsub+0x42c>
   10176:	e0de      	b.n	10336 <__aeabi_dsub+0x5ea>
   10178:	000b      	movs	r3, r1
   1017a:	4313      	orrs	r3, r2
   1017c:	d100      	bne.n	10180 <__aeabi_dsub+0x434>
   1017e:	e66b      	b.n	fe58 <__aeabi_dsub+0x10c>
   10180:	4452      	add	r2, sl
   10182:	4552      	cmp	r2, sl
   10184:	4180      	sbcs	r0, r0
   10186:	1864      	adds	r4, r4, r1
   10188:	4240      	negs	r0, r0
   1018a:	1824      	adds	r4, r4, r0
   1018c:	0017      	movs	r7, r2
   1018e:	0223      	lsls	r3, r4, #8
   10190:	d400      	bmi.n	10194 <__aeabi_dsub+0x448>
   10192:	e6fd      	b.n	ff90 <__aeabi_dsub+0x244>
   10194:	4b77      	ldr	r3, [pc, #476]	; (10374 <__aeabi_dsub+0x628>)
   10196:	4666      	mov	r6, ip
   10198:	401c      	ands	r4, r3
   1019a:	e65d      	b.n	fe58 <__aeabi_dsub+0x10c>
   1019c:	0025      	movs	r5, r4
   1019e:	4650      	mov	r0, sl
   101a0:	4305      	orrs	r5, r0
   101a2:	2e00      	cmp	r6, #0
   101a4:	d1cf      	bne.n	10146 <__aeabi_dsub+0x3fa>
   101a6:	2d00      	cmp	r5, #0
   101a8:	d14f      	bne.n	1024a <__aeabi_dsub+0x4fe>
   101aa:	000c      	movs	r4, r1
   101ac:	4314      	orrs	r4, r2
   101ae:	d100      	bne.n	101b2 <__aeabi_dsub+0x466>
   101b0:	e0a0      	b.n	102f4 <__aeabi_dsub+0x5a8>
   101b2:	000c      	movs	r4, r1
   101b4:	0017      	movs	r7, r2
   101b6:	4698      	mov	r8, r3
   101b8:	e64e      	b.n	fe58 <__aeabi_dsub+0x10c>
   101ba:	4666      	mov	r6, ip
   101bc:	2400      	movs	r4, #0
   101be:	2700      	movs	r7, #0
   101c0:	e685      	b.n	fece <__aeabi_dsub+0x182>
   101c2:	001f      	movs	r7, r3
   101c4:	0008      	movs	r0, r1
   101c6:	3f20      	subs	r7, #32
   101c8:	40f8      	lsrs	r0, r7
   101ca:	0007      	movs	r7, r0
   101cc:	2b20      	cmp	r3, #32
   101ce:	d100      	bne.n	101d2 <__aeabi_dsub+0x486>
   101d0:	e08e      	b.n	102f0 <__aeabi_dsub+0x5a4>
   101d2:	2040      	movs	r0, #64	; 0x40
   101d4:	1ac3      	subs	r3, r0, r3
   101d6:	4099      	lsls	r1, r3
   101d8:	430a      	orrs	r2, r1
   101da:	1e51      	subs	r1, r2, #1
   101dc:	418a      	sbcs	r2, r1
   101de:	2100      	movs	r1, #0
   101e0:	4317      	orrs	r7, r2
   101e2:	e692      	b.n	ff0a <__aeabi_dsub+0x1be>
   101e4:	2e00      	cmp	r6, #0
   101e6:	d114      	bne.n	10212 <__aeabi_dsub+0x4c6>
   101e8:	0026      	movs	r6, r4
   101ea:	4650      	mov	r0, sl
   101ec:	4306      	orrs	r6, r0
   101ee:	d062      	beq.n	102b6 <__aeabi_dsub+0x56a>
   101f0:	43db      	mvns	r3, r3
   101f2:	2b00      	cmp	r3, #0
   101f4:	d15c      	bne.n	102b0 <__aeabi_dsub+0x564>
   101f6:	1887      	adds	r7, r0, r2
   101f8:	4297      	cmp	r7, r2
   101fa:	4192      	sbcs	r2, r2
   101fc:	1864      	adds	r4, r4, r1
   101fe:	4252      	negs	r2, r2
   10200:	18a4      	adds	r4, r4, r2
   10202:	4666      	mov	r6, ip
   10204:	e687      	b.n	ff16 <__aeabi_dsub+0x1ca>
   10206:	4650      	mov	r0, sl
   10208:	4320      	orrs	r0, r4
   1020a:	1e44      	subs	r4, r0, #1
   1020c:	41a0      	sbcs	r0, r4
   1020e:	2400      	movs	r4, #0
   10210:	e760      	b.n	100d4 <__aeabi_dsub+0x388>
   10212:	4e57      	ldr	r6, [pc, #348]	; (10370 <__aeabi_dsub+0x624>)
   10214:	45b4      	cmp	ip, r6
   10216:	d04e      	beq.n	102b6 <__aeabi_dsub+0x56a>
   10218:	2680      	movs	r6, #128	; 0x80
   1021a:	0436      	lsls	r6, r6, #16
   1021c:	425b      	negs	r3, r3
   1021e:	4334      	orrs	r4, r6
   10220:	2b38      	cmp	r3, #56	; 0x38
   10222:	dd00      	ble.n	10226 <__aeabi_dsub+0x4da>
   10224:	e07f      	b.n	10326 <__aeabi_dsub+0x5da>
   10226:	2b1f      	cmp	r3, #31
   10228:	dd00      	ble.n	1022c <__aeabi_dsub+0x4e0>
   1022a:	e08b      	b.n	10344 <__aeabi_dsub+0x5f8>
   1022c:	2620      	movs	r6, #32
   1022e:	0027      	movs	r7, r4
   10230:	4650      	mov	r0, sl
   10232:	1af6      	subs	r6, r6, r3
   10234:	40b7      	lsls	r7, r6
   10236:	40d8      	lsrs	r0, r3
   10238:	4307      	orrs	r7, r0
   1023a:	4650      	mov	r0, sl
   1023c:	40b0      	lsls	r0, r6
   1023e:	1e46      	subs	r6, r0, #1
   10240:	41b0      	sbcs	r0, r6
   10242:	4307      	orrs	r7, r0
   10244:	40dc      	lsrs	r4, r3
   10246:	18bf      	adds	r7, r7, r2
   10248:	e7d6      	b.n	101f8 <__aeabi_dsub+0x4ac>
   1024a:	000d      	movs	r5, r1
   1024c:	4315      	orrs	r5, r2
   1024e:	d100      	bne.n	10252 <__aeabi_dsub+0x506>
   10250:	e602      	b.n	fe58 <__aeabi_dsub+0x10c>
   10252:	4650      	mov	r0, sl
   10254:	1a80      	subs	r0, r0, r2
   10256:	4582      	cmp	sl, r0
   10258:	41bf      	sbcs	r7, r7
   1025a:	1a65      	subs	r5, r4, r1
   1025c:	427f      	negs	r7, r7
   1025e:	1bed      	subs	r5, r5, r7
   10260:	4684      	mov	ip, r0
   10262:	0228      	lsls	r0, r5, #8
   10264:	d400      	bmi.n	10268 <__aeabi_dsub+0x51c>
   10266:	e68d      	b.n	ff84 <__aeabi_dsub+0x238>
   10268:	4650      	mov	r0, sl
   1026a:	1a17      	subs	r7, r2, r0
   1026c:	42ba      	cmp	r2, r7
   1026e:	4192      	sbcs	r2, r2
   10270:	1b0c      	subs	r4, r1, r4
   10272:	4252      	negs	r2, r2
   10274:	1aa4      	subs	r4, r4, r2
   10276:	4698      	mov	r8, r3
   10278:	e5ee      	b.n	fe58 <__aeabi_dsub+0x10c>
   1027a:	000d      	movs	r5, r1
   1027c:	4315      	orrs	r5, r2
   1027e:	d100      	bne.n	10282 <__aeabi_dsub+0x536>
   10280:	e76b      	b.n	1015a <__aeabi_dsub+0x40e>
   10282:	4650      	mov	r0, sl
   10284:	0767      	lsls	r7, r4, #29
   10286:	08c0      	lsrs	r0, r0, #3
   10288:	4307      	orrs	r7, r0
   1028a:	2080      	movs	r0, #128	; 0x80
   1028c:	08e4      	lsrs	r4, r4, #3
   1028e:	0300      	lsls	r0, r0, #12
   10290:	4204      	tst	r4, r0
   10292:	d007      	beq.n	102a4 <__aeabi_dsub+0x558>
   10294:	08cd      	lsrs	r5, r1, #3
   10296:	4205      	tst	r5, r0
   10298:	d104      	bne.n	102a4 <__aeabi_dsub+0x558>
   1029a:	002c      	movs	r4, r5
   1029c:	4698      	mov	r8, r3
   1029e:	08d7      	lsrs	r7, r2, #3
   102a0:	0749      	lsls	r1, r1, #29
   102a2:	430f      	orrs	r7, r1
   102a4:	0f7b      	lsrs	r3, r7, #29
   102a6:	00e4      	lsls	r4, r4, #3
   102a8:	431c      	orrs	r4, r3
   102aa:	00ff      	lsls	r7, r7, #3
   102ac:	4e30      	ldr	r6, [pc, #192]	; (10370 <__aeabi_dsub+0x624>)
   102ae:	e5d3      	b.n	fe58 <__aeabi_dsub+0x10c>
   102b0:	4e2f      	ldr	r6, [pc, #188]	; (10370 <__aeabi_dsub+0x624>)
   102b2:	45b4      	cmp	ip, r6
   102b4:	d1b4      	bne.n	10220 <__aeabi_dsub+0x4d4>
   102b6:	000c      	movs	r4, r1
   102b8:	0017      	movs	r7, r2
   102ba:	4666      	mov	r6, ip
   102bc:	e5cc      	b.n	fe58 <__aeabi_dsub+0x10c>
   102be:	2700      	movs	r7, #0
   102c0:	2400      	movs	r4, #0
   102c2:	e5e8      	b.n	fe96 <__aeabi_dsub+0x14a>
   102c4:	2b00      	cmp	r3, #0
   102c6:	d039      	beq.n	1033c <__aeabi_dsub+0x5f0>
   102c8:	000b      	movs	r3, r1
   102ca:	4313      	orrs	r3, r2
   102cc:	d100      	bne.n	102d0 <__aeabi_dsub+0x584>
   102ce:	e744      	b.n	1015a <__aeabi_dsub+0x40e>
   102d0:	08c0      	lsrs	r0, r0, #3
   102d2:	0767      	lsls	r7, r4, #29
   102d4:	4307      	orrs	r7, r0
   102d6:	2080      	movs	r0, #128	; 0x80
   102d8:	08e4      	lsrs	r4, r4, #3
   102da:	0300      	lsls	r0, r0, #12
   102dc:	4204      	tst	r4, r0
   102de:	d0e1      	beq.n	102a4 <__aeabi_dsub+0x558>
   102e0:	08cb      	lsrs	r3, r1, #3
   102e2:	4203      	tst	r3, r0
   102e4:	d1de      	bne.n	102a4 <__aeabi_dsub+0x558>
   102e6:	08d7      	lsrs	r7, r2, #3
   102e8:	0749      	lsls	r1, r1, #29
   102ea:	430f      	orrs	r7, r1
   102ec:	001c      	movs	r4, r3
   102ee:	e7d9      	b.n	102a4 <__aeabi_dsub+0x558>
   102f0:	2100      	movs	r1, #0
   102f2:	e771      	b.n	101d8 <__aeabi_dsub+0x48c>
   102f4:	2500      	movs	r5, #0
   102f6:	2700      	movs	r7, #0
   102f8:	e5e9      	b.n	fece <__aeabi_dsub+0x182>
   102fa:	002e      	movs	r6, r5
   102fc:	0027      	movs	r7, r4
   102fe:	3e20      	subs	r6, #32
   10300:	40f7      	lsrs	r7, r6
   10302:	2d20      	cmp	r5, #32
   10304:	d02f      	beq.n	10366 <__aeabi_dsub+0x61a>
   10306:	2640      	movs	r6, #64	; 0x40
   10308:	1b75      	subs	r5, r6, r5
   1030a:	40ac      	lsls	r4, r5
   1030c:	4650      	mov	r0, sl
   1030e:	4320      	orrs	r0, r4
   10310:	1e44      	subs	r4, r0, #1
   10312:	41a0      	sbcs	r0, r4
   10314:	2400      	movs	r4, #0
   10316:	4338      	orrs	r0, r7
   10318:	e6dc      	b.n	100d4 <__aeabi_dsub+0x388>
   1031a:	2480      	movs	r4, #128	; 0x80
   1031c:	2500      	movs	r5, #0
   1031e:	0324      	lsls	r4, r4, #12
   10320:	4e13      	ldr	r6, [pc, #76]	; (10370 <__aeabi_dsub+0x624>)
   10322:	2700      	movs	r7, #0
   10324:	e5d3      	b.n	fece <__aeabi_dsub+0x182>
   10326:	4650      	mov	r0, sl
   10328:	4320      	orrs	r0, r4
   1032a:	0007      	movs	r7, r0
   1032c:	1e78      	subs	r0, r7, #1
   1032e:	4187      	sbcs	r7, r0
   10330:	2400      	movs	r4, #0
   10332:	18bf      	adds	r7, r7, r2
   10334:	e760      	b.n	101f8 <__aeabi_dsub+0x4ac>
   10336:	000c      	movs	r4, r1
   10338:	0017      	movs	r7, r2
   1033a:	e58d      	b.n	fe58 <__aeabi_dsub+0x10c>
   1033c:	000c      	movs	r4, r1
   1033e:	0017      	movs	r7, r2
   10340:	4e0b      	ldr	r6, [pc, #44]	; (10370 <__aeabi_dsub+0x624>)
   10342:	e589      	b.n	fe58 <__aeabi_dsub+0x10c>
   10344:	001e      	movs	r6, r3
   10346:	0027      	movs	r7, r4
   10348:	3e20      	subs	r6, #32
   1034a:	40f7      	lsrs	r7, r6
   1034c:	2b20      	cmp	r3, #32
   1034e:	d00c      	beq.n	1036a <__aeabi_dsub+0x61e>
   10350:	2640      	movs	r6, #64	; 0x40
   10352:	1af3      	subs	r3, r6, r3
   10354:	409c      	lsls	r4, r3
   10356:	4650      	mov	r0, sl
   10358:	4320      	orrs	r0, r4
   1035a:	1e44      	subs	r4, r0, #1
   1035c:	41a0      	sbcs	r0, r4
   1035e:	4307      	orrs	r7, r0
   10360:	2400      	movs	r4, #0
   10362:	18bf      	adds	r7, r7, r2
   10364:	e748      	b.n	101f8 <__aeabi_dsub+0x4ac>
   10366:	2400      	movs	r4, #0
   10368:	e7d0      	b.n	1030c <__aeabi_dsub+0x5c0>
   1036a:	2400      	movs	r4, #0
   1036c:	e7f3      	b.n	10356 <__aeabi_dsub+0x60a>
   1036e:	46c0      	nop			; (mov r8, r8)
   10370:	000007ff 	.word	0x000007ff
   10374:	ff7fffff 	.word	0xff7fffff

00010378 <__aeabi_dcmpun>:
   10378:	b570      	push	{r4, r5, r6, lr}
   1037a:	4e0e      	ldr	r6, [pc, #56]	; (103b4 <__aeabi_dcmpun+0x3c>)
   1037c:	030d      	lsls	r5, r1, #12
   1037e:	031c      	lsls	r4, r3, #12
   10380:	0049      	lsls	r1, r1, #1
   10382:	005b      	lsls	r3, r3, #1
   10384:	0b2d      	lsrs	r5, r5, #12
   10386:	0d49      	lsrs	r1, r1, #21
   10388:	0b24      	lsrs	r4, r4, #12
   1038a:	0d5b      	lsrs	r3, r3, #21
   1038c:	42b1      	cmp	r1, r6
   1038e:	d004      	beq.n	1039a <__aeabi_dcmpun+0x22>
   10390:	4908      	ldr	r1, [pc, #32]	; (103b4 <__aeabi_dcmpun+0x3c>)
   10392:	2000      	movs	r0, #0
   10394:	428b      	cmp	r3, r1
   10396:	d008      	beq.n	103aa <__aeabi_dcmpun+0x32>
   10398:	bd70      	pop	{r4, r5, r6, pc}
   1039a:	4305      	orrs	r5, r0
   1039c:	2001      	movs	r0, #1
   1039e:	2d00      	cmp	r5, #0
   103a0:	d1fa      	bne.n	10398 <__aeabi_dcmpun+0x20>
   103a2:	4904      	ldr	r1, [pc, #16]	; (103b4 <__aeabi_dcmpun+0x3c>)
   103a4:	2000      	movs	r0, #0
   103a6:	428b      	cmp	r3, r1
   103a8:	d1f6      	bne.n	10398 <__aeabi_dcmpun+0x20>
   103aa:	4314      	orrs	r4, r2
   103ac:	0020      	movs	r0, r4
   103ae:	1e44      	subs	r4, r0, #1
   103b0:	41a0      	sbcs	r0, r4
   103b2:	e7f1      	b.n	10398 <__aeabi_dcmpun+0x20>
   103b4:	000007ff 	.word	0x000007ff

000103b8 <__aeabi_d2iz>:
   103b8:	b530      	push	{r4, r5, lr}
   103ba:	4d13      	ldr	r5, [pc, #76]	; (10408 <__aeabi_d2iz+0x50>)
   103bc:	030a      	lsls	r2, r1, #12
   103be:	004b      	lsls	r3, r1, #1
   103c0:	0b12      	lsrs	r2, r2, #12
   103c2:	0d5b      	lsrs	r3, r3, #21
   103c4:	0fc9      	lsrs	r1, r1, #31
   103c6:	2400      	movs	r4, #0
   103c8:	42ab      	cmp	r3, r5
   103ca:	dd10      	ble.n	103ee <__aeabi_d2iz+0x36>
   103cc:	4c0f      	ldr	r4, [pc, #60]	; (1040c <__aeabi_d2iz+0x54>)
   103ce:	42a3      	cmp	r3, r4
   103d0:	dc0f      	bgt.n	103f2 <__aeabi_d2iz+0x3a>
   103d2:	2480      	movs	r4, #128	; 0x80
   103d4:	4d0e      	ldr	r5, [pc, #56]	; (10410 <__aeabi_d2iz+0x58>)
   103d6:	0364      	lsls	r4, r4, #13
   103d8:	4322      	orrs	r2, r4
   103da:	1aed      	subs	r5, r5, r3
   103dc:	2d1f      	cmp	r5, #31
   103de:	dd0b      	ble.n	103f8 <__aeabi_d2iz+0x40>
   103e0:	480c      	ldr	r0, [pc, #48]	; (10414 <__aeabi_d2iz+0x5c>)
   103e2:	1ac3      	subs	r3, r0, r3
   103e4:	40da      	lsrs	r2, r3
   103e6:	4254      	negs	r4, r2
   103e8:	2900      	cmp	r1, #0
   103ea:	d100      	bne.n	103ee <__aeabi_d2iz+0x36>
   103ec:	0014      	movs	r4, r2
   103ee:	0020      	movs	r0, r4
   103f0:	bd30      	pop	{r4, r5, pc}
   103f2:	4b09      	ldr	r3, [pc, #36]	; (10418 <__aeabi_d2iz+0x60>)
   103f4:	18cc      	adds	r4, r1, r3
   103f6:	e7fa      	b.n	103ee <__aeabi_d2iz+0x36>
   103f8:	4c08      	ldr	r4, [pc, #32]	; (1041c <__aeabi_d2iz+0x64>)
   103fa:	40e8      	lsrs	r0, r5
   103fc:	46a4      	mov	ip, r4
   103fe:	4463      	add	r3, ip
   10400:	409a      	lsls	r2, r3
   10402:	4302      	orrs	r2, r0
   10404:	e7ef      	b.n	103e6 <__aeabi_d2iz+0x2e>
   10406:	46c0      	nop			; (mov r8, r8)
   10408:	000003fe 	.word	0x000003fe
   1040c:	0000041d 	.word	0x0000041d
   10410:	00000433 	.word	0x00000433
   10414:	00000413 	.word	0x00000413
   10418:	7fffffff 	.word	0x7fffffff
   1041c:	fffffbed 	.word	0xfffffbed

00010420 <__aeabi_i2d>:
   10420:	b570      	push	{r4, r5, r6, lr}
   10422:	2800      	cmp	r0, #0
   10424:	d030      	beq.n	10488 <__aeabi_i2d+0x68>
   10426:	17c3      	asrs	r3, r0, #31
   10428:	18c4      	adds	r4, r0, r3
   1042a:	405c      	eors	r4, r3
   1042c:	0fc5      	lsrs	r5, r0, #31
   1042e:	0020      	movs	r0, r4
   10430:	f000 f8c2 	bl	105b8 <__clzsi2>
   10434:	4b17      	ldr	r3, [pc, #92]	; (10494 <__aeabi_i2d+0x74>)
   10436:	4a18      	ldr	r2, [pc, #96]	; (10498 <__aeabi_i2d+0x78>)
   10438:	1a1b      	subs	r3, r3, r0
   1043a:	1ad2      	subs	r2, r2, r3
   1043c:	2a1f      	cmp	r2, #31
   1043e:	dd18      	ble.n	10472 <__aeabi_i2d+0x52>
   10440:	4a16      	ldr	r2, [pc, #88]	; (1049c <__aeabi_i2d+0x7c>)
   10442:	1ad2      	subs	r2, r2, r3
   10444:	4094      	lsls	r4, r2
   10446:	2200      	movs	r2, #0
   10448:	0324      	lsls	r4, r4, #12
   1044a:	055b      	lsls	r3, r3, #21
   1044c:	0b24      	lsrs	r4, r4, #12
   1044e:	0d5b      	lsrs	r3, r3, #21
   10450:	2100      	movs	r1, #0
   10452:	0010      	movs	r0, r2
   10454:	0324      	lsls	r4, r4, #12
   10456:	0d0a      	lsrs	r2, r1, #20
   10458:	0b24      	lsrs	r4, r4, #12
   1045a:	0512      	lsls	r2, r2, #20
   1045c:	4322      	orrs	r2, r4
   1045e:	4c10      	ldr	r4, [pc, #64]	; (104a0 <__aeabi_i2d+0x80>)
   10460:	051b      	lsls	r3, r3, #20
   10462:	4022      	ands	r2, r4
   10464:	4313      	orrs	r3, r2
   10466:	005b      	lsls	r3, r3, #1
   10468:	07ed      	lsls	r5, r5, #31
   1046a:	085b      	lsrs	r3, r3, #1
   1046c:	432b      	orrs	r3, r5
   1046e:	0019      	movs	r1, r3
   10470:	bd70      	pop	{r4, r5, r6, pc}
   10472:	0021      	movs	r1, r4
   10474:	4091      	lsls	r1, r2
   10476:	000a      	movs	r2, r1
   10478:	210b      	movs	r1, #11
   1047a:	1a08      	subs	r0, r1, r0
   1047c:	40c4      	lsrs	r4, r0
   1047e:	055b      	lsls	r3, r3, #21
   10480:	0324      	lsls	r4, r4, #12
   10482:	0b24      	lsrs	r4, r4, #12
   10484:	0d5b      	lsrs	r3, r3, #21
   10486:	e7e3      	b.n	10450 <__aeabi_i2d+0x30>
   10488:	2500      	movs	r5, #0
   1048a:	2300      	movs	r3, #0
   1048c:	2400      	movs	r4, #0
   1048e:	2200      	movs	r2, #0
   10490:	e7de      	b.n	10450 <__aeabi_i2d+0x30>
   10492:	46c0      	nop			; (mov r8, r8)
   10494:	0000041e 	.word	0x0000041e
   10498:	00000433 	.word	0x00000433
   1049c:	00000413 	.word	0x00000413
   104a0:	800fffff 	.word	0x800fffff

000104a4 <__aeabi_ui2d>:
   104a4:	b510      	push	{r4, lr}
   104a6:	1e04      	subs	r4, r0, #0
   104a8:	d028      	beq.n	104fc <__aeabi_ui2d+0x58>
   104aa:	f000 f885 	bl	105b8 <__clzsi2>
   104ae:	4b15      	ldr	r3, [pc, #84]	; (10504 <__aeabi_ui2d+0x60>)
   104b0:	4a15      	ldr	r2, [pc, #84]	; (10508 <__aeabi_ui2d+0x64>)
   104b2:	1a1b      	subs	r3, r3, r0
   104b4:	1ad2      	subs	r2, r2, r3
   104b6:	2a1f      	cmp	r2, #31
   104b8:	dd15      	ble.n	104e6 <__aeabi_ui2d+0x42>
   104ba:	4a14      	ldr	r2, [pc, #80]	; (1050c <__aeabi_ui2d+0x68>)
   104bc:	1ad2      	subs	r2, r2, r3
   104be:	4094      	lsls	r4, r2
   104c0:	2200      	movs	r2, #0
   104c2:	0324      	lsls	r4, r4, #12
   104c4:	055b      	lsls	r3, r3, #21
   104c6:	0b24      	lsrs	r4, r4, #12
   104c8:	0d5b      	lsrs	r3, r3, #21
   104ca:	2100      	movs	r1, #0
   104cc:	0010      	movs	r0, r2
   104ce:	0324      	lsls	r4, r4, #12
   104d0:	0d0a      	lsrs	r2, r1, #20
   104d2:	0b24      	lsrs	r4, r4, #12
   104d4:	0512      	lsls	r2, r2, #20
   104d6:	4322      	orrs	r2, r4
   104d8:	4c0d      	ldr	r4, [pc, #52]	; (10510 <__aeabi_ui2d+0x6c>)
   104da:	051b      	lsls	r3, r3, #20
   104dc:	4022      	ands	r2, r4
   104de:	4313      	orrs	r3, r2
   104e0:	005b      	lsls	r3, r3, #1
   104e2:	0859      	lsrs	r1, r3, #1
   104e4:	bd10      	pop	{r4, pc}
   104e6:	0021      	movs	r1, r4
   104e8:	4091      	lsls	r1, r2
   104ea:	000a      	movs	r2, r1
   104ec:	210b      	movs	r1, #11
   104ee:	1a08      	subs	r0, r1, r0
   104f0:	40c4      	lsrs	r4, r0
   104f2:	055b      	lsls	r3, r3, #21
   104f4:	0324      	lsls	r4, r4, #12
   104f6:	0b24      	lsrs	r4, r4, #12
   104f8:	0d5b      	lsrs	r3, r3, #21
   104fa:	e7e6      	b.n	104ca <__aeabi_ui2d+0x26>
   104fc:	2300      	movs	r3, #0
   104fe:	2400      	movs	r4, #0
   10500:	2200      	movs	r2, #0
   10502:	e7e2      	b.n	104ca <__aeabi_ui2d+0x26>
   10504:	0000041e 	.word	0x0000041e
   10508:	00000433 	.word	0x00000433
   1050c:	00000413 	.word	0x00000413
   10510:	800fffff 	.word	0x800fffff

00010514 <__aeabi_f2d>:
   10514:	0041      	lsls	r1, r0, #1
   10516:	0e09      	lsrs	r1, r1, #24
   10518:	1c4b      	adds	r3, r1, #1
   1051a:	b570      	push	{r4, r5, r6, lr}
   1051c:	b2db      	uxtb	r3, r3
   1051e:	0246      	lsls	r6, r0, #9
   10520:	0a75      	lsrs	r5, r6, #9
   10522:	0fc4      	lsrs	r4, r0, #31
   10524:	2b01      	cmp	r3, #1
   10526:	dd14      	ble.n	10552 <__aeabi_f2d+0x3e>
   10528:	23e0      	movs	r3, #224	; 0xe0
   1052a:	009b      	lsls	r3, r3, #2
   1052c:	076d      	lsls	r5, r5, #29
   1052e:	0b36      	lsrs	r6, r6, #12
   10530:	18cb      	adds	r3, r1, r3
   10532:	2100      	movs	r1, #0
   10534:	0d0a      	lsrs	r2, r1, #20
   10536:	0028      	movs	r0, r5
   10538:	0512      	lsls	r2, r2, #20
   1053a:	4d1c      	ldr	r5, [pc, #112]	; (105ac <__aeabi_f2d+0x98>)
   1053c:	4332      	orrs	r2, r6
   1053e:	055b      	lsls	r3, r3, #21
   10540:	402a      	ands	r2, r5
   10542:	085b      	lsrs	r3, r3, #1
   10544:	4313      	orrs	r3, r2
   10546:	005b      	lsls	r3, r3, #1
   10548:	07e4      	lsls	r4, r4, #31
   1054a:	085b      	lsrs	r3, r3, #1
   1054c:	4323      	orrs	r3, r4
   1054e:	0019      	movs	r1, r3
   10550:	bd70      	pop	{r4, r5, r6, pc}
   10552:	2900      	cmp	r1, #0
   10554:	d114      	bne.n	10580 <__aeabi_f2d+0x6c>
   10556:	2d00      	cmp	r5, #0
   10558:	d01e      	beq.n	10598 <__aeabi_f2d+0x84>
   1055a:	0028      	movs	r0, r5
   1055c:	f000 f82c 	bl	105b8 <__clzsi2>
   10560:	280a      	cmp	r0, #10
   10562:	dc1c      	bgt.n	1059e <__aeabi_f2d+0x8a>
   10564:	230b      	movs	r3, #11
   10566:	002a      	movs	r2, r5
   10568:	1a1b      	subs	r3, r3, r0
   1056a:	40da      	lsrs	r2, r3
   1056c:	0003      	movs	r3, r0
   1056e:	3315      	adds	r3, #21
   10570:	409d      	lsls	r5, r3
   10572:	4b0f      	ldr	r3, [pc, #60]	; (105b0 <__aeabi_f2d+0x9c>)
   10574:	0312      	lsls	r2, r2, #12
   10576:	1a1b      	subs	r3, r3, r0
   10578:	055b      	lsls	r3, r3, #21
   1057a:	0b16      	lsrs	r6, r2, #12
   1057c:	0d5b      	lsrs	r3, r3, #21
   1057e:	e7d8      	b.n	10532 <__aeabi_f2d+0x1e>
   10580:	2d00      	cmp	r5, #0
   10582:	d006      	beq.n	10592 <__aeabi_f2d+0x7e>
   10584:	0b32      	lsrs	r2, r6, #12
   10586:	2680      	movs	r6, #128	; 0x80
   10588:	0336      	lsls	r6, r6, #12
   1058a:	076d      	lsls	r5, r5, #29
   1058c:	4316      	orrs	r6, r2
   1058e:	4b09      	ldr	r3, [pc, #36]	; (105b4 <__aeabi_f2d+0xa0>)
   10590:	e7cf      	b.n	10532 <__aeabi_f2d+0x1e>
   10592:	4b08      	ldr	r3, [pc, #32]	; (105b4 <__aeabi_f2d+0xa0>)
   10594:	2600      	movs	r6, #0
   10596:	e7cc      	b.n	10532 <__aeabi_f2d+0x1e>
   10598:	2300      	movs	r3, #0
   1059a:	2600      	movs	r6, #0
   1059c:	e7c9      	b.n	10532 <__aeabi_f2d+0x1e>
   1059e:	0003      	movs	r3, r0
   105a0:	002a      	movs	r2, r5
   105a2:	3b0b      	subs	r3, #11
   105a4:	409a      	lsls	r2, r3
   105a6:	2500      	movs	r5, #0
   105a8:	e7e3      	b.n	10572 <__aeabi_f2d+0x5e>
   105aa:	46c0      	nop			; (mov r8, r8)
   105ac:	800fffff 	.word	0x800fffff
   105b0:	00000389 	.word	0x00000389
   105b4:	000007ff 	.word	0x000007ff

000105b8 <__clzsi2>:
   105b8:	211c      	movs	r1, #28
   105ba:	2301      	movs	r3, #1
   105bc:	041b      	lsls	r3, r3, #16
   105be:	4298      	cmp	r0, r3
   105c0:	d301      	bcc.n	105c6 <__clzsi2+0xe>
   105c2:	0c00      	lsrs	r0, r0, #16
   105c4:	3910      	subs	r1, #16
   105c6:	0a1b      	lsrs	r3, r3, #8
   105c8:	4298      	cmp	r0, r3
   105ca:	d301      	bcc.n	105d0 <__clzsi2+0x18>
   105cc:	0a00      	lsrs	r0, r0, #8
   105ce:	3908      	subs	r1, #8
   105d0:	091b      	lsrs	r3, r3, #4
   105d2:	4298      	cmp	r0, r3
   105d4:	d301      	bcc.n	105da <__clzsi2+0x22>
   105d6:	0900      	lsrs	r0, r0, #4
   105d8:	3904      	subs	r1, #4
   105da:	a202      	add	r2, pc, #8	; (adr r2, 105e4 <__clzsi2+0x2c>)
   105dc:	5c10      	ldrb	r0, [r2, r0]
   105de:	1840      	adds	r0, r0, r1
   105e0:	4770      	bx	lr
   105e2:	46c0      	nop			; (mov r8, r8)
   105e4:	02020304 	.word	0x02020304
   105e8:	01010101 	.word	0x01010101
	...
   105f4:	6c696166 	.word	0x6c696166
   105f8:	74206465 	.word	0x74206465
   105fc:	6e69206f 	.word	0x6e69206f
   10600:	61697469 	.word	0x61697469
   10604:	657a696c 	.word	0x657a696c
   10608:	43444820 	.word	0x43444820
   1060c:	30383031 	.word	0x30383031
   10610:	69726420 	.word	0x69726420
   10614:	2e726576 	.word	0x2e726576
   10618:	0000000d 	.word	0x0000000d
   1061c:	6c696166 	.word	0x6c696166
   10620:	74206465 	.word	0x74206465
   10624:	6573206f 	.word	0x6573206f
   10628:	7220646e 	.word	0x7220646e
   1062c:	73696765 	.word	0x73696765
   10630:	20726574 	.word	0x20726574
   10634:	61746f70 	.word	0x61746f70
   10638:	72206f74 	.word	0x72206f74
   1063c:	65757165 	.word	0x65757165
   10640:	66207473 	.word	0x66207473
   10644:	6320726f 	.word	0x6320726f
   10648:	616d6d6f 	.word	0x616d6d6f
   1064c:	3020646e 	.word	0x3020646e
   10650:	32302578 	.word	0x32302578
   10654:	0a0d2178 	.word	0x0a0d2178
   10658:	00000000 	.word	0x00000000
   1065c:	6c696166 	.word	0x6c696166
   10660:	74206465 	.word	0x74206465
   10664:	6572206f 	.word	0x6572206f
   10668:	76696563 	.word	0x76696563
   1066c:	79622065 	.word	0x79622065
   10670:	20736574 	.word	0x20736574
   10674:	20726f66 	.word	0x20726f66
   10678:	6d6d6f63 	.word	0x6d6d6f63
   1067c:	20646e61 	.word	0x20646e61
   10680:	30257830 	.word	0x30257830
   10684:	0d217832 	.word	0x0d217832
   10688:	0000000a 	.word	0x0000000a
   1068c:	61746164 	.word	0x61746164
   10690:	63617020 	.word	0x63617020
   10694:	3a74656b 	.word	0x3a74656b
   10698:	25783020 	.word	0x25783020
   1069c:	20783230 	.word	0x20783230
   106a0:	30257830 	.word	0x30257830
   106a4:	30207832 	.word	0x30207832
   106a8:	32302578 	.word	0x32302578
   106ac:	000a0d78 	.word	0x000a0d78
   106b0:	6f727265 	.word	0x6f727265
   106b4:	72742072 	.word	0x72742072
   106b8:	676e6979 	.word	0x676e6979
   106bc:	206f7420 	.word	0x206f7420
   106c0:	20746573 	.word	0x20746573
   106c4:	6f736572 	.word	0x6f736572
   106c8:	6974756c 	.word	0x6974756c
   106cc:	0d216e6f 	.word	0x0d216e6f
   106d0:	00000000 	.word	0x00000000
   106d4:	5454514d 	.word	0x5454514d
   106d8:	696e6920 	.word	0x696e6920
   106dc:	6c616974 	.word	0x6c616974
   106e0:	74617a69 	.word	0x74617a69
   106e4:	206e6f69 	.word	0x206e6f69
   106e8:	6c696166 	.word	0x6c696166
   106ec:	202e6465 	.word	0x202e6465
   106f0:	6f727245 	.word	0x6f727245
   106f4:	6f632072 	.word	0x6f632072
   106f8:	69206564 	.word	0x69206564
   106fc:	25282073 	.word	0x25282073
   10700:	0a0d2964 	.word	0x0a0d2964
   10704:	00000000 	.word	0x00000000
   10708:	5454514d 	.word	0x5454514d
   1070c:	67657220 	.word	0x67657220
   10710:	65747369 	.word	0x65747369
   10714:	61632072 	.word	0x61632072
   10718:	61626c6c 	.word	0x61626c6c
   1071c:	66206b63 	.word	0x66206b63
   10720:	656c6961 	.word	0x656c6961
   10724:	45202e64 	.word	0x45202e64
   10728:	726f7272 	.word	0x726f7272
   1072c:	646f6320 	.word	0x646f6320
   10730:	73692065 	.word	0x73692065
   10734:	64252820 	.word	0x64252820
   10738:	000a0d29 	.word	0x000a0d29
   1073c:	50726941 	.word	0x50726941
   10740:	4e6e6e65 	.word	0x4e6e6e65
   10744:	442d7465 	.word	0x442d7465
   10748:	63697665 	.word	0x63697665
   1074c:	00000065 	.word	0x00000065
   10750:	6e6e6570 	.word	0x6e6e6570
   10754:	30343731 	.word	0x30343731
   10758:	69666977 	.word	0x69666977
   1075c:	00000000 	.word	0x00000000
   10760:	74656564 	.word	0x74656564
   10764:	6165732e 	.word	0x6165732e
   10768:	70752e73 	.word	0x70752e73
   1076c:	2e6e6e65 	.word	0x2e6e6e65
   10770:	00756465 	.word	0x00756465
   10774:	6e6e6f43 	.word	0x6e6e6f43
   10778:	20746365 	.word	0x20746365
   1077c:	6c696166 	.word	0x6c696166
   10780:	206f7420 	.word	0x206f7420
   10784:	76726573 	.word	0x76726573
   10788:	25287265 	.word	0x25287265
   1078c:	20212973 	.word	0x20212973
   10790:	72746572 	.word	0x72746572
   10794:	74692079 	.word	0x74692079
   10798:	74756120 	.word	0x74756120
   1079c:	74616d6f 	.word	0x74616d6f
   107a0:	6c616369 	.word	0x6c616369
   107a4:	0d2e796c 	.word	0x0d2e796c
   107a8:	0000000a 	.word	0x0000000a
   107ac:	5454514d 	.word	0x5454514d
   107b0:	6f726220 	.word	0x6f726220
   107b4:	2072656b 	.word	0x2072656b
   107b8:	6c636564 	.word	0x6c636564
   107bc:	64656e69 	.word	0x64656e69
   107c0:	756f7920 	.word	0x756f7920
   107c4:	63612072 	.word	0x63612072
   107c8:	73736563 	.word	0x73736563
   107cc:	72652021 	.word	0x72652021
   107d0:	20726f72 	.word	0x20726f72
   107d4:	65646f63 	.word	0x65646f63
   107d8:	0d642520 	.word	0x0d642520
   107dc:	0000000a 	.word	0x0000000a
   107e0:	5454514d 	.word	0x5454514d
   107e4:	71657220 	.word	0x71657220
   107e8:	74736575 	.word	0x74736575
   107ec:	203a6465 	.word	0x203a6465
   107f0:	0a0d7325 	.word	0x0a0d7325
   107f4:	00000000 	.word	0x00000000
   107f8:	6974706f 	.word	0x6974706f
   107fc:	3a736e6f 	.word	0x3a736e6f
   10800:	0d732520 	.word	0x0d732520
   10804:	0000000a 	.word	0x0000000a
   10808:	69676572 	.word	0x69676572
   1080c:	72657473 	.word	0x72657473
   10810:	725f6465 	.word	0x725f6465
   10814:	65757165 	.word	0x65757165
   10818:	745f7473 	.word	0x745f7473
   1081c:	6369706f 	.word	0x6369706f
   10820:	7325203a 	.word	0x7325203a
   10824:	00000a0d 	.word	0x00000a0d
   10828:	69676572 	.word	0x69676572
   1082c:	72657473 	.word	0x72657473
   10830:	665f6465 	.word	0x665f6465
   10834:	74636e75 	.word	0x74636e75
   10838:	3a6e6f69 	.word	0x3a6e6f69
   1083c:	0d642520 	.word	0x0d642520
   10840:	0000000a 	.word	0x0000000a
   10844:	5454514d 	.word	0x5454514d
   10848:	73696420 	.word	0x73696420
   1084c:	6e6e6f63 	.word	0x6e6e6f63
   10850:	65746365 	.word	0x65746365
   10854:	00000d64 	.word	0x00000d64
   10858:	656d6954 	.word	0x656d6954
   1085c:	6e652072 	.word	0x6e652072
   10860:	656c6261 	.word	0x656c6261
   10864:	000d2e64 	.word	0x000d2e64
   10868:	5454514d 	.word	0x5454514d
   1086c:	6e6f4320 	.word	0x6e6f4320
   10870:	75676966 	.word	0x75676966
   10874:	2e646572 	.word	0x2e646572
   10878:	0000000d 	.word	0x0000000d
   1087c:	74696e49 	.word	0x74696e49
   10880:	696c6169 	.word	0x696c6169
   10884:	676e697a 	.word	0x676e697a
   10888:	0d2e2e2e 	.word	0x0d2e2e2e
   1088c:	00000000 	.word	0x00000000
   10890:	6e69616d 	.word	0x6e69616d
   10894:	326d203a 	.word	0x326d203a
   10898:	69775f6d 	.word	0x69775f6d
   1089c:	695f6966 	.word	0x695f6966
   108a0:	2074696e 	.word	0x2074696e
   108a4:	6c6c6163 	.word	0x6c6c6163
   108a8:	72726520 	.word	0x72726520
   108ac:	2821726f 	.word	0x2821726f
   108b0:	0d296425 	.word	0x0d296425
   108b4:	0000000a 	.word	0x0000000a
   108b8:	6e69616d 	.word	0x6e69616d
   108bc:	326d203a 	.word	0x326d203a
   108c0:	69775f6d 	.word	0x69775f6d
   108c4:	695f6966 	.word	0x695f6966
   108c8:	2074696e 	.word	0x2074696e
   108cc:	6c6c6163 	.word	0x6c6c6163
   108d0:	63757320 	.word	0x63757320
   108d4:	73736563 	.word	0x73736563
   108d8:	64252821 	.word	0x64252821
   108dc:	000a0d29 	.word	0x000a0d29
   108e0:	6b636f53 	.word	0x6b636f53
   108e4:	20737465 	.word	0x20737465
   108e8:	74696e69 	.word	0x74696e69
   108ec:	696c6169 	.word	0x696c6169
   108f0:	2e64657a 	.word	0x2e64657a
   108f4:	0000000d 	.word	0x0000000d
   108f8:	202c7325 	.word	0x202c7325
   108fc:	0a0d7325 	.word	0x0a0d7325
   10900:	00000000 	.word	0x00000000
   10904:	5f77656e 	.word	0x5f77656e
   10908:	69706f74 	.word	0x69706f74
   1090c:	6f742e63 	.word	0x6f742e63
   10910:	5f636970 	.word	0x5f636970
   10914:	656d616e 	.word	0x656d616e
   10918:	7325203a 	.word	0x7325203a
   1091c:	00000a0d 	.word	0x00000a0d
   10920:	6c696166 	.word	0x6c696166
   10924:	74206465 	.word	0x74206465
   10928:	7573206f 	.word	0x7573206f
   1092c:	72637362 	.word	0x72637362
   10930:	20656269 	.word	0x20656269
   10934:	69706f74 	.word	0x69706f74
   10938:	25203a63 	.word	0x25203a63
   1093c:	000a0d73 	.word	0x000a0d73
   10940:	6765725b 	.word	0x6765725b
   10944:	65747369 	.word	0x65747369
   10948:	65725f72 	.word	0x65725f72
   1094c:	73657571 	.word	0x73657571
   10950:	6f745f74 	.word	0x6f745f74
   10954:	5d636970 	.word	0x5d636970
   10958:	63757320 	.word	0x63757320
   1095c:	73736563 	.word	0x73736563
   10960:	6c6c7566 	.word	0x6c6c7566
   10964:	65722079 	.word	0x65722079
   10968:	74736967 	.word	0x74736967
   1096c:	64657265 	.word	0x64657265
   10970:	71657220 	.word	0x71657220
   10974:	74736575 	.word	0x74736575
   10978:	706f7420 	.word	0x706f7420
   1097c:	25206369 	.word	0x25206369
   10980:	6e612073 	.word	0x6e612073
   10984:	61632064 	.word	0x61632064
   10988:	61626c6c 	.word	0x61626c6c
   1098c:	0d216b63 	.word	0x0d216b63
   10990:	0000000a 	.word	0x0000000a
   10994:	6765725b 	.word	0x6765725b
   10998:	65747369 	.word	0x65747369
   1099c:	65725f72 	.word	0x65725f72
   109a0:	73657571 	.word	0x73657571
   109a4:	6f745f74 	.word	0x6f745f74
   109a8:	5d636970 	.word	0x5d636970
   109ac:	78616d20 	.word	0x78616d20
   109b0:	6d756e20 	.word	0x6d756e20
   109b4:	20726562 	.word	0x20726562
   109b8:	7420666f 	.word	0x7420666f
   109bc:	6369706f 	.word	0x6369706f
   109c0:	6c612073 	.word	0x6c612073
   109c4:	64616572 	.word	0x64616572
   109c8:	65722079 	.word	0x65722079
   109cc:	74736967 	.word	0x74736967
   109d0:	64657265 	.word	0x64657265
   109d4:	00000d2e 	.word	0x00000d2e
   109d8:	462d6957 	.word	0x462d6957
   109dc:	6f632069 	.word	0x6f632069
   109e0:	63656e6e 	.word	0x63656e6e
   109e4:	0d646574 	.word	0x0d646574
   109e8:	00000000 	.word	0x00000000
   109ec:	462d6957 	.word	0x462d6957
   109f0:	69642069 	.word	0x69642069
   109f4:	6e6f6373 	.word	0x6e6f6373
   109f8:	7463656e 	.word	0x7463656e
   109fc:	000d6465 	.word	0x000d6465
   10a00:	462d6957 	.word	0x462d6957
   10a04:	50492069 	.word	0x50492069
   10a08:	20736920 	.word	0x20736920
   10a0c:	252e7525 	.word	0x252e7525
   10a10:	75252e75 	.word	0x75252e75
   10a14:	0d75252e 	.word	0x0d75252e
   10a18:	0000000a 	.word	0x0000000a
   10a1c:	00001378 	.word	0x00001378
   10a20:	00001380 	.word	0x00001380
   10a24:	0000138e 	.word	0x0000138e
   10a28:	000013c0 	.word	0x000013c0
   10a2c:	000013ca 	.word	0x000013ca
   10a30:	666e6f63 	.word	0x666e6f63
   10a34:	72756769 	.word	0x72756769
   10a38:	74685f65 	.word	0x74685f65
   10a3c:	635f7074 	.word	0x635f7074
   10a40:	6e65696c 	.word	0x6e65696c
   10a44:	48203a74 	.word	0x48203a74
   10a48:	20505454 	.word	0x20505454
   10a4c:	65696c63 	.word	0x65696c63
   10a50:	6920746e 	.word	0x6920746e
   10a54:	6974696e 	.word	0x6974696e
   10a58:	7a696c61 	.word	0x7a696c61
   10a5c:	6f697461 	.word	0x6f697461
   10a60:	6166206e 	.word	0x6166206e
   10a64:	64656c69 	.word	0x64656c69
   10a68:	72282021 	.word	0x72282021
   10a6c:	25207365 	.word	0x25207365
   10a70:	0a0d2964 	.word	0x0a0d2964
   10a74:	00000000 	.word	0x00000000
   10a78:	6c696166 	.word	0x6c696166
   10a7c:	74206465 	.word	0x74206465
   10a80:	6e69206f 	.word	0x6e69206f
   10a84:	61697469 	.word	0x61697469
   10a88:	657a696c 	.word	0x657a696c
   10a8c:	66697720 	.word	0x66697720
   10a90:	61702069 	.word	0x61702069
   10a94:	656d6172 	.word	0x656d6172
   10a98:	73726574 	.word	0x73726574
   10a9c:	0000000d 	.word	0x0000000d
   10aa0:	202d2d2d 	.word	0x202d2d2d
   10aa4:	636c6557 	.word	0x636c6557
   10aa8:	20656d6f 	.word	0x20656d6f
   10aac:	41206f74 	.word	0x41206f74
   10ab0:	4e495754 	.word	0x4e495754
   10ab4:	35312043 	.word	0x35312043
   10ab8:	43203030 	.word	0x43203030
   10abc:	656e6e6f 	.word	0x656e6e6f
   10ac0:	6f697463 	.word	0x6f697463
   10ac4:	6554206e 	.word	0x6554206e
   10ac8:	2d207473 	.word	0x2d207473
   10acc:	000d2d2d 	.word	0x000d2d2d
   10ad0:	6e69616d 	.word	0x6e69616d
   10ad4:	6f63203a 	.word	0x6f63203a
   10ad8:	63656e6e 	.word	0x63656e6e
   10adc:	676e6974 	.word	0x676e6974
   10ae0:	206f7420 	.word	0x206f7420
   10ae4:	69466957 	.word	0x69466957
   10ae8:	20504120 	.word	0x20504120
   10aec:	2e2e7325 	.word	0x2e2e7325
   10af0:	000a0d2e 	.word	0x000a0d2e
   10af4:	63637573 	.word	0x63637573
   10af8:	66737365 	.word	0x66737365
   10afc:	796c6c75 	.word	0x796c6c75
   10b00:	6e6f6320 	.word	0x6e6f6320
   10b04:	7463656e 	.word	0x7463656e
   10b08:	000d6465 	.word	0x000d6465
   10b0c:	70747468 	.word	0x70747468
   10b10:	772f2f3a 	.word	0x772f2f3a
   10b14:	732e7777 	.word	0x732e7777
   10b18:	2e736165 	.word	0x2e736165
   10b1c:	6e657075 	.word	0x6e657075
   10b20:	64652e6e 	.word	0x64652e6e
   10b24:	777e2f75 	.word	0x777e2f75
   10b28:	68637261 	.word	0x68637261
   10b2c:	652f7265 	.word	0x652f7265
   10b30:	31356573 	.word	0x31356573
   10b34:	656d2f36 	.word	0x656d2f36
   10b38:	61646174 	.word	0x61646174
   10b3c:	622e6174 	.word	0x622e6174
   10b40:	00006e69 	.word	0x00006e69
   10b44:	70747468 	.word	0x70747468
   10b48:	772f2f3a 	.word	0x772f2f3a
   10b4c:	732e7777 	.word	0x732e7777
   10b50:	2e736165 	.word	0x2e736165
   10b54:	6e657075 	.word	0x6e657075
   10b58:	64652e6e 	.word	0x64652e6e
   10b5c:	777e2f75 	.word	0x777e2f75
   10b60:	68637261 	.word	0x68637261
   10b64:	652f7265 	.word	0x652f7265
   10b68:	31356573 	.word	0x31356573
   10b6c:	65742f36 	.word	0x65742f36
   10b70:	662d7473 	.word	0x662d7473
   10b74:	776d7269 	.word	0x776d7269
   10b78:	2e657261 	.word	0x2e657261
   10b7c:	006e6962 	.word	0x006e6962
   10b80:	70747468 	.word	0x70747468
   10b84:	696c635f 	.word	0x696c635f
   10b88:	5f746e65 	.word	0x5f746e65
   10b8c:	6c6c6163 	.word	0x6c6c6163
   10b90:	6b636162 	.word	0x6b636162
   10b94:	5448203a 	.word	0x5448203a
   10b98:	63205054 	.word	0x63205054
   10b9c:	6e65696c 	.word	0x6e65696c
   10ba0:	6f732074 	.word	0x6f732074
   10ba4:	74656b63 	.word	0x74656b63
   10ba8:	6e6f6320 	.word	0x6e6f6320
   10bac:	7463656e 	.word	0x7463656e
   10bb0:	0d2e6465 	.word	0x0d2e6465
   10bb4:	00000000 	.word	0x00000000
   10bb8:	70747468 	.word	0x70747468
   10bbc:	696c635f 	.word	0x696c635f
   10bc0:	5f746e65 	.word	0x5f746e65
   10bc4:	6c6c6163 	.word	0x6c6c6163
   10bc8:	6b636162 	.word	0x6b636162
   10bcc:	6572203a 	.word	0x6572203a
   10bd0:	73657571 	.word	0x73657571
   10bd4:	6f632074 	.word	0x6f632074
   10bd8:	656c706d 	.word	0x656c706d
   10bdc:	2e646574 	.word	0x2e646574
   10be0:	0000000d 	.word	0x0000000d
   10be4:	70747468 	.word	0x70747468
   10be8:	696c635f 	.word	0x696c635f
   10bec:	5f746e65 	.word	0x5f746e65
   10bf0:	6c6c6163 	.word	0x6c6c6163
   10bf4:	6b636162 	.word	0x6b636162
   10bf8:	6572203a 	.word	0x6572203a
   10bfc:	76696563 	.word	0x76696563
   10c00:	72206465 	.word	0x72206465
   10c04:	6f707365 	.word	0x6f707365
   10c08:	2065736e 	.word	0x2065736e
   10c0c:	64207525 	.word	0x64207525
   10c10:	20617461 	.word	0x20617461
   10c14:	657a6973 	.word	0x657a6973
   10c18:	0d752520 	.word	0x0d752520
   10c1c:	0000000a 	.word	0x0000000a
   10c20:	70747468 	.word	0x70747468
   10c24:	696c635f 	.word	0x696c635f
   10c28:	5f746e65 	.word	0x5f746e65
   10c2c:	6c6c6163 	.word	0x6c6c6163
   10c30:	6b636162 	.word	0x6b636162
   10c34:	6964203a 	.word	0x6964203a
   10c38:	6e6f6373 	.word	0x6e6f6373
   10c3c:	7463656e 	.word	0x7463656e
   10c40:	206e6f69 	.word	0x206e6f69
   10c44:	73616572 	.word	0x73616572
   10c48:	253a6e6f 	.word	0x253a6e6f
   10c4c:	000a0d64 	.word	0x000a0d64
   10c50:	6f736572 	.word	0x6f736572
   10c54:	5f65766c 	.word	0x5f65766c
   10c58:	203a6263 	.word	0x203a6263
   10c5c:	49207325 	.word	0x49207325
   10c60:	64612050 	.word	0x64612050
   10c64:	73657264 	.word	0x73657264
   10c68:	73692073 	.word	0x73692073
   10c6c:	2e642520 	.word	0x2e642520
   10c70:	252e6425 	.word	0x252e6425
   10c74:	64252e64 	.word	0x64252e64
   10c78:	0a0d0a0d 	.word	0x0a0d0a0d
   10c7c:	00000000 	.word	0x00000000
   10c80:	72617473 	.word	0x72617473
   10c84:	6f645f74 	.word	0x6f645f74
   10c88:	6f6c6e77 	.word	0x6f6c6e77
   10c8c:	203a6461 	.word	0x203a6461
   10c90:	20434d4d 	.word	0x20434d4d
   10c94:	726f7473 	.word	0x726f7473
   10c98:	20656761 	.word	0x20656761
   10c9c:	20746f6e 	.word	0x20746f6e
   10ca0:	64616572 	.word	0x64616572
   10ca4:	000d2e79 	.word	0x000d2e79
   10ca8:	72617473 	.word	0x72617473
   10cac:	6f645f74 	.word	0x6f645f74
   10cb0:	6f6c6e77 	.word	0x6f6c6e77
   10cb4:	203a6461 	.word	0x203a6461
   10cb8:	462d6957 	.word	0x462d6957
   10cbc:	73692069 	.word	0x73692069
   10cc0:	746f6e20 	.word	0x746f6e20
   10cc4:	6e6f6320 	.word	0x6e6f6320
   10cc8:	7463656e 	.word	0x7463656e
   10ccc:	0d2e6465 	.word	0x0d2e6465
   10cd0:	00000000 	.word	0x00000000
   10cd4:	72617473 	.word	0x72617473
   10cd8:	6f645f74 	.word	0x6f645f74
   10cdc:	6f6c6e77 	.word	0x6f6c6e77
   10ce0:	203a6461 	.word	0x203a6461
   10ce4:	75716572 	.word	0x75716572
   10ce8:	20747365 	.word	0x20747365
   10cec:	73207369 	.word	0x73207369
   10cf0:	20746e65 	.word	0x20746e65
   10cf4:	65726c61 	.word	0x65726c61
   10cf8:	2e796461 	.word	0x2e796461
   10cfc:	0000000d 	.word	0x0000000d
   10d00:	72617473 	.word	0x72617473
   10d04:	6f645f74 	.word	0x6f645f74
   10d08:	6f6c6e77 	.word	0x6f6c6e77
   10d0c:	203a6461 	.word	0x203a6461
   10d10:	6e6e7572 	.word	0x6e6e7572
   10d14:	20676e69 	.word	0x20676e69
   10d18:	6e776f64 	.word	0x6e776f64
   10d1c:	64616f6c 	.word	0x64616f6c
   10d20:	726c6120 	.word	0x726c6120
   10d24:	79646165 	.word	0x79646165
   10d28:	00000d2e 	.word	0x00000d2e
   10d2c:	72617473 	.word	0x72617473
   10d30:	6f645f74 	.word	0x6f645f74
   10d34:	6f6c6e77 	.word	0x6f6c6e77
   10d38:	5b206461 	.word	0x5b206461
   10d3c:	5f544f4e 	.word	0x5f544f4e
   10d40:	43454843 	.word	0x43454843
   10d44:	5d44454b 	.word	0x5d44454b
   10d48:	6573203a 	.word	0x6573203a
   10d4c:	6e69646e 	.word	0x6e69646e
   10d50:	54482067 	.word	0x54482067
   10d54:	72205054 	.word	0x72205054
   10d58:	65757165 	.word	0x65757165
   10d5c:	66207473 	.word	0x66207473
   10d60:	6820726f 	.word	0x6820726f
   10d64:	65646165 	.word	0x65646165
   10d68:	00000d72 	.word	0x00000d72
   10d6c:	72617473 	.word	0x72617473
   10d70:	6f645f74 	.word	0x6f645f74
   10d74:	6f6c6e77 	.word	0x6f6c6e77
   10d78:	5b206461 	.word	0x5b206461
   10d7c:	41445055 	.word	0x41445055
   10d80:	415f4554 	.word	0x415f4554
   10d84:	4c494156 	.word	0x4c494156
   10d88:	454c4241 	.word	0x454c4241
   10d8c:	73203a5d 	.word	0x73203a5d
   10d90:	69646e65 	.word	0x69646e65
   10d94:	4820676e 	.word	0x4820676e
   10d98:	20505454 	.word	0x20505454
   10d9c:	75716572 	.word	0x75716572
   10da0:	20747365 	.word	0x20747365
   10da4:	20726f66 	.word	0x20726f66
   10da8:	6d726966 	.word	0x6d726966
   10dac:	65726177 	.word	0x65726177
   10db0:	0000000d 	.word	0x0000000d
   10db4:	72617473 	.word	0x72617473
   10db8:	6f645f74 	.word	0x6f645f74
   10dbc:	6f6c6e77 	.word	0x6f6c6e77
   10dc0:	203a6461 	.word	0x203a6461
   10dc4:	75206f6e 	.word	0x75206f6e
   10dc8:	74616470 	.word	0x74616470
   10dcc:	76612065 	.word	0x76612065
   10dd0:	616c6961 	.word	0x616c6961
   10dd4:	0d656c62 	.word	0x0d656c62
   10dd8:	00000000 	.word	0x00000000
   10ddc:	726f7473 	.word	0x726f7473
   10de0:	69665f65 	.word	0x69665f65
   10de4:	705f656c 	.word	0x705f656c
   10de8:	656b6361 	.word	0x656b6361
   10dec:	65203a74 	.word	0x65203a74
   10df0:	7974706d 	.word	0x7974706d
   10df4:	74616420 	.word	0x74616420
   10df8:	000d2e61 	.word	0x000d2e61
   10dfc:	726f7473 	.word	0x726f7473
   10e00:	69665f65 	.word	0x69665f65
   10e04:	705f656c 	.word	0x705f656c
   10e08:	656b6361 	.word	0x656b6361
   10e0c:	555b2074 	.word	0x555b2074
   10e10:	54414450 	.word	0x54414450
   10e14:	48435f45 	.word	0x48435f45
   10e18:	5d4b4345 	.word	0x5d4b4345
   10e1c:	6966203a 	.word	0x6966203a
   10e20:	5b20656c 	.word	0x5b20656c
   10e24:	62206425 	.word	0x62206425
   10e28:	73657479 	.word	0x73657479
   10e2c:	6f64205d 	.word	0x6f64205d
   10e30:	6e207365 	.word	0x6e207365
   10e34:	6d20746f 	.word	0x6d20746f
   10e38:	68637461 	.word	0x68637461
   10e3c:	61656820 	.word	0x61656820
   10e40:	20726564 	.word	0x20726564
   10e44:	2064255b 	.word	0x2064255b
   10e48:	65747962 	.word	0x65747962
   10e4c:	73205d73 	.word	0x73205d73
   10e50:	0d657a69 	.word	0x0d657a69
   10e54:	0000000a 	.word	0x0000000a
   10e58:	2077656e 	.word	0x2077656e
   10e5c:	6d726966 	.word	0x6d726966
   10e60:	65726177 	.word	0x65726177
   10e64:	72657620 	.word	0x72657620
   10e68:	6e6f6973 	.word	0x6e6f6973
   10e6c:	6425203a 	.word	0x6425203a
   10e70:	00000a0d 	.word	0x00000a0d
   10e74:	2077656e 	.word	0x2077656e
   10e78:	6d726966 	.word	0x6d726966
   10e7c:	65726177 	.word	0x65726177
   10e80:	65686320 	.word	0x65686320
   10e84:	75736b63 	.word	0x75736b63
   10e88:	25203a6d 	.word	0x25203a6d
   10e8c:	0d783430 	.word	0x0d783430
   10e90:	0000000a 	.word	0x0000000a
   10e94:	5f315746 	.word	0x5f315746
   10e98:	53415245 	.word	0x53415245
   10e9c:	44415f45 	.word	0x44415f45
   10ea0:	203a5244 	.word	0x203a5244
   10ea4:	0a0d6425 	.word	0x0a0d6425
   10ea8:	00000000 	.word	0x00000000
   10eac:	726f7473 	.word	0x726f7473
   10eb0:	69665f65 	.word	0x69665f65
   10eb4:	705f656c 	.word	0x705f656c
   10eb8:	656b6361 	.word	0x656b6361
   10ebc:	4e203a74 	.word	0x4e203a74
   10ec0:	6c66206f 	.word	0x6c66206f
   10ec4:	20687361 	.word	0x20687361
   10ec8:	70696863 	.word	0x70696863
   10ecc:	00000d2e 	.word	0x00000d2e
   10ed0:	726f7473 	.word	0x726f7473
   10ed4:	69665f65 	.word	0x69665f65
   10ed8:	705f656c 	.word	0x705f656c
   10edc:	656b6361 	.word	0x656b6361
   10ee0:	65203a74 	.word	0x65203a74
   10ee4:	726f7272 	.word	0x726f7272
   10ee8:	656c6320 	.word	0x656c6320
   10eec:	6e697261 	.word	0x6e697261
   10ef0:	65732067 	.word	0x65732067
   10ef4:	726f7463 	.word	0x726f7463
   10ef8:	6f727020 	.word	0x6f727020
   10efc:	74636574 	.word	0x74636574
   10f00:	20746120 	.word	0x20746120
   10f04:	72646461 	.word	0x72646461
   10f08:	20737365 	.word	0x20737365
   10f0c:	0d206425 	.word	0x0d206425
   10f10:	0000000a 	.word	0x0000000a
   10f14:	726f7473 	.word	0x726f7473
   10f18:	69665f65 	.word	0x69665f65
   10f1c:	705f656c 	.word	0x705f656c
   10f20:	656b6361 	.word	0x656b6361
   10f24:	65203a74 	.word	0x65203a74
   10f28:	726f7272 	.word	0x726f7272
   10f2c:	61726520 	.word	0x61726520
   10f30:	676e6973 	.word	0x676e6973
   10f34:	63657320 	.word	0x63657320
   10f38:	20726f74 	.word	0x20726f74
   10f3c:	61207461 	.word	0x61207461
   10f40:	65726464 	.word	0x65726464
   10f44:	25207373 	.word	0x25207373
   10f48:	0a0d2064 	.word	0x0a0d2064
   10f4c:	00000000 	.word	0x00000000
   10f50:	72617473 	.word	0x72617473
   10f54:	676e6974 	.word	0x676e6974
   10f58:	6c617620 	.word	0x6c617620
   10f5c:	0000203a 	.word	0x0000203a
   10f60:	726f7473 	.word	0x726f7473
   10f64:	69665f65 	.word	0x69665f65
   10f68:	705f656c 	.word	0x705f656c
   10f6c:	656b6361 	.word	0x656b6361
   10f70:	65203a74 	.word	0x65203a74
   10f74:	726f7272 	.word	0x726f7272
   10f78:	69727720 	.word	0x69727720
   10f7c:	676e6974 	.word	0x676e6974
   10f80:	776f7220 	.word	0x776f7220
   10f84:	20746120 	.word	0x20746120
   10f88:	72646461 	.word	0x72646461
   10f8c:	20737365 	.word	0x20737365
   10f90:	0d206425 	.word	0x0d206425
   10f94:	0000000a 	.word	0x0000000a
   10f98:	726f7473 	.word	0x726f7473
   10f9c:	69665f65 	.word	0x69665f65
   10fa0:	705f656c 	.word	0x705f656c
   10fa4:	656b6361 	.word	0x656b6361
   10fa8:	72203a74 	.word	0x72203a74
   10fac:	69656365 	.word	0x69656365
   10fb0:	5b646576 	.word	0x5b646576
   10fb4:	5d756c25 	.word	0x5d756c25
   10fb8:	6966202c 	.word	0x6966202c
   10fbc:	7320656c 	.word	0x7320656c
   10fc0:	5b657a69 	.word	0x5b657a69
   10fc4:	5d756c25 	.word	0x5d756c25
   10fc8:	00000a0d 	.word	0x00000a0d
   10fcc:	726f7473 	.word	0x726f7473
   10fd0:	69665f65 	.word	0x69665f65
   10fd4:	705f656c 	.word	0x705f656c
   10fd8:	656b6361 	.word	0x656b6361
   10fdc:	66203a74 	.word	0x66203a74
   10fe0:	20656c69 	.word	0x20656c69
   10fe4:	6e776f64 	.word	0x6e776f64
   10fe8:	64616f6c 	.word	0x64616f6c
   10fec:	73206465 	.word	0x73206465
   10ff0:	65636375 	.word	0x65636375
   10ff4:	75667373 	.word	0x75667373
   10ff8:	2e796c6c 	.word	0x2e796c6c
   10ffc:	0000000d 	.word	0x0000000d
   11000:	726f7473 	.word	0x726f7473
   11004:	69665f65 	.word	0x69665f65
   11008:	705f656c 	.word	0x705f656c
   1100c:	656b6361 	.word	0x656b6361
   11010:	66203a74 	.word	0x66203a74
   11014:	6873616c 	.word	0x6873616c
   11018:	63757320 	.word	0x63757320
   1101c:	73736563 	.word	0x73736563
   11020:	6c6c7566 	.word	0x6c6c7566
   11024:	72772079 	.word	0x72772079
   11028:	65747469 	.word	0x65747469
   1102c:	6977206e 	.word	0x6977206e
   11030:	6e206874 	.word	0x6e206874
   11034:	7265206f 	.word	0x7265206f
   11038:	73726f72 	.word	0x73726f72
   1103c:	0000000d 	.word	0x0000000d
   11040:	726f7473 	.word	0x726f7473
   11044:	69665f65 	.word	0x69665f65
   11048:	705f656c 	.word	0x705f656c
   1104c:	656b6361 	.word	0x656b6361
   11050:	66203a74 	.word	0x66203a74
   11054:	6873616c 	.word	0x6873616c
   11058:	726f6320 	.word	0x726f6320
   1105c:	74707572 	.word	0x74707572
   11060:	0d2e6465 	.word	0x0d2e6465
   11064:	00000000 	.word	0x00000000
   11068:	726f7473 	.word	0x726f7473
   1106c:	69665f65 	.word	0x69665f65
   11070:	705f656c 	.word	0x705f656c
   11074:	656b6361 	.word	0x656b6361
   11078:	66203a74 	.word	0x66203a74
   1107c:	20656c69 	.word	0x20656c69
   11080:	63656863 	.word	0x63656863
   11084:	6d75736b 	.word	0x6d75736b
   11088:	6f642073 	.word	0x6f642073
   1108c:	2074276e 	.word	0x2074276e
   11090:	6374616d 	.word	0x6374616d
   11094:	0a0d2e68 	.word	0x0a0d2e68
   11098:	70784520 	.word	0x70784520
   1109c:	65746365 	.word	0x65746365
   110a0:	68632064 	.word	0x68632064
   110a4:	736b6365 	.word	0x736b6365
   110a8:	25206d75 	.word	0x25206d75
   110ac:	0d783430 	.word	0x0d783430
   110b0:	6552200a 	.word	0x6552200a
   110b4:	76696563 	.word	0x76696563
   110b8:	63206465 	.word	0x63206465
   110bc:	6b636568 	.word	0x6b636568
   110c0:	206d7573 	.word	0x206d7573
   110c4:	78343025 	.word	0x78343025
   110c8:	00000a0d 	.word	0x00000a0d
   110cc:	61647075 	.word	0x61647075
   110d0:	625f6574 	.word	0x625f6574
   110d4:	5f746f6f 	.word	0x5f746f6f
   110d8:	74617473 	.word	0x74617473
   110dc:	203a7375 	.word	0x203a7375
   110e0:	5f776f72 	.word	0x5f776f72
   110e4:	655f6f74 	.word	0x655f6f74
   110e8:	65736172 	.word	0x65736172
   110ec:	6425203a 	.word	0x6425203a
   110f0:	00000a0d 	.word	0x00000a0d
   110f4:	61647075 	.word	0x61647075
   110f8:	625f6574 	.word	0x625f6574
   110fc:	5f746f6f 	.word	0x5f746f6f
   11100:	74617473 	.word	0x74617473
   11104:	203a7375 	.word	0x203a7375
   11108:	65676170 	.word	0x65676170
   1110c:	5f6f745f 	.word	0x5f6f745f
   11110:	74697277 	.word	0x74697277
   11114:	25203a65 	.word	0x25203a65
   11118:	000a0d64 	.word	0x000a0d64
   1111c:	61647075 	.word	0x61647075
   11120:	625f6574 	.word	0x625f6574
   11124:	5f746f6f 	.word	0x5f746f6f
   11128:	74617473 	.word	0x74617473
   1112c:	203a7375 	.word	0x203a7375
   11130:	5f776f72 	.word	0x5f776f72
   11134:	72646461 	.word	0x72646461
   11138:	3a737365 	.word	0x3a737365
   1113c:	0d642520 	.word	0x0d642520
   11140:	0000000a 	.word	0x0000000a
   11144:	61647075 	.word	0x61647075
   11148:	625f6574 	.word	0x625f6574
   1114c:	5f746f6f 	.word	0x5f746f6f
   11150:	74617473 	.word	0x74617473
   11154:	203a7375 	.word	0x203a7375
   11158:	65676170 	.word	0x65676170
   1115c:	66666f5f 	.word	0x66666f5f
   11160:	3a746573 	.word	0x3a746573
   11164:	0d642520 	.word	0x0d642520
   11168:	0000000a 	.word	0x0000000a
   1116c:	3a776f72 	.word	0x3a776f72
   11170:	34302520 	.word	0x34302520
   11174:	000a0d78 	.word	0x000a0d78
   11178:	61647075 	.word	0x61647075
   1117c:	625f6574 	.word	0x625f6574
   11180:	5f746f6f 	.word	0x5f746f6f
   11184:	74617473 	.word	0x74617473
   11188:	77207375 	.word	0x77207375
   1118c:	65746972 	.word	0x65746972
   11190:	6f6f625f 	.word	0x6f6f625f
   11194:	69732e74 	.word	0x69732e74
   11198:	74616e67 	.word	0x74616e67
   1119c:	3a657275 	.word	0x3a657275
   111a0:	32302520 	.word	0x32302520
   111a4:	000a0d78 	.word	0x000a0d78
   111a8:	72617473 	.word	0x72617473
   111ac:	676e6974 	.word	0x676e6974
   111b0:	65657320 	.word	0x65657320
   111b4:	25203a64 	.word	0x25203a64
   111b8:	0d783430 	.word	0x0d783430
   111bc:	0000000a 	.word	0x0000000a
   111c0:	69726576 	.word	0x69726576
   111c4:	665f7966 	.word	0x665f7966
   111c8:	6873616c 	.word	0x6873616c
   111cc:	7265203a 	.word	0x7265203a
   111d0:	20726f72 	.word	0x20726f72
   111d4:	69797274 	.word	0x69797274
   111d8:	7420676e 	.word	0x7420676e
   111dc:	6572206f 	.word	0x6572206f
   111e0:	65206461 	.word	0x65206461
   111e4:	72657478 	.word	0x72657478
   111e8:	206c616e 	.word	0x206c616e
   111ec:	73616c66 	.word	0x73616c66
   111f0:	25202e68 	.word	0x25202e68
   111f4:	00000064 	.word	0x00000064
   111f8:	202e6425 	.word	0x202e6425
   111fc:	69726576 	.word	0x69726576
   11200:	665f7966 	.word	0x665f7966
   11204:	6873616c 	.word	0x6873616c
   11208:	7263203a 	.word	0x7263203a
   1120c:	61765f63 	.word	0x61765f63
   11210:	25203a6c 	.word	0x25203a6c
   11214:	000a0d64 	.word	0x000a0d64
   11218:	69726576 	.word	0x69726576
   1121c:	665f7966 	.word	0x665f7966
   11220:	6873616c 	.word	0x6873616c
   11224:	6572203a 	.word	0x6572203a
   11228:	6e69616d 	.word	0x6e69616d
   1122c:	20676e69 	.word	0x20676e69
   11230:	65747962 	.word	0x65747962
   11234:	64252073 	.word	0x64252073
   11238:	00000a0d 	.word	0x00000a0d
   1123c:	69726576 	.word	0x69726576
   11240:	665f7966 	.word	0x665f7966
   11244:	6873616c 	.word	0x6873616c
   11248:	6163203a 	.word	0x6163203a
   1124c:	6c75636c 	.word	0x6c75636c
   11250:	64657461 	.word	0x64657461
   11254:	63726320 	.word	0x63726320
   11258:	76203233 	.word	0x76203233
   1125c:	203a6c61 	.word	0x203a6c61
   11260:	0a0d6425 	.word	0x0a0d6425
   11264:	00000000 	.word	0x00000000
   11268:	69666977 	.word	0x69666977
   1126c:	6c61635f 	.word	0x6c61635f
   11270:	6361626c 	.word	0x6361626c
   11274:	4d5b206b 	.word	0x4d5b206b
   11278:	575f4d32 	.word	0x575f4d32
   1127c:	5f494649 	.word	0x5f494649
   11280:	50534552 	.word	0x50534552
   11284:	4e4f435f 	.word	0x4e4f435f
   11288:	4154535f 	.word	0x4154535f
   1128c:	435f4554 	.word	0x435f4554
   11290:	474e4148 	.word	0x474e4148
   11294:	3a5d4445 	.word	0x3a5d4445
   11298:	6e6f6320 	.word	0x6e6f6320
   1129c:	7463656e 	.word	0x7463656e
   112a0:	0d2e6465 	.word	0x0d2e6465
   112a4:	00000000 	.word	0x00000000
   112a8:	69666977 	.word	0x69666977
   112ac:	6c61635f 	.word	0x6c61635f
   112b0:	6361626c 	.word	0x6361626c
   112b4:	4d5b206b 	.word	0x4d5b206b
   112b8:	575f4d32 	.word	0x575f4d32
   112bc:	5f494649 	.word	0x5f494649
   112c0:	50534552 	.word	0x50534552
   112c4:	4e4f435f 	.word	0x4e4f435f
   112c8:	4154535f 	.word	0x4154535f
   112cc:	435f4554 	.word	0x435f4554
   112d0:	474e4148 	.word	0x474e4148
   112d4:	205d4445 	.word	0x205d4445
   112d8:	63736964 	.word	0x63736964
   112dc:	656e6e6f 	.word	0x656e6e6f
   112e0:	64657463 	.word	0x64657463
   112e4:	00000d2e 	.word	0x00000d2e
   112e8:	69666977 	.word	0x69666977
   112ec:	6c61635f 	.word	0x6c61635f
   112f0:	6361626c 	.word	0x6361626c
   112f4:	4d5b206b 	.word	0x4d5b206b
   112f8:	575f4d32 	.word	0x575f4d32
   112fc:	5f494649 	.word	0x5f494649
   11300:	5f514552 	.word	0x5f514552
   11304:	50434844 	.word	0x50434844
   11308:	4e4f435f 	.word	0x4e4f435f
   1130c:	203a5d46 	.word	0x203a5d46
   11310:	61205049 	.word	0x61205049
   11314:	65726464 	.word	0x65726464
   11318:	69207373 	.word	0x69207373
   1131c:	75252073 	.word	0x75252073
   11320:	2e75252e 	.word	0x2e75252e
   11324:	252e7525 	.word	0x252e7525
   11328:	000a0d75 	.word	0x000a0d75
   1132c:	69666977 	.word	0x69666977
   11330:	6c61635f 	.word	0x6c61635f
   11334:	6361626c 	.word	0x6361626c
   11338:	645b206b 	.word	0x645b206b
   1133c:	75616665 	.word	0x75616665
   11340:	3a5d746c 	.word	0x3a5d746c
   11344:	52524520 	.word	0x52524520
   11348:	6520524f 	.word	0x6520524f
   1134c:	25207476 	.word	0x25207476
   11350:	000a0d64 	.word	0x000a0d64
   11354:	74697277 	.word	0x74697277
   11358:	69665f65 	.word	0x69665f65
   1135c:	61776d72 	.word	0x61776d72
   11360:	6d5f6572 	.word	0x6d5f6572
   11364:	64617465 	.word	0x64617465
   11368:	3a617461 	.word	0x3a617461
   1136c:	756f6320 	.word	0x756f6320
   11370:	6e20646c 	.word	0x6e20646c
   11374:	7720746f 	.word	0x7720746f
   11378:	65746972 	.word	0x65746972
   1137c:	206f7420 	.word	0x206f7420
   11380:	73616c66 	.word	0x73616c66
   11384:	000d2168 	.word	0x000d2168
   11388:	6c696166 	.word	0x6c696166
   1138c:	74206465 	.word	0x74206465
   11390:	6e69206f 	.word	0x6e69206f
   11394:	61697469 	.word	0x61697469
   11398:	657a696c 	.word	0x657a696c
   1139c:	4c535420 	.word	0x4c535420
   113a0:	31363532 	.word	0x31363532
   113a4:	69726420 	.word	0x69726420
   113a8:	2e726576 	.word	0x2e726576
   113ac:	0000000d 	.word	0x0000000d
   113b0:	6c696166 	.word	0x6c696166
   113b4:	74206465 	.word	0x74206465
   113b8:	6573206f 	.word	0x6573206f
   113bc:	7220646e 	.word	0x7220646e
   113c0:	73696765 	.word	0x73696765
   113c4:	20726574 	.word	0x20726574
   113c8:	75716572 	.word	0x75716572
   113cc:	20747365 	.word	0x20747365
   113d0:	20726f66 	.word	0x20726f66
   113d4:	6d6d6f63 	.word	0x6d6d6f63
   113d8:	20646e61 	.word	0x20646e61
   113dc:	30257830 	.word	0x30257830
   113e0:	0d217832 	.word	0x0d217832
   113e4:	0000000a 	.word	0x0000000a
   113e8:	00001a36 	.word	0x00001a36
   113ec:	00001a0e 	.word	0x00001a0e
   113f0:	00001a12 	.word	0x00001a12
   113f4:	00001a16 	.word	0x00001a16
   113f8:	00001a1a 	.word	0x00001a1a
   113fc:	00001a1e 	.word	0x00001a1e
   11400:	00001a22 	.word	0x00001a22
   11404:	00001a26 	.word	0x00001a26
   11408:	00001a2a 	.word	0x00001a2a
   1140c:	00001a2e 	.word	0x00001a2e
   11410:	00001ad4 	.word	0x00001ad4
   11414:	00001aac 	.word	0x00001aac
   11418:	00001ab2 	.word	0x00001ab2
   1141c:	00001ab8 	.word	0x00001ab8
   11420:	00001ab8 	.word	0x00001ab8
   11424:	00001abe 	.word	0x00001abe
   11428:	00001abe 	.word	0x00001abe
   1142c:	00001abe 	.word	0x00001abe
   11430:	00001ac4 	.word	0x00001ac4
   11434:	00001aca 	.word	0x00001aca
   11438:	00000100 	.word	0x00000100
   1143c:	00001bd6 	.word	0x00001bd6
   11440:	00001bae 	.word	0x00001bae
   11444:	00001bb4 	.word	0x00001bb4
   11448:	00001bba 	.word	0x00001bba
   1144c:	00001bba 	.word	0x00001bba
   11450:	00001bc0 	.word	0x00001bc0
   11454:	00001bc0 	.word	0x00001bc0
   11458:	00001bc0 	.word	0x00001bc0
   1145c:	00001bc6 	.word	0x00001bc6
   11460:	00001bcc 	.word	0x00001bcc
   11464:	00002002 	.word	0x00002002
   11468:	00001fde 	.word	0x00001fde
   1146c:	00001fe4 	.word	0x00001fe4
   11470:	00001fea 	.word	0x00001fea
   11474:	00001fea 	.word	0x00001fea
   11478:	00001ff0 	.word	0x00001ff0
   1147c:	00001ff0 	.word	0x00001ff0
   11480:	00001ff0 	.word	0x00001ff0
   11484:	00001ff6 	.word	0x00001ff6
   11488:	00001ffc 	.word	0x00001ffc
   1148c:	000025f6 	.word	0x000025f6
   11490:	00002842 	.word	0x00002842
   11494:	00002842 	.word	0x00002842
   11498:	00002842 	.word	0x00002842
   1149c:	00002842 	.word	0x00002842
   114a0:	00002842 	.word	0x00002842
   114a4:	00002842 	.word	0x00002842
   114a8:	00002842 	.word	0x00002842
   114ac:	00002842 	.word	0x00002842
   114b0:	00002842 	.word	0x00002842
   114b4:	00002842 	.word	0x00002842
   114b8:	00002842 	.word	0x00002842
   114bc:	00002842 	.word	0x00002842
   114c0:	00002842 	.word	0x00002842
   114c4:	00002842 	.word	0x00002842
   114c8:	00002842 	.word	0x00002842
   114cc:	000025de 	.word	0x000025de
   114d0:	00002842 	.word	0x00002842
   114d4:	00002842 	.word	0x00002842
   114d8:	00002842 	.word	0x00002842
   114dc:	00002842 	.word	0x00002842
   114e0:	00002842 	.word	0x00002842
   114e4:	00002842 	.word	0x00002842
   114e8:	00002842 	.word	0x00002842
   114ec:	00002842 	.word	0x00002842
   114f0:	00002842 	.word	0x00002842
   114f4:	00002842 	.word	0x00002842
   114f8:	00002842 	.word	0x00002842
   114fc:	00002842 	.word	0x00002842
   11500:	00002842 	.word	0x00002842
   11504:	00002842 	.word	0x00002842
   11508:	00002842 	.word	0x00002842
   1150c:	000025ee 	.word	0x000025ee
   11510:	00002842 	.word	0x00002842
   11514:	00002842 	.word	0x00002842
   11518:	00002842 	.word	0x00002842
   1151c:	00002842 	.word	0x00002842
   11520:	00002842 	.word	0x00002842
   11524:	00002842 	.word	0x00002842
   11528:	00002842 	.word	0x00002842
   1152c:	00002842 	.word	0x00002842
   11530:	00002842 	.word	0x00002842
   11534:	00002842 	.word	0x00002842
   11538:	00002842 	.word	0x00002842
   1153c:	00002842 	.word	0x00002842
   11540:	00002842 	.word	0x00002842
   11544:	00002842 	.word	0x00002842
   11548:	00002842 	.word	0x00002842
   1154c:	000025e6 	.word	0x000025e6
   11550:	000025fe 	.word	0x000025fe
   11554:	000025c6 	.word	0x000025c6
   11558:	000025d6 	.word	0x000025d6
   1155c:	000025ce 	.word	0x000025ce
   11560:	00000002 	.word	0x00000002
   11564:	00000003 	.word	0x00000003
   11568:	00000028 	.word	0x00000028
   1156c:	00000029 	.word	0x00000029
   11570:	00000004 	.word	0x00000004
   11574:	00000005 	.word	0x00000005
   11578:	00000006 	.word	0x00000006
   1157c:	00000007 	.word	0x00000007
   11580:	0000ffff 	.word	0x0000ffff
   11584:	0000ffff 	.word	0x0000ffff
   11588:	00000022 	.word	0x00000022
   1158c:	00000023 	.word	0x00000023
   11590:	0000ffff 	.word	0x0000ffff
   11594:	0000ffff 	.word	0x0000ffff
   11598:	0000ffff 	.word	0x0000ffff
   1159c:	0000ffff 	.word	0x0000ffff
   115a0:	00000008 	.word	0x00000008
   115a4:	00000009 	.word	0x00000009
   115a8:	0000000a 	.word	0x0000000a
   115ac:	0000000b 	.word	0x0000000b
   115b0:	00003ff2 	.word	0x00003ff2
   115b4:	00003fec 	.word	0x00003fec
   115b8:	00003fe6 	.word	0x00003fe6
   115bc:	00003fe0 	.word	0x00003fe0
   115c0:	00003ff8 	.word	0x00003ff8
   115c4:	00004000 	.word	0x00004000
   115c8:	00003ff8 	.word	0x00003ff8
   115cc:	00003fda 	.word	0x00003fda
   115d0:	00003fd4 	.word	0x00003fd4
   115d4:	00003ff8 	.word	0x00003ff8
   115d8:	00003fce 	.word	0x00003fce
   115dc:	00003fce 	.word	0x00003fce
   115e0:	00003fc8 	.word	0x00003fc8
   115e4:	00003fc2 	.word	0x00003fc2
   115e8:	00004000 	.word	0x00004000
   115ec:	0000406a 	.word	0x0000406a
   115f0:	00004064 	.word	0x00004064
   115f4:	0000405e 	.word	0x0000405e
   115f8:	00004058 	.word	0x00004058
   115fc:	00004070 	.word	0x00004070
   11600:	00004078 	.word	0x00004078
   11604:	00004070 	.word	0x00004070
   11608:	00004052 	.word	0x00004052
   1160c:	0000404c 	.word	0x0000404c
   11610:	00004070 	.word	0x00004070
   11614:	00004046 	.word	0x00004046
   11618:	00004046 	.word	0x00004046
   1161c:	00004040 	.word	0x00004040
   11620:	0000403a 	.word	0x0000403a
   11624:	00004078 	.word	0x00004078
   11628:	000040e4 	.word	0x000040e4
   1162c:	000040de 	.word	0x000040de
   11630:	000040d8 	.word	0x000040d8
   11634:	000040d2 	.word	0x000040d2
   11638:	000040ea 	.word	0x000040ea
   1163c:	000040ea 	.word	0x000040ea
   11640:	000040ea 	.word	0x000040ea
   11644:	000040cc 	.word	0x000040cc
   11648:	000040c6 	.word	0x000040c6
   1164c:	000040ea 	.word	0x000040ea
   11650:	000040c0 	.word	0x000040c0
   11654:	000040c0 	.word	0x000040c0
   11658:	000040ba 	.word	0x000040ba
   1165c:	000040b4 	.word	0x000040b4
   11660:	33323130 	.word	0x33323130
   11664:	37363534 	.word	0x37363534
   11668:	62613938 	.word	0x62613938
   1166c:	66656463 	.word	0x66656463
   11670:	00000d31 	.word	0x00000d31
   11674:	6e617254 	.word	0x6e617254
   11678:	72656673 	.word	0x72656673
   1167c:	636e452d 	.word	0x636e452d
   11680:	6e69646f 	.word	0x6e69646f
   11684:	00203a67 	.word	0x00203a67
   11688:	6e6e6f43 	.word	0x6e6e6f43
   1168c:	69746365 	.word	0x69746365
   11690:	203a6e6f 	.word	0x203a6e6f
   11694:	00000000 	.word	0x00000000
   11698:	50545448 	.word	0x50545448
   1169c:	0000002f 	.word	0x0000002f
   116a0:	20544547 	.word	0x20544547
   116a4:	00000000 	.word	0x00000000
   116a8:	54534f50 	.word	0x54534f50
   116ac:	00000020 	.word	0x00000020
   116b0:	454c4544 	.word	0x454c4544
   116b4:	00204554 	.word	0x00204554
   116b8:	20545550 	.word	0x20545550
   116bc:	00000000 	.word	0x00000000
   116c0:	4954504f 	.word	0x4954504f
   116c4:	20534e4f 	.word	0x20534e4f
   116c8:	00000000 	.word	0x00000000
   116cc:	44414548 	.word	0x44414548
   116d0:	00000020 	.word	0x00000020
   116d4:	54544820 	.word	0x54544820
   116d8:	2e312f50 	.word	0x2e312f50
   116dc:	000a0d31 	.word	0x000a0d31
   116e0:	72657355 	.word	0x72657355
   116e4:	6567412d 	.word	0x6567412d
   116e8:	203a746e 	.word	0x203a746e
   116ec:	00000000 	.word	0x00000000
   116f0:	74736f48 	.word	0x74736f48
   116f4:	0000203a 	.word	0x0000203a
   116f8:	6e6e6f43 	.word	0x6e6e6f43
   116fc:	69746365 	.word	0x69746365
   11700:	203a6e6f 	.word	0x203a6e6f
   11704:	7065654b 	.word	0x7065654b
   11708:	696c412d 	.word	0x696c412d
   1170c:	0a0d6576 	.word	0x0a0d6576
   11710:	00000000 	.word	0x00000000
   11714:	65636341 	.word	0x65636341
   11718:	452d7470 	.word	0x452d7470
   1171c:	646f636e 	.word	0x646f636e
   11720:	3a676e69 	.word	0x3a676e69
   11724:	000a0d20 	.word	0x000a0d20
   11728:	65636341 	.word	0x65636341
   1172c:	432d7470 	.word	0x432d7470
   11730:	73726168 	.word	0x73726168
   11734:	203a7465 	.word	0x203a7465
   11738:	2d667475 	.word	0x2d667475
   1173c:	000a0d38 	.word	0x000a0d38
   11740:	6e617254 	.word	0x6e617254
   11744:	72656673 	.word	0x72656673
   11748:	636e452d 	.word	0x636e452d
   1174c:	6e69646f 	.word	0x6e69646f
   11750:	63203a67 	.word	0x63203a67
   11754:	6b6e7568 	.word	0x6b6e7568
   11758:	0a0d6465 	.word	0x0a0d6465
   1175c:	00000000 	.word	0x00000000
   11760:	00007525 	.word	0x00007525
   11764:	746e6f43 	.word	0x746e6f43
   11768:	2d746e65 	.word	0x2d746e65
   1176c:	676e654c 	.word	0x676e654c
   11770:	203a6874 	.word	0x203a6874
   11774:	00000000 	.word	0x00000000
   11778:	656d7461 	.word	0x656d7461
   1177c:	2e312f6c 	.word	0x2e312f6c
   11780:	00322e30 	.word	0x00322e30
   11784:	70747468 	.word	0x70747468
   11788:	002f2f3a 	.word	0x002f2f3a
   1178c:	70747468 	.word	0x70747468
   11790:	2f2f3a73 	.word	0x2f2f3a73
   11794:	00000000 	.word	0x00000000
   11798:	42002000 	.word	0x42002000
   1179c:	42002400 	.word	0x42002400
   117a0:	42002800 	.word	0x42002800

000117a4 <_tcc_apbcmasks>:
   117a4:	00000100 00000200 00000400              ............

000117b0 <_tcc_cc_nums>:
   117b0:	00020204                                ....

000117b4 <_tcc_gclk_ids>:
   117b4:	001b1a1a                                ....

000117b8 <_tcc_maxs>:
   117b8:	00ffffff 00ffffff 0000ffff              ............

000117c4 <_tcc_ow_nums>:
   117c4:	00020408                                ....

000117c8 <_tcc_intflag>:
   117c8:	00000001 00000002 00000004 00000008     ................
   117d8:	00001000 00002000 00004000 00008000     ..... ...@......
   117e8:	00010000 00020000 00040000 00080000     ................

000117f8 <tcc_interrupt_vectors.12458>:
   117f8:	0011100f 42000800 42000c00 42001000     .......B...B...B
   11808:	42001400 42001800 42001c00              ...B...B...B

00011814 <__FUNCTION__.14891>:
   11814:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   11824:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   11834:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   11844:	6320746c 0000646d 000069f4 000069c4     lt cmd...i...i..
   11854:	000069bc 000069d4 000069cc 000069ec     .i...i...i...i..
   11864:	000069dc 000069e4                       .i...i..

0001186c <__FUNCTION__.13073>:
   1186c:	5f666968 646e6573 00000000              hif_send....

00011878 <__FUNCTION__.13083>:
   11878:	5f666968 00727369                       hif_isr.

00011880 <__FUNCTION__.13089>:
   11880:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00011890 <__FUNCTION__.13101>:
   11890:	5f666968 65636572 00657669              hif_receive.

0001189c <__FUNCTION__.13117>:
   1189c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   118ac:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   118bc:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   118cc:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   118dc:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   118ec:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   118fc:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   1190c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   1191c:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   1192c:	6c616320 6361626c 7369206b 746f6e20      callback is not
   1193c:	67657220 65747369 00646572 6b6f6353      registered.Scok
   1194c:	63207465 626c6c61 206b6361 6e207369     et callback is n
   1195c:	7220746f 73696765 65726574 00000064     ot registered...
   1196c:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   1197c:	20746f6e 69676572 72657473 00006465     not registered..
   1198c:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   1199c:	6e207369 7220746f 73696765 65726574     is not registere
   119ac:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   119bc:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   119cc:	64657265 00000000 66696828 6e692029     ered....(hif) in
   119dc:	696c6176 72672064 2070756f 00004449     valid group ID..
   119ec:	66696828 6f682029 61207473 64207070     (hif) host app d
   119fc:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   11a0c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   11a1c:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   11a2c:	66696828 61462029 2065736c 65746e69     (hif) False inte
   11a3c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   11a4c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   11a5c:	7265746e 74707572 67657220 00000000     nterrupt reg....
   11a6c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   11a7c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   11a8c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   11a9c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   11aac:	696c6176 72612064 656d7567 0000746e     valid argument..
   11abc:	20505041 75716552 65747365 69532064     APP Requested Si
   11acc:	6920657a 616c2073 72656772 61687420     ze is larger tha
   11adc:	6874206e 65722065 65766963 75622064     n the recived bu
   11aec:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   11afc:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   11b0c:	65747365 64412064 73657264 65622073     ested Address be
   11b1c:	646e6f79 65687420 63657220 64657669     yond the recived
   11b2c:	66756220 20726566 72646461 20737365      buffer address 
   11b3c:	20646e61 676e656c 00006874 20705247     and length..GRp 
   11b4c:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   11b5c:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   11b6c:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   11b7c:	6b617720 74207075 63206568 00706968      wakup the chip.

00011b8c <__FUNCTION__.13052>:
   11b8c:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00011b98 <__FUNCTION__.13081>:
   11b98:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00011ba8 <__FUNCTION__.13109>:
   11ba8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   11bb8:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   11bc8:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   11bd8:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   11be8:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   11bf8:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   11c08:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   11c18:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   11c28:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   11c38:	20706557 2079656b 65646e69 64252078     Wep key index %d
   11c48:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   11c58:	2079656b 676e656c 25206874 00000a64     key length %d...
   11c68:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   11c78:	656c2079 6874676e 00000000 65646e75     y length....unde
   11c88:	656e6966 65732064 79742063 00006570     fined sec type..
   11c98:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   11ca8:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   11cb8:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   11cc8:	69754220 2520646c 69542073 2520656d      Build %s Time %
   11cd8:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   11ce8:	69726420 20726576 20726576 7525203a      driver ver : %u
   11cf8:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   11d08:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   11d18:	303a3831 36333a34 00000000 20727041     18:04:36....Apr 
   11d28:	32203432 00383130 76697244 62207265     24 2018.Driver b
   11d38:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   11d48:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   11d58:	65562065 6f697372 0000006e              e Version...

00011d64 <__FUNCTION__.12915>:
   11d64:	70696863 6b61775f 00000065              chip_wake...

00011d70 <__FUNCTION__.12964>:
   11d70:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   11d80:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   11d90:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   11da0:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   11db0:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   11dc0:	70696863 00000000 76697244 65567265     chip....DriverVe
   11dd0:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00011de0 <__FUNCTION__.12962>:
   11de0:	645f6d6e 695f7672 0074696e              nm_drv_init.

00011dec <__FUNCTION__.12969>:
   11dec:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   11dfc:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   11e0c:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   11e1c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   11e2c:	73616c66 69642068 6c626173 61662065     flash disable fa
   11e3c:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   11e4c:	6c696166 696e6920 75622074 00000073     fail init bus...
   11e5c:	6c696166 74206465 6e65206f 656c6261     failed to enable
   11e6c:	746e6920 75727265 2e737470 0000002e      interrupts.....
   11e7c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   11e8c:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   11e9c:	20444920 0a786c25 00000000 000079f0      ID %lx......y..
   11eac:	000079f0 00007a20 000079a2 000079c6     .y.. z...y...y..
   11ebc:	000079d4 00007a06 00007a06 00007a4e     .y...z...z..Nz..
   11ecc:	00007986 00007a88 00007a88 00007a88     .y...z...z...z..
   11edc:	00007a88 000079e2 cac4c9c3              .z...y......

00011ee8 <__FUNCTION__.12268>:
   11ee8:	5f697073 00646d63                       spi_cmd.

00011ef0 <__FUNCTION__.12275>:
   11ef0:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00011f00 <__FUNCTION__.12284>:
   11f00:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00011f0c <__FUNCTION__.12300>:
   11f0c:	5f697073 61746164 6165725f 00000064     spi_data_read...

00011f1c <__FUNCTION__.12315>:
   11f1c:	5f697073 61746164 6972775f 00006574     spi_data_write..

00011f2c <__FUNCTION__.12327>:
   11f2c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00011f3c <__FUNCTION__.12338>:
   11f3c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00011f4c <__FUNCTION__.12350>:
   11f4c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00011f5c <__FUNCTION__.12363>:
   11f5c:	735f6d6e 725f6970 00646165              nm_spi_read.

00011f68 <__FUNCTION__.12384>:
   11f68:	735f6d6e 695f6970 0074696e              nm_spi_init.

00011f74 <crc7_syndrome_table>:
   11f74:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   11f84:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   11f94:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   11fa4:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   11fb4:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   11fc4:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   11fd4:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   11fe4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   11ff4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   12004:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   12014:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   12024:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   12034:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   12044:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   12054:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   12064:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   12074:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   12084:	6e692064 6e726574 72206c61 20646165     d internal read 
   12094:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   120a4:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   120b4:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   120c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   120d4:	6e692064 6e726574 72206c61 20646165     d internal read 
   120e4:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   120f4:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   12104:	6e726574 77206c61 65746972 6f727020     ternal write pro
   12114:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   12124:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   12134:	20646d63 64616572 69686320 64692070     cmd read chip id
   12144:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12154:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   12164:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   12174:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12184:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   12194:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   121a4:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   121b4:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   121c4:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   121d4:	00000000 65736552 6e612074 65722064     ....Reset and re
   121e4:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   121f4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   12204:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   12214:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   12224:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   12234:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   12244:	69727720 62206574 6b636f6c 30252820      write block (%0
   12254:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   12264:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   12274:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   12284:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   12294:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   122a4:	61642064 62206174 6b636f6c 69727720     d data block wri
   122b4:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   122c4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   122d4:	656c6961 61642064 62206174 6b636f6c     ailed data block
   122e4:	63726320 69727720 202c6574 20737562      crc write, bus 
   122f4:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   12304:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   12314:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   12324:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   12334:	72206174 6f707365 2065736e 64616572     ta response read
   12344:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   12354:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   12364:	206b636f 61746164 69727720 2e2e6574     ock data write..
   12374:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12384:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   12394:	73756220 72726520 2e2e726f 0000002e      bus error......
   123a4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   123b4:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   123c4:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   123d4:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   123e4:	656c6961 61642064 72206174 6f707365     ailed data respo
   123f4:	2065736e 64616572 7562202c 72652073     nse read, bus er
   12404:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   12414:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   12424:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   12434:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   12444:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   12454:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   12464:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   12474:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   12484:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   12494:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   124a4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   124b4:	72202c64 20646165 20676572 38302528     d, read reg (%08
   124c4:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   124d4:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   124e4:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   124f4:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   12504:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   12514:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   12524:	6e612074 65722064 20797274 25206425     t and retry %d %
   12534:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   12544:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   12554:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   12564:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   12574:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   12584:	74697277 65722065 25282067 29783830     write reg (%08x)
   12594:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   125a4:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   125b4:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   125c4:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   125d4:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   125e4:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   125f4:	4449206e 25203d20 000a0d64 00009144     n ID = %d...D...
   12604:	00009144 00009120 00009144 00009120     D... ...D... ...
   12614:	00009106 00009106 00009144 00009144     ........D...D...
   12624:	00009144 00009144 00009144 00009144     D...D...D...D...
   12634:	00009144 00009144 00009144 00009144     D...D...D...D...
   12644:	00009144 00009144 00009144 00009144     D...D...D...D...
   12654:	00009144 00009144 00009144 00009144     D...D...D...D...
   12664:	00009144 00009144 00009144 00009144     D...D...D...D...
   12674:	00009144 00009144 00009144 00009144     D...D...D...D...
   12684:	00009144 00009144 00009144 00009144     D...D...D...D...
   12694:	00009144 00009144 00009144 00009144     D...D...D...D...
   126a4:	00009144 00009144 00009144 00009144     D...D...D...D...
   126b4:	00009144 00009144 00009144 00009144     D...D...D...D...
   126c4:	00009144 00009144 00009144 00009144     D...D...D...D...
   126d4:	00009144 00009144 00009144 00009144     D...D...D...D...
   126e4:	00009144 00009144 00009144 00009144     D...D...D...D...
   126f4:	00009144 00009144 00009144 00009120     D...D...D... ...
   12704:	00009120 00009128 00009128 00009128      ...(...(...(...
   12714:	00009128 000093ce 000093ca 000093ca     (...............
   12724:	0000942c 0000942c 000093e2 000093d4     ,...,...........
   12734:	000093e8 0000941a 000095ec 000095cc     ................
   12744:	000095cc 00009658 000095de 000095fa     ....X...........
   12754:	000095d0 00009608 00009648 6d726966     ........H...firm
   12764:	65726177 776f6420 616f6c6e 65722064     ware download re
   12774:	73657571 0d646574 00000000 70747468     quested.....http
   12784:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   12794:	652e6e6e 7e2f7564 63726177 2f726568     nn.edu/~warcher/
   127a4:	35657365 6d2f3631 64617465 2d617461     ese516/metadata-
   127b4:	2e696c63 006e6962 70747468 2f2f3a73     cli.bin.https://
   127c4:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   127d4:	7e2f7564 63726177 2f726568 35657365     du/~warcher/ese5
   127e4:	632f3631 622e696c 00006e69 6d726966     16/cli.bin..firm
   127f4:	65726177 63757320 73736563 6c6c7566     ware successfull
   12804:	6f642079 6f6c6e77 64656461 00000d21     y downloaded!...
   12814:	6d726966 65726177 736e7520 65636375     firmware unsucce
   12824:	75667373 43202e6c 6b636568 676f6c20     ssful. Check log
   12834:	726f6620 726f6d20 65642065 6c696174      for more detail
   12844:	000d2e73 75206f4e 74616470 6f662065     s...No update fo
   12854:	2e646e75 0000000d 202d2d2d 72617473     und.....--- star
   12864:	676e6974 65764520 65726772 56206e65     ting Evergreen V
   12874:	2d206425 202d2d2d 00000a0d 2e2e0a0d     %d ---- ........
   12884:	2d69572e 66206946 656c6961 6f742064     .Wi-Fi failed to
   12894:	6e6f6320 75676966 2e2e6572 00000d2e      configure......
   128a4:	72616f42 6e692064 61697469 657a696c     Board initialize
   128b4:	000d2e64 206c7374 756e616d 74636166     d...tsl manufact
   128c4:	72657275 3a646920 25783020 0d783230     urer id: 0x%02x.
   128d4:	0000000a 6e6e7552 20676e69 4d207361     ....Running as M
   128e4:	20545451 72657355 7325203a 00000a0d     QTT User: %s....
   128f4:	2f30672f 2f64656c 736e6573 002f726f     /g0/led/sensor/.
   12904:	2f30672f 616c6572 732f3179 6f736e65     /g0/relay1/senso
   12914:	00002f72 2f30672f 616c6572 732f3279     r/../g0/relay2/s
   12924:	6f736e65 00002f72 2f30672f 72677075     ensor/../g0/upgr
   12934:	2f656461 736e6573 002f726f 2f30672f     ade/sensor/./g0/
   12944:	706d7570 6e65732f 2f726f73 00000000     pump/sensor/....
   12954:	646e6553 20676e69 736e6573 7620726f     Sending sensor v
   12964:	65756c61 6f742073 6f6c4320 0d2e6475     alues to Cloud..
   12974:	00000000 206c7374 69766564 69206563     ....tsl device i
   12984:	78302064 78323025 00000000 66322e25     d 0x%02x....%.2f
   12994:	00000000 2f30672f 73696f6d 65732f74     ..../g0/moist/se
   129a4:	726f736e 0000002f 00006425 2f30672f     nsor/...%d../g0/
   129b4:	2f78756c 736e6573 002f726f 322e3225     lux/sensor/.%2.2
   129c4:	00000066 2f30672f 706d6574 6e65732f     f.../g0/temp/sen
   129d4:	2f726f73 00000000 2f30672f 2f6d7568     sor/..../g0/hum/
   129e4:	736e6573 002f726f 74616562 00000000     sensor/.beat....
   129f4:	2f30672f 72616568 61656274 65732f74     /g0/heartbeat/se
   12a04:	726f736e 0000002f 7349514d 00007064     nsor/...MQIsdp..

00012a14 <_global_impure_ptr>:
   12a14:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   12a24:	006e616e 31300030 35343332 39383736     nan.0.0123456789
   12a34:	44434241 30004645 34333231 38373635     ABCDEF.012345678
   12a44:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
   12a54:	4e614e00 00000000                       .NaN....

00012a5c <__sf_fake_stderr>:
	...

00012a7c <__sf_fake_stdin>:
	...

00012a9c <__sf_fake_stdout>:
	...
   12abc:	4f500043 00584953 0000002e              C.POSIX.....

00012ac8 <__mprec_bigtens>:
   12ac8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   12ad8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   12ae8:	7f73bf3c 75154fdd                       <.s..O.u

00012af0 <__mprec_tens>:
   12af0:	00000000 3ff00000 00000000 40240000     .......?......$@
   12b00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12b10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   12b20:	00000000 412e8480 00000000 416312d0     .......A......cA
   12b30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   12b40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   12b50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   12b60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   12b70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   12b80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   12b90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   12ba0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   12bb0:	79d99db4 44ea7843                       ...yCx.D

00012bb8 <p05.6047>:
   12bb8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   12bc8:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

00012bd5 <_ctype_>:
   12bd5:	20202000 20202020 28282020 20282828     .         ((((( 
   12be5:	20202020 20202020 20202020 20202020                     
   12bf5:	10108820 10101010 10101010 10101010      ...............
   12c05:	04040410 04040404 10040404 10101010     ................
   12c15:	41411010 41414141 01010101 01010101     ..AAAAAA........
   12c25:	01010101 01010101 01010101 10101010     ................
   12c35:	42421010 42424242 02020202 02020202     ..BBBBBB........
   12c45:	02020202 02020202 02020202 10101010     ................
   12c55:	00000020 00000000 00000000 00000000      ...............
	...
   12cd5:	e0000000 b00000e5 c20000e5 040000e5     ................
   12ce5:	c20000e5 a60000e5 c20000e5 040000e5     ................
   12cf5:	b00000e5 b00000e5 a60000e5 040000e5     ................
   12d05:	0c0000e5 0c0000e5 0c0000e5 c80000e5     ................
   12d15:	b00000e5 b00000e5 840000e5 680000e5     ...............h
   12d25:	840000e6 a60000e5 840000e5 680000e5     ...............h
   12d35:	b00000e6 b00000e5 a60000e5 680000e5     ...............h
   12d45:	0c0000e6 0c0000e5 0c0000e5 720000e5     ...............r
   12d55:	100000e6 600000e8 600000e7 5e0000e7     .......`...`...^
   12d65:	020000e7 020000e8 f80000e8 5e0000e7     ...............^
   12d75:	020000e7 f80000e8 020000e7 5e0000e8     ...............^
   12d85:	080000e7 080000e8 080000e8 980000e8     ................
   12d95:	dc0000e8 be0000f1 780000f1 960000f1     ...........x....
   12da5:	780000f0 b00000f1 780000f1 960000f1     ...x.......x....
   12db5:	be0000f0 be0000f1 b00000f1 960000f1     ................
   12dc5:	8e0000f0 8e0000f0 8e0000f0 f40000f0     ................
   12dd5:	3c0000f3 fc0000fa fc0000f8 f80000f8     ...<............
   12de5:	140000f8 140000fa 060000fa f80000fa     ................
   12df5:	140000f8 060000fa 140000fa f80000fa     ................
   12e05:	1c0000f8 1c0000fa 1c0000fa 200000fa     ............... 
   12e15:	f80000fc                                         ...

00012e18 <_init>:
   12e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e1a:	46c0      	nop			; (mov r8, r8)
   12e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12e1e:	bc08      	pop	{r3}
   12e20:	469e      	mov	lr, r3
   12e22:	4770      	bx	lr

00012e24 <__init_array_start>:
   12e24:	000000dd 	.word	0x000000dd

00012e28 <_fini>:
   12e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12e2e:	bc08      	pop	{r3}
   12e30:	469e      	mov	lr, r3
   12e32:	4770      	bx	lr

00012e34 <__fini_array_start>:
   12e34:	000000b5 	.word	0x000000b5
