
evergreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fd58  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00013d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000848  200001dc  00013f34  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20000a24  0001477c  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0008af2f  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000ab67  00000000  00000000  000ab1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001cf7d  00000000  00000000  000b5d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001230  00000000  00000000  000d2ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000020a0  00000000  00000000  000d3f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002714e  00000000  00000000  000d5fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00027aa0  00000000  00000000  000fd0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096f3f  00000000  00000000  00124b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003f58  00000000  00000000  001bbae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	28 2a 00 20 39 d4 00 00 35 d4 00 00 35 d4 00 00     (*. 9...5...5...
	...
    402c:	35 d4 00 00 00 00 00 00 00 00 00 00 35 d4 00 00     5...........5...
    403c:	35 d4 00 00 35 d4 00 00 35 d4 00 00 35 d4 00 00     5...5...5...5...
    404c:	35 d4 00 00 21 95 00 00 35 d4 00 00 35 d4 00 00     5...!...5...5...
    405c:	35 d4 00 00 35 d4 00 00 55 94 00 00 65 94 00 00     5...5...U...e...
    406c:	75 94 00 00 85 94 00 00 95 94 00 00 a5 94 00 00     u...............
    407c:	75 82 00 00 85 82 00 00 95 82 00 00 35 d4 00 00     u...........5...
    408c:	35 d4 00 00 35 d4 00 00 00 00 00 00 00 00 00 00     5...5...........
    409c:	45 61 00 00 35 d4 00 00 35 d4 00 00 35 d4 00 00     Ea..5...5...5...
    40ac:	35 d4 00 00 00 00 00 00                             5.......

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	200001dc 	.word	0x200001dc
    40d4:	00000000 	.word	0x00000000
    40d8:	00013d58 	.word	0x00013d58

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	200001e0 	.word	0x200001e0
    4108:	00013d58 	.word	0x00013d58
    410c:	00013d58 	.word	0x00013d58
    4110:	00000000 	.word	0x00000000

00004114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4114:	b570      	push	{r4, r5, r6, lr}
    4116:	b082      	sub	sp, #8
    4118:	0005      	movs	r5, r0
    411a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    411c:	2200      	movs	r2, #0
    411e:	466b      	mov	r3, sp
    4120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4122:	4c06      	ldr	r4, [pc, #24]	; (413c <usart_serial_getchar+0x28>)
    4124:	466b      	mov	r3, sp
    4126:	1d99      	adds	r1, r3, #6
    4128:	0028      	movs	r0, r5
    412a:	47a0      	blx	r4
    412c:	2800      	cmp	r0, #0
    412e:	d1f9      	bne.n	4124 <usart_serial_getchar+0x10>

	*c = temp;
    4130:	466b      	mov	r3, sp
    4132:	3306      	adds	r3, #6
    4134:	881b      	ldrh	r3, [r3, #0]
    4136:	7033      	strb	r3, [r6, #0]
}
    4138:	b002      	add	sp, #8
    413a:	bd70      	pop	{r4, r5, r6, pc}
    413c:	00008615 	.word	0x00008615

00004140 <usart_serial_putchar>:
{
    4140:	b570      	push	{r4, r5, r6, lr}
    4142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4144:	b28c      	uxth	r4, r1
    4146:	4e03      	ldr	r6, [pc, #12]	; (4154 <usart_serial_putchar+0x14>)
    4148:	0021      	movs	r1, r4
    414a:	0028      	movs	r0, r5
    414c:	47b0      	blx	r6
    414e:	2800      	cmp	r0, #0
    4150:	d1fa      	bne.n	4148 <usart_serial_putchar+0x8>
}
    4152:	bd70      	pop	{r4, r5, r6, pc}
    4154:	000085e9 	.word	0x000085e9

00004158 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
    4158:	b5f0      	push	{r4, r5, r6, r7, lr}
    415a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    415c:	2380      	movs	r3, #128	; 0x80
    415e:	05db      	lsls	r3, r3, #23
    4160:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4162:	2300      	movs	r3, #0
    4164:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4166:	22ff      	movs	r2, #255	; 0xff
    4168:	4669      	mov	r1, sp
    416a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    416c:	2200      	movs	r2, #0
    416e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4170:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    4172:	2401      	movs	r4, #1
    4174:	2124      	movs	r1, #36	; 0x24
    4176:	4668      	mov	r0, sp
    4178:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    417a:	3101      	adds	r1, #1
    417c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    417e:	3101      	adds	r1, #1
    4180:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    4182:	3101      	adds	r1, #1
    4184:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    4186:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4188:	3105      	adds	r1, #5
    418a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    418c:	3101      	adds	r1, #1
    418e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4190:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4192:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4194:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4196:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4198:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    419a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    419c:	2313      	movs	r3, #19
    419e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    41a0:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200;
    41a2:	23e1      	movs	r3, #225	; 0xe1
    41a4:	025b      	lsls	r3, r3, #9
    41a6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    41a8:	23c4      	movs	r3, #196	; 0xc4
    41aa:	039b      	lsls	r3, r3, #14
    41ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    41ae:	2301      	movs	r3, #1
    41b0:	425b      	negs	r3, r3
    41b2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    41b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
    41b6:	4b17      	ldr	r3, [pc, #92]	; (4214 <configure_usart+0xbc>)
    41b8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
    41ba:	4b17      	ldr	r3, [pc, #92]	; (4218 <configure_usart+0xc0>)
    41bc:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    41be:	4d17      	ldr	r5, [pc, #92]	; (421c <configure_usart+0xc4>)
    41c0:	4b17      	ldr	r3, [pc, #92]	; (4220 <configure_usart+0xc8>)
    41c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    41c4:	4a17      	ldr	r2, [pc, #92]	; (4224 <configure_usart+0xcc>)
    41c6:	4b18      	ldr	r3, [pc, #96]	; (4228 <configure_usart+0xd0>)
    41c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    41ca:	4a18      	ldr	r2, [pc, #96]	; (422c <configure_usart+0xd4>)
    41cc:	4b18      	ldr	r3, [pc, #96]	; (4230 <configure_usart+0xd8>)
    41ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    41d0:	466a      	mov	r2, sp
    41d2:	4918      	ldr	r1, [pc, #96]	; (4234 <configure_usart+0xdc>)
    41d4:	0028      	movs	r0, r5
    41d6:	4b18      	ldr	r3, [pc, #96]	; (4238 <configure_usart+0xe0>)
    41d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    41da:	4f18      	ldr	r7, [pc, #96]	; (423c <configure_usart+0xe4>)
    41dc:	683b      	ldr	r3, [r7, #0]
    41de:	6898      	ldr	r0, [r3, #8]
    41e0:	2100      	movs	r1, #0
    41e2:	4e17      	ldr	r6, [pc, #92]	; (4240 <configure_usart+0xe8>)
    41e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    41e6:	683b      	ldr	r3, [r7, #0]
    41e8:	6858      	ldr	r0, [r3, #4]
    41ea:	2100      	movs	r1, #0
    41ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    41ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    41f0:	0030      	movs	r0, r6
    41f2:	4b14      	ldr	r3, [pc, #80]	; (4244 <configure_usart+0xec>)
    41f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    41f6:	231f      	movs	r3, #31
    41f8:	4018      	ands	r0, r3
    41fa:	4084      	lsls	r4, r0
    41fc:	4b12      	ldr	r3, [pc, #72]	; (4248 <configure_usart+0xf0>)
    41fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4204:	2b00      	cmp	r3, #0
    4206:	d1fc      	bne.n	4202 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4208:	6833      	ldr	r3, [r6, #0]
    420a:	2202      	movs	r2, #2
    420c:	4313      	orrs	r3, r2
    420e:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);

	usart_enable(&usart_instance);
}
    4210:	b011      	add	sp, #68	; 0x44
    4212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4214:	002a0003 	.word	0x002a0003
    4218:	002b0003 	.word	0x002b0003
    421c:	200009ec 	.word	0x200009ec
    4220:	20000894 	.word	0x20000894
    4224:	00004141 	.word	0x00004141
    4228:	20000890 	.word	0x20000890
    422c:	00004115 	.word	0x00004115
    4230:	2000088c 	.word	0x2000088c
    4234:	42001800 	.word	0x42001800
    4238:	000082a5 	.word	0x000082a5
    423c:	2000000c 	.word	0x2000000c
    4240:	0001046d 	.word	0x0001046d
    4244:	00009425 	.word	0x00009425
    4248:	e000e100 	.word	0xe000e100

0000424c <configure_flash>:
#endif
#ifdef AT25DFX_H
void configure_flash()
{
    424c:	b570      	push	{r4, r5, r6, lr}
    424e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    4250:	ac02      	add	r4, sp, #8
    4252:	2501      	movs	r5, #1
    4254:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    4256:	2300      	movs	r3, #0
    4258:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    425a:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    425c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    425e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    4260:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4262:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    4264:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    4266:	2224      	movs	r2, #36	; 0x24
    4268:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    426a:	3a18      	subs	r2, #24
    426c:	2100      	movs	r1, #0
    426e:	a808      	add	r0, sp, #32
    4270:	4b23      	ldr	r3, [pc, #140]	; (4300 <configure_flash+0xb4>)
    4272:	4798      	blx	r3
	struct at25dfx_chip_config at_chip_config;
	struct spi_config at25dfx_spi_config;

	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    4274:	4b23      	ldr	r3, [pc, #140]	; (4304 <configure_flash+0xb8>)
    4276:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    4278:	2380      	movs	r3, #128	; 0x80
    427a:	025b      	lsls	r3, r3, #9
    427c:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    427e:	4b22      	ldr	r3, [pc, #136]	; (4308 <configure_flash+0xbc>)
    4280:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    4282:	2301      	movs	r3, #1
    4284:	425b      	negs	r3, r3
    4286:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    4288:	4b20      	ldr	r3, [pc, #128]	; (430c <configure_flash+0xc0>)
    428a:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    428c:	4b20      	ldr	r3, [pc, #128]	; (4310 <configure_flash+0xc4>)
    428e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    4290:	4e20      	ldr	r6, [pc, #128]	; (4314 <configure_flash+0xc8>)
    4292:	0022      	movs	r2, r4
    4294:	4920      	ldr	r1, [pc, #128]	; (4318 <configure_flash+0xcc>)
    4296:	0030      	movs	r0, r6
    4298:	4b20      	ldr	r3, [pc, #128]	; (431c <configure_flash+0xd0>)
    429a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    429c:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    429e:	0020      	movs	r0, r4
    42a0:	4b1f      	ldr	r3, [pc, #124]	; (4320 <configure_flash+0xd4>)
    42a2:	4798      	blx	r3
    42a4:	231f      	movs	r3, #31
    42a6:	4018      	ands	r0, r3
    42a8:	4085      	lsls	r5, r0
    42aa:	4b1e      	ldr	r3, [pc, #120]	; (4324 <configure_flash+0xd8>)
    42ac:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    42ae:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    42b0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    42b2:	2b00      	cmp	r3, #0
    42b4:	d1fc      	bne.n	42b0 <configure_flash+0x64>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    42b6:	6823      	ldr	r3, [r4, #0]
    42b8:	2202      	movs	r2, #2
    42ba:	4313      	orrs	r3, r2
    42bc:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    42be:	4c1a      	ldr	r4, [pc, #104]	; (4328 <configure_flash+0xdc>)
    42c0:	2304      	movs	r3, #4
    42c2:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    42c4:	3303      	adds	r3, #3
    42c6:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    42c8:	4b12      	ldr	r3, [pc, #72]	; (4314 <configure_flash+0xc8>)
    42ca:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    42cc:	a901      	add	r1, sp, #4
    42ce:	2301      	movs	r3, #1
    42d0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    42d2:	2200      	movs	r2, #0
    42d4:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    42d6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    42d8:	2007      	movs	r0, #7
    42da:	4b14      	ldr	r3, [pc, #80]	; (432c <configure_flash+0xe0>)
    42dc:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    42de:	7962      	ldrb	r2, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    42e0:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    42e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    42e4:	2900      	cmp	r1, #0
    42e6:	d104      	bne.n	42f2 <configure_flash+0xa6>
		return &(ports[port_index]->Group[group_index]);
    42e8:	0953      	lsrs	r3, r2, #5
    42ea:	01db      	lsls	r3, r3, #7
    42ec:	4910      	ldr	r1, [pc, #64]	; (4330 <configure_flash+0xe4>)
    42ee:	468c      	mov	ip, r1
    42f0:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    42f2:	211f      	movs	r1, #31
    42f4:	4011      	ands	r1, r2
    42f6:	2201      	movs	r2, #1
    42f8:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    42fa:	619a      	str	r2, [r3, #24]
	spi_enable(&at25dfx_spi);

	at_chip_config.type = AT25DFX_MEM_TYPE;
	at_chip_config.cs_pin = AT25DFX_CS;
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at_chip_config);
}
    42fc:	b010      	add	sp, #64	; 0x40
    42fe:	bd70      	pop	{r4, r5, r6, pc}
    4300:	000101b7 	.word	0x000101b7
    4304:	000f4240 	.word	0x000f4240
    4308:	00100002 	.word	0x00100002
    430c:	00120002 	.word	0x00120002
    4310:	00130002 	.word	0x00130002
    4314:	20000700 	.word	0x20000700
    4318:	42000c00 	.word	0x42000c00
    431c:	00008819 	.word	0x00008819
    4320:	00009425 	.word	0x00009425
    4324:	e000e100 	.word	0xe000e100
    4328:	2000060c 	.word	0x2000060c
    432c:	0000cc01 	.word	0x0000cc01
    4330:	41004400 	.word	0x41004400

00004334 <configure_nvm>:
#endif

#ifdef NVM_H_INCLUDED
void configure_nvm()
{
    4334:	b500      	push	{lr}
    4336:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    4338:	2200      	movs	r2, #0
    433a:	466b      	mov	r3, sp
    433c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    433e:	4b07      	ldr	r3, [pc, #28]	; (435c <configure_nvm+0x28>)
    4340:	685b      	ldr	r3, [r3, #4]
    4342:	06db      	lsls	r3, r3, #27
    4344:	0f1b      	lsrs	r3, r3, #28
    4346:	4669      	mov	r1, sp
    4348:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    434a:	70ca      	strb	r2, [r1, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    434c:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;

	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    434e:	704a      	strb	r2, [r1, #1]

	nvm_set_config(&config_nvm);
    4350:	4668      	mov	r0, sp
    4352:	4b03      	ldr	r3, [pc, #12]	; (4360 <configure_nvm+0x2c>)
    4354:	4798      	blx	r3
}
    4356:	b003      	add	sp, #12
    4358:	bd00      	pop	{pc}
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	41004000 	.word	0x41004000
    4360:	0000c911 	.word	0x0000c911

00004364 <configure_i2c_hdc>:
 **/

#include "hdc_1080.h"

void configure_i2c_hdc()
{
    4364:	b510      	push	{r4, lr}
    4366:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    4368:	aa01      	add	r2, sp, #4
    436a:	2364      	movs	r3, #100	; 0x64
    436c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    436e:	4b1f      	ldr	r3, [pc, #124]	; (43ec <configure_i2c_hdc+0x88>)
    4370:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    4372:	2300      	movs	r3, #0
    4374:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    4376:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    4378:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    437a:	2180      	movs	r1, #128	; 0x80
    437c:	0389      	lsls	r1, r1, #14
    437e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    4380:	2101      	movs	r1, #1
    4382:	4249      	negs	r1, r1
    4384:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    4386:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    4388:	3125      	adds	r1, #37	; 0x25
    438a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    438c:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    438e:	3108      	adds	r1, #8
    4390:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    4392:	3101      	adds	r1, #1
    4394:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    4396:	3101      	adds	r1, #1
    4398:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    439a:	33d7      	adds	r3, #215	; 0xd7
    439c:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    439e:	4b14      	ldr	r3, [pc, #80]	; (43f0 <configure_i2c_hdc+0x8c>)
    43a0:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    43a2:	4b14      	ldr	r3, [pc, #80]	; (43f4 <configure_i2c_hdc+0x90>)
    43a4:	6213      	str	r3, [r2, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	enum status_code init_status = i2c_master_init(&i2c_hdc, SERCOM3, &config_i2c_master);
    43a6:	4914      	ldr	r1, [pc, #80]	; (43f8 <configure_i2c_hdc+0x94>)
    43a8:	4814      	ldr	r0, [pc, #80]	; (43fc <configure_i2c_hdc+0x98>)
    43aa:	4b15      	ldr	r3, [pc, #84]	; (4400 <configure_i2c_hdc+0x9c>)
    43ac:	4798      	blx	r3
	if (STATUS_OK != init_status) {
    43ae:	2800      	cmp	r0, #0
    43b0:	d116      	bne.n	43e0 <configure_i2c_hdc+0x7c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    43b2:	4b12      	ldr	r3, [pc, #72]	; (43fc <configure_i2c_hdc+0x98>)
    43b4:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    43b6:	2107      	movs	r1, #7
    43b8:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    43ba:	4219      	tst	r1, r3
    43bc:	d1fc      	bne.n	43b8 <configure_i2c_hdc+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    43be:	6813      	ldr	r3, [r2, #0]
    43c0:	2102      	movs	r1, #2
    43c2:	430b      	orrs	r3, r1
    43c4:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    43c6:	4b0d      	ldr	r3, [pc, #52]	; (43fc <configure_i2c_hdc+0x98>)
    43c8:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    43ca:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    43cc:	2010      	movs	r0, #16
    43ce:	8b51      	ldrh	r1, [r2, #26]
    43d0:	4201      	tst	r1, r0
    43d2:	d108      	bne.n	43e6 <configure_i2c_hdc+0x82>
		timeout_counter++;
    43d4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    43d6:	42a3      	cmp	r3, r4
    43d8:	d3f9      	bcc.n	43ce <configure_i2c_hdc+0x6a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    43da:	2310      	movs	r3, #16
    43dc:	8353      	strh	r3, [r2, #26]
    43de:	e002      	b.n	43e6 <configure_i2c_hdc+0x82>
		printf("failed to initialize HDC1080 driver.\r\n");
    43e0:	4808      	ldr	r0, [pc, #32]	; (4404 <configure_i2c_hdc+0xa0>)
    43e2:	4b09      	ldr	r3, [pc, #36]	; (4408 <configure_i2c_hdc+0xa4>)
    43e4:	4798      	blx	r3
		return;
	}
	i2c_master_enable(&i2c_hdc);
}
    43e6:	b00e      	add	sp, #56	; 0x38
    43e8:	bd10      	pop	{r4, pc}
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	00000d48 	.word	0x00000d48
    43f0:	00160002 	.word	0x00160002
    43f4:	00170002 	.word	0x00170002
    43f8:	42001400 	.word	0x42001400
    43fc:	200002c0 	.word	0x200002c0
    4400:	00006321 	.word	0x00006321
    4404:	000118a0 	.word	0x000118a0
    4408:	00010435 	.word	0x00010435

0000440c <set_resolution>:
//NOTE: bit[10] = 1 for 11 bit temp
//NOTE: bit[9:8] = 00 for 14 bit humidity
//NOTE: bit[9:8] = 01 for 11 bit humidity
//NOTE: bit[9:8] = 10 for 8 bit humidity
void set_resolution(hdc_resolution temp_resolution, hdc_resolution humidity_resolution)
{
    440c:	b570      	push	{r4, r5, r6, lr}
    440e:	b084      	sub	sp, #16
	int8_t data_packet[3];

	data_packet[0] = HDC_SET_RES;
    4410:	2202      	movs	r2, #2
    4412:	ab03      	add	r3, sp, #12
    4414:	701a      	strb	r2, [r3, #0]
	uint8_t write_byte = 0;
	switch (temp_resolution) {
    4416:	2801      	cmp	r0, #1
    4418:	d003      	beq.n	4422 <set_resolution+0x16>
    441a:	2802      	cmp	r0, #2
    441c:	d027      	beq.n	446e <set_resolution+0x62>
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
	if (STATUS_OK != i2c_status)
		printf("error trying to set resolution!\r\n");

	return;
}
    441e:	b004      	add	sp, #16
    4420:	bd70      	pop	{r4, r5, r6, pc}
		write_byte = (1 << 2);
    4422:	2204      	movs	r2, #4
	switch (humidity_resolution) {
    4424:	2901      	cmp	r1, #1
    4426:	d024      	beq.n	4472 <set_resolution+0x66>
    4428:	2900      	cmp	r1, #0
    442a:	d025      	beq.n	4478 <set_resolution+0x6c>
    442c:	2902      	cmp	r1, #2
    442e:	d1f6      	bne.n	441e <set_resolution+0x12>
	write_byte |= (1 << 4);
    4430:	2310      	movs	r3, #16
    4432:	431a      	orrs	r2, r3
	data_packet[1] = write_byte;
    4434:	b252      	sxtb	r2, r2
    4436:	ad03      	add	r5, sp, #12
    4438:	706a      	strb	r2, [r5, #1]
	data_packet[2] = 0x00;
    443a:	2400      	movs	r4, #0
    443c:	70ac      	strb	r4, [r5, #2]
	printf("data packet: 0x%02x 0x%02x 0x%02x\r\n", data_packet[0], data_packet[1], data_packet[2]);
    443e:	2300      	movs	r3, #0
    4440:	2102      	movs	r1, #2
    4442:	480f      	ldr	r0, [pc, #60]	; (4480 <set_resolution+0x74>)
    4444:	4e0f      	ldr	r6, [pc, #60]	; (4484 <set_resolution+0x78>)
    4446:	47b0      	blx	r6
	struct i2c_master_packet packet = {
    4448:	2340      	movs	r3, #64	; 0x40
    444a:	466a      	mov	r2, sp
    444c:	8013      	strh	r3, [r2, #0]
    444e:	3b3d      	subs	r3, #61	; 0x3d
    4450:	8053      	strh	r3, [r2, #2]
    4452:	9501      	str	r5, [sp, #4]
    4454:	7214      	strb	r4, [r2, #8]
    4456:	7254      	strb	r4, [r2, #9]
    4458:	7294      	strb	r4, [r2, #10]
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
    445a:	4669      	mov	r1, sp
    445c:	480a      	ldr	r0, [pc, #40]	; (4488 <set_resolution+0x7c>)
    445e:	4b0b      	ldr	r3, [pc, #44]	; (448c <set_resolution+0x80>)
    4460:	4798      	blx	r3
	if (STATUS_OK != i2c_status)
    4462:	2800      	cmp	r0, #0
    4464:	d0db      	beq.n	441e <set_resolution+0x12>
		printf("error trying to set resolution!\r\n");
    4466:	480a      	ldr	r0, [pc, #40]	; (4490 <set_resolution+0x84>)
    4468:	4b0a      	ldr	r3, [pc, #40]	; (4494 <set_resolution+0x88>)
    446a:	4798      	blx	r3
    446c:	e7d7      	b.n	441e <set_resolution+0x12>
		write_byte = 0;
    446e:	2200      	movs	r2, #0
    4470:	e7d8      	b.n	4424 <set_resolution+0x18>
		write_byte |= 1;
    4472:	2301      	movs	r3, #1
    4474:	431a      	orrs	r2, r3
		break;
    4476:	e7db      	b.n	4430 <set_resolution+0x24>
		write_byte |= 2;
    4478:	2302      	movs	r3, #2
    447a:	431a      	orrs	r2, r3
		break;
    447c:	e7d8      	b.n	4430 <set_resolution+0x24>
    447e:	46c0      	nop			; (mov r8, r8)
    4480:	000118c8 	.word	0x000118c8
    4484:	00010319 	.word	0x00010319
    4488:	200002c0 	.word	0x200002c0
    448c:	0000690d 	.word	0x0000690d
    4490:	000118ec 	.word	0x000118ec
    4494:	00010435 	.word	0x00010435

00004498 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    4498:	b5f0      	push	{r4, r5, r6, r7, lr}
    449a:	46ce      	mov	lr, r9
    449c:	4647      	mov	r7, r8
    449e:	b580      	push	{r7, lr}
    44a0:	b087      	sub	sp, #28
    44a2:	0005      	movs	r5, r0
    44a4:	0014      	movs	r4, r2
	switch (type) {
    44a6:	2901      	cmp	r1, #1
    44a8:	d04c      	beq.n	4544 <mqtt_callback+0xac>
    44aa:	dd29      	ble.n	4500 <mqtt_callback+0x68>
    44ac:	2905      	cmp	r1, #5
    44ae:	d070      	beq.n	4592 <mqtt_callback+0xfa>
    44b0:	2906      	cmp	r1, #6
    44b2:	d171      	bne.n	4598 <mqtt_callback+0x100>
		}

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    44b4:	6811      	ldr	r1, [r2, #0]
    44b6:	2900      	cmp	r1, #0
    44b8:	d06e      	beq.n	4598 <mqtt_callback+0x100>
    44ba:	6893      	ldr	r3, [r2, #8]
    44bc:	2b00      	cmp	r3, #0
    44be:	d06b      	beq.n	4598 <mqtt_callback+0x100>
			printf("data->recv_publish.topic: %s\r\n", data->recv_publish.topic);
    44c0:	4838      	ldr	r0, [pc, #224]	; (45a4 <mqtt_callback+0x10c>)
    44c2:	4d39      	ldr	r5, [pc, #228]	; (45a8 <mqtt_callback+0x110>)
    44c4:	47a8      	blx	r5
			printf("topic name: %s\r\n", registered_request_topics[0].topic_name);
    44c6:	4f39      	ldr	r7, [pc, #228]	; (45ac <mqtt_callback+0x114>)
    44c8:	0039      	movs	r1, r7
    44ca:	4839      	ldr	r0, [pc, #228]	; (45b0 <mqtt_callback+0x118>)
    44cc:	47a8      	blx	r5
			printf("data->recv_publish.topic_size: %d\r\n", data->recv_publish.topic_size);
    44ce:	6861      	ldr	r1, [r4, #4]
    44d0:	4838      	ldr	r0, [pc, #224]	; (45b4 <mqtt_callback+0x11c>)
    44d2:	47a8      	blx	r5
			printf("data size: %d\r\n", strlen(data->recv_publish.topic));
    44d4:	6820      	ldr	r0, [r4, #0]
    44d6:	4e38      	ldr	r6, [pc, #224]	; (45b8 <mqtt_callback+0x120>)
    44d8:	47b0      	blx	r6
    44da:	0001      	movs	r1, r0
    44dc:	4837      	ldr	r0, [pc, #220]	; (45bc <mqtt_callback+0x124>)
    44de:	47a8      	blx	r5
			printf("topic size: %d\r\n", strlen(registered_request_topics[0].topic_name));
    44e0:	0038      	movs	r0, r7
    44e2:	47b0      	blx	r6
    44e4:	0001      	movs	r1, r0
    44e6:	4836      	ldr	r0, [pc, #216]	; (45c0 <mqtt_callback+0x128>)
    44e8:	47a8      	blx	r5
			for (int i = 0; i < num_registered_request_topics; i++)
    44ea:	4b36      	ldr	r3, [pc, #216]	; (45c4 <mqtt_callback+0x12c>)
    44ec:	781b      	ldrb	r3, [r3, #0]
    44ee:	2b00      	cmp	r3, #0
    44f0:	dd52      	ble.n	4598 <mqtt_callback+0x100>
    44f2:	4d2e      	ldr	r5, [pc, #184]	; (45ac <mqtt_callback+0x114>)
    44f4:	2600      	movs	r6, #0
				if (!strncmp(data->recv_publish.topic, registered_request_topics[i].topic_name, data->recv_publish.topic_size)) {
    44f6:	4b34      	ldr	r3, [pc, #208]	; (45c8 <mqtt_callback+0x130>)
    44f8:	4698      	mov	r8, r3
					printf("MQTT requested: %s\r\n", data->recv_publish.topic);
    44fa:	4b2b      	ldr	r3, [pc, #172]	; (45a8 <mqtt_callback+0x110>)
    44fc:	4699      	mov	r9, r3
    44fe:	e034      	b.n	456a <mqtt_callback+0xd2>
	switch (type) {
    4500:	2900      	cmp	r1, #0
    4502:	d149      	bne.n	4598 <mqtt_callback+0x100>
		if (data->sock_connected.result >= 0) {
    4504:	6813      	ldr	r3, [r2, #0]
    4506:	2b00      	cmp	r3, #0
    4508:	db10      	blt.n	452c <mqtt_callback+0x94>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, MQTT_USER, NULL, NULL, 0, 0, 0);
    450a:	2300      	movs	r3, #0
    450c:	9305      	str	r3, [sp, #20]
    450e:	9304      	str	r3, [sp, #16]
    4510:	9303      	str	r3, [sp, #12]
    4512:	9302      	str	r3, [sp, #8]
    4514:	9301      	str	r3, [sp, #4]
    4516:	4b2d      	ldr	r3, [pc, #180]	; (45cc <mqtt_callback+0x134>)
    4518:	9300      	str	r3, [sp, #0]
    451a:	2300      	movs	r3, #0
    451c:	2200      	movs	r2, #0
    451e:	2101      	movs	r1, #1
    4520:	4c2b      	ldr	r4, [pc, #172]	; (45d0 <mqtt_callback+0x138>)
    4522:	47a0      	blx	r4
			mqtt_connected = 1;
    4524:	2201      	movs	r2, #1
    4526:	4b2b      	ldr	r3, [pc, #172]	; (45d4 <mqtt_callback+0x13c>)
    4528:	601a      	str	r2, [r3, #0]
    452a:	e035      	b.n	4598 <mqtt_callback+0x100>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", curr_mqtt_config->broker_server);
    452c:	4c2a      	ldr	r4, [pc, #168]	; (45d8 <mqtt_callback+0x140>)
    452e:	6823      	ldr	r3, [r4, #0]
    4530:	6919      	ldr	r1, [r3, #16]
    4532:	482a      	ldr	r0, [pc, #168]	; (45dc <mqtt_callback+0x144>)
    4534:	4b1c      	ldr	r3, [pc, #112]	; (45a8 <mqtt_callback+0x110>)
    4536:	4798      	blx	r3
			mqtt_connect(module_inst, curr_mqtt_config->broker_server); /* Retry that. */
    4538:	6823      	ldr	r3, [r4, #0]
    453a:	6919      	ldr	r1, [r3, #16]
    453c:	0028      	movs	r0, r5
    453e:	4b28      	ldr	r3, [pc, #160]	; (45e0 <mqtt_callback+0x148>)
    4540:	4798      	blx	r3
    4542:	e029      	b.n	4598 <mqtt_callback+0x100>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    4544:	7811      	ldrb	r1, [r2, #0]
    4546:	2900      	cmp	r1, #0
    4548:	d105      	bne.n	4556 <mqtt_callback+0xbe>
			module_inst->busy = 0;
    454a:	2243      	movs	r2, #67	; 0x43
    454c:	5c83      	ldrb	r3, [r0, r2]
    454e:	3108      	adds	r1, #8
    4550:	438b      	bics	r3, r1
    4552:	5483      	strb	r3, [r0, r2]
    4554:	e020      	b.n	4598 <mqtt_callback+0x100>
			printf("MQTT broker declined your access! error code %d\r\n", data->connected.result);
    4556:	4823      	ldr	r0, [pc, #140]	; (45e4 <mqtt_callback+0x14c>)
    4558:	4b13      	ldr	r3, [pc, #76]	; (45a8 <mqtt_callback+0x110>)
    455a:	4798      	blx	r3
    455c:	e01c      	b.n	4598 <mqtt_callback+0x100>
			for (int i = 0; i < num_registered_request_topics; i++)
    455e:	3601      	adds	r6, #1
    4560:	3544      	adds	r5, #68	; 0x44
    4562:	4b18      	ldr	r3, [pc, #96]	; (45c4 <mqtt_callback+0x12c>)
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	42b3      	cmp	r3, r6
    4568:	dd16      	ble.n	4598 <mqtt_callback+0x100>
				if (!strncmp(data->recv_publish.topic, registered_request_topics[i].topic_name, data->recv_publish.topic_size)) {
    456a:	6827      	ldr	r7, [r4, #0]
    456c:	6862      	ldr	r2, [r4, #4]
    456e:	0029      	movs	r1, r5
    4570:	0038      	movs	r0, r7
    4572:	47c0      	blx	r8
    4574:	2800      	cmp	r0, #0
    4576:	d1f2      	bne.n	455e <mqtt_callback+0xc6>
					printf("MQTT requested: %s\r\n", data->recv_publish.topic);
    4578:	0039      	movs	r1, r7
    457a:	481b      	ldr	r0, [pc, #108]	; (45e8 <mqtt_callback+0x150>)
    457c:	47c8      	blx	r9
					printf("registered_request_topic: %s\r\n", registered_request_topics[0].topic_name);
    457e:	490b      	ldr	r1, [pc, #44]	; (45ac <mqtt_callback+0x114>)
    4580:	481a      	ldr	r0, [pc, #104]	; (45ec <mqtt_callback+0x154>)
    4582:	47c8      	blx	r9
					printf("registered_function: %d\r\n", registered_request_topics[i].function);
    4584:	6c29      	ldr	r1, [r5, #64]	; 0x40
    4586:	481a      	ldr	r0, [pc, #104]	; (45f0 <mqtt_callback+0x158>)
    4588:	47c8      	blx	r9
					registered_request_topics[i].function(data->recv_publish.msg);
    458a:	68a0      	ldr	r0, [r4, #8]
    458c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    458e:	4798      	blx	r3
    4590:	e7e5      	b.n	455e <mqtt_callback+0xc6>
		}
		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer */
		printf("MQTT disconnected\r\n");
    4592:	4818      	ldr	r0, [pc, #96]	; (45f4 <mqtt_callback+0x15c>)
    4594:	4b18      	ldr	r3, [pc, #96]	; (45f8 <mqtt_callback+0x160>)
    4596:	4798      	blx	r3
		break;
	}
}
    4598:	b007      	add	sp, #28
    459a:	bc0c      	pop	{r2, r3}
    459c:	4690      	mov	r8, r2
    459e:	4699      	mov	r9, r3
    45a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45a2:	46c0      	nop			; (mov r8, r8)
    45a4:	00011a1c 	.word	0x00011a1c
    45a8:	00010319 	.word	0x00010319
    45ac:	200003ac 	.word	0x200003ac
    45b0:	00011a3c 	.word	0x00011a3c
    45b4:	00011a50 	.word	0x00011a50
    45b8:	0001067b 	.word	0x0001067b
    45bc:	00011a74 	.word	0x00011a74
    45c0:	00011a84 	.word	0x00011a84
    45c4:	200001fc 	.word	0x200001fc
    45c8:	00010689 	.word	0x00010689
    45cc:	00013aa4 	.word	0x00013aa4
    45d0:	0000db59 	.word	0x0000db59
    45d4:	200001f8 	.word	0x200001f8
    45d8:	20000350 	.word	0x20000350
    45dc:	000119b0 	.word	0x000119b0
    45e0:	0000da45 	.word	0x0000da45
    45e4:	000119e8 	.word	0x000119e8
    45e8:	00011a98 	.word	0x00011a98
    45ec:	00011ab0 	.word	0x00011ab0
    45f0:	00011ad0 	.word	0x00011ad0
    45f4:	00011aec 	.word	0x00011aec
    45f8:	00010435 	.word	0x00010435

000045fc <socket_resolve_handler>:
{
    45fc:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    45fe:	4b01      	ldr	r3, [pc, #4]	; (4604 <socket_resolve_handler+0x8>)
    4600:	4798      	blx	r3
}
    4602:	bd10      	pop	{r4, pc}
    4604:	0000d9f1 	.word	0x0000d9f1

00004608 <socket_event_handler>:
{
    4608:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    460a:	4b01      	ldr	r3, [pc, #4]	; (4610 <socket_event_handler+0x8>)
    460c:	4798      	blx	r3
}
    460e:	bd10      	pop	{r4, pc}
    4610:	0000e3e9 	.word	0x0000e3e9

00004614 <wifi_callback>:
{
    4614:	b530      	push	{r4, r5, lr}
    4616:	b083      	sub	sp, #12
	switch (msg_type) {
    4618:	282c      	cmp	r0, #44	; 0x2c
    461a:	d003      	beq.n	4624 <wifi_callback+0x10>
    461c:	2832      	cmp	r0, #50	; 0x32
    461e:	d022      	beq.n	4666 <wifi_callback+0x52>
}
    4620:	b003      	add	sp, #12
    4622:	bd30      	pop	{r4, r5, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    4624:	780b      	ldrb	r3, [r1, #0]
    4626:	2b01      	cmp	r3, #1
    4628:	d017      	beq.n	465a <wifi_callback+0x46>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    462a:	2b00      	cmp	r3, #0
    462c:	d1f8      	bne.n	4620 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    462e:	4817      	ldr	r0, [pc, #92]	; (468c <wifi_callback+0x78>)
    4630:	4b17      	ldr	r3, [pc, #92]	; (4690 <wifi_callback+0x7c>)
    4632:	4798      	blx	r3
			m2m_wifi_connect(curr_mqtt_config->ssid, strlen(curr_mqtt_config->ssid),
    4634:	4b17      	ldr	r3, [pc, #92]	; (4694 <wifi_callback+0x80>)
    4636:	681c      	ldr	r4, [r3, #0]
    4638:	6825      	ldr	r5, [r4, #0]
    463a:	0028      	movs	r0, r5
    463c:	4b16      	ldr	r3, [pc, #88]	; (4698 <wifi_callback+0x84>)
    463e:	4798      	blx	r3
    4640:	68a3      	ldr	r3, [r4, #8]
    4642:	7922      	ldrb	r2, [r4, #4]
    4644:	b2c1      	uxtb	r1, r0
    4646:	20ff      	movs	r0, #255	; 0xff
    4648:	9000      	str	r0, [sp, #0]
    464a:	0028      	movs	r0, r5
    464c:	4c13      	ldr	r4, [pc, #76]	; (469c <wifi_callback+0x88>)
    464e:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    4650:	2101      	movs	r1, #1
    4652:	4813      	ldr	r0, [pc, #76]	; (46a0 <wifi_callback+0x8c>)
    4654:	4b13      	ldr	r3, [pc, #76]	; (46a4 <wifi_callback+0x90>)
    4656:	4798      	blx	r3
    4658:	e7e2      	b.n	4620 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    465a:	4813      	ldr	r0, [pc, #76]	; (46a8 <wifi_callback+0x94>)
    465c:	4b0c      	ldr	r3, [pc, #48]	; (4690 <wifi_callback+0x7c>)
    465e:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    4660:	4b12      	ldr	r3, [pc, #72]	; (46ac <wifi_callback+0x98>)
    4662:	4798      	blx	r3
    4664:	e7dc      	b.n	4620 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    4666:	788b      	ldrb	r3, [r1, #2]
    4668:	784a      	ldrb	r2, [r1, #1]
    466a:	7808      	ldrb	r0, [r1, #0]
    466c:	78c9      	ldrb	r1, [r1, #3]
    466e:	9100      	str	r1, [sp, #0]
    4670:	0001      	movs	r1, r0
    4672:	480f      	ldr	r0, [pc, #60]	; (46b0 <wifi_callback+0x9c>)
    4674:	4c0f      	ldr	r4, [pc, #60]	; (46b4 <wifi_callback+0xa0>)
    4676:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, curr_mqtt_config->broker_server);
    4678:	4b06      	ldr	r3, [pc, #24]	; (4694 <wifi_callback+0x80>)
    467a:	681b      	ldr	r3, [r3, #0]
    467c:	6919      	ldr	r1, [r3, #16]
    467e:	4808      	ldr	r0, [pc, #32]	; (46a0 <wifi_callback+0x8c>)
    4680:	4b0d      	ldr	r3, [pc, #52]	; (46b8 <wifi_callback+0xa4>)
    4682:	4798      	blx	r3
		wifi_connected = 1;
    4684:	2201      	movs	r2, #1
    4686:	4b0d      	ldr	r3, [pc, #52]	; (46bc <wifi_callback+0xa8>)
    4688:	601a      	str	r2, [r3, #0]
}
    468a:	e7c9      	b.n	4620 <wifi_callback+0xc>
    468c:	00011c88 	.word	0x00011c88
    4690:	00010435 	.word	0x00010435
    4694:	20000350 	.word	0x20000350
    4698:	0001067b 	.word	0x0001067b
    469c:	0000a9dd 	.word	0x0000a9dd
    46a0:	20000594 	.word	0x20000594
    46a4:	0000e0a9 	.word	0x0000e0a9
    46a8:	00011c74 	.word	0x00011c74
    46ac:	0000a9f9 	.word	0x0000a9f9
    46b0:	00011c9c 	.word	0x00011c9c
    46b4:	00010319 	.word	0x00010319
    46b8:	0000da45 	.word	0x0000da45
    46bc:	20000200 	.word	0x20000200

000046c0 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
void configure_mqtt(void)
{
    46c0:	b510      	push	{r4, lr}
    46c2:	b088      	sub	sp, #32
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    46c4:	ac01      	add	r4, sp, #4
    46c6:	0020      	movs	r0, r4
    46c8:	4b10      	ldr	r3, [pc, #64]	; (470c <configure_mqtt+0x4c>)
    46ca:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    46cc:	4b10      	ldr	r3, [pc, #64]	; (4710 <configure_mqtt+0x50>)
    46ce:	6063      	str	r3, [r4, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    46d0:	4b10      	ldr	r3, [pc, #64]	; (4714 <configure_mqtt+0x54>)
    46d2:	60e3      	str	r3, [r4, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    46d4:	2380      	movs	r3, #128	; 0x80
    46d6:	6123      	str	r3, [r4, #16]
	mqtt_conf.port = curr_mqtt_config->port;
    46d8:	4b0f      	ldr	r3, [pc, #60]	; (4718 <configure_mqtt+0x58>)
    46da:	681b      	ldr	r3, [r3, #0]
    46dc:	899b      	ldrh	r3, [r3, #12]
    46de:	8023      	strh	r3, [r4, #0]
	//cloudmqtt port 11353

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    46e0:	0021      	movs	r1, r4
    46e2:	480e      	ldr	r0, [pc, #56]	; (471c <configure_mqtt+0x5c>)
    46e4:	4b0e      	ldr	r3, [pc, #56]	; (4720 <configure_mqtt+0x60>)
    46e6:	4798      	blx	r3
    46e8:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    46ea:	db07      	blt.n	46fc <configure_mqtt+0x3c>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    46ec:	490d      	ldr	r1, [pc, #52]	; (4724 <configure_mqtt+0x64>)
    46ee:	480b      	ldr	r0, [pc, #44]	; (471c <configure_mqtt+0x5c>)
    46f0:	4b0d      	ldr	r3, [pc, #52]	; (4728 <configure_mqtt+0x68>)
    46f2:	4798      	blx	r3
    46f4:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    46f6:	db05      	blt.n	4704 <configure_mqtt+0x44>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}
}
    46f8:	b008      	add	sp, #32
    46fa:	bd10      	pop	{r4, pc}
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    46fc:	480b      	ldr	r0, [pc, #44]	; (472c <configure_mqtt+0x6c>)
    46fe:	4b0c      	ldr	r3, [pc, #48]	; (4730 <configure_mqtt+0x70>)
    4700:	4798      	blx	r3
    4702:	e7fe      	b.n	4702 <configure_mqtt+0x42>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    4704:	480b      	ldr	r0, [pc, #44]	; (4734 <configure_mqtt+0x74>)
    4706:	4b0a      	ldr	r3, [pc, #40]	; (4730 <configure_mqtt+0x70>)
    4708:	4798      	blx	r3
    470a:	e7fe      	b.n	470a <configure_mqtt+0x4a>
    470c:	0000d8d9 	.word	0x0000d8d9
    4710:	20000354 	.word	0x20000354
    4714:	200002cc 	.word	0x200002cc
    4718:	20000350 	.word	0x20000350
    471c:	20000594 	.word	0x20000594
    4720:	0000d8fd 	.word	0x0000d8fd
    4724:	00004499 	.word	0x00004499
    4728:	0000d9cd 	.word	0x0000d9cd
    472c:	00011910 	.word	0x00011910
    4730:	00010319 	.word	0x00010319
    4734:	00011944 	.word	0x00011944

00004738 <deconfigure_mqtt>:

void deconfigure_mqtt()
{
    4738:	b510      	push	{r4, lr}
	uint8_t result;

	result = mqtt_deinit(&mqtt_inst);
    473a:	4c09      	ldr	r4, [pc, #36]	; (4760 <deconfigure_mqtt+0x28>)
    473c:	0020      	movs	r0, r4
    473e:	4b09      	ldr	r3, [pc, #36]	; (4764 <deconfigure_mqtt+0x2c>)
    4740:	4798      	blx	r3
		printf("MQTT deinitialization failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}

	result = mqtt_unregister_callback(&mqtt_inst);
    4742:	0020      	movs	r0, r4
    4744:	4b08      	ldr	r3, [pc, #32]	; (4768 <deconfigure_mqtt+0x30>)
    4746:	4798      	blx	r3
	if (result < 0) {
		printf("MQTT unregister callback failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}
	mqtt_disconnect(&mqtt_inst, 1);
    4748:	2101      	movs	r1, #1
    474a:	0020      	movs	r0, r4
    474c:	4b07      	ldr	r3, [pc, #28]	; (476c <deconfigure_mqtt+0x34>)
    474e:	4798      	blx	r3
	socketDeinit();
    4750:	4b07      	ldr	r3, [pc, #28]	; (4770 <deconfigure_mqtt+0x38>)
    4752:	4798      	blx	r3
	m2m_wifi_deinit(0);
    4754:	2000      	movs	r0, #0
    4756:	4b07      	ldr	r3, [pc, #28]	; (4774 <deconfigure_mqtt+0x3c>)
    4758:	4798      	blx	r3
	nm_bsp_deinit();
    475a:	4b07      	ldr	r3, [pc, #28]	; (4778 <deconfigure_mqtt+0x40>)
    475c:	4798      	blx	r3
}
    475e:	bd10      	pop	{r4, pc}
    4760:	20000594 	.word	0x20000594
    4764:	0000d989 	.word	0x0000d989
    4768:	0000d9dd 	.word	0x0000d9dd
    476c:	0000e0a9 	.word	0x0000e0a9
    4770:	0000c27d 	.word	0x0000c27d
    4774:	0000a725 	.word	0x0000a725
    4778:	00009621 	.word	0x00009621

0000477c <mqtt_initialize>:
/**
 * \brief Initialize the WiFi
 */
int mqtt_initialize(mqtt_inst_config *new_mqtt_conf)
{
    477c:	b510      	push	{r4, lr}
    477e:	b088      	sub	sp, #32
	tstrWifiInitParam param;
	int8_t ret;
	curr_mqtt_config = new_mqtt_conf;
    4780:	4b1c      	ldr	r3, [pc, #112]	; (47f4 <mqtt_initialize+0x78>)
    4782:	6018      	str	r0, [r3, #0]
	sw_timer_get_config_defaults(&swt_conf);
    4784:	a801      	add	r0, sp, #4
    4786:	4b1c      	ldr	r3, [pc, #112]	; (47f8 <mqtt_initialize+0x7c>)
    4788:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    478a:	4c1c      	ldr	r4, [pc, #112]	; (47fc <mqtt_initialize+0x80>)
    478c:	a901      	add	r1, sp, #4
    478e:	0020      	movs	r0, r4
    4790:	4b1b      	ldr	r3, [pc, #108]	; (4800 <mqtt_initialize+0x84>)
    4792:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    4794:	0020      	movs	r0, r4
    4796:	4b1b      	ldr	r3, [pc, #108]	; (4804 <mqtt_initialize+0x88>)
    4798:	4798      	blx	r3
	printf("Timer enabled.\r\n");
    479a:	481b      	ldr	r0, [pc, #108]	; (4808 <mqtt_initialize+0x8c>)
    479c:	4c1b      	ldr	r4, [pc, #108]	; (480c <mqtt_initialize+0x90>)
    479e:	47a0      	blx	r4
	/* Initialize the Timer. */
	configure_timer();

	/* Initialize the MQTT service. */
	configure_mqtt();
    47a0:	4b1b      	ldr	r3, [pc, #108]	; (4810 <mqtt_initialize+0x94>)
    47a2:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    47a4:	4b1b      	ldr	r3, [pc, #108]	; (4814 <mqtt_initialize+0x98>)
    47a6:	4798      	blx	r3

	printf("MQTT Configured.\r\n");
    47a8:	481b      	ldr	r0, [pc, #108]	; (4818 <mqtt_initialize+0x9c>)
    47aa:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    47ac:	2218      	movs	r2, #24
    47ae:	2100      	movs	r1, #0
    47b0:	a802      	add	r0, sp, #8
    47b2:	4b1a      	ldr	r3, [pc, #104]	; (481c <mqtt_initialize+0xa0>)
    47b4:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    47b6:	4b1a      	ldr	r3, [pc, #104]	; (4820 <mqtt_initialize+0xa4>)
    47b8:	9302      	str	r3, [sp, #8]
	printf("Initializing...\r\n");
    47ba:	481a      	ldr	r0, [pc, #104]	; (4824 <mqtt_initialize+0xa8>)
    47bc:	47a0      	blx	r4
	ret = m2m_wifi_init(&param);
    47be:	a802      	add	r0, sp, #8
    47c0:	4b19      	ldr	r3, [pc, #100]	; (4828 <mqtt_initialize+0xac>)
    47c2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    47c4:	2800      	cmp	r0, #0
    47c6:	d10f      	bne.n	47e8 <mqtt_initialize+0x6c>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
		return 1;
	}
	printf("main: m2m_wifi_init call success!(%d)\r\n", ret);
    47c8:	2100      	movs	r1, #0
    47ca:	4818      	ldr	r0, [pc, #96]	; (482c <mqtt_initialize+0xb0>)
    47cc:	4b18      	ldr	r3, [pc, #96]	; (4830 <mqtt_initialize+0xb4>)
    47ce:	4798      	blx	r3

	/* Initialize socket interface. */
	socketInit();
    47d0:	4b18      	ldr	r3, [pc, #96]	; (4834 <mqtt_initialize+0xb8>)
    47d2:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    47d4:	4918      	ldr	r1, [pc, #96]	; (4838 <mqtt_initialize+0xbc>)
    47d6:	4819      	ldr	r0, [pc, #100]	; (483c <mqtt_initialize+0xc0>)
    47d8:	4b19      	ldr	r3, [pc, #100]	; (4840 <mqtt_initialize+0xc4>)
    47da:	4798      	blx	r3
	printf("Sockets initialized.\r\n");
    47dc:	4819      	ldr	r0, [pc, #100]	; (4844 <mqtt_initialize+0xc8>)
    47de:	4b0b      	ldr	r3, [pc, #44]	; (480c <mqtt_initialize+0x90>)
    47e0:	4798      	blx	r3

	return 0;
    47e2:	2000      	movs	r0, #0
}
    47e4:	b008      	add	sp, #32
    47e6:	bd10      	pop	{r4, pc}
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    47e8:	0001      	movs	r1, r0
    47ea:	4817      	ldr	r0, [pc, #92]	; (4848 <mqtt_initialize+0xcc>)
    47ec:	4b10      	ldr	r3, [pc, #64]	; (4830 <mqtt_initialize+0xb4>)
    47ee:	4798      	blx	r3
		return 1;
    47f0:	2001      	movs	r0, #1
    47f2:	e7f7      	b.n	47e4 <mqtt_initialize+0x68>
    47f4:	20000350 	.word	0x20000350
    47f8:	00007a99 	.word	0x00007a99
    47fc:	20000354 	.word	0x20000354
    4800:	00007aa5 	.word	0x00007aa5
    4804:	00007b51 	.word	0x00007b51
    4808:	00011b00 	.word	0x00011b00
    480c:	00010435 	.word	0x00010435
    4810:	000046c1 	.word	0x000046c1
    4814:	00009691 	.word	0x00009691
    4818:	00011b10 	.word	0x00011b10
    481c:	000101b7 	.word	0x000101b7
    4820:	00004615 	.word	0x00004615
    4824:	00011b24 	.word	0x00011b24
    4828:	0000a5f1 	.word	0x0000a5f1
    482c:	00011b60 	.word	0x00011b60
    4830:	00010319 	.word	0x00010319
    4834:	0000c239 	.word	0x0000c239
    4838:	000045fd 	.word	0x000045fd
    483c:	00004609 	.word	0x00004609
    4840:	0000c2b9 	.word	0x0000c2b9
    4844:	00011b88 	.word	0x00011b88
    4848:	00011b38 	.word	0x00011b38

0000484c <register_request_topic>:

void register_request_topic(char topic_name[MQTT_SEND_BUFFER_SIZE], char wildcard, void (*function))
{
    484c:	b5f0      	push	{r4, r5, r6, r7, lr}
    484e:	b0a5      	sub	sp, #148	; 0x94
    4850:	0005      	movs	r5, r0
    4852:	000f      	movs	r7, r1
    4854:	0016      	movs	r6, r2
	if (num_registered_request_topics < MAX_TOPICS) {
    4856:	4b21      	ldr	r3, [pc, #132]	; (48dc <register_request_topic+0x90>)
    4858:	781b      	ldrb	r3, [r3, #0]
    485a:	2b06      	cmp	r3, #6
    485c:	d839      	bhi.n	48d2 <register_request_topic+0x86>
		topic_struct new_topic;
		uint32_t topic_name_len = strlen(topic_name);
    485e:	4b20      	ldr	r3, [pc, #128]	; (48e0 <register_request_topic+0x94>)
    4860:	4798      	blx	r3
    4862:	0004      	movs	r4, r0
		strcpy(new_topic.topic_name, topic_name);
    4864:	9501      	str	r5, [sp, #4]
    4866:	0029      	movs	r1, r5
    4868:	a813      	add	r0, sp, #76	; 0x4c
    486a:	4d1e      	ldr	r5, [pc, #120]	; (48e4 <register_request_topic+0x98>)
    486c:	47a8      	blx	r5
		printf("new_topic.topic_name: %s\r\n", new_topic.topic_name);
    486e:	ab13      	add	r3, sp, #76	; 0x4c
    4870:	0019      	movs	r1, r3
    4872:	481d      	ldr	r0, [pc, #116]	; (48e8 <register_request_topic+0x9c>)
    4874:	4b1d      	ldr	r3, [pc, #116]	; (48ec <register_request_topic+0xa0>)
    4876:	4798      	blx	r3
		char topic_subscribe_str[MQTT_SEND_BUFFER_SIZE+1];
		strcpy(topic_subscribe_str, topic_name);
    4878:	9901      	ldr	r1, [sp, #4]
    487a:	a802      	add	r0, sp, #8
    487c:	47a8      	blx	r5
		topic_subscribe_str[topic_name_len] = wildcard;
    487e:	ab02      	add	r3, sp, #8
    4880:	551f      	strb	r7, [r3, r4]
		topic_subscribe_str[topic_name_len+1] = '\0';
    4882:	469c      	mov	ip, r3
    4884:	4464      	add	r4, ip
    4886:	2300      	movs	r3, #0
    4888:	7063      	strb	r3, [r4, #1]
		
		if(mqtt_subscribe(&mqtt_inst, topic_subscribe_str, 0)) {
    488a:	2200      	movs	r2, #0
    488c:	4661      	mov	r1, ip
    488e:	4818      	ldr	r0, [pc, #96]	; (48f0 <register_request_topic+0xa4>)
    4890:	4b18      	ldr	r3, [pc, #96]	; (48f4 <register_request_topic+0xa8>)
    4892:	4798      	blx	r3
    4894:	2800      	cmp	r0, #0
    4896:	d004      	beq.n	48a2 <register_request_topic+0x56>
			printf("failed to subscribe topic: %s\r\n", topic_subscribe_str);
    4898:	a902      	add	r1, sp, #8
    489a:	4817      	ldr	r0, [pc, #92]	; (48f8 <register_request_topic+0xac>)
    489c:	4b13      	ldr	r3, [pc, #76]	; (48ec <register_request_topic+0xa0>)
    489e:	4798      	blx	r3
    48a0:	e01a      	b.n	48d8 <register_request_topic+0x8c>
			return;	
		}
		new_topic.function = function;
    48a2:	9623      	str	r6, [sp, #140]	; 0x8c
		memcpy((int) &registered_request_topics[num_registered_request_topics++], &new_topic, sizeof(topic_struct));
    48a4:	4a0d      	ldr	r2, [pc, #52]	; (48dc <register_request_topic+0x90>)
    48a6:	7813      	ldrb	r3, [r2, #0]
    48a8:	1c5c      	adds	r4, r3, #1
    48aa:	b2e4      	uxtb	r4, r4
    48ac:	7014      	strb	r4, [r2, #0]
    48ae:	4d13      	ldr	r5, [pc, #76]	; (48fc <register_request_topic+0xb0>)
    48b0:	0118      	lsls	r0, r3, #4
    48b2:	18c0      	adds	r0, r0, r3
    48b4:	0080      	lsls	r0, r0, #2
    48b6:	1828      	adds	r0, r5, r0
    48b8:	2244      	movs	r2, #68	; 0x44
    48ba:	a913      	add	r1, sp, #76	; 0x4c
    48bc:	4b10      	ldr	r3, [pc, #64]	; (4900 <register_request_topic+0xb4>)
    48be:	4798      	blx	r3
		printf("[register_request_topic] successfully registered request topic %s and callback!\r\n", registered_request_topics[num_registered_request_topics-1].topic_name);
    48c0:	3c01      	subs	r4, #1
    48c2:	0121      	lsls	r1, r4, #4
    48c4:	1909      	adds	r1, r1, r4
    48c6:	0089      	lsls	r1, r1, #2
    48c8:	1949      	adds	r1, r1, r5
    48ca:	480e      	ldr	r0, [pc, #56]	; (4904 <register_request_topic+0xb8>)
    48cc:	4b07      	ldr	r3, [pc, #28]	; (48ec <register_request_topic+0xa0>)
    48ce:	4798      	blx	r3
    48d0:	e002      	b.n	48d8 <register_request_topic+0x8c>
	} else {
		printf("[register_request_topic] max number of topics already registered.\r\n");
    48d2:	480d      	ldr	r0, [pc, #52]	; (4908 <register_request_topic+0xbc>)
    48d4:	4b0d      	ldr	r3, [pc, #52]	; (490c <register_request_topic+0xc0>)
    48d6:	4798      	blx	r3
	}
}
    48d8:	b025      	add	sp, #148	; 0x94
    48da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48dc:	200001fc 	.word	0x200001fc
    48e0:	0001067b 	.word	0x0001067b
    48e4:	00010631 	.word	0x00010631
    48e8:	00011ba0 	.word	0x00011ba0
    48ec:	00010319 	.word	0x00010319
    48f0:	20000594 	.word	0x20000594
    48f4:	0000de09 	.word	0x0000de09
    48f8:	00011bbc 	.word	0x00011bbc
    48fc:	200003ac 	.word	0x200003ac
    4900:	00010181 	.word	0x00010181
    4904:	00011bdc 	.word	0x00011bdc
    4908:	00011c30 	.word	0x00011c30
    490c:	00010435 	.word	0x00010435

00004910 <get_mqtt_config_defaults>:
	mqtt_publish(&mqtt_inst, topic, data, data_len, 0, 0);
}

void get_mqtt_config_defaults(mqtt_inst_config *mqtt_conf)
{
	mqtt_conf->ssid = "AirPennNet-Device";
    4910:	4b05      	ldr	r3, [pc, #20]	; (4928 <get_mqtt_config_defaults+0x18>)
    4912:	6003      	str	r3, [r0, #0]
	mqtt_conf->auth = M2M_WIFI_SEC_WPA_PSK;
    4914:	2302      	movs	r3, #2
    4916:	6043      	str	r3, [r0, #4]
	mqtt_conf->password = "penn1740wifi";
    4918:	4b04      	ldr	r3, [pc, #16]	; (492c <get_mqtt_config_defaults+0x1c>)
    491a:	6083      	str	r3, [r0, #8]
	mqtt_conf->port = 1883;
    491c:	4b04      	ldr	r3, [pc, #16]	; (4930 <get_mqtt_config_defaults+0x20>)
    491e:	8183      	strh	r3, [r0, #12]
	mqtt_conf->broker_server = "deet.seas.upenn.edu";
    4920:	4b04      	ldr	r3, [pc, #16]	; (4934 <get_mqtt_config_defaults+0x24>)
    4922:	6103      	str	r3, [r0, #16]
}
    4924:	4770      	bx	lr
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	00011978 	.word	0x00011978
    492c:	0001198c 	.word	0x0001198c
    4930:	0000075b 	.word	0x0000075b
    4934:	0001199c 	.word	0x0001199c

00004938 <clear_state>:
 *
 */
//TODO: check and see if it will only clear on mask
static void clear_state(download_state mask)
{
	down_state &= ~mask;
    4938:	4a02      	ldr	r2, [pc, #8]	; (4944 <clear_state+0xc>)
    493a:	8813      	ldrh	r3, [r2, #0]
    493c:	4383      	bics	r3, r0
    493e:	8013      	strh	r3, [r2, #0]
}
    4940:	4770      	bx	lr
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	20000614 	.word	0x20000614

00004948 <add_state>:
/**
 * add a given state to the global download_state @ref down_state
 * @param mask add given state
 */
static void add_state(download_state mask)
{
    4948:	b510      	push	{r4, lr}
	down_state |= mask;
    494a:	4a0a      	ldr	r2, [pc, #40]	; (4974 <add_state+0x2c>)
    494c:	8813      	ldrh	r3, [r2, #0]
    494e:	4303      	orrs	r3, r0
    4950:	8013      	strh	r3, [r2, #0]
	if (mask == CANCELED || mask == COMPLETED)
    4952:	0002      	movs	r2, r0
    4954:	3a10      	subs	r2, #16
    4956:	4b08      	ldr	r3, [pc, #32]	; (4978 <add_state+0x30>)
    4958:	421a      	tst	r2, r3
    495a:	d002      	beq.n	4962 <add_state+0x1a>
		at25dfx_chip_sleep(&at25dfx_chip);
	else if (mask == DOWNLOADING)
    495c:	2808      	cmp	r0, #8
    495e:	d004      	beq.n	496a <add_state+0x22>
		at25dfx_chip_wake(&at25dfx_chip);
}
    4960:	bd10      	pop	{r4, pc}
		at25dfx_chip_sleep(&at25dfx_chip);
    4962:	4806      	ldr	r0, [pc, #24]	; (497c <add_state+0x34>)
    4964:	4b06      	ldr	r3, [pc, #24]	; (4980 <add_state+0x38>)
    4966:	4798      	blx	r3
    4968:	e7fa      	b.n	4960 <add_state+0x18>
		at25dfx_chip_wake(&at25dfx_chip);
    496a:	4804      	ldr	r0, [pc, #16]	; (497c <add_state+0x34>)
    496c:	4b05      	ldr	r3, [pc, #20]	; (4984 <add_state+0x3c>)
    496e:	4798      	blx	r3
}
    4970:	e7f6      	b.n	4960 <add_state+0x18>
    4972:	46c0      	nop			; (mov r8, r8)
    4974:	20000614 	.word	0x20000614
    4978:	0000ffef 	.word	0x0000ffef
    497c:	2000060c 	.word	0x2000060c
    4980:	0000602d 	.word	0x0000602d
    4984:	000060b9 	.word	0x000060b9

00004988 <write_firmware_metadata>:
		return;
	}
}

static void write_firmware_metadata(uint32_t firmware_address, uint16_t firmware_version, uint32_t firmware_checksum, uint32_t fw_size)
{
    4988:	b570      	push	{r4, r5, r6, lr}
    498a:	b0c4      	sub	sp, #272	; 0x110
	if (FW1_ADDR == firmware_address)
    498c:	2480      	movs	r4, #128	; 0x80
    498e:	01a4      	lsls	r4, r4, #6
    4990:	42a0      	cmp	r0, r4
    4992:	d01b      	beq.n	49cc <write_firmware_metadata+0x44>
		firmware_address = FW1_HEADER_ADDR;
	else if (FW2_ADDR == firmware_address)
    4994:	2482      	movs	r4, #130	; 0x82
    4996:	02e4      	lsls	r4, r4, #11
    4998:	42a0      	cmp	r0, r4
    499a:	d001      	beq.n	49a0 <write_firmware_metadata+0x18>
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
	if (STATUS_OK != write_code) {
		printf("write_firmware_metadata: could not write to flash!\r\n");
		return;
	}
}
    499c:	b044      	add	sp, #272	; 0x110
    499e:	bd70      	pop	{r4, r5, r6, pc}
		firmware_address = FW2_HEADER_ADDR;
    49a0:	2480      	movs	r4, #128	; 0x80
    49a2:	02e4      	lsls	r4, r4, #11
	fw_header_t new_firmware_header = { .fw_version = firmware_version, .checksum = firmware_checksum, .size = fw_size };
    49a4:	a841      	add	r0, sp, #260	; 0x104
    49a6:	8001      	strh	r1, [r0, #0]
    49a8:	9242      	str	r2, [sp, #264]	; 0x108
    49aa:	9343      	str	r3, [sp, #268]	; 0x10c
	memcpy(write_buffer, &new_firmware_header, sizeof(fw_header_t));
    49ac:	aa01      	add	r2, sp, #4
    49ae:	0013      	movs	r3, r2
    49b0:	c862      	ldmia	r0!, {r1, r5, r6}
    49b2:	c362      	stmia	r3!, {r1, r5, r6}
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
    49b4:	2380      	movs	r3, #128	; 0x80
    49b6:	005b      	lsls	r3, r3, #1
    49b8:	0021      	movs	r1, r4
    49ba:	4806      	ldr	r0, [pc, #24]	; (49d4 <write_firmware_metadata+0x4c>)
    49bc:	4c06      	ldr	r4, [pc, #24]	; (49d8 <write_firmware_metadata+0x50>)
    49be:	47a0      	blx	r4
	if (STATUS_OK != write_code) {
    49c0:	2800      	cmp	r0, #0
    49c2:	d0eb      	beq.n	499c <write_firmware_metadata+0x14>
		printf("write_firmware_metadata: could not write to flash!\r\n");
    49c4:	4805      	ldr	r0, [pc, #20]	; (49dc <write_firmware_metadata+0x54>)
    49c6:	4b06      	ldr	r3, [pc, #24]	; (49e0 <write_firmware_metadata+0x58>)
    49c8:	4798      	blx	r3
		return;
    49ca:	e7e7      	b.n	499c <write_firmware_metadata+0x14>
		firmware_address = FW1_HEADER_ADDR;
    49cc:	2480      	movs	r4, #128	; 0x80
    49ce:	0164      	lsls	r4, r4, #5
    49d0:	e7e8      	b.n	49a4 <write_firmware_metadata+0x1c>
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	2000060c 	.word	0x2000060c
    49d8:	000058e9 	.word	0x000058e9
    49dc:	000125f0 	.word	0x000125f0
    49e0:	00010435 	.word	0x00010435

000049e4 <update_boot_status>:

/**
 * update the boot status struct in internal memory
 */
static void update_boot_status()
{
    49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49e6:	b0c7      	sub	sp, #284	; 0x11c
	struct nvm_parameters nvm_information;

	nvm_get_parameters(&nvm_information);
    49e8:	a843      	add	r0, sp, #268	; 0x10c
    49ea:	4b2b      	ldr	r3, [pc, #172]	; (4a98 <update_boot_status+0xb4>)
    49ec:	4798      	blx	r3
	uint16_t num_pages = nvm_information.nvm_number_of_pages;
	int page_to_write = BOOT_STATUS_ADDR / NVMCTRL_PAGE_SIZE;
	int row_to_erase = page_to_write / NVMCTRL_ROW_PAGES;
	printf("update_boot_status: row_to_erase: %d\r\n", row_to_erase);
    49ee:	213f      	movs	r1, #63	; 0x3f
    49f0:	482a      	ldr	r0, [pc, #168]	; (4a9c <update_boot_status+0xb8>)
    49f2:	4d2b      	ldr	r5, [pc, #172]	; (4aa0 <update_boot_status+0xbc>)
    49f4:	47a8      	blx	r5
	printf("update_boot_status: page_to_write: %d\r\n", page_to_write);
    49f6:	21ff      	movs	r1, #255	; 0xff
    49f8:	482a      	ldr	r0, [pc, #168]	; (4aa4 <update_boot_status+0xc0>)
    49fa:	47a8      	blx	r5
	uint8_t page_offset = page_to_write - (row_to_erase * NVMCTRL_ROW_PAGES);
	int row_address = row_to_erase * NVMCTRL_ROW_SIZE;
	printf("update_boot_status: row_address: %d\r\n", row_address);
    49fc:	24fc      	movs	r4, #252	; 0xfc
    49fe:	01a4      	lsls	r4, r4, #6
    4a00:	0021      	movs	r1, r4
    4a02:	4829      	ldr	r0, [pc, #164]	; (4aa8 <update_boot_status+0xc4>)
    4a04:	47a8      	blx	r5
	printf("update_boot_status: page_offset: %d\r\n", page_offset);
    4a06:	2103      	movs	r1, #3
    4a08:	4828      	ldr	r0, [pc, #160]	; (4aac <update_boot_status+0xc8>)
    4a0a:	47a8      	blx	r5
	uint8_t row_buffer[NVMCTRL_ROW_SIZE];
	enum status_code read_nvm_code;
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		int offset = i * NVMCTRL_PAGE_SIZE;
		do
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    4a0c:	4e28      	ldr	r6, [pc, #160]	; (4ab0 <update_boot_status+0xcc>)
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    4a0e:	2780      	movs	r7, #128	; 0x80
    4a10:	01ff      	lsls	r7, r7, #7
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    4a12:	4b28      	ldr	r3, [pc, #160]	; (4ab4 <update_boot_status+0xd0>)
    4a14:	18e5      	adds	r5, r4, r3
    4a16:	ab03      	add	r3, sp, #12
    4a18:	469c      	mov	ip, r3
    4a1a:	4465      	add	r5, ip
    4a1c:	2240      	movs	r2, #64	; 0x40
    4a1e:	0029      	movs	r1, r5
    4a20:	0020      	movs	r0, r4
    4a22:	47b0      	blx	r6
		while (STATUS_OK != read_nvm_code);
    4a24:	2800      	cmp	r0, #0
    4a26:	d1f9      	bne.n	4a1c <update_boot_status+0x38>
    4a28:	3440      	adds	r4, #64	; 0x40
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    4a2a:	42bc      	cmp	r4, r7
    4a2c:	d1f1      	bne.n	4a12 <update_boot_status+0x2e>
	}
	printf("row: %04x\r\n", row_buffer);
    4a2e:	a903      	add	r1, sp, #12
    4a30:	4821      	ldr	r0, [pc, #132]	; (4ab8 <update_boot_status+0xd4>)
    4a32:	4b1b      	ldr	r3, [pc, #108]	; (4aa0 <update_boot_status+0xbc>)
    4a34:	4798      	blx	r3
	do
		read_nvm_code = nvm_erase_row(row_address);
    4a36:	25fc      	movs	r5, #252	; 0xfc
    4a38:	01ad      	lsls	r5, r5, #6
    4a3a:	4c20      	ldr	r4, [pc, #128]	; (4abc <update_boot_status+0xd8>)
    4a3c:	0028      	movs	r0, r5
    4a3e:	47a0      	blx	r4
	while (STATUS_OK != read_nvm_code);
    4a40:	2800      	cmp	r0, #0
    4a42:	d1fb      	bne.n	4a3c <update_boot_status+0x58>

	fw_status_t write_boot;
	memcpy(&write_boot, row_buffer + page_offset * NVMCTRL_PAGE_SIZE, sizeof(fw_status_t));
    4a44:	ac01      	add	r4, sp, #4
    4a46:	ad33      	add	r5, sp, #204	; 0xcc
    4a48:	0023      	movs	r3, r4
    4a4a:	002a      	movs	r2, r5
    4a4c:	ca03      	ldmia	r2!, {r0, r1}
    4a4e:	c303      	stmia	r3!, {r0, r1}
	write_boot.new_image_ready = 1;
    4a50:	2301      	movs	r3, #1
    4a52:	70e3      	strb	r3, [r4, #3]
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[0]);
    4a54:	7821      	ldrb	r1, [r4, #0]
    4a56:	481a      	ldr	r0, [pc, #104]	; (4ac0 <update_boot_status+0xdc>)
    4a58:	4f11      	ldr	r7, [pc, #68]	; (4aa0 <update_boot_status+0xbc>)
    4a5a:	47b8      	blx	r7
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[1]);
    4a5c:	7861      	ldrb	r1, [r4, #1]
    4a5e:	4818      	ldr	r0, [pc, #96]	; (4ac0 <update_boot_status+0xdc>)
    4a60:	47b8      	blx	r7
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[2]);
    4a62:	78a1      	ldrb	r1, [r4, #2]
    4a64:	4816      	ldr	r0, [pc, #88]	; (4ac0 <update_boot_status+0xdc>)
    4a66:	47b8      	blx	r7
	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));

	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));
    4a68:	cc0c      	ldmia	r4!, {r2, r3}
    4a6a:	c50c      	stmia	r5!, {r2, r3}
    4a6c:	24fc      	movs	r4, #252	; 0xfc
    4a6e:	01a4      	lsls	r4, r4, #6
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		int offset = i * NVMCTRL_PAGE_SIZE;
		do
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    4a70:	4e14      	ldr	r6, [pc, #80]	; (4ac4 <update_boot_status+0xe0>)
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    4a72:	2780      	movs	r7, #128	; 0x80
    4a74:	01ff      	lsls	r7, r7, #7
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    4a76:	4b0f      	ldr	r3, [pc, #60]	; (4ab4 <update_boot_status+0xd0>)
    4a78:	18e5      	adds	r5, r4, r3
    4a7a:	ab03      	add	r3, sp, #12
    4a7c:	469c      	mov	ip, r3
    4a7e:	4465      	add	r5, ip
    4a80:	2240      	movs	r2, #64	; 0x40
    4a82:	0029      	movs	r1, r5
    4a84:	0020      	movs	r0, r4
    4a86:	47b0      	blx	r6
		while (STATUS_OK != read_nvm_code);
    4a88:	2800      	cmp	r0, #0
    4a8a:	d1f9      	bne.n	4a80 <update_boot_status+0x9c>
    4a8c:	3440      	adds	r4, #64	; 0x40
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    4a8e:	42bc      	cmp	r4, r7
    4a90:	d1f1      	bne.n	4a76 <update_boot_status+0x92>
	}
}
    4a92:	b047      	add	sp, #284	; 0x11c
    4a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	0000cba9 	.word	0x0000cba9
    4a9c:	00012368 	.word	0x00012368
    4aa0:	00010319 	.word	0x00010319
    4aa4:	00012390 	.word	0x00012390
    4aa8:	000123b8 	.word	0x000123b8
    4aac:	000123e0 	.word	0x000123e0
    4ab0:	0000cae1 	.word	0x0000cae1
    4ab4:	ffffc100 	.word	0xffffc100
    4ab8:	00012408 	.word	0x00012408
    4abc:	0000cb4d 	.word	0x0000cb4d
    4ac0:	00012414 	.word	0x00012414
    4ac4:	0000ca39 	.word	0x0000ca39

00004ac8 <socket_callback>:
 * @param sock    open socket
 * @param evt     event change that pulled callback
 * @param evt_msg event data
 */
void socket_callback(SOCKET sock, uint8_t evt, void *evt_msg)
{
    4ac8:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, evt, evt_msg);
    4aca:	4b01      	ldr	r3, [pc, #4]	; (4ad0 <socket_callback+0x8>)
    4acc:	4798      	blx	r3
}
    4ace:	bd10      	pop	{r4, pc}
    4ad0:	00007839 	.word	0x00007839

00004ad4 <resolve_cb>:
 * callback to resolve http address to an IP address
 * @param pu8DomainName unknown??
 * @param u32ServerIP   unknown??
 */
void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    4ad4:	b570      	push	{r4, r5, r6, lr}
    4ad6:	b082      	sub	sp, #8
    4ad8:	0005      	movs	r5, r0
    4ada:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	       (int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    4adc:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4ade:	21ff      	movs	r1, #255	; 0xff
    4ae0:	400b      	ands	r3, r1
    4ae2:	000a      	movs	r2, r1
    4ae4:	4022      	ands	r2, r4
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    4ae6:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4ae8:	9001      	str	r0, [sp, #4]
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    4aea:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4aec:	4001      	ands	r1, r0
    4aee:	9100      	str	r1, [sp, #0]
    4af0:	0029      	movs	r1, r5
    4af2:	4804      	ldr	r0, [pc, #16]	; (4b04 <resolve_cb+0x30>)
    4af4:	4e04      	ldr	r6, [pc, #16]	; (4b08 <resolve_cb+0x34>)
    4af6:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    4af8:	0021      	movs	r1, r4
    4afa:	0028      	movs	r0, r5
    4afc:	4b03      	ldr	r3, [pc, #12]	; (4b0c <resolve_cb+0x38>)
    4afe:	4798      	blx	r3
}
    4b00:	b002      	add	sp, #8
    4b02:	bd70      	pop	{r4, r5, r6, pc}
    4b04:	00011eec 	.word	0x00011eec
    4b08:	00010319 	.word	0x00010319
    4b0c:	00006be9 	.word	0x00006be9

00004b10 <start_download>:
{
    4b10:	b510      	push	{r4, lr}
    4b12:	b082      	sub	sp, #8
	return (down_state & mask) != 0;
    4b14:	4b20      	ldr	r3, [pc, #128]	; (4b98 <start_download+0x88>)
    4b16:	881b      	ldrh	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    4b18:	07da      	lsls	r2, r3, #31
    4b1a:	d512      	bpl.n	4b42 <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
    4b1c:	079a      	lsls	r2, r3, #30
    4b1e:	d515      	bpl.n	4b4c <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
    4b20:	075a      	lsls	r2, r3, #29
    4b22:	d417      	bmi.n	4b54 <start_download+0x44>
	if (is_state_set(DOWNLOADING)) {
    4b24:	071a      	lsls	r2, r3, #28
    4b26:	d419      	bmi.n	4b5c <start_download+0x4c>
	if (is_state_set(NOT_CHECKED)) {
    4b28:	065a      	lsls	r2, r3, #25
    4b2a:	d41b      	bmi.n	4b64 <start_download+0x54>
	if (is_state_set(UPDATE_AVAILABLE)) {
    4b2c:	061a      	lsls	r2, r3, #24
    4b2e:	d426      	bmi.n	4b7e <start_download+0x6e>
	if (is_state_set(UPDATE_NOT_AVAILABLE)) {
    4b30:	05db      	lsls	r3, r3, #23
    4b32:	d509      	bpl.n	4b48 <start_download+0x38>
		printf("start_download: no update available\r\n");
    4b34:	4819      	ldr	r0, [pc, #100]	; (4b9c <start_download+0x8c>)
    4b36:	4b1a      	ldr	r3, [pc, #104]	; (4ba0 <start_download+0x90>)
    4b38:	4798      	blx	r3
		add_state(COMPLETED);
    4b3a:	2010      	movs	r0, #16
    4b3c:	4b19      	ldr	r3, [pc, #100]	; (4ba4 <start_download+0x94>)
    4b3e:	4798      	blx	r3
		return;
    4b40:	e002      	b.n	4b48 <start_download+0x38>
		printf("start_download: MMC storage not ready.\r\n");
    4b42:	4819      	ldr	r0, [pc, #100]	; (4ba8 <start_download+0x98>)
    4b44:	4b16      	ldr	r3, [pc, #88]	; (4ba0 <start_download+0x90>)
    4b46:	4798      	blx	r3
}
    4b48:	b002      	add	sp, #8
    4b4a:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
    4b4c:	4817      	ldr	r0, [pc, #92]	; (4bac <start_download+0x9c>)
    4b4e:	4b14      	ldr	r3, [pc, #80]	; (4ba0 <start_download+0x90>)
    4b50:	4798      	blx	r3
		return;
    4b52:	e7f9      	b.n	4b48 <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
    4b54:	4816      	ldr	r0, [pc, #88]	; (4bb0 <start_download+0xa0>)
    4b56:	4b12      	ldr	r3, [pc, #72]	; (4ba0 <start_download+0x90>)
    4b58:	4798      	blx	r3
		return;
    4b5a:	e7f5      	b.n	4b48 <start_download+0x38>
		printf("start_download: running download already.\r\n");
    4b5c:	4815      	ldr	r0, [pc, #84]	; (4bb4 <start_download+0xa4>)
    4b5e:	4b10      	ldr	r3, [pc, #64]	; (4ba0 <start_download+0x90>)
    4b60:	4798      	blx	r3
		return;
    4b62:	e7f1      	b.n	4b48 <start_download+0x38>
		printf("start_download [NOT_CHECKED]: sending HTTP request for header\r\n");
    4b64:	4814      	ldr	r0, [pc, #80]	; (4bb8 <start_download+0xa8>)
    4b66:	4b0e      	ldr	r3, [pc, #56]	; (4ba0 <start_download+0x90>)
    4b68:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_header_http_address, HTTP_METHOD_GET, NULL, NULL);
    4b6a:	4b14      	ldr	r3, [pc, #80]	; (4bbc <start_download+0xac>)
    4b6c:	681b      	ldr	r3, [r3, #0]
    4b6e:	68d9      	ldr	r1, [r3, #12]
    4b70:	2300      	movs	r3, #0
    4b72:	9300      	str	r3, [sp, #0]
    4b74:	2201      	movs	r2, #1
    4b76:	4812      	ldr	r0, [pc, #72]	; (4bc0 <start_download+0xb0>)
    4b78:	4c12      	ldr	r4, [pc, #72]	; (4bc4 <start_download+0xb4>)
    4b7a:	47a0      	blx	r4
		return;
    4b7c:	e7e4      	b.n	4b48 <start_download+0x38>
		printf("start_download [UPDATE_AVAILABLE]: sending HTTP request for firmware\r\n");
    4b7e:	4812      	ldr	r0, [pc, #72]	; (4bc8 <start_download+0xb8>)
    4b80:	4b07      	ldr	r3, [pc, #28]	; (4ba0 <start_download+0x90>)
    4b82:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_http_address, HTTP_METHOD_GET, NULL, NULL);
    4b84:	4b0d      	ldr	r3, [pc, #52]	; (4bbc <start_download+0xac>)
    4b86:	681b      	ldr	r3, [r3, #0]
    4b88:	6919      	ldr	r1, [r3, #16]
    4b8a:	2300      	movs	r3, #0
    4b8c:	9300      	str	r3, [sp, #0]
    4b8e:	2201      	movs	r2, #1
    4b90:	480b      	ldr	r0, [pc, #44]	; (4bc0 <start_download+0xb0>)
    4b92:	4c0c      	ldr	r4, [pc, #48]	; (4bc4 <start_download+0xb4>)
    4b94:	47a0      	blx	r4
		return;
    4b96:	e7d7      	b.n	4b48 <start_download+0x38>
    4b98:	20000614 	.word	0x20000614
    4b9c:	00012050 	.word	0x00012050
    4ba0:	00010435 	.word	0x00010435
    4ba4:	00004949 	.word	0x00004949
    4ba8:	00011f1c 	.word	0x00011f1c
    4bac:	00011f44 	.word	0x00011f44
    4bb0:	00011f70 	.word	0x00011f70
    4bb4:	00011f9c 	.word	0x00011f9c
    4bb8:	00011fc8 	.word	0x00011fc8
    4bbc:	20000744 	.word	0x20000744
    4bc0:	20000618 	.word	0x20000618
    4bc4:	0000713d 	.word	0x0000713d
    4bc8:	00012008 	.word	0x00012008

00004bcc <wifi_callback>:
 * Callback for wifi state changes
 * @param evt     event change
 * @param evt_msg information about wifi state change
 */
void wifi_callback(uint8_t evt, void *evt_msg)
{
    4bcc:	b530      	push	{r4, r5, lr}
    4bce:	b083      	sub	sp, #12
	switch (evt) {
    4bd0:	282c      	cmp	r0, #44	; 0x2c
    4bd2:	d006      	beq.n	4be2 <wifi_callback+0x16>
    4bd4:	2832      	cmp	r0, #50	; 0x32
    4bd6:	d034      	beq.n	4c42 <wifi_callback+0x76>
		add_state(WIFI_CONNECTED);
		start_download();
		break;
	}
	default:
		printf("wifi_callback [default]: ERROR evt %d\r\n", evt);
    4bd8:	0001      	movs	r1, r0
    4bda:	4822      	ldr	r0, [pc, #136]	; (4c64 <wifi_callback+0x98>)
    4bdc:	4b22      	ldr	r3, [pc, #136]	; (4c68 <wifi_callback+0x9c>)
    4bde:	4798      	blx	r3
	}
}
    4be0:	e03d      	b.n	4c5e <wifi_callback+0x92>
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    4be2:	780b      	ldrb	r3, [r1, #0]
    4be4:	2b01      	cmp	r3, #1
    4be6:	d01e      	beq.n	4c26 <wifi_callback+0x5a>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    4be8:	2b00      	cmp	r3, #0
    4bea:	d138      	bne.n	4c5e <wifi_callback+0x92>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED] disconnected.\r\n");
    4bec:	481f      	ldr	r0, [pc, #124]	; (4c6c <wifi_callback+0xa0>)
    4bee:	4b20      	ldr	r3, [pc, #128]	; (4c70 <wifi_callback+0xa4>)
    4bf0:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
    4bf2:	2002      	movs	r0, #2
    4bf4:	4b1f      	ldr	r3, [pc, #124]	; (4c74 <wifi_callback+0xa8>)
    4bf6:	4798      	blx	r3
	return (down_state & mask) != 0;
    4bf8:	4b1f      	ldr	r3, [pc, #124]	; (4c78 <wifi_callback+0xac>)
    4bfa:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(DOWNLOADING))
    4bfc:	071b      	lsls	r3, r3, #28
    4bfe:	d418      	bmi.n	4c32 <wifi_callback+0x66>
	return (down_state & mask) != 0;
    4c00:	4b1d      	ldr	r3, [pc, #116]	; (4c78 <wifi_callback+0xac>)
    4c02:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED))
    4c04:	075b      	lsls	r3, r3, #29
    4c06:	d418      	bmi.n	4c3a <wifi_callback+0x6e>
			m2m_wifi_connect(current_wifi_config->ssid, strlen(current_wifi_config->ssid), current_wifi_config->auth_type, current_wifi_config->password, M2M_WIFI_CH_ALL);
    4c08:	4b1c      	ldr	r3, [pc, #112]	; (4c7c <wifi_callback+0xb0>)
    4c0a:	681c      	ldr	r4, [r3, #0]
    4c0c:	6825      	ldr	r5, [r4, #0]
    4c0e:	0028      	movs	r0, r5
    4c10:	4b1b      	ldr	r3, [pc, #108]	; (4c80 <wifi_callback+0xb4>)
    4c12:	4798      	blx	r3
    4c14:	68a3      	ldr	r3, [r4, #8]
    4c16:	7922      	ldrb	r2, [r4, #4]
    4c18:	b2c1      	uxtb	r1, r0
    4c1a:	20ff      	movs	r0, #255	; 0xff
    4c1c:	9000      	str	r0, [sp, #0]
    4c1e:	0028      	movs	r0, r5
    4c20:	4c18      	ldr	r4, [pc, #96]	; (4c84 <wifi_callback+0xb8>)
    4c22:	47a0      	blx	r4
    4c24:	e01b      	b.n	4c5e <wifi_callback+0x92>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED]: connected.\r\n");
    4c26:	4818      	ldr	r0, [pc, #96]	; (4c88 <wifi_callback+0xbc>)
    4c28:	4b11      	ldr	r3, [pc, #68]	; (4c70 <wifi_callback+0xa4>)
    4c2a:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    4c2c:	4b17      	ldr	r3, [pc, #92]	; (4c8c <wifi_callback+0xc0>)
    4c2e:	4798      	blx	r3
    4c30:	e015      	b.n	4c5e <wifi_callback+0x92>
				clear_state(DOWNLOADING);
    4c32:	2008      	movs	r0, #8
    4c34:	4b0f      	ldr	r3, [pc, #60]	; (4c74 <wifi_callback+0xa8>)
    4c36:	4798      	blx	r3
    4c38:	e7e2      	b.n	4c00 <wifi_callback+0x34>
				clear_state(GET_REQUESTED);
    4c3a:	2004      	movs	r0, #4
    4c3c:	4b0d      	ldr	r3, [pc, #52]	; (4c74 <wifi_callback+0xa8>)
    4c3e:	4798      	blx	r3
    4c40:	e7e2      	b.n	4c08 <wifi_callback+0x3c>
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    4c42:	788b      	ldrb	r3, [r1, #2]
    4c44:	784a      	ldrb	r2, [r1, #1]
    4c46:	7808      	ldrb	r0, [r1, #0]
    4c48:	78c9      	ldrb	r1, [r1, #3]
    4c4a:	9100      	str	r1, [sp, #0]
    4c4c:	0001      	movs	r1, r0
    4c4e:	4810      	ldr	r0, [pc, #64]	; (4c90 <wifi_callback+0xc4>)
    4c50:	4c05      	ldr	r4, [pc, #20]	; (4c68 <wifi_callback+0x9c>)
    4c52:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    4c54:	2002      	movs	r0, #2
    4c56:	4b0f      	ldr	r3, [pc, #60]	; (4c94 <wifi_callback+0xc8>)
    4c58:	4798      	blx	r3
		start_download();
    4c5a:	4b0f      	ldr	r3, [pc, #60]	; (4c98 <wifi_callback+0xcc>)
    4c5c:	4798      	blx	r3
}
    4c5e:	b003      	add	sp, #12
    4c60:	bd30      	pop	{r4, r5, pc}
    4c62:	46c0      	nop			; (mov r8, r8)
    4c64:	000125c8 	.word	0x000125c8
    4c68:	00010319 	.word	0x00010319
    4c6c:	00012544 	.word	0x00012544
    4c70:	00010435 	.word	0x00010435
    4c74:	00004939 	.word	0x00004939
    4c78:	20000614 	.word	0x20000614
    4c7c:	20000744 	.word	0x20000744
    4c80:	0001067b 	.word	0x0001067b
    4c84:	0000a9dd 	.word	0x0000a9dd
    4c88:	00012504 	.word	0x00012504
    4c8c:	0000a9f9 	.word	0x0000a9f9
    4c90:	00012584 	.word	0x00012584
    4c94:	00004949 	.word	0x00004949
    4c98:	00004b11 	.word	0x00004b11

00004c9c <verify_flash>:
{
    4c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c9e:	46c6      	mov	lr, r8
    4ca0:	b500      	push	{lr}
    4ca2:	b084      	sub	sp, #16
    4ca4:	9001      	str	r0, [sp, #4]
	crc32_t flash_checksum = 0;
    4ca6:	2300      	movs	r3, #0
    4ca8:	9303      	str	r3, [sp, #12]
	printf("starting seed: %04x\r\n", flash_checksum);
    4caa:	2100      	movs	r1, #0
    4cac:	482e      	ldr	r0, [pc, #184]	; (4d68 <verify_flash+0xcc>)
    4cae:	4b2f      	ldr	r3, [pc, #188]	; (4d6c <verify_flash+0xd0>)
    4cb0:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
    4cb2:	4b2f      	ldr	r3, [pc, #188]	; (4d70 <verify_flash+0xd4>)
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	2bff      	cmp	r3, #255	; 0xff
    4cb8:	d930      	bls.n	4d1c <verify_flash+0x80>
    4cba:	2482      	movs	r4, #130	; 0x82
    4cbc:	02e4      	lsls	r4, r4, #11
    4cbe:	2700      	movs	r7, #0
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW2_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
    4cc0:	4d2c      	ldr	r5, [pc, #176]	; (4d74 <verify_flash+0xd8>)
    4cc2:	4e2d      	ldr	r6, [pc, #180]	; (4d78 <verify_flash+0xdc>)
    4cc4:	e018      	b.n	4cf8 <verify_flash+0x5c>
			printf("verify_flash: error trying to read external flash. %d", read_status);
    4cc6:	0001      	movs	r1, r0
    4cc8:	482c      	ldr	r0, [pc, #176]	; (4d7c <verify_flash+0xe0>)
    4cca:	4b28      	ldr	r3, [pc, #160]	; (4d6c <verify_flash+0xd0>)
    4ccc:	4798      	blx	r3
			return false;
    4cce:	2000      	movs	r0, #0
    4cd0:	e045      	b.n	4d5e <verify_flash+0xc2>
			crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &flash_checksum);
    4cd2:	aa03      	add	r2, sp, #12
    4cd4:	2180      	movs	r1, #128	; 0x80
    4cd6:	0049      	lsls	r1, r1, #1
    4cd8:	4826      	ldr	r0, [pc, #152]	; (4d74 <verify_flash+0xd8>)
    4cda:	4b29      	ldr	r3, [pc, #164]	; (4d80 <verify_flash+0xe4>)
    4cdc:	4798      	blx	r3
		printf("%d. verify_flash: crc_val: %d\r\n", i, flash_checksum);
    4cde:	9a03      	ldr	r2, [sp, #12]
    4ce0:	0039      	movs	r1, r7
    4ce2:	4828      	ldr	r0, [pc, #160]	; (4d84 <verify_flash+0xe8>)
    4ce4:	4b21      	ldr	r3, [pc, #132]	; (4d6c <verify_flash+0xd0>)
    4ce6:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
    4ce8:	3701      	adds	r7, #1
    4cea:	4b21      	ldr	r3, [pc, #132]	; (4d70 <verify_flash+0xd4>)
    4cec:	681b      	ldr	r3, [r3, #0]
    4cee:	3401      	adds	r4, #1
    4cf0:	34ff      	adds	r4, #255	; 0xff
    4cf2:	0a1a      	lsrs	r2, r3, #8
    4cf4:	42ba      	cmp	r2, r7
    4cf6:	d911      	bls.n	4d1c <verify_flash+0x80>
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW2_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
    4cf8:	2380      	movs	r3, #128	; 0x80
    4cfa:	005b      	lsls	r3, r3, #1
    4cfc:	002a      	movs	r2, r5
    4cfe:	0021      	movs	r1, r4
    4d00:	4821      	ldr	r0, [pc, #132]	; (4d88 <verify_flash+0xec>)
    4d02:	47b0      	blx	r6
		if (STATUS_OK != read_status) {
    4d04:	2800      	cmp	r0, #0
    4d06:	d1de      	bne.n	4cc6 <verify_flash+0x2a>
		if (!flash_checksum)
    4d08:	9b03      	ldr	r3, [sp, #12]
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d1e1      	bne.n	4cd2 <verify_flash+0x36>
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;

	return crc32_recalculate(data, length, crc);
    4d0e:	aa03      	add	r2, sp, #12
    4d10:	2180      	movs	r1, #128	; 0x80
    4d12:	0049      	lsls	r1, r1, #1
    4d14:	4817      	ldr	r0, [pc, #92]	; (4d74 <verify_flash+0xd8>)
    4d16:	4b1a      	ldr	r3, [pc, #104]	; (4d80 <verify_flash+0xe4>)
    4d18:	4798      	blx	r3
    4d1a:	e7e0      	b.n	4cde <verify_flash+0x42>
	int remaining_bytes = total_bytes_written % FLASH_ROW_SIZE;
    4d1c:	24ff      	movs	r4, #255	; 0xff
    4d1e:	401c      	ands	r4, r3
	printf("verify_flash: remaining bytes %d\r\n", remaining_bytes);
    4d20:	0021      	movs	r1, r4
    4d22:	481a      	ldr	r0, [pc, #104]	; (4d8c <verify_flash+0xf0>)
    4d24:	4f11      	ldr	r7, [pc, #68]	; (4d6c <verify_flash+0xd0>)
    4d26:	47b8      	blx	r7
	read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW2_ADDR + (total_bytes_written - remaining_bytes), write_row_buffer, remaining_bytes);
    4d28:	b2a3      	uxth	r3, r4
    4d2a:	4d12      	ldr	r5, [pc, #72]	; (4d74 <verify_flash+0xd8>)
    4d2c:	4a10      	ldr	r2, [pc, #64]	; (4d70 <verify_flash+0xd4>)
    4d2e:	6811      	ldr	r1, [r2, #0]
    4d30:	2282      	movs	r2, #130	; 0x82
    4d32:	02d2      	lsls	r2, r2, #11
    4d34:	4694      	mov	ip, r2
    4d36:	4461      	add	r1, ip
    4d38:	1b09      	subs	r1, r1, r4
    4d3a:	002a      	movs	r2, r5
    4d3c:	4812      	ldr	r0, [pc, #72]	; (4d88 <verify_flash+0xec>)
    4d3e:	4e0e      	ldr	r6, [pc, #56]	; (4d78 <verify_flash+0xdc>)
    4d40:	47b0      	blx	r6
	crc32_recalculate(write_row_buffer, remaining_bytes, &flash_checksum);
    4d42:	aa03      	add	r2, sp, #12
    4d44:	0021      	movs	r1, r4
    4d46:	0028      	movs	r0, r5
    4d48:	4b0d      	ldr	r3, [pc, #52]	; (4d80 <verify_flash+0xe4>)
    4d4a:	4798      	blx	r3
	printf("verify_flash: calculated crc32 val: %d\r\n", flash_checksum);
    4d4c:	9903      	ldr	r1, [sp, #12]
    4d4e:	4810      	ldr	r0, [pc, #64]	; (4d90 <verify_flash+0xf4>)
    4d50:	47b8      	blx	r7
	return flash_checksum == known_checksum;
    4d52:	9b03      	ldr	r3, [sp, #12]
    4d54:	9a01      	ldr	r2, [sp, #4]
    4d56:	1a9e      	subs	r6, r3, r2
    4d58:	4270      	negs	r0, r6
    4d5a:	4170      	adcs	r0, r6
    4d5c:	b2c0      	uxtb	r0, r0
}
    4d5e:	b004      	add	sp, #16
    4d60:	bc04      	pop	{r2}
    4d62:	4690      	mov	r8, r2
    4d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d66:	46c0      	nop			; (mov r8, r8)
    4d68:	00012444 	.word	0x00012444
    4d6c:	00010319 	.word	0x00010319
    4d70:	20000608 	.word	0x20000608
    4d74:	20000748 	.word	0x20000748
    4d78:	000057f1 	.word	0x000057f1
    4d7c:	0001245c 	.word	0x0001245c
    4d80:	0000c839 	.word	0x0000c839
    4d84:	00012494 	.word	0x00012494
    4d88:	2000060c 	.word	0x2000060c
    4d8c:	000124b4 	.word	0x000124b4
    4d90:	000124d8 	.word	0x000124d8

00004d94 <store_file_packet>:
{
    4d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d96:	46de      	mov	lr, fp
    4d98:	4657      	mov	r7, sl
    4d9a:	464e      	mov	r6, r9
    4d9c:	4645      	mov	r5, r8
    4d9e:	b5e0      	push	{r5, r6, r7, lr}
    4da0:	b085      	sub	sp, #20
    4da2:	4680      	mov	r8, r0
    4da4:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
    4da6:	2800      	cmp	r0, #0
    4da8:	d00c      	beq.n	4dc4 <store_file_packet+0x30>
    4daa:	2900      	cmp	r1, #0
    4dac:	d00a      	beq.n	4dc4 <store_file_packet+0x30>
	return (down_state & mask) != 0;
    4dae:	4bbb      	ldr	r3, [pc, #748]	; (509c <store_file_packet+0x308>)
    4db0:	881b      	ldrh	r3, [r3, #0]
	if (is_state_set(NOT_CHECKED)) {
    4db2:	065a      	lsls	r2, r3, #25
    4db4:	d53d      	bpl.n	4e32 <store_file_packet+0x9e>
		if (6 != length) {
    4db6:	2906      	cmp	r1, #6
    4db8:	d00e      	beq.n	4dd8 <store_file_packet+0x44>
			printf("store_file_packet [UPDATE_CHECK]: file [%d bytes] does not match header [%d bytes] size\r\n", length, sizeof(fw_header_t));
    4dba:	220c      	movs	r2, #12
    4dbc:	48b8      	ldr	r0, [pc, #736]	; (50a0 <store_file_packet+0x30c>)
    4dbe:	4bb9      	ldr	r3, [pc, #740]	; (50a4 <store_file_packet+0x310>)
    4dc0:	4798      	blx	r3
			return;
    4dc2:	e002      	b.n	4dca <store_file_packet+0x36>
		printf("store_file_packet: empty data.\r\n");
    4dc4:	48b8      	ldr	r0, [pc, #736]	; (50a8 <store_file_packet+0x314>)
    4dc6:	4bb9      	ldr	r3, [pc, #740]	; (50ac <store_file_packet+0x318>)
    4dc8:	4798      	blx	r3
}
    4dca:	b005      	add	sp, #20
    4dcc:	bc3c      	pop	{r2, r3, r4, r5}
    4dce:	4690      	mov	r8, r2
    4dd0:	4699      	mov	r9, r3
    4dd2:	46a2      	mov	sl, r4
    4dd4:	46ab      	mov	fp, r5
    4dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&firmware_header.fw_version, data, 2);
    4dd8:	ac01      	add	r4, sp, #4
    4dda:	2202      	movs	r2, #2
    4ddc:	0001      	movs	r1, r0
    4dde:	0020      	movs	r0, r4
    4de0:	4db3      	ldr	r5, [pc, #716]	; (50b0 <store_file_packet+0x31c>)
    4de2:	47a8      	blx	r5
		memcpy(&firmware_header.checksum, data + 2, 4);
    4de4:	4641      	mov	r1, r8
    4de6:	3102      	adds	r1, #2
    4de8:	2204      	movs	r2, #4
    4dea:	a802      	add	r0, sp, #8
    4dec:	47a8      	blx	r5
    4dee:	8824      	ldrh	r4, [r4, #0]
    4df0:	9e02      	ldr	r6, [sp, #8]
	printf("new firmware version: %d\r\n", firmware_header.fw_version);
    4df2:	0021      	movs	r1, r4
    4df4:	48af      	ldr	r0, [pc, #700]	; (50b4 <store_file_packet+0x320>)
    4df6:	4dab      	ldr	r5, [pc, #684]	; (50a4 <store_file_packet+0x310>)
    4df8:	47a8      	blx	r5
	printf("new firmware checksum: %04x\r\n", firmware_header.checksum);
    4dfa:	0031      	movs	r1, r6
    4dfc:	48ae      	ldr	r0, [pc, #696]	; (50b8 <store_file_packet+0x324>)
    4dfe:	47a8      	blx	r5
	if (firmware_header.fw_version > FW_VERSION) {
    4e00:	2c00      	cmp	r4, #0
    4e02:	d109      	bne.n	4e18 <store_file_packet+0x84>
		clear_state(NOT_CHECKED & GET_REQUESTED);
    4e04:	2000      	movs	r0, #0
    4e06:	4bad      	ldr	r3, [pc, #692]	; (50bc <store_file_packet+0x328>)
    4e08:	4798      	blx	r3
		add_state(UPDATE_NOT_AVAILABLE & COMPLETED);
    4e0a:	2000      	movs	r0, #0
    4e0c:	4bac      	ldr	r3, [pc, #688]	; (50c0 <store_file_packet+0x32c>)
    4e0e:	4798      	blx	r3
		add_state(COMPLETED);
    4e10:	2010      	movs	r0, #16
    4e12:	4bab      	ldr	r3, [pc, #684]	; (50c0 <store_file_packet+0x32c>)
    4e14:	4798      	blx	r3
		return;
    4e16:	e7d8      	b.n	4dca <store_file_packet+0x36>
		clear_state(GET_REQUESTED);
    4e18:	2004      	movs	r0, #4
    4e1a:	4da8      	ldr	r5, [pc, #672]	; (50bc <store_file_packet+0x328>)
    4e1c:	47a8      	blx	r5
		clear_state(NOT_CHECKED);
    4e1e:	2040      	movs	r0, #64	; 0x40
    4e20:	47a8      	blx	r5
		add_state(UPDATE_AVAILABLE);
    4e22:	2080      	movs	r0, #128	; 0x80
    4e24:	4ba6      	ldr	r3, [pc, #664]	; (50c0 <store_file_packet+0x32c>)
    4e26:	4798      	blx	r3
		new_firmware_checksum = firmware_header.checksum;
    4e28:	4ba6      	ldr	r3, [pc, #664]	; (50c4 <store_file_packet+0x330>)
    4e2a:	601e      	str	r6, [r3, #0]
		new_firmware_version = firmware_header.fw_version;
    4e2c:	4ba6      	ldr	r3, [pc, #664]	; (50c8 <store_file_packet+0x334>)
    4e2e:	801c      	strh	r4, [r3, #0]
    4e30:	e7ee      	b.n	4e10 <store_file_packet+0x7c>
	} else if (is_state_set(UPDATE_AVAILABLE)) {
    4e32:	061a      	lsls	r2, r3, #24
    4e34:	d5c9      	bpl.n	4dca <store_file_packet+0x36>
		if (!is_state_set(DOWNLOADING)) {
    4e36:	071b      	lsls	r3, r3, #28
    4e38:	d506      	bpl.n	4e48 <store_file_packet+0xb4>
{
    4e3a:	2500      	movs	r5, #0
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    4e3c:	4ba3      	ldr	r3, [pc, #652]	; (50cc <store_file_packet+0x338>)
    4e3e:	469a      	mov	sl, r3
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    4e40:	469b      	mov	fp, r3
    4e42:	4ba3      	ldr	r3, [pc, #652]	; (50d0 <store_file_packet+0x33c>)
    4e44:	4699      	mov	r9, r3
    4e46:	e0dc      	b.n	5002 <store_file_packet+0x26e>
	printf("FW1_ERASE_ADDR: %d\r\n", firmware_starter_address);
    4e48:	49a2      	ldr	r1, [pc, #648]	; (50d4 <store_file_packet+0x340>)
    4e4a:	48a3      	ldr	r0, [pc, #652]	; (50d8 <store_file_packet+0x344>)
    4e4c:	4b95      	ldr	r3, [pc, #596]	; (50a4 <store_file_packet+0x310>)
    4e4e:	4798      	blx	r3
	at25dfx_chip_wake(&at25dfx_chip);
    4e50:	4ca2      	ldr	r4, [pc, #648]	; (50dc <store_file_packet+0x348>)
    4e52:	0020      	movs	r0, r4
    4e54:	4ba2      	ldr	r3, [pc, #648]	; (50e0 <store_file_packet+0x34c>)
    4e56:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    4e58:	0020      	movs	r0, r4
    4e5a:	4ba2      	ldr	r3, [pc, #648]	; (50e4 <store_file_packet+0x350>)
    4e5c:	4798      	blx	r3
    4e5e:	2800      	cmp	r0, #0
    4e60:	d145      	bne.n	4eee <store_file_packet+0x15a>
	status_val = at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
    4e62:	2100      	movs	r1, #0
    4e64:	489d      	ldr	r0, [pc, #628]	; (50dc <store_file_packet+0x348>)
    4e66:	4ba0      	ldr	r3, [pc, #640]	; (50e8 <store_file_packet+0x354>)
    4e68:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4e6a:	2800      	cmp	r0, #0
    4e6c:	d156      	bne.n	4f1c <store_file_packet+0x188>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address, AT25DFX_BLOCK_SIZE_64KB);
    4e6e:	2202      	movs	r2, #2
    4e70:	4998      	ldr	r1, [pc, #608]	; (50d4 <store_file_packet+0x340>)
    4e72:	489a      	ldr	r0, [pc, #616]	; (50dc <store_file_packet+0x348>)
    4e74:	4b9d      	ldr	r3, [pc, #628]	; (50ec <store_file_packet+0x358>)
    4e76:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4e78:	2800      	cmp	r0, #0
    4e7a:	d157      	bne.n	4f2c <store_file_packet+0x198>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 1), AT25DFX_BLOCK_SIZE_64KB);
    4e7c:	2202      	movs	r2, #2
    4e7e:	499c      	ldr	r1, [pc, #624]	; (50f0 <store_file_packet+0x35c>)
    4e80:	4896      	ldr	r0, [pc, #600]	; (50dc <store_file_packet+0x348>)
    4e82:	4b9a      	ldr	r3, [pc, #616]	; (50ec <store_file_packet+0x358>)
    4e84:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4e86:	2800      	cmp	r0, #0
    4e88:	d158      	bne.n	4f3c <store_file_packet+0x1a8>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2), AT25DFX_BLOCK_SIZE_64KB);
    4e8a:	2202      	movs	r2, #2
    4e8c:	4999      	ldr	r1, [pc, #612]	; (50f4 <store_file_packet+0x360>)
    4e8e:	4893      	ldr	r0, [pc, #588]	; (50dc <store_file_packet+0x348>)
    4e90:	4b96      	ldr	r3, [pc, #600]	; (50ec <store_file_packet+0x358>)
    4e92:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4e94:	2800      	cmp	r0, #0
    4e96:	d156      	bne.n	4f46 <store_file_packet+0x1b2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0), AT25DFX_BLOCK_SIZE_32KB);
    4e98:	2201      	movs	r2, #1
    4e9a:	4997      	ldr	r1, [pc, #604]	; (50f8 <store_file_packet+0x364>)
    4e9c:	488f      	ldr	r0, [pc, #572]	; (50dc <store_file_packet+0x348>)
    4e9e:	4b93      	ldr	r3, [pc, #588]	; (50ec <store_file_packet+0x358>)
    4ea0:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4ea2:	2800      	cmp	r0, #0
    4ea4:	d157      	bne.n	4f56 <store_file_packet+0x1c2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0), AT25DFX_BLOCK_SIZE_4KB);
    4ea6:	2200      	movs	r2, #0
    4ea8:	4994      	ldr	r1, [pc, #592]	; (50fc <store_file_packet+0x368>)
    4eaa:	488c      	ldr	r0, [pc, #560]	; (50dc <store_file_packet+0x348>)
    4eac:	4b8f      	ldr	r3, [pc, #572]	; (50ec <store_file_packet+0x358>)
    4eae:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4eb0:	2800      	cmp	r0, #0
    4eb2:	d158      	bne.n	4f66 <store_file_packet+0x1d2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1), AT25DFX_BLOCK_SIZE_4KB);
    4eb4:	2200      	movs	r2, #0
    4eb6:	4992      	ldr	r1, [pc, #584]	; (5100 <store_file_packet+0x36c>)
    4eb8:	4888      	ldr	r0, [pc, #544]	; (50dc <store_file_packet+0x348>)
    4eba:	4b8c      	ldr	r3, [pc, #560]	; (50ec <store_file_packet+0x358>)
    4ebc:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4ebe:	2800      	cmp	r0, #0
    4ec0:	d159      	bne.n	4f76 <store_file_packet+0x1e2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2), AT25DFX_BLOCK_SIZE_4KB);
    4ec2:	2200      	movs	r2, #0
    4ec4:	498f      	ldr	r1, [pc, #572]	; (5104 <store_file_packet+0x370>)
    4ec6:	4885      	ldr	r0, [pc, #532]	; (50dc <store_file_packet+0x348>)
    4ec8:	4b88      	ldr	r3, [pc, #544]	; (50ec <store_file_packet+0x358>)
    4eca:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4ecc:	2800      	cmp	r0, #0
    4ece:	d15a      	bne.n	4f86 <store_file_packet+0x1f2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3), AT25DFX_BLOCK_SIZE_4KB);
    4ed0:	2200      	movs	r2, #0
    4ed2:	498d      	ldr	r1, [pc, #564]	; (5108 <store_file_packet+0x374>)
    4ed4:	4881      	ldr	r0, [pc, #516]	; (50dc <store_file_packet+0x348>)
    4ed6:	4b85      	ldr	r3, [pc, #532]	; (50ec <store_file_packet+0x358>)
    4ed8:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4eda:	2800      	cmp	r0, #0
    4edc:	d05b      	beq.n	4f96 <store_file_packet+0x202>
		add_state(CANCELED);
    4ede:	2020      	movs	r0, #32
    4ee0:	4b77      	ldr	r3, [pc, #476]	; (50c0 <store_file_packet+0x32c>)
    4ee2:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    4ee4:	4988      	ldr	r1, [pc, #544]	; (5108 <store_file_packet+0x374>)
    4ee6:	4889      	ldr	r0, [pc, #548]	; (510c <store_file_packet+0x378>)
    4ee8:	4b6e      	ldr	r3, [pc, #440]	; (50a4 <store_file_packet+0x310>)
    4eea:	4798      	blx	r3
    4eec:	e002      	b.n	4ef4 <store_file_packet+0x160>
		printf("store_file_packet: No flash chip.\r\n");
    4eee:	4888      	ldr	r0, [pc, #544]	; (5110 <store_file_packet+0x37c>)
    4ef0:	4b6e      	ldr	r3, [pc, #440]	; (50ac <store_file_packet+0x318>)
    4ef2:	4798      	blx	r3
			received_file_size = 0;
    4ef4:	2300      	movs	r3, #0
    4ef6:	4a87      	ldr	r2, [pc, #540]	; (5114 <store_file_packet+0x380>)
    4ef8:	6013      	str	r3, [r2, #0]
			write_address = FW2_ADDR; //TODO: MAKE GENERIC SO CAN OTA CLI
    4efa:	2182      	movs	r1, #130	; 0x82
    4efc:	02c9      	lsls	r1, r1, #11
    4efe:	4a86      	ldr	r2, [pc, #536]	; (5118 <store_file_packet+0x384>)
    4f00:	6011      	str	r1, [r2, #0]
			buffer_cursor = 0;
    4f02:	4a72      	ldr	r2, [pc, #456]	; (50cc <store_file_packet+0x338>)
    4f04:	7013      	strb	r3, [r2, #0]
			total_bytes_written = 0;
    4f06:	4a85      	ldr	r2, [pc, #532]	; (511c <store_file_packet+0x388>)
    4f08:	6013      	str	r3, [r2, #0]
			printf("starting val: ", crc_val);
    4f0a:	4b85      	ldr	r3, [pc, #532]	; (5120 <store_file_packet+0x38c>)
    4f0c:	6819      	ldr	r1, [r3, #0]
    4f0e:	4885      	ldr	r0, [pc, #532]	; (5124 <store_file_packet+0x390>)
    4f10:	4b64      	ldr	r3, [pc, #400]	; (50a4 <store_file_packet+0x310>)
    4f12:	4798      	blx	r3
			add_state(DOWNLOADING);
    4f14:	2008      	movs	r0, #8
    4f16:	4b6a      	ldr	r3, [pc, #424]	; (50c0 <store_file_packet+0x32c>)
    4f18:	4798      	blx	r3
    4f1a:	e78e      	b.n	4e3a <store_file_packet+0xa6>
		add_state(CANCELED);
    4f1c:	2020      	movs	r0, #32
    4f1e:	4b68      	ldr	r3, [pc, #416]	; (50c0 <store_file_packet+0x32c>)
    4f20:	4798      	blx	r3
		printf("store_file_packet: error clearing sector protect at address %d \r\n", SIXTY_FOUR_KB);
    4f22:	4981      	ldr	r1, [pc, #516]	; (5128 <store_file_packet+0x394>)
    4f24:	4881      	ldr	r0, [pc, #516]	; (512c <store_file_packet+0x398>)
    4f26:	4b5f      	ldr	r3, [pc, #380]	; (50a4 <store_file_packet+0x310>)
    4f28:	4798      	blx	r3
    4f2a:	e7e3      	b.n	4ef4 <store_file_packet+0x160>
		add_state(CANCELED);
    4f2c:	2020      	movs	r0, #32
    4f2e:	4b64      	ldr	r3, [pc, #400]	; (50c0 <store_file_packet+0x32c>)
    4f30:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address);
    4f32:	4968      	ldr	r1, [pc, #416]	; (50d4 <store_file_packet+0x340>)
    4f34:	4875      	ldr	r0, [pc, #468]	; (510c <store_file_packet+0x378>)
    4f36:	4b5b      	ldr	r3, [pc, #364]	; (50a4 <store_file_packet+0x310>)
    4f38:	4798      	blx	r3
    4f3a:	e7db      	b.n	4ef4 <store_file_packet+0x160>
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 1));
    4f3c:	496c      	ldr	r1, [pc, #432]	; (50f0 <store_file_packet+0x35c>)
    4f3e:	4873      	ldr	r0, [pc, #460]	; (510c <store_file_packet+0x378>)
    4f40:	4b58      	ldr	r3, [pc, #352]	; (50a4 <store_file_packet+0x310>)
    4f42:	4798      	blx	r3
    4f44:	e7d6      	b.n	4ef4 <store_file_packet+0x160>
		add_state(CANCELED);
    4f46:	2020      	movs	r0, #32
    4f48:	4b5d      	ldr	r3, [pc, #372]	; (50c0 <store_file_packet+0x32c>)
    4f4a:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2));
    4f4c:	4969      	ldr	r1, [pc, #420]	; (50f4 <store_file_packet+0x360>)
    4f4e:	486f      	ldr	r0, [pc, #444]	; (510c <store_file_packet+0x378>)
    4f50:	4b54      	ldr	r3, [pc, #336]	; (50a4 <store_file_packet+0x310>)
    4f52:	4798      	blx	r3
    4f54:	e7ce      	b.n	4ef4 <store_file_packet+0x160>
		add_state(CANCELED);
    4f56:	2020      	movs	r0, #32
    4f58:	4b59      	ldr	r3, [pc, #356]	; (50c0 <store_file_packet+0x32c>)
    4f5a:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0));
    4f5c:	4966      	ldr	r1, [pc, #408]	; (50f8 <store_file_packet+0x364>)
    4f5e:	486b      	ldr	r0, [pc, #428]	; (510c <store_file_packet+0x378>)
    4f60:	4b50      	ldr	r3, [pc, #320]	; (50a4 <store_file_packet+0x310>)
    4f62:	4798      	blx	r3
    4f64:	e7c6      	b.n	4ef4 <store_file_packet+0x160>
		add_state(CANCELED);
    4f66:	2020      	movs	r0, #32
    4f68:	4b55      	ldr	r3, [pc, #340]	; (50c0 <store_file_packet+0x32c>)
    4f6a:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0));
    4f6c:	4963      	ldr	r1, [pc, #396]	; (50fc <store_file_packet+0x368>)
    4f6e:	4867      	ldr	r0, [pc, #412]	; (510c <store_file_packet+0x378>)
    4f70:	4b4c      	ldr	r3, [pc, #304]	; (50a4 <store_file_packet+0x310>)
    4f72:	4798      	blx	r3
    4f74:	e7be      	b.n	4ef4 <store_file_packet+0x160>
		add_state(CANCELED);
    4f76:	2020      	movs	r0, #32
    4f78:	4b51      	ldr	r3, [pc, #324]	; (50c0 <store_file_packet+0x32c>)
    4f7a:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1));
    4f7c:	4960      	ldr	r1, [pc, #384]	; (5100 <store_file_packet+0x36c>)
    4f7e:	4863      	ldr	r0, [pc, #396]	; (510c <store_file_packet+0x378>)
    4f80:	4b48      	ldr	r3, [pc, #288]	; (50a4 <store_file_packet+0x310>)
    4f82:	4798      	blx	r3
    4f84:	e7b6      	b.n	4ef4 <store_file_packet+0x160>
		add_state(CANCELED);
    4f86:	2020      	movs	r0, #32
    4f88:	4b4d      	ldr	r3, [pc, #308]	; (50c0 <store_file_packet+0x32c>)
    4f8a:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2));
    4f8c:	495d      	ldr	r1, [pc, #372]	; (5104 <store_file_packet+0x370>)
    4f8e:	485f      	ldr	r0, [pc, #380]	; (510c <store_file_packet+0x378>)
    4f90:	4b44      	ldr	r3, [pc, #272]	; (50a4 <store_file_packet+0x310>)
    4f92:	4798      	blx	r3
    4f94:	e7ae      	b.n	4ef4 <store_file_packet+0x160>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4), AT25DFX_BLOCK_SIZE_4KB);
    4f96:	2200      	movs	r2, #0
    4f98:	4965      	ldr	r1, [pc, #404]	; (5130 <store_file_packet+0x39c>)
    4f9a:	4850      	ldr	r0, [pc, #320]	; (50dc <store_file_packet+0x348>)
    4f9c:	4b53      	ldr	r3, [pc, #332]	; (50ec <store_file_packet+0x358>)
    4f9e:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4fa0:	2800      	cmp	r0, #0
    4fa2:	d115      	bne.n	4fd0 <store_file_packet+0x23c>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5), AT25DFX_BLOCK_SIZE_4KB);
    4fa4:	2200      	movs	r2, #0
    4fa6:	4963      	ldr	r1, [pc, #396]	; (5134 <store_file_packet+0x3a0>)
    4fa8:	484c      	ldr	r0, [pc, #304]	; (50dc <store_file_packet+0x348>)
    4faa:	4b50      	ldr	r3, [pc, #320]	; (50ec <store_file_packet+0x358>)
    4fac:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4fae:	2800      	cmp	r0, #0
    4fb0:	d116      	bne.n	4fe0 <store_file_packet+0x24c>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 6), AT25DFX_BLOCK_SIZE_4KB);
    4fb2:	2200      	movs	r2, #0
    4fb4:	4960      	ldr	r1, [pc, #384]	; (5138 <store_file_packet+0x3a4>)
    4fb6:	4849      	ldr	r0, [pc, #292]	; (50dc <store_file_packet+0x348>)
    4fb8:	4b4c      	ldr	r3, [pc, #304]	; (50ec <store_file_packet+0x358>)
    4fba:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4fbc:	2800      	cmp	r0, #0
    4fbe:	d017      	beq.n	4ff0 <store_file_packet+0x25c>
		add_state(CANCELED);
    4fc0:	2020      	movs	r0, #32
    4fc2:	4b3f      	ldr	r3, [pc, #252]	; (50c0 <store_file_packet+0x32c>)
    4fc4:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    4fc6:	4950      	ldr	r1, [pc, #320]	; (5108 <store_file_packet+0x374>)
    4fc8:	4850      	ldr	r0, [pc, #320]	; (510c <store_file_packet+0x378>)
    4fca:	4b36      	ldr	r3, [pc, #216]	; (50a4 <store_file_packet+0x310>)
    4fcc:	4798      	blx	r3
    4fce:	e791      	b.n	4ef4 <store_file_packet+0x160>
		add_state(CANCELED);
    4fd0:	2020      	movs	r0, #32
    4fd2:	4b3b      	ldr	r3, [pc, #236]	; (50c0 <store_file_packet+0x32c>)
    4fd4:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4));
    4fd6:	4956      	ldr	r1, [pc, #344]	; (5130 <store_file_packet+0x39c>)
    4fd8:	484c      	ldr	r0, [pc, #304]	; (510c <store_file_packet+0x378>)
    4fda:	4b32      	ldr	r3, [pc, #200]	; (50a4 <store_file_packet+0x310>)
    4fdc:	4798      	blx	r3
    4fde:	e789      	b.n	4ef4 <store_file_packet+0x160>
		add_state(CANCELED);
    4fe0:	2020      	movs	r0, #32
    4fe2:	4b37      	ldr	r3, [pc, #220]	; (50c0 <store_file_packet+0x32c>)
    4fe4:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5));
    4fe6:	4953      	ldr	r1, [pc, #332]	; (5134 <store_file_packet+0x3a0>)
    4fe8:	4848      	ldr	r0, [pc, #288]	; (510c <store_file_packet+0x378>)
    4fea:	4b2e      	ldr	r3, [pc, #184]	; (50a4 <store_file_packet+0x310>)
    4fec:	4798      	blx	r3
    4fee:	e781      	b.n	4ef4 <store_file_packet+0x160>
	at25dfx_chip_sleep(&at25dfx_chip);
    4ff0:	483a      	ldr	r0, [pc, #232]	; (50dc <store_file_packet+0x348>)
    4ff2:	4b52      	ldr	r3, [pc, #328]	; (513c <store_file_packet+0x3a8>)
    4ff4:	4798      	blx	r3
    4ff6:	e77d      	b.n	4ef4 <store_file_packet+0x160>
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    4ff8:	1b77      	subs	r7, r6, r5
    4ffa:	b2bf      	uxth	r7, r7
    4ffc:	e00f      	b.n	501e <store_file_packet+0x28a>
				if (buffer_cursor == (FLASH_ROW_SIZE - 1)) {
    4ffe:	2cff      	cmp	r4, #255	; 0xff
    5000:	d01f      	beq.n	5042 <store_file_packet+0x2ae>
			while (bytes_written < length) {
    5002:	0029      	movs	r1, r5
    5004:	42ae      	cmp	r6, r5
    5006:	d800      	bhi.n	500a <store_file_packet+0x276>
    5008:	e0a0      	b.n	514c <store_file_packet+0x3b8>
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    500a:	002b      	movs	r3, r5
    500c:	33ff      	adds	r3, #255	; 0xff
    500e:	429e      	cmp	r6, r3
    5010:	d9f2      	bls.n	4ff8 <store_file_packet+0x264>
    5012:	4653      	mov	r3, sl
    5014:	781a      	ldrb	r2, [r3, #0]
    5016:	2480      	movs	r4, #128	; 0x80
    5018:	0064      	lsls	r4, r4, #1
    501a:	1aa4      	subs	r4, r4, r2
    501c:	b2a7      	uxth	r7, r4
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    501e:	465b      	mov	r3, fp
    5020:	781c      	ldrb	r4, [r3, #0]
    5022:	464b      	mov	r3, r9
    5024:	18e0      	adds	r0, r4, r3
				unsigned int data_cursor = data + bytes_written;
    5026:	4441      	add	r1, r8
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    5028:	003a      	movs	r2, r7
    502a:	4b21      	ldr	r3, [pc, #132]	; (50b0 <store_file_packet+0x31c>)
    502c:	4798      	blx	r3
				bytes_written += num_bytes_to_buffer;
    502e:	19ed      	adds	r5, r5, r7
				buffer_cursor = buffer_cursor + num_bytes_to_buffer;
    5030:	19e4      	adds	r4, r4, r7
    5032:	b2e4      	uxtb	r4, r4
    5034:	465b      	mov	r3, fp
    5036:	701c      	strb	r4, [r3, #0]
				if (buffer_cursor == 0)
    5038:	2c00      	cmp	r4, #0
    503a:	d1e0      	bne.n	4ffe <store_file_packet+0x26a>
					buffer_cursor = (FLASH_ROW_SIZE - 1);
    503c:	22ff      	movs	r2, #255	; 0xff
    503e:	4b23      	ldr	r3, [pc, #140]	; (50cc <store_file_packet+0x338>)
    5040:	701a      	strb	r2, [r3, #0]
					status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, FLASH_ROW_SIZE);
    5042:	4b35      	ldr	r3, [pc, #212]	; (5118 <store_file_packet+0x384>)
    5044:	6819      	ldr	r1, [r3, #0]
    5046:	2380      	movs	r3, #128	; 0x80
    5048:	005b      	lsls	r3, r3, #1
    504a:	4a21      	ldr	r2, [pc, #132]	; (50d0 <store_file_packet+0x33c>)
    504c:	4823      	ldr	r0, [pc, #140]	; (50dc <store_file_packet+0x348>)
    504e:	4c3c      	ldr	r4, [pc, #240]	; (5140 <store_file_packet+0x3ac>)
    5050:	47a0      	blx	r4
					if (STATUS_OK != status_val) {
    5052:	2800      	cmp	r0, #0
    5054:	d112      	bne.n	507c <store_file_packet+0x2e8>
					buffer_cursor = 0;
    5056:	2200      	movs	r2, #0
    5058:	4b1c      	ldr	r3, [pc, #112]	; (50cc <store_file_packet+0x338>)
    505a:	701a      	strb	r2, [r3, #0]
					write_address += FLASH_ROW_SIZE;
    505c:	4a2e      	ldr	r2, [pc, #184]	; (5118 <store_file_packet+0x384>)
    505e:	6813      	ldr	r3, [r2, #0]
    5060:	3301      	adds	r3, #1
    5062:	33ff      	adds	r3, #255	; 0xff
    5064:	6013      	str	r3, [r2, #0]
					if (!crc_val)
    5066:	4b2e      	ldr	r3, [pc, #184]	; (5120 <store_file_packet+0x38c>)
    5068:	681b      	ldr	r3, [r3, #0]
    506a:	2b00      	cmp	r3, #0
    506c:	d10f      	bne.n	508e <store_file_packet+0x2fa>
    506e:	4a2c      	ldr	r2, [pc, #176]	; (5120 <store_file_packet+0x38c>)
    5070:	2180      	movs	r1, #128	; 0x80
    5072:	0049      	lsls	r1, r1, #1
    5074:	4816      	ldr	r0, [pc, #88]	; (50d0 <store_file_packet+0x33c>)
    5076:	4b33      	ldr	r3, [pc, #204]	; (5144 <store_file_packet+0x3b0>)
    5078:	4798      	blx	r3
    507a:	e7c2      	b.n	5002 <store_file_packet+0x26e>
						add_state(CANCELED);
    507c:	2020      	movs	r0, #32
    507e:	4b10      	ldr	r3, [pc, #64]	; (50c0 <store_file_packet+0x32c>)
    5080:	4798      	blx	r3
						printf("store_file_packet: error writing row at address %d \r\n", write_address);
    5082:	4b25      	ldr	r3, [pc, #148]	; (5118 <store_file_packet+0x384>)
    5084:	6819      	ldr	r1, [r3, #0]
    5086:	4830      	ldr	r0, [pc, #192]	; (5148 <store_file_packet+0x3b4>)
    5088:	4b06      	ldr	r3, [pc, #24]	; (50a4 <store_file_packet+0x310>)
    508a:	4798      	blx	r3
						return;
    508c:	e69d      	b.n	4dca <store_file_packet+0x36>
						crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &crc_val);
    508e:	4a24      	ldr	r2, [pc, #144]	; (5120 <store_file_packet+0x38c>)
    5090:	2180      	movs	r1, #128	; 0x80
    5092:	0049      	lsls	r1, r1, #1
    5094:	480e      	ldr	r0, [pc, #56]	; (50d0 <store_file_packet+0x33c>)
    5096:	4b2b      	ldr	r3, [pc, #172]	; (5144 <store_file_packet+0x3b0>)
    5098:	4798      	blx	r3
    509a:	e7b2      	b.n	5002 <store_file_packet+0x26e>
    509c:	20000614 	.word	0x20000614
    50a0:	00012098 	.word	0x00012098
    50a4:	00010319 	.word	0x00010319
    50a8:	00012078 	.word	0x00012078
    50ac:	00010435 	.word	0x00010435
    50b0:	00010181 	.word	0x00010181
    50b4:	000120f4 	.word	0x000120f4
    50b8:	00012110 	.word	0x00012110
    50bc:	00004939 	.word	0x00004939
    50c0:	00004949 	.word	0x00004949
    50c4:	2000020c 	.word	0x2000020c
    50c8:	20000210 	.word	0x20000210
    50cc:	20000740 	.word	0x20000740
    50d0:	20000748 	.word	0x20000748
    50d4:	0003fffc 	.word	0x0003fffc
    50d8:	00012130 	.word	0x00012130
    50dc:	2000060c 	.word	0x2000060c
    50e0:	000060b9 	.word	0x000060b9
    50e4:	000056e5 	.word	0x000056e5
    50e8:	00005f3d 	.word	0x00005f3d
    50ec:	00005d25 	.word	0x00005d25
    50f0:	0004fffb 	.word	0x0004fffb
    50f4:	0005fffa 	.word	0x0005fffa
    50f8:	0006fff9 	.word	0x0006fff9
    50fc:	00067ff9 	.word	0x00067ff9
    5100:	00068ff8 	.word	0x00068ff8
    5104:	00069ff7 	.word	0x00069ff7
    5108:	0006aff6 	.word	0x0006aff6
    510c:	000121b0 	.word	0x000121b0
    5110:	00012148 	.word	0x00012148
    5114:	20000214 	.word	0x20000214
    5118:	2000073c 	.word	0x2000073c
    511c:	20000608 	.word	0x20000608
    5120:	20000204 	.word	0x20000204
    5124:	000121ec 	.word	0x000121ec
    5128:	0000ffff 	.word	0x0000ffff
    512c:	0001216c 	.word	0x0001216c
    5130:	0006bff5 	.word	0x0006bff5
    5134:	0006cff4 	.word	0x0006cff4
    5138:	0006dff3 	.word	0x0006dff3
    513c:	0000602d 	.word	0x0000602d
    5140:	000058e9 	.word	0x000058e9
    5144:	0000c839 	.word	0x0000c839
    5148:	000121fc 	.word	0x000121fc
			total_bytes_written += bytes_written;
    514c:	4b2d      	ldr	r3, [pc, #180]	; (5204 <store_file_packet+0x470>)
    514e:	681a      	ldr	r2, [r3, #0]
    5150:	4694      	mov	ip, r2
    5152:	4461      	add	r1, ip
    5154:	6019      	str	r1, [r3, #0]
			received_file_size += length;
    5156:	4c2c      	ldr	r4, [pc, #176]	; (5208 <store_file_packet+0x474>)
    5158:	6823      	ldr	r3, [r4, #0]
    515a:	18f1      	adds	r1, r6, r3
    515c:	6021      	str	r1, [r4, #0]
			printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    515e:	4d2b      	ldr	r5, [pc, #172]	; (520c <store_file_packet+0x478>)
    5160:	682a      	ldr	r2, [r5, #0]
    5162:	482b      	ldr	r0, [pc, #172]	; (5210 <store_file_packet+0x47c>)
    5164:	4b2b      	ldr	r3, [pc, #172]	; (5214 <store_file_packet+0x480>)
    5166:	4798      	blx	r3
			if (received_file_size >= http_file_size) {
    5168:	6822      	ldr	r2, [r4, #0]
    516a:	682b      	ldr	r3, [r5, #0]
    516c:	429a      	cmp	r2, r3
    516e:	d200      	bcs.n	5172 <store_file_packet+0x3de>
    5170:	e62b      	b.n	4dca <store_file_packet+0x36>
				status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, buffer_cursor);
    5172:	4b29      	ldr	r3, [pc, #164]	; (5218 <store_file_packet+0x484>)
    5174:	781b      	ldrb	r3, [r3, #0]
    5176:	4a29      	ldr	r2, [pc, #164]	; (521c <store_file_packet+0x488>)
    5178:	6811      	ldr	r1, [r2, #0]
    517a:	4a29      	ldr	r2, [pc, #164]	; (5220 <store_file_packet+0x48c>)
    517c:	4829      	ldr	r0, [pc, #164]	; (5224 <store_file_packet+0x490>)
    517e:	4c2a      	ldr	r4, [pc, #168]	; (5228 <store_file_packet+0x494>)
    5180:	47a0      	blx	r4
				if (STATUS_OK != status_val) {
    5182:	2800      	cmp	r0, #0
    5184:	d11e      	bne.n	51c4 <store_file_packet+0x430>
				crc32_recalculate(write_row_buffer, buffer_cursor, &crc_val);
    5186:	4c29      	ldr	r4, [pc, #164]	; (522c <store_file_packet+0x498>)
    5188:	4b23      	ldr	r3, [pc, #140]	; (5218 <store_file_packet+0x484>)
    518a:	7819      	ldrb	r1, [r3, #0]
    518c:	0022      	movs	r2, r4
    518e:	4824      	ldr	r0, [pc, #144]	; (5220 <store_file_packet+0x48c>)
    5190:	4b27      	ldr	r3, [pc, #156]	; (5230 <store_file_packet+0x49c>)
    5192:	4798      	blx	r3
				printf("store_file_packet: file downloaded successfully.\r\n");
    5194:	4827      	ldr	r0, [pc, #156]	; (5234 <store_file_packet+0x4a0>)
    5196:	4b28      	ldr	r3, [pc, #160]	; (5238 <store_file_packet+0x4a4>)
    5198:	4798      	blx	r3
				if (verify_flash(crc_val)) {
    519a:	6820      	ldr	r0, [r4, #0]
    519c:	4b27      	ldr	r3, [pc, #156]	; (523c <store_file_packet+0x4a8>)
    519e:	4798      	blx	r3
    51a0:	2800      	cmp	r0, #0
    51a2:	d018      	beq.n	51d6 <store_file_packet+0x442>
					printf("store_file_packet: flash successfully written with no errors\r\n");
    51a4:	4826      	ldr	r0, [pc, #152]	; (5240 <store_file_packet+0x4ac>)
    51a6:	4b24      	ldr	r3, [pc, #144]	; (5238 <store_file_packet+0x4a4>)
    51a8:	4798      	blx	r3
				if (crc_val != new_firmware_checksum) {
    51aa:	4b20      	ldr	r3, [pc, #128]	; (522c <store_file_packet+0x498>)
    51ac:	681a      	ldr	r2, [r3, #0]
    51ae:	4b25      	ldr	r3, [pc, #148]	; (5244 <store_file_packet+0x4b0>)
    51b0:	6819      	ldr	r1, [r3, #0]
    51b2:	428a      	cmp	r2, r1
    51b4:	d016      	beq.n	51e4 <store_file_packet+0x450>
					printf("store_file_packet: file checksums don't match.\r\n Expected checksum %04x\r\n Received checksum %04x\r\n", new_firmware_checksum, crc_val);
    51b6:	4824      	ldr	r0, [pc, #144]	; (5248 <store_file_packet+0x4b4>)
    51b8:	4b16      	ldr	r3, [pc, #88]	; (5214 <store_file_packet+0x480>)
    51ba:	4798      	blx	r3
					add_state(CANCELED);
    51bc:	2020      	movs	r0, #32
    51be:	4b23      	ldr	r3, [pc, #140]	; (524c <store_file_packet+0x4b8>)
    51c0:	4798      	blx	r3
					return;
    51c2:	e602      	b.n	4dca <store_file_packet+0x36>
					add_state(CANCELED);
    51c4:	2020      	movs	r0, #32
    51c6:	4b21      	ldr	r3, [pc, #132]	; (524c <store_file_packet+0x4b8>)
    51c8:	4798      	blx	r3
					printf("store_file_packet: error writing row at address %d \r\n", write_address);
    51ca:	4b14      	ldr	r3, [pc, #80]	; (521c <store_file_packet+0x488>)
    51cc:	6819      	ldr	r1, [r3, #0]
    51ce:	4820      	ldr	r0, [pc, #128]	; (5250 <store_file_packet+0x4bc>)
    51d0:	4b10      	ldr	r3, [pc, #64]	; (5214 <store_file_packet+0x480>)
    51d2:	4798      	blx	r3
					return;
    51d4:	e5f9      	b.n	4dca <store_file_packet+0x36>
					printf("store_file_packet: flash corrupted.\r\n");
    51d6:	481f      	ldr	r0, [pc, #124]	; (5254 <store_file_packet+0x4c0>)
    51d8:	4b17      	ldr	r3, [pc, #92]	; (5238 <store_file_packet+0x4a4>)
    51da:	4798      	blx	r3
					add_state(CANCELED);
    51dc:	2020      	movs	r0, #32
    51de:	4b1b      	ldr	r3, [pc, #108]	; (524c <store_file_packet+0x4b8>)
    51e0:	4798      	blx	r3
					return;
    51e2:	e5f2      	b.n	4dca <store_file_packet+0x36>
					update_boot_status();
    51e4:	4b1c      	ldr	r3, [pc, #112]	; (5258 <store_file_packet+0x4c4>)
    51e6:	4798      	blx	r3
					write_firmware_metadata(FW1_ADDR, new_firmware_version, new_firmware_checksum, received_file_size);
    51e8:	4b07      	ldr	r3, [pc, #28]	; (5208 <store_file_packet+0x474>)
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	4a15      	ldr	r2, [pc, #84]	; (5244 <store_file_packet+0x4b0>)
    51ee:	6812      	ldr	r2, [r2, #0]
    51f0:	491a      	ldr	r1, [pc, #104]	; (525c <store_file_packet+0x4c8>)
    51f2:	8809      	ldrh	r1, [r1, #0]
    51f4:	2080      	movs	r0, #128	; 0x80
    51f6:	0180      	lsls	r0, r0, #6
    51f8:	4c19      	ldr	r4, [pc, #100]	; (5260 <store_file_packet+0x4cc>)
    51fa:	47a0      	blx	r4
					add_state(COMPLETED);
    51fc:	2010      	movs	r0, #16
    51fe:	4b13      	ldr	r3, [pc, #76]	; (524c <store_file_packet+0x4b8>)
    5200:	4798      	blx	r3
				return;
    5202:	e5e2      	b.n	4dca <store_file_packet+0x36>
    5204:	20000608 	.word	0x20000608
    5208:	20000214 	.word	0x20000214
    520c:	20000208 	.word	0x20000208
    5210:	00012234 	.word	0x00012234
    5214:	00010319 	.word	0x00010319
    5218:	20000740 	.word	0x20000740
    521c:	2000073c 	.word	0x2000073c
    5220:	20000748 	.word	0x20000748
    5224:	2000060c 	.word	0x2000060c
    5228:	000058e9 	.word	0x000058e9
    522c:	20000204 	.word	0x20000204
    5230:	0000c839 	.word	0x0000c839
    5234:	00012268 	.word	0x00012268
    5238:	00010435 	.word	0x00010435
    523c:	00004c9d 	.word	0x00004c9d
    5240:	0001229c 	.word	0x0001229c
    5244:	2000020c 	.word	0x2000020c
    5248:	00012304 	.word	0x00012304
    524c:	00004949 	.word	0x00004949
    5250:	000121fc 	.word	0x000121fc
    5254:	000122dc 	.word	0x000122dc
    5258:	000049e5 	.word	0x000049e5
    525c:	20000210 	.word	0x20000210
    5260:	00004989 	.word	0x00004989

00005264 <http_client_callback>:
{
    5264:	b510      	push	{r4, lr}
    5266:	0014      	movs	r4, r2
	switch (evt) {
    5268:	2904      	cmp	r1, #4
    526a:	d806      	bhi.n	527a <http_client_callback+0x16>
    526c:	0089      	lsls	r1, r1, #2
    526e:	4b21      	ldr	r3, [pc, #132]	; (52f4 <http_client_callback+0x90>)
    5270:	585b      	ldr	r3, [r3, r1]
    5272:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    5274:	4820      	ldr	r0, [pc, #128]	; (52f8 <http_client_callback+0x94>)
    5276:	4b21      	ldr	r3, [pc, #132]	; (52fc <http_client_callback+0x98>)
    5278:	4798      	blx	r3
}
    527a:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    527c:	4820      	ldr	r0, [pc, #128]	; (5300 <http_client_callback+0x9c>)
    527e:	4b1f      	ldr	r3, [pc, #124]	; (52fc <http_client_callback+0x98>)
    5280:	4798      	blx	r3
		add_state(GET_REQUESTED);
    5282:	2004      	movs	r0, #4
    5284:	4b1f      	ldr	r3, [pc, #124]	; (5304 <http_client_callback+0xa0>)
    5286:	4798      	blx	r3
		break;
    5288:	e7f7      	b.n	527a <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    528a:	8811      	ldrh	r1, [r2, #0]
    528c:	6852      	ldr	r2, [r2, #4]
    528e:	481e      	ldr	r0, [pc, #120]	; (5308 <http_client_callback+0xa4>)
    5290:	4b1e      	ldr	r3, [pc, #120]	; (530c <http_client_callback+0xa8>)
    5292:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    5294:	8823      	ldrh	r3, [r4, #0]
    5296:	2bc8      	cmp	r3, #200	; 0xc8
    5298:	d10c      	bne.n	52b4 <http_client_callback+0x50>
			http_file_size = data->recv_response.content_length;
    529a:	6861      	ldr	r1, [r4, #4]
    529c:	4b1c      	ldr	r3, [pc, #112]	; (5310 <http_client_callback+0xac>)
    529e:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    52a0:	2200      	movs	r2, #0
    52a2:	4b1c      	ldr	r3, [pc, #112]	; (5314 <http_client_callback+0xb0>)
    52a4:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MTU_HTTP)
    52a6:	4b1c      	ldr	r3, [pc, #112]	; (5318 <http_client_callback+0xb4>)
    52a8:	4299      	cmp	r1, r3
    52aa:	d8e6      	bhi.n	527a <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    52ac:	68a0      	ldr	r0, [r4, #8]
    52ae:	4b1b      	ldr	r3, [pc, #108]	; (531c <http_client_callback+0xb8>)
    52b0:	4798      	blx	r3
    52b2:	e7e2      	b.n	527a <http_client_callback+0x16>
			add_state(CANCELED);
    52b4:	2020      	movs	r0, #32
    52b6:	4b13      	ldr	r3, [pc, #76]	; (5304 <http_client_callback+0xa0>)
    52b8:	4798      	blx	r3
			return;
    52ba:	e7de      	b.n	527a <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    52bc:	6811      	ldr	r1, [r2, #0]
    52be:	6850      	ldr	r0, [r2, #4]
    52c0:	4b16      	ldr	r3, [pc, #88]	; (531c <http_client_callback+0xb8>)
    52c2:	4798      	blx	r3
		break;
    52c4:	e7d9      	b.n	527a <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    52c6:	6811      	ldr	r1, [r2, #0]
    52c8:	4815      	ldr	r0, [pc, #84]	; (5320 <http_client_callback+0xbc>)
    52ca:	4b10      	ldr	r3, [pc, #64]	; (530c <http_client_callback+0xa8>)
    52cc:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    52ce:	6823      	ldr	r3, [r4, #0]
    52d0:	330b      	adds	r3, #11
    52d2:	d1d2      	bne.n	527a <http_client_callback+0x16>
	return (down_state & mask) != 0;
    52d4:	4b13      	ldr	r3, [pc, #76]	; (5324 <http_client_callback+0xc0>)
    52d6:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(DOWNLOADING))
    52d8:	071b      	lsls	r3, r3, #28
    52da:	d407      	bmi.n	52ec <http_client_callback+0x88>
	return (down_state & mask) != 0;
    52dc:	4b11      	ldr	r3, [pc, #68]	; (5324 <http_client_callback+0xc0>)
    52de:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED))
    52e0:	075b      	lsls	r3, r3, #29
    52e2:	d5ca      	bpl.n	527a <http_client_callback+0x16>
				clear_state(GET_REQUESTED);
    52e4:	2004      	movs	r0, #4
    52e6:	4b10      	ldr	r3, [pc, #64]	; (5328 <http_client_callback+0xc4>)
    52e8:	4798      	blx	r3
    52ea:	e7c6      	b.n	527a <http_client_callback+0x16>
				clear_state(DOWNLOADING);
    52ec:	2008      	movs	r0, #8
    52ee:	4b0e      	ldr	r3, [pc, #56]	; (5328 <http_client_callback+0xc4>)
    52f0:	4798      	blx	r3
    52f2:	e7f3      	b.n	52dc <http_client_callback+0x78>
    52f4:	00011cb8 	.word	0x00011cb8
    52f8:	00011e1c 	.word	0x00011e1c
    52fc:	00010435 	.word	0x00010435
    5300:	00011e54 	.word	0x00011e54
    5304:	00004949 	.word	0x00004949
    5308:	00011e80 	.word	0x00011e80
    530c:	00010319 	.word	0x00010319
    5310:	20000208 	.word	0x20000208
    5314:	20000214 	.word	0x20000214
    5318:	000005dc 	.word	0x000005dc
    531c:	00004d95 	.word	0x00004d95
    5320:	00011ebc 	.word	0x00011ebc
    5324:	20000614 	.word	0x20000614
    5328:	00004939 	.word	0x00004939

0000532c <configure_http_client>:
{
    532c:	b500      	push	{lr}
    532e:	b089      	sub	sp, #36	; 0x24
	http_client_get_config_defaults(&httpc_conf);
    5330:	a801      	add	r0, sp, #4
    5332:	4b0b      	ldr	r3, [pc, #44]	; (5360 <configure_http_client+0x34>)
    5334:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MTU_HTTP;
    5336:	4b0b      	ldr	r3, [pc, #44]	; (5364 <configure_http_client+0x38>)
    5338:	9305      	str	r3, [sp, #20]
	httpc_conf.timer_inst = &swt_module_inst;
    533a:	4b0b      	ldr	r3, [pc, #44]	; (5368 <configure_http_client+0x3c>)
    533c:	9302      	str	r3, [sp, #8]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    533e:	a901      	add	r1, sp, #4
    5340:	480a      	ldr	r0, [pc, #40]	; (536c <configure_http_client+0x40>)
    5342:	4b0b      	ldr	r3, [pc, #44]	; (5370 <configure_http_client+0x44>)
    5344:	4798      	blx	r3
    5346:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    5348:	db05      	blt.n	5356 <configure_http_client+0x2a>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    534a:	490a      	ldr	r1, [pc, #40]	; (5374 <configure_http_client+0x48>)
    534c:	4807      	ldr	r0, [pc, #28]	; (536c <configure_http_client+0x40>)
    534e:	4b0a      	ldr	r3, [pc, #40]	; (5378 <configure_http_client+0x4c>)
    5350:	4798      	blx	r3
}
    5352:	b009      	add	sp, #36	; 0x24
    5354:	bd00      	pop	{pc}
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    5356:	4809      	ldr	r0, [pc, #36]	; (537c <configure_http_client+0x50>)
    5358:	4b09      	ldr	r3, [pc, #36]	; (5380 <configure_http_client+0x54>)
    535a:	4798      	blx	r3
    535c:	e7fe      	b.n	535c <configure_http_client+0x30>
    535e:	46c0      	nop			; (mov r8, r8)
    5360:	00006a21 	.word	0x00006a21
    5364:	000005dc 	.word	0x000005dc
    5368:	20000354 	.word	0x20000354
    536c:	20000618 	.word	0x20000618
    5370:	00006a49 	.word	0x00006a49
    5374:	00005265 	.word	0x00005265
    5378:	00006b3d 	.word	0x00006b3d
    537c:	00011ccc 	.word	0x00011ccc
    5380:	00010319 	.word	0x00010319

00005384 <get_default_wifi_config>:
	sw_timer_enable(&swt_module_inst);
}

void get_default_wifi_config(wifi_config *wifi_configuration)
{
	wifi_configuration->ssid = "AirPennNet-Device";
    5384:	4b05      	ldr	r3, [pc, #20]	; (539c <get_default_wifi_config+0x18>)
    5386:	6003      	str	r3, [r0, #0]
	wifi_configuration->auth_type = M2M_WIFI_SEC_WPA_PSK;
    5388:	2302      	movs	r3, #2
    538a:	6043      	str	r3, [r0, #4]
	wifi_configuration->password = "penn1740wifi";
    538c:	4b04      	ldr	r3, [pc, #16]	; (53a0 <get_default_wifi_config+0x1c>)
    538e:	6083      	str	r3, [r0, #8]
	wifi_configuration->firmware_header_http_address = "http://www.seas.upenn.edu/~warcher/ese516/metadata.bin";
    5390:	4b04      	ldr	r3, [pc, #16]	; (53a4 <get_default_wifi_config+0x20>)
    5392:	60c3      	str	r3, [r0, #12]
	wifi_configuration->firmware_http_address = "http://www.seas.upenn.edu/~warcher/ese516/test-firmware.bin";
    5394:	4b04      	ldr	r3, [pc, #16]	; (53a8 <get_default_wifi_config+0x24>)
    5396:	6103      	str	r3, [r0, #16]
}
    5398:	4770      	bx	lr
    539a:	46c0      	nop			; (mov r8, r8)
    539c:	00011978 	.word	0x00011978
    53a0:	0001198c 	.word	0x0001198c
    53a4:	00011da8 	.word	0x00011da8
    53a8:	00011de0 	.word	0x00011de0

000053ac <configure_wifi_module>:
void configure_wifi_module(wifi_config *wifi_configuration)
{
    53ac:	b530      	push	{r4, r5, lr}
    53ae:	b08b      	sub	sp, #44	; 0x2c
    53b0:	0004      	movs	r4, r0
	down_state = NOT_READY;
    53b2:	2200      	movs	r2, #0
    53b4:	4b24      	ldr	r3, [pc, #144]	; (5448 <configure_wifi_module+0x9c>)
    53b6:	801a      	strh	r2, [r3, #0]
	add_state(NOT_CHECKED);
    53b8:	2040      	movs	r0, #64	; 0x40
    53ba:	4d24      	ldr	r5, [pc, #144]	; (544c <configure_wifi_module+0xa0>)
    53bc:	47a8      	blx	r5
	init_state();
	add_state(STORAGE_READY);
    53be:	2001      	movs	r0, #1
    53c0:	47a8      	blx	r5
	sw_timer_get_config_defaults(&swt_conf);
    53c2:	a803      	add	r0, sp, #12
    53c4:	4b22      	ldr	r3, [pc, #136]	; (5450 <configure_wifi_module+0xa4>)
    53c6:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    53c8:	4d22      	ldr	r5, [pc, #136]	; (5454 <configure_wifi_module+0xa8>)
    53ca:	a903      	add	r1, sp, #12
    53cc:	0028      	movs	r0, r5
    53ce:	4b22      	ldr	r3, [pc, #136]	; (5458 <configure_wifi_module+0xac>)
    53d0:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    53d2:	0028      	movs	r0, r5
    53d4:	4b21      	ldr	r3, [pc, #132]	; (545c <configure_wifi_module+0xb0>)
    53d6:	4798      	blx	r3
	configure_timer();
	configure_http_client();
    53d8:	4b21      	ldr	r3, [pc, #132]	; (5460 <configure_wifi_module+0xb4>)
    53da:	4798      	blx	r3
	nm_bsp_init();
    53dc:	4b21      	ldr	r3, [pc, #132]	; (5464 <configure_wifi_module+0xb8>)
    53de:	4798      	blx	r3

	tstrWifiInitParam wifi_params;
	memset((uint8_t *)&wifi_params, 0, sizeof(tstrWifiInitParam));
    53e0:	2218      	movs	r2, #24
    53e2:	2100      	movs	r1, #0
    53e4:	a804      	add	r0, sp, #16
    53e6:	4b20      	ldr	r3, [pc, #128]	; (5468 <configure_wifi_module+0xbc>)
    53e8:	4798      	blx	r3
	wifi_params.pfAppWifiCb = wifi_callback;
    53ea:	4b20      	ldr	r3, [pc, #128]	; (546c <configure_wifi_module+0xc0>)
    53ec:	9304      	str	r3, [sp, #16]
	int8_t ret = m2m_wifi_init(&wifi_params); // NOTE: m2m = machine to machine
    53ee:	a804      	add	r0, sp, #16
    53f0:	4b1f      	ldr	r3, [pc, #124]	; (5470 <configure_wifi_module+0xc4>)
    53f2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    53f4:	2800      	cmp	r0, #0
    53f6:	d11c      	bne.n	5432 <configure_wifi_module+0x86>
		printf("failed to initialize wifi parameters\r\n");
		return 0;
	}

	socketInit();
    53f8:	4b1e      	ldr	r3, [pc, #120]	; (5474 <configure_wifi_module+0xc8>)
    53fa:	4798      	blx	r3
	registerSocketCallback(socket_callback, resolve_cb);
    53fc:	491e      	ldr	r1, [pc, #120]	; (5478 <configure_wifi_module+0xcc>)
    53fe:	481f      	ldr	r0, [pc, #124]	; (547c <configure_wifi_module+0xd0>)
    5400:	4b1f      	ldr	r3, [pc, #124]	; (5480 <configure_wifi_module+0xd4>)
    5402:	4798      	blx	r3
	printf("--- Welcome to ATWINC 1500 Connection Test ---\r\n");
    5404:	481f      	ldr	r0, [pc, #124]	; (5484 <configure_wifi_module+0xd8>)
    5406:	4b20      	ldr	r3, [pc, #128]	; (5488 <configure_wifi_module+0xdc>)
    5408:	4798      	blx	r3
	printf("main: connecting to WiFi AP %s...\r\n", wifi_configuration->ssid);
    540a:	6821      	ldr	r1, [r4, #0]
    540c:	481f      	ldr	r0, [pc, #124]	; (548c <configure_wifi_module+0xe0>)
    540e:	4b20      	ldr	r3, [pc, #128]	; (5490 <configure_wifi_module+0xe4>)
    5410:	4798      	blx	r3
	ret = m2m_wifi_connect(wifi_configuration->ssid, strlen(wifi_configuration->ssid), wifi_configuration->auth_type, wifi_configuration->password, M2M_WIFI_CH_ALL);
    5412:	6825      	ldr	r5, [r4, #0]
    5414:	0028      	movs	r0, r5
    5416:	4b1f      	ldr	r3, [pc, #124]	; (5494 <configure_wifi_module+0xe8>)
    5418:	4798      	blx	r3
    541a:	7922      	ldrb	r2, [r4, #4]
    541c:	b2c1      	uxtb	r1, r0
    541e:	23ff      	movs	r3, #255	; 0xff
    5420:	9300      	str	r3, [sp, #0]
    5422:	68a3      	ldr	r3, [r4, #8]
    5424:	0028      	movs	r0, r5
    5426:	4d1c      	ldr	r5, [pc, #112]	; (5498 <configure_wifi_module+0xec>)
    5428:	47a8      	blx	r5
	if (M2M_SUCCESS == ret) {
    542a:	2800      	cmp	r0, #0
    542c:	d005      	beq.n	543a <configure_wifi_module+0x8e>
		printf("successfully connected\r\n");
		current_wifi_config = wifi_configuration;
	}
}
    542e:	b00b      	add	sp, #44	; 0x2c
    5430:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize wifi parameters\r\n");
    5432:	481a      	ldr	r0, [pc, #104]	; (549c <configure_wifi_module+0xf0>)
    5434:	4b14      	ldr	r3, [pc, #80]	; (5488 <configure_wifi_module+0xdc>)
    5436:	4798      	blx	r3
    5438:	e7f9      	b.n	542e <configure_wifi_module+0x82>
		printf("successfully connected\r\n");
    543a:	4819      	ldr	r0, [pc, #100]	; (54a0 <configure_wifi_module+0xf4>)
    543c:	4b12      	ldr	r3, [pc, #72]	; (5488 <configure_wifi_module+0xdc>)
    543e:	4798      	blx	r3
		current_wifi_config = wifi_configuration;
    5440:	4b18      	ldr	r3, [pc, #96]	; (54a4 <configure_wifi_module+0xf8>)
    5442:	601c      	str	r4, [r3, #0]
    5444:	e7f3      	b.n	542e <configure_wifi_module+0x82>
    5446:	46c0      	nop			; (mov r8, r8)
    5448:	20000614 	.word	0x20000614
    544c:	00004949 	.word	0x00004949
    5450:	00007a99 	.word	0x00007a99
    5454:	20000354 	.word	0x20000354
    5458:	00007aa5 	.word	0x00007aa5
    545c:	00007b51 	.word	0x00007b51
    5460:	0000532d 	.word	0x0000532d
    5464:	00009691 	.word	0x00009691
    5468:	000101b7 	.word	0x000101b7
    546c:	00004bcd 	.word	0x00004bcd
    5470:	0000a5f1 	.word	0x0000a5f1
    5474:	0000c239 	.word	0x0000c239
    5478:	00004ad5 	.word	0x00004ad5
    547c:	00004ac9 	.word	0x00004ac9
    5480:	0000c2b9 	.word	0x0000c2b9
    5484:	00011d3c 	.word	0x00011d3c
    5488:	00010435 	.word	0x00010435
    548c:	00011d6c 	.word	0x00011d6c
    5490:	00010319 	.word	0x00010319
    5494:	0001067b 	.word	0x0001067b
    5498:	0000a9dd 	.word	0x0000a9dd
    549c:	00011d14 	.word	0x00011d14
    54a0:	00011d90 	.word	0x00011d90
    54a4:	20000744 	.word	0x20000744

000054a8 <deconfigure_wifi_module>:

void deconfigure_wifi_module() {
    54a8:	b510      	push	{r4, lr}
	socketDeinit();
    54aa:	4b09      	ldr	r3, [pc, #36]	; (54d0 <deconfigure_wifi_module+0x28>)
    54ac:	4798      	blx	r3
	http_client_unregister_callback(&http_client_module_inst);
    54ae:	4c09      	ldr	r4, [pc, #36]	; (54d4 <deconfigure_wifi_module+0x2c>)
    54b0:	0020      	movs	r0, r4
    54b2:	4b09      	ldr	r3, [pc, #36]	; (54d8 <deconfigure_wifi_module+0x30>)
    54b4:	4798      	blx	r3
	http_client_close(&http_client_module_inst);
    54b6:	0020      	movs	r0, r4
    54b8:	4b08      	ldr	r3, [pc, #32]	; (54dc <deconfigure_wifi_module+0x34>)
    54ba:	4798      	blx	r3
	http_client_deinit(&http_client_module_inst);
    54bc:	0020      	movs	r0, r4
    54be:	4b08      	ldr	r3, [pc, #32]	; (54e0 <deconfigure_wifi_module+0x38>)
    54c0:	4798      	blx	r3
	m2m_wifi_deinit(0);
    54c2:	2000      	movs	r0, #0
    54c4:	4b07      	ldr	r3, [pc, #28]	; (54e4 <deconfigure_wifi_module+0x3c>)
    54c6:	4798      	blx	r3
	nm_bsp_deinit();
    54c8:	4b07      	ldr	r3, [pc, #28]	; (54e8 <deconfigure_wifi_module+0x40>)
    54ca:	4798      	blx	r3
}
    54cc:	bd10      	pop	{r4, pc}
    54ce:	46c0      	nop			; (mov r8, r8)
    54d0:	0000c27d 	.word	0x0000c27d
    54d4:	20000618 	.word	0x20000618
    54d8:	00006b4d 	.word	0x00006b4d
    54dc:	00006c79 	.word	0x00006c79
    54e0:	00006afd 	.word	0x00006afd
    54e4:	0000a725 	.word	0x0000a725
    54e8:	00009621 	.word	0x00009621

000054ec <check_for_update>:

bool check_for_update()
{
    54ec:	b570      	push	{r4, r5, r6, lr}
	m2m_wifi_request_dhcp_client();
    54ee:	4b0e      	ldr	r3, [pc, #56]	; (5528 <check_for_update+0x3c>)
    54f0:	4798      	blx	r3
	return (down_state & mask) != 0;
    54f2:	4b0e      	ldr	r3, [pc, #56]	; (552c <check_for_update+0x40>)
    54f4:	881b      	ldrh	r3, [r3, #0]
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    54f6:	2230      	movs	r2, #48	; 0x30
    54f8:	421a      	tst	r2, r3
    54fa:	d10b      	bne.n	5514 <check_for_update+0x28>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    54fc:	4e0c      	ldr	r6, [pc, #48]	; (5530 <check_for_update+0x44>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    54fe:	4c0d      	ldr	r4, [pc, #52]	; (5534 <check_for_update+0x48>)
    5500:	4d0d      	ldr	r5, [pc, #52]	; (5538 <check_for_update+0x4c>)
		m2m_wifi_handle_events(NULL);
    5502:	2000      	movs	r0, #0
    5504:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    5506:	0020      	movs	r0, r4
    5508:	47a8      	blx	r5
	return (down_state & mask) != 0;
    550a:	4b08      	ldr	r3, [pc, #32]	; (552c <check_for_update+0x40>)
    550c:	881b      	ldrh	r3, [r3, #0]
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    550e:	2230      	movs	r2, #48	; 0x30
    5510:	421a      	tst	r2, r3
    5512:	d0f6      	beq.n	5502 <check_for_update+0x16>
	}
	if (is_state_set(UPDATE_AVAILABLE)) {
		clear_state(COMPLETED);
		return true;
	} else {
		return false;
    5514:	2000      	movs	r0, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    5516:	061b      	lsls	r3, r3, #24
    5518:	d400      	bmi.n	551c <check_for_update+0x30>
	}
}
    551a:	bd70      	pop	{r4, r5, r6, pc}
		clear_state(COMPLETED);
    551c:	3010      	adds	r0, #16
    551e:	4b07      	ldr	r3, [pc, #28]	; (553c <check_for_update+0x50>)
    5520:	4798      	blx	r3
		return true;
    5522:	2001      	movs	r0, #1
    5524:	e7f9      	b.n	551a <check_for_update+0x2e>
    5526:	46c0      	nop			; (mov r8, r8)
    5528:	0000a9f9 	.word	0x0000a9f9
    552c:	20000614 	.word	0x20000614
    5530:	0000a741 	.word	0x0000a741
    5534:	20000354 	.word	0x20000354
    5538:	00007be9 	.word	0x00007be9
    553c:	00004939 	.word	0x00004939

00005540 <download_firmware>:
bool download_firmware()
{
    5540:	b570      	push	{r4, r5, r6, lr}
	return (down_state & mask) != 0;
    5542:	4b11      	ldr	r3, [pc, #68]	; (5588 <download_firmware+0x48>)
    5544:	881b      	ldrh	r3, [r3, #0]
		if (is_state_set(COMPLETED))
			return true;
		else
			return false;
	} else {
		return false;
    5546:	2000      	movs	r0, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    5548:	061b      	lsls	r3, r3, #24
    554a:	d400      	bmi.n	554e <download_firmware+0xe>
	}
}
    554c:	bd70      	pop	{r4, r5, r6, pc}
		start_download();
    554e:	4b0f      	ldr	r3, [pc, #60]	; (558c <download_firmware+0x4c>)
    5550:	4798      	blx	r3
	return (down_state & mask) != 0;
    5552:	4b0d      	ldr	r3, [pc, #52]	; (5588 <download_firmware+0x48>)
    5554:	881b      	ldrh	r3, [r3, #0]
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    5556:	2230      	movs	r2, #48	; 0x30
    5558:	421a      	tst	r2, r3
    555a:	d111      	bne.n	5580 <download_firmware+0x40>
			m2m_wifi_handle_events(NULL);
    555c:	4e0c      	ldr	r6, [pc, #48]	; (5590 <download_firmware+0x50>)
			sw_timer_task(&swt_module_inst);
    555e:	4c0d      	ldr	r4, [pc, #52]	; (5594 <download_firmware+0x54>)
    5560:	4d0d      	ldr	r5, [pc, #52]	; (5598 <download_firmware+0x58>)
			m2m_wifi_handle_events(NULL);
    5562:	2000      	movs	r0, #0
    5564:	47b0      	blx	r6
			sw_timer_task(&swt_module_inst);
    5566:	0020      	movs	r0, r4
    5568:	47a8      	blx	r5
	return (down_state & mask) != 0;
    556a:	4b07      	ldr	r3, [pc, #28]	; (5588 <download_firmware+0x48>)
    556c:	8818      	ldrh	r0, [r3, #0]
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    556e:	2330      	movs	r3, #48	; 0x30
    5570:	4203      	tst	r3, r0
    5572:	d0f6      	beq.n	5562 <download_firmware+0x22>
	return (down_state & mask) != 0;
    5574:	3b20      	subs	r3, #32
    5576:	4018      	ands	r0, r3
		if (is_state_set(COMPLETED))
    5578:	1e43      	subs	r3, r0, #1
    557a:	4198      	sbcs	r0, r3
    557c:	b2c0      	uxtb	r0, r0
    557e:	e7e5      	b.n	554c <download_firmware+0xc>
	return (down_state & mask) != 0;
    5580:	2010      	movs	r0, #16
    5582:	4018      	ands	r0, r3
    5584:	e7f8      	b.n	5578 <download_firmware+0x38>
    5586:	46c0      	nop			; (mov r8, r8)
    5588:	20000614 	.word	0x20000614
    558c:	00004b11 	.word	0x00004b11
    5590:	0000a741 	.word	0x0000a741
    5594:	20000354 	.word	0x20000354
    5598:	00007be9 	.word	0x00007be9

0000559c <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
    559c:	b530      	push	{r4, r5, lr}
    559e:	b08f      	sub	sp, #60	; 0x3c
    55a0:	0004      	movs	r4, r0
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    55a2:	aa01      	add	r2, sp, #4
    55a4:	2364      	movs	r3, #100	; 0x64
    55a6:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    55a8:	4b1f      	ldr	r3, [pc, #124]	; (5628 <configure_i2c_tsl2561+0x8c>)
    55aa:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    55ac:	2300      	movs	r3, #0
    55ae:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    55b0:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    55b2:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    55b4:	2180      	movs	r1, #128	; 0x80
    55b6:	0389      	lsls	r1, r1, #14
    55b8:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    55ba:	2101      	movs	r1, #1
    55bc:	4249      	negs	r1, r1
    55be:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    55c0:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    55c2:	3125      	adds	r1, #37	; 0x25
    55c4:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    55c6:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    55c8:	3108      	adds	r1, #8
    55ca:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    55cc:	3101      	adds	r1, #1
    55ce:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    55d0:	3101      	adds	r1, #1
    55d2:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    55d4:	33d7      	adds	r3, #215	; 0xd7
    55d6:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    55d8:	4b14      	ldr	r3, [pc, #80]	; (562c <configure_i2c_tsl2561+0x90>)
    55da:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    55dc:	4b14      	ldr	r3, [pc, #80]	; (5630 <configure_i2c_tsl2561+0x94>)
    55de:	6213      	str	r3, [r2, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
    55e0:	4914      	ldr	r1, [pc, #80]	; (5634 <configure_i2c_tsl2561+0x98>)
    55e2:	4815      	ldr	r0, [pc, #84]	; (5638 <configure_i2c_tsl2561+0x9c>)
    55e4:	4b15      	ldr	r3, [pc, #84]	; (563c <configure_i2c_tsl2561+0xa0>)
    55e6:	4798      	blx	r3
	if (STATUS_OK != init_status) {
    55e8:	2800      	cmp	r0, #0
    55ea:	d119      	bne.n	5620 <configure_i2c_tsl2561+0x84>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55ec:	4b12      	ldr	r3, [pc, #72]	; (5638 <configure_i2c_tsl2561+0x9c>)
    55ee:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    55f0:	2107      	movs	r1, #7
    55f2:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    55f4:	4219      	tst	r1, r3
    55f6:	d1fc      	bne.n	55f2 <configure_i2c_tsl2561+0x56>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    55f8:	6813      	ldr	r3, [r2, #0]
    55fa:	2102      	movs	r1, #2
    55fc:	430b      	orrs	r3, r1
    55fe:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5600:	4b0d      	ldr	r3, [pc, #52]	; (5638 <configure_i2c_tsl2561+0x9c>)
    5602:	88dd      	ldrh	r5, [r3, #6]
	uint32_t timeout_counter = 0;
    5604:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5606:	2010      	movs	r0, #16
    5608:	8b51      	ldrh	r1, [r2, #26]
    560a:	4201      	tst	r1, r0
    560c:	d104      	bne.n	5618 <configure_i2c_tsl2561+0x7c>
		timeout_counter++;
    560e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5610:	42ab      	cmp	r3, r5
    5612:	d3f9      	bcc.n	5608 <configure_i2c_tsl2561+0x6c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    5614:	2310      	movs	r3, #16
    5616:	8353      	strh	r3, [r2, #26]
		printf("failed to initialize TSL2561 driver.\r\n");
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
	tsl2561_addr = addr;
    5618:	4b09      	ldr	r3, [pc, #36]	; (5640 <configure_i2c_tsl2561+0xa4>)
    561a:	701c      	strb	r4, [r3, #0]
}
    561c:	b00f      	add	sp, #60	; 0x3c
    561e:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize TSL2561 driver.\r\n");
    5620:	4808      	ldr	r0, [pc, #32]	; (5644 <configure_i2c_tsl2561+0xa8>)
    5622:	4b09      	ldr	r3, [pc, #36]	; (5648 <configure_i2c_tsl2561+0xac>)
    5624:	4798      	blx	r3
    5626:	e7f9      	b.n	561c <configure_i2c_tsl2561+0x80>
    5628:	00000d48 	.word	0x00000d48
    562c:	00080002 	.word	0x00080002
    5630:	00090002 	.word	0x00090002
    5634:	42000800 	.word	0x42000800
    5638:	20000588 	.word	0x20000588
    563c:	00006321 	.word	0x00006321
    5640:	20000218 	.word	0x20000218
    5644:	00012624 	.word	0x00012624
    5648:	00010435 	.word	0x00010435

0000564c <read_byte>:


uint8_t read_byte(tsl2561_registers reg)
{
    564c:	b500      	push	{lr}
    564e:	b085      	sub	sp, #20
	uint8_t received_data;
	uint8_t write_buffer = reg;
    5650:	230e      	movs	r3, #14
    5652:	446b      	add	r3, sp
    5654:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
    5656:	4a18      	ldr	r2, [pc, #96]	; (56b8 <read_byte+0x6c>)
    5658:	7812      	ldrb	r2, [r2, #0]
    565a:	4669      	mov	r1, sp
    565c:	800a      	strh	r2, [r1, #0]
    565e:	2201      	movs	r2, #1
    5660:	804a      	strh	r2, [r1, #2]
    5662:	9301      	str	r3, [sp, #4]
    5664:	2300      	movs	r3, #0
    5666:	720b      	strb	r3, [r1, #8]
    5668:	724b      	strb	r3, [r1, #9]
    566a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait(&i2c_tsl2561, &packet);
    566c:	4813      	ldr	r0, [pc, #76]	; (56bc <read_byte+0x70>)
    566e:	4b14      	ldr	r3, [pc, #80]	; (56c0 <read_byte+0x74>)
    5670:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
    5672:	2800      	cmp	r0, #0
    5674:	d008      	beq.n	5688 <read_byte+0x3c>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
    5676:	230e      	movs	r3, #14
    5678:	446b      	add	r3, sp
    567a:	7819      	ldrb	r1, [r3, #0]
    567c:	4811      	ldr	r0, [pc, #68]	; (56c4 <read_byte+0x78>)
    567e:	4b12      	ldr	r3, [pc, #72]	; (56c8 <read_byte+0x7c>)
    5680:	4798      	blx	r3
		return -1;
    5682:	20ff      	movs	r0, #255	; 0xff
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
		return -1;
	}
	return received_data;
}
    5684:	b005      	add	sp, #20
    5686:	bd00      	pop	{pc}
	packet.data = &received_data;
    5688:	230f      	movs	r3, #15
    568a:	446b      	add	r3, sp
    568c:	9301      	str	r3, [sp, #4]
	packet.data_length = 1;
    568e:	2301      	movs	r3, #1
    5690:	466a      	mov	r2, sp
    5692:	8053      	strh	r3, [r2, #2]
	i2c_code = i2c_master_read_packet_wait(&i2c_tsl2561, &packet);
    5694:	4669      	mov	r1, sp
    5696:	4809      	ldr	r0, [pc, #36]	; (56bc <read_byte+0x70>)
    5698:	4b0c      	ldr	r3, [pc, #48]	; (56cc <read_byte+0x80>)
    569a:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
    569c:	2800      	cmp	r0, #0
    569e:	d103      	bne.n	56a8 <read_byte+0x5c>
	return received_data;
    56a0:	230f      	movs	r3, #15
    56a2:	446b      	add	r3, sp
    56a4:	7818      	ldrb	r0, [r3, #0]
    56a6:	e7ed      	b.n	5684 <read_byte+0x38>
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
    56a8:	230e      	movs	r3, #14
    56aa:	446b      	add	r3, sp
    56ac:	7819      	ldrb	r1, [r3, #0]
    56ae:	4808      	ldr	r0, [pc, #32]	; (56d0 <read_byte+0x84>)
    56b0:	4b05      	ldr	r3, [pc, #20]	; (56c8 <read_byte+0x7c>)
    56b2:	4798      	blx	r3
		return -1;
    56b4:	20ff      	movs	r0, #255	; 0xff
    56b6:	e7e5      	b.n	5684 <read_byte+0x38>
    56b8:	20000218 	.word	0x20000218
    56bc:	20000588 	.word	0x20000588
    56c0:	0000690d 	.word	0x0000690d
    56c4:	0001264c 	.word	0x0001264c
    56c8:	00010319 	.word	0x00010319
    56cc:	000068f9 	.word	0x000068f9
    56d0:	00012684 	.word	0x00012684

000056d4 <get_tsl2561_device_id>:
	write_byte(CMD_BIT | CTRL_REG, 0x0);
}

//SHOULD RETURN 0x50
uint8_t get_tsl2561_device_id()
{
    56d4:	b510      	push	{r4, lr}
	return read_byte(CMD_BIT | ID_REG);
    56d6:	208a      	movs	r0, #138	; 0x8a
    56d8:	4b01      	ldr	r3, [pc, #4]	; (56e0 <get_tsl2561_device_id+0xc>)
    56da:	4798      	blx	r3
}
    56dc:	bd10      	pop	{r4, pc}
    56de:	46c0      	nop			; (mov r8, r8)
    56e0:	0000564d 	.word	0x0000564d

000056e4 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    56e4:	b530      	push	{r4, r5, lr}
    56e6:	b085      	sub	sp, #20
    56e8:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    56ea:	2300      	movs	r3, #0
    56ec:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    56ee:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    56f0:	4b2f      	ldr	r3, [pc, #188]	; (57b0 <at25dfx_chip_check_presence+0xcc>)
    56f2:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    56f4:	792b      	ldrb	r3, [r5, #4]
    56f6:	2b00      	cmp	r3, #0
    56f8:	d156      	bne.n	57a8 <at25dfx_chip_check_presence+0xc4>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    56fa:	3301      	adds	r3, #1
    56fc:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    56fe:	4b2d      	ldr	r3, [pc, #180]	; (57b4 <at25dfx_chip_check_presence+0xd0>)
    5700:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    5702:	229f      	movs	r2, #159	; 0x9f
    5704:	ab01      	add	r3, sp, #4
    5706:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5708:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    570a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    570c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    570e:	2900      	cmp	r1, #0
    5710:	d104      	bne.n	571c <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    5712:	0953      	lsrs	r3, r2, #5
    5714:	01db      	lsls	r3, r3, #7
    5716:	4928      	ldr	r1, [pc, #160]	; (57b8 <at25dfx_chip_check_presence+0xd4>)
    5718:	468c      	mov	ip, r1
    571a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    571c:	211f      	movs	r1, #31
    571e:	4011      	ands	r1, r2
    5720:	2201      	movs	r2, #1
    5722:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5724:	615a      	str	r2, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5726:	2201      	movs	r2, #1
    5728:	a901      	add	r1, sp, #4
    572a:	6820      	ldr	r0, [r4, #0]
    572c:	4b23      	ldr	r3, [pc, #140]	; (57bc <at25dfx_chip_check_presence+0xd8>)
    572e:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    5730:	2300      	movs	r3, #0
    5732:	2203      	movs	r2, #3
    5734:	a903      	add	r1, sp, #12
    5736:	6820      	ldr	r0, [r4, #0]
    5738:	4d21      	ldr	r5, [pc, #132]	; (57c0 <at25dfx_chip_check_presence+0xdc>)
    573a:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    573c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    573e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5740:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5742:	2900      	cmp	r1, #0
    5744:	d104      	bne.n	5750 <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    5746:	0953      	lsrs	r3, r2, #5
    5748:	01db      	lsls	r3, r3, #7
    574a:	491b      	ldr	r1, [pc, #108]	; (57b8 <at25dfx_chip_check_presence+0xd4>)
    574c:	468c      	mov	ip, r1
    574e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5750:	211f      	movs	r1, #31
    5752:	4011      	ands	r1, r2
    5754:	2201      	movs	r2, #1
    5756:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5758:	619a      	str	r2, [r3, #24]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    575a:	2300      	movs	r3, #0
    575c:	6822      	ldr	r2, [r4, #0]
    575e:	7113      	strb	r3, [r2, #4]
	switch (type) {
    5760:	7923      	ldrb	r3, [r4, #4]
    5762:	2b09      	cmp	r3, #9
    5764:	d815      	bhi.n	5792 <at25dfx_chip_check_presence+0xae>
    5766:	009b      	lsls	r3, r3, #2
    5768:	4a16      	ldr	r2, [pc, #88]	; (57c4 <at25dfx_chip_check_presence+0xe0>)
    576a:	58d3      	ldr	r3, [r2, r3]
    576c:	469f      	mov	pc, r3
		return 0x00431f;
    576e:	4b16      	ldr	r3, [pc, #88]	; (57c8 <at25dfx_chip_check_presence+0xe4>)
    5770:	e012      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x01441f;
    5772:	4b16      	ldr	r3, [pc, #88]	; (57cc <at25dfx_chip_check_presence+0xe8>)
    5774:	e010      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x02451f;
    5776:	4b16      	ldr	r3, [pc, #88]	; (57d0 <at25dfx_chip_check_presence+0xec>)
    5778:	e00e      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x01451f;
    577a:	4b16      	ldr	r3, [pc, #88]	; (57d4 <at25dfx_chip_check_presence+0xf0>)
    577c:	e00c      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
    577e:	4b16      	ldr	r3, [pc, #88]	; (57d8 <at25dfx_chip_check_presence+0xf4>)
    5780:	e00a      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
    5782:	4b16      	ldr	r3, [pc, #88]	; (57dc <at25dfx_chip_check_presence+0xf8>)
    5784:	e008      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
    5786:	4b16      	ldr	r3, [pc, #88]	; (57e0 <at25dfx_chip_check_presence+0xfc>)
    5788:	e006      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
    578a:	4b16      	ldr	r3, [pc, #88]	; (57e4 <at25dfx_chip_check_presence+0x100>)
    578c:	e004      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
    578e:	4b16      	ldr	r3, [pc, #88]	; (57e8 <at25dfx_chip_check_presence+0x104>)
    5790:	e002      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0;
    5792:	2300      	movs	r3, #0
    5794:	e000      	b.n	5798 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
    5796:	4b15      	ldr	r3, [pc, #84]	; (57ec <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    5798:	9a03      	ldr	r2, [sp, #12]
    579a:	429a      	cmp	r2, r3
    579c:	d002      	beq.n	57a4 <at25dfx_chip_check_presence+0xc0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    579e:	2014      	movs	r0, #20
	}
}
    57a0:	b005      	add	sp, #20
    57a2:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    57a4:	2000      	movs	r0, #0
    57a6:	e7fb      	b.n	57a0 <at25dfx_chip_check_presence+0xbc>
    57a8:	4b02      	ldr	r3, [pc, #8]	; (57b4 <at25dfx_chip_check_presence+0xd0>)
    57aa:	4798      	blx	r3
		return status;
    57ac:	2005      	movs	r0, #5
    57ae:	e7f7      	b.n	57a0 <at25dfx_chip_check_presence+0xbc>
    57b0:	0000cc29 	.word	0x0000cc29
    57b4:	0000cc69 	.word	0x0000cc69
    57b8:	41004400 	.word	0x41004400
    57bc:	00008c3d 	.word	0x00008c3d
    57c0:	00008a2d 	.word	0x00008a2d
    57c4:	000126b4 	.word	0x000126b4
    57c8:	0000431f 	.word	0x0000431f
    57cc:	0001441f 	.word	0x0001441f
    57d0:	0002451f 	.word	0x0002451f
    57d4:	0001451f 	.word	0x0001451f
    57d8:	0002461f 	.word	0x0002461f
    57dc:	0003461f 	.word	0x0003461f
    57e0:	0000861f 	.word	0x0000861f
    57e4:	0001471f 	.word	0x0001471f
    57e8:	0000481f 	.word	0x0000481f
    57ec:	0000651f 	.word	0x0000651f

000057f0 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    57f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57f2:	b085      	sub	sp, #20
    57f4:	0004      	movs	r4, r0
    57f6:	000e      	movs	r6, r1
    57f8:	9201      	str	r2, [sp, #4]
    57fa:	001f      	movs	r7, r3
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    57fc:	185a      	adds	r2, r3, r1
	switch (type) {
    57fe:	7903      	ldrb	r3, [r0, #4]
    5800:	2b09      	cmp	r3, #9
    5802:	d815      	bhi.n	5830 <at25dfx_chip_read_buffer+0x40>
    5804:	009b      	lsls	r3, r3, #2
    5806:	4932      	ldr	r1, [pc, #200]	; (58d0 <at25dfx_chip_read_buffer+0xe0>)
    5808:	58cb      	ldr	r3, [r1, r3]
    580a:	469f      	mov	pc, r3
		return 256 * 1024UL;
    580c:	2380      	movs	r3, #128	; 0x80
    580e:	02db      	lsls	r3, r3, #11
    5810:	e012      	b.n	5838 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
    5812:	2380      	movs	r3, #128	; 0x80
    5814:	031b      	lsls	r3, r3, #12
    5816:	e00f      	b.n	5838 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
    5818:	2380      	movs	r3, #128	; 0x80
    581a:	035b      	lsls	r3, r3, #13
    581c:	e00c      	b.n	5838 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
    581e:	2380      	movs	r3, #128	; 0x80
    5820:	039b      	lsls	r3, r3, #14
    5822:	e009      	b.n	5838 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
    5824:	2380      	movs	r3, #128	; 0x80
    5826:	03db      	lsls	r3, r3, #15
    5828:	e006      	b.n	5838 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
    582a:	2380      	movs	r3, #128	; 0x80
    582c:	041b      	lsls	r3, r3, #16
    582e:	e003      	b.n	5838 <at25dfx_chip_read_buffer+0x48>
		return 0;
    5830:	2300      	movs	r3, #0
    5832:	e001      	b.n	5838 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
    5834:	2380      	movs	r3, #128	; 0x80
    5836:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    5838:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    583a:	429a      	cmp	r2, r3
    583c:	d901      	bls.n	5842 <at25dfx_chip_read_buffer+0x52>
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
    583e:	b005      	add	sp, #20
    5840:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    5842:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    5844:	4b23      	ldr	r3, [pc, #140]	; (58d4 <at25dfx_chip_read_buffer+0xe4>)
    5846:	4798      	blx	r3
	if (module->locked) {
    5848:	792b      	ldrb	r3, [r5, #4]
    584a:	2b00      	cmp	r3, #0
    584c:	d13c      	bne.n	58c8 <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
    584e:	3301      	adds	r3, #1
    5850:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    5852:	4b21      	ldr	r3, [pc, #132]	; (58d8 <at25dfx_chip_read_buffer+0xe8>)
    5854:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5856:	230b      	movs	r3, #11
    5858:	aa02      	add	r2, sp, #8
    585a:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    585c:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    585e:	0a33      	lsrs	r3, r6, #8
    5860:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    5862:	0c36      	lsrs	r6, r6, #16
    5864:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    5866:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5868:	09d1      	lsrs	r1, r2, #7
		return NULL;
    586a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    586c:	2900      	cmp	r1, #0
    586e:	d104      	bne.n	587a <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
    5870:	0953      	lsrs	r3, r2, #5
    5872:	01db      	lsls	r3, r3, #7
    5874:	4919      	ldr	r1, [pc, #100]	; (58dc <at25dfx_chip_read_buffer+0xec>)
    5876:	468c      	mov	ip, r1
    5878:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    587a:	211f      	movs	r1, #31
    587c:	4011      	ands	r1, r2
    587e:	2201      	movs	r2, #1
    5880:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5882:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5884:	2205      	movs	r2, #5
    5886:	a902      	add	r1, sp, #8
    5888:	6820      	ldr	r0, [r4, #0]
    588a:	4b15      	ldr	r3, [pc, #84]	; (58e0 <at25dfx_chip_read_buffer+0xf0>)
    588c:	4798      	blx	r3
	if (cmd.length) {
    588e:	2f00      	cmp	r7, #0
    5890:	d113      	bne.n	58ba <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
    5892:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5894:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5896:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5898:	2900      	cmp	r1, #0
    589a:	d104      	bne.n	58a6 <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
    589c:	0953      	lsrs	r3, r2, #5
    589e:	01db      	lsls	r3, r3, #7
    58a0:	490e      	ldr	r1, [pc, #56]	; (58dc <at25dfx_chip_read_buffer+0xec>)
    58a2:	468c      	mov	ip, r1
    58a4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    58a6:	211f      	movs	r1, #31
    58a8:	4011      	ands	r1, r2
    58aa:	2201      	movs	r2, #1
    58ac:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    58ae:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
    58b0:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    58b2:	2200      	movs	r2, #0
    58b4:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
    58b6:	2000      	movs	r0, #0
    58b8:	e7c1      	b.n	583e <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    58ba:	2300      	movs	r3, #0
    58bc:	003a      	movs	r2, r7
    58be:	9901      	ldr	r1, [sp, #4]
    58c0:	6820      	ldr	r0, [r4, #0]
    58c2:	4d08      	ldr	r5, [pc, #32]	; (58e4 <at25dfx_chip_read_buffer+0xf4>)
    58c4:	47a8      	blx	r5
    58c6:	e7e4      	b.n	5892 <at25dfx_chip_read_buffer+0xa2>
    58c8:	4b03      	ldr	r3, [pc, #12]	; (58d8 <at25dfx_chip_read_buffer+0xe8>)
    58ca:	4798      	blx	r3
		return status;
    58cc:	2005      	movs	r0, #5
    58ce:	e7b6      	b.n	583e <at25dfx_chip_read_buffer+0x4e>
    58d0:	000126dc 	.word	0x000126dc
    58d4:	0000cc29 	.word	0x0000cc29
    58d8:	0000cc69 	.word	0x0000cc69
    58dc:	41004400 	.word	0x41004400
    58e0:	00008c3d 	.word	0x00008c3d
    58e4:	00008a2d 	.word	0x00008a2d

000058e8 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    58e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ea:	46de      	mov	lr, fp
    58ec:	4657      	mov	r7, sl
    58ee:	464e      	mov	r6, r9
    58f0:	4645      	mov	r5, r8
    58f2:	b5e0      	push	{r5, r6, r7, lr}
    58f4:	b085      	sub	sp, #20
    58f6:	0005      	movs	r5, r0
    58f8:	000e      	movs	r6, r1
    58fa:	9201      	str	r2, [sp, #4]
    58fc:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    58fe:	185a      	adds	r2, r3, r1
	switch (type) {
    5900:	7903      	ldrb	r3, [r0, #4]
    5902:	2b09      	cmp	r3, #9
    5904:	d815      	bhi.n	5932 <at25dfx_chip_write_buffer+0x4a>
    5906:	009b      	lsls	r3, r3, #2
    5908:	49ae      	ldr	r1, [pc, #696]	; (5bc4 <at25dfx_chip_write_buffer+0x2dc>)
    590a:	58cb      	ldr	r3, [r1, r3]
    590c:	469f      	mov	pc, r3
		return 256 * 1024UL;
    590e:	2380      	movs	r3, #128	; 0x80
    5910:	02db      	lsls	r3, r3, #11
    5912:	e012      	b.n	593a <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    5914:	2380      	movs	r3, #128	; 0x80
    5916:	031b      	lsls	r3, r3, #12
    5918:	e00f      	b.n	593a <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    591a:	2380      	movs	r3, #128	; 0x80
    591c:	035b      	lsls	r3, r3, #13
    591e:	e00c      	b.n	593a <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    5920:	2380      	movs	r3, #128	; 0x80
    5922:	039b      	lsls	r3, r3, #14
    5924:	e009      	b.n	593a <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    5926:	2380      	movs	r3, #128	; 0x80
    5928:	03db      	lsls	r3, r3, #15
    592a:	e006      	b.n	593a <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    592c:	2380      	movs	r3, #128	; 0x80
    592e:	041b      	lsls	r3, r3, #16
    5930:	e003      	b.n	593a <at25dfx_chip_write_buffer+0x52>
		return 0;
    5932:	2300      	movs	r3, #0
    5934:	e001      	b.n	593a <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    5936:	2380      	movs	r3, #128	; 0x80
    5938:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    593a:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    593c:	429a      	cmp	r2, r3
    593e:	d906      	bls.n	594e <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    5940:	b005      	add	sp, #20
    5942:	bc3c      	pop	{r2, r3, r4, r5}
    5944:	4690      	mov	r8, r2
    5946:	4699      	mov	r9, r3
    5948:	46a2      	mov	sl, r4
    594a:	46ab      	mov	fp, r5
    594c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    594e:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
    5950:	4b9d      	ldr	r3, [pc, #628]	; (5bc8 <at25dfx_chip_write_buffer+0x2e0>)
    5952:	4798      	blx	r3
	if (module->locked) {
    5954:	7923      	ldrb	r3, [r4, #4]
    5956:	2b00      	cmp	r3, #0
    5958:	d000      	beq.n	595c <at25dfx_chip_write_buffer+0x74>
    595a:	e12e      	b.n	5bba <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
    595c:	3301      	adds	r3, #1
    595e:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
    5960:	4b9a      	ldr	r3, [pc, #616]	; (5bcc <at25dfx_chip_write_buffer+0x2e4>)
    5962:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    5964:	2306      	movs	r3, #6
    5966:	aa02      	add	r2, sp, #8
    5968:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    596a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    596c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    596e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5970:	2900      	cmp	r1, #0
    5972:	d104      	bne.n	597e <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    5974:	0953      	lsrs	r3, r2, #5
    5976:	01db      	lsls	r3, r3, #7
    5978:	4995      	ldr	r1, [pc, #596]	; (5bd0 <at25dfx_chip_write_buffer+0x2e8>)
    597a:	468c      	mov	ip, r1
    597c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    597e:	211f      	movs	r1, #31
    5980:	4011      	ands	r1, r2
    5982:	2201      	movs	r2, #1
    5984:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5986:	615a      	str	r2, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5988:	2201      	movs	r2, #1
    598a:	a902      	add	r1, sp, #8
    598c:	6828      	ldr	r0, [r5, #0]
    598e:	4b91      	ldr	r3, [pc, #580]	; (5bd4 <at25dfx_chip_write_buffer+0x2ec>)
    5990:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5992:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5994:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5996:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5998:	2900      	cmp	r1, #0
    599a:	d104      	bne.n	59a6 <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
    599c:	0953      	lsrs	r3, r2, #5
    599e:	01db      	lsls	r3, r3, #7
    59a0:	498b      	ldr	r1, [pc, #556]	; (5bd0 <at25dfx_chip_write_buffer+0x2e8>)
    59a2:	468c      	mov	ip, r1
    59a4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    59a6:	211f      	movs	r1, #31
    59a8:	4011      	ands	r1, r2
    59aa:	2201      	movs	r2, #1
    59ac:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    59ae:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    59b0:	22ff      	movs	r2, #255	; 0xff
    59b2:	4032      	ands	r2, r6
    59b4:	2380      	movs	r3, #128	; 0x80
    59b6:	005b      	lsls	r3, r3, #1
    59b8:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    59ba:	1c1a      	adds	r2, r3, #0
    59bc:	b29b      	uxth	r3, r3
    59be:	42bb      	cmp	r3, r7
    59c0:	d900      	bls.n	59c4 <at25dfx_chip_write_buffer+0xdc>
    59c2:	1c3a      	adds	r2, r7, #0
    59c4:	b293      	uxth	r3, r2
    59c6:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    59c8:	2302      	movs	r3, #2
    59ca:	aa02      	add	r2, sp, #8
    59cc:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    59ce:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    59d0:	0a33      	lsrs	r3, r6, #8
    59d2:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    59d4:	0c33      	lsrs	r3, r6, #16
    59d6:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    59d8:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    59da:	09d1      	lsrs	r1, r2, #7
		return NULL;
    59dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    59de:	2900      	cmp	r1, #0
    59e0:	d104      	bne.n	59ec <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
    59e2:	0953      	lsrs	r3, r2, #5
    59e4:	01db      	lsls	r3, r3, #7
    59e6:	497a      	ldr	r1, [pc, #488]	; (5bd0 <at25dfx_chip_write_buffer+0x2e8>)
    59e8:	468c      	mov	ip, r1
    59ea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    59ec:	211f      	movs	r1, #31
    59ee:	4011      	ands	r1, r2
    59f0:	2201      	movs	r2, #1
    59f2:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    59f4:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    59f6:	2204      	movs	r2, #4
    59f8:	a902      	add	r1, sp, #8
    59fa:	6828      	ldr	r0, [r5, #0]
    59fc:	4b75      	ldr	r3, [pc, #468]	; (5bd4 <at25dfx_chip_write_buffer+0x2ec>)
    59fe:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    5a00:	4653      	mov	r3, sl
    5a02:	2b00      	cmp	r3, #0
    5a04:	d145      	bne.n	5a92 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    5a06:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5a08:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5a0a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a0c:	2900      	cmp	r1, #0
    5a0e:	d104      	bne.n	5a1a <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    5a10:	0953      	lsrs	r3, r2, #5
    5a12:	01db      	lsls	r3, r3, #7
    5a14:	496e      	ldr	r1, [pc, #440]	; (5bd0 <at25dfx_chip_write_buffer+0x2e8>)
    5a16:	468c      	mov	ip, r1
    5a18:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a1a:	211f      	movs	r1, #31
    5a1c:	4011      	ands	r1, r2
    5a1e:	2201      	movs	r2, #1
    5a20:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5a22:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5a24:	682b      	ldr	r3, [r5, #0]
    5a26:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    5a28:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a2a:	7e0b      	ldrb	r3, [r1, #24]
    5a2c:	4213      	tst	r3, r2
    5a2e:	d0fc      	beq.n	5a2a <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
    5a30:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5a32:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5a34:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a36:	2900      	cmp	r1, #0
    5a38:	d104      	bne.n	5a44 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    5a3a:	0953      	lsrs	r3, r2, #5
    5a3c:	01db      	lsls	r3, r3, #7
    5a3e:	4964      	ldr	r1, [pc, #400]	; (5bd0 <at25dfx_chip_write_buffer+0x2e8>)
    5a40:	468c      	mov	ip, r1
    5a42:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a44:	211f      	movs	r1, #31
    5a46:	4011      	ands	r1, r2
    5a48:	2201      	movs	r2, #1
    5a4a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5a4c:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5a4e:	682b      	ldr	r3, [r5, #0]
    5a50:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a52:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5a54:	07d2      	lsls	r2, r2, #31
    5a56:	d501      	bpl.n	5a5c <at25dfx_chip_write_buffer+0x174>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5a58:	2205      	movs	r2, #5
    5a5a:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    5a5c:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a5e:	6802      	ldr	r2, [r0, #0]
    5a60:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a62:	7e13      	ldrb	r3, [r2, #24]
    5a64:	420b      	tst	r3, r1
    5a66:	d0fc      	beq.n	5a62 <at25dfx_chip_write_buffer+0x17a>
    5a68:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    5a6a:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5a6c:	075b      	lsls	r3, r3, #29
    5a6e:	d509      	bpl.n	5a84 <at25dfx_chip_write_buffer+0x19c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5a70:	8b53      	ldrh	r3, [r2, #26]
    5a72:	075b      	lsls	r3, r3, #29
    5a74:	d501      	bpl.n	5a7a <at25dfx_chip_write_buffer+0x192>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5a76:	2304      	movs	r3, #4
    5a78:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a7a:	7983      	ldrb	r3, [r0, #6]
    5a7c:	2b01      	cmp	r3, #1
    5a7e:	d00e      	beq.n	5a9e <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5a80:	6a94      	ldr	r4, [r2, #40]	; 0x28
    5a82:	b2e4      	uxtb	r4, r4

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    5a84:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5a86:	2300      	movs	r3, #0
    5a88:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    5a8a:	2004      	movs	r0, #4
    5a8c:	46b4      	mov	ip, r6
    5a8e:	002e      	movs	r6, r5
    5a90:	e010      	b.n	5ab4 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    5a92:	4652      	mov	r2, sl
    5a94:	9901      	ldr	r1, [sp, #4]
    5a96:	6828      	ldr	r0, [r5, #0]
    5a98:	4b4e      	ldr	r3, [pc, #312]	; (5bd4 <at25dfx_chip_write_buffer+0x2ec>)
    5a9a:	4798      	blx	r3
    5a9c:	e7b3      	b.n	5a06 <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5a9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5aa0:	05db      	lsls	r3, r3, #23
    5aa2:	0ddc      	lsrs	r4, r3, #23
    5aa4:	e7ee      	b.n	5a84 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5aa6:	79ab      	ldrb	r3, [r5, #6]
    5aa8:	2b01      	cmp	r3, #1
    5aaa:	d01a      	beq.n	5ae2 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5aac:	6a94      	ldr	r4, [r2, #40]	; 0x28
    5aae:	b2e4      	uxtb	r4, r4
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    5ab0:	4221      	tst	r1, r4
    5ab2:	d01a      	beq.n	5aea <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ab4:	6833      	ldr	r3, [r6, #0]
    5ab6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5ab8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    5aba:	420b      	tst	r3, r1
    5abc:	d0fc      	beq.n	5ab8 <at25dfx_chip_write_buffer+0x1d0>
    5abe:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    5ac0:	420b      	tst	r3, r1
    5ac2:	d001      	beq.n	5ac8 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5ac4:	4643      	mov	r3, r8
    5ac6:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    5ac8:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5aca:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5acc:	7e13      	ldrb	r3, [r2, #24]
    5ace:	4203      	tst	r3, r0
    5ad0:	d0fc      	beq.n	5acc <at25dfx_chip_write_buffer+0x1e4>
    5ad2:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    5ad4:	4203      	tst	r3, r0
    5ad6:	d0eb      	beq.n	5ab0 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5ad8:	8b53      	ldrh	r3, [r2, #26]
    5ada:	4203      	tst	r3, r0
    5adc:	d0e3      	beq.n	5aa6 <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5ade:	8350      	strh	r0, [r2, #26]
    5ae0:	e7e1      	b.n	5aa6 <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5ae2:	6a94      	ldr	r4, [r2, #40]	; 0x28
    5ae4:	05e4      	lsls	r4, r4, #23
    5ae6:	0de4      	lsrs	r4, r4, #23
    5ae8:	e7e2      	b.n	5ab0 <at25dfx_chip_write_buffer+0x1c8>
    5aea:	0035      	movs	r5, r6
    5aec:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
    5aee:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5af0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5af2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5af4:	2900      	cmp	r1, #0
    5af6:	d104      	bne.n	5b02 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
    5af8:	0953      	lsrs	r3, r2, #5
    5afa:	01db      	lsls	r3, r3, #7
    5afc:	4934      	ldr	r1, [pc, #208]	; (5bd0 <at25dfx_chip_write_buffer+0x2e8>)
    5afe:	468c      	mov	ip, r1
    5b00:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b02:	211f      	movs	r1, #31
    5b04:	4011      	ands	r1, r2
    5b06:	2201      	movs	r2, #1
    5b08:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b0a:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    5b0c:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
    5b0e:	06a3      	lsls	r3, r4, #26
    5b10:	d44f      	bmi.n	5bb2 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
    5b12:	4653      	mov	r3, sl
    5b14:	1aff      	subs	r7, r7, r3
    5b16:	b2bb      	uxth	r3, r7
    5b18:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
    5b1a:	9a01      	ldr	r2, [sp, #4]
    5b1c:	4691      	mov	r9, r2
	}
	return STATUS_OK;
    5b1e:	2000      	movs	r0, #0
    5b20:	2b00      	cmp	r3, #0
    5b22:	d046      	beq.n	5bb2 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b24:	231f      	movs	r3, #31
    5b26:	469b      	mov	fp, r3
    5b28:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5b2a:	4b2a      	ldr	r3, [pc, #168]	; (5bd4 <at25dfx_chip_write_buffer+0x2ec>)
    5b2c:	4698      	mov	r8, r3
    5b2e:	4653      	mov	r3, sl
    5b30:	9301      	str	r3, [sp, #4]
    5b32:	468a      	mov	sl, r1
    5b34:	e058      	b.n	5be8 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    5b36:	001a      	movs	r2, r3
    5b38:	4649      	mov	r1, r9
    5b3a:	6828      	ldr	r0, [r5, #0]
    5b3c:	4b25      	ldr	r3, [pc, #148]	; (5bd4 <at25dfx_chip_write_buffer+0x2ec>)
    5b3e:	4798      	blx	r3
    5b40:	e0a4      	b.n	5c8c <at25dfx_chip_write_buffer+0x3a4>
    5b42:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5b44:	05c0      	lsls	r0, r0, #23
    5b46:	0dc0      	lsrs	r0, r0, #23
    5b48:	e0e1      	b.n	5d0e <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b4a:	79bb      	ldrb	r3, [r7, #6]
    5b4c:	2b01      	cmp	r3, #1
    5b4e:	d01a      	beq.n	5b86 <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5b50:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5b52:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
    5b54:	4204      	tst	r4, r0
    5b56:	d01a      	beq.n	5b8e <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b58:	682b      	ldr	r3, [r5, #0]
    5b5a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b5c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    5b5e:	4223      	tst	r3, r4
    5b60:	d0fc      	beq.n	5b5c <at25dfx_chip_write_buffer+0x274>
    5b62:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    5b64:	4223      	tst	r3, r4
    5b66:	d001      	beq.n	5b6c <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5b68:	2300      	movs	r3, #0
    5b6a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    5b6c:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b6e:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b70:	7e13      	ldrb	r3, [r2, #24]
    5b72:	420b      	tst	r3, r1
    5b74:	d0fc      	beq.n	5b70 <at25dfx_chip_write_buffer+0x288>
    5b76:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    5b78:	420b      	tst	r3, r1
    5b7a:	d0eb      	beq.n	5b54 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5b7c:	8b53      	ldrh	r3, [r2, #26]
    5b7e:	420b      	tst	r3, r1
    5b80:	d0e3      	beq.n	5b4a <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5b82:	8351      	strh	r1, [r2, #26]
    5b84:	e7e1      	b.n	5b4a <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5b86:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5b88:	05c0      	lsls	r0, r0, #23
    5b8a:	0dc0      	lsrs	r0, r0, #23
    5b8c:	e7e2      	b.n	5b54 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
    5b8e:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5b90:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5b92:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5b94:	2900      	cmp	r1, #0
    5b96:	d104      	bne.n	5ba2 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
    5b98:	095a      	lsrs	r2, r3, #5
    5b9a:	01d2      	lsls	r2, r2, #7
    5b9c:	490c      	ldr	r1, [pc, #48]	; (5bd0 <at25dfx_chip_write_buffer+0x2e8>)
    5b9e:	468c      	mov	ip, r1
    5ba0:	4462      	add	r2, ip
    5ba2:	4659      	mov	r1, fp
    5ba4:	400b      	ands	r3, r1
    5ba6:	0021      	movs	r1, r4
    5ba8:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5baa:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    5bac:	0683      	lsls	r3, r0, #26
    5bae:	d513      	bpl.n	5bd8 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
    5bb0:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    5bb2:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
    5bb4:	2200      	movs	r2, #0
    5bb6:	711a      	strb	r2, [r3, #4]
	return status;
    5bb8:	e6c2      	b.n	5940 <at25dfx_chip_write_buffer+0x58>
    5bba:	4b04      	ldr	r3, [pc, #16]	; (5bcc <at25dfx_chip_write_buffer+0x2e4>)
    5bbc:	4798      	blx	r3
		return status;
    5bbe:	2005      	movs	r0, #5
    5bc0:	e6be      	b.n	5940 <at25dfx_chip_write_buffer+0x58>
    5bc2:	46c0      	nop			; (mov r8, r8)
    5bc4:	00012708 	.word	0x00012708
    5bc8:	0000cc29 	.word	0x0000cc29
    5bcc:	0000cc69 	.word	0x0000cc69
    5bd0:	41004400 	.word	0x41004400
    5bd4:	00008c3d 	.word	0x00008c3d
		length -= cmd.length;
    5bd8:	4653      	mov	r3, sl
    5bda:	9a01      	ldr	r2, [sp, #4]
    5bdc:	1a9b      	subs	r3, r3, r2
    5bde:	b29b      	uxth	r3, r3
    5be0:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
    5be2:	2b00      	cmp	r3, #0
    5be4:	d100      	bne.n	5be8 <at25dfx_chip_write_buffer+0x300>
    5be6:	e094      	b.n	5d12 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
    5be8:	ab02      	add	r3, sp, #8
    5bea:	2206      	movs	r2, #6
    5bec:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5bee:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5bf0:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5bf2:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5bf4:	2900      	cmp	r1, #0
    5bf6:	d104      	bne.n	5c02 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    5bf8:	095a      	lsrs	r2, r3, #5
    5bfa:	01d2      	lsls	r2, r2, #7
    5bfc:	4946      	ldr	r1, [pc, #280]	; (5d18 <at25dfx_chip_write_buffer+0x430>)
    5bfe:	468c      	mov	ip, r1
    5c00:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c02:	4659      	mov	r1, fp
    5c04:	400b      	ands	r3, r1
    5c06:	0021      	movs	r1, r4
    5c08:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    5c0a:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5c0c:	0022      	movs	r2, r4
    5c0e:	a902      	add	r1, sp, #8
    5c10:	6828      	ldr	r0, [r5, #0]
    5c12:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
    5c14:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5c16:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5c18:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5c1a:	2900      	cmp	r1, #0
    5c1c:	d104      	bne.n	5c28 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
    5c1e:	095a      	lsrs	r2, r3, #5
    5c20:	01d2      	lsls	r2, r2, #7
    5c22:	493d      	ldr	r1, [pc, #244]	; (5d18 <at25dfx_chip_write_buffer+0x430>)
    5c24:	468c      	mov	ip, r1
    5c26:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c28:	4659      	mov	r1, fp
    5c2a:	400b      	ands	r3, r1
    5c2c:	0021      	movs	r1, r4
    5c2e:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5c30:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    5c32:	9a01      	ldr	r2, [sp, #4]
    5c34:	4694      	mov	ip, r2
    5c36:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
    5c38:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    5c3a:	4657      	mov	r7, sl
    5c3c:	2380      	movs	r3, #128	; 0x80
    5c3e:	005b      	lsls	r3, r3, #1
    5c40:	459a      	cmp	sl, r3
    5c42:	d901      	bls.n	5c48 <at25dfx_chip_write_buffer+0x360>
    5c44:	4b35      	ldr	r3, [pc, #212]	; (5d1c <at25dfx_chip_write_buffer+0x434>)
    5c46:	881f      	ldrh	r7, [r3, #0]
    5c48:	b2bb      	uxth	r3, r7
    5c4a:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    5c4c:	2302      	movs	r3, #2
    5c4e:	aa02      	add	r2, sp, #8
    5c50:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    5c52:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    5c54:	0a33      	lsrs	r3, r6, #8
    5c56:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    5c58:	0c33      	lsrs	r3, r6, #16
    5c5a:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    5c5c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5c5e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5c60:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5c62:	2900      	cmp	r1, #0
    5c64:	d104      	bne.n	5c70 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
    5c66:	095a      	lsrs	r2, r3, #5
    5c68:	01d2      	lsls	r2, r2, #7
    5c6a:	492b      	ldr	r1, [pc, #172]	; (5d18 <at25dfx_chip_write_buffer+0x430>)
    5c6c:	468c      	mov	ip, r1
    5c6e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c70:	4659      	mov	r1, fp
    5c72:	400b      	ands	r3, r1
    5c74:	0021      	movs	r1, r4
    5c76:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    5c78:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5c7a:	2204      	movs	r2, #4
    5c7c:	a902      	add	r1, sp, #8
    5c7e:	6828      	ldr	r0, [r5, #0]
    5c80:	4b27      	ldr	r3, [pc, #156]	; (5d20 <at25dfx_chip_write_buffer+0x438>)
    5c82:	4798      	blx	r3
	if (cmd.length) {
    5c84:	9b01      	ldr	r3, [sp, #4]
    5c86:	2b00      	cmp	r3, #0
    5c88:	d000      	beq.n	5c8c <at25dfx_chip_write_buffer+0x3a4>
    5c8a:	e754      	b.n	5b36 <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
    5c8c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5c8e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5c90:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5c92:	2900      	cmp	r1, #0
    5c94:	d104      	bne.n	5ca0 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
    5c96:	095a      	lsrs	r2, r3, #5
    5c98:	01d2      	lsls	r2, r2, #7
    5c9a:	491f      	ldr	r1, [pc, #124]	; (5d18 <at25dfx_chip_write_buffer+0x430>)
    5c9c:	468c      	mov	ip, r1
    5c9e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ca0:	4659      	mov	r1, fp
    5ca2:	400b      	ands	r3, r1
    5ca4:	0021      	movs	r1, r4
    5ca6:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5ca8:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5caa:	682b      	ldr	r3, [r5, #0]
    5cac:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5cae:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    5cb0:	4223      	tst	r3, r4
    5cb2:	d0fc      	beq.n	5cae <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
    5cb4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5cb6:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5cb8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5cba:	2900      	cmp	r1, #0
    5cbc:	d104      	bne.n	5cc8 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
    5cbe:	095a      	lsrs	r2, r3, #5
    5cc0:	01d2      	lsls	r2, r2, #7
    5cc2:	4915      	ldr	r1, [pc, #84]	; (5d18 <at25dfx_chip_write_buffer+0x430>)
    5cc4:	468c      	mov	ip, r1
    5cc6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5cc8:	4659      	mov	r1, fp
    5cca:	400b      	ands	r3, r1
    5ccc:	0021      	movs	r1, r4
    5cce:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    5cd0:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5cd2:	682b      	ldr	r3, [r5, #0]
    5cd4:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5cd6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5cd8:	4222      	tst	r2, r4
    5cda:	d001      	beq.n	5ce0 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5cdc:	2205      	movs	r2, #5
    5cde:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    5ce0:	682b      	ldr	r3, [r5, #0]
    5ce2:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ce4:	681a      	ldr	r2, [r3, #0]
    5ce6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5ce8:	7e13      	ldrb	r3, [r2, #24]
    5cea:	420b      	tst	r3, r1
    5cec:	d0fc      	beq.n	5ce8 <at25dfx_chip_write_buffer+0x400>
    5cee:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    5cf0:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    5cf2:	075b      	lsls	r3, r3, #29
    5cf4:	d50b      	bpl.n	5d0e <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5cf6:	8b53      	ldrh	r3, [r2, #26]
    5cf8:	075b      	lsls	r3, r3, #29
    5cfa:	d501      	bpl.n	5d00 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5cfc:	2304      	movs	r3, #4
    5cfe:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5d00:	4663      	mov	r3, ip
    5d02:	799b      	ldrb	r3, [r3, #6]
    5d04:	2b01      	cmp	r3, #1
    5d06:	d100      	bne.n	5d0a <at25dfx_chip_write_buffer+0x422>
    5d08:	e71b      	b.n	5b42 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5d0a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5d0c:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
    5d0e:	2104      	movs	r1, #4
    5d10:	e722      	b.n	5b58 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
    5d12:	2000      	movs	r0, #0
    5d14:	e74d      	b.n	5bb2 <at25dfx_chip_write_buffer+0x2ca>
    5d16:	46c0      	nop			; (mov r8, r8)
    5d18:	41004400 	.word	0x41004400
    5d1c:	00012704 	.word	0x00012704
    5d20:	00008c3d 	.word	0x00008c3d

00005d24 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    5d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d26:	b083      	sub	sp, #12
    5d28:	0004      	movs	r4, r0
    5d2a:	000e      	movs	r6, r1
    5d2c:	0015      	movs	r5, r2
	switch (type) {
    5d2e:	7903      	ldrb	r3, [r0, #4]
    5d30:	2b09      	cmp	r3, #9
    5d32:	d900      	bls.n	5d36 <at25dfx_chip_erase_block+0x12>
    5d34:	e0f2      	b.n	5f1c <at25dfx_chip_erase_block+0x1f8>
    5d36:	009b      	lsls	r3, r3, #2
    5d38:	4a7b      	ldr	r2, [pc, #492]	; (5f28 <at25dfx_chip_erase_block+0x204>)
    5d3a:	58d3      	ldr	r3, [r2, r3]
    5d3c:	469f      	mov	pc, r3
		return 256 * 1024UL;
    5d3e:	2380      	movs	r3, #128	; 0x80
    5d40:	02db      	lsls	r3, r3, #11
    5d42:	e010      	b.n	5d66 <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
    5d44:	2380      	movs	r3, #128	; 0x80
    5d46:	031b      	lsls	r3, r3, #12
    5d48:	e00d      	b.n	5d66 <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
    5d4a:	2380      	movs	r3, #128	; 0x80
    5d4c:	035b      	lsls	r3, r3, #13
    5d4e:	e00a      	b.n	5d66 <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
    5d50:	2380      	movs	r3, #128	; 0x80
    5d52:	039b      	lsls	r3, r3, #14
    5d54:	e007      	b.n	5d66 <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
    5d56:	2380      	movs	r3, #128	; 0x80
    5d58:	03db      	lsls	r3, r3, #15
    5d5a:	e004      	b.n	5d66 <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
    5d5c:	2380      	movs	r3, #128	; 0x80
    5d5e:	041b      	lsls	r3, r3, #16
    5d60:	e001      	b.n	5d66 <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
    5d62:	2380      	movs	r3, #128	; 0x80
    5d64:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    5d66:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    5d68:	42b3      	cmp	r3, r6
    5d6a:	d801      	bhi.n	5d70 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    5d6c:	b003      	add	sp, #12
    5d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    5d70:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    5d72:	4b6e      	ldr	r3, [pc, #440]	; (5f2c <at25dfx_chip_erase_block+0x208>)
    5d74:	4798      	blx	r3
	if (module->locked) {
    5d76:	793b      	ldrb	r3, [r7, #4]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d000      	beq.n	5d7e <at25dfx_chip_erase_block+0x5a>
    5d7c:	e0d0      	b.n	5f20 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
    5d7e:	3301      	adds	r3, #1
    5d80:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    5d82:	4b6b      	ldr	r3, [pc, #428]	; (5f30 <at25dfx_chip_erase_block+0x20c>)
    5d84:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5d86:	2306      	movs	r3, #6
    5d88:	466a      	mov	r2, sp
    5d8a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5d8c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5d8e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5d90:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5d92:	2900      	cmp	r1, #0
    5d94:	d104      	bne.n	5da0 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
    5d96:	0953      	lsrs	r3, r2, #5
    5d98:	01db      	lsls	r3, r3, #7
    5d9a:	4966      	ldr	r1, [pc, #408]	; (5f34 <at25dfx_chip_erase_block+0x210>)
    5d9c:	468c      	mov	ip, r1
    5d9e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5da0:	211f      	movs	r1, #31
    5da2:	4011      	ands	r1, r2
    5da4:	2201      	movs	r2, #1
    5da6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5da8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5daa:	2201      	movs	r2, #1
    5dac:	4669      	mov	r1, sp
    5dae:	6820      	ldr	r0, [r4, #0]
    5db0:	4b61      	ldr	r3, [pc, #388]	; (5f38 <at25dfx_chip_erase_block+0x214>)
    5db2:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5db4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5db6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5db8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5dba:	2900      	cmp	r1, #0
    5dbc:	d104      	bne.n	5dc8 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
    5dbe:	0953      	lsrs	r3, r2, #5
    5dc0:	01db      	lsls	r3, r3, #7
    5dc2:	495c      	ldr	r1, [pc, #368]	; (5f34 <at25dfx_chip_erase_block+0x210>)
    5dc4:	468c      	mov	ip, r1
    5dc6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5dc8:	211f      	movs	r1, #31
    5dca:	4011      	ands	r1, r2
    5dcc:	2201      	movs	r2, #1
    5dce:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5dd0:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    5dd2:	2d01      	cmp	r5, #1
    5dd4:	d006      	beq.n	5de4 <at25dfx_chip_erase_block+0xc0>
    5dd6:	2d00      	cmp	r5, #0
    5dd8:	d063      	beq.n	5ea2 <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    5dda:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    5ddc:	2d02      	cmp	r5, #2
    5dde:	d002      	beq.n	5de6 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    5de0:	2300      	movs	r3, #0
    5de2:	e000      	b.n	5de6 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    5de4:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    5de6:	466a      	mov	r2, sp
    5de8:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    5dea:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    5dec:	0a33      	lsrs	r3, r6, #8
    5dee:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    5df0:	0c36      	lsrs	r6, r6, #16
    5df2:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    5df4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5df6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5df8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5dfa:	2900      	cmp	r1, #0
    5dfc:	d104      	bne.n	5e08 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
    5dfe:	0953      	lsrs	r3, r2, #5
    5e00:	01db      	lsls	r3, r3, #7
    5e02:	494c      	ldr	r1, [pc, #304]	; (5f34 <at25dfx_chip_erase_block+0x210>)
    5e04:	468c      	mov	ip, r1
    5e06:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e08:	211f      	movs	r1, #31
    5e0a:	4011      	ands	r1, r2
    5e0c:	2201      	movs	r2, #1
    5e0e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5e10:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5e12:	2204      	movs	r2, #4
    5e14:	4669      	mov	r1, sp
    5e16:	6820      	ldr	r0, [r4, #0]
    5e18:	4b47      	ldr	r3, [pc, #284]	; (5f38 <at25dfx_chip_erase_block+0x214>)
    5e1a:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5e1c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5e1e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5e20:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5e22:	2900      	cmp	r1, #0
    5e24:	d104      	bne.n	5e30 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
    5e26:	0953      	lsrs	r3, r2, #5
    5e28:	01db      	lsls	r3, r3, #7
    5e2a:	4942      	ldr	r1, [pc, #264]	; (5f34 <at25dfx_chip_erase_block+0x210>)
    5e2c:	468c      	mov	ip, r1
    5e2e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e30:	211f      	movs	r1, #31
    5e32:	4011      	ands	r1, r2
    5e34:	2201      	movs	r2, #1
    5e36:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5e38:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5e3a:	6823      	ldr	r3, [r4, #0]
    5e3c:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
    5e3e:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5e40:	7e0b      	ldrb	r3, [r1, #24]
    5e42:	4213      	tst	r3, r2
    5e44:	d0fc      	beq.n	5e40 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
    5e46:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5e48:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5e4a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5e4c:	2900      	cmp	r1, #0
    5e4e:	d104      	bne.n	5e5a <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
    5e50:	0953      	lsrs	r3, r2, #5
    5e52:	01db      	lsls	r3, r3, #7
    5e54:	4937      	ldr	r1, [pc, #220]	; (5f34 <at25dfx_chip_erase_block+0x210>)
    5e56:	468c      	mov	ip, r1
    5e58:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e5a:	211f      	movs	r1, #31
    5e5c:	4011      	ands	r1, r2
    5e5e:	2201      	movs	r2, #1
    5e60:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5e62:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5e64:	6823      	ldr	r3, [r4, #0]
    5e66:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5e68:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5e6a:	07d2      	lsls	r2, r2, #31
    5e6c:	d501      	bpl.n	5e72 <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5e6e:	2205      	movs	r2, #5
    5e70:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    5e72:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5e74:	6802      	ldr	r2, [r0, #0]
    5e76:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5e78:	7e13      	ldrb	r3, [r2, #24]
    5e7a:	420b      	tst	r3, r1
    5e7c:	d0fc      	beq.n	5e78 <at25dfx_chip_erase_block+0x154>
    5e7e:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    5e80:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    5e82:	075b      	lsls	r3, r3, #29
    5e84:	d509      	bpl.n	5e9a <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5e86:	8b53      	ldrh	r3, [r2, #26]
    5e88:	075b      	lsls	r3, r3, #29
    5e8a:	d501      	bpl.n	5e90 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5e8c:	2304      	movs	r3, #4
    5e8e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5e90:	7983      	ldrb	r3, [r0, #6]
    5e92:	2b01      	cmp	r3, #1
    5e94:	d007      	beq.n	5ea6 <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5e96:	6a95      	ldr	r5, [r2, #40]	; 0x28
    5e98:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
    5e9a:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5e9c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
    5e9e:	2004      	movs	r0, #4
    5ea0:	e00c      	b.n	5ebc <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    5ea2:	2320      	movs	r3, #32
    5ea4:	e79f      	b.n	5de6 <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5ea6:	6a95      	ldr	r5, [r2, #40]	; 0x28
    5ea8:	05ed      	lsls	r5, r5, #23
    5eaa:	0ded      	lsrs	r5, r5, #23
    5eac:	e7f5      	b.n	5e9a <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5eae:	79b3      	ldrb	r3, [r6, #6]
    5eb0:	2b01      	cmp	r3, #1
    5eb2:	d019      	beq.n	5ee8 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5eb4:	6a95      	ldr	r5, [r2, #40]	; 0x28
    5eb6:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
    5eb8:	4229      	tst	r1, r5
    5eba:	d019      	beq.n	5ef0 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ebc:	6823      	ldr	r3, [r4, #0]
    5ebe:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5ec0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    5ec2:	420b      	tst	r3, r1
    5ec4:	d0fc      	beq.n	5ec0 <at25dfx_chip_erase_block+0x19c>
    5ec6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    5ec8:	420b      	tst	r3, r1
    5eca:	d000      	beq.n	5ece <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5ecc:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    5ece:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ed0:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5ed2:	7e13      	ldrb	r3, [r2, #24]
    5ed4:	4203      	tst	r3, r0
    5ed6:	d0fc      	beq.n	5ed2 <at25dfx_chip_erase_block+0x1ae>
    5ed8:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    5eda:	4203      	tst	r3, r0
    5edc:	d0ec      	beq.n	5eb8 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5ede:	8b53      	ldrh	r3, [r2, #26]
    5ee0:	4203      	tst	r3, r0
    5ee2:	d0e4      	beq.n	5eae <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5ee4:	8350      	strh	r0, [r2, #26]
    5ee6:	e7e2      	b.n	5eae <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5ee8:	6a95      	ldr	r5, [r2, #40]	; 0x28
    5eea:	05ed      	lsls	r5, r5, #23
    5eec:	0ded      	lsrs	r5, r5, #23
    5eee:	e7e3      	b.n	5eb8 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
    5ef0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5ef2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5ef4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5ef6:	2900      	cmp	r1, #0
    5ef8:	d104      	bne.n	5f04 <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    5efa:	0953      	lsrs	r3, r2, #5
    5efc:	01db      	lsls	r3, r3, #7
    5efe:	490d      	ldr	r1, [pc, #52]	; (5f34 <at25dfx_chip_erase_block+0x210>)
    5f00:	468c      	mov	ip, r1
    5f02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5f04:	211f      	movs	r1, #31
    5f06:	4011      	ands	r1, r2
    5f08:	2201      	movs	r2, #1
    5f0a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5f0c:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    5f0e:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
    5f10:	0fc0      	lsrs	r0, r0, #31
    5f12:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    5f14:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5f16:	2200      	movs	r2, #0
    5f18:	711a      	strb	r2, [r3, #4]
	return status;
    5f1a:	e727      	b.n	5d6c <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
    5f1c:	2017      	movs	r0, #23
    5f1e:	e725      	b.n	5d6c <at25dfx_chip_erase_block+0x48>
    5f20:	4b03      	ldr	r3, [pc, #12]	; (5f30 <at25dfx_chip_erase_block+0x20c>)
    5f22:	4798      	blx	r3
		return status;
    5f24:	2005      	movs	r0, #5
    5f26:	e721      	b.n	5d6c <at25dfx_chip_erase_block+0x48>
    5f28:	00012730 	.word	0x00012730
    5f2c:	0000cc29 	.word	0x0000cc29
    5f30:	0000cc69 	.word	0x0000cc69
    5f34:	41004400 	.word	0x41004400
    5f38:	00008c3d 	.word	0x00008c3d

00005f3c <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    5f3c:	b570      	push	{r4, r5, r6, lr}
    5f3e:	b082      	sub	sp, #8
    5f40:	0004      	movs	r4, r0
    5f42:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    5f44:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
    5f46:	4b35      	ldr	r3, [pc, #212]	; (601c <at25dfx_chip_set_global_sector_protect+0xe0>)
    5f48:	4798      	blx	r3
	if (module->locked) {
    5f4a:	7933      	ldrb	r3, [r6, #4]
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d160      	bne.n	6012 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
    5f50:	3301      	adds	r3, #1
    5f52:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
    5f54:	4b32      	ldr	r3, [pc, #200]	; (6020 <at25dfx_chip_set_global_sector_protect+0xe4>)
    5f56:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5f58:	2306      	movs	r3, #6
    5f5a:	466a      	mov	r2, sp
    5f5c:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5f5e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5f60:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5f62:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5f64:	2900      	cmp	r1, #0
    5f66:	d104      	bne.n	5f72 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    5f68:	0953      	lsrs	r3, r2, #5
    5f6a:	01db      	lsls	r3, r3, #7
    5f6c:	492d      	ldr	r1, [pc, #180]	; (6024 <at25dfx_chip_set_global_sector_protect+0xe8>)
    5f6e:	468c      	mov	ip, r1
    5f70:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5f72:	211f      	movs	r1, #31
    5f74:	4011      	ands	r1, r2
    5f76:	2201      	movs	r2, #1
    5f78:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5f7a:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5f7c:	2201      	movs	r2, #1
    5f7e:	4669      	mov	r1, sp
    5f80:	6820      	ldr	r0, [r4, #0]
    5f82:	4b29      	ldr	r3, [pc, #164]	; (6028 <at25dfx_chip_set_global_sector_protect+0xec>)
    5f84:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5f86:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5f88:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5f8a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5f8c:	2900      	cmp	r1, #0
    5f8e:	d104      	bne.n	5f9a <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5f90:	0953      	lsrs	r3, r2, #5
    5f92:	01db      	lsls	r3, r3, #7
    5f94:	4923      	ldr	r1, [pc, #140]	; (6024 <at25dfx_chip_set_global_sector_protect+0xe8>)
    5f96:	468c      	mov	ip, r1
    5f98:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5f9a:	211f      	movs	r1, #31
    5f9c:	4011      	ands	r1, r2
    5f9e:	2201      	movs	r2, #1
    5fa0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5fa2:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    5fa4:	233c      	movs	r3, #60	; 0x3c
    5fa6:	1e6a      	subs	r2, r5, #1
    5fa8:	4195      	sbcs	r5, r2
    5faa:	426d      	negs	r5, r5
    5fac:	402b      	ands	r3, r5
    5fae:	466a      	mov	r2, sp
    5fb0:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
    5fb2:	2301      	movs	r3, #1
    5fb4:	466a      	mov	r2, sp
    5fb6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5fb8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5fba:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5fbc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5fbe:	2900      	cmp	r1, #0
    5fc0:	d104      	bne.n	5fcc <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    5fc2:	0953      	lsrs	r3, r2, #5
    5fc4:	01db      	lsls	r3, r3, #7
    5fc6:	4917      	ldr	r1, [pc, #92]	; (6024 <at25dfx_chip_set_global_sector_protect+0xe8>)
    5fc8:	468c      	mov	ip, r1
    5fca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5fcc:	211f      	movs	r1, #31
    5fce:	4011      	ands	r1, r2
    5fd0:	2201      	movs	r2, #1
    5fd2:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5fd4:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5fd6:	2201      	movs	r2, #1
    5fd8:	4669      	mov	r1, sp
    5fda:	6820      	ldr	r0, [r4, #0]
    5fdc:	4d12      	ldr	r5, [pc, #72]	; (6028 <at25dfx_chip_set_global_sector_protect+0xec>)
    5fde:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    5fe0:	2201      	movs	r2, #1
    5fe2:	466b      	mov	r3, sp
    5fe4:	1dd9      	adds	r1, r3, #7
    5fe6:	6820      	ldr	r0, [r4, #0]
    5fe8:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    5fea:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5fec:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5fee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5ff0:	2900      	cmp	r1, #0
    5ff2:	d104      	bne.n	5ffe <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    5ff4:	0953      	lsrs	r3, r2, #5
    5ff6:	01db      	lsls	r3, r3, #7
    5ff8:	490a      	ldr	r1, [pc, #40]	; (6024 <at25dfx_chip_set_global_sector_protect+0xe8>)
    5ffa:	468c      	mov	ip, r1
    5ffc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ffe:	211f      	movs	r1, #31
    6000:	4011      	ands	r1, r2
    6002:	2201      	movs	r2, #1
    6004:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    6006:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    6008:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    600a:	2200      	movs	r2, #0
    600c:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    600e:	2000      	movs	r0, #0
    6010:	e002      	b.n	6018 <at25dfx_chip_set_global_sector_protect+0xdc>
    6012:	4b03      	ldr	r3, [pc, #12]	; (6020 <at25dfx_chip_set_global_sector_protect+0xe4>)
    6014:	4798      	blx	r3
		return status;
    6016:	2005      	movs	r0, #5
}
    6018:	b002      	add	sp, #8
    601a:	bd70      	pop	{r4, r5, r6, pc}
    601c:	0000cc29 	.word	0x0000cc29
    6020:	0000cc69 	.word	0x0000cc69
    6024:	41004400 	.word	0x41004400
    6028:	00008c3d 	.word	0x00008c3d

0000602c <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    602c:	b530      	push	{r4, r5, lr}
    602e:	b083      	sub	sp, #12
    6030:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    6032:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    6034:	4b1c      	ldr	r3, [pc, #112]	; (60a8 <at25dfx_chip_sleep+0x7c>)
    6036:	4798      	blx	r3
	if (module->locked) {
    6038:	792b      	ldrb	r3, [r5, #4]
    603a:	2b00      	cmp	r3, #0
    603c:	d12e      	bne.n	609c <at25dfx_chip_sleep+0x70>
		module->locked = true;
    603e:	3301      	adds	r3, #1
    6040:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    6042:	4b1a      	ldr	r3, [pc, #104]	; (60ac <at25dfx_chip_sleep+0x80>)
    6044:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    6046:	23b9      	movs	r3, #185	; 0xb9
    6048:	466a      	mov	r2, sp
    604a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    604c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    604e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6050:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6052:	2900      	cmp	r1, #0
    6054:	d104      	bne.n	6060 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    6056:	0953      	lsrs	r3, r2, #5
    6058:	01db      	lsls	r3, r3, #7
    605a:	4915      	ldr	r1, [pc, #84]	; (60b0 <at25dfx_chip_sleep+0x84>)
    605c:	468c      	mov	ip, r1
    605e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6060:	211f      	movs	r1, #31
    6062:	4011      	ands	r1, r2
    6064:	2201      	movs	r2, #1
    6066:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    6068:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    606a:	2201      	movs	r2, #1
    606c:	4669      	mov	r1, sp
    606e:	6820      	ldr	r0, [r4, #0]
    6070:	4b10      	ldr	r3, [pc, #64]	; (60b4 <at25dfx_chip_sleep+0x88>)
    6072:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    6074:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    6076:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6078:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    607a:	2900      	cmp	r1, #0
    607c:	d104      	bne.n	6088 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    607e:	0953      	lsrs	r3, r2, #5
    6080:	01db      	lsls	r3, r3, #7
    6082:	490b      	ldr	r1, [pc, #44]	; (60b0 <at25dfx_chip_sleep+0x84>)
    6084:	468c      	mov	ip, r1
    6086:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6088:	211f      	movs	r1, #31
    608a:	4011      	ands	r1, r2
    608c:	2201      	movs	r2, #1
    608e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    6090:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    6092:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    6094:	2200      	movs	r2, #0
    6096:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    6098:	2000      	movs	r0, #0
    609a:	e002      	b.n	60a2 <at25dfx_chip_sleep+0x76>
    609c:	4b03      	ldr	r3, [pc, #12]	; (60ac <at25dfx_chip_sleep+0x80>)
    609e:	4798      	blx	r3
		return status;
    60a0:	2005      	movs	r0, #5
}
    60a2:	b003      	add	sp, #12
    60a4:	bd30      	pop	{r4, r5, pc}
    60a6:	46c0      	nop			; (mov r8, r8)
    60a8:	0000cc29 	.word	0x0000cc29
    60ac:	0000cc69 	.word	0x0000cc69
    60b0:	41004400 	.word	0x41004400
    60b4:	00008c3d 	.word	0x00008c3d

000060b8 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    60b8:	b530      	push	{r4, r5, lr}
    60ba:	b083      	sub	sp, #12
    60bc:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    60be:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    60c0:	4b1c      	ldr	r3, [pc, #112]	; (6134 <at25dfx_chip_wake+0x7c>)
    60c2:	4798      	blx	r3
	if (module->locked) {
    60c4:	792b      	ldrb	r3, [r5, #4]
    60c6:	2b00      	cmp	r3, #0
    60c8:	d12e      	bne.n	6128 <at25dfx_chip_wake+0x70>
		module->locked = true;
    60ca:	3301      	adds	r3, #1
    60cc:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    60ce:	4b1a      	ldr	r3, [pc, #104]	; (6138 <at25dfx_chip_wake+0x80>)
    60d0:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    60d2:	23ab      	movs	r3, #171	; 0xab
    60d4:	466a      	mov	r2, sp
    60d6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    60d8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    60da:	09d1      	lsrs	r1, r2, #7
		return NULL;
    60dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60de:	2900      	cmp	r1, #0
    60e0:	d104      	bne.n	60ec <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    60e2:	0953      	lsrs	r3, r2, #5
    60e4:	01db      	lsls	r3, r3, #7
    60e6:	4915      	ldr	r1, [pc, #84]	; (613c <at25dfx_chip_wake+0x84>)
    60e8:	468c      	mov	ip, r1
    60ea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    60ec:	211f      	movs	r1, #31
    60ee:	4011      	ands	r1, r2
    60f0:	2201      	movs	r2, #1
    60f2:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    60f4:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    60f6:	2201      	movs	r2, #1
    60f8:	4669      	mov	r1, sp
    60fa:	6820      	ldr	r0, [r4, #0]
    60fc:	4b10      	ldr	r3, [pc, #64]	; (6140 <at25dfx_chip_wake+0x88>)
    60fe:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    6100:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    6102:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6104:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6106:	2900      	cmp	r1, #0
    6108:	d104      	bne.n	6114 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    610a:	0953      	lsrs	r3, r2, #5
    610c:	01db      	lsls	r3, r3, #7
    610e:	490b      	ldr	r1, [pc, #44]	; (613c <at25dfx_chip_wake+0x84>)
    6110:	468c      	mov	ip, r1
    6112:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6114:	211f      	movs	r1, #31
    6116:	4011      	ands	r1, r2
    6118:	2201      	movs	r2, #1
    611a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    611c:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    611e:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    6120:	2200      	movs	r2, #0
    6122:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    6124:	2000      	movs	r0, #0
    6126:	e002      	b.n	612e <at25dfx_chip_wake+0x76>
    6128:	4b03      	ldr	r3, [pc, #12]	; (6138 <at25dfx_chip_wake+0x80>)
    612a:	4798      	blx	r3
		return status;
    612c:	2005      	movs	r0, #5
    612e:	b003      	add	sp, #12
    6130:	bd30      	pop	{r4, r5, pc}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	0000cc29 	.word	0x0000cc29
    6138:	0000cc69 	.word	0x0000cc69
    613c:	41004400 	.word	0x41004400
    6140:	00008c3d 	.word	0x00008c3d

00006144 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    6144:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    6146:	4b2e      	ldr	r3, [pc, #184]	; (6200 <ADC_Handler+0xbc>)
    6148:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    614a:	6823      	ldr	r3, [r4, #0]
    614c:	7e1d      	ldrb	r5, [r3, #24]
    614e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    6150:	07ea      	lsls	r2, r5, #31
    6152:	d505      	bpl.n	6160 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    6154:	7ee2      	ldrb	r2, [r4, #27]
    6156:	07d2      	lsls	r2, r2, #31
    6158:	d502      	bpl.n	6160 <ADC_Handler+0x1c>
    615a:	7ea2      	ldrb	r2, [r4, #26]
    615c:	07d2      	lsls	r2, r2, #31
    615e:	d416      	bmi.n	618e <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    6160:	076b      	lsls	r3, r5, #29
    6162:	d508      	bpl.n	6176 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    6164:	2304      	movs	r3, #4
    6166:	6822      	ldr	r2, [r4, #0]
    6168:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    616a:	7ee3      	ldrb	r3, [r4, #27]
    616c:	079b      	lsls	r3, r3, #30
    616e:	d502      	bpl.n	6176 <ADC_Handler+0x32>
    6170:	7ea3      	ldrb	r3, [r4, #26]
    6172:	079b      	lsls	r3, r3, #30
    6174:	d43c      	bmi.n	61f0 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    6176:	07ab      	lsls	r3, r5, #30
    6178:	d508      	bpl.n	618c <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    617a:	2302      	movs	r3, #2
    617c:	6822      	ldr	r2, [r4, #0]
    617e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    6180:	7ee3      	ldrb	r3, [r4, #27]
    6182:	075b      	lsls	r3, r3, #29
    6184:	d502      	bpl.n	618c <ADC_Handler+0x48>
    6186:	7ea3      	ldrb	r3, [r4, #26]
    6188:	075b      	lsls	r3, r3, #29
    618a:	d435      	bmi.n	61f8 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    618c:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    618e:	2201      	movs	r2, #1
    6190:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    6192:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6194:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    6196:	b25b      	sxtb	r3, r3
    6198:	2b00      	cmp	r3, #0
    619a:	dbfb      	blt.n	6194 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    619c:	6961      	ldr	r1, [r4, #20]
    619e:	1c8b      	adds	r3, r1, #2
    61a0:	6163      	str	r3, [r4, #20]
    61a2:	8b53      	ldrh	r3, [r2, #26]
    61a4:	b29b      	uxth	r3, r3
    61a6:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    61a8:	8b23      	ldrh	r3, [r4, #24]
    61aa:	3b01      	subs	r3, #1
    61ac:	b29b      	uxth	r3, r3
    61ae:	8323      	strh	r3, [r4, #24]
    61b0:	2b00      	cmp	r3, #0
    61b2:	d011      	beq.n	61d8 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    61b4:	7f63      	ldrb	r3, [r4, #29]
    61b6:	2b00      	cmp	r3, #0
    61b8:	d0d2      	beq.n	6160 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    61ba:	6822      	ldr	r2, [r4, #0]
    61bc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    61be:	b25b      	sxtb	r3, r3
    61c0:	2b00      	cmp	r3, #0
    61c2:	dbfb      	blt.n	61bc <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    61c4:	7b13      	ldrb	r3, [r2, #12]
    61c6:	2102      	movs	r1, #2
    61c8:	430b      	orrs	r3, r1
    61ca:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    61cc:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    61ce:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    61d0:	b25b      	sxtb	r3, r3
    61d2:	2b00      	cmp	r3, #0
    61d4:	dbfb      	blt.n	61ce <ADC_Handler+0x8a>
    61d6:	e7c3      	b.n	6160 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    61d8:	7f23      	ldrb	r3, [r4, #28]
    61da:	2b05      	cmp	r3, #5
    61dc:	d1c0      	bne.n	6160 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    61de:	2300      	movs	r3, #0
    61e0:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    61e2:	3301      	adds	r3, #1
    61e4:	6822      	ldr	r2, [r4, #0]
    61e6:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    61e8:	0020      	movs	r0, r4
    61ea:	68a3      	ldr	r3, [r4, #8]
    61ec:	4798      	blx	r3
    61ee:	e7b7      	b.n	6160 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    61f0:	0020      	movs	r0, r4
    61f2:	68e3      	ldr	r3, [r4, #12]
    61f4:	4798      	blx	r3
    61f6:	e7be      	b.n	6176 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    61f8:	6923      	ldr	r3, [r4, #16]
    61fa:	0020      	movs	r0, r4
    61fc:	4798      	blx	r3
}
    61fe:	e7c5      	b.n	618c <ADC_Handler+0x48>
    6200:	20000848 	.word	0x20000848

00006204 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6204:	4a04      	ldr	r2, [pc, #16]	; (6218 <_extint_enable+0x14>)
    6206:	7813      	ldrb	r3, [r2, #0]
    6208:	2102      	movs	r1, #2
    620a:	430b      	orrs	r3, r1
    620c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    620e:	7853      	ldrb	r3, [r2, #1]
    6210:	b25b      	sxtb	r3, r3
    6212:	2b00      	cmp	r3, #0
    6214:	dbfb      	blt.n	620e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6216:	4770      	bx	lr
    6218:	40001800 	.word	0x40001800

0000621c <_system_extint_init>:
{
    621c:	b500      	push	{lr}
    621e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6220:	4a12      	ldr	r2, [pc, #72]	; (626c <_system_extint_init+0x50>)
    6222:	6993      	ldr	r3, [r2, #24]
    6224:	2140      	movs	r1, #64	; 0x40
    6226:	430b      	orrs	r3, r1
    6228:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    622a:	a901      	add	r1, sp, #4
    622c:	2300      	movs	r3, #0
    622e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    6230:	2005      	movs	r0, #5
    6232:	4b0f      	ldr	r3, [pc, #60]	; (6270 <_system_extint_init+0x54>)
    6234:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    6236:	2005      	movs	r0, #5
    6238:	4b0e      	ldr	r3, [pc, #56]	; (6274 <_system_extint_init+0x58>)
    623a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    623c:	4a0e      	ldr	r2, [pc, #56]	; (6278 <_system_extint_init+0x5c>)
    623e:	7813      	ldrb	r3, [r2, #0]
    6240:	2101      	movs	r1, #1
    6242:	430b      	orrs	r3, r1
    6244:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6246:	7853      	ldrb	r3, [r2, #1]
    6248:	b25b      	sxtb	r3, r3
    624a:	2b00      	cmp	r3, #0
    624c:	dbfb      	blt.n	6246 <_system_extint_init+0x2a>
    624e:	4b0b      	ldr	r3, [pc, #44]	; (627c <_system_extint_init+0x60>)
    6250:	0019      	movs	r1, r3
    6252:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    6254:	2200      	movs	r2, #0
    6256:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6258:	4299      	cmp	r1, r3
    625a:	d1fc      	bne.n	6256 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    625c:	2210      	movs	r2, #16
    625e:	4b08      	ldr	r3, [pc, #32]	; (6280 <_system_extint_init+0x64>)
    6260:	601a      	str	r2, [r3, #0]
	_extint_enable();
    6262:	4b08      	ldr	r3, [pc, #32]	; (6284 <_system_extint_init+0x68>)
    6264:	4798      	blx	r3
}
    6266:	b003      	add	sp, #12
    6268:	bd00      	pop	{pc}
    626a:	46c0      	nop			; (mov r8, r8)
    626c:	40000400 	.word	0x40000400
    6270:	0000d2dd 	.word	0x0000d2dd
    6274:	0000d251 	.word	0x0000d251
    6278:	40001800 	.word	0x40001800
    627c:	2000084c 	.word	0x2000084c
    6280:	e000e100 	.word	0xe000e100
    6284:	00006205 	.word	0x00006205

00006288 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6288:	2300      	movs	r3, #0
    628a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    628c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    628e:	2201      	movs	r2, #1
    6290:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    6292:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    6294:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6296:	3302      	adds	r3, #2
    6298:	72c3      	strb	r3, [r0, #11]
}
    629a:	4770      	bx	lr

0000629c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    629c:	b5f0      	push	{r4, r5, r6, r7, lr}
    629e:	b083      	sub	sp, #12
    62a0:	0005      	movs	r5, r0
    62a2:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    62a4:	a901      	add	r1, sp, #4
    62a6:	2300      	movs	r3, #0
    62a8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    62aa:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    62ac:	7923      	ldrb	r3, [r4, #4]
    62ae:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    62b0:	7a23      	ldrb	r3, [r4, #8]
    62b2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    62b4:	7820      	ldrb	r0, [r4, #0]
    62b6:	4b15      	ldr	r3, [pc, #84]	; (630c <extint_chan_set_config+0x70>)
    62b8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    62ba:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    62bc:	2d1f      	cmp	r5, #31
    62be:	d800      	bhi.n	62c2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    62c0:	4813      	ldr	r0, [pc, #76]	; (6310 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    62c2:	2207      	movs	r2, #7
    62c4:	402a      	ands	r2, r5
    62c6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    62c8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    62ca:	7aa3      	ldrb	r3, [r4, #10]
    62cc:	2b00      	cmp	r3, #0
    62ce:	d001      	beq.n	62d4 <extint_chan_set_config+0x38>
    62d0:	2308      	movs	r3, #8
    62d2:	431f      	orrs	r7, r3
    62d4:	08eb      	lsrs	r3, r5, #3
    62d6:	009b      	lsls	r3, r3, #2
    62d8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    62da:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    62dc:	260f      	movs	r6, #15
    62de:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    62e0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    62e2:	4097      	lsls	r7, r2
    62e4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    62e6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    62e8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    62ea:	7a63      	ldrb	r3, [r4, #9]
    62ec:	2b00      	cmp	r3, #0
    62ee:	d106      	bne.n	62fe <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    62f0:	6943      	ldr	r3, [r0, #20]
    62f2:	2201      	movs	r2, #1
    62f4:	40aa      	lsls	r2, r5
    62f6:	4393      	bics	r3, r2
    62f8:	6143      	str	r3, [r0, #20]
	}
}
    62fa:	b003      	add	sp, #12
    62fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    62fe:	6942      	ldr	r2, [r0, #20]
    6300:	2301      	movs	r3, #1
    6302:	40ab      	lsls	r3, r5
    6304:	4313      	orrs	r3, r2
    6306:	6143      	str	r3, [r0, #20]
    6308:	e7f7      	b.n	62fa <extint_chan_set_config+0x5e>
    630a:	46c0      	nop			; (mov r8, r8)
    630c:	0000d3d5 	.word	0x0000d3d5
    6310:	40001800 	.word	0x40001800

00006314 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6314:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6316:	2207      	movs	r2, #7
    6318:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    631a:	421a      	tst	r2, r3
    631c:	d1fc      	bne.n	6318 <_i2c_master_wait_for_sync+0x4>
}
    631e:	4770      	bx	lr

00006320 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    6320:	b5f0      	push	{r4, r5, r6, r7, lr}
    6322:	46d6      	mov	lr, sl
    6324:	464f      	mov	r7, r9
    6326:	4646      	mov	r6, r8
    6328:	b5c0      	push	{r6, r7, lr}
    632a:	b08a      	sub	sp, #40	; 0x28
    632c:	0006      	movs	r6, r0
    632e:	000f      	movs	r7, r1
    6330:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    6332:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6334:	0008      	movs	r0, r1
    6336:	4b97      	ldr	r3, [pc, #604]	; (6594 <i2c_master_init+0x274>)
    6338:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    633a:	4a97      	ldr	r2, [pc, #604]	; (6598 <i2c_master_init+0x278>)
    633c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    633e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6340:	2301      	movs	r3, #1
    6342:	40ab      	lsls	r3, r5
    6344:	430b      	orrs	r3, r1
    6346:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    6348:	a909      	add	r1, sp, #36	; 0x24
    634a:	7b23      	ldrb	r3, [r4, #12]
    634c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    634e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6350:	b2c5      	uxtb	r5, r0
    6352:	0028      	movs	r0, r5
    6354:	4b91      	ldr	r3, [pc, #580]	; (659c <i2c_master_init+0x27c>)
    6356:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6358:	0028      	movs	r0, r5
    635a:	4b91      	ldr	r3, [pc, #580]	; (65a0 <i2c_master_init+0x280>)
    635c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    635e:	7b20      	ldrb	r0, [r4, #12]
    6360:	2100      	movs	r1, #0
    6362:	4b90      	ldr	r3, [pc, #576]	; (65a4 <i2c_master_init+0x284>)
    6364:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6366:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    6368:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    636a:	079b      	lsls	r3, r3, #30
    636c:	d505      	bpl.n	637a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    636e:	b00a      	add	sp, #40	; 0x28
    6370:	bc1c      	pop	{r2, r3, r4}
    6372:	4690      	mov	r8, r2
    6374:	4699      	mov	r9, r3
    6376:	46a2      	mov	sl, r4
    6378:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    637a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    637c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    637e:	07db      	lsls	r3, r3, #31
    6380:	d4f5      	bmi.n	636e <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    6382:	2314      	movs	r3, #20
    6384:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6386:	6833      	ldr	r3, [r6, #0]
    6388:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    638a:	0018      	movs	r0, r3
    638c:	4b81      	ldr	r3, [pc, #516]	; (6594 <i2c_master_init+0x274>)
    638e:	4798      	blx	r3
    6390:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6392:	2380      	movs	r3, #128	; 0x80
    6394:	aa08      	add	r2, sp, #32
    6396:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6398:	2300      	movs	r3, #0
    639a:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    639c:	2201      	movs	r2, #1
    639e:	a908      	add	r1, sp, #32
    63a0:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    63a2:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    63a4:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    63a6:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    63a8:	2800      	cmp	r0, #0
    63aa:	d100      	bne.n	63ae <i2c_master_init+0x8e>
    63ac:	e0af      	b.n	650e <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    63ae:	ab08      	add	r3, sp, #32
    63b0:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    63b2:	2302      	movs	r3, #2
    63b4:	aa08      	add	r2, sp, #32
    63b6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    63b8:	0c00      	lsrs	r0, r0, #16
    63ba:	b2c0      	uxtb	r0, r0
    63bc:	0011      	movs	r1, r2
    63be:	4b7a      	ldr	r3, [pc, #488]	; (65a8 <i2c_master_init+0x288>)
    63c0:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    63c2:	2f00      	cmp	r7, #0
    63c4:	d100      	bne.n	63c8 <i2c_master_init+0xa8>
    63c6:	e0a7      	b.n	6518 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    63c8:	ab08      	add	r3, sp, #32
    63ca:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    63cc:	2302      	movs	r3, #2
    63ce:	aa08      	add	r2, sp, #32
    63d0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    63d2:	0c3f      	lsrs	r7, r7, #16
    63d4:	b2f8      	uxtb	r0, r7
    63d6:	0011      	movs	r1, r2
    63d8:	4b73      	ldr	r3, [pc, #460]	; (65a8 <i2c_master_init+0x288>)
    63da:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    63dc:	8aa3      	ldrh	r3, [r4, #20]
    63de:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    63e0:	8ae3      	ldrh	r3, [r4, #22]
    63e2:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    63e4:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    63e6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    63e8:	2b00      	cmp	r3, #0
    63ea:	d104      	bne.n	63f6 <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    63ec:	4b6f      	ldr	r3, [pc, #444]	; (65ac <i2c_master_init+0x28c>)
    63ee:	789b      	ldrb	r3, [r3, #2]
    63f0:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    63f2:	0fdb      	lsrs	r3, r3, #31
    63f4:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    63f6:	68a1      	ldr	r1, [r4, #8]
    63f8:	6923      	ldr	r3, [r4, #16]
    63fa:	430b      	orrs	r3, r1
    63fc:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    63fe:	2224      	movs	r2, #36	; 0x24
    6400:	5ca2      	ldrb	r2, [r4, r2]
    6402:	2a00      	cmp	r2, #0
    6404:	d002      	beq.n	640c <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    6406:	2280      	movs	r2, #128	; 0x80
    6408:	05d2      	lsls	r2, r2, #23
    640a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    640c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    640e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    6410:	222c      	movs	r2, #44	; 0x2c
    6412:	5ca2      	ldrb	r2, [r4, r2]
    6414:	2a00      	cmp	r2, #0
    6416:	d103      	bne.n	6420 <i2c_master_init+0x100>
    6418:	2280      	movs	r2, #128	; 0x80
    641a:	0492      	lsls	r2, r2, #18
    641c:	4291      	cmp	r1, r2
    641e:	d102      	bne.n	6426 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    6420:	2280      	movs	r2, #128	; 0x80
    6422:	0512      	lsls	r2, r2, #20
    6424:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    6426:	222d      	movs	r2, #45	; 0x2d
    6428:	5ca2      	ldrb	r2, [r4, r2]
    642a:	2a00      	cmp	r2, #0
    642c:	d002      	beq.n	6434 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    642e:	2280      	movs	r2, #128	; 0x80
    6430:	0412      	lsls	r2, r2, #16
    6432:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    6434:	222e      	movs	r2, #46	; 0x2e
    6436:	5ca2      	ldrb	r2, [r4, r2]
    6438:	2a00      	cmp	r2, #0
    643a:	d002      	beq.n	6442 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    643c:	2280      	movs	r2, #128	; 0x80
    643e:	03d2      	lsls	r2, r2, #15
    6440:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    6442:	4642      	mov	r2, r8
    6444:	6812      	ldr	r2, [r2, #0]
    6446:	4313      	orrs	r3, r2
    6448:	4642      	mov	r2, r8
    644a:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    644c:	2380      	movs	r3, #128	; 0x80
    644e:	005b      	lsls	r3, r3, #1
    6450:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    6452:	0028      	movs	r0, r5
    6454:	3014      	adds	r0, #20
    6456:	b2c0      	uxtb	r0, r0
    6458:	4b55      	ldr	r3, [pc, #340]	; (65b0 <i2c_master_init+0x290>)
    645a:	4798      	blx	r3
    645c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    645e:	23fa      	movs	r3, #250	; 0xfa
    6460:	009b      	lsls	r3, r3, #2
    6462:	6822      	ldr	r2, [r4, #0]
    6464:	435a      	muls	r2, r3
    6466:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6468:	6863      	ldr	r3, [r4, #4]
    646a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    646c:	4d51      	ldr	r5, [pc, #324]	; (65b4 <i2c_master_init+0x294>)
    646e:	47a8      	blx	r5
    6470:	9000      	str	r0, [sp, #0]
    6472:	9101      	str	r1, [sp, #4]
    6474:	464b      	mov	r3, r9
    6476:	0058      	lsls	r0, r3, #1
    6478:	47a8      	blx	r5
    647a:	9002      	str	r0, [sp, #8]
    647c:	9103      	str	r1, [sp, #12]
    647e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    6480:	47a8      	blx	r5
    6482:	9004      	str	r0, [sp, #16]
    6484:	9105      	str	r1, [sp, #20]
    6486:	4f4c      	ldr	r7, [pc, #304]	; (65b8 <i2c_master_init+0x298>)
    6488:	4a4c      	ldr	r2, [pc, #304]	; (65bc <i2c_master_init+0x29c>)
    648a:	4b4d      	ldr	r3, [pc, #308]	; (65c0 <i2c_master_init+0x2a0>)
    648c:	9800      	ldr	r0, [sp, #0]
    648e:	9901      	ldr	r1, [sp, #4]
    6490:	47b8      	blx	r7
    6492:	0002      	movs	r2, r0
    6494:	000b      	movs	r3, r1
    6496:	9804      	ldr	r0, [sp, #16]
    6498:	9905      	ldr	r1, [sp, #20]
    649a:	47b8      	blx	r7
    649c:	4e49      	ldr	r6, [pc, #292]	; (65c4 <i2c_master_init+0x2a4>)
    649e:	2200      	movs	r2, #0
    64a0:	4b49      	ldr	r3, [pc, #292]	; (65c8 <i2c_master_init+0x2a8>)
    64a2:	47b0      	blx	r6
    64a4:	9004      	str	r0, [sp, #16]
    64a6:	9105      	str	r1, [sp, #20]
    64a8:	4648      	mov	r0, r9
    64aa:	47a8      	blx	r5
    64ac:	0002      	movs	r2, r0
    64ae:	000b      	movs	r3, r1
    64b0:	9804      	ldr	r0, [sp, #16]
    64b2:	9905      	ldr	r1, [sp, #20]
    64b4:	47b8      	blx	r7
    64b6:	0002      	movs	r2, r0
    64b8:	000b      	movs	r3, r1
    64ba:	4d44      	ldr	r5, [pc, #272]	; (65cc <i2c_master_init+0x2ac>)
    64bc:	9800      	ldr	r0, [sp, #0]
    64be:	9901      	ldr	r1, [sp, #4]
    64c0:	47a8      	blx	r5
    64c2:	9a02      	ldr	r2, [sp, #8]
    64c4:	9b03      	ldr	r3, [sp, #12]
    64c6:	47b0      	blx	r6
    64c8:	2200      	movs	r2, #0
    64ca:	4b41      	ldr	r3, [pc, #260]	; (65d0 <i2c_master_init+0x2b0>)
    64cc:	47a8      	blx	r5
    64ce:	9a02      	ldr	r2, [sp, #8]
    64d0:	9b03      	ldr	r3, [sp, #12]
    64d2:	4d40      	ldr	r5, [pc, #256]	; (65d4 <i2c_master_init+0x2b4>)
    64d4:	47a8      	blx	r5
    64d6:	4b40      	ldr	r3, [pc, #256]	; (65d8 <i2c_master_init+0x2b8>)
    64d8:	4798      	blx	r3
    64da:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    64dc:	2380      	movs	r3, #128	; 0x80
    64de:	049b      	lsls	r3, r3, #18
    64e0:	68a2      	ldr	r2, [r4, #8]
    64e2:	429a      	cmp	r2, r3
    64e4:	d01e      	beq.n	6524 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    64e6:	0003      	movs	r3, r0
    64e8:	2040      	movs	r0, #64	; 0x40
    64ea:	2dff      	cmp	r5, #255	; 0xff
    64ec:	d900      	bls.n	64f0 <i2c_master_init+0x1d0>
    64ee:	e73e      	b.n	636e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    64f0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    64f2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    64f4:	25ff      	movs	r5, #255	; 0xff
    64f6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    64f8:	0624      	lsls	r4, r4, #24
    64fa:	4325      	orrs	r5, r4
    64fc:	0400      	lsls	r0, r0, #16
    64fe:	23ff      	movs	r3, #255	; 0xff
    6500:	041b      	lsls	r3, r3, #16
    6502:	4018      	ands	r0, r3
    6504:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6506:	4643      	mov	r3, r8
    6508:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    650a:	2000      	movs	r0, #0
    650c:	e72f      	b.n	636e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    650e:	2100      	movs	r1, #0
    6510:	4640      	mov	r0, r8
    6512:	4b32      	ldr	r3, [pc, #200]	; (65dc <i2c_master_init+0x2bc>)
    6514:	4798      	blx	r3
    6516:	e74a      	b.n	63ae <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    6518:	2101      	movs	r1, #1
    651a:	4640      	mov	r0, r8
    651c:	4b2f      	ldr	r3, [pc, #188]	; (65dc <i2c_master_init+0x2bc>)
    651e:	4798      	blx	r3
    6520:	0007      	movs	r7, r0
    6522:	e751      	b.n	63c8 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6524:	26fa      	movs	r6, #250	; 0xfa
    6526:	00b6      	lsls	r6, r6, #2
    6528:	4653      	mov	r3, sl
    652a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    652c:	9800      	ldr	r0, [sp, #0]
    652e:	9901      	ldr	r1, [sp, #4]
    6530:	0002      	movs	r2, r0
    6532:	000b      	movs	r3, r1
    6534:	4c23      	ldr	r4, [pc, #140]	; (65c4 <i2c_master_init+0x2a4>)
    6536:	47a0      	blx	r4
    6538:	9000      	str	r0, [sp, #0]
    653a:	9101      	str	r1, [sp, #4]
    653c:	0030      	movs	r0, r6
    653e:	4b1d      	ldr	r3, [pc, #116]	; (65b4 <i2c_master_init+0x294>)
    6540:	4798      	blx	r3
    6542:	2200      	movs	r2, #0
    6544:	4b26      	ldr	r3, [pc, #152]	; (65e0 <i2c_master_init+0x2c0>)
    6546:	47b8      	blx	r7
    6548:	0002      	movs	r2, r0
    654a:	000b      	movs	r3, r1
    654c:	9800      	ldr	r0, [sp, #0]
    654e:	9901      	ldr	r1, [sp, #4]
    6550:	4c20      	ldr	r4, [pc, #128]	; (65d4 <i2c_master_init+0x2b4>)
    6552:	47a0      	blx	r4
    6554:	2200      	movs	r2, #0
    6556:	4b1e      	ldr	r3, [pc, #120]	; (65d0 <i2c_master_init+0x2b0>)
    6558:	4c1c      	ldr	r4, [pc, #112]	; (65cc <i2c_master_init+0x2ac>)
    655a:	47a0      	blx	r4
    655c:	4b1e      	ldr	r3, [pc, #120]	; (65d8 <i2c_master_init+0x2b8>)
    655e:	4798      	blx	r3
    6560:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    6562:	d00c      	beq.n	657e <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    6564:	0031      	movs	r1, r6
    6566:	9807      	ldr	r0, [sp, #28]
    6568:	4b1e      	ldr	r3, [pc, #120]	; (65e4 <i2c_master_init+0x2c4>)
    656a:	4798      	blx	r3
    656c:	3802      	subs	r0, #2
    656e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6570:	002b      	movs	r3, r5
    6572:	2dff      	cmp	r5, #255	; 0xff
    6574:	d80c      	bhi.n	6590 <i2c_master_init+0x270>
    6576:	28ff      	cmp	r0, #255	; 0xff
    6578:	d9bc      	bls.n	64f4 <i2c_master_init+0x1d4>
    657a:	2040      	movs	r0, #64	; 0x40
    657c:	e6f7      	b.n	636e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    657e:	0071      	lsls	r1, r6, #1
    6580:	1e48      	subs	r0, r1, #1
    6582:	9b07      	ldr	r3, [sp, #28]
    6584:	469c      	mov	ip, r3
    6586:	4460      	add	r0, ip
    6588:	4b16      	ldr	r3, [pc, #88]	; (65e4 <i2c_master_init+0x2c4>)
    658a:	4798      	blx	r3
    658c:	3801      	subs	r0, #1
    658e:	e7ef      	b.n	6570 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6590:	2040      	movs	r0, #64	; 0x40
    6592:	e6ec      	b.n	636e <i2c_master_init+0x4e>
    6594:	000093ad 	.word	0x000093ad
    6598:	40000400 	.word	0x40000400
    659c:	0000d2dd 	.word	0x0000d2dd
    65a0:	0000d251 	.word	0x0000d251
    65a4:	000091e9 	.word	0x000091e9
    65a8:	0000d3d5 	.word	0x0000d3d5
    65ac:	41002000 	.word	0x41002000
    65b0:	0000d2f9 	.word	0x0000d2f9
    65b4:	00010059 	.word	0x00010059
    65b8:	0000f4c5 	.word	0x0000f4c5
    65bc:	e826d695 	.word	0xe826d695
    65c0:	3e112e0b 	.word	0x3e112e0b
    65c4:	0000e83d 	.word	0x0000e83d
    65c8:	40240000 	.word	0x40240000
    65cc:	0000f9c5 	.word	0x0000f9c5
    65d0:	3ff00000 	.word	0x3ff00000
    65d4:	0000ee5d 	.word	0x0000ee5d
    65d8:	0000fff1 	.word	0x0000fff1
    65dc:	00009235 	.word	0x00009235
    65e0:	40080000 	.word	0x40080000
    65e4:	0000e4fd 	.word	0x0000e4fd

000065e8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    65e8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    65ea:	7e1a      	ldrb	r2, [r3, #24]
    65ec:	0792      	lsls	r2, r2, #30
    65ee:	d507      	bpl.n	6600 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    65f0:	2202      	movs	r2, #2
    65f2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    65f4:	8b5b      	ldrh	r3, [r3, #26]
    65f6:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    65f8:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    65fa:	17db      	asrs	r3, r3, #31
    65fc:	4018      	ands	r0, r3
}
    65fe:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    6600:	8b5a      	ldrh	r2, [r3, #26]
    6602:	0752      	lsls	r2, r2, #29
    6604:	d506      	bpl.n	6614 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6606:	6859      	ldr	r1, [r3, #4]
    6608:	22c0      	movs	r2, #192	; 0xc0
    660a:	0292      	lsls	r2, r2, #10
    660c:	430a      	orrs	r2, r1
    660e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    6610:	2018      	movs	r0, #24
    6612:	e7f4      	b.n	65fe <_i2c_master_address_response+0x16>
	return STATUS_OK;
    6614:	2000      	movs	r0, #0
    6616:	e7f2      	b.n	65fe <_i2c_master_address_response+0x16>

00006618 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    6618:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    661a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    661c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    661e:	2401      	movs	r4, #1
    6620:	2502      	movs	r5, #2
    6622:	7e11      	ldrb	r1, [r2, #24]
    6624:	4221      	tst	r1, r4
    6626:	d10b      	bne.n	6640 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    6628:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    662a:	4229      	tst	r1, r5
    662c:	d106      	bne.n	663c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    662e:	3301      	adds	r3, #1
    6630:	b29b      	uxth	r3, r3
    6632:	8901      	ldrh	r1, [r0, #8]
    6634:	4299      	cmp	r1, r3
    6636:	d8f4      	bhi.n	6622 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    6638:	2012      	movs	r0, #18
    663a:	e002      	b.n	6642 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    663c:	2000      	movs	r0, #0
    663e:	e000      	b.n	6642 <_i2c_master_wait_for_bus+0x2a>
    6640:	2000      	movs	r0, #0
}
    6642:	bd30      	pop	{r4, r5, pc}

00006644 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    6644:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6646:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6648:	6862      	ldr	r2, [r4, #4]
    664a:	2380      	movs	r3, #128	; 0x80
    664c:	02db      	lsls	r3, r3, #11
    664e:	4313      	orrs	r3, r2
    6650:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    6652:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6654:	4b02      	ldr	r3, [pc, #8]	; (6660 <_i2c_master_send_hs_master_code+0x1c>)
    6656:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    6658:	2301      	movs	r3, #1
    665a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    665c:	bd10      	pop	{r4, pc}
    665e:	46c0      	nop			; (mov r8, r8)
    6660:	00006619 	.word	0x00006619

00006664 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6664:	b5f0      	push	{r4, r5, r6, r7, lr}
    6666:	46de      	mov	lr, fp
    6668:	4657      	mov	r7, sl
    666a:	464e      	mov	r6, r9
    666c:	4645      	mov	r5, r8
    666e:	b5e0      	push	{r5, r6, r7, lr}
    6670:	b083      	sub	sp, #12
    6672:	0006      	movs	r6, r0
    6674:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6676:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6678:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    667a:	682b      	ldr	r3, [r5, #0]
    667c:	011b      	lsls	r3, r3, #4
    667e:	0fdb      	lsrs	r3, r3, #31
    6680:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    6682:	7a4b      	ldrb	r3, [r1, #9]
    6684:	2b00      	cmp	r3, #0
    6686:	d12b      	bne.n	66e0 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6688:	686b      	ldr	r3, [r5, #4]
    668a:	4a58      	ldr	r2, [pc, #352]	; (67ec <_i2c_master_read_packet+0x188>)
    668c:	4013      	ands	r3, r2
    668e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    6690:	464b      	mov	r3, r9
    6692:	7a1b      	ldrb	r3, [r3, #8]
    6694:	2b00      	cmp	r3, #0
    6696:	d127      	bne.n	66e8 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6698:	464b      	mov	r3, r9
    669a:	881b      	ldrh	r3, [r3, #0]
    669c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    669e:	464a      	mov	r2, r9
    66a0:	7a52      	ldrb	r2, [r2, #9]
    66a2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    66a4:	4313      	orrs	r3, r2
    66a6:	2201      	movs	r2, #1
    66a8:	4313      	orrs	r3, r2
    66aa:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    66ac:	0030      	movs	r0, r6
    66ae:	4b50      	ldr	r3, [pc, #320]	; (67f0 <_i2c_master_read_packet+0x18c>)
    66b0:	4798      	blx	r3
    66b2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    66b4:	4653      	mov	r3, sl
    66b6:	2b00      	cmp	r3, #0
    66b8:	d003      	beq.n	66c2 <_i2c_master_read_packet+0x5e>
    66ba:	464b      	mov	r3, r9
    66bc:	885b      	ldrh	r3, [r3, #2]
    66be:	2b01      	cmp	r3, #1
    66c0:	d03b      	beq.n	673a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    66c2:	686b      	ldr	r3, [r5, #4]
    66c4:	4a49      	ldr	r2, [pc, #292]	; (67ec <_i2c_master_read_packet+0x188>)
    66c6:	4013      	ands	r3, r2
    66c8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    66ca:	9b01      	ldr	r3, [sp, #4]
    66cc:	2b00      	cmp	r3, #0
    66ce:	d03a      	beq.n	6746 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    66d0:	9801      	ldr	r0, [sp, #4]
    66d2:	b003      	add	sp, #12
    66d4:	bc3c      	pop	{r2, r3, r4, r5}
    66d6:	4690      	mov	r8, r2
    66d8:	4699      	mov	r9, r3
    66da:	46a2      	mov	sl, r4
    66dc:	46ab      	mov	fp, r5
    66de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    66e0:	7a89      	ldrb	r1, [r1, #10]
    66e2:	4b44      	ldr	r3, [pc, #272]	; (67f4 <_i2c_master_read_packet+0x190>)
    66e4:	4798      	blx	r3
    66e6:	e7cf      	b.n	6688 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    66e8:	464b      	mov	r3, r9
    66ea:	881b      	ldrh	r3, [r3, #0]
    66ec:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    66ee:	464a      	mov	r2, r9
    66f0:	7a52      	ldrb	r2, [r2, #9]
    66f2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    66f4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    66f6:	2280      	movs	r2, #128	; 0x80
    66f8:	0212      	lsls	r2, r2, #8
    66fa:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    66fc:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    66fe:	0030      	movs	r0, r6
    6700:	4b3b      	ldr	r3, [pc, #236]	; (67f0 <_i2c_master_read_packet+0x18c>)
    6702:	4798      	blx	r3
    6704:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6706:	686b      	ldr	r3, [r5, #4]
    6708:	4a38      	ldr	r2, [pc, #224]	; (67ec <_i2c_master_read_packet+0x188>)
    670a:	4013      	ands	r3, r2
    670c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    670e:	2800      	cmp	r0, #0
    6710:	d1de      	bne.n	66d0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    6712:	0030      	movs	r0, r6
    6714:	4b38      	ldr	r3, [pc, #224]	; (67f8 <_i2c_master_read_packet+0x194>)
    6716:	4798      	blx	r3
    6718:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    671a:	2800      	cmp	r0, #0
    671c:	d1d8      	bne.n	66d0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    671e:	464b      	mov	r3, r9
    6720:	881b      	ldrh	r3, [r3, #0]
    6722:	0a1b      	lsrs	r3, r3, #8
    6724:	2278      	movs	r2, #120	; 0x78
    6726:	4313      	orrs	r3, r2
    6728:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    672a:	464a      	mov	r2, r9
    672c:	7a52      	ldrb	r2, [r2, #9]
    672e:	0392      	lsls	r2, r2, #14
    6730:	2101      	movs	r1, #1
    6732:	430a      	orrs	r2, r1
    6734:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6736:	626b      	str	r3, [r5, #36]	; 0x24
    6738:	e7b8      	b.n	66ac <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    673a:	686a      	ldr	r2, [r5, #4]
    673c:	2380      	movs	r3, #128	; 0x80
    673e:	02db      	lsls	r3, r3, #11
    6740:	4313      	orrs	r3, r2
    6742:	606b      	str	r3, [r5, #4]
    6744:	e7c1      	b.n	66ca <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    6746:	0030      	movs	r0, r6
    6748:	4b2b      	ldr	r3, [pc, #172]	; (67f8 <_i2c_master_read_packet+0x194>)
    674a:	4798      	blx	r3
    674c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    674e:	2800      	cmp	r0, #0
    6750:	d1be      	bne.n	66d0 <_i2c_master_read_packet+0x6c>
    6752:	3c01      	subs	r4, #1
    6754:	b2a4      	uxth	r4, r4
    6756:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    6758:	4b28      	ldr	r3, [pc, #160]	; (67fc <_i2c_master_read_packet+0x198>)
    675a:	469b      	mov	fp, r3
    675c:	e015      	b.n	678a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    675e:	2c01      	cmp	r4, #1
    6760:	d020      	beq.n	67a4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    6762:	0030      	movs	r0, r6
    6764:	4b26      	ldr	r3, [pc, #152]	; (6800 <_i2c_master_read_packet+0x19c>)
    6766:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    6768:	4643      	mov	r3, r8
    676a:	1c5f      	adds	r7, r3, #1
    676c:	b2bf      	uxth	r7, r7
    676e:	2328      	movs	r3, #40	; 0x28
    6770:	5ceb      	ldrb	r3, [r5, r3]
    6772:	464a      	mov	r2, r9
    6774:	6852      	ldr	r2, [r2, #4]
    6776:	4641      	mov	r1, r8
    6778:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    677a:	0030      	movs	r0, r6
    677c:	4b1c      	ldr	r3, [pc, #112]	; (67f0 <_i2c_master_read_packet+0x18c>)
    677e:	4798      	blx	r3
    6780:	3c01      	subs	r4, #1
    6782:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    6784:	2800      	cmp	r0, #0
    6786:	d115      	bne.n	67b4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    6788:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    678a:	455c      	cmp	r4, fp
    678c:	d014      	beq.n	67b8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    678e:	8b6b      	ldrh	r3, [r5, #26]
    6790:	069b      	lsls	r3, r3, #26
    6792:	d527      	bpl.n	67e4 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    6794:	7af3      	ldrb	r3, [r6, #11]
    6796:	2b00      	cmp	r3, #0
    6798:	d0e3      	beq.n	6762 <_i2c_master_read_packet+0xfe>
    679a:	4653      	mov	r3, sl
    679c:	2b00      	cmp	r3, #0
    679e:	d1de      	bne.n	675e <_i2c_master_read_packet+0xfa>
    67a0:	2c00      	cmp	r4, #0
    67a2:	d1de      	bne.n	6762 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    67a4:	686a      	ldr	r2, [r5, #4]
    67a6:	2380      	movs	r3, #128	; 0x80
    67a8:	02db      	lsls	r3, r3, #11
    67aa:	4313      	orrs	r3, r2
    67ac:	606b      	str	r3, [r5, #4]
    67ae:	3c01      	subs	r4, #1
    67b0:	b2a4      	uxth	r4, r4
    67b2:	e7ea      	b.n	678a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    67b4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    67b6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    67b8:	7ab3      	ldrb	r3, [r6, #10]
    67ba:	2b00      	cmp	r3, #0
    67bc:	d109      	bne.n	67d2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    67be:	0030      	movs	r0, r6
    67c0:	4b0f      	ldr	r3, [pc, #60]	; (6800 <_i2c_master_read_packet+0x19c>)
    67c2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    67c4:	2328      	movs	r3, #40	; 0x28
    67c6:	5cea      	ldrb	r2, [r5, r3]
    67c8:	464b      	mov	r3, r9
    67ca:	685b      	ldr	r3, [r3, #4]
    67cc:	4641      	mov	r1, r8
    67ce:	545a      	strb	r2, [r3, r1]
    67d0:	e77e      	b.n	66d0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    67d2:	0030      	movs	r0, r6
    67d4:	4b0a      	ldr	r3, [pc, #40]	; (6800 <_i2c_master_read_packet+0x19c>)
    67d6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    67d8:	686a      	ldr	r2, [r5, #4]
    67da:	23c0      	movs	r3, #192	; 0xc0
    67dc:	029b      	lsls	r3, r3, #10
    67de:	4313      	orrs	r3, r2
    67e0:	606b      	str	r3, [r5, #4]
    67e2:	e7ec      	b.n	67be <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    67e4:	2341      	movs	r3, #65	; 0x41
    67e6:	9301      	str	r3, [sp, #4]
    67e8:	e772      	b.n	66d0 <_i2c_master_read_packet+0x6c>
    67ea:	46c0      	nop			; (mov r8, r8)
    67ec:	fffbffff 	.word	0xfffbffff
    67f0:	00006619 	.word	0x00006619
    67f4:	00006645 	.word	0x00006645
    67f8:	000065e9 	.word	0x000065e9
    67fc:	0000ffff 	.word	0x0000ffff
    6800:	00006315 	.word	0x00006315

00006804 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6804:	b5f0      	push	{r4, r5, r6, r7, lr}
    6806:	46de      	mov	lr, fp
    6808:	4657      	mov	r7, sl
    680a:	464e      	mov	r6, r9
    680c:	4645      	mov	r5, r8
    680e:	b5e0      	push	{r5, r6, r7, lr}
    6810:	b083      	sub	sp, #12
    6812:	0006      	movs	r6, r0
    6814:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6816:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6818:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    681a:	4b32      	ldr	r3, [pc, #200]	; (68e4 <_i2c_master_write_packet+0xe0>)
    681c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    681e:	7a7b      	ldrb	r3, [r7, #9]
    6820:	2b00      	cmp	r3, #0
    6822:	d11d      	bne.n	6860 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6824:	686b      	ldr	r3, [r5, #4]
    6826:	4a30      	ldr	r2, [pc, #192]	; (68e8 <_i2c_master_write_packet+0xe4>)
    6828:	4013      	ands	r3, r2
    682a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    682c:	7a3b      	ldrb	r3, [r7, #8]
    682e:	2b00      	cmp	r3, #0
    6830:	d01b      	beq.n	686a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6832:	883b      	ldrh	r3, [r7, #0]
    6834:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6836:	7a7a      	ldrb	r2, [r7, #9]
    6838:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    683a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    683c:	2280      	movs	r2, #128	; 0x80
    683e:	0212      	lsls	r2, r2, #8
    6840:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6842:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6844:	0030      	movs	r0, r6
    6846:	4b29      	ldr	r3, [pc, #164]	; (68ec <_i2c_master_write_packet+0xe8>)
    6848:	4798      	blx	r3
    684a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    684c:	2800      	cmp	r0, #0
    684e:	d013      	beq.n	6878 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    6850:	9801      	ldr	r0, [sp, #4]
    6852:	b003      	add	sp, #12
    6854:	bc3c      	pop	{r2, r3, r4, r5}
    6856:	4690      	mov	r8, r2
    6858:	4699      	mov	r9, r3
    685a:	46a2      	mov	sl, r4
    685c:	46ab      	mov	fp, r5
    685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    6860:	7ab9      	ldrb	r1, [r7, #10]
    6862:	0030      	movs	r0, r6
    6864:	4b22      	ldr	r3, [pc, #136]	; (68f0 <_i2c_master_write_packet+0xec>)
    6866:	4798      	blx	r3
    6868:	e7dc      	b.n	6824 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    686a:	883b      	ldrh	r3, [r7, #0]
    686c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    686e:	7a7a      	ldrb	r2, [r7, #9]
    6870:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6872:	4313      	orrs	r3, r2
    6874:	626b      	str	r3, [r5, #36]	; 0x24
    6876:	e7e5      	b.n	6844 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    6878:	0030      	movs	r0, r6
    687a:	4b1e      	ldr	r3, [pc, #120]	; (68f4 <_i2c_master_write_packet+0xf0>)
    687c:	4798      	blx	r3
    687e:	1e03      	subs	r3, r0, #0
    6880:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    6882:	d1e5      	bne.n	6850 <_i2c_master_write_packet+0x4c>
    6884:	46a0      	mov	r8, r4
    6886:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6888:	3320      	adds	r3, #32
    688a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    688c:	4b15      	ldr	r3, [pc, #84]	; (68e4 <_i2c_master_write_packet+0xe0>)
    688e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    6890:	4b16      	ldr	r3, [pc, #88]	; (68ec <_i2c_master_write_packet+0xe8>)
    6892:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    6894:	4544      	cmp	r4, r8
    6896:	d015      	beq.n	68c4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6898:	8b6b      	ldrh	r3, [r5, #26]
    689a:	464a      	mov	r2, r9
    689c:	4213      	tst	r3, r2
    689e:	d01d      	beq.n	68dc <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    68a0:	0030      	movs	r0, r6
    68a2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    68a4:	687b      	ldr	r3, [r7, #4]
    68a6:	5d1a      	ldrb	r2, [r3, r4]
    68a8:	2328      	movs	r3, #40	; 0x28
    68aa:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    68ac:	0030      	movs	r0, r6
    68ae:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    68b0:	2800      	cmp	r0, #0
    68b2:	d106      	bne.n	68c2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    68b4:	8b6b      	ldrh	r3, [r5, #26]
    68b6:	3401      	adds	r4, #1
    68b8:	075b      	lsls	r3, r3, #29
    68ba:	d5eb      	bpl.n	6894 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    68bc:	231e      	movs	r3, #30
    68be:	9301      	str	r3, [sp, #4]
    68c0:	e000      	b.n	68c4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    68c2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    68c4:	7ab3      	ldrb	r3, [r6, #10]
    68c6:	2b00      	cmp	r3, #0
    68c8:	d0c2      	beq.n	6850 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    68ca:	0030      	movs	r0, r6
    68cc:	4b05      	ldr	r3, [pc, #20]	; (68e4 <_i2c_master_write_packet+0xe0>)
    68ce:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    68d0:	686a      	ldr	r2, [r5, #4]
    68d2:	23c0      	movs	r3, #192	; 0xc0
    68d4:	029b      	lsls	r3, r3, #10
    68d6:	4313      	orrs	r3, r2
    68d8:	606b      	str	r3, [r5, #4]
    68da:	e7b9      	b.n	6850 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    68dc:	2341      	movs	r3, #65	; 0x41
    68de:	9301      	str	r3, [sp, #4]
    68e0:	e7b6      	b.n	6850 <_i2c_master_write_packet+0x4c>
    68e2:	46c0      	nop			; (mov r8, r8)
    68e4:	00006315 	.word	0x00006315
    68e8:	fffbffff 	.word	0xfffbffff
    68ec:	00006619 	.word	0x00006619
    68f0:	00006645 	.word	0x00006645
    68f4:	000065e9 	.word	0x000065e9

000068f8 <i2c_master_read_packet_wait>:
{
    68f8:	b510      	push	{r4, lr}
	module->send_stop = true;
    68fa:	2301      	movs	r3, #1
    68fc:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    68fe:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    6900:	4b01      	ldr	r3, [pc, #4]	; (6908 <i2c_master_read_packet_wait+0x10>)
    6902:	4798      	blx	r3
}
    6904:	bd10      	pop	{r4, pc}
    6906:	46c0      	nop			; (mov r8, r8)
    6908:	00006665 	.word	0x00006665

0000690c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    690c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    690e:	2301      	movs	r3, #1
    6910:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    6912:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    6914:	4b01      	ldr	r3, [pc, #4]	; (691c <i2c_master_write_packet_wait+0x10>)
    6916:	4798      	blx	r3
}
    6918:	bd10      	pop	{r4, pc}
    691a:	46c0      	nop			; (mov r8, r8)
    691c:	00006805 	.word	0x00006805

00006920 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6920:	b5f0      	push	{r4, r5, r6, r7, lr}
    6922:	46c6      	mov	lr, r8
    6924:	b500      	push	{lr}
    6926:	000c      	movs	r4, r1
    6928:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    692a:	2800      	cmp	r0, #0
    692c:	d10f      	bne.n	694e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    692e:	2a00      	cmp	r2, #0
    6930:	dd11      	ble.n	6956 <_read+0x36>
    6932:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6934:	4e09      	ldr	r6, [pc, #36]	; (695c <_read+0x3c>)
    6936:	4d0a      	ldr	r5, [pc, #40]	; (6960 <_read+0x40>)
    6938:	6830      	ldr	r0, [r6, #0]
    693a:	0021      	movs	r1, r4
    693c:	682b      	ldr	r3, [r5, #0]
    693e:	4798      	blx	r3
		ptr++;
    6940:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    6942:	42bc      	cmp	r4, r7
    6944:	d1f8      	bne.n	6938 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    6946:	4640      	mov	r0, r8
    6948:	bc04      	pop	{r2}
    694a:	4690      	mov	r8, r2
    694c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    694e:	2301      	movs	r3, #1
    6950:	425b      	negs	r3, r3
    6952:	4698      	mov	r8, r3
    6954:	e7f7      	b.n	6946 <_read+0x26>
	for (; len > 0; --len) {
    6956:	4680      	mov	r8, r0
    6958:	e7f5      	b.n	6946 <_read+0x26>
    695a:	46c0      	nop			; (mov r8, r8)
    695c:	20000894 	.word	0x20000894
    6960:	2000088c 	.word	0x2000088c

00006964 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6964:	b5f0      	push	{r4, r5, r6, r7, lr}
    6966:	46c6      	mov	lr, r8
    6968:	b500      	push	{lr}
    696a:	000e      	movs	r6, r1
    696c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    696e:	3801      	subs	r0, #1
    6970:	2802      	cmp	r0, #2
    6972:	d810      	bhi.n	6996 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    6974:	2a00      	cmp	r2, #0
    6976:	d011      	beq.n	699c <_write+0x38>
    6978:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    697a:	4b0c      	ldr	r3, [pc, #48]	; (69ac <_write+0x48>)
    697c:	4698      	mov	r8, r3
    697e:	4f0c      	ldr	r7, [pc, #48]	; (69b0 <_write+0x4c>)
    6980:	4643      	mov	r3, r8
    6982:	6818      	ldr	r0, [r3, #0]
    6984:	5d31      	ldrb	r1, [r6, r4]
    6986:	683b      	ldr	r3, [r7, #0]
    6988:	4798      	blx	r3
    698a:	2800      	cmp	r0, #0
    698c:	db08      	blt.n	69a0 <_write+0x3c>
			return -1;
		}
		++nChars;
    698e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    6990:	42a5      	cmp	r5, r4
    6992:	d1f5      	bne.n	6980 <_write+0x1c>
    6994:	e006      	b.n	69a4 <_write+0x40>
		return -1;
    6996:	2401      	movs	r4, #1
    6998:	4264      	negs	r4, r4
    699a:	e003      	b.n	69a4 <_write+0x40>
	for (; len != 0; --len) {
    699c:	0014      	movs	r4, r2
    699e:	e001      	b.n	69a4 <_write+0x40>
			return -1;
    69a0:	2401      	movs	r4, #1
    69a2:	4264      	negs	r4, r4
	}
	return nChars;
}
    69a4:	0020      	movs	r0, r4
    69a6:	bc04      	pop	{r2}
    69a8:	4690      	mov	r8, r2
    69aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69ac:	20000894 	.word	0x20000894
    69b0:	20000890 	.word	0x20000890

000069b4 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    69b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69b6:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    69b8:	2041      	movs	r0, #65	; 0x41
    69ba:	5c23      	ldrb	r3, [r4, r0]
    69bc:	2501      	movs	r5, #1
    69be:	432b      	orrs	r3, r5
    69c0:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    69c2:	b292      	uxth	r2, r2
    69c4:	2000      	movs	r0, #0
    69c6:	5620      	ldrsb	r0, [r4, r0]
    69c8:	2300      	movs	r3, #0
    69ca:	4d12      	ldr	r5, [pc, #72]	; (6a14 <_http_client_send_wait+0x60>)
    69cc:	47a8      	blx	r5
    69ce:	2800      	cmp	r0, #0
    69d0:	db16      	blt.n	6a00 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    69d2:	2341      	movs	r3, #65	; 0x41
    69d4:	5ce3      	ldrb	r3, [r4, r3]
    69d6:	07db      	lsls	r3, r3, #31
    69d8:	d518      	bpl.n	6a0c <_http_client_send_wait+0x58>
    69da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    69dc:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    69de:	2b02      	cmp	r3, #2
    69e0:	d917      	bls.n	6a12 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    69e2:	4f0d      	ldr	r7, [pc, #52]	; (6a18 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    69e4:	4e0d      	ldr	r6, [pc, #52]	; (6a1c <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    69e6:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    69e8:	2000      	movs	r0, #0
    69ea:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    69ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    69ee:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    69f0:	5d63      	ldrb	r3, [r4, r5]
    69f2:	07db      	lsls	r3, r3, #31
    69f4:	d50c      	bpl.n	6a10 <_http_client_send_wait+0x5c>
    69f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    69f8:	2b02      	cmp	r3, #2
    69fa:	d8f5      	bhi.n	69e8 <_http_client_send_wait+0x34>
	return 0;
    69fc:	2000      	movs	r0, #0
    69fe:	e008      	b.n	6a12 <_http_client_send_wait+0x5e>
		module->sending = 0;
    6a00:	2241      	movs	r2, #65	; 0x41
    6a02:	5ca3      	ldrb	r3, [r4, r2]
    6a04:	2101      	movs	r1, #1
    6a06:	438b      	bics	r3, r1
    6a08:	54a3      	strb	r3, [r4, r2]
		return result;
    6a0a:	e002      	b.n	6a12 <_http_client_send_wait+0x5e>
	return 0;
    6a0c:	2000      	movs	r0, #0
    6a0e:	e000      	b.n	6a12 <_http_client_send_wait+0x5e>
    6a10:	2000      	movs	r0, #0
}
    6a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a14:	0000c4e1 	.word	0x0000c4e1
    6a18:	0000a741 	.word	0x0000a741
    6a1c:	00007be9 	.word	0x00007be9

00006a20 <http_client_get_config_defaults>:
	config->port = 80;
    6a20:	2350      	movs	r3, #80	; 0x50
    6a22:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    6a24:	2300      	movs	r3, #0
    6a26:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    6a28:	4a05      	ldr	r2, [pc, #20]	; (6a40 <http_client_get_config_defaults+0x20>)
    6a2a:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    6a2c:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    6a2e:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    6a30:	3301      	adds	r3, #1
    6a32:	33ff      	adds	r3, #255	; 0xff
    6a34:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    6a36:	3bae      	subs	r3, #174	; 0xae
    6a38:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    6a3a:	4b02      	ldr	r3, [pc, #8]	; (6a44 <http_client_get_config_defaults+0x24>)
    6a3c:	6183      	str	r3, [r0, #24]
}
    6a3e:	4770      	bx	lr
    6a40:	00004e20 	.word	0x00004e20
    6a44:	00012920 	.word	0x00012920

00006a48 <http_client_init>:
{
    6a48:	b570      	push	{r4, r5, r6, lr}
    6a4a:	0004      	movs	r4, r0
    6a4c:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    6a4e:	2800      	cmp	r0, #0
    6a50:	d038      	beq.n	6ac4 <http_client_init+0x7c>
    6a52:	2900      	cmp	r1, #0
    6a54:	d039      	beq.n	6aca <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    6a56:	690b      	ldr	r3, [r1, #16]
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d039      	beq.n	6ad0 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    6a5c:	684b      	ldr	r3, [r1, #4]
    6a5e:	2b00      	cmp	r3, #0
    6a60:	d039      	beq.n	6ad6 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    6a62:	694b      	ldr	r3, [r1, #20]
    6a64:	2b51      	cmp	r3, #81	; 0x51
    6a66:	d939      	bls.n	6adc <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    6a68:	22e8      	movs	r2, #232	; 0xe8
    6a6a:	2100      	movs	r1, #0
    6a6c:	4b1e      	ldr	r3, [pc, #120]	; (6ae8 <http_client_init+0xa0>)
    6a6e:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    6a70:	0020      	movs	r0, r4
    6a72:	3050      	adds	r0, #80	; 0x50
    6a74:	221c      	movs	r2, #28
    6a76:	0029      	movs	r1, r5
    6a78:	4b1c      	ldr	r3, [pc, #112]	; (6aec <http_client_init+0xa4>)
    6a7a:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    6a7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    6a7e:	2b00      	cmp	r3, #0
    6a80:	d008      	beq.n	6a94 <http_client_init+0x4c>
	if (config->timeout > 0) {
    6a82:	892b      	ldrh	r3, [r5, #8]
    6a84:	2b00      	cmp	r3, #0
    6a86:	d111      	bne.n	6aac <http_client_init+0x64>
	module->req.state = STATE_INIT;
    6a88:	2300      	movs	r3, #0
    6a8a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    6a8c:	22d8      	movs	r2, #216	; 0xd8
    6a8e:	50a3      	str	r3, [r4, r2]
	return 0;
    6a90:	2000      	movs	r0, #0
}
    6a92:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    6a94:	6928      	ldr	r0, [r5, #16]
    6a96:	4b16      	ldr	r3, [pc, #88]	; (6af0 <http_client_init+0xa8>)
    6a98:	4798      	blx	r3
    6a9a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    6a9c:	2800      	cmp	r0, #0
    6a9e:	d020      	beq.n	6ae2 <http_client_init+0x9a>
		module->alloc_buffer = 1;
    6aa0:	2241      	movs	r2, #65	; 0x41
    6aa2:	5ca3      	ldrb	r3, [r4, r2]
    6aa4:	2104      	movs	r1, #4
    6aa6:	430b      	orrs	r3, r1
    6aa8:	54a3      	strb	r3, [r4, r2]
    6aaa:	e7ea      	b.n	6a82 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    6aac:	6868      	ldr	r0, [r5, #4]
    6aae:	2300      	movs	r3, #0
    6ab0:	0022      	movs	r2, r4
    6ab2:	4910      	ldr	r1, [pc, #64]	; (6af4 <http_client_init+0xac>)
    6ab4:	4d10      	ldr	r5, [pc, #64]	; (6af8 <http_client_init+0xb0>)
    6ab6:	47a8      	blx	r5
    6ab8:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    6aba:	2800      	cmp	r0, #0
    6abc:	dae4      	bge.n	6a88 <http_client_init+0x40>
			return -ENOSPC;
    6abe:	201c      	movs	r0, #28
    6ac0:	4240      	negs	r0, r0
    6ac2:	e7e6      	b.n	6a92 <http_client_init+0x4a>
		return -EINVAL;
    6ac4:	2016      	movs	r0, #22
    6ac6:	4240      	negs	r0, r0
    6ac8:	e7e3      	b.n	6a92 <http_client_init+0x4a>
    6aca:	2016      	movs	r0, #22
    6acc:	4240      	negs	r0, r0
    6ace:	e7e0      	b.n	6a92 <http_client_init+0x4a>
		return -EINVAL;
    6ad0:	2016      	movs	r0, #22
    6ad2:	4240      	negs	r0, r0
    6ad4:	e7dd      	b.n	6a92 <http_client_init+0x4a>
		return -EINVAL;
    6ad6:	2016      	movs	r0, #22
    6ad8:	4240      	negs	r0, r0
    6ada:	e7da      	b.n	6a92 <http_client_init+0x4a>
		return -EINVAL;
    6adc:	2016      	movs	r0, #22
    6ade:	4240      	negs	r0, r0
    6ae0:	e7d7      	b.n	6a92 <http_client_init+0x4a>
			return -ENOMEM;
    6ae2:	200c      	movs	r0, #12
    6ae4:	4240      	negs	r0, r0
    6ae6:	e7d4      	b.n	6a92 <http_client_init+0x4a>
    6ae8:	000101b7 	.word	0x000101b7
    6aec:	00010181 	.word	0x00010181
    6af0:	00010159 	.word	0x00010159
    6af4:	00006c61 	.word	0x00006c61
    6af8:	00007b65 	.word	0x00007b65

00006afc <http_client_deinit>:
{
    6afc:	b510      	push	{r4, lr}
    6afe:	1e04      	subs	r4, r0, #0
	if (module == NULL) {
    6b00:	d014      	beq.n	6b2c <http_client_deinit+0x30>
	if (module->alloc_buffer != 0) {
    6b02:	2341      	movs	r3, #65	; 0x41
    6b04:	5cc3      	ldrb	r3, [r0, r3]
    6b06:	075b      	lsls	r3, r3, #29
    6b08:	d40c      	bmi.n	6b24 <http_client_deinit+0x28>
	if (module->req.ext_header != NULL) {
    6b0a:	23d4      	movs	r3, #212	; 0xd4
    6b0c:	58e0      	ldr	r0, [r4, r3]
    6b0e:	2800      	cmp	r0, #0
    6b10:	d001      	beq.n	6b16 <http_client_deinit+0x1a>
		free(module->req.ext_header);
    6b12:	4b08      	ldr	r3, [pc, #32]	; (6b34 <http_client_deinit+0x38>)
    6b14:	4798      	blx	r3
	memset(module, 0, sizeof(struct http_client_module));
    6b16:	22e8      	movs	r2, #232	; 0xe8
    6b18:	2100      	movs	r1, #0
    6b1a:	0020      	movs	r0, r4
    6b1c:	4b06      	ldr	r3, [pc, #24]	; (6b38 <http_client_deinit+0x3c>)
    6b1e:	4798      	blx	r3
	return 0;
    6b20:	2000      	movs	r0, #0
}
    6b22:	bd10      	pop	{r4, pc}
		free(module->config.recv_buffer);
    6b24:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    6b26:	4b03      	ldr	r3, [pc, #12]	; (6b34 <http_client_deinit+0x38>)
    6b28:	4798      	blx	r3
    6b2a:	e7ee      	b.n	6b0a <http_client_deinit+0xe>
		return -EINVAL;
    6b2c:	2016      	movs	r0, #22
    6b2e:	4240      	negs	r0, r0
    6b30:	e7f7      	b.n	6b22 <http_client_deinit+0x26>
    6b32:	46c0      	nop			; (mov r8, r8)
    6b34:	0001016d 	.word	0x0001016d
    6b38:	000101b7 	.word	0x000101b7

00006b3c <http_client_register_callback>:
	if (module == NULL) {
    6b3c:	2800      	cmp	r0, #0
    6b3e:	d002      	beq.n	6b46 <http_client_register_callback+0xa>
	module->cb = callback;
    6b40:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    6b42:	2000      	movs	r0, #0
}
    6b44:	4770      	bx	lr
		return -EINVAL;
    6b46:	2016      	movs	r0, #22
    6b48:	4240      	negs	r0, r0
    6b4a:	e7fb      	b.n	6b44 <http_client_register_callback+0x8>

00006b4c <http_client_unregister_callback>:
	if (module == NULL) {
    6b4c:	2800      	cmp	r0, #0
    6b4e:	d003      	beq.n	6b58 <http_client_unregister_callback+0xc>
	module->cb = NULL;
    6b50:	2300      	movs	r3, #0
    6b52:	64c3      	str	r3, [r0, #76]	; 0x4c
	return 0;
    6b54:	2000      	movs	r0, #0
}
    6b56:	4770      	bx	lr
		return -EINVAL;
    6b58:	2016      	movs	r0, #22
    6b5a:	4240      	negs	r0, r0
    6b5c:	e7fb      	b.n	6b56 <http_client_unregister_callback+0xa>
	...

00006b60 <_http_client_clear_conn>:
{
    6b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b62:	b085      	sub	sp, #20
    6b64:	0004      	movs	r4, r0
    6b66:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    6b68:	23c0      	movs	r3, #192	; 0xc0
    6b6a:	58c3      	ldr	r3, [r0, r3]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d002      	beq.n	6b76 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    6b70:	22c4      	movs	r2, #196	; 0xc4
    6b72:	5880      	ldr	r0, [r0, r2]
    6b74:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    6b76:	0020      	movs	r0, r4
    6b78:	30b0      	adds	r0, #176	; 0xb0
    6b7a:	2218      	movs	r2, #24
    6b7c:	2100      	movs	r1, #0
    6b7e:	4b17      	ldr	r3, [pc, #92]	; (6bdc <_http_client_clear_conn+0x7c>)
    6b80:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    6b82:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    6b84:	2b00      	cmp	r3, #0
    6b86:	d124      	bne.n	6bd2 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    6b88:	2300      	movs	r3, #0
    6b8a:	56e3      	ldrsb	r3, [r4, r3]
    6b8c:	009b      	lsls	r3, r3, #2
    6b8e:	2500      	movs	r5, #0
    6b90:	4a13      	ldr	r2, [pc, #76]	; (6be0 <_http_client_clear_conn+0x80>)
    6b92:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    6b94:	0020      	movs	r0, r4
    6b96:	306c      	adds	r0, #108	; 0x6c
    6b98:	226c      	movs	r2, #108	; 0x6c
    6b9a:	2100      	movs	r1, #0
    6b9c:	4f0f      	ldr	r7, [pc, #60]	; (6bdc <_http_client_clear_conn+0x7c>)
    6b9e:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    6ba0:	0020      	movs	r0, r4
    6ba2:	30d8      	adds	r0, #216	; 0xd8
    6ba4:	2210      	movs	r2, #16
    6ba6:	2100      	movs	r1, #0
    6ba8:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    6baa:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    6bac:	23d8      	movs	r3, #216	; 0xd8
    6bae:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    6bb0:	2241      	movs	r2, #65	; 0x41
    6bb2:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    6bb4:	2101      	movs	r1, #1
    6bb6:	438b      	bics	r3, r1
    6bb8:	3101      	adds	r1, #1
    6bba:	438b      	bics	r3, r1
    6bbc:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    6bbe:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    6bc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	d003      	beq.n	6bce <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    6bc6:	aa01      	add	r2, sp, #4
    6bc8:	3102      	adds	r1, #2
    6bca:	0020      	movs	r0, r4
    6bcc:	4798      	blx	r3
}
    6bce:	b005      	add	sp, #20
    6bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    6bd2:	2000      	movs	r0, #0
    6bd4:	5620      	ldrsb	r0, [r4, r0]
    6bd6:	4b03      	ldr	r3, [pc, #12]	; (6be4 <_http_client_clear_conn+0x84>)
    6bd8:	4798      	blx	r3
    6bda:	e7d5      	b.n	6b88 <_http_client_clear_conn+0x28>
    6bdc:	000101b7 	.word	0x000101b7
    6be0:	2000021c 	.word	0x2000021c
    6be4:	0000c60d 	.word	0x0000c60d

00006be8 <http_client_socket_resolve_handler>:
{
    6be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bea:	b087      	sub	sp, #28
    6bec:	9000      	str	r0, [sp, #0]
    6bee:	9101      	str	r1, [sp, #4]
    6bf0:	4c17      	ldr	r4, [pc, #92]	; (6c50 <http_client_socket_resolve_handler+0x68>)
    6bf2:	0026      	movs	r6, r4
    6bf4:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    6bf6:	4f17      	ldr	r7, [pc, #92]	; (6c54 <http_client_socket_resolve_handler+0x6c>)
    6bf8:	e015      	b.n	6c26 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    6bfa:	2302      	movs	r3, #2
    6bfc:	aa02      	add	r2, sp, #8
    6bfe:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    6c00:	334e      	adds	r3, #78	; 0x4e
    6c02:	5aeb      	ldrh	r3, [r5, r3]
    6c04:	021a      	lsls	r2, r3, #8
    6c06:	0a1b      	lsrs	r3, r3, #8
    6c08:	4313      	orrs	r3, r2
    6c0a:	aa02      	add	r2, sp, #8
    6c0c:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    6c0e:	9b01      	ldr	r3, [sp, #4]
    6c10:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    6c12:	2000      	movs	r0, #0
    6c14:	5628      	ldrsb	r0, [r5, r0]
    6c16:	2210      	movs	r2, #16
    6c18:	a902      	add	r1, sp, #8
    6c1a:	4b0f      	ldr	r3, [pc, #60]	; (6c58 <http_client_socket_resolve_handler+0x70>)
    6c1c:	4798      	blx	r3
				return;
    6c1e:	e015      	b.n	6c4c <http_client_socket_resolve_handler+0x64>
    6c20:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    6c22:	42b4      	cmp	r4, r6
    6c24:	d012      	beq.n	6c4c <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    6c26:	6825      	ldr	r5, [r4, #0]
    6c28:	2d00      	cmp	r5, #0
    6c2a:	d0f9      	beq.n	6c20 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    6c2c:	1c69      	adds	r1, r5, #1
    6c2e:	9800      	ldr	r0, [sp, #0]
    6c30:	47b8      	blx	r7
    6c32:	2800      	cmp	r0, #0
    6c34:	d1f4      	bne.n	6c20 <http_client_socket_resolve_handler+0x38>
    6c36:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    6c38:	2b01      	cmp	r3, #1
    6c3a:	d1f1      	bne.n	6c20 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    6c3c:	9b01      	ldr	r3, [sp, #4]
    6c3e:	2b00      	cmp	r3, #0
    6c40:	d1db      	bne.n	6bfa <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    6c42:	2176      	movs	r1, #118	; 0x76
    6c44:	4249      	negs	r1, r1
    6c46:	0028      	movs	r0, r5
    6c48:	4b04      	ldr	r3, [pc, #16]	; (6c5c <http_client_socket_resolve_handler+0x74>)
    6c4a:	4798      	blx	r3
}
    6c4c:	b007      	add	sp, #28
    6c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c50:	2000021c 	.word	0x2000021c
    6c54:	0001061d 	.word	0x0001061d
    6c58:	0000c451 	.word	0x0000c451
    6c5c:	00006b61 	.word	0x00006b61

00006c60 <http_client_timer_callback>:
{
    6c60:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    6c62:	2a00      	cmp	r2, #0
    6c64:	d004      	beq.n	6c70 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    6c66:	213e      	movs	r1, #62	; 0x3e
    6c68:	4249      	negs	r1, r1
    6c6a:	0010      	movs	r0, r2
    6c6c:	4b01      	ldr	r3, [pc, #4]	; (6c74 <http_client_timer_callback+0x14>)
    6c6e:	4798      	blx	r3
}
    6c70:	bd10      	pop	{r4, pc}
    6c72:	46c0      	nop			; (mov r8, r8)
    6c74:	00006b61 	.word	0x00006b61

00006c78 <http_client_close>:
{
    6c78:	b510      	push	{r4, lr}
	if (module == NULL) {
    6c7a:	2800      	cmp	r0, #0
    6c7c:	d007      	beq.n	6c8e <http_client_close+0x16>
	if (module->req.state < STATE_SOCK_CONNECTED) {
    6c7e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6c80:	2b01      	cmp	r3, #1
    6c82:	d907      	bls.n	6c94 <http_client_close+0x1c>
	_http_client_clear_conn(module, 0);
    6c84:	2100      	movs	r1, #0
    6c86:	4b04      	ldr	r3, [pc, #16]	; (6c98 <http_client_close+0x20>)
    6c88:	4798      	blx	r3
	return 0;
    6c8a:	2000      	movs	r0, #0
}
    6c8c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6c8e:	2016      	movs	r0, #22
    6c90:	4240      	negs	r0, r0
    6c92:	e7fb      	b.n	6c8c <http_client_close+0x14>
		return 0;
    6c94:	2000      	movs	r0, #0
    6c96:	e7f9      	b.n	6c8c <http_client_close+0x14>
    6c98:	00006b61 	.word	0x00006b61

00006c9c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    6c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c9e:	46de      	mov	lr, fp
    6ca0:	4657      	mov	r7, sl
    6ca2:	b580      	push	{r7, lr}
    6ca4:	b095      	sub	sp, #84	; 0x54
    6ca6:	af02      	add	r7, sp, #8
    6ca8:	0004      	movs	r4, r0
    6caa:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    6cac:	2310      	movs	r3, #16
    6cae:	2208      	movs	r2, #8
    6cb0:	18ba      	adds	r2, r7, r2
    6cb2:	18d2      	adds	r2, r2, r3
    6cb4:	4bb1      	ldr	r3, [pc, #708]	; (6f7c <_http_client_request+0x2e0>)
    6cb6:	cb23      	ldmia	r3!, {r0, r1, r5}
    6cb8:	c223      	stmia	r2!, {r0, r1, r5}
    6cba:	681b      	ldr	r3, [r3, #0]
    6cbc:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    6cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6cc0:	1dd3      	adds	r3, r2, #7
    6cc2:	08db      	lsrs	r3, r3, #3
    6cc4:	00db      	lsls	r3, r3, #3
    6cc6:	4669      	mov	r1, sp
    6cc8:	1acb      	subs	r3, r1, r3
    6cca:	469d      	mov	sp, r3
    6ccc:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    6cce:	2c00      	cmp	r4, #0
    6cd0:	d100      	bne.n	6cd4 <_http_client_request+0x38>
    6cd2:	e1f0      	b.n	70b6 <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    6cd4:	2341      	movs	r3, #65	; 0x41
    6cd6:	5ce3      	ldrb	r3, [r4, r3]
    6cd8:	07db      	lsls	r3, r3, #31
    6cda:	d500      	bpl.n	6cde <_http_client_request+0x42>
    6cdc:	e1eb      	b.n	70b6 <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    6cde:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    6ce0:	2b03      	cmp	r3, #3
    6ce2:	d004      	beq.n	6cee <_http_client_request+0x52>
    6ce4:	2b04      	cmp	r3, #4
    6ce6:	d100      	bne.n	6cea <_http_client_request+0x4e>
    6ce8:	e120      	b.n	6f2c <_http_client_request+0x290>
    6cea:	46dd      	mov	sp, fp
    6cec:	e1e4      	b.n	70b8 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    6cee:	2300      	movs	r3, #0
    6cf0:	21cc      	movs	r1, #204	; 0xcc
    6cf2:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    6cf4:	3104      	adds	r1, #4
    6cf6:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    6cf8:	9400      	str	r4, [sp, #0]
    6cfa:	4ba1      	ldr	r3, [pc, #644]	; (6f80 <_http_client_request+0x2e4>)
    6cfc:	0031      	movs	r1, r6
    6cfe:	202c      	movs	r0, #44	; 0x2c
    6d00:	2508      	movs	r5, #8
    6d02:	46ac      	mov	ip, r5
    6d04:	44bc      	add	ip, r7
    6d06:	4460      	add	r0, ip
    6d08:	4d9e      	ldr	r5, [pc, #632]	; (6f84 <_http_client_request+0x2e8>)
    6d0a:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    6d0c:	23c8      	movs	r3, #200	; 0xc8
    6d0e:	5ce3      	ldrb	r3, [r4, r3]
    6d10:	2b01      	cmp	r3, #1
    6d12:	d100      	bne.n	6d16 <_http_client_request+0x7a>
    6d14:	e0a9      	b.n	6e6a <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    6d16:	2b02      	cmp	r3, #2
    6d18:	d100      	bne.n	6d1c <_http_client_request+0x80>
    6d1a:	e0af      	b.n	6e7c <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    6d1c:	2b03      	cmp	r3, #3
    6d1e:	d100      	bne.n	6d22 <_http_client_request+0x86>
    6d20:	e0b5      	b.n	6e8e <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    6d22:	2b04      	cmp	r3, #4
    6d24:	d100      	bne.n	6d28 <_http_client_request+0x8c>
    6d26:	e0bb      	b.n	6ea0 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    6d28:	2b05      	cmp	r3, #5
    6d2a:	d100      	bne.n	6d2e <_http_client_request+0x92>
    6d2c:	e0c1      	b.n	6eb2 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    6d2e:	2b06      	cmp	r3, #6
    6d30:	d100      	bne.n	6d34 <_http_client_request+0x98>
    6d32:	e0c7      	b.n	6ec4 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    6d34:	0025      	movs	r5, r4
    6d36:	3570      	adds	r5, #112	; 0x70
    6d38:	0028      	movs	r0, r5
    6d3a:	4b93      	ldr	r3, [pc, #588]	; (6f88 <_http_client_request+0x2ec>)
    6d3c:	469a      	mov	sl, r3
    6d3e:	4798      	blx	r3
    6d40:	0002      	movs	r2, r0
    6d42:	0029      	movs	r1, r5
    6d44:	232c      	movs	r3, #44	; 0x2c
    6d46:	2008      	movs	r0, #8
    6d48:	1838      	adds	r0, r7, r0
    6d4a:	18c0      	adds	r0, r0, r3
    6d4c:	4d8f      	ldr	r5, [pc, #572]	; (6f8c <_http_client_request+0x2f0>)
    6d4e:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    6d50:	220b      	movs	r2, #11
    6d52:	498f      	ldr	r1, [pc, #572]	; (6f90 <_http_client_request+0x2f4>)
    6d54:	232c      	movs	r3, #44	; 0x2c
    6d56:	2008      	movs	r0, #8
    6d58:	1838      	adds	r0, r7, r0
    6d5a:	18c0      	adds	r0, r0, r3
    6d5c:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    6d5e:	220c      	movs	r2, #12
    6d60:	498c      	ldr	r1, [pc, #560]	; (6f94 <_http_client_request+0x2f8>)
    6d62:	232c      	movs	r3, #44	; 0x2c
    6d64:	2008      	movs	r0, #8
    6d66:	1838      	adds	r0, r7, r0
    6d68:	18c0      	adds	r0, r0, r3
    6d6a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    6d6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6d6e:	607b      	str	r3, [r7, #4]
    6d70:	0018      	movs	r0, r3
    6d72:	47d0      	blx	sl
    6d74:	0002      	movs	r2, r0
    6d76:	6879      	ldr	r1, [r7, #4]
    6d78:	232c      	movs	r3, #44	; 0x2c
    6d7a:	2008      	movs	r0, #8
    6d7c:	1838      	adds	r0, r7, r0
    6d7e:	18c0      	adds	r0, r0, r3
    6d80:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    6d82:	2202      	movs	r2, #2
    6d84:	4984      	ldr	r1, [pc, #528]	; (6f98 <_http_client_request+0x2fc>)
    6d86:	232c      	movs	r3, #44	; 0x2c
    6d88:	2008      	movs	r0, #8
    6d8a:	1838      	adds	r0, r7, r0
    6d8c:	18c0      	adds	r0, r0, r3
    6d8e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    6d90:	2206      	movs	r2, #6
    6d92:	4982      	ldr	r1, [pc, #520]	; (6f9c <_http_client_request+0x300>)
    6d94:	232c      	movs	r3, #44	; 0x2c
    6d96:	2008      	movs	r0, #8
    6d98:	1838      	adds	r0, r7, r0
    6d9a:	18c0      	adds	r0, r0, r3
    6d9c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    6d9e:	1c63      	adds	r3, r4, #1
    6da0:	607b      	str	r3, [r7, #4]
    6da2:	0018      	movs	r0, r3
    6da4:	47d0      	blx	sl
    6da6:	0002      	movs	r2, r0
    6da8:	6879      	ldr	r1, [r7, #4]
    6daa:	232c      	movs	r3, #44	; 0x2c
    6dac:	2008      	movs	r0, #8
    6dae:	1838      	adds	r0, r7, r0
    6db0:	18c0      	adds	r0, r0, r3
    6db2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    6db4:	2202      	movs	r2, #2
    6db6:	4978      	ldr	r1, [pc, #480]	; (6f98 <_http_client_request+0x2fc>)
    6db8:	232c      	movs	r3, #44	; 0x2c
    6dba:	2008      	movs	r0, #8
    6dbc:	1838      	adds	r0, r7, r0
    6dbe:	18c0      	adds	r0, r0, r3
    6dc0:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    6dc2:	2218      	movs	r2, #24
    6dc4:	4976      	ldr	r1, [pc, #472]	; (6fa0 <_http_client_request+0x304>)
    6dc6:	232c      	movs	r3, #44	; 0x2c
    6dc8:	2008      	movs	r0, #8
    6dca:	1838      	adds	r0, r7, r0
    6dcc:	18c0      	adds	r0, r0, r3
    6dce:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    6dd0:	2213      	movs	r2, #19
    6dd2:	4974      	ldr	r1, [pc, #464]	; (6fa4 <_http_client_request+0x308>)
    6dd4:	232c      	movs	r3, #44	; 0x2c
    6dd6:	2008      	movs	r0, #8
    6dd8:	1838      	adds	r0, r7, r0
    6dda:	18c0      	adds	r0, r0, r3
    6ddc:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    6dde:	2217      	movs	r2, #23
    6de0:	4971      	ldr	r1, [pc, #452]	; (6fa8 <_http_client_request+0x30c>)
    6de2:	232c      	movs	r3, #44	; 0x2c
    6de4:	2008      	movs	r0, #8
    6de6:	1838      	adds	r0, r7, r0
    6de8:	18c0      	adds	r0, r0, r3
    6dea:	47a8      	blx	r5

		if (entity->read != NULL) {
    6dec:	0023      	movs	r3, r4
    6dee:	33b0      	adds	r3, #176	; 0xb0
    6df0:	68db      	ldr	r3, [r3, #12]
    6df2:	2b00      	cmp	r3, #0
    6df4:	d07b      	beq.n	6eee <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    6df6:	23b0      	movs	r3, #176	; 0xb0
    6df8:	5ce3      	ldrb	r3, [r4, r3]
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d16b      	bne.n	6ed6 <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    6dfe:	0023      	movs	r3, r4
    6e00:	33b0      	adds	r3, #176	; 0xb0
    6e02:	689b      	ldr	r3, [r3, #8]
    6e04:	2b00      	cmp	r3, #0
    6e06:	d072      	beq.n	6eee <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    6e08:	0022      	movs	r2, r4
    6e0a:	32b0      	adds	r2, #176	; 0xb0
    6e0c:	6950      	ldr	r0, [r2, #20]
    6e0e:	4798      	blx	r3
    6e10:	23cc      	movs	r3, #204	; 0xcc
    6e12:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    6e14:	2800      	cmp	r0, #0
    6e16:	da00      	bge.n	6e1a <_http_client_request+0x17e>
    6e18:	e0ac      	b.n	6f74 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    6e1a:	0002      	movs	r2, r0
    6e1c:	4963      	ldr	r1, [pc, #396]	; (6fac <_http_client_request+0x310>)
    6e1e:	2320      	movs	r3, #32
    6e20:	2008      	movs	r0, #8
    6e22:	1838      	adds	r0, r7, r0
    6e24:	18c0      	adds	r0, r0, r3
    6e26:	4b62      	ldr	r3, [pc, #392]	; (6fb0 <_http_client_request+0x314>)
    6e28:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    6e2a:	2210      	movs	r2, #16
    6e2c:	4961      	ldr	r1, [pc, #388]	; (6fb4 <_http_client_request+0x318>)
    6e2e:	232c      	movs	r3, #44	; 0x2c
    6e30:	2008      	movs	r0, #8
    6e32:	1838      	adds	r0, r7, r0
    6e34:	18c0      	adds	r0, r0, r3
    6e36:	4d55      	ldr	r5, [pc, #340]	; (6f8c <_http_client_request+0x2f0>)
    6e38:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    6e3a:	2320      	movs	r3, #32
    6e3c:	2208      	movs	r2, #8
    6e3e:	18ba      	adds	r2, r7, r2
    6e40:	18d0      	adds	r0, r2, r3
    6e42:	4b51      	ldr	r3, [pc, #324]	; (6f88 <_http_client_request+0x2ec>)
    6e44:	4798      	blx	r3
    6e46:	0002      	movs	r2, r0
    6e48:	2320      	movs	r3, #32
    6e4a:	2108      	movs	r1, #8
    6e4c:	1879      	adds	r1, r7, r1
    6e4e:	18c9      	adds	r1, r1, r3
    6e50:	330c      	adds	r3, #12
    6e52:	2008      	movs	r0, #8
    6e54:	1838      	adds	r0, r7, r0
    6e56:	18c0      	adds	r0, r0, r3
    6e58:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    6e5a:	2202      	movs	r2, #2
    6e5c:	494e      	ldr	r1, [pc, #312]	; (6f98 <_http_client_request+0x2fc>)
    6e5e:	232c      	movs	r3, #44	; 0x2c
    6e60:	2008      	movs	r0, #8
    6e62:	1838      	adds	r0, r7, r0
    6e64:	18c0      	adds	r0, r0, r3
    6e66:	47a8      	blx	r5
    6e68:	e041      	b.n	6eee <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    6e6a:	2204      	movs	r2, #4
    6e6c:	4952      	ldr	r1, [pc, #328]	; (6fb8 <_http_client_request+0x31c>)
    6e6e:	332b      	adds	r3, #43	; 0x2b
    6e70:	2008      	movs	r0, #8
    6e72:	1838      	adds	r0, r7, r0
    6e74:	18c0      	adds	r0, r0, r3
    6e76:	4b45      	ldr	r3, [pc, #276]	; (6f8c <_http_client_request+0x2f0>)
    6e78:	4798      	blx	r3
    6e7a:	e75b      	b.n	6d34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    6e7c:	2205      	movs	r2, #5
    6e7e:	494f      	ldr	r1, [pc, #316]	; (6fbc <_http_client_request+0x320>)
    6e80:	332a      	adds	r3, #42	; 0x2a
    6e82:	2008      	movs	r0, #8
    6e84:	1838      	adds	r0, r7, r0
    6e86:	18c0      	adds	r0, r0, r3
    6e88:	4b40      	ldr	r3, [pc, #256]	; (6f8c <_http_client_request+0x2f0>)
    6e8a:	4798      	blx	r3
    6e8c:	e752      	b.n	6d34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    6e8e:	2207      	movs	r2, #7
    6e90:	494b      	ldr	r1, [pc, #300]	; (6fc0 <_http_client_request+0x324>)
    6e92:	3329      	adds	r3, #41	; 0x29
    6e94:	2008      	movs	r0, #8
    6e96:	1838      	adds	r0, r7, r0
    6e98:	18c0      	adds	r0, r0, r3
    6e9a:	4b3c      	ldr	r3, [pc, #240]	; (6f8c <_http_client_request+0x2f0>)
    6e9c:	4798      	blx	r3
    6e9e:	e749      	b.n	6d34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    6ea0:	2204      	movs	r2, #4
    6ea2:	4948      	ldr	r1, [pc, #288]	; (6fc4 <_http_client_request+0x328>)
    6ea4:	3328      	adds	r3, #40	; 0x28
    6ea6:	2008      	movs	r0, #8
    6ea8:	1838      	adds	r0, r7, r0
    6eaa:	18c0      	adds	r0, r0, r3
    6eac:	4b37      	ldr	r3, [pc, #220]	; (6f8c <_http_client_request+0x2f0>)
    6eae:	4798      	blx	r3
    6eb0:	e740      	b.n	6d34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    6eb2:	2208      	movs	r2, #8
    6eb4:	4944      	ldr	r1, [pc, #272]	; (6fc8 <_http_client_request+0x32c>)
    6eb6:	3327      	adds	r3, #39	; 0x27
    6eb8:	2008      	movs	r0, #8
    6eba:	1838      	adds	r0, r7, r0
    6ebc:	18c0      	adds	r0, r0, r3
    6ebe:	4b33      	ldr	r3, [pc, #204]	; (6f8c <_http_client_request+0x2f0>)
    6ec0:	4798      	blx	r3
    6ec2:	e737      	b.n	6d34 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    6ec4:	2205      	movs	r2, #5
    6ec6:	4941      	ldr	r1, [pc, #260]	; (6fcc <_http_client_request+0x330>)
    6ec8:	3326      	adds	r3, #38	; 0x26
    6eca:	2008      	movs	r0, #8
    6ecc:	1838      	adds	r0, r7, r0
    6ece:	18c0      	adds	r0, r0, r3
    6ed0:	4b2e      	ldr	r3, [pc, #184]	; (6f8c <_http_client_request+0x2f0>)
    6ed2:	4798      	blx	r3
    6ed4:	e72e      	b.n	6d34 <_http_client_request+0x98>
				module->req.content_length = -1;
    6ed6:	2201      	movs	r2, #1
    6ed8:	4252      	negs	r2, r2
    6eda:	23cc      	movs	r3, #204	; 0xcc
    6edc:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    6ede:	321d      	adds	r2, #29
    6ee0:	493b      	ldr	r1, [pc, #236]	; (6fd0 <_http_client_request+0x334>)
    6ee2:	3ba0      	subs	r3, #160	; 0xa0
    6ee4:	2008      	movs	r0, #8
    6ee6:	1838      	adds	r0, r7, r0
    6ee8:	18c0      	adds	r0, r0, r3
    6eea:	4b28      	ldr	r3, [pc, #160]	; (6f8c <_http_client_request+0x2f0>)
    6eec:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    6eee:	23d4      	movs	r3, #212	; 0xd4
    6ef0:	58e5      	ldr	r5, [r4, r3]
    6ef2:	2d00      	cmp	r5, #0
    6ef4:	d00a      	beq.n	6f0c <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    6ef6:	0028      	movs	r0, r5
    6ef8:	4b23      	ldr	r3, [pc, #140]	; (6f88 <_http_client_request+0x2ec>)
    6efa:	4798      	blx	r3
    6efc:	0002      	movs	r2, r0
    6efe:	0029      	movs	r1, r5
    6f00:	232c      	movs	r3, #44	; 0x2c
    6f02:	2008      	movs	r0, #8
    6f04:	1838      	adds	r0, r7, r0
    6f06:	18c0      	adds	r0, r0, r3
    6f08:	4b20      	ldr	r3, [pc, #128]	; (6f8c <_http_client_request+0x2f0>)
    6f0a:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    6f0c:	2202      	movs	r2, #2
    6f0e:	4922      	ldr	r1, [pc, #136]	; (6f98 <_http_client_request+0x2fc>)
    6f10:	232c      	movs	r3, #44	; 0x2c
    6f12:	2008      	movs	r0, #8
    6f14:	1838      	adds	r0, r7, r0
    6f16:	18c0      	adds	r0, r0, r3
    6f18:	4b1c      	ldr	r3, [pc, #112]	; (6f8c <_http_client_request+0x2f0>)
    6f1a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    6f1c:	232c      	movs	r3, #44	; 0x2c
    6f1e:	2208      	movs	r2, #8
    6f20:	18ba      	adds	r2, r7, r2
    6f22:	18d0      	adds	r0, r2, r3
    6f24:	4b2b      	ldr	r3, [pc, #172]	; (6fd4 <_http_client_request+0x338>)
    6f26:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    6f28:	2304      	movs	r3, #4
    6f2a:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    6f2c:	23cc      	movs	r3, #204	; 0xcc
    6f2e:	58e2      	ldr	r2, [r4, r3]
    6f30:	2a00      	cmp	r2, #0
    6f32:	db51      	blt.n	6fd8 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    6f34:	dc00      	bgt.n	6f38 <_http_client_request+0x29c>
    6f36:	e0f0      	b.n	711a <_http_client_request+0x47e>
    6f38:	0023      	movs	r3, r4
    6f3a:	33b0      	adds	r3, #176	; 0xb0
    6f3c:	68dd      	ldr	r5, [r3, #12]
    6f3e:	2d00      	cmp	r5, #0
    6f40:	d100      	bne.n	6f44 <_http_client_request+0x2a8>
    6f42:	e0ea      	b.n	711a <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    6f44:	23d0      	movs	r3, #208	; 0xd0
    6f46:	58e3      	ldr	r3, [r4, r3]
    6f48:	429a      	cmp	r2, r3
    6f4a:	dd00      	ble.n	6f4e <_http_client_request+0x2b2>
    6f4c:	e0ba      	b.n	70c4 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    6f4e:	23c0      	movs	r3, #192	; 0xc0
    6f50:	58e3      	ldr	r3, [r4, r3]
    6f52:	2b00      	cmp	r3, #0
    6f54:	d002      	beq.n	6f5c <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    6f56:	22c4      	movs	r2, #196	; 0xc4
    6f58:	58a0      	ldr	r0, [r4, r2]
    6f5a:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    6f5c:	2302      	movs	r3, #2
    6f5e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    6f60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6f62:	2b00      	cmp	r3, #0
    6f64:	d100      	bne.n	6f68 <_http_client_request+0x2cc>
    6f66:	e6c0      	b.n	6cea <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    6f68:	220c      	movs	r2, #12
    6f6a:	18ba      	adds	r2, r7, r2
    6f6c:	2101      	movs	r1, #1
    6f6e:	0020      	movs	r0, r4
    6f70:	4798      	blx	r3
    6f72:	e6ba      	b.n	6cea <_http_client_request+0x4e>
					module->req.content_length = 0;
    6f74:	2200      	movs	r2, #0
    6f76:	50e2      	str	r2, [r4, r3]
    6f78:	e7b9      	b.n	6eee <_http_client_request+0x252>
    6f7a:	46c0      	nop			; (mov r8, r8)
    6f7c:	00012808 	.word	0x00012808
    6f80:	000069b5 	.word	0x000069b5
    6f84:	000079f9 	.word	0x000079f9
    6f88:	0001067b 	.word	0x0001067b
    6f8c:	00007a65 	.word	0x00007a65
    6f90:	0001287c 	.word	0x0001287c
    6f94:	00012888 	.word	0x00012888
    6f98:	00013a24 	.word	0x00013a24
    6f9c:	00012898 	.word	0x00012898
    6fa0:	000128a0 	.word	0x000128a0
    6fa4:	000128bc 	.word	0x000128bc
    6fa8:	000128d0 	.word	0x000128d0
    6fac:	00012908 	.word	0x00012908
    6fb0:	000105d9 	.word	0x000105d9
    6fb4:	0001290c 	.word	0x0001290c
    6fb8:	00012848 	.word	0x00012848
    6fbc:	00012850 	.word	0x00012850
    6fc0:	00012858 	.word	0x00012858
    6fc4:	00012860 	.word	0x00012860
    6fc8:	00012868 	.word	0x00012868
    6fcc:	00012874 	.word	0x00012874
    6fd0:	000128e8 	.word	0x000128e8
    6fd4:	00007a09 	.word	0x00007a09
		if (module->req.content_length < 0 && entity->read) {
    6fd8:	0023      	movs	r3, r4
    6fda:	33b0      	adds	r3, #176	; 0xb0
    6fdc:	68dd      	ldr	r5, [r3, #12]
    6fde:	2d00      	cmp	r5, #0
    6fe0:	d100      	bne.n	6fe4 <_http_client_request+0x348>
    6fe2:	e09a      	b.n	711a <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    6fe4:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    6fe6:	58e3      	ldr	r3, [r4, r3]
    6fe8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6fea:	3a07      	subs	r2, #7
    6fec:	1d71      	adds	r1, r6, #5
    6fee:	0020      	movs	r0, r4
    6ff0:	30b0      	adds	r0, #176	; 0xb0
    6ff2:	6940      	ldr	r0, [r0, #20]
    6ff4:	47a8      	blx	r5
    6ff6:	0005      	movs	r5, r0
    6ff8:	43c3      	mvns	r3, r0
    6ffa:	17db      	asrs	r3, r3, #31
    6ffc:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    6ffe:	220a      	movs	r2, #10
    7000:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    7002:	210d      	movs	r1, #13
    7004:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    7006:	1973      	adds	r3, r6, r5
    7008:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    700a:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    700c:	230f      	movs	r3, #15
    700e:	402b      	ands	r3, r5
    7010:	3206      	adds	r2, #6
    7012:	3905      	subs	r1, #5
    7014:	468c      	mov	ip, r1
    7016:	44bc      	add	ip, r7
    7018:	4462      	add	r2, ip
    701a:	5cd3      	ldrb	r3, [r2, r3]
    701c:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    701e:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    7020:	2d0f      	cmp	r5, #15
    7022:	dd0d      	ble.n	7040 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    7024:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    7026:	17eb      	asrs	r3, r5, #31
    7028:	220f      	movs	r2, #15
    702a:	4013      	ands	r3, r2
    702c:	195b      	adds	r3, r3, r5
    702e:	111b      	asrs	r3, r3, #4
    7030:	4013      	ands	r3, r2
    7032:	3201      	adds	r2, #1
    7034:	2008      	movs	r0, #8
    7036:	4684      	mov	ip, r0
    7038:	44bc      	add	ip, r7
    703a:	4462      	add	r2, ip
    703c:	5cd3      	ldrb	r3, [r2, r3]
    703e:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    7040:	2dff      	cmp	r5, #255	; 0xff
    7042:	dd0d      	ble.n	7060 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    7044:	17ea      	asrs	r2, r5, #31
    7046:	23ff      	movs	r3, #255	; 0xff
    7048:	4013      	ands	r3, r2
    704a:	195b      	adds	r3, r3, r5
    704c:	051b      	lsls	r3, r3, #20
    704e:	0f1b      	lsrs	r3, r3, #28
    7050:	2210      	movs	r2, #16
    7052:	2108      	movs	r1, #8
    7054:	468c      	mov	ip, r1
    7056:	44bc      	add	ip, r7
    7058:	4462      	add	r2, ip
    705a:	5cd3      	ldrb	r3, [r2, r3]
    705c:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    705e:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    7060:	1cca      	adds	r2, r1, #3
    7062:	1b92      	subs	r2, r2, r6
    7064:	1d2b      	adds	r3, r5, #4
    7066:	18d2      	adds	r2, r2, r3
    7068:	b292      	uxth	r2, r2
    706a:	2000      	movs	r0, #0
    706c:	5620      	ldrsb	r0, [r4, r0]
    706e:	2300      	movs	r3, #0
    7070:	4e30      	ldr	r6, [pc, #192]	; (7134 <_http_client_request+0x498>)
    7072:	47b0      	blx	r6
    7074:	2800      	cmp	r0, #0
    7076:	db19      	blt.n	70ac <_http_client_request+0x410>
			module->req.sent_length += size;
    7078:	22d0      	movs	r2, #208	; 0xd0
    707a:	58a3      	ldr	r3, [r4, r2]
    707c:	195b      	adds	r3, r3, r5
    707e:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    7080:	2d00      	cmp	r5, #0
    7082:	d000      	beq.n	7086 <_http_client_request+0x3ea>
    7084:	e631      	b.n	6cea <_http_client_request+0x4e>
				if (module->req.entity.close) {
    7086:	23c0      	movs	r3, #192	; 0xc0
    7088:	58e3      	ldr	r3, [r4, r3]
    708a:	2b00      	cmp	r3, #0
    708c:	d002      	beq.n	7094 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    708e:	3a0c      	subs	r2, #12
    7090:	58a0      	ldr	r0, [r4, r2]
    7092:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    7094:	2302      	movs	r3, #2
    7096:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    7098:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    709a:	2b00      	cmp	r3, #0
    709c:	d100      	bne.n	70a0 <_http_client_request+0x404>
    709e:	e624      	b.n	6cea <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    70a0:	220c      	movs	r2, #12
    70a2:	18ba      	adds	r2, r7, r2
    70a4:	2101      	movs	r1, #1
    70a6:	0020      	movs	r0, r4
    70a8:	4798      	blx	r3
    70aa:	e61e      	b.n	6cea <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    70ac:	2105      	movs	r1, #5
    70ae:	4249      	negs	r1, r1
    70b0:	0020      	movs	r0, r4
    70b2:	4b21      	ldr	r3, [pc, #132]	; (7138 <_http_client_request+0x49c>)
    70b4:	4798      	blx	r3
    70b6:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    70b8:	46bd      	mov	sp, r7
    70ba:	b013      	add	sp, #76	; 0x4c
    70bc:	bc0c      	pop	{r2, r3}
    70be:	4692      	mov	sl, r2
    70c0:	469b      	mov	fp, r3
    70c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    70c4:	0022      	movs	r2, r4
    70c6:	32b0      	adds	r2, #176	; 0xb0
    70c8:	6950      	ldr	r0, [r2, #20]
    70ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
    70cc:	0031      	movs	r1, r6
    70ce:	47a8      	blx	r5
			if (size < 0) {
    70d0:	2800      	cmp	r0, #0
    70d2:	db16      	blt.n	7102 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    70d4:	23cc      	movs	r3, #204	; 0xcc
    70d6:	58e5      	ldr	r5, [r4, r3]
    70d8:	3304      	adds	r3, #4
    70da:	58e3      	ldr	r3, [r4, r3]
    70dc:	1aed      	subs	r5, r5, r3
    70de:	4285      	cmp	r5, r0
    70e0:	dd00      	ble.n	70e4 <_http_client_request+0x448>
    70e2:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    70e4:	b2aa      	uxth	r2, r5
    70e6:	2000      	movs	r0, #0
    70e8:	5620      	ldrsb	r0, [r4, r0]
    70ea:	2300      	movs	r3, #0
    70ec:	0031      	movs	r1, r6
    70ee:	4e11      	ldr	r6, [pc, #68]	; (7134 <_http_client_request+0x498>)
    70f0:	47b0      	blx	r6
    70f2:	2800      	cmp	r0, #0
    70f4:	db0b      	blt.n	710e <_http_client_request+0x472>
				module->req.sent_length += size;
    70f6:	23d0      	movs	r3, #208	; 0xd0
    70f8:	58e2      	ldr	r2, [r4, r3]
    70fa:	4694      	mov	ip, r2
    70fc:	4465      	add	r5, ip
    70fe:	50e5      	str	r5, [r4, r3]
    7100:	e5f3      	b.n	6cea <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    7102:	2105      	movs	r1, #5
    7104:	4249      	negs	r1, r1
    7106:	0020      	movs	r0, r4
    7108:	4b0b      	ldr	r3, [pc, #44]	; (7138 <_http_client_request+0x49c>)
    710a:	4798      	blx	r3
    710c:	e5ed      	b.n	6cea <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    710e:	2105      	movs	r1, #5
    7110:	4249      	negs	r1, r1
    7112:	0020      	movs	r0, r4
    7114:	4b08      	ldr	r3, [pc, #32]	; (7138 <_http_client_request+0x49c>)
    7116:	4798      	blx	r3
					return;
    7118:	e7cd      	b.n	70b6 <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    711a:	2302      	movs	r3, #2
    711c:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    711e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7120:	2b00      	cmp	r3, #0
    7122:	d100      	bne.n	7126 <_http_client_request+0x48a>
    7124:	e5e1      	b.n	6cea <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    7126:	220c      	movs	r2, #12
    7128:	18ba      	adds	r2, r7, r2
    712a:	2101      	movs	r1, #1
    712c:	0020      	movs	r0, r4
    712e:	4798      	blx	r3
    7130:	e5db      	b.n	6cea <_http_client_request+0x4e>
    7132:	46c0      	nop			; (mov r8, r8)
    7134:	0000c4e1 	.word	0x0000c4e1
    7138:	00006b61 	.word	0x00006b61

0000713c <http_client_send_request>:
{
    713c:	b5f0      	push	{r4, r5, r6, r7, lr}
    713e:	46d6      	mov	lr, sl
    7140:	b500      	push	{lr}
    7142:	b088      	sub	sp, #32
    7144:	0004      	movs	r4, r0
    7146:	000f      	movs	r7, r1
    7148:	4692      	mov	sl, r2
    714a:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    714c:	2800      	cmp	r0, #0
    714e:	d100      	bne.n	7152 <http_client_send_request+0x16>
    7150:	e0d3      	b.n	72fa <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    7152:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7154:	2b02      	cmp	r3, #2
    7156:	d900      	bls.n	715a <http_client_send_request+0x1e>
    7158:	e0d3      	b.n	7302 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    715a:	2207      	movs	r2, #7
    715c:	4981      	ldr	r1, [pc, #516]	; (7364 <http_client_send_request+0x228>)
    715e:	0038      	movs	r0, r7
    7160:	4b81      	ldr	r3, [pc, #516]	; (7368 <http_client_send_request+0x22c>)
    7162:	4798      	blx	r3
		i = 7;
    7164:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    7166:	2800      	cmp	r0, #0
    7168:	d007      	beq.n	717a <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    716a:	2208      	movs	r2, #8
    716c:	497f      	ldr	r1, [pc, #508]	; (736c <http_client_send_request+0x230>)
    716e:	0038      	movs	r0, r7
    7170:	4b7d      	ldr	r3, [pc, #500]	; (7368 <http_client_send_request+0x22c>)
    7172:	4798      	blx	r3
		i = 8;
    7174:	4246      	negs	r6, r0
    7176:	4146      	adcs	r6, r0
    7178:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    717a:	1c63      	adds	r3, r4, #1
    717c:	19bd      	adds	r5, r7, r6
    717e:	9302      	str	r3, [sp, #8]
    7180:	0018      	movs	r0, r3
    7182:	4b7b      	ldr	r3, [pc, #492]	; (7370 <http_client_send_request+0x234>)
    7184:	4798      	blx	r3
    7186:	0002      	movs	r2, r0
    7188:	0029      	movs	r1, r5
    718a:	9802      	ldr	r0, [sp, #8]
    718c:	4b76      	ldr	r3, [pc, #472]	; (7368 <http_client_send_request+0x22c>)
    718e:	4798      	blx	r3
    7190:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    7192:	782b      	ldrb	r3, [r5, #0]
    7194:	2b00      	cmp	r3, #0
    7196:	d052      	beq.n	723e <http_client_send_request+0x102>
    7198:	2b2f      	cmp	r3, #47	; 0x2f
    719a:	d052      	beq.n	7242 <http_client_send_request+0x106>
    719c:	1c71      	adds	r1, r6, #1
    719e:	1879      	adds	r1, r7, r1
    71a0:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    71a2:	3201      	adds	r2, #1
    71a4:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    71a6:	000d      	movs	r5, r1
    71a8:	780b      	ldrb	r3, [r1, #0]
    71aa:	2b00      	cmp	r3, #0
    71ac:	d002      	beq.n	71b4 <http_client_send_request+0x78>
    71ae:	3101      	adds	r1, #1
    71b0:	2b2f      	cmp	r3, #47	; 0x2f
    71b2:	d1f6      	bne.n	71a2 <http_client_send_request+0x66>
	module->host[j] = '\0';
    71b4:	18a2      	adds	r2, r4, r2
    71b6:	2300      	movs	r3, #0
    71b8:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    71ba:	7863      	ldrb	r3, [r4, #1]
    71bc:	2b00      	cmp	r3, #0
    71be:	d100      	bne.n	71c2 <http_client_send_request+0x86>
    71c0:	e0a3      	b.n	730a <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    71c2:	0028      	movs	r0, r5
    71c4:	4b6a      	ldr	r3, [pc, #424]	; (7370 <http_client_send_request+0x234>)
    71c6:	4798      	blx	r3
    71c8:	283f      	cmp	r0, #63	; 0x3f
    71ca:	d900      	bls.n	71ce <http_client_send_request+0x92>
    71cc:	e0a1      	b.n	7312 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    71ce:	23d4      	movs	r3, #212	; 0xd4
    71d0:	58e0      	ldr	r0, [r4, r3]
    71d2:	2800      	cmp	r0, #0
    71d4:	d001      	beq.n	71da <http_client_send_request+0x9e>
		free(module->req.ext_header);
    71d6:	4b67      	ldr	r3, [pc, #412]	; (7374 <http_client_send_request+0x238>)
    71d8:	4798      	blx	r3
	if (ext_header != NULL) {
    71da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    71dc:	2b00      	cmp	r3, #0
    71de:	d032      	beq.n	7246 <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    71e0:	0018      	movs	r0, r3
    71e2:	4b65      	ldr	r3, [pc, #404]	; (7378 <http_client_send_request+0x23c>)
    71e4:	4798      	blx	r3
    71e6:	23d4      	movs	r3, #212	; 0xd4
    71e8:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    71ea:	2800      	cmp	r0, #0
    71ec:	d100      	bne.n	71f0 <http_client_send_request+0xb4>
    71ee:	e094      	b.n	731a <http_client_send_request+0x1de>
	module->sending = 0;
    71f0:	2241      	movs	r2, #65	; 0x41
    71f2:	5ca3      	ldrb	r3, [r4, r2]
    71f4:	2101      	movs	r1, #1
    71f6:	438b      	bics	r3, r1
    71f8:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    71fa:	2300      	movs	r3, #0
    71fc:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    71fe:	782b      	ldrb	r3, [r5, #0]
    7200:	2b2f      	cmp	r3, #47	; 0x2f
    7202:	d024      	beq.n	724e <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    7204:	222f      	movs	r2, #47	; 0x2f
    7206:	2370      	movs	r3, #112	; 0x70
    7208:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    720a:	782b      	ldrb	r3, [r5, #0]
    720c:	2b00      	cmp	r3, #0
    720e:	d124      	bne.n	725a <http_client_send_request+0x11e>
	if (entity != NULL) {
    7210:	9b03      	ldr	r3, [sp, #12]
    7212:	2b00      	cmp	r3, #0
    7214:	d027      	beq.n	7266 <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    7216:	0020      	movs	r0, r4
    7218:	30b0      	adds	r0, #176	; 0xb0
    721a:	2218      	movs	r2, #24
    721c:	0019      	movs	r1, r3
    721e:	4b57      	ldr	r3, [pc, #348]	; (737c <http_client_send_request+0x240>)
    7220:	4798      	blx	r3
	module->req.method = method;
    7222:	23c8      	movs	r3, #200	; 0xc8
    7224:	4652      	mov	r2, sl
    7226:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    7228:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    722a:	2b01      	cmp	r3, #1
    722c:	d022      	beq.n	7274 <http_client_send_request+0x138>
    722e:	2b00      	cmp	r3, #0
    7230:	d027      	beq.n	7282 <http_client_send_request+0x146>
    7232:	2b02      	cmp	r3, #2
    7234:	d03a      	beq.n	72ac <http_client_send_request+0x170>
		return -EAGAIN;
    7236:	230b      	movs	r3, #11
    7238:	425b      	negs	r3, r3
    723a:	9301      	str	r3, [sp, #4]
    723c:	e08d      	b.n	735a <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    723e:	2200      	movs	r2, #0
    7240:	e7b8      	b.n	71b4 <http_client_send_request+0x78>
    7242:	2200      	movs	r2, #0
    7244:	e7b6      	b.n	71b4 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    7246:	2200      	movs	r2, #0
    7248:	23d4      	movs	r3, #212	; 0xd4
    724a:	50e2      	str	r2, [r4, r3]
    724c:	e7d0      	b.n	71f0 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    724e:	0020      	movs	r0, r4
    7250:	3070      	adds	r0, #112	; 0x70
    7252:	0029      	movs	r1, r5
    7254:	4b4a      	ldr	r3, [pc, #296]	; (7380 <http_client_send_request+0x244>)
    7256:	4798      	blx	r3
    7258:	e7da      	b.n	7210 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    725a:	0029      	movs	r1, r5
    725c:	0020      	movs	r0, r4
    725e:	3071      	adds	r0, #113	; 0x71
    7260:	4b47      	ldr	r3, [pc, #284]	; (7380 <http_client_send_request+0x244>)
    7262:	4798      	blx	r3
    7264:	e7d4      	b.n	7210 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    7266:	0020      	movs	r0, r4
    7268:	30b0      	adds	r0, #176	; 0xb0
    726a:	2218      	movs	r2, #24
    726c:	2100      	movs	r1, #0
    726e:	4b45      	ldr	r3, [pc, #276]	; (7384 <http_client_send_request+0x248>)
    7270:	4798      	blx	r3
    7272:	e7d6      	b.n	7222 <http_client_send_request+0xe6>
		if (!reconnect) {
    7274:	9b01      	ldr	r3, [sp, #4]
    7276:	2b00      	cmp	r3, #0
    7278:	d06f      	beq.n	735a <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    727a:	2100      	movs	r1, #0
    727c:	0020      	movs	r0, r4
    727e:	4b42      	ldr	r3, [pc, #264]	; (7388 <http_client_send_request+0x24c>)
    7280:	4798      	blx	r3
		if (module->config.tls) {
    7282:	2352      	movs	r3, #82	; 0x52
    7284:	5ce2      	ldrb	r2, [r4, r3]
    7286:	1e53      	subs	r3, r2, #1
    7288:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    728a:	b2d2      	uxtb	r2, r2
    728c:	2101      	movs	r1, #1
    728e:	2002      	movs	r0, #2
    7290:	4b3e      	ldr	r3, [pc, #248]	; (738c <http_client_send_request+0x250>)
    7292:	4798      	blx	r3
    7294:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    7296:	2800      	cmp	r0, #0
    7298:	db43      	blt.n	7322 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    729a:	0080      	lsls	r0, r0, #2
    729c:	4b3c      	ldr	r3, [pc, #240]	; (7390 <http_client_send_request+0x254>)
    729e:	50c4      	str	r4, [r0, r3]
    72a0:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    72a2:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    72a4:	2620      	movs	r6, #32
			isv6 = 1;
    72a6:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    72a8:	2730      	movs	r7, #48	; 0x30
    72aa:	e00c      	b.n	72c6 <http_client_send_request+0x18a>
		if (!reconnect) {
    72ac:	9b01      	ldr	r3, [sp, #4]
    72ae:	2b00      	cmp	r3, #0
    72b0:	d1e3      	bne.n	727a <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    72b2:	3303      	adds	r3, #3
    72b4:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    72b6:	0020      	movs	r0, r4
    72b8:	4b36      	ldr	r3, [pc, #216]	; (7394 <http_client_send_request+0x258>)
    72ba:	4798      	blx	r3
			break;
    72bc:	e04d      	b.n	735a <http_client_send_request+0x21e>
			if (isv6) {
    72be:	2900      	cmp	r1, #0
    72c0:	d001      	beq.n	72c6 <http_client_send_request+0x18a>
    72c2:	e012      	b.n	72ea <http_client_send_request+0x1ae>
			isv6 = 1;
    72c4:	0001      	movs	r1, r0
	while (*host != '\0') {
    72c6:	782a      	ldrb	r2, [r5, #0]
    72c8:	2a00      	cmp	r2, #0
    72ca:	d02e      	beq.n	732a <http_client_send_request+0x1ee>
		ch = *host++;
    72cc:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    72ce:	0013      	movs	r3, r2
    72d0:	43b3      	bics	r3, r6
    72d2:	3b41      	subs	r3, #65	; 0x41
    72d4:	2b05      	cmp	r3, #5
    72d6:	d9f5      	bls.n	72c4 <http_client_send_request+0x188>
    72d8:	2a3a      	cmp	r2, #58	; 0x3a
    72da:	d00a      	beq.n	72f2 <http_client_send_request+0x1b6>
    72dc:	2a2f      	cmp	r2, #47	; 0x2f
    72de:	d00a      	beq.n	72f6 <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    72e0:	2a2e      	cmp	r2, #46	; 0x2e
    72e2:	d0ec      	beq.n	72be <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    72e4:	403a      	ands	r2, r7
    72e6:	2a30      	cmp	r2, #48	; 0x30
    72e8:	d0ed      	beq.n	72c6 <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    72ea:	9802      	ldr	r0, [sp, #8]
    72ec:	4b2a      	ldr	r3, [pc, #168]	; (7398 <http_client_send_request+0x25c>)
    72ee:	4798      	blx	r3
    72f0:	e02f      	b.n	7352 <http_client_send_request+0x216>
			isv6 = 1;
    72f2:	0001      	movs	r1, r0
    72f4:	e7e7      	b.n	72c6 <http_client_send_request+0x18a>
    72f6:	0001      	movs	r1, r0
    72f8:	e7e5      	b.n	72c6 <http_client_send_request+0x18a>
		return -EINVAL;
    72fa:	2316      	movs	r3, #22
    72fc:	425b      	negs	r3, r3
    72fe:	9301      	str	r3, [sp, #4]
    7300:	e02b      	b.n	735a <http_client_send_request+0x21e>
		return -EBUSY;
    7302:	2310      	movs	r3, #16
    7304:	425b      	negs	r3, r3
    7306:	9301      	str	r3, [sp, #4]
    7308:	e027      	b.n	735a <http_client_send_request+0x21e>
		return -EINVAL;
    730a:	2316      	movs	r3, #22
    730c:	425b      	negs	r3, r3
    730e:	9301      	str	r3, [sp, #4]
    7310:	e023      	b.n	735a <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    7312:	235b      	movs	r3, #91	; 0x5b
    7314:	425b      	negs	r3, r3
    7316:	9301      	str	r3, [sp, #4]
    7318:	e01f      	b.n	735a <http_client_send_request+0x21e>
			return -ENOMEM;
    731a:	230c      	movs	r3, #12
    731c:	425b      	negs	r3, r3
    731e:	9301      	str	r3, [sp, #4]
    7320:	e01b      	b.n	735a <http_client_send_request+0x21e>
			return -ENOSPC;
    7322:	231c      	movs	r3, #28
    7324:	425b      	negs	r3, r3
    7326:	9301      	str	r3, [sp, #4]
    7328:	e017      	b.n	735a <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    732a:	2302      	movs	r3, #2
    732c:	aa04      	add	r2, sp, #16
    732e:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    7330:	334e      	adds	r3, #78	; 0x4e
    7332:	5ae3      	ldrh	r3, [r4, r3]
    7334:	021a      	lsls	r2, r3, #8
    7336:	0a1b      	lsrs	r3, r3, #8
    7338:	4313      	orrs	r3, r2
    733a:	aa04      	add	r2, sp, #16
    733c:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    733e:	9802      	ldr	r0, [sp, #8]
    7340:	4b16      	ldr	r3, [pc, #88]	; (739c <http_client_send_request+0x260>)
    7342:	4798      	blx	r3
    7344:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    7346:	2000      	movs	r0, #0
    7348:	5620      	ldrsb	r0, [r4, r0]
    734a:	2210      	movs	r2, #16
    734c:	a904      	add	r1, sp, #16
    734e:	4b14      	ldr	r3, [pc, #80]	; (73a0 <http_client_send_request+0x264>)
    7350:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    7352:	2301      	movs	r3, #1
    7354:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    7356:	2300      	movs	r3, #0
    7358:	9301      	str	r3, [sp, #4]
}
    735a:	9801      	ldr	r0, [sp, #4]
    735c:	b008      	add	sp, #32
    735e:	bc04      	pop	{r2}
    7360:	4692      	mov	sl, r2
    7362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7364:	0001292c 	.word	0x0001292c
    7368:	00010689 	.word	0x00010689
    736c:	00012934 	.word	0x00012934
    7370:	0001067b 	.word	0x0001067b
    7374:	0001016d 	.word	0x0001016d
    7378:	00010641 	.word	0x00010641
    737c:	00010181 	.word	0x00010181
    7380:	00010631 	.word	0x00010631
    7384:	000101b7 	.word	0x000101b7
    7388:	00006b61 	.word	0x00006b61
    738c:	0000c2cd 	.word	0x0000c2cd
    7390:	2000021c 	.word	0x2000021c
    7394:	00006c9d 	.word	0x00006c9d
    7398:	0000c715 	.word	0x0000c715
    739c:	0000c6a9 	.word	0x0000c6a9
    73a0:	0000c451 	.word	0x0000c451

000073a4 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    73a4:	b510      	push	{r4, lr}
	if (module == NULL) {
    73a6:	2800      	cmp	r0, #0
    73a8:	d00d      	beq.n	73c6 <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    73aa:	6c41      	ldr	r1, [r0, #68]	; 0x44
    73ac:	6e02      	ldr	r2, [r0, #96]	; 0x60
    73ae:	4291      	cmp	r1, r2
    73b0:	d20a      	bcs.n	73c8 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    73b2:	1a52      	subs	r2, r2, r1
    73b4:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    73b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    73b8:	469c      	mov	ip, r3
    73ba:	4461      	add	r1, ip
	recv(module->sock,
    73bc:	7800      	ldrb	r0, [r0, #0]
    73be:	b240      	sxtb	r0, r0
    73c0:	2300      	movs	r3, #0
    73c2:	4c04      	ldr	r4, [pc, #16]	; (73d4 <_http_client_recv_packet+0x30>)
    73c4:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    73c6:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    73c8:	218b      	movs	r1, #139	; 0x8b
    73ca:	4249      	negs	r1, r1
    73cc:	4b02      	ldr	r3, [pc, #8]	; (73d8 <_http_client_recv_packet+0x34>)
    73ce:	4798      	blx	r3
		return;
    73d0:	e7f9      	b.n	73c6 <_http_client_recv_packet+0x22>
    73d2:	46c0      	nop			; (mov r8, r8)
    73d4:	0000c579 	.word	0x0000c579
    73d8:	00006b61 	.word	0x00006b61

000073dc <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    73dc:	b570      	push	{r4, r5, r6, lr}
    73de:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    73e0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    73e2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    73e4:	1a5c      	subs	r4, r3, r1
    73e6:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    73e8:	2c00      	cmp	r4, #0
    73ea:	dc02      	bgt.n	73f2 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    73ec:	2300      	movs	r3, #0
    73ee:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    73f0:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    73f2:	0022      	movs	r2, r4
    73f4:	4b01      	ldr	r3, [pc, #4]	; (73fc <_http_client_move_buffer+0x20>)
    73f6:	4798      	blx	r3
		module->recved_size = remain;
    73f8:	646c      	str	r4, [r5, #68]	; 0x44
    73fa:	e7f9      	b.n	73f0 <_http_client_move_buffer+0x14>
    73fc:	00010193 	.word	0x00010193

00007400 <_http_client_handle_header>:
{
    7400:	b5f0      	push	{r4, r5, r6, r7, lr}
    7402:	46ce      	mov	lr, r9
    7404:	b500      	push	{lr}
    7406:	b084      	sub	sp, #16
    7408:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    740a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    740c:	4b62      	ldr	r3, [pc, #392]	; (7598 <_http_client_handle_header+0x198>)
    740e:	4699      	mov	r9, r3
    7410:	e049      	b.n	74a6 <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    7412:	0021      	movs	r1, r4
    7414:	0038      	movs	r0, r7
    7416:	4b61      	ldr	r3, [pc, #388]	; (759c <_http_client_handle_header+0x19c>)
    7418:	4798      	blx	r3
			return 0;
    741a:	2600      	movs	r6, #0
}
    741c:	0030      	movs	r0, r6
    741e:	b004      	add	sp, #16
    7420:	bc04      	pop	{r2}
    7422:	4691      	mov	r9, r2
    7424:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    7426:	1ca1      	adds	r1, r4, #2
    7428:	0038      	movs	r0, r7
    742a:	4b5c      	ldr	r3, [pc, #368]	; (759c <_http_client_handle_header+0x19c>)
    742c:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    742e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    7430:	2b00      	cmp	r3, #0
    7432:	d00a      	beq.n	744a <_http_client_handle_header+0x4a>
    7434:	22e4      	movs	r2, #228	; 0xe4
    7436:	5ab9      	ldrh	r1, [r7, r2]
    7438:	2900      	cmp	r1, #0
    743a:	d006      	beq.n	744a <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    743c:	3a08      	subs	r2, #8
    743e:	58b8      	ldr	r0, [r7, r2]
    7440:	2800      	cmp	r0, #0
    7442:	db07      	blt.n	7454 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    7444:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    7446:	4290      	cmp	r0, r2
    7448:	dc10      	bgt.n	746c <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    744a:	2201      	movs	r2, #1
    744c:	23d8      	movs	r3, #216	; 0xd8
    744e:	50fa      	str	r2, [r7, r3]
			return 1;
    7450:	2601      	movs	r6, #1
    7452:	e7e3      	b.n	741c <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    7454:	aa01      	add	r2, sp, #4
    7456:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    7458:	2101      	movs	r1, #1
    745a:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    745c:	2100      	movs	r1, #0
    745e:	20e0      	movs	r0, #224	; 0xe0
    7460:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    7462:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    7464:	3102      	adds	r1, #2
    7466:	0038      	movs	r0, r7
    7468:	4798      	blx	r3
    746a:	e7ee      	b.n	744a <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    746c:	aa01      	add	r2, sp, #4
    746e:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    7470:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    7472:	2100      	movs	r1, #0
    7474:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    7476:	20e0      	movs	r0, #224	; 0xe0
    7478:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    747a:	3102      	adds	r1, #2
    747c:	0038      	movs	r0, r7
    747e:	4798      	blx	r3
    7480:	e7e3      	b.n	744a <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    7482:	0020      	movs	r0, r4
    7484:	3010      	adds	r0, #16
    7486:	4b46      	ldr	r3, [pc, #280]	; (75a0 <_http_client_handle_header+0x1a0>)
    7488:	4798      	blx	r3
    748a:	23dc      	movs	r3, #220	; 0xdc
    748c:	50f8      	str	r0, [r7, r3]
    748e:	e009      	b.n	74a4 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    7490:	3201      	adds	r2, #1
    7492:	4295      	cmp	r5, r2
    7494:	d006      	beq.n	74a4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    7496:	7813      	ldrb	r3, [r2, #0]
    7498:	2b20      	cmp	r3, #32
    749a:	d12b      	bne.n	74f4 <_http_client_handle_header+0xf4>
    749c:	e7f8      	b.n	7490 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    749e:	3a21      	subs	r2, #33	; 0x21
    74a0:	3389      	adds	r3, #137	; 0x89
    74a2:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    74a4:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    74a6:	493f      	ldr	r1, [pc, #252]	; (75a4 <_http_client_handle_header+0x1a4>)
    74a8:	0020      	movs	r0, r4
    74aa:	47c8      	blx	r9
    74ac:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    74ae:	d0b0      	beq.n	7412 <_http_client_handle_header+0x12>
    74b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    74b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    74b4:	4694      	mov	ip, r2
    74b6:	4463      	add	r3, ip
    74b8:	4298      	cmp	r0, r3
    74ba:	d2aa      	bcs.n	7412 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    74bc:	2202      	movs	r2, #2
    74be:	4939      	ldr	r1, [pc, #228]	; (75a4 <_http_client_handle_header+0x1a4>)
    74c0:	0020      	movs	r0, r4
    74c2:	4b39      	ldr	r3, [pc, #228]	; (75a8 <_http_client_handle_header+0x1a8>)
    74c4:	4798      	blx	r3
    74c6:	2800      	cmp	r0, #0
    74c8:	d0ad      	beq.n	7426 <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    74ca:	2210      	movs	r2, #16
    74cc:	4937      	ldr	r1, [pc, #220]	; (75ac <_http_client_handle_header+0x1ac>)
    74ce:	0020      	movs	r0, r4
    74d0:	4b35      	ldr	r3, [pc, #212]	; (75a8 <_http_client_handle_header+0x1a8>)
    74d2:	4798      	blx	r3
    74d4:	2800      	cmp	r0, #0
    74d6:	d0d4      	beq.n	7482 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    74d8:	2213      	movs	r2, #19
    74da:	4935      	ldr	r1, [pc, #212]	; (75b0 <_http_client_handle_header+0x1b0>)
    74dc:	0020      	movs	r0, r4
    74de:	4b32      	ldr	r3, [pc, #200]	; (75a8 <_http_client_handle_header+0x1a8>)
    74e0:	4798      	blx	r3
    74e2:	1e06      	subs	r6, r0, #0
    74e4:	d110      	bne.n	7508 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    74e6:	0022      	movs	r2, r4
    74e8:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    74ea:	4295      	cmp	r5, r2
    74ec:	d9da      	bls.n	74a4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    74ee:	7ce3      	ldrb	r3, [r4, #19]
    74f0:	2b20      	cmp	r3, #32
    74f2:	d0cd      	beq.n	7490 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    74f4:	2220      	movs	r2, #32
    74f6:	4393      	bics	r3, r2
    74f8:	2b43      	cmp	r3, #67	; 0x43
    74fa:	d0d0      	beq.n	749e <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    74fc:	2186      	movs	r1, #134	; 0x86
    74fe:	4249      	negs	r1, r1
    7500:	0038      	movs	r0, r7
    7502:	4b2c      	ldr	r3, [pc, #176]	; (75b4 <_http_client_handle_header+0x1b4>)
    7504:	4798      	blx	r3
					return 0;
    7506:	e789      	b.n	741c <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    7508:	220c      	movs	r2, #12
    750a:	492b      	ldr	r1, [pc, #172]	; (75b8 <_http_client_handle_header+0x1b8>)
    750c:	0020      	movs	r0, r4
    750e:	4b26      	ldr	r3, [pc, #152]	; (75a8 <_http_client_handle_header+0x1a8>)
    7510:	4798      	blx	r3
    7512:	2800      	cmp	r0, #0
    7514:	d11d      	bne.n	7552 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    7516:	0022      	movs	r2, r4
    7518:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    751a:	4295      	cmp	r5, r2
    751c:	d9c2      	bls.n	74a4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    751e:	7b23      	ldrb	r3, [r4, #12]
    7520:	2b20      	cmp	r3, #32
    7522:	d009      	beq.n	7538 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    7524:	2220      	movs	r2, #32
    7526:	4393      	bics	r3, r2
    7528:	2b4b      	cmp	r3, #75	; 0x4b
    752a:	d00c      	beq.n	7546 <_http_client_handle_header+0x146>
					module->permanent = 0;
    752c:	2241      	movs	r2, #65	; 0x41
    752e:	5cbb      	ldrb	r3, [r7, r2]
    7530:	2102      	movs	r1, #2
    7532:	438b      	bics	r3, r1
    7534:	54bb      	strb	r3, [r7, r2]
    7536:	e7b5      	b.n	74a4 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    7538:	3201      	adds	r2, #1
    753a:	4295      	cmp	r5, r2
    753c:	d0b2      	beq.n	74a4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    753e:	7813      	ldrb	r3, [r2, #0]
    7540:	2b20      	cmp	r3, #32
    7542:	d1ef      	bne.n	7524 <_http_client_handle_header+0x124>
    7544:	e7f8      	b.n	7538 <_http_client_handle_header+0x138>
					module->permanent = 1;
    7546:	3221      	adds	r2, #33	; 0x21
    7548:	5cbb      	ldrb	r3, [r7, r2]
    754a:	2102      	movs	r1, #2
    754c:	430b      	orrs	r3, r1
    754e:	54bb      	strb	r3, [r7, r2]
    7550:	e7a8      	b.n	74a4 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    7552:	2205      	movs	r2, #5
    7554:	4919      	ldr	r1, [pc, #100]	; (75bc <_http_client_handle_header+0x1bc>)
    7556:	0020      	movs	r0, r4
    7558:	4b13      	ldr	r3, [pc, #76]	; (75a8 <_http_client_handle_header+0x1a8>)
    755a:	4798      	blx	r3
    755c:	2800      	cmp	r0, #0
    755e:	d1a1      	bne.n	74a4 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    7560:	0020      	movs	r0, r4
    7562:	3009      	adds	r0, #9
    7564:	4b0e      	ldr	r3, [pc, #56]	; (75a0 <_http_client_handle_header+0x1a0>)
    7566:	4798      	blx	r3
    7568:	23e4      	movs	r3, #228	; 0xe4
    756a:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    756c:	2200      	movs	r2, #0
    756e:	3b08      	subs	r3, #8
    7570:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    7572:	7963      	ldrb	r3, [r4, #5]
    7574:	2b31      	cmp	r3, #49	; 0x31
    7576:	d802      	bhi.n	757e <_http_client_handle_header+0x17e>
    7578:	79e3      	ldrb	r3, [r4, #7]
    757a:	2b30      	cmp	r3, #48	; 0x30
    757c:	d905      	bls.n	758a <_http_client_handle_header+0x18a>
				module->permanent = 1;
    757e:	2241      	movs	r2, #65	; 0x41
    7580:	5cbb      	ldrb	r3, [r7, r2]
    7582:	2102      	movs	r1, #2
    7584:	430b      	orrs	r3, r1
    7586:	54bb      	strb	r3, [r7, r2]
    7588:	e78c      	b.n	74a4 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    758a:	2241      	movs	r2, #65	; 0x41
    758c:	5cbb      	ldrb	r3, [r7, r2]
    758e:	2102      	movs	r1, #2
    7590:	438b      	bics	r3, r1
    7592:	54bb      	strb	r3, [r7, r2]
    7594:	e786      	b.n	74a4 <_http_client_handle_header+0xa4>
    7596:	46c0      	nop			; (mov r8, r8)
    7598:	000106ab 	.word	0x000106ab
    759c:	000073dd 	.word	0x000073dd
    75a0:	00010105 	.word	0x00010105
    75a4:	00013a24 	.word	0x00013a24
    75a8:	00010689 	.word	0x00010689
    75ac:	0001290c 	.word	0x0001290c
    75b0:	0001281c 	.word	0x0001281c
    75b4:	00006b61 	.word	0x00006b61
    75b8:	00012830 	.word	0x00012830
    75bc:	00012840 	.word	0x00012840

000075c0 <_http_client_handle_entity>:
{
    75c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    75c2:	46ce      	mov	lr, r9
    75c4:	b500      	push	{lr}
    75c6:	b086      	sub	sp, #24
    75c8:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    75ca:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    75cc:	23dc      	movs	r3, #220	; 0xdc
    75ce:	58c3      	ldr	r3, [r0, r3]
    75d0:	2b00      	cmp	r3, #0
    75d2:	db69      	blt.n	76a8 <_http_client_handle_entity+0xe8>
    75d4:	6e02      	ldr	r2, [r0, #96]	; 0x60
    75d6:	4293      	cmp	r3, r2
    75d8:	dc2b      	bgt.n	7632 <_http_client_handle_entity+0x72>
	return 0;
    75da:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    75dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    75de:	4293      	cmp	r3, r2
    75e0:	dc4e      	bgt.n	7680 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    75e2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    75e4:	2e00      	cmp	r6, #0
    75e6:	d003      	beq.n	75f0 <_http_client_handle_entity+0x30>
    75e8:	22e4      	movs	r2, #228	; 0xe4
    75ea:	5aa1      	ldrh	r1, [r4, r2]
    75ec:	2900      	cmp	r1, #0
    75ee:	d10e      	bne.n	760e <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    75f0:	2300      	movs	r3, #0
    75f2:	22d8      	movs	r2, #216	; 0xd8
    75f4:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    75f6:	320c      	adds	r2, #12
    75f8:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    75fa:	3341      	adds	r3, #65	; 0x41
    75fc:	5ce3      	ldrb	r3, [r4, r3]
    75fe:	079b      	lsls	r3, r3, #30
    7600:	d40f      	bmi.n	7622 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    7602:	2100      	movs	r1, #0
    7604:	0020      	movs	r0, r4
    7606:	4b71      	ldr	r3, [pc, #452]	; (77cc <_http_client_handle_entity+0x20c>)
    7608:	4798      	blx	r3
	return 0;
    760a:	2000      	movs	r0, #0
    760c:	e038      	b.n	7680 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    760e:	aa03      	add	r2, sp, #12
    7610:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    7612:	2100      	movs	r1, #0
    7614:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    7616:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    7618:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    761a:	3102      	adds	r1, #2
    761c:	0020      	movs	r0, r4
    761e:	47b0      	blx	r6
    7620:	e7e6      	b.n	75f0 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    7622:	23dc      	movs	r3, #220	; 0xdc
    7624:	58e1      	ldr	r1, [r4, r3]
    7626:	1869      	adds	r1, r5, r1
    7628:	0020      	movs	r0, r4
    762a:	4b69      	ldr	r3, [pc, #420]	; (77d0 <_http_client_handle_entity+0x210>)
    762c:	4798      	blx	r3
				return module->recved_size;
    762e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    7630:	e026      	b.n	7680 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    7632:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7634:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    7636:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    7638:	21e0      	movs	r1, #224	; 0xe0
    763a:	5840      	ldr	r0, [r0, r1]
    763c:	4684      	mov	ip, r0
    763e:	4462      	add	r2, ip
    7640:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    7642:	4293      	cmp	r3, r2
    7644:	dc20      	bgt.n	7688 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    7646:	2300      	movs	r3, #0
    7648:	22d8      	movs	r2, #216	; 0xd8
    764a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    764c:	320c      	adds	r2, #12
    764e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    7650:	3ae3      	subs	r2, #227	; 0xe3
    7652:	ab03      	add	r3, sp, #12
    7654:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    7656:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7658:	2b00      	cmp	r3, #0
    765a:	d007      	beq.n	766c <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    765c:	ae03      	add	r6, sp, #12
    765e:	0032      	movs	r2, r6
    7660:	2103      	movs	r1, #3
    7662:	0020      	movs	r0, r4
    7664:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    7666:	7a33      	ldrb	r3, [r6, #8]
    7668:	2b01      	cmp	r3, #1
    766a:	d103      	bne.n	7674 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    766c:	2341      	movs	r3, #65	; 0x41
    766e:	5ce3      	ldrb	r3, [r4, r3]
    7670:	079b      	lsls	r3, r3, #30
    7672:	d510      	bpl.n	7696 <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    7674:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7676:	18e9      	adds	r1, r5, r3
    7678:	0020      	movs	r0, r4
    767a:	4b55      	ldr	r3, [pc, #340]	; (77d0 <_http_client_handle_entity+0x210>)
    767c:	4798      	blx	r3
	return 0;
    767e:	2000      	movs	r0, #0
}
    7680:	b006      	add	sp, #24
    7682:	bc04      	pop	{r2}
    7684:	4691      	mov	r9, r2
    7686:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    7688:	2200      	movs	r2, #0
    768a:	ab03      	add	r3, sp, #12
    768c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    768e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7690:	2b00      	cmp	r3, #0
    7692:	d0ef      	beq.n	7674 <_http_client_handle_entity+0xb4>
    7694:	e7e2      	b.n	765c <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    7696:	484f      	ldr	r0, [pc, #316]	; (77d4 <_http_client_handle_entity+0x214>)
    7698:	4b4f      	ldr	r3, [pc, #316]	; (77d8 <_http_client_handle_entity+0x218>)
    769a:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    769c:	2100      	movs	r1, #0
    769e:	0020      	movs	r0, r4
    76a0:	4b4a      	ldr	r3, [pc, #296]	; (77cc <_http_client_handle_entity+0x20c>)
    76a2:	4798      	blx	r3
					return 0;
    76a4:	2000      	movs	r0, #0
    76a6:	e7eb      	b.n	7680 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    76a8:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    76aa:	2300      	movs	r3, #0
    76ac:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    76ae:	26e0      	movs	r6, #224	; 0xe0
    76b0:	e00a      	b.n	76c8 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    76b2:	2341      	movs	r3, #65	; 0x41
    76b4:	5ce3      	ldrb	r3, [r4, r3]
    76b6:	079b      	lsls	r3, r3, #30
    76b8:	d51b      	bpl.n	76f2 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    76ba:	1ca9      	adds	r1, r5, #2
    76bc:	0020      	movs	r0, r4
    76be:	4b44      	ldr	r3, [pc, #272]	; (77d0 <_http_client_handle_entity+0x210>)
    76c0:	4798      	blx	r3
	} while(module->recved_size > 0);
    76c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    76c4:	2b00      	cmp	r3, #0
    76c6:	d073      	beq.n	77b0 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    76c8:	59a3      	ldr	r3, [r4, r6]
    76ca:	2b00      	cmp	r3, #0
    76cc:	db30      	blt.n	7730 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    76ce:	d116      	bne.n	76fe <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    76d0:	22d8      	movs	r2, #216	; 0xd8
    76d2:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    76d4:	320c      	adds	r2, #12
    76d6:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    76d8:	3ae3      	subs	r2, #227	; 0xe3
    76da:	4669      	mov	r1, sp
    76dc:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    76de:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    76e0:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    76e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    76e4:	2b00      	cmp	r3, #0
    76e6:	d0e4      	beq.n	76b2 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    76e8:	466a      	mov	r2, sp
    76ea:	2103      	movs	r1, #3
    76ec:	0020      	movs	r0, r4
    76ee:	4798      	blx	r3
    76f0:	e7df      	b.n	76b2 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    76f2:	2100      	movs	r1, #0
    76f4:	0020      	movs	r0, r4
    76f6:	4b35      	ldr	r3, [pc, #212]	; (77cc <_http_client_handle_entity+0x20c>)
    76f8:	4798      	blx	r3
	return 0;
    76fa:	2000      	movs	r0, #0
    76fc:	e7c0      	b.n	7680 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    76fe:	42bb      	cmp	r3, r7
    7700:	dcdf      	bgt.n	76c2 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    7702:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    7704:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    7706:	2300      	movs	r3, #0
    7708:	466a      	mov	r2, sp
    770a:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    770c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    770e:	2b00      	cmp	r3, #0
    7710:	d002      	beq.n	7718 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    7712:	2103      	movs	r1, #3
    7714:	0020      	movs	r0, r4
    7716:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    7718:	59a3      	ldr	r3, [r4, r6]
    771a:	1c99      	adds	r1, r3, #2
    771c:	1869      	adds	r1, r5, r1
    771e:	0020      	movs	r0, r4
    7720:	4b2b      	ldr	r3, [pc, #172]	; (77d0 <_http_client_handle_entity+0x210>)
    7722:	4798      	blx	r3
				length = (int)module->recved_size;
    7724:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    7726:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    7728:	2301      	movs	r3, #1
    772a:	425b      	negs	r3, r3
    772c:	51a3      	str	r3, [r4, r6]
    772e:	e7c8      	b.n	76c2 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    7730:	2300      	movs	r3, #0
    7732:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    7734:	2f00      	cmp	r7, #0
    7736:	dd04      	ble.n	7742 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    7738:	782b      	ldrb	r3, [r5, #0]
    773a:	2b0a      	cmp	r3, #10
    773c:	d11c      	bne.n	7778 <_http_client_handle_entity+0x1b8>
					buffer++;
    773e:	3501      	adds	r5, #1
					length--;
    7740:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    7742:	59a3      	ldr	r3, [r4, r6]
    7744:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7746:	4293      	cmp	r3, r2
    7748:	dc39      	bgt.n	77be <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    774a:	2f00      	cmp	r7, #0
    774c:	d1b9      	bne.n	76c2 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    774e:	2201      	movs	r2, #1
    7750:	4252      	negs	r2, r2
    7752:	23e0      	movs	r3, #224	; 0xe0
    7754:	50e2      	str	r2, [r4, r3]
    7756:	e7d0      	b.n	76fa <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    7758:	001a      	movs	r2, r3
    775a:	3a61      	subs	r2, #97	; 0x61
    775c:	2a05      	cmp	r2, #5
    775e:	d818      	bhi.n	7792 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    7760:	59a2      	ldr	r2, [r4, r6]
    7762:	0112      	lsls	r2, r2, #4
    7764:	18d3      	adds	r3, r2, r3
    7766:	3b61      	subs	r3, #97	; 0x61
    7768:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    776a:	3501      	adds	r5, #1
    776c:	3f01      	subs	r7, #1
    776e:	2f00      	cmp	r7, #0
    7770:	d020      	beq.n	77b4 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    7772:	782b      	ldrb	r3, [r5, #0]
    7774:	2b0a      	cmp	r3, #10
    7776:	d0e2      	beq.n	773e <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    7778:	464a      	mov	r2, r9
    777a:	2a00      	cmp	r2, #0
    777c:	d1f5      	bne.n	776a <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    777e:	001a      	movs	r2, r3
    7780:	3a30      	subs	r2, #48	; 0x30
    7782:	2a09      	cmp	r2, #9
    7784:	d8e8      	bhi.n	7758 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    7786:	59a2      	ldr	r2, [r4, r6]
    7788:	0112      	lsls	r2, r2, #4
    778a:	18d3      	adds	r3, r2, r3
    778c:	3b30      	subs	r3, #48	; 0x30
    778e:	51a3      	str	r3, [r4, r6]
    7790:	e7eb      	b.n	776a <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    7792:	001a      	movs	r2, r3
    7794:	3a41      	subs	r2, #65	; 0x41
    7796:	2a05      	cmp	r2, #5
    7798:	d805      	bhi.n	77a6 <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    779a:	59a2      	ldr	r2, [r4, r6]
    779c:	0112      	lsls	r2, r2, #4
    779e:	18d3      	adds	r3, r2, r3
    77a0:	3b41      	subs	r3, #65	; 0x41
    77a2:	51a3      	str	r3, [r4, r6]
    77a4:	e7e1      	b.n	776a <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    77a6:	3b3b      	subs	r3, #59	; 0x3b
    77a8:	425a      	negs	r2, r3
    77aa:	415a      	adcs	r2, r3
    77ac:	4691      	mov	r9, r2
    77ae:	e7dc      	b.n	776a <_http_client_handle_entity+0x1aa>
	return 0;
    77b0:	2000      	movs	r0, #0
    77b2:	e765      	b.n	7680 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    77b4:	23e0      	movs	r3, #224	; 0xe0
    77b6:	58e3      	ldr	r3, [r4, r3]
    77b8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    77ba:	4293      	cmp	r3, r2
    77bc:	ddc7      	ble.n	774e <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    77be:	218b      	movs	r1, #139	; 0x8b
    77c0:	4249      	negs	r1, r1
    77c2:	0020      	movs	r0, r4
    77c4:	4b01      	ldr	r3, [pc, #4]	; (77cc <_http_client_handle_entity+0x20c>)
    77c6:	4798      	blx	r3
    77c8:	e797      	b.n	76fa <_http_client_handle_entity+0x13a>
    77ca:	46c0      	nop			; (mov r8, r8)
    77cc:	00006b61 	.word	0x00006b61
    77d0:	000073dd 	.word	0x000073dd
    77d4:	00012818 	.word	0x00012818
    77d8:	00010435 	.word	0x00010435

000077dc <_http_client_handle_response>:
{
    77dc:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    77de:	23d8      	movs	r3, #216	; 0xd8
    77e0:	58c3      	ldr	r3, [r0, r3]
    77e2:	2b00      	cmp	r3, #0
    77e4:	d003      	beq.n	77ee <_http_client_handle_response+0x12>
    77e6:	2b01      	cmp	r3, #1
    77e8:	d004      	beq.n	77f4 <_http_client_handle_response+0x18>
	return 0;
    77ea:	2000      	movs	r0, #0
    77ec:	e001      	b.n	77f2 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    77ee:	4b03      	ldr	r3, [pc, #12]	; (77fc <_http_client_handle_response+0x20>)
    77f0:	4798      	blx	r3
}
    77f2:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    77f4:	4b02      	ldr	r3, [pc, #8]	; (7800 <_http_client_handle_response+0x24>)
    77f6:	4798      	blx	r3
    77f8:	e7fb      	b.n	77f2 <_http_client_handle_response+0x16>
    77fa:	46c0      	nop			; (mov r8, r8)
    77fc:	00007401 	.word	0x00007401
    7800:	000075c1 	.word	0x000075c1

00007804 <_http_client_recved_packet>:
{
    7804:	b570      	push	{r4, r5, r6, lr}
    7806:	0004      	movs	r4, r0
	module->recved_size += read_len;
    7808:	6c43      	ldr	r3, [r0, #68]	; 0x44
    780a:	469c      	mov	ip, r3
    780c:	4461      	add	r1, ip
    780e:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    7810:	2358      	movs	r3, #88	; 0x58
    7812:	5ac3      	ldrh	r3, [r0, r3]
    7814:	2b00      	cmp	r3, #0
    7816:	d105      	bne.n	7824 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    7818:	4d05      	ldr	r5, [pc, #20]	; (7830 <_http_client_recved_packet+0x2c>)
    781a:	0020      	movs	r0, r4
    781c:	47a8      	blx	r5
    781e:	2800      	cmp	r0, #0
    7820:	d1fb      	bne.n	781a <_http_client_recved_packet+0x16>
}
    7822:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    7824:	6c81      	ldr	r1, [r0, #72]	; 0x48
    7826:	6d40      	ldr	r0, [r0, #84]	; 0x54
    7828:	4b02      	ldr	r3, [pc, #8]	; (7834 <_http_client_recved_packet+0x30>)
    782a:	4798      	blx	r3
    782c:	e7f4      	b.n	7818 <_http_client_recved_packet+0x14>
    782e:	46c0      	nop			; (mov r8, r8)
    7830:	000077dd 	.word	0x000077dd
    7834:	00007bd9 	.word	0x00007bd9

00007838 <http_client_socket_event_handler>:
{
    7838:	b510      	push	{r4, lr}
    783a:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    783c:	0080      	lsls	r0, r0, #2
    783e:	4b65      	ldr	r3, [pc, #404]	; (79d4 <http_client_socket_event_handler+0x19c>)
    7840:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    7842:	2c00      	cmp	r4, #0
    7844:	d006      	beq.n	7854 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    7846:	2906      	cmp	r1, #6
    7848:	d051      	beq.n	78ee <http_client_socket_event_handler+0xb6>
    784a:	2907      	cmp	r1, #7
    784c:	d100      	bne.n	7850 <http_client_socket_event_handler+0x18>
    784e:	e08a      	b.n	7966 <http_client_socket_event_handler+0x12e>
    7850:	2905      	cmp	r1, #5
    7852:	d001      	beq.n	7858 <http_client_socket_event_handler+0x20>
}
    7854:	b004      	add	sp, #16
    7856:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    7858:	2301      	movs	r3, #1
    785a:	56d3      	ldrsb	r3, [r2, r3]
    785c:	1e1a      	subs	r2, r3, #0
    785e:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    7860:	db15      	blt.n	788e <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    7862:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7864:	2b00      	cmp	r3, #0
    7866:	d003      	beq.n	7870 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    7868:	aa01      	add	r2, sp, #4
    786a:	2100      	movs	r1, #0
    786c:	0020      	movs	r0, r4
    786e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    7870:	2303      	movs	r3, #3
    7872:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    7874:	3355      	adds	r3, #85	; 0x55
    7876:	5ae2      	ldrh	r2, [r4, r3]
    7878:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    787a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    787c:	4b56      	ldr	r3, [pc, #344]	; (79d8 <http_client_socket_event_handler+0x1a0>)
    787e:	4798      	blx	r3
    		_http_client_recv_packet(module);
    7880:	0020      	movs	r0, r4
    7882:	4b56      	ldr	r3, [pc, #344]	; (79dc <http_client_socket_event_handler+0x1a4>)
    7884:	4798      	blx	r3
			_http_client_request(module);
    7886:	0020      	movs	r0, r4
    7888:	4b55      	ldr	r3, [pc, #340]	; (79e0 <http_client_socket_event_handler+0x1a8>)
    788a:	4798      	blx	r3
    788c:	e7e2      	b.n	7854 <http_client_socket_event_handler+0x1c>
	switch (err) {
    788e:	330e      	adds	r3, #14
    7890:	b2d9      	uxtb	r1, r3
    7892:	290e      	cmp	r1, #14
    7894:	d81e      	bhi.n	78d4 <http_client_socket_event_handler+0x9c>
    7896:	008b      	lsls	r3, r1, #2
    7898:	4952      	ldr	r1, [pc, #328]	; (79e4 <http_client_socket_event_handler+0x1ac>)
    789a:	58cb      	ldr	r3, [r1, r3]
    789c:	469f      	mov	pc, r3
			return -ENOENT;
    789e:	2102      	movs	r1, #2
    78a0:	4249      	negs	r1, r1
    78a2:	e01d      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    78a4:	2170      	movs	r1, #112	; 0x70
    78a6:	4249      	negs	r1, r1
    78a8:	e01a      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    78aa:	210c      	movs	r1, #12
    78ac:	4249      	negs	r1, r1
    78ae:	e017      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    78b0:	2116      	movs	r1, #22
    78b2:	4249      	negs	r1, r1
    78b4:	e014      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    78b6:	210c      	movs	r1, #12
    78b8:	4249      	negs	r1, r1
    78ba:	e011      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    78bc:	2179      	movs	r1, #121	; 0x79
    78be:	4249      	negs	r1, r1
    78c0:	e00e      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    78c2:	2168      	movs	r1, #104	; 0x68
    78c4:	4249      	negs	r1, r1
    78c6:	e00b      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    78c8:	210b      	movs	r1, #11
    78ca:	4249      	negs	r1, r1
    78cc:	e008      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    78ce:	2110      	movs	r1, #16
    78d0:	4249      	negs	r1, r1
    78d2:	e005      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    78d4:	2a00      	cmp	r2, #0
    78d6:	db07      	blt.n	78e8 <http_client_socket_event_handler+0xb0>
			return 0;
    78d8:	2100      	movs	r1, #0
    78da:	e001      	b.n	78e0 <http_client_socket_event_handler+0xa8>
			return -EIO;
    78dc:	2105      	movs	r1, #5
    78de:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    78e0:	0020      	movs	r0, r4
    78e2:	4b41      	ldr	r3, [pc, #260]	; (79e8 <http_client_socket_event_handler+0x1b0>)
    78e4:	4798      	blx	r3
    78e6:	e7b5      	b.n	7854 <http_client_socket_event_handler+0x1c>
				return -EIO;
    78e8:	2105      	movs	r1, #5
    78ea:	4249      	negs	r1, r1
    78ec:	e7f8      	b.n	78e0 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    78ee:	2304      	movs	r3, #4
    78f0:	5ed1      	ldrsh	r1, [r2, r3]
    78f2:	2900      	cmp	r1, #0
    78f4:	dd06      	ble.n	7904 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    78f6:	0020      	movs	r0, r4
    78f8:	4b3c      	ldr	r3, [pc, #240]	; (79ec <http_client_socket_event_handler+0x1b4>)
    78fa:	4798      	blx	r3
		_http_client_recv_packet(module);
    78fc:	0020      	movs	r0, r4
    78fe:	4b37      	ldr	r3, [pc, #220]	; (79dc <http_client_socket_event_handler+0x1a4>)
    7900:	4798      	blx	r3
		break;
    7902:	e7a7      	b.n	7854 <http_client_socket_event_handler+0x1c>
	switch (err) {
    7904:	000b      	movs	r3, r1
    7906:	330e      	adds	r3, #14
    7908:	b29a      	uxth	r2, r3
    790a:	2a0e      	cmp	r2, #14
    790c:	d81e      	bhi.n	794c <http_client_socket_event_handler+0x114>
    790e:	0093      	lsls	r3, r2, #2
    7910:	4a37      	ldr	r2, [pc, #220]	; (79f0 <http_client_socket_event_handler+0x1b8>)
    7912:	58d3      	ldr	r3, [r2, r3]
    7914:	469f      	mov	pc, r3
			return -ENOENT;
    7916:	2102      	movs	r1, #2
    7918:	4249      	negs	r1, r1
    791a:	e01d      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    791c:	2170      	movs	r1, #112	; 0x70
    791e:	4249      	negs	r1, r1
    7920:	e01a      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    7922:	210c      	movs	r1, #12
    7924:	4249      	negs	r1, r1
    7926:	e017      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -EINVAL;
    7928:	2116      	movs	r1, #22
    792a:	4249      	negs	r1, r1
    792c:	e014      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    792e:	210c      	movs	r1, #12
    7930:	4249      	negs	r1, r1
    7932:	e011      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    7934:	2179      	movs	r1, #121	; 0x79
    7936:	4249      	negs	r1, r1
    7938:	e00e      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    793a:	2168      	movs	r1, #104	; 0x68
    793c:	4249      	negs	r1, r1
    793e:	e00b      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    7940:	210b      	movs	r1, #11
    7942:	4249      	negs	r1, r1
    7944:	e008      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    7946:	2110      	movs	r1, #16
    7948:	4249      	negs	r1, r1
    794a:	e005      	b.n	7958 <http_client_socket_event_handler+0x120>
			if (err < 0) {
    794c:	2900      	cmp	r1, #0
    794e:	db07      	blt.n	7960 <http_client_socket_event_handler+0x128>
			return 0;
    7950:	2100      	movs	r1, #0
    7952:	e001      	b.n	7958 <http_client_socket_event_handler+0x120>
			return -EIO;
    7954:	2105      	movs	r1, #5
    7956:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    7958:	0020      	movs	r0, r4
    795a:	4b23      	ldr	r3, [pc, #140]	; (79e8 <http_client_socket_event_handler+0x1b0>)
    795c:	4798      	blx	r3
    795e:	e7cd      	b.n	78fc <http_client_socket_event_handler+0xc4>
				return -EIO;
    7960:	2105      	movs	r1, #5
    7962:	4249      	negs	r1, r1
    7964:	e7f8      	b.n	7958 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    7966:	2300      	movs	r3, #0
    7968:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    796a:	2b00      	cmp	r3, #0
    796c:	db08      	blt.n	7980 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    796e:	0020      	movs	r0, r4
    7970:	4b1b      	ldr	r3, [pc, #108]	; (79e0 <http_client_socket_event_handler+0x1a8>)
    7972:	4798      	blx	r3
		module->sending = 0;
    7974:	2241      	movs	r2, #65	; 0x41
    7976:	5ca3      	ldrb	r3, [r4, r2]
    7978:	2101      	movs	r1, #1
    797a:	438b      	bics	r3, r1
    797c:	54a3      	strb	r3, [r4, r2]
    	break;
    797e:	e769      	b.n	7854 <http_client_socket_event_handler+0x1c>
	switch (err) {
    7980:	330e      	adds	r3, #14
    7982:	b29a      	uxth	r2, r3
    7984:	2a0d      	cmp	r2, #13
    7986:	d81e      	bhi.n	79c6 <http_client_socket_event_handler+0x18e>
    7988:	0093      	lsls	r3, r2, #2
    798a:	4a1a      	ldr	r2, [pc, #104]	; (79f4 <http_client_socket_event_handler+0x1bc>)
    798c:	58d3      	ldr	r3, [r2, r3]
    798e:	469f      	mov	pc, r3
			return -ENOENT;
    7990:	2102      	movs	r1, #2
    7992:	4249      	negs	r1, r1
    7994:	e019      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    7996:	2170      	movs	r1, #112	; 0x70
    7998:	4249      	negs	r1, r1
    799a:	e016      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    799c:	210c      	movs	r1, #12
    799e:	4249      	negs	r1, r1
    79a0:	e013      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -EINVAL;
    79a2:	2116      	movs	r1, #22
    79a4:	4249      	negs	r1, r1
    79a6:	e010      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    79a8:	210c      	movs	r1, #12
    79aa:	4249      	negs	r1, r1
    79ac:	e00d      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    79ae:	2179      	movs	r1, #121	; 0x79
    79b0:	4249      	negs	r1, r1
    79b2:	e00a      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    79b4:	2168      	movs	r1, #104	; 0x68
    79b6:	4249      	negs	r1, r1
    79b8:	e007      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    79ba:	210b      	movs	r1, #11
    79bc:	4249      	negs	r1, r1
    79be:	e004      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    79c0:	2110      	movs	r1, #16
    79c2:	4249      	negs	r1, r1
    79c4:	e001      	b.n	79ca <http_client_socket_event_handler+0x192>
			return -EIO;
    79c6:	2105      	movs	r1, #5
    79c8:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    79ca:	0020      	movs	r0, r4
    79cc:	4b06      	ldr	r3, [pc, #24]	; (79e8 <http_client_socket_event_handler+0x1b0>)
    79ce:	4798      	blx	r3
    79d0:	e7d0      	b.n	7974 <http_client_socket_event_handler+0x13c>
    79d2:	46c0      	nop			; (mov r8, r8)
    79d4:	2000021c 	.word	0x2000021c
    79d8:	00007bad 	.word	0x00007bad
    79dc:	000073a5 	.word	0x000073a5
    79e0:	00006c9d 	.word	0x00006c9d
    79e4:	00012758 	.word	0x00012758
    79e8:	00006b61 	.word	0x00006b61
    79ec:	00007805 	.word	0x00007805
    79f0:	00012794 	.word	0x00012794
    79f4:	000127d0 	.word	0x000127d0

000079f8 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    79f8:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    79fa:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    79fc:	2200      	movs	r2, #0
    79fe:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    7a00:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    7a02:	9b00      	ldr	r3, [sp, #0]
    7a04:	60c3      	str	r3, [r0, #12]
}
    7a06:	4770      	bx	lr

00007a08 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    7a08:	b510      	push	{r4, lr}
    7a0a:	0004      	movs	r4, r0
	if(writer->written > 0) {
    7a0c:	6842      	ldr	r2, [r0, #4]
    7a0e:	2a00      	cmp	r2, #0
    7a10:	d100      	bne.n	7a14 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    7a12:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    7a14:	6901      	ldr	r1, [r0, #16]
    7a16:	68c0      	ldr	r0, [r0, #12]
    7a18:	68a3      	ldr	r3, [r4, #8]
    7a1a:	4798      	blx	r3
		writer->written = 0;
    7a1c:	2300      	movs	r3, #0
    7a1e:	6063      	str	r3, [r4, #4]
}
    7a20:	e7f7      	b.n	7a12 <stream_writer_send_remain+0xa>
	...

00007a24 <stream_writer_send_8>:
{
    7a24:	b570      	push	{r4, r5, r6, lr}
    7a26:	0004      	movs	r4, r0
    7a28:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    7a2a:	6803      	ldr	r3, [r0, #0]
    7a2c:	6842      	ldr	r2, [r0, #4]
    7a2e:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    7a30:	2b00      	cmp	r3, #0
    7a32:	dd05      	ble.n	7a40 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    7a34:	6922      	ldr	r2, [r4, #16]
    7a36:	6863      	ldr	r3, [r4, #4]
    7a38:	1c59      	adds	r1, r3, #1
    7a3a:	6061      	str	r1, [r4, #4]
    7a3c:	54d5      	strb	r5, [r2, r3]
}
    7a3e:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    7a40:	4b01      	ldr	r3, [pc, #4]	; (7a48 <stream_writer_send_8+0x24>)
    7a42:	4798      	blx	r3
    7a44:	e7f6      	b.n	7a34 <stream_writer_send_8+0x10>
    7a46:	46c0      	nop			; (mov r8, r8)
    7a48:	00007a09 	.word	0x00007a09

00007a4c <stream_writer_send_16BE>:
{
    7a4c:	b570      	push	{r4, r5, r6, lr}
    7a4e:	0006      	movs	r6, r0
    7a50:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    7a52:	1209      	asrs	r1, r1, #8
    7a54:	4d02      	ldr	r5, [pc, #8]	; (7a60 <stream_writer_send_16BE+0x14>)
    7a56:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    7a58:	b261      	sxtb	r1, r4
    7a5a:	0030      	movs	r0, r6
    7a5c:	47a8      	blx	r5
}
    7a5e:	bd70      	pop	{r4, r5, r6, pc}
    7a60:	00007a25 	.word	0x00007a25

00007a64 <stream_writer_send_buffer>:
{
    7a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a66:	0006      	movs	r6, r0
    7a68:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    7a6a:	2a00      	cmp	r2, #0
    7a6c:	d008      	beq.n	7a80 <stream_writer_send_buffer+0x1c>
    7a6e:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    7a70:	4f04      	ldr	r7, [pc, #16]	; (7a84 <stream_writer_send_buffer+0x20>)
    7a72:	2100      	movs	r1, #0
    7a74:	5661      	ldrsb	r1, [r4, r1]
    7a76:	0030      	movs	r0, r6
    7a78:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    7a7a:	3401      	adds	r4, #1
    7a7c:	42a5      	cmp	r5, r4
    7a7e:	d1f8      	bne.n	7a72 <stream_writer_send_buffer+0xe>
}
    7a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a82:	46c0      	nop			; (mov r8, r8)
    7a84:	00007a25 	.word	0x00007a25

00007a88 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    7a88:	4a02      	ldr	r2, [pc, #8]	; (7a94 <sw_timer_tcc_callback+0xc>)
    7a8a:	6813      	ldr	r3, [r2, #0]
    7a8c:	3301      	adds	r3, #1
    7a8e:	6013      	str	r3, [r2, #0]
}
    7a90:	4770      	bx	lr
    7a92:	46c0      	nop			; (mov r8, r8)
    7a94:	20000238 	.word	0x20000238

00007a98 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    7a98:	2364      	movs	r3, #100	; 0x64
    7a9a:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    7a9c:	2300      	movs	r3, #0
    7a9e:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    7aa0:	7043      	strb	r3, [r0, #1]
}
    7aa2:	4770      	bx	lr

00007aa4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    7aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aa6:	46c6      	mov	lr, r8
    7aa8:	b500      	push	{lr}
    7aaa:	b0ac      	sub	sp, #176	; 0xb0
    7aac:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    7aae:	466e      	mov	r6, sp
    7ab0:	4b1d      	ldr	r3, [pc, #116]	; (7b28 <sw_timer_init+0x84>)
    7ab2:	466a      	mov	r2, sp
    7ab4:	cb92      	ldmia	r3!, {r1, r4, r7}
    7ab6:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    7ab8:	886b      	ldrh	r3, [r5, #2]
    7aba:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    7abc:	3014      	adds	r0, #20
    7abe:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    7ac0:	782b      	ldrb	r3, [r5, #0]
    7ac2:	009b      	lsls	r3, r3, #2
    7ac4:	5999      	ldr	r1, [r3, r6]
    7ac6:	0017      	movs	r7, r2
    7ac8:	0010      	movs	r0, r2
    7aca:	4b18      	ldr	r3, [pc, #96]	; (7b2c <sw_timer_init+0x88>)
    7acc:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    7ace:	2000      	movs	r0, #0
    7ad0:	4b17      	ldr	r3, [pc, #92]	; (7b30 <sw_timer_init+0x8c>)
    7ad2:	4798      	blx	r3
    7ad4:	4b17      	ldr	r3, [pc, #92]	; (7b34 <sw_timer_init+0x90>)
    7ad6:	7a1b      	ldrb	r3, [r3, #8]
    7ad8:	b2db      	uxtb	r3, r3
    7ada:	40d8      	lsrs	r0, r3
    7adc:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    7ade:	8869      	ldrh	r1, [r5, #2]
    7ae0:	20fa      	movs	r0, #250	; 0xfa
    7ae2:	0200      	lsls	r0, r0, #8
    7ae4:	4b14      	ldr	r3, [pc, #80]	; (7b38 <sw_timer_init+0x94>)
    7ae6:	4798      	blx	r3
    7ae8:	0001      	movs	r1, r0
    7aea:	4640      	mov	r0, r8
    7aec:	4b13      	ldr	r3, [pc, #76]	; (7b3c <sw_timer_init+0x98>)
    7aee:	4798      	blx	r3
    7af0:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    7af2:	2305      	movs	r3, #5
    7af4:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    7af6:	782b      	ldrb	r3, [r5, #0]
    7af8:	009b      	lsls	r3, r3, #2
    7afa:	5999      	ldr	r1, [r3, r6]
    7afc:	003a      	movs	r2, r7
    7afe:	0020      	movs	r0, r4
    7b00:	4b0f      	ldr	r3, [pc, #60]	; (7b40 <sw_timer_init+0x9c>)
    7b02:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    7b04:	786a      	ldrb	r2, [r5, #1]
    7b06:	3208      	adds	r2, #8
    7b08:	b2d2      	uxtb	r2, r2
    7b0a:	490e      	ldr	r1, [pc, #56]	; (7b44 <sw_timer_init+0xa0>)
    7b0c:	0020      	movs	r0, r4
    7b0e:	4b0e      	ldr	r3, [pc, #56]	; (7b48 <sw_timer_init+0xa4>)
    7b10:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    7b12:	7869      	ldrb	r1, [r5, #1]
    7b14:	3108      	adds	r1, #8
    7b16:	b2c9      	uxtb	r1, r1
    7b18:	0020      	movs	r0, r4
    7b1a:	4b0c      	ldr	r3, [pc, #48]	; (7b4c <sw_timer_init+0xa8>)
    7b1c:	4798      	blx	r3
}
    7b1e:	b02c      	add	sp, #176	; 0xb0
    7b20:	bc04      	pop	{r2}
    7b22:	4690      	mov	r8, r2
    7b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b26:	46c0      	nop			; (mov r8, r8)
    7b28:	00012940 	.word	0x00012940
    7b2c:	00007c79 	.word	0x00007c79
    7b30:	0000d1c5 	.word	0x0000d1c5
    7b34:	40000400 	.word	0x40000400
    7b38:	0000e611 	.word	0x0000e611
    7b3c:	0000e4fd 	.word	0x0000e4fd
    7b40:	00007dc5 	.word	0x00007dc5
    7b44:	00007a89 	.word	0x00007a89
    7b48:	000081d1 	.word	0x000081d1
    7b4c:	000081e9 	.word	0x000081e9

00007b50 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    7b50:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    7b52:	2102      	movs	r1, #2
    7b54:	6893      	ldr	r3, [r2, #8]
    7b56:	4219      	tst	r1, r3
    7b58:	d1fc      	bne.n	7b54 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7b5a:	6813      	ldr	r3, [r2, #0]
    7b5c:	2102      	movs	r1, #2
    7b5e:	430b      	orrs	r3, r1
    7b60:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    7b62:	4770      	bx	lr

00007b64 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    7b64:	b570      	push	{r4, r5, r6, lr}
    7b66:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    7b68:	7805      	ldrb	r5, [r0, #0]
    7b6a:	07e8      	lsls	r0, r5, #31
    7b6c:	d502      	bpl.n	7b74 <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    7b6e:	2001      	movs	r0, #1
    7b70:	4240      	negs	r0, r0
}
    7b72:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    7b74:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    7b76:	0029      	movs	r1, r5
    7b78:	2002      	movs	r0, #2
    7b7a:	4381      	bics	r1, r0
    7b7c:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    7b7e:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    7b80:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7b82:	0018      	movs	r0, r3
    7b84:	4b04      	ldr	r3, [pc, #16]	; (7b98 <sw_timer_register_callback+0x34>)
    7b86:	4798      	blx	r3
    7b88:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    7b8a:	7823      	ldrb	r3, [r4, #0]
    7b8c:	2201      	movs	r2, #1
    7b8e:	4313      	orrs	r3, r2
    7b90:	7023      	strb	r3, [r4, #0]
			return index;
    7b92:	2000      	movs	r0, #0
    7b94:	e7ed      	b.n	7b72 <sw_timer_register_callback+0xe>
    7b96:	46c0      	nop			; (mov r8, r8)
    7b98:	0000e4fd 	.word	0x0000e4fd

00007b9c <sw_timer_unregister_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->used = 0;
    7b9c:	008b      	lsls	r3, r1, #2
    7b9e:	1859      	adds	r1, r3, r1
    7ba0:	0089      	lsls	r1, r1, #2
    7ba2:	5c0b      	ldrb	r3, [r1, r0]
    7ba4:	2201      	movs	r2, #1
    7ba6:	4393      	bics	r3, r2
    7ba8:	540b      	strb	r3, [r1, r0]
}
    7baa:	4770      	bx	lr

00007bac <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    7bac:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    7bae:	008b      	lsls	r3, r1, #2
    7bb0:	185d      	adds	r5, r3, r1
    7bb2:	00ad      	lsls	r5, r5, #2
    7bb4:	5c29      	ldrb	r1, [r5, r0]
    7bb6:	2602      	movs	r6, #2
    7bb8:	4331      	orrs	r1, r6
    7bba:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    7bbc:	1944      	adds	r4, r0, r5
    7bbe:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7bc0:	0010      	movs	r0, r2
    7bc2:	4b03      	ldr	r3, [pc, #12]	; (7bd0 <sw_timer_enable_callback+0x24>)
    7bc4:	4798      	blx	r3
    7bc6:	4b03      	ldr	r3, [pc, #12]	; (7bd4 <sw_timer_enable_callback+0x28>)
    7bc8:	681b      	ldr	r3, [r3, #0]
    7bca:	18c0      	adds	r0, r0, r3
    7bcc:	6120      	str	r0, [r4, #16]
}
    7bce:	bd70      	pop	{r4, r5, r6, pc}
    7bd0:	0000e4fd 	.word	0x0000e4fd
    7bd4:	20000238 	.word	0x20000238

00007bd8 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    7bd8:	008b      	lsls	r3, r1, #2
    7bda:	1859      	adds	r1, r3, r1
    7bdc:	0089      	lsls	r1, r1, #2
    7bde:	5c0b      	ldrb	r3, [r1, r0]
    7be0:	2202      	movs	r2, #2
    7be2:	4393      	bics	r3, r2
    7be4:	540b      	strb	r3, [r1, r0]
}
    7be6:	4770      	bx	lr

00007be8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    7be8:	b570      	push	{r4, r5, r6, lr}
    7bea:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    7bec:	7803      	ldrb	r3, [r0, #0]
    7bee:	07db      	lsls	r3, r3, #31
    7bf0:	d507      	bpl.n	7c02 <sw_timer_task+0x1a>
    7bf2:	7803      	ldrb	r3, [r0, #0]
    7bf4:	079b      	lsls	r3, r3, #30
    7bf6:	d504      	bpl.n	7c02 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    7bf8:	4b11      	ldr	r3, [pc, #68]	; (7c40 <sw_timer_task+0x58>)
    7bfa:	681b      	ldr	r3, [r3, #0]
    7bfc:	6902      	ldr	r2, [r0, #16]
    7bfe:	1ad3      	subs	r3, r2, r3
    7c00:	d400      	bmi.n	7c04 <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    7c02:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    7c04:	7803      	ldrb	r3, [r0, #0]
    7c06:	075b      	lsls	r3, r3, #29
    7c08:	d4fb      	bmi.n	7c02 <sw_timer_task+0x1a>
				handler->busy = 1;
    7c0a:	7803      	ldrb	r3, [r0, #0]
    7c0c:	2204      	movs	r2, #4
    7c0e:	4313      	orrs	r3, r2
    7c10:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    7c12:	68c3      	ldr	r3, [r0, #12]
    7c14:	6882      	ldr	r2, [r0, #8]
    7c16:	2100      	movs	r1, #0
    7c18:	6845      	ldr	r5, [r0, #4]
    7c1a:	47a8      	blx	r5
				if (handler->period > 0) {
    7c1c:	68e3      	ldr	r3, [r4, #12]
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d008      	beq.n	7c34 <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    7c22:	4a07      	ldr	r2, [pc, #28]	; (7c40 <sw_timer_task+0x58>)
    7c24:	6812      	ldr	r2, [r2, #0]
    7c26:	18d3      	adds	r3, r2, r3
    7c28:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    7c2a:	7823      	ldrb	r3, [r4, #0]
    7c2c:	2204      	movs	r2, #4
    7c2e:	4393      	bics	r3, r2
    7c30:	7023      	strb	r3, [r4, #0]
}
    7c32:	e7e6      	b.n	7c02 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    7c34:	7823      	ldrb	r3, [r4, #0]
    7c36:	2202      	movs	r2, #2
    7c38:	4393      	bics	r3, r2
    7c3a:	7023      	strb	r3, [r4, #0]
    7c3c:	e7f5      	b.n	7c2a <sw_timer_task+0x42>
    7c3e:	46c0      	nop			; (mov r8, r8)
    7c40:	20000238 	.word	0x20000238

00007c44 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    7c44:	4b09      	ldr	r3, [pc, #36]	; (7c6c <_tcc_get_inst_index+0x28>)
    7c46:	4298      	cmp	r0, r3
    7c48:	d00c      	beq.n	7c64 <_tcc_get_inst_index+0x20>
    7c4a:	4b09      	ldr	r3, [pc, #36]	; (7c70 <_tcc_get_inst_index+0x2c>)
    7c4c:	4298      	cmp	r0, r3
    7c4e:	d007      	beq.n	7c60 <_tcc_get_inst_index+0x1c>
    7c50:	4a08      	ldr	r2, [pc, #32]	; (7c74 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    7c52:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    7c54:	4290      	cmp	r0, r2
    7c56:	d001      	beq.n	7c5c <_tcc_get_inst_index+0x18>
}
    7c58:	0018      	movs	r0, r3
    7c5a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    7c5c:	3302      	adds	r3, #2
    7c5e:	e002      	b.n	7c66 <_tcc_get_inst_index+0x22>
    7c60:	2301      	movs	r3, #1
    7c62:	e000      	b.n	7c66 <_tcc_get_inst_index+0x22>
    7c64:	2300      	movs	r3, #0
			return i;
    7c66:	b2db      	uxtb	r3, r3
    7c68:	e7f6      	b.n	7c58 <_tcc_get_inst_index+0x14>
    7c6a:	46c0      	nop			; (mov r8, r8)
    7c6c:	42002000 	.word	0x42002000
    7c70:	42002400 	.word	0x42002400
    7c74:	42002800 	.word	0x42002800

00007c78 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    7c78:	b510      	push	{r4, lr}
    7c7a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    7c7c:	0008      	movs	r0, r1
    7c7e:	4b4f      	ldr	r3, [pc, #316]	; (7dbc <tcc_get_config_defaults+0x144>)
    7c80:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    7c82:	2300      	movs	r3, #0
    7c84:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    7c86:	0080      	lsls	r0, r0, #2
    7c88:	4a4d      	ldr	r2, [pc, #308]	; (7dc0 <tcc_get_config_defaults+0x148>)
    7c8a:	5882      	ldr	r2, [r0, r2]
    7c8c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    7c8e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    7c90:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    7c92:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    7c94:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    7c96:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    7c98:	61e3      	str	r3, [r4, #28]
    7c9a:	6223      	str	r3, [r4, #32]
    7c9c:	6263      	str	r3, [r4, #36]	; 0x24
    7c9e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    7ca0:	7523      	strb	r3, [r4, #20]
    7ca2:	7563      	strb	r3, [r4, #21]
    7ca4:	75a3      	strb	r3, [r4, #22]
    7ca6:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    7ca8:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    7caa:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    7cac:	7423      	strb	r3, [r4, #16]
    7cae:	7463      	strb	r3, [r4, #17]
    7cb0:	74a3      	strb	r3, [r4, #18]
    7cb2:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    7cb4:	222c      	movs	r2, #44	; 0x2c
    7cb6:	54a3      	strb	r3, [r4, r2]
    7cb8:	3201      	adds	r2, #1
    7cba:	54a3      	strb	r3, [r4, r2]
    7cbc:	3201      	adds	r2, #1
    7cbe:	54a3      	strb	r3, [r4, r2]
    7cc0:	3201      	adds	r2, #1
    7cc2:	54a3      	strb	r3, [r4, r2]
    7cc4:	3201      	adds	r2, #1
    7cc6:	54a3      	strb	r3, [r4, r2]
    7cc8:	3201      	adds	r2, #1
    7cca:	54a3      	strb	r3, [r4, r2]
    7ccc:	3201      	adds	r2, #1
    7cce:	54a3      	strb	r3, [r4, r2]
    7cd0:	3201      	adds	r2, #1
    7cd2:	54a3      	strb	r3, [r4, r2]
    7cd4:	3201      	adds	r2, #1
    7cd6:	54a3      	strb	r3, [r4, r2]
    7cd8:	3201      	adds	r2, #1
    7cda:	54a3      	strb	r3, [r4, r2]
    7cdc:	3201      	adds	r2, #1
    7cde:	54a3      	strb	r3, [r4, r2]
    7ce0:	3201      	adds	r2, #1
    7ce2:	54a3      	strb	r3, [r4, r2]
    7ce4:	3201      	adds	r2, #1
    7ce6:	54a3      	strb	r3, [r4, r2]
    7ce8:	3201      	adds	r2, #1
    7cea:	54a3      	strb	r3, [r4, r2]
    7cec:	3201      	adds	r2, #1
    7cee:	54a3      	strb	r3, [r4, r2]
    7cf0:	3201      	adds	r2, #1
    7cf2:	54a3      	strb	r3, [r4, r2]
    7cf4:	3201      	adds	r2, #1
    7cf6:	54a3      	strb	r3, [r4, r2]
    7cf8:	3201      	adds	r2, #1
    7cfa:	54a3      	strb	r3, [r4, r2]
    7cfc:	3201      	adds	r2, #1
    7cfe:	54a3      	strb	r3, [r4, r2]
    7d00:	3201      	adds	r2, #1
    7d02:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    7d04:	3201      	adds	r2, #1
    7d06:	54a3      	strb	r3, [r4, r2]
    7d08:	3201      	adds	r2, #1
    7d0a:	54a3      	strb	r3, [r4, r2]
    7d0c:	3201      	adds	r2, #1
    7d0e:	54a3      	strb	r3, [r4, r2]
    7d10:	3201      	adds	r2, #1
    7d12:	54a3      	strb	r3, [r4, r2]
    7d14:	3201      	adds	r2, #1
    7d16:	54a3      	strb	r3, [r4, r2]
    7d18:	3201      	adds	r2, #1
    7d1a:	54a3      	strb	r3, [r4, r2]
    7d1c:	3201      	adds	r2, #1
    7d1e:	54a3      	strb	r3, [r4, r2]
    7d20:	3201      	adds	r2, #1
    7d22:	54a3      	strb	r3, [r4, r2]
    7d24:	3201      	adds	r2, #1
    7d26:	54a3      	strb	r3, [r4, r2]
    7d28:	3201      	adds	r2, #1
    7d2a:	54a3      	strb	r3, [r4, r2]
    7d2c:	3201      	adds	r2, #1
    7d2e:	54a3      	strb	r3, [r4, r2]
    7d30:	3201      	adds	r2, #1
    7d32:	54a3      	strb	r3, [r4, r2]
    7d34:	3201      	adds	r2, #1
    7d36:	54a3      	strb	r3, [r4, r2]
    7d38:	3201      	adds	r2, #1
    7d3a:	54a3      	strb	r3, [r4, r2]
    7d3c:	3201      	adds	r2, #1
    7d3e:	54a3      	strb	r3, [r4, r2]
    7d40:	3201      	adds	r2, #1
    7d42:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    7d44:	3201      	adds	r2, #1
    7d46:	54a3      	strb	r3, [r4, r2]
    7d48:	3201      	adds	r2, #1
    7d4a:	54a3      	strb	r3, [r4, r2]
    7d4c:	3201      	adds	r2, #1
    7d4e:	54a3      	strb	r3, [r4, r2]
    7d50:	3201      	adds	r2, #1
    7d52:	54a3      	strb	r3, [r4, r2]
    7d54:	3201      	adds	r2, #1
    7d56:	54a3      	strb	r3, [r4, r2]
    7d58:	3201      	adds	r2, #1
    7d5a:	54a3      	strb	r3, [r4, r2]
    7d5c:	3201      	adds	r2, #1
    7d5e:	54a3      	strb	r3, [r4, r2]
    7d60:	3201      	adds	r2, #1
    7d62:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    7d64:	3241      	adds	r2, #65	; 0x41
    7d66:	54a3      	strb	r3, [r4, r2]
    7d68:	65a3      	str	r3, [r4, #88]	; 0x58
    7d6a:	67a3      	str	r3, [r4, #120]	; 0x78
    7d6c:	3201      	adds	r2, #1
    7d6e:	54a3      	strb	r3, [r4, r2]
    7d70:	65e3      	str	r3, [r4, #92]	; 0x5c
    7d72:	67e3      	str	r3, [r4, #124]	; 0x7c
    7d74:	3201      	adds	r2, #1
    7d76:	54a3      	strb	r3, [r4, r2]
    7d78:	6623      	str	r3, [r4, #96]	; 0x60
    7d7a:	3a1a      	subs	r2, #26
    7d7c:	50a3      	str	r3, [r4, r2]
    7d7e:	321b      	adds	r2, #27
    7d80:	54a3      	strb	r3, [r4, r2]
    7d82:	6663      	str	r3, [r4, #100]	; 0x64
    7d84:	3a17      	subs	r2, #23
    7d86:	50a3      	str	r3, [r4, r2]
    7d88:	3218      	adds	r2, #24
    7d8a:	54a3      	strb	r3, [r4, r2]
    7d8c:	66a3      	str	r3, [r4, #104]	; 0x68
    7d8e:	3a14      	subs	r2, #20
    7d90:	50a3      	str	r3, [r4, r2]
    7d92:	3215      	adds	r2, #21
    7d94:	54a3      	strb	r3, [r4, r2]
    7d96:	66e3      	str	r3, [r4, #108]	; 0x6c
    7d98:	3a11      	subs	r2, #17
    7d9a:	50a3      	str	r3, [r4, r2]
    7d9c:	3212      	adds	r2, #18
    7d9e:	54a3      	strb	r3, [r4, r2]
    7da0:	6723      	str	r3, [r4, #112]	; 0x70
    7da2:	3a0e      	subs	r2, #14
    7da4:	50a3      	str	r3, [r4, r2]
    7da6:	320f      	adds	r2, #15
    7da8:	54a3      	strb	r3, [r4, r2]
    7daa:	6763      	str	r3, [r4, #116]	; 0x74
    7dac:	3a0b      	subs	r2, #11
    7dae:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    7db0:	2101      	movs	r1, #1
    7db2:	320c      	adds	r2, #12
    7db4:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    7db6:	3201      	adds	r2, #1
    7db8:	54a3      	strb	r3, [r4, r2]
}
    7dba:	bd10      	pop	{r4, pc}
    7dbc:	00007c45 	.word	0x00007c45
    7dc0:	00012960 	.word	0x00012960

00007dc4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    7dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7dc6:	46de      	mov	lr, fp
    7dc8:	4657      	mov	r7, sl
    7dca:	464e      	mov	r6, r9
    7dcc:	4645      	mov	r5, r8
    7dce:	b5e0      	push	{r5, r6, r7, lr}
    7dd0:	b091      	sub	sp, #68	; 0x44
    7dd2:	9001      	str	r0, [sp, #4]
    7dd4:	000c      	movs	r4, r1
    7dd6:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    7dd8:	0008      	movs	r0, r1
    7dda:	4bc3      	ldr	r3, [pc, #780]	; (80e8 <tcc_init+0x324>)
    7ddc:	4798      	blx	r3
    7dde:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    7de0:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    7de2:	48c2      	ldr	r0, [pc, #776]	; (80ec <tcc_init+0x328>)
    7de4:	6a02      	ldr	r2, [r0, #32]
    7de6:	009e      	lsls	r6, r3, #2
    7de8:	4fc1      	ldr	r7, [pc, #772]	; (80f0 <tcc_init+0x32c>)
    7dea:	59f7      	ldr	r7, [r6, r7]
    7dec:	433a      	orrs	r2, r7
    7dee:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    7df0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    7df2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    7df4:	0792      	lsls	r2, r2, #30
    7df6:	d506      	bpl.n	7e06 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    7df8:	b011      	add	sp, #68	; 0x44
    7dfa:	bc3c      	pop	{r2, r3, r4, r5}
    7dfc:	4690      	mov	r8, r2
    7dfe:	4699      	mov	r9, r3
    7e00:	46a2      	mov	sl, r4
    7e02:	46ab      	mov	fp, r5
    7e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    7e06:	6822      	ldr	r2, [r4, #0]
    7e08:	2701      	movs	r7, #1
    7e0a:	4017      	ands	r7, r2
    7e0c:	d1f4      	bne.n	7df8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    7e0e:	48b9      	ldr	r0, [pc, #740]	; (80f4 <tcc_init+0x330>)
    7e10:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    7e12:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    7e14:	682e      	ldr	r6, [r5, #0]
    7e16:	42b2      	cmp	r2, r6
    7e18:	d3ee      	bcc.n	7df8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    7e1a:	686e      	ldr	r6, [r5, #4]
    7e1c:	42b2      	cmp	r2, r6
    7e1e:	d3eb      	bcc.n	7df8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    7e20:	69e8      	ldr	r0, [r5, #28]
    7e22:	4282      	cmp	r2, r0
    7e24:	d200      	bcs.n	7e28 <tcc_init+0x64>
    7e26:	e1b9      	b.n	819c <tcc_init+0x3d8>
    7e28:	6a28      	ldr	r0, [r5, #32]
    7e2a:	4282      	cmp	r2, r0
    7e2c:	d200      	bcs.n	7e30 <tcc_init+0x6c>
    7e2e:	e1b7      	b.n	81a0 <tcc_init+0x3dc>
    7e30:	6a68      	ldr	r0, [r5, #36]	; 0x24
    7e32:	4282      	cmp	r2, r0
    7e34:	d200      	bcs.n	7e38 <tcc_init+0x74>
    7e36:	e1b5      	b.n	81a4 <tcc_init+0x3e0>
    7e38:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    7e3a:	4282      	cmp	r2, r0
    7e3c:	d200      	bcs.n	7e40 <tcc_init+0x7c>
    7e3e:	e1b3      	b.n	81a8 <tcc_init+0x3e4>
    7e40:	2298      	movs	r2, #152	; 0x98
    7e42:	4694      	mov	ip, r2
    7e44:	44ac      	add	ip, r5
    7e46:	4662      	mov	r2, ip
    7e48:	9208      	str	r2, [sp, #32]
    7e4a:	2000      	movs	r0, #0
    7e4c:	e003      	b.n	7e56 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7e4e:	3001      	adds	r0, #1
    7e50:	3201      	adds	r2, #1
    7e52:	2808      	cmp	r0, #8
    7e54:	d008      	beq.n	7e68 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    7e56:	7816      	ldrb	r6, [r2, #0]
    7e58:	2e00      	cmp	r6, #0
    7e5a:	d0f8      	beq.n	7e4e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    7e5c:	4ea6      	ldr	r6, [pc, #664]	; (80f8 <tcc_init+0x334>)
    7e5e:	5c76      	ldrb	r6, [r6, r1]
    7e60:	4286      	cmp	r6, r0
    7e62:	dcf4      	bgt.n	7e4e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    7e64:	2017      	movs	r0, #23
    7e66:	e7c7      	b.n	7df8 <tcc_init+0x34>
    7e68:	2200      	movs	r2, #0
    7e6a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    7e6c:	2080      	movs	r0, #128	; 0x80
    7e6e:	0440      	lsls	r0, r0, #17
    7e70:	4684      	mov	ip, r0
    7e72:	e002      	b.n	7e7a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    7e74:	3201      	adds	r2, #1
    7e76:	2a04      	cmp	r2, #4
    7e78:	d00e      	beq.n	7e98 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    7e7a:	18a8      	adds	r0, r5, r2
    7e7c:	7c00      	ldrb	r0, [r0, #16]
    7e7e:	2801      	cmp	r0, #1
    7e80:	d1f8      	bne.n	7e74 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    7e82:	489e      	ldr	r0, [pc, #632]	; (80fc <tcc_init+0x338>)
    7e84:	5c40      	ldrb	r0, [r0, r1]
    7e86:	4290      	cmp	r0, r2
    7e88:	da00      	bge.n	7e8c <tcc_init+0xc8>
    7e8a:	e18f      	b.n	81ac <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    7e8c:	4660      	mov	r0, ip
    7e8e:	4090      	lsls	r0, r2
    7e90:	9e02      	ldr	r6, [sp, #8]
    7e92:	4306      	orrs	r6, r0
    7e94:	9602      	str	r6, [sp, #8]
    7e96:	e7ed      	b.n	7e74 <tcc_init+0xb0>
	if (config->run_in_standby) {
    7e98:	329d      	adds	r2, #157	; 0x9d
    7e9a:	5caa      	ldrb	r2, [r5, r2]
    7e9c:	2a00      	cmp	r2, #0
    7e9e:	d004      	beq.n	7eaa <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    7ea0:	2280      	movs	r2, #128	; 0x80
    7ea2:	0112      	lsls	r2, r2, #4
    7ea4:	9902      	ldr	r1, [sp, #8]
    7ea6:	4311      	orrs	r1, r2
    7ea8:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    7eaa:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    7eac:	1e51      	subs	r1, r2, #1
    7eae:	418a      	sbcs	r2, r1
    7eb0:	0092      	lsls	r2, r2, #2
    7eb2:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    7eb4:	7a6a      	ldrb	r2, [r5, #9]
    7eb6:	2a01      	cmp	r2, #1
    7eb8:	d022      	beq.n	7f00 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    7eba:	4a90      	ldr	r2, [pc, #576]	; (80fc <tcc_init+0x338>)
    7ebc:	5cd2      	ldrb	r2, [r2, r3]
    7ebe:	0011      	movs	r1, r2
    7ec0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    7ec2:	2235      	movs	r2, #53	; 0x35
    7ec4:	5caa      	ldrb	r2, [r5, r2]
    7ec6:	428a      	cmp	r2, r1
    7ec8:	d300      	bcc.n	7ecc <tcc_init+0x108>
    7eca:	e179      	b.n	81c0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    7ecc:	212c      	movs	r1, #44	; 0x2c
    7ece:	5c69      	ldrb	r1, [r5, r1]
    7ed0:	290f      	cmp	r1, #15
    7ed2:	d900      	bls.n	7ed6 <tcc_init+0x112>
    7ed4:	e174      	b.n	81c0 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    7ed6:	7b28      	ldrb	r0, [r5, #12]
    7ed8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    7eda:	7ae8      	ldrb	r0, [r5, #11]
    7edc:	900b      	str	r0, [sp, #44]	; 0x2c
    7ede:	202d      	movs	r0, #45	; 0x2d
    7ee0:	4682      	mov	sl, r0
    7ee2:	44aa      	add	sl, r5
    7ee4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    7ee6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    7ee8:	ae0e      	add	r6, sp, #56	; 0x38
    7eea:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    7eec:	26c0      	movs	r6, #192	; 0xc0
    7eee:	0136      	lsls	r6, r6, #4
    7ef0:	46b1      	mov	r9, r6
    7ef2:	4684      	mov	ip, r0
    7ef4:	46a0      	mov	r8, r4
    7ef6:	0028      	movs	r0, r5
    7ef8:	4655      	mov	r5, sl
    7efa:	9309      	str	r3, [sp, #36]	; 0x24
    7efc:	4682      	mov	sl, r0
    7efe:	e035      	b.n	7f6c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    7f00:	9906      	ldr	r1, [sp, #24]
    7f02:	4311      	orrs	r1, r2
    7f04:	9106      	str	r1, [sp, #24]
    7f06:	e7d8      	b.n	7eba <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    7f08:	0292      	lsls	r2, r2, #10
    7f0a:	464f      	mov	r7, r9
    7f0c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7f0e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    7f10:	7919      	ldrb	r1, [r3, #4]
    7f12:	468b      	mov	fp, r1
    7f14:	2103      	movs	r1, #3
    7f16:	465f      	mov	r7, fp
    7f18:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7f1a:	430a      	orrs	r2, r1
    7f1c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    7f1e:	795a      	ldrb	r2, [r3, #5]
    7f20:	0152      	lsls	r2, r2, #5
    7f22:	2160      	movs	r1, #96	; 0x60
    7f24:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7f26:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    7f28:	7999      	ldrb	r1, [r3, #6]
    7f2a:	0209      	lsls	r1, r1, #8
    7f2c:	26c0      	movs	r6, #192	; 0xc0
    7f2e:	00b6      	lsls	r6, r6, #2
    7f30:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7f32:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    7f34:	79da      	ldrb	r2, [r3, #7]
    7f36:	0312      	lsls	r2, r2, #12
    7f38:	21e0      	movs	r1, #224	; 0xe0
    7f3a:	01c9      	lsls	r1, r1, #7
    7f3c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7f3e:	4316      	orrs	r6, r2
    7f40:	4334      	orrs	r4, r6
    7f42:	9a03      	ldr	r2, [sp, #12]
    7f44:	4314      	orrs	r4, r2
    7f46:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    7f48:	4662      	mov	r2, ip
    7f4a:	9907      	ldr	r1, [sp, #28]
    7f4c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    7f4e:	2a04      	cmp	r2, #4
    7f50:	d02a      	beq.n	7fa8 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    7f52:	7c9a      	ldrb	r2, [r3, #18]
    7f54:	9905      	ldr	r1, [sp, #20]
    7f56:	4291      	cmp	r1, r2
    7f58:	d800      	bhi.n	7f5c <tcc_init+0x198>
    7f5a:	e131      	b.n	81c0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    7f5c:	7a59      	ldrb	r1, [r3, #9]
    7f5e:	350a      	adds	r5, #10
    7f60:	2304      	movs	r3, #4
    7f62:	469b      	mov	fp, r3
    7f64:	44dc      	add	ip, fp
    7f66:	290f      	cmp	r1, #15
    7f68:	d900      	bls.n	7f6c <tcc_init+0x1a8>
    7f6a:	e129      	b.n	81c0 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    7f6c:	0609      	lsls	r1, r1, #24
    7f6e:	23f0      	movs	r3, #240	; 0xf0
    7f70:	051b      	lsls	r3, r3, #20
    7f72:	4019      	ands	r1, r3
    7f74:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    7f76:	782e      	ldrb	r6, [r5, #0]
    7f78:	0436      	lsls	r6, r6, #16
    7f7a:	20ff      	movs	r0, #255	; 0xff
    7f7c:	0400      	lsls	r0, r0, #16
    7f7e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    7f80:	7868      	ldrb	r0, [r5, #1]
    7f82:	2480      	movs	r4, #128	; 0x80
    7f84:	2800      	cmp	r0, #0
    7f86:	d100      	bne.n	7f8a <tcc_init+0x1c6>
    7f88:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    7f8a:	7898      	ldrb	r0, [r3, #2]
    7f8c:	2708      	movs	r7, #8
    7f8e:	9703      	str	r7, [sp, #12]
    7f90:	2800      	cmp	r0, #0
    7f92:	d101      	bne.n	7f98 <tcc_init+0x1d4>
    7f94:	9804      	ldr	r0, [sp, #16]
    7f96:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    7f98:	78d8      	ldrb	r0, [r3, #3]
    7f9a:	4683      	mov	fp, r0
    7f9c:	2010      	movs	r0, #16
    7f9e:	465f      	mov	r7, fp
    7fa0:	2f00      	cmp	r7, #0
    7fa2:	d1b1      	bne.n	7f08 <tcc_init+0x144>
    7fa4:	9804      	ldr	r0, [sp, #16]
    7fa6:	e7af      	b.n	7f08 <tcc_init+0x144>
    7fa8:	4644      	mov	r4, r8
    7faa:	4655      	mov	r5, sl
    7fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    7fae:	4a52      	ldr	r2, [pc, #328]	; (80f8 <tcc_init+0x334>)
    7fb0:	5cd2      	ldrb	r2, [r2, r3]
    7fb2:	4691      	mov	r9, r2
    7fb4:	4651      	mov	r1, sl
    7fb6:	3150      	adds	r1, #80	; 0x50
    7fb8:	4650      	mov	r0, sl
    7fba:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    7fbc:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7fbe:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    7fc0:	2601      	movs	r6, #1
    7fc2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    7fc4:	2602      	movs	r6, #2
    7fc6:	36ff      	adds	r6, #255	; 0xff
    7fc8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    7fca:	2680      	movs	r6, #128	; 0x80
    7fcc:	0276      	lsls	r6, r6, #9
    7fce:	46b0      	mov	r8, r6
    7fd0:	46a4      	mov	ip, r4
    7fd2:	001c      	movs	r4, r3
    7fd4:	464b      	mov	r3, r9
    7fd6:	e00f      	b.n	7ff8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    7fd8:	7806      	ldrb	r6, [r0, #0]
    7fda:	2e00      	cmp	r6, #0
    7fdc:	d007      	beq.n	7fee <tcc_init+0x22a>
			if (i >= ow_num) {
    7fde:	4293      	cmp	r3, r2
    7fe0:	d800      	bhi.n	7fe4 <tcc_init+0x220>
    7fe2:	e0e7      	b.n	81b4 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    7fe4:	2e02      	cmp	r6, #2
    7fe6:	d014      	beq.n	8012 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    7fe8:	4656      	mov	r6, sl
    7fea:	4096      	lsls	r6, r2
    7fec:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    7fee:	3201      	adds	r2, #1
    7ff0:	3101      	adds	r1, #1
    7ff2:	3002      	adds	r0, #2
    7ff4:	2a08      	cmp	r2, #8
    7ff6:	d010      	beq.n	801a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    7ff8:	780e      	ldrb	r6, [r1, #0]
    7ffa:	2e00      	cmp	r6, #0
    7ffc:	d0ec      	beq.n	7fd8 <tcc_init+0x214>
			if (i >= ow_num) {
    7ffe:	4293      	cmp	r3, r2
    8000:	d800      	bhi.n	8004 <tcc_init+0x240>
    8002:	e0d5      	b.n	81b0 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    8004:	4646      	mov	r6, r8
    8006:	4096      	lsls	r6, r2
    8008:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    800a:	7806      	ldrb	r6, [r0, #0]
    800c:	2e00      	cmp	r6, #0
    800e:	d1e9      	bne.n	7fe4 <tcc_init+0x220>
    8010:	e7ed      	b.n	7fee <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    8012:	465e      	mov	r6, fp
    8014:	4096      	lsls	r6, r2
    8016:	4337      	orrs	r7, r6
    8018:	e7e9      	b.n	7fee <tcc_init+0x22a>
    801a:	4699      	mov	r9, r3
    801c:	0023      	movs	r3, r4
    801e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    8020:	7e6a      	ldrb	r2, [r5, #25]
    8022:	0112      	lsls	r2, r2, #4
    8024:	2130      	movs	r1, #48	; 0x30
    8026:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    8028:	7e28      	ldrb	r0, [r5, #24]
    802a:	2207      	movs	r2, #7
    802c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    802e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    8030:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    8032:	2080      	movs	r0, #128	; 0x80
    8034:	0240      	lsls	r0, r0, #9
    8036:	000e      	movs	r6, r1
    8038:	e002      	b.n	8040 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    803a:	3201      	adds	r2, #1
    803c:	2a04      	cmp	r2, #4
    803e:	d00b      	beq.n	8058 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    8040:	18a9      	adds	r1, r5, r2
    8042:	7d09      	ldrb	r1, [r1, #20]
    8044:	2900      	cmp	r1, #0
    8046:	d0f8      	beq.n	803a <tcc_init+0x276>
			if (n >= cc_num) {
    8048:	9905      	ldr	r1, [sp, #20]
    804a:	4291      	cmp	r1, r2
    804c:	dc00      	bgt.n	8050 <tcc_init+0x28c>
    804e:	e0b3      	b.n	81b8 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    8050:	0001      	movs	r1, r0
    8052:	4091      	lsls	r1, r2
    8054:	430e      	orrs	r6, r1
    8056:	e7f0      	b.n	803a <tcc_init+0x276>
    8058:	46b2      	mov	sl, r6
    805a:	9801      	ldr	r0, [sp, #4]
    805c:	0002      	movs	r2, r0
    805e:	3204      	adds	r2, #4
    8060:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    8062:	2100      	movs	r1, #0
    8064:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    8066:	4282      	cmp	r2, r0
    8068:	d1fc      	bne.n	8064 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    806a:	2200      	movs	r2, #0
    806c:	9801      	ldr	r0, [sp, #4]
    806e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    8070:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    8072:	0099      	lsls	r1, r3, #2
    8074:	4a22      	ldr	r2, [pc, #136]	; (8100 <tcc_init+0x33c>)
    8076:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    8078:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    807a:	22a0      	movs	r2, #160	; 0xa0
    807c:	5ca9      	ldrb	r1, [r5, r2]
    807e:	3a64      	subs	r2, #100	; 0x64
    8080:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    8082:	a90d      	add	r1, sp, #52	; 0x34
    8084:	7aaa      	ldrb	r2, [r5, #10]
    8086:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    8088:	4a1e      	ldr	r2, [pc, #120]	; (8104 <tcc_init+0x340>)
    808a:	5cd6      	ldrb	r6, [r2, r3]
    808c:	0030      	movs	r0, r6
    808e:	4b1e      	ldr	r3, [pc, #120]	; (8108 <tcc_init+0x344>)
    8090:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    8092:	0030      	movs	r0, r6
    8094:	4b1d      	ldr	r3, [pc, #116]	; (810c <tcc_init+0x348>)
    8096:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    8098:	464b      	mov	r3, r9
    809a:	2b00      	cmp	r3, #0
    809c:	dd3c      	ble.n	8118 <tcc_init+0x354>
    809e:	002e      	movs	r6, r5
    80a0:	3658      	adds	r6, #88	; 0x58
    80a2:	3398      	adds	r3, #152	; 0x98
    80a4:	4698      	mov	r8, r3
    80a6:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    80a8:	2301      	movs	r3, #1
    80aa:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    80ac:	46ab      	mov	fp, r5
    80ae:	4645      	mov	r5, r8
    80b0:	46a0      	mov	r8, r4
    80b2:	9c08      	ldr	r4, [sp, #32]
    80b4:	e003      	b.n	80be <tcc_init+0x2fa>
    80b6:	3401      	adds	r4, #1
    80b8:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    80ba:	42ac      	cmp	r4, r5
    80bc:	d02a      	beq.n	8114 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    80be:	7823      	ldrb	r3, [r4, #0]
    80c0:	2b00      	cmp	r3, #0
    80c2:	d0f8      	beq.n	80b6 <tcc_init+0x2f2>
    80c4:	ab0c      	add	r3, sp, #48	; 0x30
    80c6:	464a      	mov	r2, r9
    80c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    80ca:	2300      	movs	r3, #0
    80cc:	aa0c      	add	r2, sp, #48	; 0x30
    80ce:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    80d0:	0013      	movs	r3, r2
    80d2:	2220      	movs	r2, #32
    80d4:	18b2      	adds	r2, r6, r2
    80d6:	7812      	ldrb	r2, [r2, #0]
    80d8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    80da:	464a      	mov	r2, r9
    80dc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    80de:	7830      	ldrb	r0, [r6, #0]
    80e0:	0019      	movs	r1, r3
    80e2:	4b0b      	ldr	r3, [pc, #44]	; (8110 <tcc_init+0x34c>)
    80e4:	4798      	blx	r3
    80e6:	e7e6      	b.n	80b6 <tcc_init+0x2f2>
    80e8:	00007c45 	.word	0x00007c45
    80ec:	40000400 	.word	0x40000400
    80f0:	0001294c 	.word	0x0001294c
    80f4:	00012960 	.word	0x00012960
    80f8:	0001296c 	.word	0x0001296c
    80fc:	00012958 	.word	0x00012958
    8100:	20000898 	.word	0x20000898
    8104:	0001295c 	.word	0x0001295c
    8108:	0000d2dd 	.word	0x0000d2dd
    810c:	0000d251 	.word	0x0000d251
    8110:	0000d3d5 	.word	0x0000d3d5
    8114:	4644      	mov	r4, r8
    8116:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    8118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    811a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    811c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    811e:	0212      	lsls	r2, r2, #8
    8120:	4313      	orrs	r3, r2
    8122:	9a02      	ldr	r2, [sp, #8]
    8124:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    8126:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    8128:	2204      	movs	r2, #4
    812a:	68a3      	ldr	r3, [r4, #8]
    812c:	421a      	tst	r2, r3
    812e:	d1fc      	bne.n	812a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    8130:	23ff      	movs	r3, #255	; 0xff
    8132:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    8134:	2204      	movs	r2, #4
    8136:	68a3      	ldr	r3, [r4, #8]
    8138:	421a      	tst	r2, r3
    813a:	d1fc      	bne.n	8136 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    813c:	466b      	mov	r3, sp
    813e:	7e1b      	ldrb	r3, [r3, #24]
    8140:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    8142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8144:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    8146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8148:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    814a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    814c:	4a1d      	ldr	r2, [pc, #116]	; (81c4 <tcc_init+0x400>)
    814e:	68a3      	ldr	r3, [r4, #8]
    8150:	4213      	tst	r3, r2
    8152:	d1fc      	bne.n	814e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    8154:	4653      	mov	r3, sl
    8156:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    8158:	2210      	movs	r2, #16
    815a:	68a3      	ldr	r3, [r4, #8]
    815c:	421a      	tst	r2, r3
    815e:	d1fc      	bne.n	815a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    8160:	682b      	ldr	r3, [r5, #0]
    8162:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    8164:	4a18      	ldr	r2, [pc, #96]	; (81c8 <tcc_init+0x404>)
    8166:	68a3      	ldr	r3, [r4, #8]
    8168:	4213      	tst	r3, r2
    816a:	d1fc      	bne.n	8166 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    816c:	686b      	ldr	r3, [r5, #4]
    816e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    8170:	9805      	ldr	r0, [sp, #20]
    8172:	2800      	cmp	r0, #0
    8174:	dd22      	ble.n	81bc <tcc_init+0x3f8>
    8176:	351c      	adds	r5, #28
    8178:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    817a:	4e14      	ldr	r6, [pc, #80]	; (81cc <tcc_init+0x408>)
    817c:	0032      	movs	r2, r6
    817e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    8180:	68a3      	ldr	r3, [r4, #8]
    8182:	421a      	tst	r2, r3
    8184:	d1fc      	bne.n	8180 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    8186:	cd04      	ldmia	r5!, {r2}
    8188:	000b      	movs	r3, r1
    818a:	3310      	adds	r3, #16
    818c:	009b      	lsls	r3, r3, #2
    818e:	18e3      	adds	r3, r4, r3
    8190:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    8192:	3101      	adds	r1, #1
    8194:	4288      	cmp	r0, r1
    8196:	dcf1      	bgt.n	817c <tcc_init+0x3b8>
	return STATUS_OK;
    8198:	2000      	movs	r0, #0
    819a:	e62d      	b.n	7df8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    819c:	2017      	movs	r0, #23
    819e:	e62b      	b.n	7df8 <tcc_init+0x34>
    81a0:	2017      	movs	r0, #23
    81a2:	e629      	b.n	7df8 <tcc_init+0x34>
    81a4:	2017      	movs	r0, #23
    81a6:	e627      	b.n	7df8 <tcc_init+0x34>
    81a8:	2017      	movs	r0, #23
    81aa:	e625      	b.n	7df8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    81ac:	2017      	movs	r0, #23
    81ae:	e623      	b.n	7df8 <tcc_init+0x34>
			if (i >= ow_num) {
    81b0:	2017      	movs	r0, #23
    81b2:	e621      	b.n	7df8 <tcc_init+0x34>
			if (i >= ow_num) {
    81b4:	2017      	movs	r0, #23
    81b6:	e61f      	b.n	7df8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    81b8:	2017      	movs	r0, #23
    81ba:	e61d      	b.n	7df8 <tcc_init+0x34>
	return STATUS_OK;
    81bc:	2000      	movs	r0, #0
    81be:	e61b      	b.n	7df8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    81c0:	2017      	movs	r0, #23
    81c2:	e619      	b.n	7df8 <tcc_init+0x34>
    81c4:	00020040 	.word	0x00020040
    81c8:	00040080 	.word	0x00040080
    81cc:	00080100 	.word	0x00080100

000081d0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    81d0:	0092      	lsls	r2, r2, #2
    81d2:	1883      	adds	r3, r0, r2
    81d4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    81d6:	4b03      	ldr	r3, [pc, #12]	; (81e4 <tcc_register_callback+0x14>)
    81d8:	58d3      	ldr	r3, [r2, r3]
    81da:	6b42      	ldr	r2, [r0, #52]	; 0x34
    81dc:	4313      	orrs	r3, r2
    81de:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    81e0:	2000      	movs	r0, #0
    81e2:	4770      	bx	lr
    81e4:	00012970 	.word	0x00012970

000081e8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    81e8:	b570      	push	{r4, r5, r6, lr}
    81ea:	0004      	movs	r4, r0
    81ec:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    81ee:	6800      	ldr	r0, [r0, #0]
    81f0:	4b09      	ldr	r3, [pc, #36]	; (8218 <tcc_enable_callback+0x30>)
    81f2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    81f4:	4b09      	ldr	r3, [pc, #36]	; (821c <tcc_enable_callback+0x34>)
    81f6:	5c1b      	ldrb	r3, [r3, r0]
    81f8:	221f      	movs	r2, #31
    81fa:	401a      	ands	r2, r3
    81fc:	2301      	movs	r3, #1
    81fe:	4093      	lsls	r3, r2
    8200:	4a07      	ldr	r2, [pc, #28]	; (8220 <tcc_enable_callback+0x38>)
    8202:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    8204:	00ad      	lsls	r5, r5, #2
    8206:	4b07      	ldr	r3, [pc, #28]	; (8224 <tcc_enable_callback+0x3c>)
    8208:	58ea      	ldr	r2, [r5, r3]
    820a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    820c:	4313      	orrs	r3, r2
    820e:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    8210:	6823      	ldr	r3, [r4, #0]
    8212:	629a      	str	r2, [r3, #40]	; 0x28
}
    8214:	bd70      	pop	{r4, r5, r6, pc}
    8216:	46c0      	nop			; (mov r8, r8)
    8218:	00007c45 	.word	0x00007c45
    821c:	000129a0 	.word	0x000129a0
    8220:	e000e100 	.word	0xe000e100
    8224:	00012970 	.word	0x00012970

00008228 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    8228:	b5f0      	push	{r4, r5, r6, r7, lr}
    822a:	46c6      	mov	lr, r8
    822c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    822e:	0080      	lsls	r0, r0, #2
    8230:	4b0e      	ldr	r3, [pc, #56]	; (826c <_tcc_interrupt_handler+0x44>)
    8232:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    8234:	683b      	ldr	r3, [r7, #0]
    8236:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    8238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    823a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    823c:	4013      	ands	r3, r2
    823e:	401e      	ands	r6, r3
    8240:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    8242:	4b0b      	ldr	r3, [pc, #44]	; (8270 <_tcc_interrupt_handler+0x48>)
    8244:	4698      	mov	r8, r3
    8246:	e002      	b.n	824e <_tcc_interrupt_handler+0x26>
    8248:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    824a:	2c30      	cmp	r4, #48	; 0x30
    824c:	d00a      	beq.n	8264 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    824e:	4643      	mov	r3, r8
    8250:	58e5      	ldr	r5, [r4, r3]
    8252:	4235      	tst	r5, r6
    8254:	d0f8      	beq.n	8248 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    8256:	193b      	adds	r3, r7, r4
    8258:	685b      	ldr	r3, [r3, #4]
    825a:	0038      	movs	r0, r7
    825c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    825e:	683b      	ldr	r3, [r7, #0]
    8260:	62dd      	str	r5, [r3, #44]	; 0x2c
    8262:	e7f1      	b.n	8248 <_tcc_interrupt_handler+0x20>
		}
	}
}
    8264:	bc04      	pop	{r2}
    8266:	4690      	mov	r8, r2
    8268:	bdf0      	pop	{r4, r5, r6, r7, pc}
    826a:	46c0      	nop			; (mov r8, r8)
    826c:	20000898 	.word	0x20000898
    8270:	00012970 	.word	0x00012970

00008274 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    8274:	b510      	push	{r4, lr}
    8276:	2000      	movs	r0, #0
    8278:	4b01      	ldr	r3, [pc, #4]	; (8280 <TCC0_Handler+0xc>)
    827a:	4798      	blx	r3
    827c:	bd10      	pop	{r4, pc}
    827e:	46c0      	nop			; (mov r8, r8)
    8280:	00008229 	.word	0x00008229

00008284 <TCC1_Handler>:
    8284:	b510      	push	{r4, lr}
    8286:	2001      	movs	r0, #1
    8288:	4b01      	ldr	r3, [pc, #4]	; (8290 <TCC1_Handler+0xc>)
    828a:	4798      	blx	r3
    828c:	bd10      	pop	{r4, pc}
    828e:	46c0      	nop			; (mov r8, r8)
    8290:	00008229 	.word	0x00008229

00008294 <TCC2_Handler>:
    8294:	b510      	push	{r4, lr}
    8296:	2002      	movs	r0, #2
    8298:	4b01      	ldr	r3, [pc, #4]	; (82a0 <TCC2_Handler+0xc>)
    829a:	4798      	blx	r3
    829c:	bd10      	pop	{r4, pc}
    829e:	46c0      	nop			; (mov r8, r8)
    82a0:	00008229 	.word	0x00008229

000082a4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    82a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82a6:	46de      	mov	lr, fp
    82a8:	4657      	mov	r7, sl
    82aa:	464e      	mov	r6, r9
    82ac:	4645      	mov	r5, r8
    82ae:	b5e0      	push	{r5, r6, r7, lr}
    82b0:	b091      	sub	sp, #68	; 0x44
    82b2:	0005      	movs	r5, r0
    82b4:	000c      	movs	r4, r1
    82b6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    82b8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    82ba:	0008      	movs	r0, r1
    82bc:	4bbc      	ldr	r3, [pc, #752]	; (85b0 <usart_init+0x30c>)
    82be:	4798      	blx	r3
    82c0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    82c2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    82c4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    82c6:	07db      	lsls	r3, r3, #31
    82c8:	d506      	bpl.n	82d8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    82ca:	b011      	add	sp, #68	; 0x44
    82cc:	bc3c      	pop	{r2, r3, r4, r5}
    82ce:	4690      	mov	r8, r2
    82d0:	4699      	mov	r9, r3
    82d2:	46a2      	mov	sl, r4
    82d4:	46ab      	mov	fp, r5
    82d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    82d8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    82da:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    82dc:	079b      	lsls	r3, r3, #30
    82de:	d4f4      	bmi.n	82ca <usart_init+0x26>
    82e0:	49b4      	ldr	r1, [pc, #720]	; (85b4 <usart_init+0x310>)
    82e2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    82e4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    82e6:	2301      	movs	r3, #1
    82e8:	40bb      	lsls	r3, r7
    82ea:	4303      	orrs	r3, r0
    82ec:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    82ee:	a90f      	add	r1, sp, #60	; 0x3c
    82f0:	272d      	movs	r7, #45	; 0x2d
    82f2:	5df3      	ldrb	r3, [r6, r7]
    82f4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    82f6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    82f8:	b2d3      	uxtb	r3, r2
    82fa:	9302      	str	r3, [sp, #8]
    82fc:	0018      	movs	r0, r3
    82fe:	4bae      	ldr	r3, [pc, #696]	; (85b8 <usart_init+0x314>)
    8300:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    8302:	9802      	ldr	r0, [sp, #8]
    8304:	4bad      	ldr	r3, [pc, #692]	; (85bc <usart_init+0x318>)
    8306:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    8308:	5df0      	ldrb	r0, [r6, r7]
    830a:	2100      	movs	r1, #0
    830c:	4bac      	ldr	r3, [pc, #688]	; (85c0 <usart_init+0x31c>)
    830e:	4798      	blx	r3
	module->character_size = config->character_size;
    8310:	7af3      	ldrb	r3, [r6, #11]
    8312:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    8314:	2324      	movs	r3, #36	; 0x24
    8316:	5cf3      	ldrb	r3, [r6, r3]
    8318:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    831a:	2325      	movs	r3, #37	; 0x25
    831c:	5cf3      	ldrb	r3, [r6, r3]
    831e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    8320:	7ef3      	ldrb	r3, [r6, #27]
    8322:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    8324:	7f33      	ldrb	r3, [r6, #28]
    8326:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8328:	682b      	ldr	r3, [r5, #0]
    832a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    832c:	0018      	movs	r0, r3
    832e:	4ba0      	ldr	r3, [pc, #640]	; (85b0 <usart_init+0x30c>)
    8330:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8332:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    8334:	2200      	movs	r2, #0
    8336:	230e      	movs	r3, #14
    8338:	a906      	add	r1, sp, #24
    833a:	468c      	mov	ip, r1
    833c:	4463      	add	r3, ip
    833e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    8340:	8a32      	ldrh	r2, [r6, #16]
    8342:	9202      	str	r2, [sp, #8]
    8344:	2380      	movs	r3, #128	; 0x80
    8346:	01db      	lsls	r3, r3, #7
    8348:	429a      	cmp	r2, r3
    834a:	d100      	bne.n	834e <usart_init+0xaa>
    834c:	e09e      	b.n	848c <usart_init+0x1e8>
    834e:	d90f      	bls.n	8370 <usart_init+0xcc>
    8350:	23c0      	movs	r3, #192	; 0xc0
    8352:	01db      	lsls	r3, r3, #7
    8354:	9a02      	ldr	r2, [sp, #8]
    8356:	429a      	cmp	r2, r3
    8358:	d100      	bne.n	835c <usart_init+0xb8>
    835a:	e092      	b.n	8482 <usart_init+0x1de>
    835c:	2380      	movs	r3, #128	; 0x80
    835e:	021b      	lsls	r3, r3, #8
    8360:	429a      	cmp	r2, r3
    8362:	d000      	beq.n	8366 <usart_init+0xc2>
    8364:	e11f      	b.n	85a6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    8366:	2303      	movs	r3, #3
    8368:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    836a:	2300      	movs	r3, #0
    836c:	9307      	str	r3, [sp, #28]
    836e:	e008      	b.n	8382 <usart_init+0xde>
	switch (config->sample_rate) {
    8370:	2380      	movs	r3, #128	; 0x80
    8372:	019b      	lsls	r3, r3, #6
    8374:	429a      	cmp	r2, r3
    8376:	d000      	beq.n	837a <usart_init+0xd6>
    8378:	e115      	b.n	85a6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    837a:	2310      	movs	r3, #16
    837c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    837e:	3b0f      	subs	r3, #15
    8380:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    8382:	6833      	ldr	r3, [r6, #0]
    8384:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    8386:	68f3      	ldr	r3, [r6, #12]
    8388:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    838a:	6973      	ldr	r3, [r6, #20]
    838c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    838e:	7e33      	ldrb	r3, [r6, #24]
    8390:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    8392:	2326      	movs	r3, #38	; 0x26
    8394:	5cf3      	ldrb	r3, [r6, r3]
    8396:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    8398:	6873      	ldr	r3, [r6, #4]
    839a:	4699      	mov	r9, r3
	switch (transfer_mode)
    839c:	2b00      	cmp	r3, #0
    839e:	d100      	bne.n	83a2 <usart_init+0xfe>
    83a0:	e0a0      	b.n	84e4 <usart_init+0x240>
    83a2:	2380      	movs	r3, #128	; 0x80
    83a4:	055b      	lsls	r3, r3, #21
    83a6:	4599      	cmp	r9, r3
    83a8:	d100      	bne.n	83ac <usart_init+0x108>
    83aa:	e084      	b.n	84b6 <usart_init+0x212>
	if(config->encoding_format_enable) {
    83ac:	7e73      	ldrb	r3, [r6, #25]
    83ae:	2b00      	cmp	r3, #0
    83b0:	d002      	beq.n	83b8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    83b2:	7eb3      	ldrb	r3, [r6, #26]
    83b4:	4642      	mov	r2, r8
    83b6:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    83b8:	682a      	ldr	r2, [r5, #0]
    83ba:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    83bc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    83be:	2b00      	cmp	r3, #0
    83c0:	d1fc      	bne.n	83bc <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    83c2:	330e      	adds	r3, #14
    83c4:	aa06      	add	r2, sp, #24
    83c6:	4694      	mov	ip, r2
    83c8:	4463      	add	r3, ip
    83ca:	881b      	ldrh	r3, [r3, #0]
    83cc:	4642      	mov	r2, r8
    83ce:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    83d0:	9b05      	ldr	r3, [sp, #20]
    83d2:	9a03      	ldr	r2, [sp, #12]
    83d4:	4313      	orrs	r3, r2
    83d6:	9a04      	ldr	r2, [sp, #16]
    83d8:	4313      	orrs	r3, r2
    83da:	464a      	mov	r2, r9
    83dc:	4313      	orrs	r3, r2
    83de:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    83e0:	465b      	mov	r3, fp
    83e2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    83e4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    83e6:	4653      	mov	r3, sl
    83e8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    83ea:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    83ec:	2327      	movs	r3, #39	; 0x27
    83ee:	5cf3      	ldrb	r3, [r6, r3]
    83f0:	2b00      	cmp	r3, #0
    83f2:	d101      	bne.n	83f8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    83f4:	3304      	adds	r3, #4
    83f6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    83f8:	7e73      	ldrb	r3, [r6, #25]
    83fa:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    83fc:	7f32      	ldrb	r2, [r6, #28]
    83fe:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    8400:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    8402:	7f72      	ldrb	r2, [r6, #29]
    8404:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    8406:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    8408:	2224      	movs	r2, #36	; 0x24
    840a:	5cb2      	ldrb	r2, [r6, r2]
    840c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    840e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    8410:	2225      	movs	r2, #37	; 0x25
    8412:	5cb2      	ldrb	r2, [r6, r2]
    8414:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    8416:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    8418:	7ab1      	ldrb	r1, [r6, #10]
    841a:	7af2      	ldrb	r2, [r6, #11]
    841c:	4311      	orrs	r1, r2
    841e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    8420:	8933      	ldrh	r3, [r6, #8]
    8422:	2bff      	cmp	r3, #255	; 0xff
    8424:	d100      	bne.n	8428 <usart_init+0x184>
    8426:	e081      	b.n	852c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    8428:	2280      	movs	r2, #128	; 0x80
    842a:	0452      	lsls	r2, r2, #17
    842c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    842e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    8430:	232c      	movs	r3, #44	; 0x2c
    8432:	5cf3      	ldrb	r3, [r6, r3]
    8434:	2b00      	cmp	r3, #0
    8436:	d103      	bne.n	8440 <usart_init+0x19c>
    8438:	4b62      	ldr	r3, [pc, #392]	; (85c4 <usart_init+0x320>)
    843a:	789b      	ldrb	r3, [r3, #2]
    843c:	079b      	lsls	r3, r3, #30
    843e:	d501      	bpl.n	8444 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    8440:	2380      	movs	r3, #128	; 0x80
    8442:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    8444:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8446:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8448:	2b00      	cmp	r3, #0
    844a:	d1fc      	bne.n	8446 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    844c:	4643      	mov	r3, r8
    844e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8450:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8452:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8454:	2b00      	cmp	r3, #0
    8456:	d1fc      	bne.n	8452 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    8458:	4643      	mov	r3, r8
    845a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    845c:	ab0e      	add	r3, sp, #56	; 0x38
    845e:	2280      	movs	r2, #128	; 0x80
    8460:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8462:	2200      	movs	r2, #0
    8464:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    8466:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    8468:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    846a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    846c:	930a      	str	r3, [sp, #40]	; 0x28
    846e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    8470:	930b      	str	r3, [sp, #44]	; 0x2c
    8472:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    8474:	930c      	str	r3, [sp, #48]	; 0x30
    8476:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    8478:	9302      	str	r3, [sp, #8]
    847a:	930d      	str	r3, [sp, #52]	; 0x34
    847c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    847e:	ae0a      	add	r6, sp, #40	; 0x28
    8480:	e063      	b.n	854a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8482:	2308      	movs	r3, #8
    8484:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    8486:	3b07      	subs	r3, #7
    8488:	9307      	str	r3, [sp, #28]
    848a:	e77a      	b.n	8382 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    848c:	6833      	ldr	r3, [r6, #0]
    848e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    8490:	68f3      	ldr	r3, [r6, #12]
    8492:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    8494:	6973      	ldr	r3, [r6, #20]
    8496:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    8498:	7e33      	ldrb	r3, [r6, #24]
    849a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    849c:	2326      	movs	r3, #38	; 0x26
    849e:	5cf3      	ldrb	r3, [r6, r3]
    84a0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    84a2:	6873      	ldr	r3, [r6, #4]
    84a4:	4699      	mov	r9, r3
	switch (transfer_mode)
    84a6:	2b00      	cmp	r3, #0
    84a8:	d018      	beq.n	84dc <usart_init+0x238>
    84aa:	2380      	movs	r3, #128	; 0x80
    84ac:	055b      	lsls	r3, r3, #21
    84ae:	4599      	cmp	r9, r3
    84b0:	d001      	beq.n	84b6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    84b2:	2000      	movs	r0, #0
    84b4:	e025      	b.n	8502 <usart_init+0x25e>
			if (!config->use_external_clock) {
    84b6:	2327      	movs	r3, #39	; 0x27
    84b8:	5cf3      	ldrb	r3, [r6, r3]
    84ba:	2b00      	cmp	r3, #0
    84bc:	d000      	beq.n	84c0 <usart_init+0x21c>
    84be:	e775      	b.n	83ac <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    84c0:	6a33      	ldr	r3, [r6, #32]
    84c2:	001f      	movs	r7, r3
    84c4:	b2c0      	uxtb	r0, r0
    84c6:	4b40      	ldr	r3, [pc, #256]	; (85c8 <usart_init+0x324>)
    84c8:	4798      	blx	r3
    84ca:	0001      	movs	r1, r0
    84cc:	220e      	movs	r2, #14
    84ce:	ab06      	add	r3, sp, #24
    84d0:	469c      	mov	ip, r3
    84d2:	4462      	add	r2, ip
    84d4:	0038      	movs	r0, r7
    84d6:	4b3d      	ldr	r3, [pc, #244]	; (85cc <usart_init+0x328>)
    84d8:	4798      	blx	r3
    84da:	e012      	b.n	8502 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    84dc:	2308      	movs	r3, #8
    84de:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    84e0:	2300      	movs	r3, #0
    84e2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    84e4:	2327      	movs	r3, #39	; 0x27
    84e6:	5cf3      	ldrb	r3, [r6, r3]
    84e8:	2b00      	cmp	r3, #0
    84ea:	d00e      	beq.n	850a <usart_init+0x266>
				status_code =
    84ec:	9b06      	ldr	r3, [sp, #24]
    84ee:	9300      	str	r3, [sp, #0]
    84f0:	9b07      	ldr	r3, [sp, #28]
    84f2:	220e      	movs	r2, #14
    84f4:	a906      	add	r1, sp, #24
    84f6:	468c      	mov	ip, r1
    84f8:	4462      	add	r2, ip
    84fa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    84fc:	6a30      	ldr	r0, [r6, #32]
    84fe:	4f34      	ldr	r7, [pc, #208]	; (85d0 <usart_init+0x32c>)
    8500:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    8502:	2800      	cmp	r0, #0
    8504:	d000      	beq.n	8508 <usart_init+0x264>
    8506:	e6e0      	b.n	82ca <usart_init+0x26>
    8508:	e750      	b.n	83ac <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    850a:	6a33      	ldr	r3, [r6, #32]
    850c:	001f      	movs	r7, r3
    850e:	b2c0      	uxtb	r0, r0
    8510:	4b2d      	ldr	r3, [pc, #180]	; (85c8 <usart_init+0x324>)
    8512:	4798      	blx	r3
    8514:	0001      	movs	r1, r0
				status_code =
    8516:	9b06      	ldr	r3, [sp, #24]
    8518:	9300      	str	r3, [sp, #0]
    851a:	9b07      	ldr	r3, [sp, #28]
    851c:	220e      	movs	r2, #14
    851e:	a806      	add	r0, sp, #24
    8520:	4684      	mov	ip, r0
    8522:	4462      	add	r2, ip
    8524:	0038      	movs	r0, r7
    8526:	4f2a      	ldr	r7, [pc, #168]	; (85d0 <usart_init+0x32c>)
    8528:	47b8      	blx	r7
    852a:	e7ea      	b.n	8502 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    852c:	7ef3      	ldrb	r3, [r6, #27]
    852e:	2b00      	cmp	r3, #0
    8530:	d100      	bne.n	8534 <usart_init+0x290>
    8532:	e77d      	b.n	8430 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    8534:	2380      	movs	r3, #128	; 0x80
    8536:	04db      	lsls	r3, r3, #19
    8538:	431f      	orrs	r7, r3
    853a:	e779      	b.n	8430 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    853c:	0020      	movs	r0, r4
    853e:	4b25      	ldr	r3, [pc, #148]	; (85d4 <usart_init+0x330>)
    8540:	4798      	blx	r3
    8542:	e007      	b.n	8554 <usart_init+0x2b0>
    8544:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    8546:	2f04      	cmp	r7, #4
    8548:	d00d      	beq.n	8566 <usart_init+0x2c2>
    854a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    854c:	00bb      	lsls	r3, r7, #2
    854e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    8550:	2800      	cmp	r0, #0
    8552:	d0f3      	beq.n	853c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    8554:	1c43      	adds	r3, r0, #1
    8556:	d0f5      	beq.n	8544 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    8558:	a90e      	add	r1, sp, #56	; 0x38
    855a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    855c:	0c00      	lsrs	r0, r0, #16
    855e:	b2c0      	uxtb	r0, r0
    8560:	4b1d      	ldr	r3, [pc, #116]	; (85d8 <usart_init+0x334>)
    8562:	4798      	blx	r3
    8564:	e7ee      	b.n	8544 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    8566:	2300      	movs	r3, #0
    8568:	60eb      	str	r3, [r5, #12]
    856a:	612b      	str	r3, [r5, #16]
    856c:	616b      	str	r3, [r5, #20]
    856e:	61ab      	str	r3, [r5, #24]
    8570:	61eb      	str	r3, [r5, #28]
    8572:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    8574:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    8576:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    8578:	2200      	movs	r2, #0
    857a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    857c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    857e:	3330      	adds	r3, #48	; 0x30
    8580:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    8582:	3301      	adds	r3, #1
    8584:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    8586:	3301      	adds	r3, #1
    8588:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    858a:	3301      	adds	r3, #1
    858c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    858e:	6828      	ldr	r0, [r5, #0]
    8590:	4b07      	ldr	r3, [pc, #28]	; (85b0 <usart_init+0x30c>)
    8592:	4798      	blx	r3
    8594:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    8596:	4911      	ldr	r1, [pc, #68]	; (85dc <usart_init+0x338>)
    8598:	4b11      	ldr	r3, [pc, #68]	; (85e0 <usart_init+0x33c>)
    859a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    859c:	00a4      	lsls	r4, r4, #2
    859e:	4b11      	ldr	r3, [pc, #68]	; (85e4 <usart_init+0x340>)
    85a0:	50e5      	str	r5, [r4, r3]
	return status_code;
    85a2:	2000      	movs	r0, #0
    85a4:	e691      	b.n	82ca <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    85a6:	2310      	movs	r3, #16
    85a8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    85aa:	2300      	movs	r3, #0
    85ac:	9307      	str	r3, [sp, #28]
    85ae:	e6e8      	b.n	8382 <usart_init+0xde>
    85b0:	000093ad 	.word	0x000093ad
    85b4:	40000400 	.word	0x40000400
    85b8:	0000d2dd 	.word	0x0000d2dd
    85bc:	0000d251 	.word	0x0000d251
    85c0:	000091e9 	.word	0x000091e9
    85c4:	41002000 	.word	0x41002000
    85c8:	0000d2f9 	.word	0x0000d2f9
    85cc:	0000912b 	.word	0x0000912b
    85d0:	00009155 	.word	0x00009155
    85d4:	00009235 	.word	0x00009235
    85d8:	0000d3d5 	.word	0x0000d3d5
    85dc:	00008685 	.word	0x00008685
    85e0:	000093e9 	.word	0x000093e9
    85e4:	200008a8 	.word	0x200008a8

000085e8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    85e8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    85ea:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    85ec:	2a00      	cmp	r2, #0
    85ee:	d101      	bne.n	85f4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    85f0:	0018      	movs	r0, r3
    85f2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    85f4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    85f6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    85f8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    85fa:	2a00      	cmp	r2, #0
    85fc:	d1f8      	bne.n	85f0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    85fe:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    8600:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8602:	2a00      	cmp	r2, #0
    8604:	d1fc      	bne.n	8600 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    8606:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    8608:	2102      	movs	r1, #2
    860a:	7e1a      	ldrb	r2, [r3, #24]
    860c:	420a      	tst	r2, r1
    860e:	d0fc      	beq.n	860a <usart_write_wait+0x22>
	return STATUS_OK;
    8610:	2300      	movs	r3, #0
    8612:	e7ed      	b.n	85f0 <usart_write_wait+0x8>

00008614 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    8614:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    8616:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    8618:	2a00      	cmp	r2, #0
    861a:	d101      	bne.n	8620 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    861c:	0018      	movs	r0, r3
    861e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    8620:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    8622:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    8624:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    8626:	2a00      	cmp	r2, #0
    8628:	d1f8      	bne.n	861c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    862a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    862c:	7e10      	ldrb	r0, [r2, #24]
    862e:	0740      	lsls	r0, r0, #29
    8630:	d5f4      	bpl.n	861c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    8632:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8634:	2b00      	cmp	r3, #0
    8636:	d1fc      	bne.n	8632 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8638:	8b53      	ldrh	r3, [r2, #26]
    863a:	b2db      	uxtb	r3, r3
	if (error_code) {
    863c:	0698      	lsls	r0, r3, #26
    863e:	d01d      	beq.n	867c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    8640:	0798      	lsls	r0, r3, #30
    8642:	d503      	bpl.n	864c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    8644:	2302      	movs	r3, #2
    8646:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    8648:	3318      	adds	r3, #24
    864a:	e7e7      	b.n	861c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    864c:	0758      	lsls	r0, r3, #29
    864e:	d503      	bpl.n	8658 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    8650:	2304      	movs	r3, #4
    8652:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    8654:	331a      	adds	r3, #26
    8656:	e7e1      	b.n	861c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8658:	07d8      	lsls	r0, r3, #31
    865a:	d503      	bpl.n	8664 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    865c:	2301      	movs	r3, #1
    865e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    8660:	3312      	adds	r3, #18
    8662:	e7db      	b.n	861c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    8664:	06d8      	lsls	r0, r3, #27
    8666:	d503      	bpl.n	8670 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    8668:	2310      	movs	r3, #16
    866a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    866c:	3332      	adds	r3, #50	; 0x32
    866e:	e7d5      	b.n	861c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    8670:	069b      	lsls	r3, r3, #26
    8672:	d503      	bpl.n	867c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8674:	2320      	movs	r3, #32
    8676:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    8678:	3321      	adds	r3, #33	; 0x21
    867a:	e7cf      	b.n	861c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    867c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    867e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    8680:	2300      	movs	r3, #0
    8682:	e7cb      	b.n	861c <usart_read_wait+0x8>

00008684 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    8684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    8686:	0080      	lsls	r0, r0, #2
    8688:	4b62      	ldr	r3, [pc, #392]	; (8814 <_usart_interrupt_handler+0x190>)
    868a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    868c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    868e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    8690:	2b00      	cmp	r3, #0
    8692:	d1fc      	bne.n	868e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    8694:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    8696:	7da6      	ldrb	r6, [r4, #22]
    8698:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    869a:	2330      	movs	r3, #48	; 0x30
    869c:	5ceb      	ldrb	r3, [r5, r3]
    869e:	2231      	movs	r2, #49	; 0x31
    86a0:	5caf      	ldrb	r7, [r5, r2]
    86a2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    86a4:	07f3      	lsls	r3, r6, #31
    86a6:	d522      	bpl.n	86ee <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    86a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    86aa:	b29b      	uxth	r3, r3
    86ac:	2b00      	cmp	r3, #0
    86ae:	d01c      	beq.n	86ea <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    86b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    86b2:	7813      	ldrb	r3, [r2, #0]
    86b4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    86b6:	1c51      	adds	r1, r2, #1
    86b8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    86ba:	7969      	ldrb	r1, [r5, #5]
    86bc:	2901      	cmp	r1, #1
    86be:	d00e      	beq.n	86de <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    86c0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    86c2:	05db      	lsls	r3, r3, #23
    86c4:	0ddb      	lsrs	r3, r3, #23
    86c6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    86c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    86ca:	3b01      	subs	r3, #1
    86cc:	b29b      	uxth	r3, r3
    86ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
    86d0:	2b00      	cmp	r3, #0
    86d2:	d10c      	bne.n	86ee <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    86d4:	3301      	adds	r3, #1
    86d6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    86d8:	3301      	adds	r3, #1
    86da:	75a3      	strb	r3, [r4, #22]
    86dc:	e007      	b.n	86ee <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    86de:	7851      	ldrb	r1, [r2, #1]
    86e0:	0209      	lsls	r1, r1, #8
    86e2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    86e4:	3202      	adds	r2, #2
    86e6:	62aa      	str	r2, [r5, #40]	; 0x28
    86e8:	e7eb      	b.n	86c2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    86ea:	2301      	movs	r3, #1
    86ec:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    86ee:	07b3      	lsls	r3, r6, #30
    86f0:	d506      	bpl.n	8700 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    86f2:	2302      	movs	r3, #2
    86f4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    86f6:	2200      	movs	r2, #0
    86f8:	3331      	adds	r3, #49	; 0x31
    86fa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    86fc:	07fb      	lsls	r3, r7, #31
    86fe:	d41a      	bmi.n	8736 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    8700:	0773      	lsls	r3, r6, #29
    8702:	d565      	bpl.n	87d0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    8704:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    8706:	b29b      	uxth	r3, r3
    8708:	2b00      	cmp	r3, #0
    870a:	d05f      	beq.n	87cc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    870c:	8b63      	ldrh	r3, [r4, #26]
    870e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    8710:	071a      	lsls	r2, r3, #28
    8712:	d414      	bmi.n	873e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8714:	223f      	movs	r2, #63	; 0x3f
    8716:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    8718:	2b00      	cmp	r3, #0
    871a:	d034      	beq.n	8786 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    871c:	079a      	lsls	r2, r3, #30
    871e:	d511      	bpl.n	8744 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    8720:	221a      	movs	r2, #26
    8722:	2332      	movs	r3, #50	; 0x32
    8724:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    8726:	3b30      	subs	r3, #48	; 0x30
    8728:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    872a:	077b      	lsls	r3, r7, #29
    872c:	d550      	bpl.n	87d0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    872e:	0028      	movs	r0, r5
    8730:	696b      	ldr	r3, [r5, #20]
    8732:	4798      	blx	r3
    8734:	e04c      	b.n	87d0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    8736:	0028      	movs	r0, r5
    8738:	68eb      	ldr	r3, [r5, #12]
    873a:	4798      	blx	r3
    873c:	e7e0      	b.n	8700 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    873e:	2237      	movs	r2, #55	; 0x37
    8740:	4013      	ands	r3, r2
    8742:	e7e9      	b.n	8718 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8744:	075a      	lsls	r2, r3, #29
    8746:	d505      	bpl.n	8754 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    8748:	221e      	movs	r2, #30
    874a:	2332      	movs	r3, #50	; 0x32
    874c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    874e:	3b2e      	subs	r3, #46	; 0x2e
    8750:	8363      	strh	r3, [r4, #26]
    8752:	e7ea      	b.n	872a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8754:	07da      	lsls	r2, r3, #31
    8756:	d505      	bpl.n	8764 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    8758:	2213      	movs	r2, #19
    875a:	2332      	movs	r3, #50	; 0x32
    875c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    875e:	3b31      	subs	r3, #49	; 0x31
    8760:	8363      	strh	r3, [r4, #26]
    8762:	e7e2      	b.n	872a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    8764:	06da      	lsls	r2, r3, #27
    8766:	d505      	bpl.n	8774 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    8768:	2242      	movs	r2, #66	; 0x42
    876a:	2332      	movs	r3, #50	; 0x32
    876c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    876e:	3b22      	subs	r3, #34	; 0x22
    8770:	8363      	strh	r3, [r4, #26]
    8772:	e7da      	b.n	872a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    8774:	2220      	movs	r2, #32
    8776:	421a      	tst	r2, r3
    8778:	d0d7      	beq.n	872a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    877a:	3221      	adds	r2, #33	; 0x21
    877c:	2332      	movs	r3, #50	; 0x32
    877e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8780:	3b12      	subs	r3, #18
    8782:	8363      	strh	r3, [r4, #26]
    8784:	e7d1      	b.n	872a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    8786:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    8788:	05db      	lsls	r3, r3, #23
    878a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    878c:	b2da      	uxtb	r2, r3
    878e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    8790:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    8792:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8794:	1c51      	adds	r1, r2, #1
    8796:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8798:	7969      	ldrb	r1, [r5, #5]
    879a:	2901      	cmp	r1, #1
    879c:	d010      	beq.n	87c0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    879e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    87a0:	3b01      	subs	r3, #1
    87a2:	b29b      	uxth	r3, r3
    87a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    87a6:	2b00      	cmp	r3, #0
    87a8:	d112      	bne.n	87d0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    87aa:	3304      	adds	r3, #4
    87ac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    87ae:	2200      	movs	r2, #0
    87b0:	332e      	adds	r3, #46	; 0x2e
    87b2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    87b4:	07bb      	lsls	r3, r7, #30
    87b6:	d50b      	bpl.n	87d0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    87b8:	0028      	movs	r0, r5
    87ba:	692b      	ldr	r3, [r5, #16]
    87bc:	4798      	blx	r3
    87be:	e007      	b.n	87d0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    87c0:	0a1b      	lsrs	r3, r3, #8
    87c2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    87c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    87c6:	3301      	adds	r3, #1
    87c8:	626b      	str	r3, [r5, #36]	; 0x24
    87ca:	e7e8      	b.n	879e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    87cc:	2304      	movs	r3, #4
    87ce:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    87d0:	06f3      	lsls	r3, r6, #27
    87d2:	d504      	bpl.n	87de <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    87d4:	2310      	movs	r3, #16
    87d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    87d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    87da:	06fb      	lsls	r3, r7, #27
    87dc:	d40e      	bmi.n	87fc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    87de:	06b3      	lsls	r3, r6, #26
    87e0:	d504      	bpl.n	87ec <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    87e2:	2320      	movs	r3, #32
    87e4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    87e6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    87e8:	073b      	lsls	r3, r7, #28
    87ea:	d40b      	bmi.n	8804 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    87ec:	0733      	lsls	r3, r6, #28
    87ee:	d504      	bpl.n	87fa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    87f0:	2308      	movs	r3, #8
    87f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    87f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    87f6:	06bb      	lsls	r3, r7, #26
    87f8:	d408      	bmi.n	880c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    87fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    87fc:	0028      	movs	r0, r5
    87fe:	69eb      	ldr	r3, [r5, #28]
    8800:	4798      	blx	r3
    8802:	e7ec      	b.n	87de <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    8804:	0028      	movs	r0, r5
    8806:	69ab      	ldr	r3, [r5, #24]
    8808:	4798      	blx	r3
    880a:	e7ef      	b.n	87ec <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    880c:	6a2b      	ldr	r3, [r5, #32]
    880e:	0028      	movs	r0, r5
    8810:	4798      	blx	r3
}
    8812:	e7f2      	b.n	87fa <_usart_interrupt_handler+0x176>
    8814:	200008a8 	.word	0x200008a8

00008818 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    8818:	b5f0      	push	{r4, r5, r6, r7, lr}
    881a:	b08b      	sub	sp, #44	; 0x2c
    881c:	0005      	movs	r5, r0
    881e:	000c      	movs	r4, r1
    8820:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    8822:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    8824:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    8826:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    8828:	079b      	lsls	r3, r3, #30
    882a:	d501      	bpl.n	8830 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    882c:	b00b      	add	sp, #44	; 0x2c
    882e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    8830:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    8832:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    8834:	07db      	lsls	r3, r3, #31
    8836:	d4f9      	bmi.n	882c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8838:	0008      	movs	r0, r1
    883a:	4b6f      	ldr	r3, [pc, #444]	; (89f8 <spi_init+0x1e0>)
    883c:	4798      	blx	r3
    883e:	4a6f      	ldr	r2, [pc, #444]	; (89fc <spi_init+0x1e4>)
    8840:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8842:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    8844:	2301      	movs	r3, #1
    8846:	40bb      	lsls	r3, r7
    8848:	430b      	orrs	r3, r1
    884a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    884c:	a909      	add	r1, sp, #36	; 0x24
    884e:	2724      	movs	r7, #36	; 0x24
    8850:	5df3      	ldrb	r3, [r6, r7]
    8852:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8854:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8856:	b2c3      	uxtb	r3, r0
    8858:	9301      	str	r3, [sp, #4]
    885a:	0018      	movs	r0, r3
    885c:	4b68      	ldr	r3, [pc, #416]	; (8a00 <spi_init+0x1e8>)
    885e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    8860:	9801      	ldr	r0, [sp, #4]
    8862:	4b68      	ldr	r3, [pc, #416]	; (8a04 <spi_init+0x1ec>)
    8864:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    8866:	5df0      	ldrb	r0, [r6, r7]
    8868:	2100      	movs	r1, #0
    886a:	4b67      	ldr	r3, [pc, #412]	; (8a08 <spi_init+0x1f0>)
    886c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    886e:	7833      	ldrb	r3, [r6, #0]
    8870:	2b01      	cmp	r3, #1
    8872:	d03f      	beq.n	88f4 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    8874:	7833      	ldrb	r3, [r6, #0]
    8876:	2b00      	cmp	r3, #0
    8878:	d103      	bne.n	8882 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    887a:	6823      	ldr	r3, [r4, #0]
    887c:	2208      	movs	r2, #8
    887e:	4313      	orrs	r3, r2
    8880:	6023      	str	r3, [r4, #0]
    8882:	002b      	movs	r3, r5
    8884:	330c      	adds	r3, #12
    8886:	0029      	movs	r1, r5
    8888:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    888a:	2200      	movs	r2, #0
    888c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    888e:	428b      	cmp	r3, r1
    8890:	d1fc      	bne.n	888c <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    8892:	2300      	movs	r3, #0
    8894:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    8896:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    8898:	2400      	movs	r4, #0
    889a:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    889c:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    889e:	3336      	adds	r3, #54	; 0x36
    88a0:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    88a2:	3301      	adds	r3, #1
    88a4:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    88a6:	3301      	adds	r3, #1
    88a8:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    88aa:	3b35      	subs	r3, #53	; 0x35
    88ac:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    88ae:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    88b0:	6828      	ldr	r0, [r5, #0]
    88b2:	4b51      	ldr	r3, [pc, #324]	; (89f8 <spi_init+0x1e0>)
    88b4:	4798      	blx	r3
    88b6:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    88b8:	4954      	ldr	r1, [pc, #336]	; (8a0c <spi_init+0x1f4>)
    88ba:	4b55      	ldr	r3, [pc, #340]	; (8a10 <spi_init+0x1f8>)
    88bc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    88be:	00bf      	lsls	r7, r7, #2
    88c0:	4b54      	ldr	r3, [pc, #336]	; (8a14 <spi_init+0x1fc>)
    88c2:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    88c4:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    88c6:	ab04      	add	r3, sp, #16
    88c8:	2280      	movs	r2, #128	; 0x80
    88ca:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    88cc:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    88ce:	3a7f      	subs	r2, #127	; 0x7f
    88d0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    88d2:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    88d4:	7833      	ldrb	r3, [r6, #0]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d102      	bne.n	88e0 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    88da:	2200      	movs	r2, #0
    88dc:	ab04      	add	r3, sp, #16
    88de:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    88e0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    88e2:	9305      	str	r3, [sp, #20]
    88e4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    88e6:	9306      	str	r3, [sp, #24]
    88e8:	6b33      	ldr	r3, [r6, #48]	; 0x30
    88ea:	9307      	str	r3, [sp, #28]
    88ec:	6b73      	ldr	r3, [r6, #52]	; 0x34
    88ee:	9308      	str	r3, [sp, #32]
    88f0:	2400      	movs	r4, #0
    88f2:	e00b      	b.n	890c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    88f4:	6823      	ldr	r3, [r4, #0]
    88f6:	220c      	movs	r2, #12
    88f8:	4313      	orrs	r3, r2
    88fa:	6023      	str	r3, [r4, #0]
    88fc:	e7ba      	b.n	8874 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    88fe:	0038      	movs	r0, r7
    8900:	4b45      	ldr	r3, [pc, #276]	; (8a18 <spi_init+0x200>)
    8902:	4798      	blx	r3
    8904:	e00a      	b.n	891c <spi_init+0x104>
    8906:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    8908:	2c04      	cmp	r4, #4
    890a:	d010      	beq.n	892e <spi_init+0x116>
    890c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    890e:	00a3      	lsls	r3, r4, #2
    8910:	aa02      	add	r2, sp, #8
    8912:	200c      	movs	r0, #12
    8914:	1812      	adds	r2, r2, r0
    8916:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    8918:	2800      	cmp	r0, #0
    891a:	d0f0      	beq.n	88fe <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    891c:	1c43      	adds	r3, r0, #1
    891e:	d0f2      	beq.n	8906 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    8920:	a904      	add	r1, sp, #16
    8922:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    8924:	0c00      	lsrs	r0, r0, #16
    8926:	b2c0      	uxtb	r0, r0
    8928:	4b3c      	ldr	r3, [pc, #240]	; (8a1c <spi_init+0x204>)
    892a:	4798      	blx	r3
    892c:	e7eb      	b.n	8906 <spi_init+0xee>
	module->mode             = config->mode;
    892e:	7833      	ldrb	r3, [r6, #0]
    8930:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    8932:	7c33      	ldrb	r3, [r6, #16]
    8934:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    8936:	7cb3      	ldrb	r3, [r6, #18]
    8938:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    893a:	7d33      	ldrb	r3, [r6, #20]
    893c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    893e:	2200      	movs	r2, #0
    8940:	ab02      	add	r3, sp, #8
    8942:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    8944:	7833      	ldrb	r3, [r6, #0]
    8946:	2b01      	cmp	r3, #1
    8948:	d012      	beq.n	8970 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    894a:	7833      	ldrb	r3, [r6, #0]
    894c:	2b00      	cmp	r3, #0
    894e:	d126      	bne.n	899e <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    8950:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    8952:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    8954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    8956:	7ff1      	ldrb	r1, [r6, #31]
    8958:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    895a:	7fb4      	ldrb	r4, [r6, #30]
    895c:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    895e:	4319      	orrs	r1, r3
    8960:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    8962:	2320      	movs	r3, #32
    8964:	5cf3      	ldrb	r3, [r6, r3]
    8966:	2b00      	cmp	r3, #0
    8968:	d01b      	beq.n	89a2 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    896a:	2340      	movs	r3, #64	; 0x40
    896c:	431a      	orrs	r2, r3
    896e:	e018      	b.n	89a2 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8970:	6828      	ldr	r0, [r5, #0]
    8972:	4b21      	ldr	r3, [pc, #132]	; (89f8 <spi_init+0x1e0>)
    8974:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8976:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    8978:	b2c0      	uxtb	r0, r0
    897a:	4b29      	ldr	r3, [pc, #164]	; (8a20 <spi_init+0x208>)
    897c:	4798      	blx	r3
    897e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    8980:	ab02      	add	r3, sp, #8
    8982:	1d9a      	adds	r2, r3, #6
    8984:	69b0      	ldr	r0, [r6, #24]
    8986:	4b27      	ldr	r3, [pc, #156]	; (8a24 <spi_init+0x20c>)
    8988:	4798      	blx	r3
    898a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    898c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    898e:	2b00      	cmp	r3, #0
    8990:	d000      	beq.n	8994 <spi_init+0x17c>
    8992:	e74b      	b.n	882c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    8994:	ab02      	add	r3, sp, #8
    8996:	3306      	adds	r3, #6
    8998:	781b      	ldrb	r3, [r3, #0]
    899a:	733b      	strb	r3, [r7, #12]
    899c:	e7d5      	b.n	894a <spi_init+0x132>
	uint32_t ctrlb = 0;
    899e:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    89a0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    89a2:	6873      	ldr	r3, [r6, #4]
    89a4:	68b1      	ldr	r1, [r6, #8]
    89a6:	430b      	orrs	r3, r1
    89a8:	68f1      	ldr	r1, [r6, #12]
    89aa:	430b      	orrs	r3, r1
    89ac:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    89ae:	7c31      	ldrb	r1, [r6, #16]
    89b0:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    89b2:	7c71      	ldrb	r1, [r6, #17]
    89b4:	2900      	cmp	r1, #0
    89b6:	d103      	bne.n	89c0 <spi_init+0x1a8>
    89b8:	491b      	ldr	r1, [pc, #108]	; (8a28 <spi_init+0x210>)
    89ba:	7889      	ldrb	r1, [r1, #2]
    89bc:	0789      	lsls	r1, r1, #30
    89be:	d501      	bpl.n	89c4 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    89c0:	2180      	movs	r1, #128	; 0x80
    89c2:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    89c4:	7cb1      	ldrb	r1, [r6, #18]
    89c6:	2900      	cmp	r1, #0
    89c8:	d002      	beq.n	89d0 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    89ca:	2180      	movs	r1, #128	; 0x80
    89cc:	0289      	lsls	r1, r1, #10
    89ce:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    89d0:	7cf1      	ldrb	r1, [r6, #19]
    89d2:	2900      	cmp	r1, #0
    89d4:	d002      	beq.n	89dc <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    89d6:	2180      	movs	r1, #128	; 0x80
    89d8:	0089      	lsls	r1, r1, #2
    89da:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    89dc:	7d31      	ldrb	r1, [r6, #20]
    89de:	2900      	cmp	r1, #0
    89e0:	d002      	beq.n	89e8 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    89e2:	2180      	movs	r1, #128	; 0x80
    89e4:	0189      	lsls	r1, r1, #6
    89e6:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    89e8:	6839      	ldr	r1, [r7, #0]
    89ea:	430b      	orrs	r3, r1
    89ec:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	431a      	orrs	r2, r3
    89f2:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    89f4:	2000      	movs	r0, #0
    89f6:	e719      	b.n	882c <spi_init+0x14>
    89f8:	000093ad 	.word	0x000093ad
    89fc:	40000400 	.word	0x40000400
    8a00:	0000d2dd 	.word	0x0000d2dd
    8a04:	0000d251 	.word	0x0000d251
    8a08:	000091e9 	.word	0x000091e9
    8a0c:	00008e4d 	.word	0x00008e4d
    8a10:	000093e9 	.word	0x000093e9
    8a14:	200008a8 	.word	0x200008a8
    8a18:	00009235 	.word	0x00009235
    8a1c:	0000d3d5 	.word	0x0000d3d5
    8a20:	0000d2f9 	.word	0x0000d2f9
    8a24:	0000912b 	.word	0x0000912b
    8a28:	41002000 	.word	0x41002000

00008a2c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    8a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a2e:	46d6      	mov	lr, sl
    8a30:	464f      	mov	r7, r9
    8a32:	b580      	push	{r7, lr}
    8a34:	b083      	sub	sp, #12
    8a36:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    8a38:	2538      	movs	r5, #56	; 0x38
    8a3a:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    8a3c:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    8a3e:	2e05      	cmp	r6, #5
    8a40:	d075      	beq.n	8b2e <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    8a42:	3512      	adds	r5, #18
	if (length == 0) {
    8a44:	2a00      	cmp	r2, #0
    8a46:	d072      	beq.n	8b2e <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    8a48:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    8a4a:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    8a4c:	2c00      	cmp	r4, #0
    8a4e:	d06e      	beq.n	8b2e <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    8a50:	7944      	ldrb	r4, [r0, #5]
    8a52:	2c00      	cmp	r4, #0
    8a54:	d103      	bne.n	8a5e <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8a56:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8a58:	7e25      	ldrb	r5, [r4, #24]
    8a5a:	07a9      	lsls	r1, r5, #30
    8a5c:	d40a      	bmi.n	8a74 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    8a5e:	3a01      	subs	r2, #1
    8a60:	b294      	uxth	r4, r2
    8a62:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    8a64:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    8a66:	2102      	movs	r1, #2
    8a68:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    8a6a:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8a6c:	05db      	lsls	r3, r3, #23
    8a6e:	0ddb      	lsrs	r3, r3, #23
    8a70:	469a      	mov	sl, r3
    8a72:	e037      	b.n	8ae4 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8a74:	2502      	movs	r5, #2
    8a76:	7625      	strb	r5, [r4, #24]
    8a78:	e7f1      	b.n	8a5e <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8a7a:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8a7c:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    8a7e:	423b      	tst	r3, r7
    8a80:	d0fc      	beq.n	8a7c <spi_read_buffer_wait+0x50>
    8a82:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    8a84:	423b      	tst	r3, r7
    8a86:	d009      	beq.n	8a9c <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8a88:	4653      	mov	r3, sl
    8a8a:	628b      	str	r3, [r1, #40]	; 0x28
    8a8c:	e02d      	b.n	8aea <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8a8e:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    8a90:	464d      	mov	r5, r9
    8a92:	422b      	tst	r3, r5
    8a94:	d138      	bne.n	8b08 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8a96:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    8a98:	4213      	tst	r3, r2
    8a9a:	d045      	beq.n	8b28 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8a9c:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8a9e:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    8aa0:	4213      	tst	r3, r2
    8aa2:	d0fc      	beq.n	8a9e <spi_read_buffer_wait+0x72>
    8aa4:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    8aa6:	4213      	tst	r3, r2
    8aa8:	d040      	beq.n	8b2c <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8aaa:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    8aac:	2500      	movs	r5, #0
    8aae:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8ab0:	4213      	tst	r3, r2
    8ab2:	d002      	beq.n	8aba <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8ab4:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    8ab6:	231e      	movs	r3, #30
    8ab8:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8aba:	7983      	ldrb	r3, [r0, #6]
    8abc:	2b01      	cmp	r3, #1
    8abe:	d027      	beq.n	8b10 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8ac0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8ac2:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    8ac4:	9901      	ldr	r1, [sp, #4]
    8ac6:	2900      	cmp	r1, #0
    8ac8:	d137      	bne.n	8b3a <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    8aca:	1c75      	adds	r5, r6, #1
    8acc:	b2ad      	uxth	r5, r5
    8ace:	4661      	mov	r1, ip
    8ad0:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8ad2:	7981      	ldrb	r1, [r0, #6]
    8ad4:	2901      	cmp	r1, #1
    8ad6:	d01f      	beq.n	8b18 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    8ad8:	002e      	movs	r6, r5
	while (length--) {
    8ada:	3c01      	subs	r4, #1
    8adc:	b2a4      	uxth	r4, r4
    8ade:	4b18      	ldr	r3, [pc, #96]	; (8b40 <spi_read_buffer_wait+0x114>)
    8ae0:	429c      	cmp	r4, r3
    8ae2:	d01f      	beq.n	8b24 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    8ae4:	7943      	ldrb	r3, [r0, #5]
    8ae6:	2b01      	cmp	r3, #1
    8ae8:	d0c7      	beq.n	8a7a <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    8aea:	7943      	ldrb	r3, [r0, #5]
    8aec:	2b00      	cmp	r3, #0
    8aee:	d1d5      	bne.n	8a9c <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8af0:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8af2:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    8af4:	4213      	tst	r3, r2
    8af6:	d1ca      	bne.n	8a8e <spi_read_buffer_wait+0x62>
    8af8:	4b12      	ldr	r3, [pc, #72]	; (8b44 <spi_read_buffer_wait+0x118>)
    8afa:	7e0d      	ldrb	r5, [r1, #24]
    8afc:	4215      	tst	r5, r2
    8afe:	d1c6      	bne.n	8a8e <spi_read_buffer_wait+0x62>
    8b00:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    8b02:	2b00      	cmp	r3, #0
    8b04:	d1f9      	bne.n	8afa <spi_read_buffer_wait+0xce>
    8b06:	e7c2      	b.n	8a8e <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8b08:	2302      	movs	r3, #2
    8b0a:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    8b0c:	2504      	movs	r5, #4
    8b0e:	e00e      	b.n	8b2e <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8b10:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8b12:	05db      	lsls	r3, r3, #23
    8b14:	0ddb      	lsrs	r3, r3, #23
    8b16:	e7d5      	b.n	8ac4 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    8b18:	3602      	adds	r6, #2
    8b1a:	b2b6      	uxth	r6, r6
    8b1c:	0a1b      	lsrs	r3, r3, #8
    8b1e:	4661      	mov	r1, ip
    8b20:	554b      	strb	r3, [r1, r5]
    8b22:	e7da      	b.n	8ada <spi_read_buffer_wait+0xae>
    8b24:	9d01      	ldr	r5, [sp, #4]
    8b26:	e002      	b.n	8b2e <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    8b28:	2512      	movs	r5, #18
    8b2a:	e000      	b.n	8b2e <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    8b2c:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    8b2e:	0028      	movs	r0, r5
    8b30:	b003      	add	sp, #12
    8b32:	bc0c      	pop	{r2, r3}
    8b34:	4691      	mov	r9, r2
    8b36:	469a      	mov	sl, r3
    8b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b3a:	9d01      	ldr	r5, [sp, #4]
    8b3c:	e7f7      	b.n	8b2e <spi_read_buffer_wait+0x102>
    8b3e:	46c0      	nop			; (mov r8, r8)
    8b40:	0000ffff 	.word	0x0000ffff
    8b44:	00002710 	.word	0x00002710

00008b48 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    8b48:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    8b4a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    8b4c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    8b4e:	2c01      	cmp	r4, #1
    8b50:	d001      	beq.n	8b56 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    8b52:	0018      	movs	r0, r3
    8b54:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    8b56:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    8b58:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    8b5a:	2c00      	cmp	r4, #0
    8b5c:	d1f9      	bne.n	8b52 <spi_select_slave+0xa>
		if (select) {
    8b5e:	2a00      	cmp	r2, #0
    8b60:	d058      	beq.n	8c14 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    8b62:	784b      	ldrb	r3, [r1, #1]
    8b64:	2b00      	cmp	r3, #0
    8b66:	d044      	beq.n	8bf2 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8b68:	6803      	ldr	r3, [r0, #0]
    8b6a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    8b6c:	07db      	lsls	r3, r3, #31
    8b6e:	d410      	bmi.n	8b92 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    8b70:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    8b72:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8b74:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8b76:	2900      	cmp	r1, #0
    8b78:	d104      	bne.n	8b84 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    8b7a:	0953      	lsrs	r3, r2, #5
    8b7c:	01db      	lsls	r3, r3, #7
    8b7e:	492e      	ldr	r1, [pc, #184]	; (8c38 <spi_select_slave+0xf0>)
    8b80:	468c      	mov	ip, r1
    8b82:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8b84:	211f      	movs	r1, #31
    8b86:	4011      	ands	r1, r2
    8b88:	2201      	movs	r2, #1
    8b8a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8b8c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    8b8e:	2305      	movs	r3, #5
    8b90:	e7df      	b.n	8b52 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    8b92:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    8b94:	09d4      	lsrs	r4, r2, #7
		return NULL;
    8b96:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8b98:	2c00      	cmp	r4, #0
    8b9a:	d104      	bne.n	8ba6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    8b9c:	0953      	lsrs	r3, r2, #5
    8b9e:	01db      	lsls	r3, r3, #7
    8ba0:	4c25      	ldr	r4, [pc, #148]	; (8c38 <spi_select_slave+0xf0>)
    8ba2:	46a4      	mov	ip, r4
    8ba4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8ba6:	241f      	movs	r4, #31
    8ba8:	4014      	ands	r4, r2
    8baa:	2201      	movs	r2, #1
    8bac:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    8bae:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8bb0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8bb2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    8bb4:	07d2      	lsls	r2, r2, #31
    8bb6:	d501      	bpl.n	8bbc <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8bb8:	788a      	ldrb	r2, [r1, #2]
    8bba:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    8bbc:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    8bbe:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    8bc0:	2a00      	cmp	r2, #0
    8bc2:	d1c6      	bne.n	8b52 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8bc4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    8bc6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8bc8:	7e13      	ldrb	r3, [r2, #24]
    8bca:	420b      	tst	r3, r1
    8bcc:	d0fc      	beq.n	8bc8 <spi_select_slave+0x80>
    8bce:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    8bd0:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    8bd2:	0749      	lsls	r1, r1, #29
    8bd4:	d5bd      	bpl.n	8b52 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8bd6:	8b53      	ldrh	r3, [r2, #26]
    8bd8:	075b      	lsls	r3, r3, #29
    8bda:	d501      	bpl.n	8be0 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8bdc:	2304      	movs	r3, #4
    8bde:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8be0:	7983      	ldrb	r3, [r0, #6]
    8be2:	2b01      	cmp	r3, #1
    8be4:	d002      	beq.n	8bec <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8be6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8be8:	2300      	movs	r3, #0
    8bea:	e7b2      	b.n	8b52 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8bec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8bee:	2300      	movs	r3, #0
    8bf0:	e7af      	b.n	8b52 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    8bf2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    8bf4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8bf6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8bf8:	2900      	cmp	r1, #0
    8bfa:	d104      	bne.n	8c06 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    8bfc:	0953      	lsrs	r3, r2, #5
    8bfe:	01db      	lsls	r3, r3, #7
    8c00:	490d      	ldr	r1, [pc, #52]	; (8c38 <spi_select_slave+0xf0>)
    8c02:	468c      	mov	ip, r1
    8c04:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8c06:	211f      	movs	r1, #31
    8c08:	4011      	ands	r1, r2
    8c0a:	2201      	movs	r2, #1
    8c0c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    8c0e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    8c10:	2300      	movs	r3, #0
    8c12:	e79e      	b.n	8b52 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    8c14:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    8c16:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8c18:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8c1a:	2900      	cmp	r1, #0
    8c1c:	d104      	bne.n	8c28 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    8c1e:	0953      	lsrs	r3, r2, #5
    8c20:	01db      	lsls	r3, r3, #7
    8c22:	4905      	ldr	r1, [pc, #20]	; (8c38 <spi_select_slave+0xf0>)
    8c24:	468c      	mov	ip, r1
    8c26:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8c28:	211f      	movs	r1, #31
    8c2a:	4011      	ands	r1, r2
    8c2c:	2201      	movs	r2, #1
    8c2e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8c30:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    8c32:	2300      	movs	r3, #0
    8c34:	e78d      	b.n	8b52 <spi_select_slave+0xa>
    8c36:	46c0      	nop			; (mov r8, r8)
    8c38:	41004400 	.word	0x41004400

00008c3c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    8c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c3e:	46de      	mov	lr, fp
    8c40:	4657      	mov	r7, sl
    8c42:	464e      	mov	r6, r9
    8c44:	4645      	mov	r5, r8
    8c46:	b5e0      	push	{r5, r6, r7, lr}
    8c48:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    8c4a:	2338      	movs	r3, #56	; 0x38
    8c4c:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    8c4e:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    8c50:	2c05      	cmp	r4, #5
    8c52:	d002      	beq.n	8c5a <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    8c54:	3312      	adds	r3, #18
	if (length == 0) {
    8c56:	2a00      	cmp	r2, #0
    8c58:	d107      	bne.n	8c6a <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    8c5a:	0018      	movs	r0, r3
    8c5c:	b003      	add	sp, #12
    8c5e:	bc3c      	pop	{r2, r3, r4, r5}
    8c60:	4690      	mov	r8, r2
    8c62:	4699      	mov	r9, r3
    8c64:	46a2      	mov	sl, r4
    8c66:	46ab      	mov	fp, r5
    8c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    8c6a:	7943      	ldrb	r3, [r0, #5]
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	d103      	bne.n	8c78 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8c70:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8c72:	7e1c      	ldrb	r4, [r3, #24]
    8c74:	07a4      	lsls	r4, r4, #30
    8c76:	d40a      	bmi.n	8c8e <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    8c78:	4693      	mov	fp, r2
    8c7a:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    8c7c:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    8c7e:	2502      	movs	r5, #2
    8c80:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    8c82:	3502      	adds	r5, #2
    8c84:	46a8      	mov	r8, r5
    8c86:	3a01      	subs	r2, #1
    8c88:	b292      	uxth	r2, r2
    8c8a:	468a      	mov	sl, r1
    8c8c:	e023      	b.n	8cd6 <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8c8e:	2402      	movs	r4, #2
    8c90:	761c      	strb	r4, [r3, #24]
    8c92:	e7f1      	b.n	8c78 <spi_write_buffer_wait+0x3c>
    8c94:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    8c96:	4661      	mov	r1, ip
    8c98:	420d      	tst	r5, r1
    8c9a:	d12e      	bne.n	8cfa <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8c9c:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    8c9e:	421d      	tst	r5, r3
    8ca0:	d100      	bne.n	8ca4 <spi_write_buffer_wait+0x68>
    8ca2:	e0c2      	b.n	8e2a <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8ca4:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8ca6:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    8ca8:	421d      	tst	r5, r3
    8caa:	d0fc      	beq.n	8ca6 <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    8cac:	1c67      	adds	r7, r4, #1
    8cae:	b2bf      	uxth	r7, r7
    8cb0:	4651      	mov	r1, sl
    8cb2:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8cb4:	7981      	ldrb	r1, [r0, #6]
    8cb6:	2901      	cmp	r1, #1
    8cb8:	d023      	beq.n	8d02 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    8cba:	b2ad      	uxth	r5, r5
    8cbc:	003c      	movs	r4, r7
    8cbe:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    8cc0:	421f      	tst	r7, r3
    8cc2:	d002      	beq.n	8cca <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8cc4:	05ed      	lsls	r5, r5, #23
    8cc6:	0ded      	lsrs	r5, r5, #23
    8cc8:	62b5      	str	r5, [r6, #40]	; 0x28
    8cca:	1e55      	subs	r5, r2, #1
    8ccc:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    8cce:	79c6      	ldrb	r6, [r0, #7]
    8cd0:	2e00      	cmp	r6, #0
    8cd2:	d11d      	bne.n	8d10 <spi_write_buffer_wait+0xd4>
    8cd4:	002a      	movs	r2, r5
	while (length--) {
    8cd6:	4d5a      	ldr	r5, [pc, #360]	; (8e40 <spi_write_buffer_wait+0x204>)
    8cd8:	42aa      	cmp	r2, r5
    8cda:	d070      	beq.n	8dbe <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    8cdc:	7945      	ldrb	r5, [r0, #5]
    8cde:	2d00      	cmp	r5, #0
    8ce0:	d1e0      	bne.n	8ca4 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8ce2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8ce4:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    8ce6:	421d      	tst	r5, r3
    8ce8:	d1d4      	bne.n	8c94 <spi_write_buffer_wait+0x58>
    8cea:	4d56      	ldr	r5, [pc, #344]	; (8e44 <spi_write_buffer_wait+0x208>)
    8cec:	7e37      	ldrb	r7, [r6, #24]
    8cee:	421f      	tst	r7, r3
    8cf0:	d1d0      	bne.n	8c94 <spi_write_buffer_wait+0x58>
    8cf2:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    8cf4:	2d00      	cmp	r5, #0
    8cf6:	d1f9      	bne.n	8cec <spi_write_buffer_wait+0xb0>
    8cf8:	e7cc      	b.n	8c94 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8cfa:	2302      	movs	r3, #2
    8cfc:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    8cfe:	3302      	adds	r3, #2
    8d00:	e7ab      	b.n	8c5a <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    8d02:	3402      	adds	r4, #2
    8d04:	b2a4      	uxth	r4, r4
    8d06:	4651      	mov	r1, sl
    8d08:	5dcf      	ldrb	r7, [r1, r7]
    8d0a:	023f      	lsls	r7, r7, #8
    8d0c:	433d      	orrs	r5, r7
    8d0e:	e7d6      	b.n	8cbe <spi_write_buffer_wait+0x82>
    8d10:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    8d12:	7945      	ldrb	r5, [r0, #5]
    8d14:	2d00      	cmp	r5, #0
    8d16:	d137      	bne.n	8d88 <spi_write_buffer_wait+0x14c>
    8d18:	4d4b      	ldr	r5, [pc, #300]	; (8e48 <spi_write_buffer_wait+0x20c>)
    8d1a:	9101      	str	r1, [sp, #4]
    8d1c:	e012      	b.n	8d44 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    8d1e:	3402      	adds	r4, #2
    8d20:	b2a4      	uxth	r4, r4
    8d22:	4649      	mov	r1, r9
    8d24:	9f01      	ldr	r7, [sp, #4]
    8d26:	5c79      	ldrb	r1, [r7, r1]
    8d28:	0209      	lsls	r1, r1, #8
    8d2a:	9f00      	ldr	r7, [sp, #0]
    8d2c:	430f      	orrs	r7, r1
    8d2e:	e01b      	b.n	8d68 <spi_write_buffer_wait+0x12c>
						length--;
    8d30:	3a01      	subs	r2, #1
    8d32:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    8d34:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8d36:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    8d38:	4641      	mov	r1, r8
    8d3a:	420f      	tst	r7, r1
    8d3c:	d11b      	bne.n	8d76 <spi_write_buffer_wait+0x13a>
    8d3e:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    8d40:	2d00      	cmp	r5, #0
    8d42:	d018      	beq.n	8d76 <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    8d44:	2a00      	cmp	r2, #0
    8d46:	d0f5      	beq.n	8d34 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8d48:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8d4a:	7e37      	ldrb	r7, [r6, #24]
    8d4c:	421f      	tst	r7, r3
    8d4e:	d0f1      	beq.n	8d34 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    8d50:	1c67      	adds	r7, r4, #1
    8d52:	b2b9      	uxth	r1, r7
    8d54:	4689      	mov	r9, r1
    8d56:	9901      	ldr	r1, [sp, #4]
    8d58:	5d09      	ldrb	r1, [r1, r4]
    8d5a:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8d5c:	7981      	ldrb	r1, [r0, #6]
    8d5e:	2901      	cmp	r1, #1
    8d60:	d0dd      	beq.n	8d1e <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    8d62:	4669      	mov	r1, sp
    8d64:	880f      	ldrh	r7, [r1, #0]
    8d66:	464c      	mov	r4, r9
    8d68:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    8d6a:	4219      	tst	r1, r3
    8d6c:	d0e0      	beq.n	8d30 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8d6e:	05ff      	lsls	r7, r7, #23
    8d70:	0dff      	lsrs	r7, r7, #23
    8d72:	62b7      	str	r7, [r6, #40]	; 0x28
    8d74:	e7dc      	b.n	8d30 <spi_write_buffer_wait+0xf4>
    8d76:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8d78:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    8d7a:	4667      	mov	r7, ip
    8d7c:	423d      	tst	r5, r7
    8d7e:	d118      	bne.n	8db2 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8d80:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    8d82:	4646      	mov	r6, r8
    8d84:	4235      	tst	r5, r6
    8d86:	d052      	beq.n	8e2e <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8d88:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8d8a:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    8d8c:	4647      	mov	r7, r8
    8d8e:	423d      	tst	r5, r7
    8d90:	d0fb      	beq.n	8d8a <spi_write_buffer_wait+0x14e>
    8d92:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    8d94:	423d      	tst	r5, r7
    8d96:	d007      	beq.n	8da8 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8d98:	8b75      	ldrh	r5, [r6, #26]
    8d9a:	423d      	tst	r5, r7
    8d9c:	d000      	beq.n	8da0 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8d9e:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8da0:	7985      	ldrb	r5, [r0, #6]
    8da2:	2d01      	cmp	r5, #1
    8da4:	d009      	beq.n	8dba <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8da6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    8da8:	465d      	mov	r5, fp
    8daa:	3d01      	subs	r5, #1
    8dac:	b2ad      	uxth	r5, r5
    8dae:	46ab      	mov	fp, r5
    8db0:	e769      	b.n	8c86 <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8db2:	2302      	movs	r3, #2
    8db4:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    8db6:	3302      	adds	r3, #2
    8db8:	e74f      	b.n	8c5a <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8dba:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    8dbc:	e7f4      	b.n	8da8 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    8dbe:	7943      	ldrb	r3, [r0, #5]
    8dc0:	2b01      	cmp	r3, #1
    8dc2:	d00b      	beq.n	8ddc <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    8dc4:	2b00      	cmp	r3, #0
    8dc6:	d134      	bne.n	8e32 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    8dc8:	79c2      	ldrb	r2, [r0, #7]
    8dca:	2a00      	cmp	r2, #0
    8dcc:	d100      	bne.n	8dd0 <spi_write_buffer_wait+0x194>
    8dce:	e744      	b.n	8c5a <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    8dd0:	2404      	movs	r4, #4
			while (flush_length) {
    8dd2:	465b      	mov	r3, fp
    8dd4:	465d      	mov	r5, fp
    8dd6:	2b00      	cmp	r3, #0
    8dd8:	d119      	bne.n	8e0e <spi_write_buffer_wait+0x1d2>
    8dda:	e73e      	b.n	8c5a <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8ddc:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    8dde:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8de0:	7e0b      	ldrb	r3, [r1, #24]
    8de2:	4213      	tst	r3, r2
    8de4:	d0fc      	beq.n	8de0 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    8de6:	2300      	movs	r3, #0
    8de8:	e737      	b.n	8c5a <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8dea:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    8dec:	4223      	tst	r3, r4
    8dee:	d022      	beq.n	8e36 <spi_write_buffer_wait+0x1fa>
    8df0:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    8df2:	4223      	tst	r3, r4
    8df4:	d007      	beq.n	8e06 <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8df6:	8b4b      	ldrh	r3, [r1, #26]
    8df8:	4223      	tst	r3, r4
    8dfa:	d000      	beq.n	8dfe <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8dfc:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8dfe:	7983      	ldrb	r3, [r0, #6]
    8e00:	2b01      	cmp	r3, #1
    8e02:	d010      	beq.n	8e26 <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8e04:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    8e06:	3d01      	subs	r5, #1
    8e08:	b2ad      	uxth	r5, r5
			while (flush_length) {
    8e0a:	2d00      	cmp	r5, #0
    8e0c:	d015      	beq.n	8e3a <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8e0e:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8e10:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    8e12:	4223      	tst	r3, r4
    8e14:	d1e9      	bne.n	8dea <spi_write_buffer_wait+0x1ae>
    8e16:	4b0b      	ldr	r3, [pc, #44]	; (8e44 <spi_write_buffer_wait+0x208>)
    8e18:	7e0a      	ldrb	r2, [r1, #24]
    8e1a:	4222      	tst	r2, r4
    8e1c:	d1e5      	bne.n	8dea <spi_write_buffer_wait+0x1ae>
    8e1e:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    8e20:	2b00      	cmp	r3, #0
    8e22:	d1f9      	bne.n	8e18 <spi_write_buffer_wait+0x1dc>
    8e24:	e7e1      	b.n	8dea <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8e26:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8e28:	e7ed      	b.n	8e06 <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    8e2a:	2312      	movs	r3, #18
    8e2c:	e715      	b.n	8c5a <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    8e2e:	2312      	movs	r3, #18
    8e30:	e713      	b.n	8c5a <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    8e32:	2300      	movs	r3, #0
    8e34:	e711      	b.n	8c5a <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    8e36:	2312      	movs	r3, #18
    8e38:	e70f      	b.n	8c5a <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    8e3a:	2300      	movs	r3, #0
    8e3c:	e70d      	b.n	8c5a <spi_write_buffer_wait+0x1e>
    8e3e:	46c0      	nop			; (mov r8, r8)
    8e40:	0000ffff 	.word	0x0000ffff
    8e44:	00002710 	.word	0x00002710
    8e48:	00002711 	.word	0x00002711

00008e4c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    8e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    8e4e:	0080      	lsls	r0, r0, #2
    8e50:	4b85      	ldr	r3, [pc, #532]	; (9068 <_spi_interrupt_handler+0x21c>)
    8e52:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8e54:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    8e56:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    8e58:	5ce3      	ldrb	r3, [r4, r3]
    8e5a:	2236      	movs	r2, #54	; 0x36
    8e5c:	5ca7      	ldrb	r7, [r4, r2]
    8e5e:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    8e60:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    8e62:	7db5      	ldrb	r5, [r6, #22]
    8e64:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    8e66:	07eb      	lsls	r3, r5, #31
    8e68:	d52e      	bpl.n	8ec8 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8e6a:	7963      	ldrb	r3, [r4, #5]
    8e6c:	2b01      	cmp	r3, #1
    8e6e:	d025      	beq.n	8ebc <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    8e70:	2b00      	cmp	r3, #0
    8e72:	d129      	bne.n	8ec8 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    8e74:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    8e76:	2b00      	cmp	r3, #0
    8e78:	d026      	beq.n	8ec8 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8e7a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    8e7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    8e7e:	7813      	ldrb	r3, [r2, #0]
    8e80:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    8e82:	1c50      	adds	r0, r2, #1
    8e84:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8e86:	79a0      	ldrb	r0, [r4, #6]
    8e88:	2801      	cmp	r0, #1
    8e8a:	d100      	bne.n	8e8e <_spi_interrupt_handler+0x42>
    8e8c:	e069      	b.n	8f62 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    8e8e:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    8e90:	05db      	lsls	r3, r3, #23
    8e92:	0ddb      	lsrs	r3, r3, #23
    8e94:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    8e96:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    8e98:	3b01      	subs	r3, #1
    8e9a:	b29b      	uxth	r3, r3
    8e9c:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    8e9e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    8ea0:	b29b      	uxth	r3, r3
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d110      	bne.n	8ec8 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8ea6:	3301      	adds	r3, #1
    8ea8:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    8eaa:	7a63      	ldrb	r3, [r4, #9]
    8eac:	2b01      	cmp	r3, #1
    8eae:	d10b      	bne.n	8ec8 <_spi_interrupt_handler+0x7c>
    8eb0:	79e3      	ldrb	r3, [r4, #7]
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d108      	bne.n	8ec8 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8eb6:	3302      	adds	r3, #2
    8eb8:	75b3      	strb	r3, [r6, #22]
    8eba:	e005      	b.n	8ec8 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    8ebc:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d03e      	beq.n	8f40 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    8ec2:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d1d8      	bne.n	8e7a <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    8ec8:	076b      	lsls	r3, r5, #29
    8eca:	d511      	bpl.n	8ef0 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8ecc:	8b73      	ldrh	r3, [r6, #26]
    8ece:	075b      	lsls	r3, r3, #29
    8ed0:	d551      	bpl.n	8f76 <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    8ed2:	7a63      	ldrb	r3, [r4, #9]
    8ed4:	2b01      	cmp	r3, #1
    8ed6:	d008      	beq.n	8eea <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    8ed8:	221e      	movs	r2, #30
    8eda:	2338      	movs	r3, #56	; 0x38
    8edc:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    8ede:	3b35      	subs	r3, #53	; 0x35
    8ee0:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    8ee2:	3302      	adds	r3, #2
    8ee4:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    8ee6:	073b      	lsls	r3, r7, #28
    8ee8:	d441      	bmi.n	8f6e <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    8eea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8eec:	2304      	movs	r3, #4
    8eee:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    8ef0:	07ab      	lsls	r3, r5, #30
    8ef2:	d515      	bpl.n	8f20 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    8ef4:	7963      	ldrb	r3, [r4, #5]
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	d10e      	bne.n	8f18 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    8efa:	3307      	adds	r3, #7
    8efc:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8efe:	3b05      	subs	r3, #5
    8f00:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    8f02:	3301      	adds	r3, #1
    8f04:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    8f06:	2300      	movs	r3, #0
    8f08:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    8f0a:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    8f0c:	3338      	adds	r3, #56	; 0x38
    8f0e:	2200      	movs	r2, #0
    8f10:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    8f12:	06fb      	lsls	r3, r7, #27
    8f14:	d500      	bpl.n	8f18 <_spi_interrupt_handler+0xcc>
    8f16:	e07f      	b.n	9018 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8f18:	7963      	ldrb	r3, [r4, #5]
    8f1a:	2b01      	cmp	r3, #1
    8f1c:	d100      	bne.n	8f20 <_spi_interrupt_handler+0xd4>
    8f1e:	e07f      	b.n	9020 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    8f20:	072b      	lsls	r3, r5, #28
    8f22:	d508      	bpl.n	8f36 <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    8f24:	7963      	ldrb	r3, [r4, #5]
    8f26:	2b00      	cmp	r3, #0
    8f28:	d105      	bne.n	8f36 <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    8f2a:	3308      	adds	r3, #8
    8f2c:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    8f2e:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    8f30:	06bb      	lsls	r3, r7, #26
    8f32:	d500      	bpl.n	8f36 <_spi_interrupt_handler+0xea>
    8f34:	e08a      	b.n	904c <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    8f36:	b26d      	sxtb	r5, r5
    8f38:	2d00      	cmp	r5, #0
    8f3a:	da00      	bge.n	8f3e <_spi_interrupt_handler+0xf2>
    8f3c:	e08a      	b.n	9054 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    8f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    8f40:	4b4a      	ldr	r3, [pc, #296]	; (906c <_spi_interrupt_handler+0x220>)
    8f42:	881b      	ldrh	r3, [r3, #0]
    8f44:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    8f46:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    8f48:	3b01      	subs	r3, #1
    8f4a:	b29b      	uxth	r3, r3
    8f4c:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    8f4e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    8f50:	b29b      	uxth	r3, r3
    8f52:	2b00      	cmp	r3, #0
    8f54:	d101      	bne.n	8f5a <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8f56:	3301      	adds	r3, #1
    8f58:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    8f5a:	7963      	ldrb	r3, [r4, #5]
		if (0
    8f5c:	2b01      	cmp	r3, #1
    8f5e:	d0b0      	beq.n	8ec2 <_spi_interrupt_handler+0x76>
    8f60:	e786      	b.n	8e70 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    8f62:	7850      	ldrb	r0, [r2, #1]
    8f64:	0200      	lsls	r0, r0, #8
    8f66:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    8f68:	3202      	adds	r2, #2
    8f6a:	62e2      	str	r2, [r4, #44]	; 0x2c
    8f6c:	e790      	b.n	8e90 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    8f6e:	0020      	movs	r0, r4
    8f70:	69a3      	ldr	r3, [r4, #24]
    8f72:	4798      	blx	r3
    8f74:	e7b9      	b.n	8eea <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    8f76:	7a63      	ldrb	r3, [r4, #9]
    8f78:	2b01      	cmp	r3, #1
    8f7a:	d027      	beq.n	8fcc <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8f7c:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    8f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f80:	05db      	lsls	r3, r3, #23
    8f82:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    8f84:	b2da      	uxtb	r2, r3
    8f86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    8f88:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    8f8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8f8c:	1c51      	adds	r1, r2, #1
    8f8e:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8f90:	79a1      	ldrb	r1, [r4, #6]
    8f92:	2901      	cmp	r1, #1
    8f94:	d033      	beq.n	8ffe <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    8f96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    8f98:	3b01      	subs	r3, #1
    8f9a:	b29b      	uxth	r3, r3
    8f9c:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    8f9e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    8fa0:	b29b      	uxth	r3, r3
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	d1a4      	bne.n	8ef0 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    8fa6:	2200      	movs	r2, #0
    8fa8:	3338      	adds	r3, #56	; 0x38
    8faa:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8fac:	3b34      	subs	r3, #52	; 0x34
    8fae:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    8fb0:	7a63      	ldrb	r3, [r4, #9]
    8fb2:	2b02      	cmp	r3, #2
    8fb4:	d029      	beq.n	900a <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    8fb6:	7a63      	ldrb	r3, [r4, #9]
    8fb8:	2b00      	cmp	r3, #0
    8fba:	d000      	beq.n	8fbe <_spi_interrupt_handler+0x172>
    8fbc:	e798      	b.n	8ef0 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    8fbe:	07bb      	lsls	r3, r7, #30
    8fc0:	d400      	bmi.n	8fc4 <_spi_interrupt_handler+0x178>
    8fc2:	e795      	b.n	8ef0 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    8fc4:	0020      	movs	r0, r4
    8fc6:	6923      	ldr	r3, [r4, #16]
    8fc8:	4798      	blx	r3
    8fca:	e791      	b.n	8ef0 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8fcc:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    8fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    8fd0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    8fd2:	3b01      	subs	r3, #1
    8fd4:	b29b      	uxth	r3, r3
    8fd6:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    8fd8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    8fda:	b29b      	uxth	r3, r3
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d000      	beq.n	8fe2 <_spi_interrupt_handler+0x196>
    8fe0:	e786      	b.n	8ef0 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8fe2:	3304      	adds	r3, #4
    8fe4:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    8fe6:	2200      	movs	r2, #0
    8fe8:	3334      	adds	r3, #52	; 0x34
    8fea:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    8fec:	3b35      	subs	r3, #53	; 0x35
    8fee:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    8ff0:	07fb      	lsls	r3, r7, #31
    8ff2:	d400      	bmi.n	8ff6 <_spi_interrupt_handler+0x1aa>
    8ff4:	e77c      	b.n	8ef0 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    8ff6:	0020      	movs	r0, r4
    8ff8:	68e3      	ldr	r3, [r4, #12]
    8ffa:	4798      	blx	r3
    8ffc:	e778      	b.n	8ef0 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    8ffe:	0a1b      	lsrs	r3, r3, #8
    9000:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    9002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9004:	3301      	adds	r3, #1
    9006:	62a3      	str	r3, [r4, #40]	; 0x28
    9008:	e7c5      	b.n	8f96 <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    900a:	077b      	lsls	r3, r7, #29
    900c:	d400      	bmi.n	9010 <_spi_interrupt_handler+0x1c4>
    900e:	e76f      	b.n	8ef0 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    9010:	0020      	movs	r0, r4
    9012:	6963      	ldr	r3, [r4, #20]
    9014:	4798      	blx	r3
    9016:	e76b      	b.n	8ef0 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    9018:	0020      	movs	r0, r4
    901a:	69e3      	ldr	r3, [r4, #28]
    901c:	4798      	blx	r3
    901e:	e77b      	b.n	8f18 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9020:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    9022:	2b01      	cmp	r3, #1
    9024:	d000      	beq.n	9028 <_spi_interrupt_handler+0x1dc>
    9026:	e786      	b.n	8f36 <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9028:	79e3      	ldrb	r3, [r4, #7]
    902a:	2b00      	cmp	r3, #0
    902c:	d000      	beq.n	9030 <_spi_interrupt_handler+0x1e4>
    902e:	e782      	b.n	8f36 <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9030:	3302      	adds	r3, #2
    9032:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    9034:	3301      	adds	r3, #1
    9036:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    9038:	2200      	movs	r2, #0
    903a:	3335      	adds	r3, #53	; 0x35
    903c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    903e:	07fb      	lsls	r3, r7, #31
    9040:	d400      	bmi.n	9044 <_spi_interrupt_handler+0x1f8>
    9042:	e76d      	b.n	8f20 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    9044:	0020      	movs	r0, r4
    9046:	68e3      	ldr	r3, [r4, #12]
    9048:	4798      	blx	r3
    904a:	e769      	b.n	8f20 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    904c:	0020      	movs	r0, r4
    904e:	6a23      	ldr	r3, [r4, #32]
    9050:	4798      	blx	r3
    9052:	e770      	b.n	8f36 <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9054:	2380      	movs	r3, #128	; 0x80
    9056:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9058:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    905a:	067b      	lsls	r3, r7, #25
    905c:	d400      	bmi.n	9060 <_spi_interrupt_handler+0x214>
    905e:	e76e      	b.n	8f3e <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    9060:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9062:	0020      	movs	r0, r4
    9064:	4798      	blx	r3
}
    9066:	e76a      	b.n	8f3e <_spi_interrupt_handler+0xf2>
    9068:	200008a8 	.word	0x200008a8
    906c:	200008a4 	.word	0x200008a4

00009070 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    9070:	b5f0      	push	{r4, r5, r6, r7, lr}
    9072:	46de      	mov	lr, fp
    9074:	4657      	mov	r7, sl
    9076:	464e      	mov	r6, r9
    9078:	4645      	mov	r5, r8
    907a:	b5e0      	push	{r5, r6, r7, lr}
    907c:	b087      	sub	sp, #28
    907e:	4680      	mov	r8, r0
    9080:	9104      	str	r1, [sp, #16]
    9082:	0016      	movs	r6, r2
    9084:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    9086:	2200      	movs	r2, #0
    9088:	2300      	movs	r3, #0
    908a:	2100      	movs	r1, #0
    908c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    908e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    9090:	2001      	movs	r0, #1
    9092:	0021      	movs	r1, r4
    9094:	9600      	str	r6, [sp, #0]
    9096:	9701      	str	r7, [sp, #4]
    9098:	465c      	mov	r4, fp
    909a:	9403      	str	r4, [sp, #12]
    909c:	4644      	mov	r4, r8
    909e:	9405      	str	r4, [sp, #20]
    90a0:	e013      	b.n	90ca <long_division+0x5a>
    90a2:	2420      	movs	r4, #32
    90a4:	1a64      	subs	r4, r4, r1
    90a6:	0005      	movs	r5, r0
    90a8:	40e5      	lsrs	r5, r4
    90aa:	46a8      	mov	r8, r5
    90ac:	e014      	b.n	90d8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    90ae:	9c00      	ldr	r4, [sp, #0]
    90b0:	9d01      	ldr	r5, [sp, #4]
    90b2:	1b12      	subs	r2, r2, r4
    90b4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    90b6:	465c      	mov	r4, fp
    90b8:	464d      	mov	r5, r9
    90ba:	432c      	orrs	r4, r5
    90bc:	46a3      	mov	fp, r4
    90be:	9c03      	ldr	r4, [sp, #12]
    90c0:	4645      	mov	r5, r8
    90c2:	432c      	orrs	r4, r5
    90c4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    90c6:	3901      	subs	r1, #1
    90c8:	d325      	bcc.n	9116 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    90ca:	2420      	movs	r4, #32
    90cc:	4264      	negs	r4, r4
    90ce:	190c      	adds	r4, r1, r4
    90d0:	d4e7      	bmi.n	90a2 <long_division+0x32>
    90d2:	0005      	movs	r5, r0
    90d4:	40a5      	lsls	r5, r4
    90d6:	46a8      	mov	r8, r5
    90d8:	0004      	movs	r4, r0
    90da:	408c      	lsls	r4, r1
    90dc:	46a1      	mov	r9, r4
		r = r << 1;
    90de:	1892      	adds	r2, r2, r2
    90e0:	415b      	adcs	r3, r3
    90e2:	0014      	movs	r4, r2
    90e4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    90e6:	9e05      	ldr	r6, [sp, #20]
    90e8:	464f      	mov	r7, r9
    90ea:	403e      	ands	r6, r7
    90ec:	46b4      	mov	ip, r6
    90ee:	9e04      	ldr	r6, [sp, #16]
    90f0:	4647      	mov	r7, r8
    90f2:	403e      	ands	r6, r7
    90f4:	46b2      	mov	sl, r6
    90f6:	4666      	mov	r6, ip
    90f8:	4657      	mov	r7, sl
    90fa:	433e      	orrs	r6, r7
    90fc:	d003      	beq.n	9106 <long_division+0x96>
			r |= 0x01;
    90fe:	0006      	movs	r6, r0
    9100:	4326      	orrs	r6, r4
    9102:	0032      	movs	r2, r6
    9104:	002b      	movs	r3, r5
		if (r >= d) {
    9106:	9c00      	ldr	r4, [sp, #0]
    9108:	9d01      	ldr	r5, [sp, #4]
    910a:	429d      	cmp	r5, r3
    910c:	d8db      	bhi.n	90c6 <long_division+0x56>
    910e:	d1ce      	bne.n	90ae <long_division+0x3e>
    9110:	4294      	cmp	r4, r2
    9112:	d8d8      	bhi.n	90c6 <long_division+0x56>
    9114:	e7cb      	b.n	90ae <long_division+0x3e>
    9116:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    9118:	4658      	mov	r0, fp
    911a:	0019      	movs	r1, r3
    911c:	b007      	add	sp, #28
    911e:	bc3c      	pop	{r2, r3, r4, r5}
    9120:	4690      	mov	r8, r2
    9122:	4699      	mov	r9, r3
    9124:	46a2      	mov	sl, r4
    9126:	46ab      	mov	fp, r5
    9128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000912a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    912a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    912c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    912e:	2340      	movs	r3, #64	; 0x40
    9130:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    9132:	4281      	cmp	r1, r0
    9134:	d202      	bcs.n	913c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    9136:	0018      	movs	r0, r3
    9138:	bd10      	pop	{r4, pc}
		baud_calculated++;
    913a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    913c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    913e:	1c63      	adds	r3, r4, #1
    9140:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    9142:	4288      	cmp	r0, r1
    9144:	d9f9      	bls.n	913a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9146:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    9148:	2cff      	cmp	r4, #255	; 0xff
    914a:	d8f4      	bhi.n	9136 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    914c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    914e:	2300      	movs	r3, #0
    9150:	e7f1      	b.n	9136 <_sercom_get_sync_baud_val+0xc>
	...

00009154 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    9154:	b5f0      	push	{r4, r5, r6, r7, lr}
    9156:	b083      	sub	sp, #12
    9158:	000f      	movs	r7, r1
    915a:	0016      	movs	r6, r2
    915c:	aa08      	add	r2, sp, #32
    915e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    9160:	0004      	movs	r4, r0
    9162:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9164:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    9166:	42bc      	cmp	r4, r7
    9168:	d902      	bls.n	9170 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    916a:	0010      	movs	r0, r2
    916c:	b003      	add	sp, #12
    916e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    9170:	2b00      	cmp	r3, #0
    9172:	d114      	bne.n	919e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    9174:	0002      	movs	r2, r0
    9176:	0008      	movs	r0, r1
    9178:	2100      	movs	r1, #0
    917a:	4c19      	ldr	r4, [pc, #100]	; (91e0 <_sercom_get_async_baud_val+0x8c>)
    917c:	47a0      	blx	r4
    917e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    9180:	003a      	movs	r2, r7
    9182:	2300      	movs	r3, #0
    9184:	2000      	movs	r0, #0
    9186:	4c17      	ldr	r4, [pc, #92]	; (91e4 <_sercom_get_async_baud_val+0x90>)
    9188:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    918a:	2200      	movs	r2, #0
    918c:	2301      	movs	r3, #1
    918e:	1a12      	subs	r2, r2, r0
    9190:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    9192:	0c12      	lsrs	r2, r2, #16
    9194:	041b      	lsls	r3, r3, #16
    9196:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    9198:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    919a:	2200      	movs	r2, #0
    919c:	e7e5      	b.n	916a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    919e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    91a0:	2b01      	cmp	r3, #1
    91a2:	d1f9      	bne.n	9198 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    91a4:	000a      	movs	r2, r1
    91a6:	2300      	movs	r3, #0
    91a8:	2100      	movs	r1, #0
    91aa:	4c0d      	ldr	r4, [pc, #52]	; (91e0 <_sercom_get_async_baud_val+0x8c>)
    91ac:	47a0      	blx	r4
    91ae:	0002      	movs	r2, r0
    91b0:	000b      	movs	r3, r1
    91b2:	9200      	str	r2, [sp, #0]
    91b4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    91b6:	0038      	movs	r0, r7
    91b8:	2100      	movs	r1, #0
    91ba:	4c0a      	ldr	r4, [pc, #40]	; (91e4 <_sercom_get_async_baud_val+0x90>)
    91bc:	47a0      	blx	r4
    91be:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    91c0:	2380      	movs	r3, #128	; 0x80
    91c2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    91c4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    91c6:	4298      	cmp	r0, r3
    91c8:	d8cf      	bhi.n	916a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    91ca:	0f79      	lsrs	r1, r7, #29
    91cc:	00f8      	lsls	r0, r7, #3
    91ce:	9a00      	ldr	r2, [sp, #0]
    91d0:	9b01      	ldr	r3, [sp, #4]
    91d2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    91d4:	00ea      	lsls	r2, r5, #3
    91d6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    91d8:	b2d2      	uxtb	r2, r2
    91da:	0352      	lsls	r2, r2, #13
    91dc:	432a      	orrs	r2, r5
    91de:	e7db      	b.n	9198 <_sercom_get_async_baud_val+0x44>
    91e0:	0000e7e9 	.word	0x0000e7e9
    91e4:	00009071 	.word	0x00009071

000091e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    91e8:	b510      	push	{r4, lr}
    91ea:	b082      	sub	sp, #8
    91ec:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    91ee:	4b0e      	ldr	r3, [pc, #56]	; (9228 <sercom_set_gclk_generator+0x40>)
    91f0:	781b      	ldrb	r3, [r3, #0]
    91f2:	2b00      	cmp	r3, #0
    91f4:	d007      	beq.n	9206 <sercom_set_gclk_generator+0x1e>
    91f6:	2900      	cmp	r1, #0
    91f8:	d105      	bne.n	9206 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    91fa:	4b0b      	ldr	r3, [pc, #44]	; (9228 <sercom_set_gclk_generator+0x40>)
    91fc:	785b      	ldrb	r3, [r3, #1]
    91fe:	4283      	cmp	r3, r0
    9200:	d010      	beq.n	9224 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    9202:	201d      	movs	r0, #29
    9204:	e00c      	b.n	9220 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    9206:	a901      	add	r1, sp, #4
    9208:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    920a:	2013      	movs	r0, #19
    920c:	4b07      	ldr	r3, [pc, #28]	; (922c <sercom_set_gclk_generator+0x44>)
    920e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    9210:	2013      	movs	r0, #19
    9212:	4b07      	ldr	r3, [pc, #28]	; (9230 <sercom_set_gclk_generator+0x48>)
    9214:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    9216:	4b04      	ldr	r3, [pc, #16]	; (9228 <sercom_set_gclk_generator+0x40>)
    9218:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    921a:	2201      	movs	r2, #1
    921c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    921e:	2000      	movs	r0, #0
}
    9220:	b002      	add	sp, #8
    9222:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    9224:	2000      	movs	r0, #0
    9226:	e7fb      	b.n	9220 <sercom_set_gclk_generator+0x38>
    9228:	2000023c 	.word	0x2000023c
    922c:	0000d2dd 	.word	0x0000d2dd
    9230:	0000d251 	.word	0x0000d251

00009234 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    9234:	4b40      	ldr	r3, [pc, #256]	; (9338 <_sercom_get_default_pad+0x104>)
    9236:	4298      	cmp	r0, r3
    9238:	d031      	beq.n	929e <_sercom_get_default_pad+0x6a>
    923a:	d90a      	bls.n	9252 <_sercom_get_default_pad+0x1e>
    923c:	4b3f      	ldr	r3, [pc, #252]	; (933c <_sercom_get_default_pad+0x108>)
    923e:	4298      	cmp	r0, r3
    9240:	d04d      	beq.n	92de <_sercom_get_default_pad+0xaa>
    9242:	4b3f      	ldr	r3, [pc, #252]	; (9340 <_sercom_get_default_pad+0x10c>)
    9244:	4298      	cmp	r0, r3
    9246:	d05a      	beq.n	92fe <_sercom_get_default_pad+0xca>
    9248:	4b3e      	ldr	r3, [pc, #248]	; (9344 <_sercom_get_default_pad+0x110>)
    924a:	4298      	cmp	r0, r3
    924c:	d037      	beq.n	92be <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    924e:	2000      	movs	r0, #0
}
    9250:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    9252:	4b3d      	ldr	r3, [pc, #244]	; (9348 <_sercom_get_default_pad+0x114>)
    9254:	4298      	cmp	r0, r3
    9256:	d00c      	beq.n	9272 <_sercom_get_default_pad+0x3e>
    9258:	4b3c      	ldr	r3, [pc, #240]	; (934c <_sercom_get_default_pad+0x118>)
    925a:	4298      	cmp	r0, r3
    925c:	d1f7      	bne.n	924e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    925e:	2901      	cmp	r1, #1
    9260:	d017      	beq.n	9292 <_sercom_get_default_pad+0x5e>
    9262:	2900      	cmp	r1, #0
    9264:	d05d      	beq.n	9322 <_sercom_get_default_pad+0xee>
    9266:	2902      	cmp	r1, #2
    9268:	d015      	beq.n	9296 <_sercom_get_default_pad+0x62>
    926a:	2903      	cmp	r1, #3
    926c:	d015      	beq.n	929a <_sercom_get_default_pad+0x66>
	return 0;
    926e:	2000      	movs	r0, #0
    9270:	e7ee      	b.n	9250 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9272:	2901      	cmp	r1, #1
    9274:	d007      	beq.n	9286 <_sercom_get_default_pad+0x52>
    9276:	2900      	cmp	r1, #0
    9278:	d051      	beq.n	931e <_sercom_get_default_pad+0xea>
    927a:	2902      	cmp	r1, #2
    927c:	d005      	beq.n	928a <_sercom_get_default_pad+0x56>
    927e:	2903      	cmp	r1, #3
    9280:	d005      	beq.n	928e <_sercom_get_default_pad+0x5a>
	return 0;
    9282:	2000      	movs	r0, #0
    9284:	e7e4      	b.n	9250 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9286:	4832      	ldr	r0, [pc, #200]	; (9350 <_sercom_get_default_pad+0x11c>)
    9288:	e7e2      	b.n	9250 <_sercom_get_default_pad+0x1c>
    928a:	4832      	ldr	r0, [pc, #200]	; (9354 <_sercom_get_default_pad+0x120>)
    928c:	e7e0      	b.n	9250 <_sercom_get_default_pad+0x1c>
    928e:	4832      	ldr	r0, [pc, #200]	; (9358 <_sercom_get_default_pad+0x124>)
    9290:	e7de      	b.n	9250 <_sercom_get_default_pad+0x1c>
    9292:	4832      	ldr	r0, [pc, #200]	; (935c <_sercom_get_default_pad+0x128>)
    9294:	e7dc      	b.n	9250 <_sercom_get_default_pad+0x1c>
    9296:	4832      	ldr	r0, [pc, #200]	; (9360 <_sercom_get_default_pad+0x12c>)
    9298:	e7da      	b.n	9250 <_sercom_get_default_pad+0x1c>
    929a:	4832      	ldr	r0, [pc, #200]	; (9364 <_sercom_get_default_pad+0x130>)
    929c:	e7d8      	b.n	9250 <_sercom_get_default_pad+0x1c>
    929e:	2901      	cmp	r1, #1
    92a0:	d007      	beq.n	92b2 <_sercom_get_default_pad+0x7e>
    92a2:	2900      	cmp	r1, #0
    92a4:	d03f      	beq.n	9326 <_sercom_get_default_pad+0xf2>
    92a6:	2902      	cmp	r1, #2
    92a8:	d005      	beq.n	92b6 <_sercom_get_default_pad+0x82>
    92aa:	2903      	cmp	r1, #3
    92ac:	d005      	beq.n	92ba <_sercom_get_default_pad+0x86>
	return 0;
    92ae:	2000      	movs	r0, #0
    92b0:	e7ce      	b.n	9250 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    92b2:	482d      	ldr	r0, [pc, #180]	; (9368 <_sercom_get_default_pad+0x134>)
    92b4:	e7cc      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92b6:	482d      	ldr	r0, [pc, #180]	; (936c <_sercom_get_default_pad+0x138>)
    92b8:	e7ca      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92ba:	482d      	ldr	r0, [pc, #180]	; (9370 <_sercom_get_default_pad+0x13c>)
    92bc:	e7c8      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92be:	2901      	cmp	r1, #1
    92c0:	d007      	beq.n	92d2 <_sercom_get_default_pad+0x9e>
    92c2:	2900      	cmp	r1, #0
    92c4:	d031      	beq.n	932a <_sercom_get_default_pad+0xf6>
    92c6:	2902      	cmp	r1, #2
    92c8:	d005      	beq.n	92d6 <_sercom_get_default_pad+0xa2>
    92ca:	2903      	cmp	r1, #3
    92cc:	d005      	beq.n	92da <_sercom_get_default_pad+0xa6>
	return 0;
    92ce:	2000      	movs	r0, #0
    92d0:	e7be      	b.n	9250 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    92d2:	4828      	ldr	r0, [pc, #160]	; (9374 <_sercom_get_default_pad+0x140>)
    92d4:	e7bc      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92d6:	4828      	ldr	r0, [pc, #160]	; (9378 <_sercom_get_default_pad+0x144>)
    92d8:	e7ba      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92da:	4828      	ldr	r0, [pc, #160]	; (937c <_sercom_get_default_pad+0x148>)
    92dc:	e7b8      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92de:	2901      	cmp	r1, #1
    92e0:	d007      	beq.n	92f2 <_sercom_get_default_pad+0xbe>
    92e2:	2900      	cmp	r1, #0
    92e4:	d023      	beq.n	932e <_sercom_get_default_pad+0xfa>
    92e6:	2902      	cmp	r1, #2
    92e8:	d005      	beq.n	92f6 <_sercom_get_default_pad+0xc2>
    92ea:	2903      	cmp	r1, #3
    92ec:	d005      	beq.n	92fa <_sercom_get_default_pad+0xc6>
	return 0;
    92ee:	2000      	movs	r0, #0
    92f0:	e7ae      	b.n	9250 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    92f2:	4823      	ldr	r0, [pc, #140]	; (9380 <_sercom_get_default_pad+0x14c>)
    92f4:	e7ac      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92f6:	4823      	ldr	r0, [pc, #140]	; (9384 <_sercom_get_default_pad+0x150>)
    92f8:	e7aa      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92fa:	4823      	ldr	r0, [pc, #140]	; (9388 <_sercom_get_default_pad+0x154>)
    92fc:	e7a8      	b.n	9250 <_sercom_get_default_pad+0x1c>
    92fe:	2901      	cmp	r1, #1
    9300:	d007      	beq.n	9312 <_sercom_get_default_pad+0xde>
    9302:	2900      	cmp	r1, #0
    9304:	d015      	beq.n	9332 <_sercom_get_default_pad+0xfe>
    9306:	2902      	cmp	r1, #2
    9308:	d005      	beq.n	9316 <_sercom_get_default_pad+0xe2>
    930a:	2903      	cmp	r1, #3
    930c:	d005      	beq.n	931a <_sercom_get_default_pad+0xe6>
	return 0;
    930e:	2000      	movs	r0, #0
    9310:	e79e      	b.n	9250 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9312:	481e      	ldr	r0, [pc, #120]	; (938c <_sercom_get_default_pad+0x158>)
    9314:	e79c      	b.n	9250 <_sercom_get_default_pad+0x1c>
    9316:	481e      	ldr	r0, [pc, #120]	; (9390 <_sercom_get_default_pad+0x15c>)
    9318:	e79a      	b.n	9250 <_sercom_get_default_pad+0x1c>
    931a:	481e      	ldr	r0, [pc, #120]	; (9394 <_sercom_get_default_pad+0x160>)
    931c:	e798      	b.n	9250 <_sercom_get_default_pad+0x1c>
    931e:	481e      	ldr	r0, [pc, #120]	; (9398 <_sercom_get_default_pad+0x164>)
    9320:	e796      	b.n	9250 <_sercom_get_default_pad+0x1c>
    9322:	2003      	movs	r0, #3
    9324:	e794      	b.n	9250 <_sercom_get_default_pad+0x1c>
    9326:	481d      	ldr	r0, [pc, #116]	; (939c <_sercom_get_default_pad+0x168>)
    9328:	e792      	b.n	9250 <_sercom_get_default_pad+0x1c>
    932a:	481d      	ldr	r0, [pc, #116]	; (93a0 <_sercom_get_default_pad+0x16c>)
    932c:	e790      	b.n	9250 <_sercom_get_default_pad+0x1c>
    932e:	481d      	ldr	r0, [pc, #116]	; (93a4 <_sercom_get_default_pad+0x170>)
    9330:	e78e      	b.n	9250 <_sercom_get_default_pad+0x1c>
    9332:	481d      	ldr	r0, [pc, #116]	; (93a8 <_sercom_get_default_pad+0x174>)
    9334:	e78c      	b.n	9250 <_sercom_get_default_pad+0x1c>
    9336:	46c0      	nop			; (mov r8, r8)
    9338:	42001000 	.word	0x42001000
    933c:	42001800 	.word	0x42001800
    9340:	42001c00 	.word	0x42001c00
    9344:	42001400 	.word	0x42001400
    9348:	42000800 	.word	0x42000800
    934c:	42000c00 	.word	0x42000c00
    9350:	00050003 	.word	0x00050003
    9354:	00060003 	.word	0x00060003
    9358:	00070003 	.word	0x00070003
    935c:	00010003 	.word	0x00010003
    9360:	001e0003 	.word	0x001e0003
    9364:	001f0003 	.word	0x001f0003
    9368:	00090003 	.word	0x00090003
    936c:	000a0003 	.word	0x000a0003
    9370:	000b0003 	.word	0x000b0003
    9374:	00110003 	.word	0x00110003
    9378:	00120003 	.word	0x00120003
    937c:	00130003 	.word	0x00130003
    9380:	000d0003 	.word	0x000d0003
    9384:	000e0003 	.word	0x000e0003
    9388:	000f0003 	.word	0x000f0003
    938c:	00170003 	.word	0x00170003
    9390:	00180003 	.word	0x00180003
    9394:	00190003 	.word	0x00190003
    9398:	00040003 	.word	0x00040003
    939c:	00080003 	.word	0x00080003
    93a0:	00100003 	.word	0x00100003
    93a4:	000c0003 	.word	0x000c0003
    93a8:	00160003 	.word	0x00160003

000093ac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    93ac:	b530      	push	{r4, r5, lr}
    93ae:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    93b0:	4b0b      	ldr	r3, [pc, #44]	; (93e0 <_sercom_get_sercom_inst_index+0x34>)
    93b2:	466a      	mov	r2, sp
    93b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    93b6:	c232      	stmia	r2!, {r1, r4, r5}
    93b8:	cb32      	ldmia	r3!, {r1, r4, r5}
    93ba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    93bc:	9b00      	ldr	r3, [sp, #0]
    93be:	4283      	cmp	r3, r0
    93c0:	d00b      	beq.n	93da <_sercom_get_sercom_inst_index+0x2e>
    93c2:	2301      	movs	r3, #1
    93c4:	009a      	lsls	r2, r3, #2
    93c6:	4669      	mov	r1, sp
    93c8:	5852      	ldr	r2, [r2, r1]
    93ca:	4282      	cmp	r2, r0
    93cc:	d006      	beq.n	93dc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    93ce:	3301      	adds	r3, #1
    93d0:	2b06      	cmp	r3, #6
    93d2:	d1f7      	bne.n	93c4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    93d4:	2000      	movs	r0, #0
}
    93d6:	b007      	add	sp, #28
    93d8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    93da:	2300      	movs	r3, #0
			return i;
    93dc:	b2d8      	uxtb	r0, r3
    93de:	e7fa      	b.n	93d6 <_sercom_get_sercom_inst_index+0x2a>
    93e0:	000129a4 	.word	0x000129a4

000093e4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    93e4:	4770      	bx	lr
	...

000093e8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    93e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    93ea:	4b0a      	ldr	r3, [pc, #40]	; (9414 <_sercom_set_handler+0x2c>)
    93ec:	781b      	ldrb	r3, [r3, #0]
    93ee:	2b00      	cmp	r3, #0
    93f0:	d10c      	bne.n	940c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    93f2:	4f09      	ldr	r7, [pc, #36]	; (9418 <_sercom_set_handler+0x30>)
    93f4:	4e09      	ldr	r6, [pc, #36]	; (941c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    93f6:	4d0a      	ldr	r5, [pc, #40]	; (9420 <_sercom_set_handler+0x38>)
    93f8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    93fa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    93fc:	195a      	adds	r2, r3, r5
    93fe:	6014      	str	r4, [r2, #0]
    9400:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9402:	2b18      	cmp	r3, #24
    9404:	d1f9      	bne.n	93fa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    9406:	2201      	movs	r2, #1
    9408:	4b02      	ldr	r3, [pc, #8]	; (9414 <_sercom_set_handler+0x2c>)
    940a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    940c:	0080      	lsls	r0, r0, #2
    940e:	4b02      	ldr	r3, [pc, #8]	; (9418 <_sercom_set_handler+0x30>)
    9410:	50c1      	str	r1, [r0, r3]
}
    9412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9414:	2000023e 	.word	0x2000023e
    9418:	20000240 	.word	0x20000240
    941c:	000093e5 	.word	0x000093e5
    9420:	200008a8 	.word	0x200008a8

00009424 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    9424:	b500      	push	{lr}
    9426:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    9428:	2309      	movs	r3, #9
    942a:	466a      	mov	r2, sp
    942c:	7013      	strb	r3, [r2, #0]
    942e:	3301      	adds	r3, #1
    9430:	7053      	strb	r3, [r2, #1]
    9432:	3301      	adds	r3, #1
    9434:	7093      	strb	r3, [r2, #2]
    9436:	3301      	adds	r3, #1
    9438:	70d3      	strb	r3, [r2, #3]
    943a:	3301      	adds	r3, #1
    943c:	7113      	strb	r3, [r2, #4]
    943e:	3301      	adds	r3, #1
    9440:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    9442:	4b03      	ldr	r3, [pc, #12]	; (9450 <_sercom_get_interrupt_vector+0x2c>)
    9444:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    9446:	466b      	mov	r3, sp
    9448:	5618      	ldrsb	r0, [r3, r0]
}
    944a:	b003      	add	sp, #12
    944c:	bd00      	pop	{pc}
    944e:	46c0      	nop			; (mov r8, r8)
    9450:	000093ad 	.word	0x000093ad

00009454 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    9454:	b510      	push	{r4, lr}
    9456:	4b02      	ldr	r3, [pc, #8]	; (9460 <SERCOM0_Handler+0xc>)
    9458:	681b      	ldr	r3, [r3, #0]
    945a:	2000      	movs	r0, #0
    945c:	4798      	blx	r3
    945e:	bd10      	pop	{r4, pc}
    9460:	20000240 	.word	0x20000240

00009464 <SERCOM1_Handler>:
    9464:	b510      	push	{r4, lr}
    9466:	4b02      	ldr	r3, [pc, #8]	; (9470 <SERCOM1_Handler+0xc>)
    9468:	685b      	ldr	r3, [r3, #4]
    946a:	2001      	movs	r0, #1
    946c:	4798      	blx	r3
    946e:	bd10      	pop	{r4, pc}
    9470:	20000240 	.word	0x20000240

00009474 <SERCOM2_Handler>:
    9474:	b510      	push	{r4, lr}
    9476:	4b02      	ldr	r3, [pc, #8]	; (9480 <SERCOM2_Handler+0xc>)
    9478:	689b      	ldr	r3, [r3, #8]
    947a:	2002      	movs	r0, #2
    947c:	4798      	blx	r3
    947e:	bd10      	pop	{r4, pc}
    9480:	20000240 	.word	0x20000240

00009484 <SERCOM3_Handler>:
    9484:	b510      	push	{r4, lr}
    9486:	4b02      	ldr	r3, [pc, #8]	; (9490 <SERCOM3_Handler+0xc>)
    9488:	68db      	ldr	r3, [r3, #12]
    948a:	2003      	movs	r0, #3
    948c:	4798      	blx	r3
    948e:	bd10      	pop	{r4, pc}
    9490:	20000240 	.word	0x20000240

00009494 <SERCOM4_Handler>:
    9494:	b510      	push	{r4, lr}
    9496:	4b02      	ldr	r3, [pc, #8]	; (94a0 <SERCOM4_Handler+0xc>)
    9498:	691b      	ldr	r3, [r3, #16]
    949a:	2004      	movs	r0, #4
    949c:	4798      	blx	r3
    949e:	bd10      	pop	{r4, pc}
    94a0:	20000240 	.word	0x20000240

000094a4 <SERCOM5_Handler>:
    94a4:	b510      	push	{r4, lr}
    94a6:	4b02      	ldr	r3, [pc, #8]	; (94b0 <SERCOM5_Handler+0xc>)
    94a8:	695b      	ldr	r3, [r3, #20]
    94aa:	2005      	movs	r0, #5
    94ac:	4798      	blx	r3
    94ae:	bd10      	pop	{r4, pc}
    94b0:	20000240 	.word	0x20000240

000094b4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    94b4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    94b6:	2a00      	cmp	r2, #0
    94b8:	d001      	beq.n	94be <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    94ba:	0018      	movs	r0, r3
    94bc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    94be:	008b      	lsls	r3, r1, #2
    94c0:	4a06      	ldr	r2, [pc, #24]	; (94dc <extint_register_callback+0x28>)
    94c2:	589b      	ldr	r3, [r3, r2]
    94c4:	2b00      	cmp	r3, #0
    94c6:	d003      	beq.n	94d0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    94c8:	4283      	cmp	r3, r0
    94ca:	d005      	beq.n	94d8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    94cc:	231d      	movs	r3, #29
    94ce:	e7f4      	b.n	94ba <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    94d0:	0089      	lsls	r1, r1, #2
    94d2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    94d4:	2300      	movs	r3, #0
    94d6:	e7f0      	b.n	94ba <extint_register_callback+0x6>
		return STATUS_OK;
    94d8:	2300      	movs	r3, #0
    94da:	e7ee      	b.n	94ba <extint_register_callback+0x6>
    94dc:	2000084c 	.word	0x2000084c

000094e0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    94e0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    94e2:	2900      	cmp	r1, #0
    94e4:	d001      	beq.n	94ea <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    94e6:	0018      	movs	r0, r3
    94e8:	4770      	bx	lr
		return NULL;
    94ea:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    94ec:	281f      	cmp	r0, #31
    94ee:	d800      	bhi.n	94f2 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    94f0:	4a02      	ldr	r2, [pc, #8]	; (94fc <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    94f2:	2301      	movs	r3, #1
    94f4:	4083      	lsls	r3, r0
    94f6:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    94f8:	2300      	movs	r3, #0
    94fa:	e7f4      	b.n	94e6 <extint_chan_enable_callback+0x6>
    94fc:	40001800 	.word	0x40001800

00009500 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9500:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    9502:	2900      	cmp	r1, #0
    9504:	d001      	beq.n	950a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    9506:	0018      	movs	r0, r3
    9508:	4770      	bx	lr
		return NULL;
    950a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    950c:	281f      	cmp	r0, #31
    950e:	d800      	bhi.n	9512 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    9510:	4a02      	ldr	r2, [pc, #8]	; (951c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    9512:	2301      	movs	r3, #1
    9514:	4083      	lsls	r3, r0
    9516:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    9518:	2300      	movs	r3, #0
    951a:	e7f4      	b.n	9506 <extint_chan_disable_callback+0x6>
    951c:	40001800 	.word	0x40001800

00009520 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    9520:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    9522:	2200      	movs	r2, #0
    9524:	4b10      	ldr	r3, [pc, #64]	; (9568 <EIC_Handler+0x48>)
    9526:	701a      	strb	r2, [r3, #0]
    9528:	2300      	movs	r3, #0
    952a:	4910      	ldr	r1, [pc, #64]	; (956c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    952c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    952e:	4e10      	ldr	r6, [pc, #64]	; (9570 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    9530:	4c0d      	ldr	r4, [pc, #52]	; (9568 <EIC_Handler+0x48>)
    9532:	e00a      	b.n	954a <EIC_Handler+0x2a>
		return eics[eic_index];
    9534:	490d      	ldr	r1, [pc, #52]	; (956c <EIC_Handler+0x4c>)
    9536:	e008      	b.n	954a <EIC_Handler+0x2a>
    9538:	7823      	ldrb	r3, [r4, #0]
    953a:	3301      	adds	r3, #1
    953c:	b2db      	uxtb	r3, r3
    953e:	7023      	strb	r3, [r4, #0]
    9540:	2b0f      	cmp	r3, #15
    9542:	d810      	bhi.n	9566 <EIC_Handler+0x46>
		return NULL;
    9544:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    9546:	2b1f      	cmp	r3, #31
    9548:	d9f4      	bls.n	9534 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    954a:	0028      	movs	r0, r5
    954c:	4018      	ands	r0, r3
    954e:	2201      	movs	r2, #1
    9550:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    9552:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    9554:	4210      	tst	r0, r2
    9556:	d0ef      	beq.n	9538 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    9558:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    955a:	009b      	lsls	r3, r3, #2
    955c:	599b      	ldr	r3, [r3, r6]
    955e:	2b00      	cmp	r3, #0
    9560:	d0ea      	beq.n	9538 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    9562:	4798      	blx	r3
    9564:	e7e8      	b.n	9538 <EIC_Handler+0x18>
			}
		}
	}
}
    9566:	bd70      	pop	{r4, r5, r6, pc}
    9568:	200008c0 	.word	0x200008c0
    956c:	40001800 	.word	0x40001800
    9570:	2000084c 	.word	0x2000084c

00009574 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    9574:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    9576:	2000      	movs	r0, #0
    9578:	4b08      	ldr	r3, [pc, #32]	; (959c <delay_init+0x28>)
    957a:	4798      	blx	r3
    957c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    957e:	4c08      	ldr	r4, [pc, #32]	; (95a0 <delay_init+0x2c>)
    9580:	21fa      	movs	r1, #250	; 0xfa
    9582:	0089      	lsls	r1, r1, #2
    9584:	47a0      	blx	r4
    9586:	4b07      	ldr	r3, [pc, #28]	; (95a4 <delay_init+0x30>)
    9588:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    958a:	4907      	ldr	r1, [pc, #28]	; (95a8 <delay_init+0x34>)
    958c:	0028      	movs	r0, r5
    958e:	47a0      	blx	r4
    9590:	4b06      	ldr	r3, [pc, #24]	; (95ac <delay_init+0x38>)
    9592:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    9594:	2205      	movs	r2, #5
    9596:	4b06      	ldr	r3, [pc, #24]	; (95b0 <delay_init+0x3c>)
    9598:	601a      	str	r2, [r3, #0]
}
    959a:	bd70      	pop	{r4, r5, r6, pc}
    959c:	0000d1c5 	.word	0x0000d1c5
    95a0:	0000e4fd 	.word	0x0000e4fd
    95a4:	20000000 	.word	0x20000000
    95a8:	000f4240 	.word	0x000f4240
    95ac:	20000004 	.word	0x20000004
    95b0:	e000e010 	.word	0xe000e010

000095b4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    95b4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    95b6:	4b08      	ldr	r3, [pc, #32]	; (95d8 <delay_cycles_us+0x24>)
    95b8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    95ba:	4a08      	ldr	r2, [pc, #32]	; (95dc <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    95bc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    95be:	2180      	movs	r1, #128	; 0x80
    95c0:	0249      	lsls	r1, r1, #9
	while (n--) {
    95c2:	3801      	subs	r0, #1
    95c4:	d307      	bcc.n	95d6 <delay_cycles_us+0x22>
	if (n > 0) {
    95c6:	2c00      	cmp	r4, #0
    95c8:	d0fb      	beq.n	95c2 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    95ca:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    95cc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    95ce:	6813      	ldr	r3, [r2, #0]
    95d0:	420b      	tst	r3, r1
    95d2:	d0fc      	beq.n	95ce <delay_cycles_us+0x1a>
    95d4:	e7f5      	b.n	95c2 <delay_cycles_us+0xe>
	}
}
    95d6:	bd30      	pop	{r4, r5, pc}
    95d8:	20000004 	.word	0x20000004
    95dc:	e000e010 	.word	0xe000e010

000095e0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    95e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    95e2:	4b08      	ldr	r3, [pc, #32]	; (9604 <delay_cycles_ms+0x24>)
    95e4:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    95e6:	4a08      	ldr	r2, [pc, #32]	; (9608 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    95e8:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    95ea:	2180      	movs	r1, #128	; 0x80
    95ec:	0249      	lsls	r1, r1, #9
	while (n--) {
    95ee:	3801      	subs	r0, #1
    95f0:	d307      	bcc.n	9602 <delay_cycles_ms+0x22>
	if (n > 0) {
    95f2:	2c00      	cmp	r4, #0
    95f4:	d0fb      	beq.n	95ee <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    95f6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    95f8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    95fa:	6813      	ldr	r3, [r2, #0]
    95fc:	420b      	tst	r3, r1
    95fe:	d0fc      	beq.n	95fa <delay_cycles_ms+0x1a>
    9600:	e7f5      	b.n	95ee <delay_cycles_ms+0xe>
	}
}
    9602:	bd30      	pop	{r4, r5, pc}
    9604:	20000000 	.word	0x20000000
    9608:	e000e010 	.word	0xe000e010

0000960c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    960c:	b510      	push	{r4, lr}
	if (gpfIsr) {
    960e:	4b03      	ldr	r3, [pc, #12]	; (961c <chip_isr+0x10>)
    9610:	681b      	ldr	r3, [r3, #0]
    9612:	2b00      	cmp	r3, #0
    9614:	d000      	beq.n	9618 <chip_isr+0xc>
		gpfIsr();
    9616:	4798      	blx	r3
	}
}
    9618:	bd10      	pop	{r4, pc}
    961a:	46c0      	nop			; (mov r8, r8)
    961c:	20000258 	.word	0x20000258

00009620 <nm_bsp_deinit>:
 *	@fn		nm_bsp_deinit
 *	@brief	De-iInitialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
    9620:	b500      	push	{lr}
    9622:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    9624:	a901      	add	r1, sp, #4
    9626:	2300      	movs	r3, #0
    9628:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
    962a:	708b      	strb	r3, [r1, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    962c:	704b      	strb	r3, [r1, #1]
		port_base->OUTCLR.reg = pin_mask;
    962e:	4b06      	ldr	r3, [pc, #24]	; (9648 <nm_bsp_deinit+0x28>)
    9630:	2280      	movs	r2, #128	; 0x80
    9632:	0552      	lsls	r2, r2, #21
    9634:	615a      	str	r2, [r3, #20]
    9636:	2280      	movs	r2, #128	; 0x80
    9638:	0512      	lsls	r2, r2, #20
    963a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	port_pin_set_config(CONF_WINC_SPI_INT_PIN, &pin_conf);
    963c:	2029      	movs	r0, #41	; 0x29
    963e:	4b03      	ldr	r3, [pc, #12]	; (964c <nm_bsp_deinit+0x2c>)
    9640:	4798      	blx	r3
	return M2M_SUCCESS;
}
    9642:	2000      	movs	r0, #0
    9644:	b003      	add	sp, #12
    9646:	bd00      	pop	{pc}
    9648:	41004400 	.word	0x41004400
    964c:	0000cc01 	.word	0x0000cc01

00009650 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    9650:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    9652:	1e44      	subs	r4, r0, #1
    9654:	2800      	cmp	r0, #0
    9656:	d004      	beq.n	9662 <nm_bsp_sleep+0x12>
		delay_ms(1);
    9658:	4d02      	ldr	r5, [pc, #8]	; (9664 <nm_bsp_sleep+0x14>)
    965a:	2001      	movs	r0, #1
    965c:	47a8      	blx	r5
	while (u32TimeMsec--) {
    965e:	3c01      	subs	r4, #1
    9660:	d2fb      	bcs.n	965a <nm_bsp_sleep+0xa>
	}
}
    9662:	bd70      	pop	{r4, r5, r6, pc}
    9664:	000095e1 	.word	0x000095e1

00009668 <nm_bsp_reset>:
{
    9668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    966a:	4c07      	ldr	r4, [pc, #28]	; (9688 <nm_bsp_reset+0x20>)
    966c:	2780      	movs	r7, #128	; 0x80
    966e:	057f      	lsls	r7, r7, #21
    9670:	6167      	str	r7, [r4, #20]
    9672:	2580      	movs	r5, #128	; 0x80
    9674:	052d      	lsls	r5, r5, #20
    9676:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    9678:	2001      	movs	r0, #1
    967a:	4e04      	ldr	r6, [pc, #16]	; (968c <nm_bsp_reset+0x24>)
    967c:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    967e:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    9680:	200a      	movs	r0, #10
    9682:	47b0      	blx	r6
    9684:	61a5      	str	r5, [r4, #24]
}
    9686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9688:	41004400 	.word	0x41004400
    968c:	00009651 	.word	0x00009651

00009690 <nm_bsp_init>:
{
    9690:	b570      	push	{r4, r5, r6, lr}
    9692:	b082      	sub	sp, #8
	gpfIsr = NULL;
    9694:	2300      	movs	r3, #0
    9696:	4a16      	ldr	r2, [pc, #88]	; (96f0 <nm_bsp_init+0x60>)
    9698:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    969a:	ac01      	add	r4, sp, #4
    969c:	2501      	movs	r5, #1
    969e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    96a0:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    96a2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    96a4:	0021      	movs	r1, r4
    96a6:	201b      	movs	r0, #27
    96a8:	4e12      	ldr	r6, [pc, #72]	; (96f4 <nm_bsp_init+0x64>)
    96aa:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    96ac:	0021      	movs	r1, r4
    96ae:	201c      	movs	r0, #28
    96b0:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    96b2:	0021      	movs	r1, r4
    96b4:	2028      	movs	r0, #40	; 0x28
    96b6:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    96b8:	4b0f      	ldr	r3, [pc, #60]	; (96f8 <nm_bsp_init+0x68>)
    96ba:	2280      	movs	r2, #128	; 0x80
    96bc:	0552      	lsls	r2, r2, #21
    96be:	615a      	str	r2, [r3, #20]
    96c0:	2280      	movs	r2, #128	; 0x80
    96c2:	0512      	lsls	r2, r2, #20
    96c4:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    96c6:	4b0d      	ldr	r3, [pc, #52]	; (96fc <nm_bsp_init+0x6c>)
    96c8:	681b      	ldr	r3, [r3, #0]
    96ca:	421d      	tst	r5, r3
    96cc:	d003      	beq.n	96d6 <nm_bsp_init+0x46>
    96ce:	4b0b      	ldr	r3, [pc, #44]	; (96fc <nm_bsp_init+0x6c>)
    96d0:	681b      	ldr	r3, [r3, #0]
    96d2:	079b      	lsls	r3, r3, #30
    96d4:	d401      	bmi.n	96da <nm_bsp_init+0x4a>
	    delay_init();
    96d6:	4b0a      	ldr	r3, [pc, #40]	; (9700 <nm_bsp_init+0x70>)
    96d8:	4798      	blx	r3
	nm_bsp_reset();
    96da:	4b0a      	ldr	r3, [pc, #40]	; (9704 <nm_bsp_init+0x74>)
    96dc:	4798      	blx	r3
	cpu_irq_enable();
    96de:	2201      	movs	r2, #1
    96e0:	4b09      	ldr	r3, [pc, #36]	; (9708 <nm_bsp_init+0x78>)
    96e2:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    96e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    96e8:	b662      	cpsie	i
}
    96ea:	2000      	movs	r0, #0
    96ec:	b002      	add	sp, #8
    96ee:	bd70      	pop	{r4, r5, r6, pc}
    96f0:	20000258 	.word	0x20000258
    96f4:	0000cc01 	.word	0x0000cc01
    96f8:	41004400 	.word	0x41004400
    96fc:	e000e010 	.word	0xe000e010
    9700:	00009575 	.word	0x00009575
    9704:	00009669 	.word	0x00009669
    9708:	2000000a 	.word	0x2000000a

0000970c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    970c:	b510      	push	{r4, lr}
    970e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    9710:	4b0e      	ldr	r3, [pc, #56]	; (974c <nm_bsp_register_isr+0x40>)
    9712:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    9714:	ac01      	add	r4, sp, #4
    9716:	0020      	movs	r0, r4
    9718:	4b0d      	ldr	r3, [pc, #52]	; (9750 <nm_bsp_register_isr+0x44>)
    971a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    971c:	2329      	movs	r3, #41	; 0x29
    971e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    9720:	2300      	movs	r3, #0
    9722:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    9724:	3301      	adds	r3, #1
    9726:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    9728:	3301      	adds	r3, #1
    972a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    972c:	0021      	movs	r1, r4
    972e:	2009      	movs	r0, #9
    9730:	4b08      	ldr	r3, [pc, #32]	; (9754 <nm_bsp_register_isr+0x48>)
    9732:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    9734:	2200      	movs	r2, #0
    9736:	2109      	movs	r1, #9
    9738:	4807      	ldr	r0, [pc, #28]	; (9758 <nm_bsp_register_isr+0x4c>)
    973a:	4b08      	ldr	r3, [pc, #32]	; (975c <nm_bsp_register_isr+0x50>)
    973c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    973e:	2100      	movs	r1, #0
    9740:	2009      	movs	r0, #9
    9742:	4b07      	ldr	r3, [pc, #28]	; (9760 <nm_bsp_register_isr+0x54>)
    9744:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    9746:	b004      	add	sp, #16
    9748:	bd10      	pop	{r4, pc}
    974a:	46c0      	nop			; (mov r8, r8)
    974c:	20000258 	.word	0x20000258
    9750:	00006289 	.word	0x00006289
    9754:	0000629d 	.word	0x0000629d
    9758:	0000960d 	.word	0x0000960d
    975c:	000094b5 	.word	0x000094b5
    9760:	000094e1 	.word	0x000094e1

00009764 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    9764:	b510      	push	{r4, lr}
	if (u8Enable) {
    9766:	2800      	cmp	r0, #0
    9768:	d104      	bne.n	9774 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    976a:	2100      	movs	r1, #0
    976c:	2009      	movs	r0, #9
    976e:	4b04      	ldr	r3, [pc, #16]	; (9780 <nm_bsp_interrupt_ctrl+0x1c>)
    9770:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    9772:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    9774:	2100      	movs	r1, #0
    9776:	2009      	movs	r0, #9
    9778:	4b02      	ldr	r3, [pc, #8]	; (9784 <nm_bsp_interrupt_ctrl+0x20>)
    977a:	4798      	blx	r3
    977c:	e7f9      	b.n	9772 <nm_bsp_interrupt_ctrl+0xe>
    977e:	46c0      	nop			; (mov r8, r8)
    9780:	00009501 	.word	0x00009501
    9784:	000094e1 	.word	0x000094e1

00009788 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    9788:	b530      	push	{r4, r5, lr}
    978a:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    978c:	4c30      	ldr	r4, [pc, #192]	; (9850 <nm_bus_init+0xc8>)
    978e:	230e      	movs	r3, #14
    9790:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    9792:	2300      	movs	r3, #0
    9794:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    9796:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    9798:	a901      	add	r1, sp, #4
    979a:	2201      	movs	r2, #1
    979c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    979e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    97a0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    97a2:	200e      	movs	r0, #14
    97a4:	4b2b      	ldr	r3, [pc, #172]	; (9854 <nm_bus_init+0xcc>)
    97a6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    97a8:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    97aa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    97ac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    97ae:	2900      	cmp	r1, #0
    97b0:	d104      	bne.n	97bc <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    97b2:	0953      	lsrs	r3, r2, #5
    97b4:	01db      	lsls	r3, r3, #7
    97b6:	4928      	ldr	r1, [pc, #160]	; (9858 <nm_bus_init+0xd0>)
    97b8:	468c      	mov	ip, r1
    97ba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    97bc:	211f      	movs	r1, #31
    97be:	4011      	ands	r1, r2
    97c0:	2201      	movs	r2, #1
    97c2:	0010      	movs	r0, r2
    97c4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    97c6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    97c8:	ac02      	add	r4, sp, #8
    97ca:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    97cc:	2300      	movs	r3, #0
    97ce:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    97d0:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    97d2:	21c0      	movs	r1, #192	; 0xc0
    97d4:	0389      	lsls	r1, r1, #14
    97d6:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    97d8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    97da:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    97dc:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    97de:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    97e0:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    97e2:	3223      	adds	r2, #35	; 0x23
    97e4:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    97e6:	3a18      	subs	r2, #24
    97e8:	2100      	movs	r1, #0
    97ea:	a808      	add	r0, sp, #32
    97ec:	4b1b      	ldr	r3, [pc, #108]	; (985c <nm_bus_init+0xd4>)
    97ee:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    97f0:	4b1b      	ldr	r3, [pc, #108]	; (9860 <nm_bus_init+0xd8>)
    97f2:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    97f4:	4b1b      	ldr	r3, [pc, #108]	; (9864 <nm_bus_init+0xdc>)
    97f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    97f8:	2301      	movs	r3, #1
    97fa:	425b      	negs	r3, r3
    97fc:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    97fe:	4b1a      	ldr	r3, [pc, #104]	; (9868 <nm_bus_init+0xe0>)
    9800:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    9802:	4b1a      	ldr	r3, [pc, #104]	; (986c <nm_bus_init+0xe4>)
    9804:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    9806:	0022      	movs	r2, r4
    9808:	4919      	ldr	r1, [pc, #100]	; (9870 <nm_bus_init+0xe8>)
    980a:	481a      	ldr	r0, [pc, #104]	; (9874 <nm_bus_init+0xec>)
    980c:	4b1a      	ldr	r3, [pc, #104]	; (9878 <nm_bus_init+0xf0>)
    980e:	4798      	blx	r3
    9810:	2800      	cmp	r0, #0
    9812:	d11a      	bne.n	984a <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9814:	4d17      	ldr	r5, [pc, #92]	; (9874 <nm_bus_init+0xec>)
    9816:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9818:	0020      	movs	r0, r4
    981a:	4b18      	ldr	r3, [pc, #96]	; (987c <nm_bus_init+0xf4>)
    981c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    981e:	231f      	movs	r3, #31
    9820:	4018      	ands	r0, r3
    9822:	3b1e      	subs	r3, #30
    9824:	4083      	lsls	r3, r0
    9826:	4a16      	ldr	r2, [pc, #88]	; (9880 <nm_bus_init+0xf8>)
    9828:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    982a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    982c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    982e:	2b00      	cmp	r3, #0
    9830:	d1fc      	bne.n	982c <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9832:	6823      	ldr	r3, [r4, #0]
    9834:	2202      	movs	r2, #2
    9836:	4313      	orrs	r3, r2
    9838:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    983a:	4b12      	ldr	r3, [pc, #72]	; (9884 <nm_bus_init+0xfc>)
    983c:	4798      	blx	r3
	nm_bsp_sleep(1);
    983e:	2001      	movs	r0, #1
    9840:	4b11      	ldr	r3, [pc, #68]	; (9888 <nm_bus_init+0x100>)
    9842:	4798      	blx	r3
#endif
	return result;
    9844:	2000      	movs	r0, #0
}
    9846:	b011      	add	sp, #68	; 0x44
    9848:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    984a:	2006      	movs	r0, #6
    984c:	4240      	negs	r0, r0
    984e:	e7fa      	b.n	9846 <nm_bus_init+0xbe>
    9850:	200008c4 	.word	0x200008c4
    9854:	0000cc01 	.word	0x0000cc01
    9858:	41004400 	.word	0x41004400
    985c:	000101b7 	.word	0x000101b7
    9860:	000c0002 	.word	0x000c0002
    9864:	000d0002 	.word	0x000d0002
    9868:	000f0002 	.word	0x000f0002
    986c:	00b71b00 	.word	0x00b71b00
    9870:	42001000 	.word	0x42001000
    9874:	200008c8 	.word	0x200008c8
    9878:	00008819 	.word	0x00008819
    987c:	00009425 	.word	0x00009425
    9880:	e000e100 	.word	0xe000e100
    9884:	00009669 	.word	0x00009669
    9888:	00009651 	.word	0x00009651

0000988c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    988c:	b5f0      	push	{r4, r5, r6, r7, lr}
    988e:	46de      	mov	lr, fp
    9890:	4657      	mov	r7, sl
    9892:	464e      	mov	r6, r9
    9894:	4645      	mov	r5, r8
    9896:	b5e0      	push	{r5, r6, r7, lr}
    9898:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    989a:	2803      	cmp	r0, #3
    989c:	d000      	beq.n	98a0 <nm_bus_ioctl+0x14>
    989e:	e075      	b.n	998c <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    98a0:	680e      	ldr	r6, [r1, #0]
    98a2:	684d      	ldr	r5, [r1, #4]
    98a4:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    98a6:	2200      	movs	r2, #0
    98a8:	466b      	mov	r3, sp
    98aa:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    98ac:	2d00      	cmp	r5, #0
    98ae:	d027      	beq.n	9900 <nm_bus_ioctl+0x74>
    98b0:	2c00      	cmp	r4, #0
    98b2:	d065      	beq.n	9980 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    98b4:	2e00      	cmp	r6, #0
    98b6:	d100      	bne.n	98ba <nm_bus_ioctl+0x2e>
    98b8:	e077      	b.n	99aa <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    98ba:	2300      	movs	r3, #0
    98bc:	4698      	mov	r8, r3
    98be:	2300      	movs	r3, #0
    98c0:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    98c2:	2201      	movs	r2, #1
    98c4:	493b      	ldr	r1, [pc, #236]	; (99b4 <nm_bus_ioctl+0x128>)
    98c6:	483c      	ldr	r0, [pc, #240]	; (99b8 <nm_bus_ioctl+0x12c>)
    98c8:	4b3c      	ldr	r3, [pc, #240]	; (99bc <nm_bus_ioctl+0x130>)
    98ca:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    98cc:	4b3a      	ldr	r3, [pc, #232]	; (99b8 <nm_bus_ioctl+0x12c>)
    98ce:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    98d0:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    98d2:	2204      	movs	r2, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    98d4:	4699      	mov	r9, r3
			pu8Miso++;
    98d6:	4659      	mov	r1, fp
    98d8:	424b      	negs	r3, r1
    98da:	4159      	adcs	r1, r3
    98dc:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    98de:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    98e0:	4653      	mov	r3, sl
    98e2:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    98e4:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    98e6:	4239      	tst	r1, r7
    98e8:	d0fc      	beq.n	98e4 <nm_bus_ioctl+0x58>
    98ea:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    98ec:	4239      	tst	r1, r7
    98ee:	d0fc      	beq.n	98ea <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    98f0:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    98f2:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    98f4:	4211      	tst	r1, r2
    98f6:	d0fc      	beq.n	98f2 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    98f8:	4649      	mov	r1, r9
    98fa:	7989      	ldrb	r1, [r1, #6]
    98fc:	468c      	mov	ip, r1
    98fe:	e011      	b.n	9924 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    9900:	2e00      	cmp	r6, #0
    9902:	d03a      	beq.n	997a <nm_bus_ioctl+0xee>
    9904:	2c00      	cmp	r4, #0
    9906:	d03e      	beq.n	9986 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    9908:	2300      	movs	r3, #0
    990a:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    990c:	3301      	adds	r3, #1
    990e:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    9910:	466b      	mov	r3, sp
    9912:	1ddd      	adds	r5, r3, #7
    9914:	e7d5      	b.n	98c2 <nm_bus_ioctl+0x36>
    9916:	4660      	mov	r0, ip
    9918:	2801      	cmp	r0, #1
    991a:	d00d      	beq.n	9938 <nm_bus_ioctl+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    991c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    991e:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    9920:	2900      	cmp	r1, #0
    9922:	d00d      	beq.n	9940 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9924:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    9926:	4211      	tst	r1, r2
    9928:	d0fc      	beq.n	9924 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    992a:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    992c:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    992e:	4210      	tst	r0, r2
    9930:	d0f1      	beq.n	9916 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9932:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    9934:	311e      	adds	r1, #30
    9936:	e7ee      	b.n	9916 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9938:	6a98      	ldr	r0, [r3, #40]	; 0x28
    993a:	05c0      	lsls	r0, r0, #23
    993c:	0dc0      	lsrs	r0, r0, #23
    993e:	e7ef      	b.n	9920 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    9940:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    9942:	3c01      	subs	r4, #1
    9944:	b2a4      	uxth	r4, r4
			pu8Miso++;
    9946:	445d      	add	r5, fp
			pu8Mosi++;
    9948:	4643      	mov	r3, r8
    994a:	4259      	negs	r1, r3
    994c:	414b      	adcs	r3, r1
    994e:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    9950:	2c00      	cmp	r4, #0
    9952:	d1c4      	bne.n	98de <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9954:	4b18      	ldr	r3, [pc, #96]	; (99b8 <nm_bus_ioctl+0x12c>)
    9956:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    9958:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    995a:	7e0b      	ldrb	r3, [r1, #24]
    995c:	4213      	tst	r3, r2
    995e:	d0fc      	beq.n	995a <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    9960:	2200      	movs	r2, #0
    9962:	4914      	ldr	r1, [pc, #80]	; (99b4 <nm_bus_ioctl+0x128>)
    9964:	4814      	ldr	r0, [pc, #80]	; (99b8 <nm_bus_ioctl+0x12c>)
    9966:	4b15      	ldr	r3, [pc, #84]	; (99bc <nm_bus_ioctl+0x130>)
    9968:	4798      	blx	r3
	return M2M_SUCCESS;
    996a:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    996c:	b003      	add	sp, #12
    996e:	bc3c      	pop	{r2, r3, r4, r5}
    9970:	4690      	mov	r8, r2
    9972:	4699      	mov	r9, r3
    9974:	46a2      	mov	sl, r4
    9976:	46ab      	mov	fp, r5
    9978:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    997a:	200f      	movs	r0, #15
    997c:	4240      	negs	r0, r0
    997e:	e7f5      	b.n	996c <nm_bus_ioctl+0xe0>
    9980:	200f      	movs	r0, #15
    9982:	4240      	negs	r0, r0
    9984:	e7f2      	b.n	996c <nm_bus_ioctl+0xe0>
    9986:	200f      	movs	r0, #15
    9988:	4240      	negs	r0, r0
		break;
    998a:	e7ef      	b.n	996c <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    998c:	220e      	movs	r2, #14
    998e:	32ff      	adds	r2, #255	; 0xff
    9990:	490b      	ldr	r1, [pc, #44]	; (99c0 <nm_bus_ioctl+0x134>)
    9992:	480c      	ldr	r0, [pc, #48]	; (99c4 <nm_bus_ioctl+0x138>)
    9994:	4b0c      	ldr	r3, [pc, #48]	; (99c8 <nm_bus_ioctl+0x13c>)
    9996:	4798      	blx	r3
    9998:	480c      	ldr	r0, [pc, #48]	; (99cc <nm_bus_ioctl+0x140>)
    999a:	4b0d      	ldr	r3, [pc, #52]	; (99d0 <nm_bus_ioctl+0x144>)
    999c:	4798      	blx	r3
    999e:	200d      	movs	r0, #13
    99a0:	4b0c      	ldr	r3, [pc, #48]	; (99d4 <nm_bus_ioctl+0x148>)
    99a2:	4798      	blx	r3
			s8Ret = -1;
    99a4:	2001      	movs	r0, #1
    99a6:	4240      	negs	r0, r0
	return s8Ret;
    99a8:	e7e0      	b.n	996c <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    99aa:	2301      	movs	r3, #1
    99ac:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    99ae:	466b      	mov	r3, sp
    99b0:	1dde      	adds	r6, r3, #7
    99b2:	e784      	b.n	98be <nm_bus_ioctl+0x32>
    99b4:	200008c4 	.word	0x200008c4
    99b8:	200008c8 	.word	0x200008c8
    99bc:	00008b49 	.word	0x00008b49
    99c0:	000129bc 	.word	0x000129bc
    99c4:	000129cc 	.word	0x000129cc
    99c8:	00010319 	.word	0x00010319
    99cc:	000129e0 	.word	0x000129e0
    99d0:	00010435 	.word	0x00010435
    99d4:	0001034d 	.word	0x0001034d

000099d8 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    99d8:	b530      	push	{r4, r5, lr}
    99da:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    99dc:	ab01      	add	r3, sp, #4
    99de:	2200      	movs	r2, #0
    99e0:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    99e2:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    99e4:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    99e6:	4d13      	ldr	r5, [pc, #76]	; (9a34 <nm_bus_deinit+0x5c>)
    99e8:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    99ea:	0020      	movs	r0, r4
    99ec:	4b12      	ldr	r3, [pc, #72]	; (9a38 <nm_bus_deinit+0x60>)
    99ee:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    99f0:	231f      	movs	r3, #31
    99f2:	4018      	ands	r0, r3
    99f4:	3b1e      	subs	r3, #30
    99f6:	4083      	lsls	r3, r0
    99f8:	2280      	movs	r2, #128	; 0x80
    99fa:	4910      	ldr	r1, [pc, #64]	; (9a3c <nm_bus_deinit+0x64>)
    99fc:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    99fe:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    9a00:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    9a02:	2b00      	cmp	r3, #0
    9a04:	d1fc      	bne.n	9a00 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    9a06:	338f      	adds	r3, #143	; 0x8f
    9a08:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    9a0a:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    9a0c:	6823      	ldr	r3, [r4, #0]
    9a0e:	2202      	movs	r2, #2
    9a10:	4393      	bics	r3, r2
    9a12:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    9a14:	a901      	add	r1, sp, #4
    9a16:	200c      	movs	r0, #12
    9a18:	4c09      	ldr	r4, [pc, #36]	; (9a40 <nm_bus_deinit+0x68>)
    9a1a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    9a1c:	a901      	add	r1, sp, #4
    9a1e:	200f      	movs	r0, #15
    9a20:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    9a22:	a901      	add	r1, sp, #4
    9a24:	200d      	movs	r0, #13
    9a26:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    9a28:	a901      	add	r1, sp, #4
    9a2a:	200e      	movs	r0, #14
    9a2c:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    9a2e:	2000      	movs	r0, #0
    9a30:	b003      	add	sp, #12
    9a32:	bd30      	pop	{r4, r5, pc}
    9a34:	200008c8 	.word	0x200008c8
    9a38:	00009425 	.word	0x00009425
    9a3c:	e000e100 	.word	0xe000e100
    9a40:	0000cc01 	.word	0x0000cc01

00009a44 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    9a44:	2a00      	cmp	r2, #0
    9a46:	d006      	beq.n	9a56 <m2m_memcpy+0x12>
    9a48:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    9a4a:	780b      	ldrb	r3, [r1, #0]
    9a4c:	7003      	strb	r3, [r0, #0]
		pDst++;
    9a4e:	3001      	adds	r0, #1
		pSrc++;
    9a50:	3101      	adds	r1, #1
	}while(--sz);
    9a52:	4290      	cmp	r0, r2
    9a54:	d1f9      	bne.n	9a4a <m2m_memcpy+0x6>
}
    9a56:	4770      	bx	lr

00009a58 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    9a58:	2a00      	cmp	r2, #0
    9a5a:	d004      	beq.n	9a66 <m2m_memset+0xe>
    9a5c:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    9a5e:	7001      	strb	r1, [r0, #0]
		pBuf++;
    9a60:	3001      	adds	r0, #1
	}while(--sz);
    9a62:	4290      	cmp	r0, r2
    9a64:	d1fb      	bne.n	9a5e <m2m_memset+0x6>
}
    9a66:	4770      	bx	lr

00009a68 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    9a68:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    9a6a:	7802      	ldrb	r2, [r0, #0]
    9a6c:	2a00      	cmp	r2, #0
    9a6e:	d007      	beq.n	9a80 <m2m_strlen+0x18>
    9a70:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    9a72:	3001      	adds	r0, #1
    9a74:	b280      	uxth	r0, r0
		pcStr++;
    9a76:	3301      	adds	r3, #1
	while(*pcStr)
    9a78:	781a      	ldrb	r2, [r3, #0]
    9a7a:	2a00      	cmp	r2, #0
    9a7c:	d1f9      	bne.n	9a72 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    9a7e:	4770      	bx	lr
	uint16	u16StrLen = 0;
    9a80:	2000      	movs	r0, #0
    9a82:	e7fc      	b.n	9a7e <m2m_strlen+0x16>

00009a84 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    9a84:	4a02      	ldr	r2, [pc, #8]	; (9a90 <isr+0xc>)
    9a86:	78d3      	ldrb	r3, [r2, #3]
    9a88:	3301      	adds	r3, #1
    9a8a:	b2db      	uxtb	r3, r3
    9a8c:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    9a8e:	4770      	bx	lr
    9a90:	20000904 	.word	0x20000904

00009a94 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    9a94:	4770      	bx	lr
	...

00009a98 <hif_set_rx_done>:
{
    9a98:	b500      	push	{lr}
    9a9a:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    9a9c:	2200      	movs	r2, #0
    9a9e:	4b0a      	ldr	r3, [pc, #40]	; (9ac8 <hif_set_rx_done+0x30>)
    9aa0:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    9aa2:	2001      	movs	r0, #1
    9aa4:	4b09      	ldr	r3, [pc, #36]	; (9acc <hif_set_rx_done+0x34>)
    9aa6:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    9aa8:	a901      	add	r1, sp, #4
    9aaa:	4809      	ldr	r0, [pc, #36]	; (9ad0 <hif_set_rx_done+0x38>)
    9aac:	4b09      	ldr	r3, [pc, #36]	; (9ad4 <hif_set_rx_done+0x3c>)
    9aae:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    9ab0:	2800      	cmp	r0, #0
    9ab2:	d001      	beq.n	9ab8 <hif_set_rx_done+0x20>
}
    9ab4:	b003      	add	sp, #12
    9ab6:	bd00      	pop	{pc}
	reg |= NBIT1;
    9ab8:	2102      	movs	r1, #2
    9aba:	9b01      	ldr	r3, [sp, #4]
    9abc:	4319      	orrs	r1, r3
    9abe:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    9ac0:	4803      	ldr	r0, [pc, #12]	; (9ad0 <hif_set_rx_done+0x38>)
    9ac2:	4b05      	ldr	r3, [pc, #20]	; (9ad8 <hif_set_rx_done+0x40>)
    9ac4:	4798      	blx	r3
    9ac6:	e7f5      	b.n	9ab4 <hif_set_rx_done+0x1c>
    9ac8:	20000904 	.word	0x20000904
    9acc:	00009765 	.word	0x00009765
    9ad0:	00001070 	.word	0x00001070
    9ad4:	0000aee1 	.word	0x0000aee1
    9ad8:	0000aeed 	.word	0x0000aeed

00009adc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    9adc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    9ade:	4b0c      	ldr	r3, [pc, #48]	; (9b10 <hif_chip_wake+0x34>)
    9ae0:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    9ae2:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    9ae4:	2b00      	cmp	r3, #0
    9ae6:	d10d      	bne.n	9b04 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    9ae8:	4b09      	ldr	r3, [pc, #36]	; (9b10 <hif_chip_wake+0x34>)
    9aea:	785b      	ldrb	r3, [r3, #1]
    9aec:	2b00      	cmp	r3, #0
    9aee:	d103      	bne.n	9af8 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    9af0:	4b07      	ldr	r3, [pc, #28]	; (9b10 <hif_chip_wake+0x34>)
    9af2:	781b      	ldrb	r3, [r3, #0]
    9af4:	2b00      	cmp	r3, #0
    9af6:	d106      	bne.n	9b06 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    9af8:	4a05      	ldr	r2, [pc, #20]	; (9b10 <hif_chip_wake+0x34>)
    9afa:	7853      	ldrb	r3, [r2, #1]
    9afc:	3301      	adds	r3, #1
    9afe:	b2db      	uxtb	r3, r3
    9b00:	7053      	strb	r3, [r2, #1]
    9b02:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    9b04:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    9b06:	4b03      	ldr	r3, [pc, #12]	; (9b14 <hif_chip_wake+0x38>)
    9b08:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    9b0a:	2800      	cmp	r0, #0
    9b0c:	d0f4      	beq.n	9af8 <hif_chip_wake+0x1c>
    9b0e:	e7f9      	b.n	9b04 <hif_chip_wake+0x28>
    9b10:	20000904 	.word	0x20000904
    9b14:	0000abc9 	.word	0x0000abc9

00009b18 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    9b18:	4b05      	ldr	r3, [pc, #20]	; (9b30 <hif_chip_sleep_sc+0x18>)
    9b1a:	785b      	ldrb	r3, [r3, #1]
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d004      	beq.n	9b2a <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    9b20:	4a03      	ldr	r2, [pc, #12]	; (9b30 <hif_chip_sleep_sc+0x18>)
    9b22:	7853      	ldrb	r3, [r2, #1]
    9b24:	3b01      	subs	r3, #1
    9b26:	b2db      	uxtb	r3, r3
    9b28:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    9b2a:	2000      	movs	r0, #0
    9b2c:	4770      	bx	lr
    9b2e:	46c0      	nop			; (mov r8, r8)
    9b30:	20000904 	.word	0x20000904

00009b34 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    9b34:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    9b36:	4b0b      	ldr	r3, [pc, #44]	; (9b64 <hif_chip_sleep+0x30>)
    9b38:	785b      	ldrb	r3, [r3, #1]
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d004      	beq.n	9b48 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    9b3e:	4a09      	ldr	r2, [pc, #36]	; (9b64 <hif_chip_sleep+0x30>)
    9b40:	7853      	ldrb	r3, [r2, #1]
    9b42:	3b01      	subs	r3, #1
    9b44:	b2db      	uxtb	r3, r3
    9b46:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    9b48:	4b06      	ldr	r3, [pc, #24]	; (9b64 <hif_chip_sleep+0x30>)
    9b4a:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    9b4c:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    9b4e:	2b00      	cmp	r3, #0
    9b50:	d103      	bne.n	9b5a <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    9b52:	4b04      	ldr	r3, [pc, #16]	; (9b64 <hif_chip_sleep+0x30>)
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	2b00      	cmp	r3, #0
    9b58:	d100      	bne.n	9b5c <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    9b5a:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    9b5c:	4b02      	ldr	r3, [pc, #8]	; (9b68 <hif_chip_sleep+0x34>)
    9b5e:	4798      	blx	r3
    9b60:	e7fb      	b.n	9b5a <hif_chip_sleep+0x26>
    9b62:	46c0      	nop			; (mov r8, r8)
    9b64:	20000904 	.word	0x20000904
    9b68:	0000ab61 	.word	0x0000ab61

00009b6c <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    9b6c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    9b6e:	4b05      	ldr	r3, [pc, #20]	; (9b84 <hif_deinit+0x18>)
    9b70:	4798      	blx	r3
    9b72:	0004      	movs	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    9b74:	2228      	movs	r2, #40	; 0x28
    9b76:	2100      	movs	r1, #0
    9b78:	4803      	ldr	r0, [pc, #12]	; (9b88 <hif_deinit+0x1c>)
    9b7a:	4b04      	ldr	r3, [pc, #16]	; (9b8c <hif_deinit+0x20>)
    9b7c:	4798      	blx	r3
	return ret;
}
    9b7e:	0020      	movs	r0, r4
    9b80:	bd10      	pop	{r4, pc}
    9b82:	46c0      	nop			; (mov r8, r8)
    9b84:	00009add 	.word	0x00009add
    9b88:	20000904 	.word	0x20000904
    9b8c:	00009a59 	.word	0x00009a59

00009b90 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    9b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b92:	46de      	mov	lr, fp
    9b94:	4657      	mov	r7, sl
    9b96:	b580      	push	{r7, lr}
    9b98:	b089      	sub	sp, #36	; 0x24
    9b9a:	4683      	mov	fp, r0
    9b9c:	468a      	mov	sl, r1
    9b9e:	9201      	str	r2, [sp, #4]
    9ba0:	9300      	str	r3, [sp, #0]
    9ba2:	ab10      	add	r3, sp, #64	; 0x40
    9ba4:	cb80      	ldmia	r3!, {r7}
    9ba6:	881e      	ldrh	r6, [r3, #0]
    9ba8:	ab12      	add	r3, sp, #72	; 0x48
    9baa:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    9bac:	227f      	movs	r2, #127	; 0x7f
    9bae:	400a      	ands	r2, r1
    9bb0:	ab07      	add	r3, sp, #28
    9bb2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    9bb4:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    9bb6:	2208      	movs	r2, #8
    9bb8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    9bba:	2f00      	cmp	r7, #0
    9bbc:	d03d      	beq.n	9c3a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    9bbe:	885a      	ldrh	r2, [r3, #2]
    9bc0:	1992      	adds	r2, r2, r6
    9bc2:	18aa      	adds	r2, r5, r2
    9bc4:	b292      	uxth	r2, r2
    9bc6:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    9bc8:	4b69      	ldr	r3, [pc, #420]	; (9d70 <hif_send+0x1e0>)
    9bca:	4798      	blx	r3
    9bcc:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    9bce:	d000      	beq.n	9bd2 <hif_send+0x42>
    9bd0:	e0c1      	b.n	9d56 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    9bd2:	2300      	movs	r3, #0
    9bd4:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    9bd6:	aa02      	add	r2, sp, #8
    9bd8:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    9bda:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    9bdc:	9b04      	ldr	r3, [sp, #16]
    9bde:	465a      	mov	r2, fp
    9be0:	431a      	orrs	r2, r3
    9be2:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    9be4:	9a04      	ldr	r2, [sp, #16]
    9be6:	4653      	mov	r3, sl
    9be8:	021b      	lsls	r3, r3, #8
    9bea:	4313      	orrs	r3, r2
    9bec:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    9bee:	ab07      	add	r3, sp, #28
    9bf0:	885b      	ldrh	r3, [r3, #2]
    9bf2:	9a04      	ldr	r2, [sp, #16]
    9bf4:	041b      	lsls	r3, r3, #16
    9bf6:	4313      	orrs	r3, r2
    9bf8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    9bfa:	9904      	ldr	r1, [sp, #16]
    9bfc:	485d      	ldr	r0, [pc, #372]	; (9d74 <hif_send+0x1e4>)
    9bfe:	4b5e      	ldr	r3, [pc, #376]	; (9d78 <hif_send+0x1e8>)
    9c00:	4798      	blx	r3
    9c02:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    9c04:	d157      	bne.n	9cb6 <hif_send+0x126>

		reg = 0UL;
    9c06:	2300      	movs	r3, #0
    9c08:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    9c0a:	9b04      	ldr	r3, [sp, #16]
    9c0c:	2202      	movs	r2, #2
    9c0e:	4313      	orrs	r3, r2
    9c10:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    9c12:	9904      	ldr	r1, [sp, #16]
    9c14:	4859      	ldr	r0, [pc, #356]	; (9d7c <hif_send+0x1ec>)
    9c16:	4b58      	ldr	r3, [pc, #352]	; (9d78 <hif_send+0x1e8>)
    9c18:	4798      	blx	r3
    9c1a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    9c1c:	d14b      	bne.n	9cb6 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    9c1e:	2200      	movs	r2, #0
    9c20:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    9c22:	ab02      	add	r3, sp, #8
    9c24:	80da      	strh	r2, [r3, #6]
    9c26:	3306      	adds	r3, #6
    9c28:	881b      	ldrh	r3, [r3, #0]
    9c2a:	b29b      	uxth	r3, r3
    9c2c:	4a54      	ldr	r2, [pc, #336]	; (9d80 <hif_send+0x1f0>)
    9c2e:	4293      	cmp	r3, r2
    9c30:	d849      	bhi.n	9cc6 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    9c32:	4c54      	ldr	r4, [pc, #336]	; (9d84 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    9c34:	4b54      	ldr	r3, [pc, #336]	; (9d88 <hif_send+0x1f8>)
    9c36:	469a      	mov	sl, r3
    9c38:	e017      	b.n	9c6a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    9c3a:	ab07      	add	r3, sp, #28
    9c3c:	885a      	ldrh	r2, [r3, #2]
    9c3e:	9900      	ldr	r1, [sp, #0]
    9c40:	468c      	mov	ip, r1
    9c42:	4462      	add	r2, ip
    9c44:	b292      	uxth	r2, r2
    9c46:	805a      	strh	r2, [r3, #2]
    9c48:	e7be      	b.n	9bc8 <hif_send+0x38>
				nm_bsp_sleep(1);
    9c4a:	2001      	movs	r0, #1
    9c4c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    9c4e:	9b04      	ldr	r3, [sp, #16]
    9c50:	079b      	lsls	r3, r3, #30
    9c52:	d528      	bpl.n	9ca6 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    9c54:	ab02      	add	r3, sp, #8
    9c56:	88da      	ldrh	r2, [r3, #6]
    9c58:	3201      	adds	r2, #1
    9c5a:	b292      	uxth	r2, r2
    9c5c:	80da      	strh	r2, [r3, #6]
    9c5e:	3306      	adds	r3, #6
    9c60:	881b      	ldrh	r3, [r3, #0]
    9c62:	b29b      	uxth	r3, r3
    9c64:	4a46      	ldr	r2, [pc, #280]	; (9d80 <hif_send+0x1f0>)
    9c66:	4293      	cmp	r3, r2
    9c68:	d82d      	bhi.n	9cc6 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    9c6a:	a904      	add	r1, sp, #16
    9c6c:	4843      	ldr	r0, [pc, #268]	; (9d7c <hif_send+0x1ec>)
    9c6e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    9c70:	2800      	cmp	r0, #0
    9c72:	d128      	bne.n	9cc6 <hif_send+0x136>
			if(cnt >= 500) {
    9c74:	ab02      	add	r3, sp, #8
    9c76:	3306      	adds	r3, #6
    9c78:	881b      	ldrh	r3, [r3, #0]
    9c7a:	b29b      	uxth	r3, r3
    9c7c:	22f4      	movs	r2, #244	; 0xf4
    9c7e:	32ff      	adds	r2, #255	; 0xff
    9c80:	4293      	cmp	r3, r2
    9c82:	d9e4      	bls.n	9c4e <hif_send+0xbe>
				if(cnt < 501) {
    9c84:	ab02      	add	r3, sp, #8
    9c86:	3306      	adds	r3, #6
    9c88:	881b      	ldrh	r3, [r3, #0]
    9c8a:	b29b      	uxth	r3, r3
    9c8c:	3201      	adds	r2, #1
    9c8e:	4293      	cmp	r3, r2
    9c90:	d8db      	bhi.n	9c4a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    9c92:	483e      	ldr	r0, [pc, #248]	; (9d8c <hif_send+0x1fc>)
    9c94:	4b3e      	ldr	r3, [pc, #248]	; (9d90 <hif_send+0x200>)
    9c96:	4798      	blx	r3
    9c98:	483e      	ldr	r0, [pc, #248]	; (9d94 <hif_send+0x204>)
    9c9a:	4b3f      	ldr	r3, [pc, #252]	; (9d98 <hif_send+0x208>)
    9c9c:	4798      	blx	r3
    9c9e:	200d      	movs	r0, #13
    9ca0:	4b3e      	ldr	r3, [pc, #248]	; (9d9c <hif_send+0x20c>)
    9ca2:	4798      	blx	r3
    9ca4:	e7d1      	b.n	9c4a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    9ca6:	a905      	add	r1, sp, #20
    9ca8:	483d      	ldr	r0, [pc, #244]	; (9da0 <hif_send+0x210>)
    9caa:	4b36      	ldr	r3, [pc, #216]	; (9d84 <hif_send+0x1f4>)
    9cac:	4798      	blx	r3
    9cae:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    9cb0:	d009      	beq.n	9cc6 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    9cb2:	2300      	movs	r3, #0
    9cb4:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    9cb6:	4b3b      	ldr	r3, [pc, #236]	; (9da4 <hif_send+0x214>)
    9cb8:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    9cba:	0020      	movs	r0, r4
    9cbc:	b009      	add	sp, #36	; 0x24
    9cbe:	bc0c      	pop	{r2, r3}
    9cc0:	4692      	mov	sl, r2
    9cc2:	469b      	mov	fp, r3
    9cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    9cc6:	9b05      	ldr	r3, [sp, #20]
    9cc8:	2b00      	cmp	r3, #0
    9cca:	d03f      	beq.n	9d4c <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    9ccc:	9b05      	ldr	r3, [sp, #20]
    9cce:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    9cd0:	a907      	add	r1, sp, #28
    9cd2:	884b      	ldrh	r3, [r1, #2]
    9cd4:	b29b      	uxth	r3, r3
    9cd6:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    9cd8:	9806      	ldr	r0, [sp, #24]
    9cda:	2208      	movs	r2, #8
    9cdc:	4b32      	ldr	r3, [pc, #200]	; (9da8 <hif_send+0x218>)
    9cde:	4798      	blx	r3
    9ce0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    9ce2:	d1e8      	bne.n	9cb6 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    9ce4:	9b06      	ldr	r3, [sp, #24]
    9ce6:	3308      	adds	r3, #8
    9ce8:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    9cea:	9b01      	ldr	r3, [sp, #4]
    9cec:	2b00      	cmp	r3, #0
    9cee:	d00b      	beq.n	9d08 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    9cf0:	9806      	ldr	r0, [sp, #24]
    9cf2:	9a00      	ldr	r2, [sp, #0]
    9cf4:	0019      	movs	r1, r3
    9cf6:	4b2c      	ldr	r3, [pc, #176]	; (9da8 <hif_send+0x218>)
    9cf8:	4798      	blx	r3
    9cfa:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    9cfc:	d1db      	bne.n	9cb6 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    9cfe:	9b06      	ldr	r3, [sp, #24]
    9d00:	9a00      	ldr	r2, [sp, #0]
    9d02:	4694      	mov	ip, r2
    9d04:	4463      	add	r3, ip
    9d06:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    9d08:	2f00      	cmp	r7, #0
    9d0a:	d00e      	beq.n	9d2a <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    9d0c:	9b06      	ldr	r3, [sp, #24]
    9d0e:	9a00      	ldr	r2, [sp, #0]
    9d10:	1aad      	subs	r5, r5, r2
    9d12:	18ed      	adds	r5, r5, r3
    9d14:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    9d16:	9806      	ldr	r0, [sp, #24]
    9d18:	0032      	movs	r2, r6
    9d1a:	0039      	movs	r1, r7
    9d1c:	4b22      	ldr	r3, [pc, #136]	; (9da8 <hif_send+0x218>)
    9d1e:	4798      	blx	r3
    9d20:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    9d22:	d1c8      	bne.n	9cb6 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    9d24:	9b06      	ldr	r3, [sp, #24]
    9d26:	18f3      	adds	r3, r6, r3
    9d28:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    9d2a:	9b05      	ldr	r3, [sp, #20]
    9d2c:	009b      	lsls	r3, r3, #2
    9d2e:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    9d30:	9b04      	ldr	r3, [sp, #16]
    9d32:	2202      	movs	r2, #2
    9d34:	4313      	orrs	r3, r2
    9d36:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    9d38:	9904      	ldr	r1, [sp, #16]
    9d3a:	481c      	ldr	r0, [pc, #112]	; (9dac <hif_send+0x21c>)
    9d3c:	4b0e      	ldr	r3, [pc, #56]	; (9d78 <hif_send+0x1e8>)
    9d3e:	4798      	blx	r3
    9d40:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    9d42:	d1b8      	bne.n	9cb6 <hif_send+0x126>
 	ret = hif_chip_sleep();
    9d44:	4b1a      	ldr	r3, [pc, #104]	; (9db0 <hif_send+0x220>)
    9d46:	4798      	blx	r3
    9d48:	0004      	movs	r4, r0
	return ret;
    9d4a:	e7b6      	b.n	9cba <hif_send+0x12a>
			ret = hif_chip_sleep();
    9d4c:	4b18      	ldr	r3, [pc, #96]	; (9db0 <hif_send+0x220>)
    9d4e:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    9d50:	2403      	movs	r4, #3
    9d52:	4264      	negs	r4, r4
			goto ERR2;
    9d54:	e7b1      	b.n	9cba <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    9d56:	22cb      	movs	r2, #203	; 0xcb
    9d58:	0052      	lsls	r2, r2, #1
    9d5a:	4916      	ldr	r1, [pc, #88]	; (9db4 <hif_send+0x224>)
    9d5c:	4816      	ldr	r0, [pc, #88]	; (9db8 <hif_send+0x228>)
    9d5e:	4b0c      	ldr	r3, [pc, #48]	; (9d90 <hif_send+0x200>)
    9d60:	4798      	blx	r3
    9d62:	4816      	ldr	r0, [pc, #88]	; (9dbc <hif_send+0x22c>)
    9d64:	4b0c      	ldr	r3, [pc, #48]	; (9d98 <hif_send+0x208>)
    9d66:	4798      	blx	r3
    9d68:	200d      	movs	r0, #13
    9d6a:	4b0c      	ldr	r3, [pc, #48]	; (9d9c <hif_send+0x20c>)
    9d6c:	4798      	blx	r3
		goto ERR2;
    9d6e:	e7a4      	b.n	9cba <hif_send+0x12a>
    9d70:	00009add 	.word	0x00009add
    9d74:	0000108c 	.word	0x0000108c
    9d78:	0000aeed 	.word	0x0000aeed
    9d7c:	00001078 	.word	0x00001078
    9d80:	000003e7 	.word	0x000003e7
    9d84:	0000aee1 	.word	0x0000aee1
    9d88:	00009651 	.word	0x00009651
    9d8c:	00012cfc 	.word	0x00012cfc
    9d90:	00010319 	.word	0x00010319
    9d94:	00012d08 	.word	0x00012d08
    9d98:	00010435 	.word	0x00010435
    9d9c:	0001034d 	.word	0x0001034d
    9da0:	00150400 	.word	0x00150400
    9da4:	00009b19 	.word	0x00009b19
    9da8:	0000af61 	.word	0x0000af61
    9dac:	0000106c 	.word	0x0000106c
    9db0:	00009b35 	.word	0x00009b35
    9db4:	00012a14 	.word	0x00012a14
    9db8:	000129cc 	.word	0x000129cc
    9dbc:	00012d18 	.word	0x00012d18

00009dc0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    9dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dc2:	46ce      	mov	lr, r9
    9dc4:	4647      	mov	r7, r8
    9dc6:	b580      	push	{r7, lr}
    9dc8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    9dca:	4bcf      	ldr	r3, [pc, #828]	; (a108 <hif_handle_isr+0x348>)
    9dcc:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    9dce:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    9dd0:	e080      	b.n	9ed4 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    9dd2:	4bcd      	ldr	r3, [pc, #820]	; (a108 <hif_handle_isr+0x348>)
    9dd4:	9a05      	ldr	r2, [sp, #20]
    9dd6:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    9dd8:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    9dda:	af04      	add	r7, sp, #16
    9ddc:	2204      	movs	r2, #4
    9dde:	0039      	movs	r1, r7
    9de0:	9805      	ldr	r0, [sp, #20]
    9de2:	4bca      	ldr	r3, [pc, #808]	; (a10c <hif_handle_isr+0x34c>)
    9de4:	4798      	blx	r3
    9de6:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    9de8:	887b      	ldrh	r3, [r7, #2]
    9dea:	b29b      	uxth	r3, r3
    9dec:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    9dee:	2800      	cmp	r0, #0
    9df0:	d133      	bne.n	9e5a <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    9df2:	ab04      	add	r3, sp, #16
    9df4:	885b      	ldrh	r3, [r3, #2]
    9df6:	b29b      	uxth	r3, r3
    9df8:	429d      	cmp	r5, r3
    9dfa:	d004      	beq.n	9e06 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    9dfc:	ab04      	add	r3, sp, #16
    9dfe:	885b      	ldrh	r3, [r3, #2]
    9e00:	1aeb      	subs	r3, r5, r3
    9e02:	2b04      	cmp	r3, #4
    9e04:	dc39      	bgt.n	9e7a <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    9e06:	ab04      	add	r3, sp, #16
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	2b01      	cmp	r3, #1
    9e0c:	d04e      	beq.n	9eac <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    9e0e:	ab04      	add	r3, sp, #16
    9e10:	781b      	ldrb	r3, [r3, #0]
    9e12:	2b02      	cmp	r3, #2
    9e14:	d078      	beq.n	9f08 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    9e16:	ab04      	add	r3, sp, #16
    9e18:	781b      	ldrb	r3, [r3, #0]
    9e1a:	2b04      	cmp	r3, #4
    9e1c:	d100      	bne.n	9e20 <hif_handle_isr+0x60>
    9e1e:	e090      	b.n	9f42 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    9e20:	ab04      	add	r3, sp, #16
    9e22:	781b      	ldrb	r3, [r3, #0]
    9e24:	2b06      	cmp	r3, #6
    9e26:	d100      	bne.n	9e2a <hif_handle_isr+0x6a>
    9e28:	e0a8      	b.n	9f7c <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    9e2a:	ab04      	add	r3, sp, #16
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	2b07      	cmp	r3, #7
    9e30:	d100      	bne.n	9e34 <hif_handle_isr+0x74>
    9e32:	e0bf      	b.n	9fb4 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    9e34:	ab04      	add	r3, sp, #16
    9e36:	781b      	ldrb	r3, [r3, #0]
    9e38:	2b05      	cmp	r3, #5
    9e3a:	d100      	bne.n	9e3e <hif_handle_isr+0x7e>
    9e3c:	e0d6      	b.n	9fec <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    9e3e:	4ab4      	ldr	r2, [pc, #720]	; (a110 <hif_handle_isr+0x350>)
    9e40:	49b4      	ldr	r1, [pc, #720]	; (a114 <hif_handle_isr+0x354>)
    9e42:	48b5      	ldr	r0, [pc, #724]	; (a118 <hif_handle_isr+0x358>)
    9e44:	4bb5      	ldr	r3, [pc, #724]	; (a11c <hif_handle_isr+0x35c>)
    9e46:	4798      	blx	r3
    9e48:	48b5      	ldr	r0, [pc, #724]	; (a120 <hif_handle_isr+0x360>)
    9e4a:	4bb6      	ldr	r3, [pc, #728]	; (a124 <hif_handle_isr+0x364>)
    9e4c:	4798      	blx	r3
    9e4e:	200d      	movs	r0, #13
    9e50:	4bb5      	ldr	r3, [pc, #724]	; (a128 <hif_handle_isr+0x368>)
    9e52:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    9e54:	2406      	movs	r4, #6
    9e56:	4264      	negs	r4, r4
    9e58:	e116      	b.n	a088 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    9e5a:	22d2      	movs	r2, #210	; 0xd2
    9e5c:	32ff      	adds	r2, #255	; 0xff
    9e5e:	49ad      	ldr	r1, [pc, #692]	; (a114 <hif_handle_isr+0x354>)
    9e60:	48ad      	ldr	r0, [pc, #692]	; (a118 <hif_handle_isr+0x358>)
    9e62:	4bae      	ldr	r3, [pc, #696]	; (a11c <hif_handle_isr+0x35c>)
    9e64:	4798      	blx	r3
    9e66:	48b1      	ldr	r0, [pc, #708]	; (a12c <hif_handle_isr+0x36c>)
    9e68:	4bae      	ldr	r3, [pc, #696]	; (a124 <hif_handle_isr+0x364>)
    9e6a:	4798      	blx	r3
    9e6c:	200d      	movs	r0, #13
    9e6e:	4bae      	ldr	r3, [pc, #696]	; (a128 <hif_handle_isr+0x368>)
    9e70:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    9e72:	2001      	movs	r0, #1
    9e74:	4bae      	ldr	r3, [pc, #696]	; (a130 <hif_handle_isr+0x370>)
    9e76:	4798      	blx	r3
    9e78:	e106      	b.n	a088 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    9e7a:	22ed      	movs	r2, #237	; 0xed
    9e7c:	0052      	lsls	r2, r2, #1
    9e7e:	49a5      	ldr	r1, [pc, #660]	; (a114 <hif_handle_isr+0x354>)
    9e80:	48a5      	ldr	r0, [pc, #660]	; (a118 <hif_handle_isr+0x358>)
    9e82:	4ca6      	ldr	r4, [pc, #664]	; (a11c <hif_handle_isr+0x35c>)
    9e84:	47a0      	blx	r4
    9e86:	a904      	add	r1, sp, #16
    9e88:	884a      	ldrh	r2, [r1, #2]
    9e8a:	b292      	uxth	r2, r2
    9e8c:	780b      	ldrb	r3, [r1, #0]
    9e8e:	b2db      	uxtb	r3, r3
    9e90:	7849      	ldrb	r1, [r1, #1]
    9e92:	9100      	str	r1, [sp, #0]
    9e94:	0029      	movs	r1, r5
    9e96:	48a7      	ldr	r0, [pc, #668]	; (a134 <hif_handle_isr+0x374>)
    9e98:	47a0      	blx	r4
    9e9a:	200d      	movs	r0, #13
    9e9c:	4ba2      	ldr	r3, [pc, #648]	; (a128 <hif_handle_isr+0x368>)
    9e9e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    9ea0:	2001      	movs	r0, #1
    9ea2:	4ba3      	ldr	r3, [pc, #652]	; (a130 <hif_handle_isr+0x370>)
    9ea4:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    9ea6:	2406      	movs	r4, #6
    9ea8:	4264      	negs	r4, r4
    9eaa:	e0ed      	b.n	a088 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    9eac:	4b96      	ldr	r3, [pc, #600]	; (a108 <hif_handle_isr+0x348>)
    9eae:	68db      	ldr	r3, [r3, #12]
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d01c      	beq.n	9eee <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9eb4:	4b94      	ldr	r3, [pc, #592]	; (a108 <hif_handle_isr+0x348>)
    9eb6:	68db      	ldr	r3, [r3, #12]
    9eb8:	aa04      	add	r2, sp, #16
    9eba:	7850      	ldrb	r0, [r2, #1]
    9ebc:	b2c0      	uxtb	r0, r0
    9ebe:	8851      	ldrh	r1, [r2, #2]
    9ec0:	9a05      	ldr	r2, [sp, #20]
    9ec2:	3208      	adds	r2, #8
    9ec4:	3908      	subs	r1, #8
    9ec6:	b289      	uxth	r1, r1
    9ec8:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    9eca:	4b8f      	ldr	r3, [pc, #572]	; (a108 <hif_handle_isr+0x348>)
    9ecc:	789b      	ldrb	r3, [r3, #2]
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d000      	beq.n	9ed4 <hif_handle_isr+0x114>
    9ed2:	e09c      	b.n	a00e <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    9ed4:	4643      	mov	r3, r8
    9ed6:	78db      	ldrb	r3, [r3, #3]
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d100      	bne.n	9ede <hif_handle_isr+0x11e>
    9edc:	e158      	b.n	a190 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    9ede:	464b      	mov	r3, r9
    9ee0:	78db      	ldrb	r3, [r3, #3]
    9ee2:	3b01      	subs	r3, #1
    9ee4:	b2db      	uxtb	r3, r3
    9ee6:	464a      	mov	r2, r9
    9ee8:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    9eea:	4e93      	ldr	r6, [pc, #588]	; (a138 <hif_handle_isr+0x378>)
    9eec:	e0d7      	b.n	a09e <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    9eee:	22f3      	movs	r2, #243	; 0xf3
    9ef0:	0052      	lsls	r2, r2, #1
    9ef2:	4988      	ldr	r1, [pc, #544]	; (a114 <hif_handle_isr+0x354>)
    9ef4:	4888      	ldr	r0, [pc, #544]	; (a118 <hif_handle_isr+0x358>)
    9ef6:	4b89      	ldr	r3, [pc, #548]	; (a11c <hif_handle_isr+0x35c>)
    9ef8:	4798      	blx	r3
    9efa:	4890      	ldr	r0, [pc, #576]	; (a13c <hif_handle_isr+0x37c>)
    9efc:	4b89      	ldr	r3, [pc, #548]	; (a124 <hif_handle_isr+0x364>)
    9efe:	4798      	blx	r3
    9f00:	200d      	movs	r0, #13
    9f02:	4b89      	ldr	r3, [pc, #548]	; (a128 <hif_handle_isr+0x368>)
    9f04:	4798      	blx	r3
    9f06:	e7e0      	b.n	9eca <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    9f08:	4b7f      	ldr	r3, [pc, #508]	; (a108 <hif_handle_isr+0x348>)
    9f0a:	691b      	ldr	r3, [r3, #16]
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d00b      	beq.n	9f28 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9f10:	4b7d      	ldr	r3, [pc, #500]	; (a108 <hif_handle_isr+0x348>)
    9f12:	691b      	ldr	r3, [r3, #16]
    9f14:	aa04      	add	r2, sp, #16
    9f16:	7850      	ldrb	r0, [r2, #1]
    9f18:	b2c0      	uxtb	r0, r0
    9f1a:	8851      	ldrh	r1, [r2, #2]
    9f1c:	9a05      	ldr	r2, [sp, #20]
    9f1e:	3208      	adds	r2, #8
    9f20:	3908      	subs	r1, #8
    9f22:	b289      	uxth	r1, r1
    9f24:	4798      	blx	r3
    9f26:	e7d0      	b.n	9eca <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    9f28:	22f7      	movs	r2, #247	; 0xf7
    9f2a:	0052      	lsls	r2, r2, #1
    9f2c:	4979      	ldr	r1, [pc, #484]	; (a114 <hif_handle_isr+0x354>)
    9f2e:	487a      	ldr	r0, [pc, #488]	; (a118 <hif_handle_isr+0x358>)
    9f30:	4b7a      	ldr	r3, [pc, #488]	; (a11c <hif_handle_isr+0x35c>)
    9f32:	4798      	blx	r3
    9f34:	4882      	ldr	r0, [pc, #520]	; (a140 <hif_handle_isr+0x380>)
    9f36:	4b7b      	ldr	r3, [pc, #492]	; (a124 <hif_handle_isr+0x364>)
    9f38:	4798      	blx	r3
    9f3a:	200d      	movs	r0, #13
    9f3c:	4b7a      	ldr	r3, [pc, #488]	; (a128 <hif_handle_isr+0x368>)
    9f3e:	4798      	blx	r3
    9f40:	e7c3      	b.n	9eca <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    9f42:	4b71      	ldr	r3, [pc, #452]	; (a108 <hif_handle_isr+0x348>)
    9f44:	695b      	ldr	r3, [r3, #20]
    9f46:	2b00      	cmp	r3, #0
    9f48:	d00b      	beq.n	9f62 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9f4a:	4b6f      	ldr	r3, [pc, #444]	; (a108 <hif_handle_isr+0x348>)
    9f4c:	695b      	ldr	r3, [r3, #20]
    9f4e:	aa04      	add	r2, sp, #16
    9f50:	7850      	ldrb	r0, [r2, #1]
    9f52:	b2c0      	uxtb	r0, r0
    9f54:	8851      	ldrh	r1, [r2, #2]
    9f56:	9a05      	ldr	r2, [sp, #20]
    9f58:	3208      	adds	r2, #8
    9f5a:	3908      	subs	r1, #8
    9f5c:	b289      	uxth	r1, r1
    9f5e:	4798      	blx	r3
    9f60:	e7b3      	b.n	9eca <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    9f62:	22fb      	movs	r2, #251	; 0xfb
    9f64:	0052      	lsls	r2, r2, #1
    9f66:	496b      	ldr	r1, [pc, #428]	; (a114 <hif_handle_isr+0x354>)
    9f68:	486b      	ldr	r0, [pc, #428]	; (a118 <hif_handle_isr+0x358>)
    9f6a:	4b6c      	ldr	r3, [pc, #432]	; (a11c <hif_handle_isr+0x35c>)
    9f6c:	4798      	blx	r3
    9f6e:	4875      	ldr	r0, [pc, #468]	; (a144 <hif_handle_isr+0x384>)
    9f70:	4b6c      	ldr	r3, [pc, #432]	; (a124 <hif_handle_isr+0x364>)
    9f72:	4798      	blx	r3
    9f74:	200d      	movs	r0, #13
    9f76:	4b6c      	ldr	r3, [pc, #432]	; (a128 <hif_handle_isr+0x368>)
    9f78:	4798      	blx	r3
    9f7a:	e7a6      	b.n	9eca <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    9f7c:	4b62      	ldr	r3, [pc, #392]	; (a108 <hif_handle_isr+0x348>)
    9f7e:	6a1b      	ldr	r3, [r3, #32]
    9f80:	2b00      	cmp	r3, #0
    9f82:	d00b      	beq.n	9f9c <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9f84:	4b60      	ldr	r3, [pc, #384]	; (a108 <hif_handle_isr+0x348>)
    9f86:	6a1b      	ldr	r3, [r3, #32]
    9f88:	aa04      	add	r2, sp, #16
    9f8a:	7850      	ldrb	r0, [r2, #1]
    9f8c:	b2c0      	uxtb	r0, r0
    9f8e:	8851      	ldrh	r1, [r2, #2]
    9f90:	9a05      	ldr	r2, [sp, #20]
    9f92:	3208      	adds	r2, #8
    9f94:	3908      	subs	r1, #8
    9f96:	b289      	uxth	r1, r1
    9f98:	4798      	blx	r3
    9f9a:	e796      	b.n	9eca <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    9f9c:	4a6a      	ldr	r2, [pc, #424]	; (a148 <hif_handle_isr+0x388>)
    9f9e:	495d      	ldr	r1, [pc, #372]	; (a114 <hif_handle_isr+0x354>)
    9fa0:	485d      	ldr	r0, [pc, #372]	; (a118 <hif_handle_isr+0x358>)
    9fa2:	4b5e      	ldr	r3, [pc, #376]	; (a11c <hif_handle_isr+0x35c>)
    9fa4:	4798      	blx	r3
    9fa6:	4869      	ldr	r0, [pc, #420]	; (a14c <hif_handle_isr+0x38c>)
    9fa8:	4b5e      	ldr	r3, [pc, #376]	; (a124 <hif_handle_isr+0x364>)
    9faa:	4798      	blx	r3
    9fac:	200d      	movs	r0, #13
    9fae:	4b5e      	ldr	r3, [pc, #376]	; (a128 <hif_handle_isr+0x368>)
    9fb0:	4798      	blx	r3
    9fb2:	e78a      	b.n	9eca <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    9fb4:	4b54      	ldr	r3, [pc, #336]	; (a108 <hif_handle_isr+0x348>)
    9fb6:	699b      	ldr	r3, [r3, #24]
    9fb8:	2b00      	cmp	r3, #0
    9fba:	d00b      	beq.n	9fd4 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9fbc:	4b52      	ldr	r3, [pc, #328]	; (a108 <hif_handle_isr+0x348>)
    9fbe:	699b      	ldr	r3, [r3, #24]
    9fc0:	aa04      	add	r2, sp, #16
    9fc2:	7850      	ldrb	r0, [r2, #1]
    9fc4:	b2c0      	uxtb	r0, r0
    9fc6:	8851      	ldrh	r1, [r2, #2]
    9fc8:	9a05      	ldr	r2, [sp, #20]
    9fca:	3208      	adds	r2, #8
    9fcc:	3908      	subs	r1, #8
    9fce:	b289      	uxth	r1, r1
    9fd0:	4798      	blx	r3
    9fd2:	e77a      	b.n	9eca <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    9fd4:	4a5e      	ldr	r2, [pc, #376]	; (a150 <hif_handle_isr+0x390>)
    9fd6:	494f      	ldr	r1, [pc, #316]	; (a114 <hif_handle_isr+0x354>)
    9fd8:	484f      	ldr	r0, [pc, #316]	; (a118 <hif_handle_isr+0x358>)
    9fda:	4b50      	ldr	r3, [pc, #320]	; (a11c <hif_handle_isr+0x35c>)
    9fdc:	4798      	blx	r3
    9fde:	485d      	ldr	r0, [pc, #372]	; (a154 <hif_handle_isr+0x394>)
    9fe0:	4b50      	ldr	r3, [pc, #320]	; (a124 <hif_handle_isr+0x364>)
    9fe2:	4798      	blx	r3
    9fe4:	200d      	movs	r0, #13
    9fe6:	4b50      	ldr	r3, [pc, #320]	; (a128 <hif_handle_isr+0x368>)
    9fe8:	4798      	blx	r3
    9fea:	e76e      	b.n	9eca <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    9fec:	4b46      	ldr	r3, [pc, #280]	; (a108 <hif_handle_isr+0x348>)
    9fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ff0:	2b00      	cmp	r3, #0
    9ff2:	d100      	bne.n	9ff6 <hif_handle_isr+0x236>
    9ff4:	e769      	b.n	9eca <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9ff6:	4b44      	ldr	r3, [pc, #272]	; (a108 <hif_handle_isr+0x348>)
    9ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ffa:	aa04      	add	r2, sp, #16
    9ffc:	7850      	ldrb	r0, [r2, #1]
    9ffe:	b2c0      	uxtb	r0, r0
    a000:	8851      	ldrh	r1, [r2, #2]
    a002:	9a05      	ldr	r2, [sp, #20]
    a004:	3208      	adds	r2, #8
    a006:	3908      	subs	r1, #8
    a008:	b289      	uxth	r1, r1
    a00a:	4798      	blx	r3
    a00c:	e75d      	b.n	9eca <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    a00e:	4a52      	ldr	r2, [pc, #328]	; (a158 <hif_handle_isr+0x398>)
    a010:	4940      	ldr	r1, [pc, #256]	; (a114 <hif_handle_isr+0x354>)
    a012:	4841      	ldr	r0, [pc, #260]	; (a118 <hif_handle_isr+0x358>)
    a014:	4c41      	ldr	r4, [pc, #260]	; (a11c <hif_handle_isr+0x35c>)
    a016:	47a0      	blx	r4
    a018:	ab04      	add	r3, sp, #16
    a01a:	7819      	ldrb	r1, [r3, #0]
    a01c:	b2c9      	uxtb	r1, r1
    a01e:	785a      	ldrb	r2, [r3, #1]
    a020:	b2d2      	uxtb	r2, r2
    a022:	484e      	ldr	r0, [pc, #312]	; (a15c <hif_handle_isr+0x39c>)
    a024:	47a0      	blx	r4
    a026:	200d      	movs	r0, #13
    a028:	4b3f      	ldr	r3, [pc, #252]	; (a128 <hif_handle_isr+0x368>)
    a02a:	4798      	blx	r3
					ret = hif_set_rx_done();
    a02c:	4b4c      	ldr	r3, [pc, #304]	; (a160 <hif_handle_isr+0x3a0>)
    a02e:	4798      	blx	r3
    a030:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    a032:	d129      	bne.n	a088 <hif_handle_isr+0x2c8>
    a034:	e74e      	b.n	9ed4 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    a036:	2287      	movs	r2, #135	; 0x87
    a038:	0092      	lsls	r2, r2, #2
    a03a:	4936      	ldr	r1, [pc, #216]	; (a114 <hif_handle_isr+0x354>)
    a03c:	4836      	ldr	r0, [pc, #216]	; (a118 <hif_handle_isr+0x358>)
    a03e:	4b37      	ldr	r3, [pc, #220]	; (a11c <hif_handle_isr+0x35c>)
    a040:	4798      	blx	r3
    a042:	4848      	ldr	r0, [pc, #288]	; (a164 <hif_handle_isr+0x3a4>)
    a044:	4b37      	ldr	r3, [pc, #220]	; (a124 <hif_handle_isr+0x364>)
    a046:	4798      	blx	r3
    a048:	200d      	movs	r0, #13
    a04a:	4b37      	ldr	r3, [pc, #220]	; (a128 <hif_handle_isr+0x368>)
    a04c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    a04e:	2402      	movs	r4, #2
    a050:	4264      	negs	r4, r4
    a052:	e019      	b.n	a088 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    a054:	2289      	movs	r2, #137	; 0x89
    a056:	0092      	lsls	r2, r2, #2
    a058:	492e      	ldr	r1, [pc, #184]	; (a114 <hif_handle_isr+0x354>)
    a05a:	482f      	ldr	r0, [pc, #188]	; (a118 <hif_handle_isr+0x358>)
    a05c:	4c2f      	ldr	r4, [pc, #188]	; (a11c <hif_handle_isr+0x35c>)
    a05e:	47a0      	blx	r4
    a060:	9903      	ldr	r1, [sp, #12]
    a062:	4841      	ldr	r0, [pc, #260]	; (a168 <hif_handle_isr+0x3a8>)
    a064:	47a0      	blx	r4
    a066:	200d      	movs	r0, #13
    a068:	4b2f      	ldr	r3, [pc, #188]	; (a128 <hif_handle_isr+0x368>)
    a06a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a06c:	240c      	movs	r4, #12
    a06e:	4264      	negs	r4, r4
    a070:	e00a      	b.n	a088 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    a072:	4a3e      	ldr	r2, [pc, #248]	; (a16c <hif_handle_isr+0x3ac>)
    a074:	4927      	ldr	r1, [pc, #156]	; (a114 <hif_handle_isr+0x354>)
    a076:	4828      	ldr	r0, [pc, #160]	; (a118 <hif_handle_isr+0x358>)
    a078:	4b28      	ldr	r3, [pc, #160]	; (a11c <hif_handle_isr+0x35c>)
    a07a:	4798      	blx	r3
    a07c:	483c      	ldr	r0, [pc, #240]	; (a170 <hif_handle_isr+0x3b0>)
    a07e:	4b29      	ldr	r3, [pc, #164]	; (a124 <hif_handle_isr+0x364>)
    a080:	4798      	blx	r3
    a082:	200d      	movs	r0, #13
    a084:	4b28      	ldr	r3, [pc, #160]	; (a128 <hif_handle_isr+0x368>)
    a086:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    a088:	4a3a      	ldr	r2, [pc, #232]	; (a174 <hif_handle_isr+0x3b4>)
    a08a:	493b      	ldr	r1, [pc, #236]	; (a178 <hif_handle_isr+0x3b8>)
    a08c:	4822      	ldr	r0, [pc, #136]	; (a118 <hif_handle_isr+0x358>)
    a08e:	4f23      	ldr	r7, [pc, #140]	; (a11c <hif_handle_isr+0x35c>)
    a090:	47b8      	blx	r7
    a092:	0021      	movs	r1, r4
    a094:	4839      	ldr	r0, [pc, #228]	; (a17c <hif_handle_isr+0x3bc>)
    a096:	47b8      	blx	r7
    a098:	200d      	movs	r0, #13
    a09a:	4b23      	ldr	r3, [pc, #140]	; (a128 <hif_handle_isr+0x368>)
    a09c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    a09e:	a903      	add	r1, sp, #12
    a0a0:	4837      	ldr	r0, [pc, #220]	; (a180 <hif_handle_isr+0x3c0>)
    a0a2:	47b0      	blx	r6
    a0a4:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    a0a6:	d1e4      	bne.n	a072 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    a0a8:	9b03      	ldr	r3, [sp, #12]
    a0aa:	07db      	lsls	r3, r3, #31
    a0ac:	d5d2      	bpl.n	a054 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    a0ae:	2000      	movs	r0, #0
    a0b0:	4b1f      	ldr	r3, [pc, #124]	; (a130 <hif_handle_isr+0x370>)
    a0b2:	4798      	blx	r3
			reg &= ~NBIT0;
    a0b4:	2301      	movs	r3, #1
    a0b6:	9903      	ldr	r1, [sp, #12]
    a0b8:	4399      	bics	r1, r3
    a0ba:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    a0bc:	4830      	ldr	r0, [pc, #192]	; (a180 <hif_handle_isr+0x3c0>)
    a0be:	4b31      	ldr	r3, [pc, #196]	; (a184 <hif_handle_isr+0x3c4>)
    a0c0:	4798      	blx	r3
    a0c2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    a0c4:	d1e0      	bne.n	a088 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    a0c6:	2201      	movs	r2, #1
    a0c8:	4b0f      	ldr	r3, [pc, #60]	; (a108 <hif_handle_isr+0x348>)
    a0ca:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    a0cc:	9b03      	ldr	r3, [sp, #12]
    a0ce:	049d      	lsls	r5, r3, #18
    a0d0:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    a0d2:	d0b0      	beq.n	a036 <hif_handle_isr+0x276>
				uint32 address = 0;
    a0d4:	2300      	movs	r3, #0
    a0d6:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    a0d8:	a905      	add	r1, sp, #20
    a0da:	482b      	ldr	r0, [pc, #172]	; (a188 <hif_handle_isr+0x3c8>)
    a0dc:	4b16      	ldr	r3, [pc, #88]	; (a138 <hif_handle_isr+0x378>)
    a0de:	4798      	blx	r3
    a0e0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    a0e2:	d100      	bne.n	a0e6 <hif_handle_isr+0x326>
    a0e4:	e675      	b.n	9dd2 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    a0e6:	22c8      	movs	r2, #200	; 0xc8
    a0e8:	32ff      	adds	r2, #255	; 0xff
    a0ea:	490a      	ldr	r1, [pc, #40]	; (a114 <hif_handle_isr+0x354>)
    a0ec:	480a      	ldr	r0, [pc, #40]	; (a118 <hif_handle_isr+0x358>)
    a0ee:	4b0b      	ldr	r3, [pc, #44]	; (a11c <hif_handle_isr+0x35c>)
    a0f0:	4798      	blx	r3
    a0f2:	4826      	ldr	r0, [pc, #152]	; (a18c <hif_handle_isr+0x3cc>)
    a0f4:	4b0b      	ldr	r3, [pc, #44]	; (a124 <hif_handle_isr+0x364>)
    a0f6:	4798      	blx	r3
    a0f8:	200d      	movs	r0, #13
    a0fa:	4b0b      	ldr	r3, [pc, #44]	; (a128 <hif_handle_isr+0x368>)
    a0fc:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    a0fe:	2001      	movs	r0, #1
    a100:	4b0b      	ldr	r3, [pc, #44]	; (a130 <hif_handle_isr+0x370>)
    a102:	4798      	blx	r3
    a104:	e7c0      	b.n	a088 <hif_handle_isr+0x2c8>
    a106:	46c0      	nop			; (mov r8, r8)
    a108:	20000904 	.word	0x20000904
    a10c:	0000aef9 	.word	0x0000aef9
    a110:	0000020f 	.word	0x0000020f
    a114:	00012a20 	.word	0x00012a20
    a118:	000129cc 	.word	0x000129cc
    a11c:	00010319 	.word	0x00010319
    a120:	00012b7c 	.word	0x00012b7c
    a124:	00010435 	.word	0x00010435
    a128:	0001034d 	.word	0x0001034d
    a12c:	00012a78 	.word	0x00012a78
    a130:	00009765 	.word	0x00009765
    a134:	00012a90 	.word	0x00012a90
    a138:	0000aee1 	.word	0x0000aee1
    a13c:	00012ad0 	.word	0x00012ad0
    a140:	00012af0 	.word	0x00012af0
    a144:	00012b14 	.word	0x00012b14
    a148:	000001ff 	.word	0x000001ff
    a14c:	00012b34 	.word	0x00012b34
    a150:	00000206 	.word	0x00000206
    a154:	00012b58 	.word	0x00012b58
    a158:	00000215 	.word	0x00000215
    a15c:	00012b94 	.word	0x00012b94
    a160:	00009a99 	.word	0x00009a99
    a164:	00012bc0 	.word	0x00012bc0
    a168:	00012bd4 	.word	0x00012bd4
    a16c:	0000022d 	.word	0x0000022d
    a170:	00012bf0 	.word	0x00012bf0
    a174:	0000024a 	.word	0x0000024a
    a178:	00012a28 	.word	0x00012a28
    a17c:	00012c14 	.word	0x00012c14
    a180:	00001070 	.word	0x00001070
    a184:	0000aeed 	.word	0x0000aeed
    a188:	00001084 	.word	0x00001084
    a18c:	00012a54 	.word	0x00012a54
			}
		}
	}

	return ret;
}
    a190:	2000      	movs	r0, #0
    a192:	b007      	add	sp, #28
    a194:	bc0c      	pop	{r2, r3}
    a196:	4690      	mov	r8, r2
    a198:	4699      	mov	r9, r3
    a19a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a19c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    a19c:	b570      	push	{r4, r5, r6, lr}
    a19e:	0014      	movs	r4, r2
    a1a0:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    a1a2:	2800      	cmp	r0, #0
    a1a4:	d003      	beq.n	a1ae <hif_receive+0x12>
    a1a6:	2900      	cmp	r1, #0
    a1a8:	d001      	beq.n	a1ae <hif_receive+0x12>
    a1aa:	2a00      	cmp	r2, #0
    a1ac:	d112      	bne.n	a1d4 <hif_receive+0x38>
	{
		if(isDone)
    a1ae:	2d00      	cmp	r5, #0
    a1b0:	d002      	beq.n	a1b8 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    a1b2:	4b27      	ldr	r3, [pc, #156]	; (a250 <hif_receive+0xb4>)
    a1b4:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    a1b6:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    a1b8:	4a26      	ldr	r2, [pc, #152]	; (a254 <hif_receive+0xb8>)
    a1ba:	4927      	ldr	r1, [pc, #156]	; (a258 <hif_receive+0xbc>)
    a1bc:	4827      	ldr	r0, [pc, #156]	; (a25c <hif_receive+0xc0>)
    a1be:	4b28      	ldr	r3, [pc, #160]	; (a260 <hif_receive+0xc4>)
    a1c0:	4798      	blx	r3
    a1c2:	4828      	ldr	r0, [pc, #160]	; (a264 <hif_receive+0xc8>)
    a1c4:	4b28      	ldr	r3, [pc, #160]	; (a268 <hif_receive+0xcc>)
    a1c6:	4798      	blx	r3
    a1c8:	200d      	movs	r0, #13
    a1ca:	4b28      	ldr	r3, [pc, #160]	; (a26c <hif_receive+0xd0>)
    a1cc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a1ce:	200c      	movs	r0, #12
    a1d0:	4240      	negs	r0, r0
    a1d2:	e7f0      	b.n	a1b6 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    a1d4:	4b26      	ldr	r3, [pc, #152]	; (a270 <hif_receive+0xd4>)
    a1d6:	689b      	ldr	r3, [r3, #8]
    a1d8:	429a      	cmp	r2, r3
    a1da:	d81a      	bhi.n	a212 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    a1dc:	4b24      	ldr	r3, [pc, #144]	; (a270 <hif_receive+0xd4>)
    a1de:	685b      	ldr	r3, [r3, #4]
    a1e0:	4298      	cmp	r0, r3
    a1e2:	d326      	bcc.n	a232 <hif_receive+0x96>
    a1e4:	1886      	adds	r6, r0, r2
    a1e6:	4a22      	ldr	r2, [pc, #136]	; (a270 <hif_receive+0xd4>)
    a1e8:	6853      	ldr	r3, [r2, #4]
    a1ea:	6892      	ldr	r2, [r2, #8]
    a1ec:	189b      	adds	r3, r3, r2
    a1ee:	429e      	cmp	r6, r3
    a1f0:	d81f      	bhi.n	a232 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    a1f2:	0022      	movs	r2, r4
    a1f4:	4b1f      	ldr	r3, [pc, #124]	; (a274 <hif_receive+0xd8>)
    a1f6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a1f8:	2800      	cmp	r0, #0
    a1fa:	d1dc      	bne.n	a1b6 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    a1fc:	4a1c      	ldr	r2, [pc, #112]	; (a270 <hif_receive+0xd4>)
    a1fe:	6853      	ldr	r3, [r2, #4]
    a200:	6892      	ldr	r2, [r2, #8]
    a202:	189b      	adds	r3, r3, r2
    a204:	429e      	cmp	r6, r3
    a206:	d001      	beq.n	a20c <hif_receive+0x70>
    a208:	2d00      	cmp	r5, #0
    a20a:	d0d4      	beq.n	a1b6 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    a20c:	4b10      	ldr	r3, [pc, #64]	; (a250 <hif_receive+0xb4>)
    a20e:	4798      	blx	r3
    a210:	e7d1      	b.n	a1b6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    a212:	4a19      	ldr	r2, [pc, #100]	; (a278 <hif_receive+0xdc>)
    a214:	4910      	ldr	r1, [pc, #64]	; (a258 <hif_receive+0xbc>)
    a216:	4811      	ldr	r0, [pc, #68]	; (a25c <hif_receive+0xc0>)
    a218:	4d11      	ldr	r5, [pc, #68]	; (a260 <hif_receive+0xc4>)
    a21a:	47a8      	blx	r5
    a21c:	4b14      	ldr	r3, [pc, #80]	; (a270 <hif_receive+0xd4>)
    a21e:	689a      	ldr	r2, [r3, #8]
    a220:	0021      	movs	r1, r4
    a222:	4816      	ldr	r0, [pc, #88]	; (a27c <hif_receive+0xe0>)
    a224:	47a8      	blx	r5
    a226:	200d      	movs	r0, #13
    a228:	4b10      	ldr	r3, [pc, #64]	; (a26c <hif_receive+0xd0>)
    a22a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a22c:	200c      	movs	r0, #12
    a22e:	4240      	negs	r0, r0
		goto ERR1;
    a230:	e7c1      	b.n	a1b6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    a232:	4a13      	ldr	r2, [pc, #76]	; (a280 <hif_receive+0xe4>)
    a234:	4908      	ldr	r1, [pc, #32]	; (a258 <hif_receive+0xbc>)
    a236:	4809      	ldr	r0, [pc, #36]	; (a25c <hif_receive+0xc0>)
    a238:	4b09      	ldr	r3, [pc, #36]	; (a260 <hif_receive+0xc4>)
    a23a:	4798      	blx	r3
    a23c:	4811      	ldr	r0, [pc, #68]	; (a284 <hif_receive+0xe8>)
    a23e:	4b0a      	ldr	r3, [pc, #40]	; (a268 <hif_receive+0xcc>)
    a240:	4798      	blx	r3
    a242:	200d      	movs	r0, #13
    a244:	4b09      	ldr	r3, [pc, #36]	; (a26c <hif_receive+0xd0>)
    a246:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a248:	200c      	movs	r0, #12
    a24a:	4240      	negs	r0, r0
		goto ERR1;
    a24c:	e7b3      	b.n	a1b6 <hif_receive+0x1a>
    a24e:	46c0      	nop			; (mov r8, r8)
    a250:	00009a99 	.word	0x00009a99
    a254:	0000026b 	.word	0x0000026b
    a258:	00012a38 	.word	0x00012a38
    a25c:	000129cc 	.word	0x000129cc
    a260:	00010319 	.word	0x00010319
    a264:	00012c44 	.word	0x00012c44
    a268:	00010435 	.word	0x00010435
    a26c:	0001034d 	.word	0x0001034d
    a270:	20000904 	.word	0x20000904
    a274:	0000aef9 	.word	0x0000aef9
    a278:	00000273 	.word	0x00000273
    a27c:	00012c64 	.word	0x00012c64
    a280:	00000279 	.word	0x00000279
    a284:	00012cac 	.word	0x00012cac

0000a288 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    a288:	b570      	push	{r4, r5, r6, lr}
    a28a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    a28c:	2807      	cmp	r0, #7
    a28e:	d81f      	bhi.n	a2d0 <hif_register_cb+0x48>
    a290:	0083      	lsls	r3, r0, #2
    a292:	4a16      	ldr	r2, [pc, #88]	; (a2ec <hif_register_cb+0x64>)
    a294:	58d3      	ldr	r3, [r2, r3]
    a296:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    a298:	4b15      	ldr	r3, [pc, #84]	; (a2f0 <hif_register_cb+0x68>)
    a29a:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    a29c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    a29e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    a2a0:	4b13      	ldr	r3, [pc, #76]	; (a2f0 <hif_register_cb+0x68>)
    a2a2:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    a2a4:	2000      	movs	r0, #0
			break;
    a2a6:	e7fa      	b.n	a29e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    a2a8:	4b11      	ldr	r3, [pc, #68]	; (a2f0 <hif_register_cb+0x68>)
    a2aa:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    a2ac:	2000      	movs	r0, #0
			break;
    a2ae:	e7f6      	b.n	a29e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    a2b0:	4b0f      	ldr	r3, [pc, #60]	; (a2f0 <hif_register_cb+0x68>)
    a2b2:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    a2b4:	2000      	movs	r0, #0
			break;
    a2b6:	e7f2      	b.n	a29e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    a2b8:	4b0d      	ldr	r3, [pc, #52]	; (a2f0 <hif_register_cb+0x68>)
    a2ba:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    a2bc:	2000      	movs	r0, #0
			break;
    a2be:	e7ee      	b.n	a29e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    a2c0:	4b0b      	ldr	r3, [pc, #44]	; (a2f0 <hif_register_cb+0x68>)
    a2c2:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    a2c4:	2000      	movs	r0, #0
			break;
    a2c6:	e7ea      	b.n	a29e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    a2c8:	4b09      	ldr	r3, [pc, #36]	; (a2f0 <hif_register_cb+0x68>)
    a2ca:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    a2cc:	2000      	movs	r0, #0
			break;
    a2ce:	e7e6      	b.n	a29e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    a2d0:	4a08      	ldr	r2, [pc, #32]	; (a2f4 <hif_register_cb+0x6c>)
    a2d2:	4909      	ldr	r1, [pc, #36]	; (a2f8 <hif_register_cb+0x70>)
    a2d4:	4809      	ldr	r0, [pc, #36]	; (a2fc <hif_register_cb+0x74>)
    a2d6:	4d0a      	ldr	r5, [pc, #40]	; (a300 <hif_register_cb+0x78>)
    a2d8:	47a8      	blx	r5
    a2da:	0021      	movs	r1, r4
    a2dc:	4809      	ldr	r0, [pc, #36]	; (a304 <hif_register_cb+0x7c>)
    a2de:	47a8      	blx	r5
    a2e0:	200d      	movs	r0, #13
    a2e2:	4b09      	ldr	r3, [pc, #36]	; (a308 <hif_register_cb+0x80>)
    a2e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a2e6:	200c      	movs	r0, #12
    a2e8:	4240      	negs	r0, r0
			break;
    a2ea:	e7d8      	b.n	a29e <hif_register_cb+0x16>
    a2ec:	000129f4 	.word	0x000129f4
    a2f0:	20000904 	.word	0x20000904
    a2f4:	000002b1 	.word	0x000002b1
    a2f8:	00012a44 	.word	0x00012a44
    a2fc:	000129cc 	.word	0x000129cc
    a300:	00010319 	.word	0x00010319
    a304:	00012cf0 	.word	0x00012cf0
    a308:	0001034d 	.word	0x0001034d

0000a30c <hif_init>:
{
    a30c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    a30e:	2228      	movs	r2, #40	; 0x28
    a310:	2100      	movs	r1, #0
    a312:	4806      	ldr	r0, [pc, #24]	; (a32c <hif_init+0x20>)
    a314:	4b06      	ldr	r3, [pc, #24]	; (a330 <hif_init+0x24>)
    a316:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    a318:	4806      	ldr	r0, [pc, #24]	; (a334 <hif_init+0x28>)
    a31a:	4b07      	ldr	r3, [pc, #28]	; (a338 <hif_init+0x2c>)
    a31c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    a31e:	4907      	ldr	r1, [pc, #28]	; (a33c <hif_init+0x30>)
    a320:	2003      	movs	r0, #3
    a322:	4b07      	ldr	r3, [pc, #28]	; (a340 <hif_init+0x34>)
    a324:	4798      	blx	r3
}
    a326:	2000      	movs	r0, #0
    a328:	bd10      	pop	{r4, pc}
    a32a:	46c0      	nop			; (mov r8, r8)
    a32c:	20000904 	.word	0x20000904
    a330:	00009a59 	.word	0x00009a59
    a334:	00009a85 	.word	0x00009a85
    a338:	0000970d 	.word	0x0000970d
    a33c:	00009a95 	.word	0x00009a95
    a340:	0000a289 	.word	0x0000a289

0000a344 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    a344:	b530      	push	{r4, r5, lr}
    a346:	b09f      	sub	sp, #124	; 0x7c
    a348:	0004      	movs	r4, r0
    a34a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    a34c:	282c      	cmp	r0, #44	; 0x2c
    a34e:	d02f      	beq.n	a3b0 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    a350:	281b      	cmp	r0, #27
    a352:	d03d      	beq.n	a3d0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    a354:	2806      	cmp	r0, #6
    a356:	d04b      	beq.n	a3f0 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    a358:	280e      	cmp	r0, #14
    a35a:	d027      	beq.n	a3ac <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    a35c:	2832      	cmp	r0, #50	; 0x32
    a35e:	d057      	beq.n	a410 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    a360:	282f      	cmp	r0, #47	; 0x2f
    a362:	d065      	beq.n	a430 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    a364:	2834      	cmp	r0, #52	; 0x34
    a366:	d100      	bne.n	a36a <m2m_wifi_cb+0x26>
    a368:	e077      	b.n	a45a <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    a36a:	2811      	cmp	r0, #17
    a36c:	d100      	bne.n	a370 <m2m_wifi_cb+0x2c>
    a36e:	e096      	b.n	a49e <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    a370:	2813      	cmp	r0, #19
    a372:	d100      	bne.n	a376 <m2m_wifi_cb+0x32>
    a374:	e0ac      	b.n	a4d0 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    a376:	2804      	cmp	r0, #4
    a378:	d100      	bne.n	a37c <m2m_wifi_cb+0x38>
    a37a:	e0bb      	b.n	a4f4 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    a37c:	2865      	cmp	r0, #101	; 0x65
    a37e:	d100      	bne.n	a382 <m2m_wifi_cb+0x3e>
    a380:	e0ca      	b.n	a518 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    a382:	2809      	cmp	r0, #9
    a384:	d100      	bne.n	a388 <m2m_wifi_cb+0x44>
    a386:	e0d9      	b.n	a53c <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    a388:	282a      	cmp	r0, #42	; 0x2a
    a38a:	d100      	bne.n	a38e <m2m_wifi_cb+0x4a>
    a38c:	e0e8      	b.n	a560 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    a38e:	2820      	cmp	r0, #32
    a390:	d100      	bne.n	a394 <m2m_wifi_cb+0x50>
    a392:	e0f7      	b.n	a584 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    a394:	2295      	movs	r2, #149	; 0x95
    a396:	0052      	lsls	r2, r2, #1
    a398:	4989      	ldr	r1, [pc, #548]	; (a5c0 <m2m_wifi_cb+0x27c>)
    a39a:	488a      	ldr	r0, [pc, #552]	; (a5c4 <m2m_wifi_cb+0x280>)
    a39c:	4d8a      	ldr	r5, [pc, #552]	; (a5c8 <m2m_wifi_cb+0x284>)
    a39e:	47a8      	blx	r5
    a3a0:	0021      	movs	r1, r4
    a3a2:	488a      	ldr	r0, [pc, #552]	; (a5cc <m2m_wifi_cb+0x288>)
    a3a4:	47a8      	blx	r5
    a3a6:	200d      	movs	r0, #13
    a3a8:	4b89      	ldr	r3, [pc, #548]	; (a5d0 <m2m_wifi_cb+0x28c>)
    a3aa:	4798      	blx	r3
	}
}
    a3ac:	b01f      	add	sp, #124	; 0x7c
    a3ae:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    a3b0:	2300      	movs	r3, #0
    a3b2:	2204      	movs	r2, #4
    a3b4:	a903      	add	r1, sp, #12
    a3b6:	0028      	movs	r0, r5
    a3b8:	4c86      	ldr	r4, [pc, #536]	; (a5d4 <m2m_wifi_cb+0x290>)
    a3ba:	47a0      	blx	r4
    a3bc:	2800      	cmp	r0, #0
    a3be:	d1f5      	bne.n	a3ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    a3c0:	4b85      	ldr	r3, [pc, #532]	; (a5d8 <m2m_wifi_cb+0x294>)
    a3c2:	681b      	ldr	r3, [r3, #0]
    a3c4:	2b00      	cmp	r3, #0
    a3c6:	d0f1      	beq.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    a3c8:	a903      	add	r1, sp, #12
    a3ca:	302c      	adds	r0, #44	; 0x2c
    a3cc:	4798      	blx	r3
    a3ce:	e7ed      	b.n	a3ac <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    a3d0:	2300      	movs	r3, #0
    a3d2:	2208      	movs	r2, #8
    a3d4:	a903      	add	r1, sp, #12
    a3d6:	0028      	movs	r0, r5
    a3d8:	4c7e      	ldr	r4, [pc, #504]	; (a5d4 <m2m_wifi_cb+0x290>)
    a3da:	47a0      	blx	r4
    a3dc:	2800      	cmp	r0, #0
    a3de:	d1e5      	bne.n	a3ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    a3e0:	4b7d      	ldr	r3, [pc, #500]	; (a5d8 <m2m_wifi_cb+0x294>)
    a3e2:	681b      	ldr	r3, [r3, #0]
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d0e1      	beq.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    a3e8:	a903      	add	r1, sp, #12
    a3ea:	301b      	adds	r0, #27
    a3ec:	4798      	blx	r3
    a3ee:	e7dd      	b.n	a3ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    a3f0:	2301      	movs	r3, #1
    a3f2:	2230      	movs	r2, #48	; 0x30
    a3f4:	a903      	add	r1, sp, #12
    a3f6:	0028      	movs	r0, r5
    a3f8:	4c76      	ldr	r4, [pc, #472]	; (a5d4 <m2m_wifi_cb+0x290>)
    a3fa:	47a0      	blx	r4
    a3fc:	2800      	cmp	r0, #0
    a3fe:	d1d5      	bne.n	a3ac <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    a400:	4b75      	ldr	r3, [pc, #468]	; (a5d8 <m2m_wifi_cb+0x294>)
    a402:	681b      	ldr	r3, [r3, #0]
    a404:	2b00      	cmp	r3, #0
    a406:	d0d1      	beq.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    a408:	a903      	add	r1, sp, #12
    a40a:	3006      	adds	r0, #6
    a40c:	4798      	blx	r3
    a40e:	e7cd      	b.n	a3ac <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    a410:	2300      	movs	r3, #0
    a412:	2214      	movs	r2, #20
    a414:	a903      	add	r1, sp, #12
    a416:	0028      	movs	r0, r5
    a418:	4c6e      	ldr	r4, [pc, #440]	; (a5d4 <m2m_wifi_cb+0x290>)
    a41a:	47a0      	blx	r4
    a41c:	2800      	cmp	r0, #0
    a41e:	d1c5      	bne.n	a3ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    a420:	4b6d      	ldr	r3, [pc, #436]	; (a5d8 <m2m_wifi_cb+0x294>)
    a422:	681b      	ldr	r3, [r3, #0]
    a424:	2b00      	cmp	r3, #0
    a426:	d0c1      	beq.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    a428:	a903      	add	r1, sp, #12
    a42a:	3032      	adds	r0, #50	; 0x32
    a42c:	4798      	blx	r3
    a42e:	e7bd      	b.n	a3ac <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    a430:	2264      	movs	r2, #100	; 0x64
    a432:	2100      	movs	r1, #0
    a434:	a803      	add	r0, sp, #12
    a436:	4b69      	ldr	r3, [pc, #420]	; (a5dc <m2m_wifi_cb+0x298>)
    a438:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    a43a:	2300      	movs	r3, #0
    a43c:	2264      	movs	r2, #100	; 0x64
    a43e:	a903      	add	r1, sp, #12
    a440:	0028      	movs	r0, r5
    a442:	4c64      	ldr	r4, [pc, #400]	; (a5d4 <m2m_wifi_cb+0x290>)
    a444:	47a0      	blx	r4
    a446:	2800      	cmp	r0, #0
    a448:	d1b0      	bne.n	a3ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    a44a:	4b63      	ldr	r3, [pc, #396]	; (a5d8 <m2m_wifi_cb+0x294>)
    a44c:	681b      	ldr	r3, [r3, #0]
    a44e:	2b00      	cmp	r3, #0
    a450:	d0ac      	beq.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    a452:	a903      	add	r1, sp, #12
    a454:	302f      	adds	r0, #47	; 0x2f
    a456:	4798      	blx	r3
    a458:	e7a8      	b.n	a3ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    a45a:	2300      	movs	r3, #0
    a45c:	2204      	movs	r2, #4
    a45e:	a903      	add	r1, sp, #12
    a460:	0028      	movs	r0, r5
    a462:	4c5c      	ldr	r4, [pc, #368]	; (a5d4 <m2m_wifi_cb+0x290>)
    a464:	47a0      	blx	r4
    a466:	2800      	cmp	r0, #0
    a468:	d1a0      	bne.n	a3ac <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    a46a:	485d      	ldr	r0, [pc, #372]	; (a5e0 <m2m_wifi_cb+0x29c>)
    a46c:	4d56      	ldr	r5, [pc, #344]	; (a5c8 <m2m_wifi_cb+0x284>)
    a46e:	47a8      	blx	r5
    a470:	9c03      	ldr	r4, [sp, #12]
    a472:	0a23      	lsrs	r3, r4, #8
    a474:	20ff      	movs	r0, #255	; 0xff
    a476:	4003      	ands	r3, r0
    a478:	0c22      	lsrs	r2, r4, #16
    a47a:	4002      	ands	r2, r0
    a47c:	0e21      	lsrs	r1, r4, #24
    a47e:	4020      	ands	r0, r4
    a480:	9000      	str	r0, [sp, #0]
    a482:	4858      	ldr	r0, [pc, #352]	; (a5e4 <m2m_wifi_cb+0x2a0>)
    a484:	47a8      	blx	r5
    a486:	200d      	movs	r0, #13
    a488:	4b51      	ldr	r3, [pc, #324]	; (a5d0 <m2m_wifi_cb+0x28c>)
    a48a:	4798      	blx	r3
			if (gpfAppWifiCb)
    a48c:	4b52      	ldr	r3, [pc, #328]	; (a5d8 <m2m_wifi_cb+0x294>)
    a48e:	681b      	ldr	r3, [r3, #0]
    a490:	2b00      	cmp	r3, #0
    a492:	d100      	bne.n	a496 <m2m_wifi_cb+0x152>
    a494:	e78a      	b.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    a496:	2100      	movs	r1, #0
    a498:	2034      	movs	r0, #52	; 0x34
    a49a:	4798      	blx	r3
    a49c:	e786      	b.n	a3ac <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    a49e:	2200      	movs	r2, #0
    a4a0:	4b51      	ldr	r3, [pc, #324]	; (a5e8 <m2m_wifi_cb+0x2a4>)
    a4a2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    a4a4:	2300      	movs	r3, #0
    a4a6:	3204      	adds	r2, #4
    a4a8:	a903      	add	r1, sp, #12
    a4aa:	0028      	movs	r0, r5
    a4ac:	4c49      	ldr	r4, [pc, #292]	; (a5d4 <m2m_wifi_cb+0x290>)
    a4ae:	47a0      	blx	r4
    a4b0:	2800      	cmp	r0, #0
    a4b2:	d000      	beq.n	a4b6 <m2m_wifi_cb+0x172>
    a4b4:	e77a      	b.n	a3ac <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    a4b6:	ab03      	add	r3, sp, #12
    a4b8:	781a      	ldrb	r2, [r3, #0]
    a4ba:	4b4c      	ldr	r3, [pc, #304]	; (a5ec <m2m_wifi_cb+0x2a8>)
    a4bc:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    a4be:	4b46      	ldr	r3, [pc, #280]	; (a5d8 <m2m_wifi_cb+0x294>)
    a4c0:	681b      	ldr	r3, [r3, #0]
    a4c2:	2b00      	cmp	r3, #0
    a4c4:	d100      	bne.n	a4c8 <m2m_wifi_cb+0x184>
    a4c6:	e771      	b.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    a4c8:	a903      	add	r1, sp, #12
    a4ca:	3011      	adds	r0, #17
    a4cc:	4798      	blx	r3
    a4ce:	e76d      	b.n	a3ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    a4d0:	2300      	movs	r3, #0
    a4d2:	222c      	movs	r2, #44	; 0x2c
    a4d4:	a903      	add	r1, sp, #12
    a4d6:	0028      	movs	r0, r5
    a4d8:	4c3e      	ldr	r4, [pc, #248]	; (a5d4 <m2m_wifi_cb+0x290>)
    a4da:	47a0      	blx	r4
    a4dc:	2800      	cmp	r0, #0
    a4de:	d000      	beq.n	a4e2 <m2m_wifi_cb+0x19e>
    a4e0:	e764      	b.n	a3ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    a4e2:	4b3d      	ldr	r3, [pc, #244]	; (a5d8 <m2m_wifi_cb+0x294>)
    a4e4:	681b      	ldr	r3, [r3, #0]
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	d100      	bne.n	a4ec <m2m_wifi_cb+0x1a8>
    a4ea:	e75f      	b.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    a4ec:	a903      	add	r1, sp, #12
    a4ee:	3013      	adds	r0, #19
    a4f0:	4798      	blx	r3
    a4f2:	e75b      	b.n	a3ac <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    a4f4:	2300      	movs	r3, #0
    a4f6:	2204      	movs	r2, #4
    a4f8:	a91c      	add	r1, sp, #112	; 0x70
    a4fa:	0028      	movs	r0, r5
    a4fc:	4c35      	ldr	r4, [pc, #212]	; (a5d4 <m2m_wifi_cb+0x290>)
    a4fe:	47a0      	blx	r4
    a500:	2800      	cmp	r0, #0
    a502:	d000      	beq.n	a506 <m2m_wifi_cb+0x1c2>
    a504:	e752      	b.n	a3ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    a506:	4b34      	ldr	r3, [pc, #208]	; (a5d8 <m2m_wifi_cb+0x294>)
    a508:	681b      	ldr	r3, [r3, #0]
    a50a:	2b00      	cmp	r3, #0
    a50c:	d100      	bne.n	a510 <m2m_wifi_cb+0x1cc>
    a50e:	e74d      	b.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    a510:	a91c      	add	r1, sp, #112	; 0x70
    a512:	3004      	adds	r0, #4
    a514:	4798      	blx	r3
    a516:	e749      	b.n	a3ac <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    a518:	2300      	movs	r3, #0
    a51a:	2204      	movs	r2, #4
    a51c:	a91c      	add	r1, sp, #112	; 0x70
    a51e:	0028      	movs	r0, r5
    a520:	4c2c      	ldr	r4, [pc, #176]	; (a5d4 <m2m_wifi_cb+0x290>)
    a522:	47a0      	blx	r4
    a524:	2800      	cmp	r0, #0
    a526:	d000      	beq.n	a52a <m2m_wifi_cb+0x1e6>
    a528:	e740      	b.n	a3ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    a52a:	4b2b      	ldr	r3, [pc, #172]	; (a5d8 <m2m_wifi_cb+0x294>)
    a52c:	681b      	ldr	r3, [r3, #0]
    a52e:	2b00      	cmp	r3, #0
    a530:	d100      	bne.n	a534 <m2m_wifi_cb+0x1f0>
    a532:	e73b      	b.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    a534:	a91c      	add	r1, sp, #112	; 0x70
    a536:	3065      	adds	r0, #101	; 0x65
    a538:	4798      	blx	r3
    a53a:	e737      	b.n	a3ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    a53c:	2301      	movs	r3, #1
    a53e:	2264      	movs	r2, #100	; 0x64
    a540:	a903      	add	r1, sp, #12
    a542:	0028      	movs	r0, r5
    a544:	4c23      	ldr	r4, [pc, #140]	; (a5d4 <m2m_wifi_cb+0x290>)
    a546:	47a0      	blx	r4
    a548:	2800      	cmp	r0, #0
    a54a:	d000      	beq.n	a54e <m2m_wifi_cb+0x20a>
    a54c:	e72e      	b.n	a3ac <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    a54e:	4b22      	ldr	r3, [pc, #136]	; (a5d8 <m2m_wifi_cb+0x294>)
    a550:	681b      	ldr	r3, [r3, #0]
    a552:	2b00      	cmp	r3, #0
    a554:	d100      	bne.n	a558 <m2m_wifi_cb+0x214>
    a556:	e729      	b.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    a558:	a903      	add	r1, sp, #12
    a55a:	3009      	adds	r0, #9
    a55c:	4798      	blx	r3
    a55e:	e725      	b.n	a3ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    a560:	2301      	movs	r3, #1
    a562:	2204      	movs	r2, #4
    a564:	a903      	add	r1, sp, #12
    a566:	0028      	movs	r0, r5
    a568:	4c1a      	ldr	r4, [pc, #104]	; (a5d4 <m2m_wifi_cb+0x290>)
    a56a:	47a0      	blx	r4
    a56c:	2800      	cmp	r0, #0
    a56e:	d000      	beq.n	a572 <m2m_wifi_cb+0x22e>
    a570:	e71c      	b.n	a3ac <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    a572:	4b19      	ldr	r3, [pc, #100]	; (a5d8 <m2m_wifi_cb+0x294>)
    a574:	681b      	ldr	r3, [r3, #0]
    a576:	2b00      	cmp	r3, #0
    a578:	d100      	bne.n	a57c <m2m_wifi_cb+0x238>
    a57a:	e717      	b.n	a3ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    a57c:	a903      	add	r1, sp, #12
    a57e:	302a      	adds	r0, #42	; 0x2a
    a580:	4798      	blx	r3
    a582:	e713      	b.n	a3ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    a584:	2300      	movs	r3, #0
    a586:	2208      	movs	r2, #8
    a588:	a903      	add	r1, sp, #12
    a58a:	0028      	movs	r0, r5
    a58c:	4c11      	ldr	r4, [pc, #68]	; (a5d4 <m2m_wifi_cb+0x290>)
    a58e:	47a0      	blx	r4
    a590:	2800      	cmp	r0, #0
    a592:	d000      	beq.n	a596 <m2m_wifi_cb+0x252>
    a594:	e70a      	b.n	a3ac <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    a596:	ab03      	add	r3, sp, #12
    a598:	889a      	ldrh	r2, [r3, #4]
    a59a:	0028      	movs	r0, r5
    a59c:	3008      	adds	r0, #8
    a59e:	2301      	movs	r3, #1
    a5a0:	9903      	ldr	r1, [sp, #12]
    a5a2:	4c0c      	ldr	r4, [pc, #48]	; (a5d4 <m2m_wifi_cb+0x290>)
    a5a4:	47a0      	blx	r4
    a5a6:	2800      	cmp	r0, #0
    a5a8:	d000      	beq.n	a5ac <m2m_wifi_cb+0x268>
    a5aa:	e6ff      	b.n	a3ac <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    a5ac:	4b0a      	ldr	r3, [pc, #40]	; (a5d8 <m2m_wifi_cb+0x294>)
    a5ae:	681b      	ldr	r3, [r3, #0]
    a5b0:	2b00      	cmp	r3, #0
    a5b2:	d100      	bne.n	a5b6 <m2m_wifi_cb+0x272>
    a5b4:	e6fa      	b.n	a3ac <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    a5b6:	a903      	add	r1, sp, #12
    a5b8:	3020      	adds	r0, #32
    a5ba:	4798      	blx	r3
    a5bc:	e6f6      	b.n	a3ac <m2m_wifi_cb+0x68>
    a5be:	46c0      	nop			; (mov r8, r8)
    a5c0:	00012d34 	.word	0x00012d34
    a5c4:	000129cc 	.word	0x000129cc
    a5c8:	00010319 	.word	0x00010319
    a5cc:	00012d84 	.word	0x00012d84
    a5d0:	0001034d 	.word	0x0001034d
    a5d4:	0000a19d 	.word	0x0000a19d
    a5d8:	2000025c 	.word	0x2000025c
    a5dc:	00009a59 	.word	0x00009a59
    a5e0:	00012cfc 	.word	0x00012cfc
    a5e4:	00012d64 	.word	0x00012d64
    a5e8:	20000261 	.word	0x20000261
    a5ec:	20000260 	.word	0x20000260

0000a5f0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    a5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5f2:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    a5f4:	2201      	movs	r2, #1
    a5f6:	230f      	movs	r3, #15
    a5f8:	446b      	add	r3, sp
    a5fa:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    a5fc:	2800      	cmp	r0, #0
    a5fe:	d061      	beq.n	a6c4 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    a600:	6802      	ldr	r2, [r0, #0]
    a602:	4b32      	ldr	r3, [pc, #200]	; (a6cc <m2m_wifi_init+0xdc>)
    a604:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    a606:	2200      	movs	r2, #0
    a608:	4b31      	ldr	r3, [pc, #196]	; (a6d0 <m2m_wifi_init+0xe0>)
    a60a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    a60c:	200f      	movs	r0, #15
    a60e:	4468      	add	r0, sp
    a610:	4b30      	ldr	r3, [pc, #192]	; (a6d4 <m2m_wifi_init+0xe4>)
    a612:	4798      	blx	r3
    a614:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    a616:	d002      	beq.n	a61e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    a618:	0020      	movs	r0, r4
    a61a:	b00f      	add	sp, #60	; 0x3c
    a61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    a61e:	2000      	movs	r0, #0
    a620:	4b2d      	ldr	r3, [pc, #180]	; (a6d8 <m2m_wifi_init+0xe8>)
    a622:	4798      	blx	r3
    a624:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    a626:	d149      	bne.n	a6bc <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    a628:	492c      	ldr	r1, [pc, #176]	; (a6dc <m2m_wifi_init+0xec>)
    a62a:	2001      	movs	r0, #1
    a62c:	4b2c      	ldr	r3, [pc, #176]	; (a6e0 <m2m_wifi_init+0xf0>)
    a62e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    a630:	ae04      	add	r6, sp, #16
    a632:	0030      	movs	r0, r6
    a634:	4b2b      	ldr	r3, [pc, #172]	; (a6e4 <m2m_wifi_init+0xf4>)
    a636:	4798      	blx	r3
    a638:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    a63a:	482b      	ldr	r0, [pc, #172]	; (a6e8 <m2m_wifi_init+0xf8>)
    a63c:	4d2b      	ldr	r5, [pc, #172]	; (a6ec <m2m_wifi_init+0xfc>)
    a63e:	47a8      	blx	r5
    a640:	79b3      	ldrb	r3, [r6, #6]
    a642:	7972      	ldrb	r2, [r6, #5]
    a644:	7931      	ldrb	r1, [r6, #4]
    a646:	8c30      	ldrh	r0, [r6, #32]
    a648:	9000      	str	r0, [sp, #0]
    a64a:	4829      	ldr	r0, [pc, #164]	; (a6f0 <m2m_wifi_init+0x100>)
    a64c:	47a8      	blx	r5
    a64e:	200d      	movs	r0, #13
    a650:	4f28      	ldr	r7, [pc, #160]	; (a6f4 <m2m_wifi_init+0x104>)
    a652:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    a654:	4824      	ldr	r0, [pc, #144]	; (a6e8 <m2m_wifi_init+0xf8>)
    a656:	47a8      	blx	r5
    a658:	2226      	movs	r2, #38	; 0x26
    a65a:	446a      	add	r2, sp
    a65c:	211a      	movs	r1, #26
    a65e:	4469      	add	r1, sp
    a660:	4825      	ldr	r0, [pc, #148]	; (a6f8 <m2m_wifi_init+0x108>)
    a662:	47a8      	blx	r5
    a664:	200d      	movs	r0, #13
    a666:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    a668:	481f      	ldr	r0, [pc, #124]	; (a6e8 <m2m_wifi_init+0xf8>)
    a66a:	47a8      	blx	r5
    a66c:	7a73      	ldrb	r3, [r6, #9]
    a66e:	7a32      	ldrb	r2, [r6, #8]
    a670:	79f1      	ldrb	r1, [r6, #7]
    a672:	4822      	ldr	r0, [pc, #136]	; (a6fc <m2m_wifi_init+0x10c>)
    a674:	47a8      	blx	r5
    a676:	200d      	movs	r0, #13
    a678:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    a67a:	481b      	ldr	r0, [pc, #108]	; (a6e8 <m2m_wifi_init+0xf8>)
    a67c:	47a8      	blx	r5
    a67e:	2302      	movs	r3, #2
    a680:	2205      	movs	r2, #5
    a682:	2113      	movs	r1, #19
    a684:	481e      	ldr	r0, [pc, #120]	; (a700 <m2m_wifi_init+0x110>)
    a686:	47a8      	blx	r5
    a688:	200d      	movs	r0, #13
    a68a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    a68c:	4816      	ldr	r0, [pc, #88]	; (a6e8 <m2m_wifi_init+0xf8>)
    a68e:	47a8      	blx	r5
    a690:	4a1c      	ldr	r2, [pc, #112]	; (a704 <m2m_wifi_init+0x114>)
    a692:	491d      	ldr	r1, [pc, #116]	; (a708 <m2m_wifi_init+0x118>)
    a694:	481d      	ldr	r0, [pc, #116]	; (a70c <m2m_wifi_init+0x11c>)
    a696:	47a8      	blx	r5
    a698:	200d      	movs	r0, #13
    a69a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    a69c:	0023      	movs	r3, r4
    a69e:	330d      	adds	r3, #13
    a6a0:	d1ba      	bne.n	a618 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    a6a2:	22ee      	movs	r2, #238	; 0xee
    a6a4:	32ff      	adds	r2, #255	; 0xff
    a6a6:	491a      	ldr	r1, [pc, #104]	; (a710 <m2m_wifi_init+0x120>)
    a6a8:	481a      	ldr	r0, [pc, #104]	; (a714 <m2m_wifi_init+0x124>)
    a6aa:	4b10      	ldr	r3, [pc, #64]	; (a6ec <m2m_wifi_init+0xfc>)
    a6ac:	4798      	blx	r3
    a6ae:	481a      	ldr	r0, [pc, #104]	; (a718 <m2m_wifi_init+0x128>)
    a6b0:	4b1a      	ldr	r3, [pc, #104]	; (a71c <m2m_wifi_init+0x12c>)
    a6b2:	4798      	blx	r3
    a6b4:	200d      	movs	r0, #13
    a6b6:	4b0f      	ldr	r3, [pc, #60]	; (a6f4 <m2m_wifi_init+0x104>)
    a6b8:	4798      	blx	r3
    a6ba:	e7ad      	b.n	a618 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    a6bc:	2000      	movs	r0, #0
    a6be:	4b18      	ldr	r3, [pc, #96]	; (a720 <m2m_wifi_init+0x130>)
    a6c0:	4798      	blx	r3
    a6c2:	e7a9      	b.n	a618 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    a6c4:	240c      	movs	r4, #12
    a6c6:	4264      	negs	r4, r4
    a6c8:	e7a6      	b.n	a618 <m2m_wifi_init+0x28>
    a6ca:	46c0      	nop			; (mov r8, r8)
    a6cc:	2000025c 	.word	0x2000025c
    a6d0:	20000261 	.word	0x20000261
    a6d4:	0000b0ad 	.word	0x0000b0ad
    a6d8:	0000a30d 	.word	0x0000a30d
    a6dc:	0000a345 	.word	0x0000a345
    a6e0:	0000a289 	.word	0x0000a289
    a6e4:	0000afc9 	.word	0x0000afc9
    a6e8:	00012cfc 	.word	0x00012cfc
    a6ec:	00010319 	.word	0x00010319
    a6f0:	00012e40 	.word	0x00012e40
    a6f4:	0001034d 	.word	0x0001034d
    a6f8:	00012e68 	.word	0x00012e68
    a6fc:	00012e84 	.word	0x00012e84
    a700:	00012ea8 	.word	0x00012ea8
    a704:	00012ec0 	.word	0x00012ec0
    a708:	00012ecc 	.word	0x00012ecc
    a70c:	00012ed8 	.word	0x00012ed8
    a710:	00012d40 	.word	0x00012d40
    a714:	000129cc 	.word	0x000129cc
    a718:	00012ef0 	.word	0x00012ef0
    a71c:	00010435 	.word	0x00010435
    a720:	0000b181 	.word	0x0000b181

0000a724 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    a724:	b510      	push	{r4, lr}

	hif_deinit(NULL);
    a726:	2000      	movs	r0, #0
    a728:	4b03      	ldr	r3, [pc, #12]	; (a738 <m2m_wifi_deinit+0x14>)
    a72a:	4798      	blx	r3

	nm_drv_deinit(NULL);
    a72c:	2000      	movs	r0, #0
    a72e:	4b03      	ldr	r3, [pc, #12]	; (a73c <m2m_wifi_deinit+0x18>)
    a730:	4798      	blx	r3

	return M2M_SUCCESS;
}
    a732:	2000      	movs	r0, #0
    a734:	bd10      	pop	{r4, pc}
    a736:	46c0      	nop			; (mov r8, r8)
    a738:	00009b6d 	.word	0x00009b6d
    a73c:	0000b181 	.word	0x0000b181

0000a740 <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    a740:	b510      	push	{r4, lr}
	return hif_handle_isr();
    a742:	4b01      	ldr	r3, [pc, #4]	; (a748 <m2m_wifi_handle_events+0x8>)
    a744:	4798      	blx	r3
}
    a746:	bd10      	pop	{r4, pc}
    a748:	00009dc1 	.word	0x00009dc1

0000a74c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a74e:	46ce      	mov	lr, r9
    a750:	4647      	mov	r7, r8
    a752:	b580      	push	{r7, lr}
    a754:	b0a3      	sub	sp, #140	; 0x8c
    a756:	9005      	str	r0, [sp, #20]
    a758:	000c      	movs	r4, r1
    a75a:	0015      	movs	r5, r2
    a75c:	001f      	movs	r7, r3
    a75e:	ab2a      	add	r3, sp, #168	; 0xa8
    a760:	881b      	ldrh	r3, [r3, #0]
    a762:	4699      	mov	r9, r3
    a764:	ab2b      	add	r3, sp, #172	; 0xac
    a766:	781b      	ldrb	r3, [r3, #0]
    a768:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    a76a:	2a01      	cmp	r2, #1
    a76c:	d003      	beq.n	a776 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    a76e:	2f00      	cmp	r7, #0
    a770:	d040      	beq.n	a7f4 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    a772:	2a02      	cmp	r2, #2
    a774:	d04c      	beq.n	a810 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    a776:	1e63      	subs	r3, r4, #1
    a778:	2b1f      	cmp	r3, #31
    a77a:	d900      	bls.n	a77e <m2m_wifi_connect_sc+0x32>
    a77c:	e078      	b.n	a870 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    a77e:	464b      	mov	r3, r9
    a780:	3b01      	subs	r3, #1
    a782:	b29b      	uxth	r3, r3
    a784:	2b0d      	cmp	r3, #13
    a786:	d903      	bls.n	a790 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    a788:	464b      	mov	r3, r9
    a78a:	2bff      	cmp	r3, #255	; 0xff
    a78c:	d000      	beq.n	a790 <m2m_wifi_connect_sc+0x44>
    a78e:	e07d      	b.n	a88c <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    a790:	ae07      	add	r6, sp, #28
    a792:	0022      	movs	r2, r4
    a794:	9905      	ldr	r1, [sp, #20]
    a796:	205a      	movs	r0, #90	; 0x5a
    a798:	ab02      	add	r3, sp, #8
    a79a:	469c      	mov	ip, r3
    a79c:	4460      	add	r0, ip
    a79e:	4b78      	ldr	r3, [pc, #480]	; (a980 <m2m_wifi_connect_sc+0x234>)
    a7a0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    a7a2:	1934      	adds	r4, r6, r4
    a7a4:	3446      	adds	r4, #70	; 0x46
    a7a6:	2300      	movs	r3, #0
    a7a8:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    a7aa:	3344      	adds	r3, #68	; 0x44
    a7ac:	464a      	mov	r2, r9
    a7ae:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    a7b0:	4643      	mov	r3, r8
    a7b2:	1e5a      	subs	r2, r3, #1
    a7b4:	4193      	sbcs	r3, r2
    a7b6:	2267      	movs	r2, #103	; 0x67
    a7b8:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    a7ba:	2341      	movs	r3, #65	; 0x41
    a7bc:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    a7be:	2d03      	cmp	r5, #3
    a7c0:	d100      	bne.n	a7c4 <m2m_wifi_connect_sc+0x78>
    a7c2:	e071      	b.n	a8a8 <m2m_wifi_connect_sc+0x15c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    a7c4:	2d02      	cmp	r5, #2
    a7c6:	d100      	bne.n	a7ca <m2m_wifi_connect_sc+0x7e>
    a7c8:	e0ab      	b.n	a922 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    a7ca:	2d04      	cmp	r5, #4
    a7cc:	d100      	bne.n	a7d0 <m2m_wifi_connect_sc+0x84>
    a7ce:	e0c3      	b.n	a958 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    a7d0:	2d01      	cmp	r5, #1
    a7d2:	d000      	beq.n	a7d6 <m2m_wifi_connect_sc+0x8a>
    a7d4:	e0c6      	b.n	a964 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    a7d6:	2300      	movs	r3, #0
    a7d8:	9302      	str	r3, [sp, #8]
    a7da:	9301      	str	r3, [sp, #4]
    a7dc:	9300      	str	r3, [sp, #0]
    a7de:	336c      	adds	r3, #108	; 0x6c
    a7e0:	aa07      	add	r2, sp, #28
    a7e2:	2128      	movs	r1, #40	; 0x28
    a7e4:	2001      	movs	r0, #1
    a7e6:	4c67      	ldr	r4, [pc, #412]	; (a984 <m2m_wifi_connect_sc+0x238>)
    a7e8:	47a0      	blx	r4

ERR1:
	return ret;
}
    a7ea:	b023      	add	sp, #140	; 0x8c
    a7ec:	bc0c      	pop	{r2, r3}
    a7ee:	4690      	mov	r8, r2
    a7f0:	4699      	mov	r9, r3
    a7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    a7f4:	4a64      	ldr	r2, [pc, #400]	; (a988 <m2m_wifi_connect_sc+0x23c>)
    a7f6:	4965      	ldr	r1, [pc, #404]	; (a98c <m2m_wifi_connect_sc+0x240>)
    a7f8:	4865      	ldr	r0, [pc, #404]	; (a990 <m2m_wifi_connect_sc+0x244>)
    a7fa:	4b66      	ldr	r3, [pc, #408]	; (a994 <m2m_wifi_connect_sc+0x248>)
    a7fc:	4798      	blx	r3
    a7fe:	4866      	ldr	r0, [pc, #408]	; (a998 <m2m_wifi_connect_sc+0x24c>)
    a800:	4b66      	ldr	r3, [pc, #408]	; (a99c <m2m_wifi_connect_sc+0x250>)
    a802:	4798      	blx	r3
    a804:	200d      	movs	r0, #13
    a806:	4b66      	ldr	r3, [pc, #408]	; (a9a0 <m2m_wifi_connect_sc+0x254>)
    a808:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a80a:	200c      	movs	r0, #12
    a80c:	4240      	negs	r0, r0
			goto ERR1;
    a80e:	e7ec      	b.n	a7ea <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    a810:	0038      	movs	r0, r7
    a812:	4b64      	ldr	r3, [pc, #400]	; (a9a4 <m2m_wifi_connect_sc+0x258>)
    a814:	4798      	blx	r3
    a816:	2840      	cmp	r0, #64	; 0x40
    a818:	d1ad      	bne.n	a776 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    a81a:	783b      	ldrb	r3, [r7, #0]
    a81c:	001a      	movs	r2, r3
    a81e:	3a30      	subs	r2, #48	; 0x30
    a820:	2a36      	cmp	r2, #54	; 0x36
    a822:	d817      	bhi.n	a854 <m2m_wifi_connect_sc+0x108>
    a824:	3a0a      	subs	r2, #10
    a826:	2a06      	cmp	r2, #6
    a828:	d914      	bls.n	a854 <m2m_wifi_connect_sc+0x108>
    a82a:	3b47      	subs	r3, #71	; 0x47
    a82c:	2b19      	cmp	r3, #25
    a82e:	d911      	bls.n	a854 <m2m_wifi_connect_sc+0x108>
    a830:	1c7a      	adds	r2, r7, #1
    a832:	0038      	movs	r0, r7
    a834:	3040      	adds	r0, #64	; 0x40
    a836:	7813      	ldrb	r3, [r2, #0]
    a838:	0019      	movs	r1, r3
    a83a:	3930      	subs	r1, #48	; 0x30
    a83c:	2936      	cmp	r1, #54	; 0x36
    a83e:	d809      	bhi.n	a854 <m2m_wifi_connect_sc+0x108>
    a840:	390a      	subs	r1, #10
    a842:	2906      	cmp	r1, #6
    a844:	d906      	bls.n	a854 <m2m_wifi_connect_sc+0x108>
    a846:	3b47      	subs	r3, #71	; 0x47
    a848:	2b19      	cmp	r3, #25
    a84a:	d903      	bls.n	a854 <m2m_wifi_connect_sc+0x108>
    a84c:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    a84e:	4282      	cmp	r2, r0
    a850:	d1f1      	bne.n	a836 <m2m_wifi_connect_sc+0xea>
    a852:	e790      	b.n	a776 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    a854:	4a54      	ldr	r2, [pc, #336]	; (a9a8 <m2m_wifi_connect_sc+0x25c>)
    a856:	494d      	ldr	r1, [pc, #308]	; (a98c <m2m_wifi_connect_sc+0x240>)
    a858:	484d      	ldr	r0, [pc, #308]	; (a990 <m2m_wifi_connect_sc+0x244>)
    a85a:	4b4e      	ldr	r3, [pc, #312]	; (a994 <m2m_wifi_connect_sc+0x248>)
    a85c:	4798      	blx	r3
    a85e:	4853      	ldr	r0, [pc, #332]	; (a9ac <m2m_wifi_connect_sc+0x260>)
    a860:	4b4e      	ldr	r3, [pc, #312]	; (a99c <m2m_wifi_connect_sc+0x250>)
    a862:	4798      	blx	r3
    a864:	200d      	movs	r0, #13
    a866:	4b4e      	ldr	r3, [pc, #312]	; (a9a0 <m2m_wifi_connect_sc+0x254>)
    a868:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    a86a:	200c      	movs	r0, #12
    a86c:	4240      	negs	r0, r0
					goto ERR1;
    a86e:	e7bc      	b.n	a7ea <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    a870:	4a4f      	ldr	r2, [pc, #316]	; (a9b0 <m2m_wifi_connect_sc+0x264>)
    a872:	4946      	ldr	r1, [pc, #280]	; (a98c <m2m_wifi_connect_sc+0x240>)
    a874:	4846      	ldr	r0, [pc, #280]	; (a990 <m2m_wifi_connect_sc+0x244>)
    a876:	4b47      	ldr	r3, [pc, #284]	; (a994 <m2m_wifi_connect_sc+0x248>)
    a878:	4798      	blx	r3
    a87a:	484e      	ldr	r0, [pc, #312]	; (a9b4 <m2m_wifi_connect_sc+0x268>)
    a87c:	4b47      	ldr	r3, [pc, #284]	; (a99c <m2m_wifi_connect_sc+0x250>)
    a87e:	4798      	blx	r3
    a880:	200d      	movs	r0, #13
    a882:	4b47      	ldr	r3, [pc, #284]	; (a9a0 <m2m_wifi_connect_sc+0x254>)
    a884:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a886:	200c      	movs	r0, #12
    a888:	4240      	negs	r0, r0
		goto ERR1;
    a88a:	e7ae      	b.n	a7ea <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    a88c:	4a4a      	ldr	r2, [pc, #296]	; (a9b8 <m2m_wifi_connect_sc+0x26c>)
    a88e:	493f      	ldr	r1, [pc, #252]	; (a98c <m2m_wifi_connect_sc+0x240>)
    a890:	483f      	ldr	r0, [pc, #252]	; (a990 <m2m_wifi_connect_sc+0x244>)
    a892:	4b40      	ldr	r3, [pc, #256]	; (a994 <m2m_wifi_connect_sc+0x248>)
    a894:	4798      	blx	r3
    a896:	4849      	ldr	r0, [pc, #292]	; (a9bc <m2m_wifi_connect_sc+0x270>)
    a898:	4b40      	ldr	r3, [pc, #256]	; (a99c <m2m_wifi_connect_sc+0x250>)
    a89a:	4798      	blx	r3
    a89c:	200d      	movs	r0, #13
    a89e:	4b40      	ldr	r3, [pc, #256]	; (a9a0 <m2m_wifi_connect_sc+0x254>)
    a8a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a8a2:	200c      	movs	r0, #12
    a8a4:	4240      	negs	r0, r0
			goto ERR1;
    a8a6:	e7a0      	b.n	a7ea <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    a8a8:	783b      	ldrb	r3, [r7, #0]
    a8aa:	3b01      	subs	r3, #1
    a8ac:	b2db      	uxtb	r3, r3
    a8ae:	aa07      	add	r2, sp, #28
    a8b0:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    a8b2:	2b03      	cmp	r3, #3
    a8b4:	d818      	bhi.n	a8e8 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    a8b6:	787a      	ldrb	r2, [r7, #1]
    a8b8:	1e51      	subs	r1, r2, #1
    a8ba:	ab07      	add	r3, sp, #28
    a8bc:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    a8be:	2310      	movs	r3, #16
    a8c0:	0011      	movs	r1, r2
    a8c2:	4399      	bics	r1, r3
    a8c4:	290b      	cmp	r1, #11
    a8c6:	d01e      	beq.n	a906 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    a8c8:	2296      	movs	r2, #150	; 0x96
    a8ca:	0092      	lsls	r2, r2, #2
    a8cc:	492f      	ldr	r1, [pc, #188]	; (a98c <m2m_wifi_connect_sc+0x240>)
    a8ce:	4830      	ldr	r0, [pc, #192]	; (a990 <m2m_wifi_connect_sc+0x244>)
    a8d0:	4c30      	ldr	r4, [pc, #192]	; (a994 <m2m_wifi_connect_sc+0x248>)
    a8d2:	47a0      	blx	r4
    a8d4:	ab07      	add	r3, sp, #28
    a8d6:	7859      	ldrb	r1, [r3, #1]
    a8d8:	4839      	ldr	r0, [pc, #228]	; (a9c0 <m2m_wifi_connect_sc+0x274>)
    a8da:	47a0      	blx	r4
    a8dc:	200d      	movs	r0, #13
    a8de:	4b30      	ldr	r3, [pc, #192]	; (a9a0 <m2m_wifi_connect_sc+0x254>)
    a8e0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a8e2:	200c      	movs	r0, #12
    a8e4:	4240      	negs	r0, r0
			goto ERR1;
    a8e6:	e780      	b.n	a7ea <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    a8e8:	4a36      	ldr	r2, [pc, #216]	; (a9c4 <m2m_wifi_connect_sc+0x278>)
    a8ea:	4928      	ldr	r1, [pc, #160]	; (a98c <m2m_wifi_connect_sc+0x240>)
    a8ec:	4828      	ldr	r0, [pc, #160]	; (a990 <m2m_wifi_connect_sc+0x244>)
    a8ee:	4c29      	ldr	r4, [pc, #164]	; (a994 <m2m_wifi_connect_sc+0x248>)
    a8f0:	47a0      	blx	r4
    a8f2:	ab07      	add	r3, sp, #28
    a8f4:	7819      	ldrb	r1, [r3, #0]
    a8f6:	4834      	ldr	r0, [pc, #208]	; (a9c8 <m2m_wifi_connect_sc+0x27c>)
    a8f8:	47a0      	blx	r4
    a8fa:	200d      	movs	r0, #13
    a8fc:	4b28      	ldr	r3, [pc, #160]	; (a9a0 <m2m_wifi_connect_sc+0x254>)
    a8fe:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a900:	200c      	movs	r0, #12
    a902:	4240      	negs	r0, r0
			goto ERR1;
    a904:	e771      	b.n	a7ea <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    a906:	1cb9      	adds	r1, r7, #2
    a908:	2016      	movs	r0, #22
    a90a:	ab02      	add	r3, sp, #8
    a90c:	469c      	mov	ip, r3
    a90e:	4460      	add	r0, ip
    a910:	4b1b      	ldr	r3, [pc, #108]	; (a980 <m2m_wifi_connect_sc+0x234>)
    a912:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    a914:	787b      	ldrb	r3, [r7, #1]
    a916:	aa07      	add	r2, sp, #28
    a918:	4694      	mov	ip, r2
    a91a:	4463      	add	r3, ip
    a91c:	2200      	movs	r2, #0
    a91e:	709a      	strb	r2, [r3, #2]
    a920:	e759      	b.n	a7d6 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    a922:	0038      	movs	r0, r7
    a924:	4b1f      	ldr	r3, [pc, #124]	; (a9a4 <m2m_wifi_connect_sc+0x258>)
    a926:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    a928:	1e43      	subs	r3, r0, #1
    a92a:	b29b      	uxth	r3, r3
    a92c:	2b3f      	cmp	r3, #63	; 0x3f
    a92e:	d805      	bhi.n	a93c <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    a930:	1c42      	adds	r2, r0, #1
    a932:	0039      	movs	r1, r7
    a934:	a807      	add	r0, sp, #28
    a936:	4b12      	ldr	r3, [pc, #72]	; (a980 <m2m_wifi_connect_sc+0x234>)
    a938:	4798      	blx	r3
    a93a:	e74c      	b.n	a7d6 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    a93c:	4a23      	ldr	r2, [pc, #140]	; (a9cc <m2m_wifi_connect_sc+0x280>)
    a93e:	4913      	ldr	r1, [pc, #76]	; (a98c <m2m_wifi_connect_sc+0x240>)
    a940:	4813      	ldr	r0, [pc, #76]	; (a990 <m2m_wifi_connect_sc+0x244>)
    a942:	4b14      	ldr	r3, [pc, #80]	; (a994 <m2m_wifi_connect_sc+0x248>)
    a944:	4798      	blx	r3
    a946:	4822      	ldr	r0, [pc, #136]	; (a9d0 <m2m_wifi_connect_sc+0x284>)
    a948:	4b14      	ldr	r3, [pc, #80]	; (a99c <m2m_wifi_connect_sc+0x250>)
    a94a:	4798      	blx	r3
    a94c:	200d      	movs	r0, #13
    a94e:	4b14      	ldr	r3, [pc, #80]	; (a9a0 <m2m_wifi_connect_sc+0x254>)
    a950:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a952:	200c      	movs	r0, #12
    a954:	4240      	negs	r0, r0
			goto ERR1;
    a956:	e748      	b.n	a7ea <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    a958:	223e      	movs	r2, #62	; 0x3e
    a95a:	0039      	movs	r1, r7
    a95c:	a807      	add	r0, sp, #28
    a95e:	4b08      	ldr	r3, [pc, #32]	; (a980 <m2m_wifi_connect_sc+0x234>)
    a960:	4798      	blx	r3
    a962:	e738      	b.n	a7d6 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    a964:	4a1b      	ldr	r2, [pc, #108]	; (a9d4 <m2m_wifi_connect_sc+0x288>)
    a966:	4909      	ldr	r1, [pc, #36]	; (a98c <m2m_wifi_connect_sc+0x240>)
    a968:	4809      	ldr	r0, [pc, #36]	; (a990 <m2m_wifi_connect_sc+0x244>)
    a96a:	4b0a      	ldr	r3, [pc, #40]	; (a994 <m2m_wifi_connect_sc+0x248>)
    a96c:	4798      	blx	r3
    a96e:	481a      	ldr	r0, [pc, #104]	; (a9d8 <m2m_wifi_connect_sc+0x28c>)
    a970:	4b0a      	ldr	r3, [pc, #40]	; (a99c <m2m_wifi_connect_sc+0x250>)
    a972:	4798      	blx	r3
    a974:	200d      	movs	r0, #13
    a976:	4b0a      	ldr	r3, [pc, #40]	; (a9a0 <m2m_wifi_connect_sc+0x254>)
    a978:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a97a:	200c      	movs	r0, #12
    a97c:	4240      	negs	r0, r0
		goto ERR1;
    a97e:	e734      	b.n	a7ea <m2m_wifi_connect_sc+0x9e>
    a980:	00009a45 	.word	0x00009a45
    a984:	00009b91 	.word	0x00009b91
    a988:	0000021b 	.word	0x0000021b
    a98c:	00012d50 	.word	0x00012d50
    a990:	000129cc 	.word	0x000129cc
    a994:	00010319 	.word	0x00010319
    a998:	00012d98 	.word	0x00012d98
    a99c:	00010435 	.word	0x00010435
    a9a0:	0001034d 	.word	0x0001034d
    a9a4:	00009a69 	.word	0x00009a69
    a9a8:	00000227 	.word	0x00000227
    a9ac:	00012dac 	.word	0x00012dac
    a9b0:	00000231 	.word	0x00000231
    a9b4:	00012db8 	.word	0x00012db8
    a9b8:	0000023a 	.word	0x0000023a
    a9bc:	00012dcc 	.word	0x00012dcc
    a9c0:	00012df4 	.word	0x00012df4
    a9c4:	00000251 	.word	0x00000251
    a9c8:	00012dd8 	.word	0x00012dd8
    a9cc:	00000267 	.word	0x00000267
    a9d0:	00012e10 	.word	0x00012e10
    a9d4:	00000277 	.word	0x00000277
    a9d8:	00012e2c 	.word	0x00012e2c

0000a9dc <m2m_wifi_connect>:
{
    a9dc:	b530      	push	{r4, r5, lr}
    a9de:	b083      	sub	sp, #12
    a9e0:	ac06      	add	r4, sp, #24
    a9e2:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    a9e4:	2500      	movs	r5, #0
    a9e6:	9501      	str	r5, [sp, #4]
    a9e8:	9400      	str	r4, [sp, #0]
    a9ea:	4c02      	ldr	r4, [pc, #8]	; (a9f4 <m2m_wifi_connect+0x18>)
    a9ec:	47a0      	blx	r4
}
    a9ee:	b003      	add	sp, #12
    a9f0:	bd30      	pop	{r4, r5, pc}
    a9f2:	46c0      	nop			; (mov r8, r8)
    a9f4:	0000a74d 	.word	0x0000a74d

0000a9f8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    a9f8:	2000      	movs	r0, #0
    a9fa:	4770      	bx	lr

0000a9fc <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    a9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9fe:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    aa00:	2580      	movs	r5, #128	; 0x80
    aa02:	006d      	lsls	r5, r5, #1
    aa04:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    aa06:	24a5      	movs	r4, #165	; 0xa5
    aa08:	0164      	lsls	r4, r4, #5
    aa0a:	4f08      	ldr	r7, [pc, #32]	; (aa2c <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    aa0c:	4e08      	ldr	r6, [pc, #32]	; (aa30 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    aa0e:	0029      	movs	r1, r5
    aa10:	0020      	movs	r0, r4
    aa12:	47b8      	blx	r7
			uint32 reg = 0;
    aa14:	2300      	movs	r3, #0
    aa16:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    aa18:	a901      	add	r1, sp, #4
    aa1a:	0020      	movs	r0, r4
    aa1c:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    aa1e:	2800      	cmp	r0, #0
    aa20:	d1f5      	bne.n	aa0e <chip_apply_conf+0x12>
				if(reg == val32)
    aa22:	9b01      	ldr	r3, [sp, #4]
    aa24:	429d      	cmp	r5, r3
    aa26:	d1f2      	bne.n	aa0e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    aa28:	b003      	add	sp, #12
    aa2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa2c:	0000aeed 	.word	0x0000aeed
    aa30:	0000aee1 	.word	0x0000aee1

0000aa34 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    aa34:	b500      	push	{lr}
    aa36:	b083      	sub	sp, #12
	uint32 reg = 0;
    aa38:	2300      	movs	r3, #0
    aa3a:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    aa3c:	a901      	add	r1, sp, #4
    aa3e:	4811      	ldr	r0, [pc, #68]	; (aa84 <enable_interrupts+0x50>)
    aa40:	4b11      	ldr	r3, [pc, #68]	; (aa88 <enable_interrupts+0x54>)
    aa42:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    aa44:	2800      	cmp	r0, #0
    aa46:	d001      	beq.n	aa4c <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    aa48:	b003      	add	sp, #12
    aa4a:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    aa4c:	2180      	movs	r1, #128	; 0x80
    aa4e:	0049      	lsls	r1, r1, #1
    aa50:	9b01      	ldr	r3, [sp, #4]
    aa52:	4319      	orrs	r1, r3
    aa54:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    aa56:	480b      	ldr	r0, [pc, #44]	; (aa84 <enable_interrupts+0x50>)
    aa58:	4b0c      	ldr	r3, [pc, #48]	; (aa8c <enable_interrupts+0x58>)
    aa5a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    aa5c:	2800      	cmp	r0, #0
    aa5e:	d1f3      	bne.n	aa48 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    aa60:	a901      	add	r1, sp, #4
    aa62:	20d0      	movs	r0, #208	; 0xd0
    aa64:	0140      	lsls	r0, r0, #5
    aa66:	4b08      	ldr	r3, [pc, #32]	; (aa88 <enable_interrupts+0x54>)
    aa68:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    aa6a:	2800      	cmp	r0, #0
    aa6c:	d1ec      	bne.n	aa48 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    aa6e:	2180      	movs	r1, #128	; 0x80
    aa70:	0249      	lsls	r1, r1, #9
    aa72:	9b01      	ldr	r3, [sp, #4]
    aa74:	4319      	orrs	r1, r3
    aa76:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    aa78:	20d0      	movs	r0, #208	; 0xd0
    aa7a:	0140      	lsls	r0, r0, #5
    aa7c:	4b03      	ldr	r3, [pc, #12]	; (aa8c <enable_interrupts+0x58>)
    aa7e:	4798      	blx	r3
    aa80:	e7e2      	b.n	aa48 <enable_interrupts+0x14>
    aa82:	46c0      	nop			; (mov r8, r8)
    aa84:	00001408 	.word	0x00001408
    aa88:	0000aee1 	.word	0x0000aee1
    aa8c:	0000aeed 	.word	0x0000aeed

0000aa90 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    aa90:	b510      	push	{r4, lr}
    aa92:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    aa94:	4b28      	ldr	r3, [pc, #160]	; (ab38 <nmi_get_chipid+0xa8>)
    aa96:	681c      	ldr	r4, [r3, #0]
    aa98:	2c00      	cmp	r4, #0
    aa9a:	d004      	beq.n	aaa6 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    aa9c:	4b26      	ldr	r3, [pc, #152]	; (ab38 <nmi_get_chipid+0xa8>)
    aa9e:	681c      	ldr	r4, [r3, #0]
}
    aaa0:	0020      	movs	r0, r4
    aaa2:	b002      	add	sp, #8
    aaa4:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    aaa6:	0019      	movs	r1, r3
    aaa8:	2080      	movs	r0, #128	; 0x80
    aaaa:	0140      	lsls	r0, r0, #5
    aaac:	4b23      	ldr	r3, [pc, #140]	; (ab3c <nmi_get_chipid+0xac>)
    aaae:	4798      	blx	r3
    aab0:	2800      	cmp	r0, #0
    aab2:	d003      	beq.n	aabc <nmi_get_chipid+0x2c>
			chipid = 0;
    aab4:	2200      	movs	r2, #0
    aab6:	4b20      	ldr	r3, [pc, #128]	; (ab38 <nmi_get_chipid+0xa8>)
    aab8:	601a      	str	r2, [r3, #0]
			return 0;
    aaba:	e7f1      	b.n	aaa0 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    aabc:	a901      	add	r1, sp, #4
    aabe:	4820      	ldr	r0, [pc, #128]	; (ab40 <nmi_get_chipid+0xb0>)
    aac0:	4b1e      	ldr	r3, [pc, #120]	; (ab3c <nmi_get_chipid+0xac>)
    aac2:	4798      	blx	r3
    aac4:	2800      	cmp	r0, #0
    aac6:	d003      	beq.n	aad0 <nmi_get_chipid+0x40>
			chipid = 0;
    aac8:	2200      	movs	r2, #0
    aaca:	4b1b      	ldr	r3, [pc, #108]	; (ab38 <nmi_get_chipid+0xa8>)
    aacc:	601a      	str	r2, [r3, #0]
			return 0;
    aace:	e7e7      	b.n	aaa0 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    aad0:	4b19      	ldr	r3, [pc, #100]	; (ab38 <nmi_get_chipid+0xa8>)
    aad2:	681b      	ldr	r3, [r3, #0]
    aad4:	4a1b      	ldr	r2, [pc, #108]	; (ab44 <nmi_get_chipid+0xb4>)
    aad6:	4293      	cmp	r3, r2
    aad8:	d00e      	beq.n	aaf8 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    aada:	4a1b      	ldr	r2, [pc, #108]	; (ab48 <nmi_get_chipid+0xb8>)
    aadc:	4293      	cmp	r3, r2
    aade:	d012      	beq.n	ab06 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    aae0:	4a1a      	ldr	r2, [pc, #104]	; (ab4c <nmi_get_chipid+0xbc>)
    aae2:	4293      	cmp	r3, r2
    aae4:	d01c      	beq.n	ab20 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    aae6:	4914      	ldr	r1, [pc, #80]	; (ab38 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    aae8:	4a19      	ldr	r2, [pc, #100]	; (ab50 <nmi_get_chipid+0xc0>)
    aaea:	680b      	ldr	r3, [r1, #0]
    aaec:	401a      	ands	r2, r3
		chipid |= 0x050000;
    aaee:	23a0      	movs	r3, #160	; 0xa0
    aaf0:	02db      	lsls	r3, r3, #11
    aaf2:	4313      	orrs	r3, r2
    aaf4:	600b      	str	r3, [r1, #0]
    aaf6:	e7d1      	b.n	aa9c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    aaf8:	9b01      	ldr	r3, [sp, #4]
    aafa:	2b01      	cmp	r3, #1
    aafc:	d0f3      	beq.n	aae6 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    aafe:	4a15      	ldr	r2, [pc, #84]	; (ab54 <nmi_get_chipid+0xc4>)
    ab00:	4b0d      	ldr	r3, [pc, #52]	; (ab38 <nmi_get_chipid+0xa8>)
    ab02:	601a      	str	r2, [r3, #0]
    ab04:	e7ef      	b.n	aae6 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    ab06:	9b01      	ldr	r3, [sp, #4]
    ab08:	2b03      	cmp	r3, #3
    ab0a:	d0ec      	beq.n	aae6 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    ab0c:	2b04      	cmp	r3, #4
    ab0e:	d003      	beq.n	ab18 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    ab10:	4a11      	ldr	r2, [pc, #68]	; (ab58 <nmi_get_chipid+0xc8>)
    ab12:	4b09      	ldr	r3, [pc, #36]	; (ab38 <nmi_get_chipid+0xa8>)
    ab14:	601a      	str	r2, [r3, #0]
    ab16:	e7e6      	b.n	aae6 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    ab18:	4a10      	ldr	r2, [pc, #64]	; (ab5c <nmi_get_chipid+0xcc>)
    ab1a:	4b07      	ldr	r3, [pc, #28]	; (ab38 <nmi_get_chipid+0xa8>)
    ab1c:	601a      	str	r2, [r3, #0]
    ab1e:	e7e2      	b.n	aae6 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    ab20:	4905      	ldr	r1, [pc, #20]	; (ab38 <nmi_get_chipid+0xa8>)
    ab22:	20ec      	movs	r0, #236	; 0xec
    ab24:	0380      	lsls	r0, r0, #14
    ab26:	4b05      	ldr	r3, [pc, #20]	; (ab3c <nmi_get_chipid+0xac>)
    ab28:	4798      	blx	r3
    ab2a:	2800      	cmp	r0, #0
    ab2c:	d0db      	beq.n	aae6 <nmi_get_chipid+0x56>
			chipid = 0;
    ab2e:	2200      	movs	r2, #0
    ab30:	4b01      	ldr	r3, [pc, #4]	; (ab38 <nmi_get_chipid+0xa8>)
    ab32:	601a      	str	r2, [r3, #0]
			return 0;
    ab34:	e7b4      	b.n	aaa0 <nmi_get_chipid+0x10>
    ab36:	46c0      	nop			; (mov r8, r8)
    ab38:	20000264 	.word	0x20000264
    ab3c:	0000aee1 	.word	0x0000aee1
    ab40:	000013f4 	.word	0x000013f4
    ab44:	001002a0 	.word	0x001002a0
    ab48:	001002b0 	.word	0x001002b0
    ab4c:	001000f0 	.word	0x001000f0
    ab50:	fff0ffff 	.word	0xfff0ffff
    ab54:	001002a1 	.word	0x001002a1
    ab58:	001002b2 	.word	0x001002b2
    ab5c:	001002b1 	.word	0x001002b1

0000ab60 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    ab60:	b530      	push	{r4, r5, lr}
    ab62:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    ab64:	4c16      	ldr	r4, [pc, #88]	; (abc0 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    ab66:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    ab68:	a901      	add	r1, sp, #4
    ab6a:	2010      	movs	r0, #16
    ab6c:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    ab6e:	2800      	cmp	r0, #0
    ab70:	d11c      	bne.n	abac <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    ab72:	9b01      	ldr	r3, [sp, #4]
    ab74:	422b      	tst	r3, r5
    ab76:	d1f7      	bne.n	ab68 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    ab78:	a901      	add	r1, sp, #4
    ab7a:	3001      	adds	r0, #1
    ab7c:	4b10      	ldr	r3, [pc, #64]	; (abc0 <chip_sleep+0x60>)
    ab7e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    ab80:	2800      	cmp	r0, #0
    ab82:	d113      	bne.n	abac <chip_sleep+0x4c>
	if(reg & NBIT1)
    ab84:	9901      	ldr	r1, [sp, #4]
    ab86:	078b      	lsls	r3, r1, #30
    ab88:	d507      	bpl.n	ab9a <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    ab8a:	2302      	movs	r3, #2
    ab8c:	4399      	bics	r1, r3
    ab8e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    ab90:	3001      	adds	r0, #1
    ab92:	4b0c      	ldr	r3, [pc, #48]	; (abc4 <chip_sleep+0x64>)
    ab94:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    ab96:	2800      	cmp	r0, #0
    ab98:	d108      	bne.n	abac <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    ab9a:	a901      	add	r1, sp, #4
    ab9c:	200b      	movs	r0, #11
    ab9e:	4b08      	ldr	r3, [pc, #32]	; (abc0 <chip_sleep+0x60>)
    aba0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    aba2:	2800      	cmp	r0, #0
    aba4:	d102      	bne.n	abac <chip_sleep+0x4c>
	if(reg & NBIT0)
    aba6:	9901      	ldr	r1, [sp, #4]
    aba8:	07cb      	lsls	r3, r1, #31
    abaa:	d401      	bmi.n	abb0 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    abac:	b003      	add	sp, #12
    abae:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    abb0:	2301      	movs	r3, #1
    abb2:	4399      	bics	r1, r3
    abb4:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    abb6:	300b      	adds	r0, #11
    abb8:	4b02      	ldr	r3, [pc, #8]	; (abc4 <chip_sleep+0x64>)
    abba:	4798      	blx	r3
    abbc:	e7f6      	b.n	abac <chip_sleep+0x4c>
    abbe:	46c0      	nop			; (mov r8, r8)
    abc0:	0000aee1 	.word	0x0000aee1
    abc4:	0000aeed 	.word	0x0000aeed

0000abc8 <chip_wake>:
sint8 chip_wake(void)
{
    abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    abca:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    abcc:	2300      	movs	r3, #0
    abce:	9301      	str	r3, [sp, #4]
    abd0:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    abd2:	a901      	add	r1, sp, #4
    abd4:	200b      	movs	r0, #11
    abd6:	4b28      	ldr	r3, [pc, #160]	; (ac78 <chip_wake+0xb0>)
    abd8:	4798      	blx	r3
    abda:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    abdc:	d130      	bne.n	ac40 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    abde:	9901      	ldr	r1, [sp, #4]
    abe0:	07cb      	lsls	r3, r1, #31
    abe2:	d406      	bmi.n	abf2 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    abe4:	2301      	movs	r3, #1
    abe6:	4319      	orrs	r1, r3
    abe8:	200b      	movs	r0, #11
    abea:	4b24      	ldr	r3, [pc, #144]	; (ac7c <chip_wake+0xb4>)
    abec:	4798      	blx	r3
    abee:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    abf0:	d126      	bne.n	ac40 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    abf2:	a901      	add	r1, sp, #4
    abf4:	2001      	movs	r0, #1
    abf6:	4b20      	ldr	r3, [pc, #128]	; (ac78 <chip_wake+0xb0>)
    abf8:	4798      	blx	r3
    abfa:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    abfc:	d120      	bne.n	ac40 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    abfe:	9901      	ldr	r1, [sp, #4]
    ac00:	078b      	lsls	r3, r1, #30
    ac02:	d520      	bpl.n	ac46 <chip_wake+0x7e>
{
    ac04:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    ac06:	4f1c      	ldr	r7, [pc, #112]	; (ac78 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    ac08:	4e1d      	ldr	r6, [pc, #116]	; (ac80 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    ac0a:	4669      	mov	r1, sp
    ac0c:	200f      	movs	r0, #15
    ac0e:	47b8      	blx	r7
    ac10:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    ac12:	d120      	bne.n	ac56 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    ac14:	9b00      	ldr	r3, [sp, #0]
    ac16:	075b      	lsls	r3, r3, #29
    ac18:	d42b      	bmi.n	ac72 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    ac1a:	2002      	movs	r0, #2
    ac1c:	47b0      	blx	r6
    ac1e:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    ac20:	2d00      	cmp	r5, #0
    ac22:	d1f2      	bne.n	ac0a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    ac24:	22af      	movs	r2, #175	; 0xaf
    ac26:	0052      	lsls	r2, r2, #1
    ac28:	4916      	ldr	r1, [pc, #88]	; (ac84 <chip_wake+0xbc>)
    ac2a:	4817      	ldr	r0, [pc, #92]	; (ac88 <chip_wake+0xc0>)
    ac2c:	4b17      	ldr	r3, [pc, #92]	; (ac8c <chip_wake+0xc4>)
    ac2e:	4798      	blx	r3
    ac30:	4817      	ldr	r0, [pc, #92]	; (ac90 <chip_wake+0xc8>)
    ac32:	4b18      	ldr	r3, [pc, #96]	; (ac94 <chip_wake+0xcc>)
    ac34:	4798      	blx	r3
    ac36:	200d      	movs	r0, #13
    ac38:	4b17      	ldr	r3, [pc, #92]	; (ac98 <chip_wake+0xd0>)
    ac3a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    ac3c:	2404      	movs	r4, #4
    ac3e:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    ac40:	0020      	movs	r0, r4
    ac42:	b003      	add	sp, #12
    ac44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    ac46:	2302      	movs	r3, #2
    ac48:	4319      	orrs	r1, r3
    ac4a:	2001      	movs	r0, #1
    ac4c:	4b0b      	ldr	r3, [pc, #44]	; (ac7c <chip_wake+0xb4>)
    ac4e:	4798      	blx	r3
    ac50:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    ac52:	d0d7      	beq.n	ac04 <chip_wake+0x3c>
    ac54:	e7f4      	b.n	ac40 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    ac56:	22aa      	movs	r2, #170	; 0xaa
    ac58:	0052      	lsls	r2, r2, #1
    ac5a:	490a      	ldr	r1, [pc, #40]	; (ac84 <chip_wake+0xbc>)
    ac5c:	480a      	ldr	r0, [pc, #40]	; (ac88 <chip_wake+0xc0>)
    ac5e:	4d0b      	ldr	r5, [pc, #44]	; (ac8c <chip_wake+0xc4>)
    ac60:	47a8      	blx	r5
    ac62:	9a00      	ldr	r2, [sp, #0]
    ac64:	0021      	movs	r1, r4
    ac66:	480d      	ldr	r0, [pc, #52]	; (ac9c <chip_wake+0xd4>)
    ac68:	47a8      	blx	r5
    ac6a:	200d      	movs	r0, #13
    ac6c:	4b0a      	ldr	r3, [pc, #40]	; (ac98 <chip_wake+0xd0>)
    ac6e:	4798      	blx	r3
			goto _WAKE_EXIT;
    ac70:	e7e6      	b.n	ac40 <chip_wake+0x78>
	nm_bus_reset();
    ac72:	4b0b      	ldr	r3, [pc, #44]	; (aca0 <chip_wake+0xd8>)
    ac74:	4798      	blx	r3
    ac76:	e7e3      	b.n	ac40 <chip_wake+0x78>
    ac78:	0000aee1 	.word	0x0000aee1
    ac7c:	0000aeed 	.word	0x0000aeed
    ac80:	00009651 	.word	0x00009651
    ac84:	00012f0c 	.word	0x00012f0c
    ac88:	000129cc 	.word	0x000129cc
    ac8c:	00010319 	.word	0x00010319
    ac90:	00012f54 	.word	0x00012f54
    ac94:	00010435 	.word	0x00010435
    ac98:	0001034d 	.word	0x0001034d
    ac9c:	00012f3c 	.word	0x00012f3c
    aca0:	0000aec9 	.word	0x0000aec9

0000aca4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aca6:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    aca8:	4d2d      	ldr	r5, [pc, #180]	; (ad60 <wait_for_bootrom+0xbc>)
    acaa:	4c2e      	ldr	r4, [pc, #184]	; (ad64 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    acac:	4e2e      	ldr	r6, [pc, #184]	; (ad68 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    acae:	0028      	movs	r0, r5
    acb0:	47a0      	blx	r4
		if (reg & 0x80000000) {
    acb2:	2800      	cmp	r0, #0
    acb4:	db02      	blt.n	acbc <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    acb6:	2001      	movs	r0, #1
    acb8:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    acba:	e7f8      	b.n	acae <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    acbc:	482b      	ldr	r0, [pc, #172]	; (ad6c <wait_for_bootrom+0xc8>)
    acbe:	4b29      	ldr	r3, [pc, #164]	; (ad64 <wait_for_bootrom+0xc0>)
    acc0:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    acc2:	07c3      	lsls	r3, r0, #31
    acc4:	d409      	bmi.n	acda <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    acc6:	4e28      	ldr	r6, [pc, #160]	; (ad68 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    acc8:	4c29      	ldr	r4, [pc, #164]	; (ad70 <wait_for_bootrom+0xcc>)
    acca:	4d26      	ldr	r5, [pc, #152]	; (ad64 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    accc:	2001      	movs	r0, #1
    acce:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    acd0:	0020      	movs	r0, r4
    acd2:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    acd4:	4b27      	ldr	r3, [pc, #156]	; (ad74 <wait_for_bootrom+0xd0>)
    acd6:	4298      	cmp	r0, r3
    acd8:	d1f8      	bne.n	accc <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    acda:	2f02      	cmp	r7, #2
    acdc:	d021      	beq.n	ad22 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    acde:	2f03      	cmp	r7, #3
    ace0:	d029      	beq.n	ad36 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    ace2:	2f04      	cmp	r7, #4
    ace4:	d030      	beq.n	ad48 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    ace6:	4924      	ldr	r1, [pc, #144]	; (ad78 <wait_for_bootrom+0xd4>)
    ace8:	4824      	ldr	r0, [pc, #144]	; (ad7c <wait_for_bootrom+0xd8>)
    acea:	4b25      	ldr	r3, [pc, #148]	; (ad80 <wait_for_bootrom+0xdc>)
    acec:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    acee:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    acf0:	4b24      	ldr	r3, [pc, #144]	; (ad84 <wait_for_bootrom+0xe0>)
    acf2:	4798      	blx	r3
    acf4:	0500      	lsls	r0, r0, #20
    acf6:	0d00      	lsrs	r0, r0, #20
    acf8:	4b23      	ldr	r3, [pc, #140]	; (ad88 <wait_for_bootrom+0xe4>)
    acfa:	4298      	cmp	r0, r3
    acfc:	d82a      	bhi.n	ad54 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    acfe:	0020      	movs	r0, r4
    ad00:	4b22      	ldr	r3, [pc, #136]	; (ad8c <wait_for_bootrom+0xe8>)
    ad02:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    ad04:	4822      	ldr	r0, [pc, #136]	; (ad90 <wait_for_bootrom+0xec>)
    ad06:	4c23      	ldr	r4, [pc, #140]	; (ad94 <wait_for_bootrom+0xf0>)
    ad08:	47a0      	blx	r4
    ad0a:	491b      	ldr	r1, [pc, #108]	; (ad78 <wait_for_bootrom+0xd4>)
    ad0c:	4822      	ldr	r0, [pc, #136]	; (ad98 <wait_for_bootrom+0xf4>)
    ad0e:	47a0      	blx	r4
    ad10:	200d      	movs	r0, #13
    ad12:	4b22      	ldr	r3, [pc, #136]	; (ad9c <wait_for_bootrom+0xf8>)
    ad14:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    ad16:	4922      	ldr	r1, [pc, #136]	; (ada0 <wait_for_bootrom+0xfc>)
    ad18:	4815      	ldr	r0, [pc, #84]	; (ad70 <wait_for_bootrom+0xcc>)
    ad1a:	4b19      	ldr	r3, [pc, #100]	; (ad80 <wait_for_bootrom+0xdc>)
    ad1c:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    ad1e:	2000      	movs	r0, #0
    ad20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ad22:	4920      	ldr	r1, [pc, #128]	; (ada4 <wait_for_bootrom+0x100>)
    ad24:	4820      	ldr	r0, [pc, #128]	; (ada8 <wait_for_bootrom+0x104>)
    ad26:	4c16      	ldr	r4, [pc, #88]	; (ad80 <wait_for_bootrom+0xdc>)
    ad28:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    ad2a:	2180      	movs	r1, #128	; 0x80
    ad2c:	0349      	lsls	r1, r1, #13
    ad2e:	4813      	ldr	r0, [pc, #76]	; (ad7c <wait_for_bootrom+0xd8>)
    ad30:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    ad32:	2400      	movs	r4, #0
    ad34:	e7dc      	b.n	acf0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ad36:	491b      	ldr	r1, [pc, #108]	; (ada4 <wait_for_bootrom+0x100>)
    ad38:	481b      	ldr	r0, [pc, #108]	; (ada8 <wait_for_bootrom+0x104>)
    ad3a:	4c11      	ldr	r4, [pc, #68]	; (ad80 <wait_for_bootrom+0xdc>)
    ad3c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    ad3e:	2100      	movs	r1, #0
    ad40:	480e      	ldr	r0, [pc, #56]	; (ad7c <wait_for_bootrom+0xd8>)
    ad42:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    ad44:	2400      	movs	r4, #0
    ad46:	e7d3      	b.n	acf0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    ad48:	490b      	ldr	r1, [pc, #44]	; (ad78 <wait_for_bootrom+0xd4>)
    ad4a:	480c      	ldr	r0, [pc, #48]	; (ad7c <wait_for_bootrom+0xd8>)
    ad4c:	4b0c      	ldr	r3, [pc, #48]	; (ad80 <wait_for_bootrom+0xdc>)
    ad4e:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    ad50:	2480      	movs	r4, #128	; 0x80
    ad52:	e7cd      	b.n	acf0 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    ad54:	2002      	movs	r0, #2
    ad56:	4320      	orrs	r0, r4
    ad58:	4b0c      	ldr	r3, [pc, #48]	; (ad8c <wait_for_bootrom+0xe8>)
    ad5a:	4798      	blx	r3
    ad5c:	e7d2      	b.n	ad04 <wait_for_bootrom+0x60>
    ad5e:	46c0      	nop			; (mov r8, r8)
    ad60:	00001014 	.word	0x00001014
    ad64:	0000aed5 	.word	0x0000aed5
    ad68:	00009651 	.word	0x00009651
    ad6c:	000207bc 	.word	0x000207bc
    ad70:	000c000c 	.word	0x000c000c
    ad74:	10add09e 	.word	0x10add09e
    ad78:	13521352 	.word	0x13521352
    ad7c:	0000108c 	.word	0x0000108c
    ad80:	0000aeed 	.word	0x0000aeed
    ad84:	0000aa91 	.word	0x0000aa91
    ad88:	0000039f 	.word	0x0000039f
    ad8c:	0000a9fd 	.word	0x0000a9fd
    ad90:	00012cfc 	.word	0x00012cfc
    ad94:	00010319 	.word	0x00010319
    ad98:	00012f70 	.word	0x00012f70
    ad9c:	0001034d 	.word	0x0001034d
    ada0:	ef522f61 	.word	0xef522f61
    ada4:	3c1cd57d 	.word	0x3c1cd57d
    ada8:	000207ac 	.word	0x000207ac

0000adac <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    adac:	b570      	push	{r4, r5, r6, lr}
    adae:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    adb0:	4b15      	ldr	r3, [pc, #84]	; (ae08 <wait_for_firmware_start+0x5c>)
    adb2:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    adb4:	4b15      	ldr	r3, [pc, #84]	; (ae0c <wait_for_firmware_start+0x60>)
    adb6:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    adb8:	3802      	subs	r0, #2
    adba:	2801      	cmp	r0, #1
    adbc:	d911      	bls.n	ade2 <wait_for_firmware_start+0x36>
{
    adbe:	2401      	movs	r4, #1
    adc0:	4264      	negs	r4, r4
    adc2:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    adc4:	4e12      	ldr	r6, [pc, #72]	; (ae10 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    adc6:	4d13      	ldr	r5, [pc, #76]	; (ae14 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    adc8:	9b00      	ldr	r3, [sp, #0]
    adca:	4298      	cmp	r0, r3
    adcc:	d00e      	beq.n	adec <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    adce:	2002      	movs	r0, #2
    add0:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    add2:	9801      	ldr	r0, [sp, #4]
    add4:	47a8      	blx	r5
    add6:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    add8:	2c00      	cmp	r4, #0
    adda:	d1f5      	bne.n	adc8 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    addc:	2005      	movs	r0, #5
    adde:	4240      	negs	r0, r0
    ade0:	e009      	b.n	adf6 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    ade2:	4b0d      	ldr	r3, [pc, #52]	; (ae18 <wait_for_firmware_start+0x6c>)
    ade4:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    ade6:	4b0d      	ldr	r3, [pc, #52]	; (ae1c <wait_for_firmware_start+0x70>)
    ade8:	9300      	str	r3, [sp, #0]
    adea:	e7e8      	b.n	adbe <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    adec:	9a00      	ldr	r2, [sp, #0]
    adee:	4b07      	ldr	r3, [pc, #28]	; (ae0c <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    adf0:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    adf2:	429a      	cmp	r2, r3
    adf4:	d001      	beq.n	adfa <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    adf6:	b002      	add	sp, #8
    adf8:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    adfa:	2100      	movs	r1, #0
    adfc:	4802      	ldr	r0, [pc, #8]	; (ae08 <wait_for_firmware_start+0x5c>)
    adfe:	4b08      	ldr	r3, [pc, #32]	; (ae20 <wait_for_firmware_start+0x74>)
    ae00:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    ae02:	2000      	movs	r0, #0
    ae04:	e7f7      	b.n	adf6 <wait_for_firmware_start+0x4a>
    ae06:	46c0      	nop			; (mov r8, r8)
    ae08:	0000108c 	.word	0x0000108c
    ae0c:	02532636 	.word	0x02532636
    ae10:	00009651 	.word	0x00009651
    ae14:	0000aed5 	.word	0x0000aed5
    ae18:	000207ac 	.word	0x000207ac
    ae1c:	d75dc1c3 	.word	0xd75dc1c3
    ae20:	0000aeed 	.word	0x0000aeed

0000ae24 <chip_deinit>:

sint8 chip_deinit(void)
{
    ae24:	b510      	push	{r4, lr}
    ae26:	b082      	sub	sp, #8
	uint32 reg = 0;
    ae28:	2300      	movs	r3, #0
    ae2a:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    ae2c:	a901      	add	r1, sp, #4
    ae2e:	20a0      	movs	r0, #160	; 0xa0
    ae30:	0140      	lsls	r0, r0, #5
    ae32:	4b14      	ldr	r3, [pc, #80]	; (ae84 <chip_deinit+0x60>)
    ae34:	4798      	blx	r3
    ae36:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    ae38:	d115      	bne.n	ae66 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    ae3a:	4913      	ldr	r1, [pc, #76]	; (ae88 <chip_deinit+0x64>)
    ae3c:	9b01      	ldr	r3, [sp, #4]
    ae3e:	4019      	ands	r1, r3
    ae40:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    ae42:	20a0      	movs	r0, #160	; 0xa0
    ae44:	0140      	lsls	r0, r0, #5
    ae46:	4b11      	ldr	r3, [pc, #68]	; (ae8c <chip_deinit+0x68>)
    ae48:	4798      	blx	r3
    ae4a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    ae4c:	d016      	beq.n	ae7c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    ae4e:	4a10      	ldr	r2, [pc, #64]	; (ae90 <chip_deinit+0x6c>)
    ae50:	4910      	ldr	r1, [pc, #64]	; (ae94 <chip_deinit+0x70>)
    ae52:	4811      	ldr	r0, [pc, #68]	; (ae98 <chip_deinit+0x74>)
    ae54:	4b11      	ldr	r3, [pc, #68]	; (ae9c <chip_deinit+0x78>)
    ae56:	4798      	blx	r3
    ae58:	4811      	ldr	r0, [pc, #68]	; (aea0 <chip_deinit+0x7c>)
    ae5a:	4b12      	ldr	r3, [pc, #72]	; (aea4 <chip_deinit+0x80>)
    ae5c:	4798      	blx	r3
    ae5e:	200d      	movs	r0, #13
    ae60:	4b11      	ldr	r3, [pc, #68]	; (aea8 <chip_deinit+0x84>)
    ae62:	4798      	blx	r3
		goto ERR1;
    ae64:	e00a      	b.n	ae7c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    ae66:	4a11      	ldr	r2, [pc, #68]	; (aeac <chip_deinit+0x88>)
    ae68:	490a      	ldr	r1, [pc, #40]	; (ae94 <chip_deinit+0x70>)
    ae6a:	480b      	ldr	r0, [pc, #44]	; (ae98 <chip_deinit+0x74>)
    ae6c:	4b0b      	ldr	r3, [pc, #44]	; (ae9c <chip_deinit+0x78>)
    ae6e:	4798      	blx	r3
    ae70:	480b      	ldr	r0, [pc, #44]	; (aea0 <chip_deinit+0x7c>)
    ae72:	4b0c      	ldr	r3, [pc, #48]	; (aea4 <chip_deinit+0x80>)
    ae74:	4798      	blx	r3
    ae76:	200d      	movs	r0, #13
    ae78:	4b0b      	ldr	r3, [pc, #44]	; (aea8 <chip_deinit+0x84>)
    ae7a:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    ae7c:	0020      	movs	r0, r4
    ae7e:	b002      	add	sp, #8
    ae80:	bd10      	pop	{r4, pc}
    ae82:	46c0      	nop			; (mov r8, r8)
    ae84:	0000aee1 	.word	0x0000aee1
    ae88:	fffffbff 	.word	0xfffffbff
    ae8c:	0000aeed 	.word	0x0000aeed
    ae90:	0000020b 	.word	0x0000020b
    ae94:	00012f18 	.word	0x00012f18
    ae98:	000129cc 	.word	0x000129cc
    ae9c:	00010319 	.word	0x00010319
    aea0:	00012f24 	.word	0x00012f24
    aea4:	00010435 	.word	0x00010435
    aea8:	0001034d 	.word	0x0001034d
    aeac:	00000205 	.word	0x00000205

0000aeb0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    aeb0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    aeb2:	4b01      	ldr	r3, [pc, #4]	; (aeb8 <nm_bus_iface_init+0x8>)
    aeb4:	4798      	blx	r3
	return ret;
}
    aeb6:	bd10      	pop	{r4, pc}
    aeb8:	00009789 	.word	0x00009789

0000aebc <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    aebc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    aebe:	4b01      	ldr	r3, [pc, #4]	; (aec4 <nm_bus_iface_deinit+0x8>)
    aec0:	4798      	blx	r3

	return ret;
}
    aec2:	bd10      	pop	{r4, pc}
    aec4:	000099d9 	.word	0x000099d9

0000aec8 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    aec8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    aeca:	4b01      	ldr	r3, [pc, #4]	; (aed0 <nm_bus_reset+0x8>)
    aecc:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    aece:	bd10      	pop	{r4, pc}
    aed0:	0000b879 	.word	0x0000b879

0000aed4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    aed4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    aed6:	4b01      	ldr	r3, [pc, #4]	; (aedc <nm_read_reg+0x8>)
    aed8:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    aeda:	bd10      	pop	{r4, pc}
    aedc:	0000b8b1 	.word	0x0000b8b1

0000aee0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    aee0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    aee2:	4b01      	ldr	r3, [pc, #4]	; (aee8 <nm_read_reg_with_ret+0x8>)
    aee4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    aee6:	bd10      	pop	{r4, pc}
    aee8:	0000b8c5 	.word	0x0000b8c5

0000aeec <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    aeec:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    aeee:	4b01      	ldr	r3, [pc, #4]	; (aef4 <nm_write_reg+0x8>)
    aef0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    aef2:	bd10      	pop	{r4, pc}
    aef4:	0000b8dd 	.word	0x0000b8dd

0000aef8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    aef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aefa:	46d6      	mov	lr, sl
    aefc:	464f      	mov	r7, r9
    aefe:	4646      	mov	r6, r8
    af00:	b5c0      	push	{r6, r7, lr}
    af02:	b082      	sub	sp, #8
    af04:	4680      	mov	r8, r0
    af06:	4689      	mov	r9, r1
    af08:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    af0a:	4b13      	ldr	r3, [pc, #76]	; (af58 <nm_read_block+0x60>)
    af0c:	881f      	ldrh	r7, [r3, #0]
    af0e:	3f08      	subs	r7, #8
    af10:	b2bb      	uxth	r3, r7
    af12:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    af14:	001e      	movs	r6, r3
    af16:	0004      	movs	r4, r0
    af18:	429a      	cmp	r2, r3
    af1a:	d91a      	bls.n	af52 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    af1c:	4b0f      	ldr	r3, [pc, #60]	; (af5c <nm_read_block+0x64>)
    af1e:	469a      	mov	sl, r3
    af20:	1a37      	subs	r7, r6, r0
    af22:	4643      	mov	r3, r8
    af24:	1ae1      	subs	r1, r4, r3
    af26:	4449      	add	r1, r9
    af28:	9a01      	ldr	r2, [sp, #4]
    af2a:	0020      	movs	r0, r4
    af2c:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    af2e:	2800      	cmp	r0, #0
    af30:	d109      	bne.n	af46 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    af32:	1bad      	subs	r5, r5, r6
    af34:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    af36:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    af38:	42b5      	cmp	r5, r6
    af3a:	d8f2      	bhi.n	af22 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    af3c:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    af3e:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    af40:	0020      	movs	r0, r4
    af42:	4b06      	ldr	r3, [pc, #24]	; (af5c <nm_read_block+0x64>)
    af44:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    af46:	b002      	add	sp, #8
    af48:	bc1c      	pop	{r2, r3, r4}
    af4a:	4690      	mov	r8, r2
    af4c:	4699      	mov	r9, r3
    af4e:	46a2      	mov	sl, r4
    af50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    af52:	2100      	movs	r1, #0
    af54:	e7f2      	b.n	af3c <nm_read_block+0x44>
    af56:	46c0      	nop			; (mov r8, r8)
    af58:	20000008 	.word	0x20000008
    af5c:	0000ba21 	.word	0x0000ba21

0000af60 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    af60:	b5f0      	push	{r4, r5, r6, r7, lr}
    af62:	46d6      	mov	lr, sl
    af64:	464f      	mov	r7, r9
    af66:	4646      	mov	r6, r8
    af68:	b5c0      	push	{r6, r7, lr}
    af6a:	b082      	sub	sp, #8
    af6c:	4680      	mov	r8, r0
    af6e:	4689      	mov	r9, r1
    af70:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    af72:	4b13      	ldr	r3, [pc, #76]	; (afc0 <nm_write_block+0x60>)
    af74:	881f      	ldrh	r7, [r3, #0]
    af76:	3f08      	subs	r7, #8
    af78:	b2bb      	uxth	r3, r7
    af7a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    af7c:	001e      	movs	r6, r3
    af7e:	0004      	movs	r4, r0
    af80:	429a      	cmp	r2, r3
    af82:	d91a      	bls.n	afba <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    af84:	4b0f      	ldr	r3, [pc, #60]	; (afc4 <nm_write_block+0x64>)
    af86:	469a      	mov	sl, r3
    af88:	1a37      	subs	r7, r6, r0
    af8a:	4643      	mov	r3, r8
    af8c:	1ae1      	subs	r1, r4, r3
    af8e:	4449      	add	r1, r9
    af90:	9a01      	ldr	r2, [sp, #4]
    af92:	0020      	movs	r0, r4
    af94:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    af96:	2800      	cmp	r0, #0
    af98:	d109      	bne.n	afae <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    af9a:	1bad      	subs	r5, r5, r6
    af9c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    af9e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    afa0:	42b5      	cmp	r5, r6
    afa2:	d8f2      	bhi.n	af8a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    afa4:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    afa6:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    afa8:	0020      	movs	r0, r4
    afaa:	4b06      	ldr	r3, [pc, #24]	; (afc4 <nm_write_block+0x64>)
    afac:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    afae:	b002      	add	sp, #8
    afb0:	bc1c      	pop	{r2, r3, r4}
    afb2:	4690      	mov	r8, r2
    afb4:	4699      	mov	r9, r3
    afb6:	46a2      	mov	sl, r4
    afb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    afba:	2100      	movs	r1, #0
    afbc:	e7f2      	b.n	afa4 <nm_write_block+0x44>
    afbe:	46c0      	nop			; (mov r8, r8)
    afc0:	20000008 	.word	0x20000008
    afc4:	0000bb7d 	.word	0x0000bb7d

0000afc8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    afc8:	b570      	push	{r4, r5, r6, lr}
    afca:	b084      	sub	sp, #16
    afcc:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    afce:	2300      	movs	r3, #0
    afd0:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    afd2:	2208      	movs	r2, #8
    afd4:	2100      	movs	r1, #0
    afd6:	a801      	add	r0, sp, #4
    afd8:	4b2d      	ldr	r3, [pc, #180]	; (b090 <nm_get_firmware_full_info+0xc8>)
    afda:	4798      	blx	r3
	if (pstrRev != NULL)
    afdc:	2c00      	cmp	r4, #0
    afde:	d044      	beq.n	b06a <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    afe0:	2228      	movs	r2, #40	; 0x28
    afe2:	2100      	movs	r1, #0
    afe4:	0020      	movs	r0, r4
    afe6:	4b2b      	ldr	r3, [pc, #172]	; (b094 <nm_get_firmware_full_info+0xcc>)
    afe8:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    afea:	a903      	add	r1, sp, #12
    afec:	482a      	ldr	r0, [pc, #168]	; (b098 <nm_get_firmware_full_info+0xd0>)
    afee:	4b2b      	ldr	r3, [pc, #172]	; (b09c <nm_get_firmware_full_info+0xd4>)
    aff0:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    aff2:	2800      	cmp	r0, #0
    aff4:	d13a      	bne.n	b06c <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    aff6:	9b03      	ldr	r3, [sp, #12]
    aff8:	2b00      	cmp	r3, #0
    affa:	d039      	beq.n	b070 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    affc:	20c0      	movs	r0, #192	; 0xc0
    affe:	0280      	lsls	r0, r0, #10
    b000:	4318      	orrs	r0, r3
    b002:	2208      	movs	r2, #8
    b004:	a901      	add	r1, sp, #4
    b006:	4b26      	ldr	r3, [pc, #152]	; (b0a0 <nm_get_firmware_full_info+0xd8>)
    b008:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    b00a:	2800      	cmp	r0, #0
    b00c:	d12e      	bne.n	b06c <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    b00e:	9b02      	ldr	r3, [sp, #8]
    b010:	0418      	lsls	r0, r3, #16
    b012:	0c00      	lsrs	r0, r0, #16
    b014:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    b016:	d02e      	beq.n	b076 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    b018:	23c0      	movs	r3, #192	; 0xc0
    b01a:	029b      	lsls	r3, r3, #10
    b01c:	4318      	orrs	r0, r3
    b01e:	2228      	movs	r2, #40	; 0x28
    b020:	0021      	movs	r1, r4
    b022:	4b1f      	ldr	r3, [pc, #124]	; (b0a0 <nm_get_firmware_full_info+0xd8>)
    b024:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    b026:	2800      	cmp	r0, #0
    b028:	d120      	bne.n	b06c <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    b02a:	7921      	ldrb	r1, [r4, #4]
    b02c:	0209      	lsls	r1, r1, #8
    b02e:	79a2      	ldrb	r2, [r4, #6]
    b030:	230f      	movs	r3, #15
    b032:	401a      	ands	r2, r3
    b034:	430a      	orrs	r2, r1
    b036:	7961      	ldrb	r1, [r4, #5]
    b038:	0109      	lsls	r1, r1, #4
    b03a:	25ff      	movs	r5, #255	; 0xff
    b03c:	4029      	ands	r1, r5
    b03e:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    b040:	79e1      	ldrb	r1, [r4, #7]
    b042:	0209      	lsls	r1, r1, #8
    b044:	7a66      	ldrb	r6, [r4, #9]
    b046:	4033      	ands	r3, r6
    b048:	430b      	orrs	r3, r1
    b04a:	7a21      	ldrb	r1, [r4, #8]
    b04c:	0109      	lsls	r1, r1, #4
    b04e:	400d      	ands	r5, r1
    b050:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    b052:	2a00      	cmp	r2, #0
    b054:	d012      	beq.n	b07c <nm_get_firmware_full_info+0xb4>
    b056:	2b00      	cmp	r3, #0
    b058:	d013      	beq.n	b082 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    b05a:	4912      	ldr	r1, [pc, #72]	; (b0a4 <nm_get_firmware_full_info+0xdc>)
    b05c:	428b      	cmp	r3, r1
    b05e:	d813      	bhi.n	b088 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    b060:	4b11      	ldr	r3, [pc, #68]	; (b0a8 <nm_get_firmware_full_info+0xe0>)
    b062:	429a      	cmp	r2, r3
    b064:	d802      	bhi.n	b06c <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    b066:	380d      	subs	r0, #13
    b068:	e000      	b.n	b06c <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    b06a:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    b06c:	b004      	add	sp, #16
    b06e:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    b070:	200c      	movs	r0, #12
    b072:	4240      	negs	r0, r0
    b074:	e7fa      	b.n	b06c <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    b076:	200c      	movs	r0, #12
    b078:	4240      	negs	r0, r0
    b07a:	e7f7      	b.n	b06c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    b07c:	200c      	movs	r0, #12
    b07e:	4240      	negs	r0, r0
    b080:	e7f4      	b.n	b06c <nm_get_firmware_full_info+0xa4>
    b082:	200c      	movs	r0, #12
    b084:	4240      	negs	r0, r0
    b086:	e7f1      	b.n	b06c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    b088:	200d      	movs	r0, #13
    b08a:	4240      	negs	r0, r0
    b08c:	e7ee      	b.n	b06c <nm_get_firmware_full_info+0xa4>
    b08e:	46c0      	nop			; (mov r8, r8)
    b090:	000101b7 	.word	0x000101b7
    b094:	00009a59 	.word	0x00009a59
    b098:	000c0008 	.word	0x000c0008
    b09c:	0000aee1 	.word	0x0000aee1
    b0a0:	0000aef9 	.word	0x0000aef9
    b0a4:	00001352 	.word	0x00001352
    b0a8:	00001351 	.word	0x00001351

0000b0ac <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    b0ac:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    b0ae:	2800      	cmp	r0, #0
    b0b0:	d037      	beq.n	b122 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    b0b2:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    b0b4:	1e6b      	subs	r3, r5, #1
    b0b6:	2b03      	cmp	r3, #3
    b0b8:	d900      	bls.n	b0bc <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    b0ba:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    b0bc:	2000      	movs	r0, #0
    b0be:	4b20      	ldr	r3, [pc, #128]	; (b140 <nm_drv_init+0x94>)
    b0c0:	4798      	blx	r3
    b0c2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b0c4:	d12f      	bne.n	b126 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    b0c6:	481f      	ldr	r0, [pc, #124]	; (b144 <nm_drv_init+0x98>)
    b0c8:	4c1f      	ldr	r4, [pc, #124]	; (b148 <nm_drv_init+0x9c>)
    b0ca:	47a0      	blx	r4
    b0cc:	4b1f      	ldr	r3, [pc, #124]	; (b14c <nm_drv_init+0xa0>)
    b0ce:	4798      	blx	r3
    b0d0:	0001      	movs	r1, r0
    b0d2:	481f      	ldr	r0, [pc, #124]	; (b150 <nm_drv_init+0xa4>)
    b0d4:	47a0      	blx	r4
    b0d6:	200d      	movs	r0, #13
    b0d8:	4b1e      	ldr	r3, [pc, #120]	; (b154 <nm_drv_init+0xa8>)
    b0da:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    b0dc:	4b1e      	ldr	r3, [pc, #120]	; (b158 <nm_drv_init+0xac>)
    b0de:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    b0e0:	0028      	movs	r0, r5
    b0e2:	4b1e      	ldr	r3, [pc, #120]	; (b15c <nm_drv_init+0xb0>)
    b0e4:	4798      	blx	r3
    b0e6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b0e8:	d117      	bne.n	b11a <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    b0ea:	0028      	movs	r0, r5
    b0ec:	4b1c      	ldr	r3, [pc, #112]	; (b160 <nm_drv_init+0xb4>)
    b0ee:	4798      	blx	r3
    b0f0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b0f2:	d112      	bne.n	b11a <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    b0f4:	3d02      	subs	r5, #2
    b0f6:	2d01      	cmp	r5, #1
    b0f8:	d911      	bls.n	b11e <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    b0fa:	4b1a      	ldr	r3, [pc, #104]	; (b164 <nm_drv_init+0xb8>)
    b0fc:	4798      	blx	r3
    b0fe:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b100:	d00d      	beq.n	b11e <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    b102:	2256      	movs	r2, #86	; 0x56
    b104:	32ff      	adds	r2, #255	; 0xff
    b106:	4918      	ldr	r1, [pc, #96]	; (b168 <nm_drv_init+0xbc>)
    b108:	4818      	ldr	r0, [pc, #96]	; (b16c <nm_drv_init+0xc0>)
    b10a:	4b0f      	ldr	r3, [pc, #60]	; (b148 <nm_drv_init+0x9c>)
    b10c:	4798      	blx	r3
    b10e:	4818      	ldr	r0, [pc, #96]	; (b170 <nm_drv_init+0xc4>)
    b110:	4b18      	ldr	r3, [pc, #96]	; (b174 <nm_drv_init+0xc8>)
    b112:	4798      	blx	r3
    b114:	200d      	movs	r0, #13
    b116:	4b0f      	ldr	r3, [pc, #60]	; (b154 <nm_drv_init+0xa8>)
    b118:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    b11a:	4b17      	ldr	r3, [pc, #92]	; (b178 <nm_drv_init+0xcc>)
    b11c:	4798      	blx	r3
ERR1:
	return ret;
}
    b11e:	0020      	movs	r0, r4
    b120:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    b122:	2501      	movs	r5, #1
    b124:	e7ca      	b.n	b0bc <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    b126:	2228      	movs	r2, #40	; 0x28
    b128:	32ff      	adds	r2, #255	; 0xff
    b12a:	490f      	ldr	r1, [pc, #60]	; (b168 <nm_drv_init+0xbc>)
    b12c:	480f      	ldr	r0, [pc, #60]	; (b16c <nm_drv_init+0xc0>)
    b12e:	4b06      	ldr	r3, [pc, #24]	; (b148 <nm_drv_init+0x9c>)
    b130:	4798      	blx	r3
    b132:	4812      	ldr	r0, [pc, #72]	; (b17c <nm_drv_init+0xd0>)
    b134:	4b0f      	ldr	r3, [pc, #60]	; (b174 <nm_drv_init+0xc8>)
    b136:	4798      	blx	r3
    b138:	200d      	movs	r0, #13
    b13a:	4b06      	ldr	r3, [pc, #24]	; (b154 <nm_drv_init+0xa8>)
    b13c:	4798      	blx	r3
		goto ERR1;
    b13e:	e7ee      	b.n	b11e <nm_drv_init+0x72>
    b140:	0000aeb1 	.word	0x0000aeb1
    b144:	00012cfc 	.word	0x00012cfc
    b148:	00010319 	.word	0x00010319
    b14c:	0000aa91 	.word	0x0000aa91
    b150:	00013040 	.word	0x00013040
    b154:	0001034d 	.word	0x0001034d
    b158:	0000b8f5 	.word	0x0000b8f5
    b15c:	0000aca5 	.word	0x0000aca5
    b160:	0000adad 	.word	0x0000adad
    b164:	0000aa35 	.word	0x0000aa35
    b168:	00012f88 	.word	0x00012f88
    b16c:	000129cc 	.word	0x000129cc
    b170:	00013004 	.word	0x00013004
    b174:	00010435 	.word	0x00010435
    b178:	0000aebd 	.word	0x0000aebd
    b17c:	00013024 	.word	0x00013024

0000b180 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    b180:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    b182:	4b1c      	ldr	r3, [pc, #112]	; (b1f4 <nm_drv_deinit+0x74>)
    b184:	4798      	blx	r3
    b186:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b188:	d10b      	bne.n	b1a2 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    b18a:	2000      	movs	r0, #0
    b18c:	4b1a      	ldr	r3, [pc, #104]	; (b1f8 <nm_drv_deinit+0x78>)
    b18e:	4798      	blx	r3
    b190:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b192:	d114      	bne.n	b1be <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    b194:	4b19      	ldr	r3, [pc, #100]	; (b1fc <nm_drv_deinit+0x7c>)
    b196:	4798      	blx	r3
    b198:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b19a:	d11d      	bne.n	b1d8 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    b19c:	4b18      	ldr	r3, [pc, #96]	; (b200 <nm_drv_deinit+0x80>)
    b19e:	4798      	blx	r3
    b1a0:	e00b      	b.n	b1ba <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    b1a2:	22b6      	movs	r2, #182	; 0xb6
    b1a4:	0052      	lsls	r2, r2, #1
    b1a6:	4917      	ldr	r1, [pc, #92]	; (b204 <nm_drv_deinit+0x84>)
    b1a8:	4817      	ldr	r0, [pc, #92]	; (b208 <nm_drv_deinit+0x88>)
    b1aa:	4b18      	ldr	r3, [pc, #96]	; (b20c <nm_drv_deinit+0x8c>)
    b1ac:	4798      	blx	r3
    b1ae:	4818      	ldr	r0, [pc, #96]	; (b210 <nm_drv_deinit+0x90>)
    b1b0:	4b18      	ldr	r3, [pc, #96]	; (b214 <nm_drv_deinit+0x94>)
    b1b2:	4798      	blx	r3
    b1b4:	200d      	movs	r0, #13
    b1b6:	4b18      	ldr	r3, [pc, #96]	; (b218 <nm_drv_deinit+0x98>)
    b1b8:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    b1ba:	0020      	movs	r0, r4
    b1bc:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    b1be:	2274      	movs	r2, #116	; 0x74
    b1c0:	32ff      	adds	r2, #255	; 0xff
    b1c2:	4910      	ldr	r1, [pc, #64]	; (b204 <nm_drv_deinit+0x84>)
    b1c4:	4810      	ldr	r0, [pc, #64]	; (b208 <nm_drv_deinit+0x88>)
    b1c6:	4b11      	ldr	r3, [pc, #68]	; (b20c <nm_drv_deinit+0x8c>)
    b1c8:	4798      	blx	r3
    b1ca:	4814      	ldr	r0, [pc, #80]	; (b21c <nm_drv_deinit+0x9c>)
    b1cc:	4b11      	ldr	r3, [pc, #68]	; (b214 <nm_drv_deinit+0x94>)
    b1ce:	4798      	blx	r3
    b1d0:	200d      	movs	r0, #13
    b1d2:	4b11      	ldr	r3, [pc, #68]	; (b218 <nm_drv_deinit+0x98>)
    b1d4:	4798      	blx	r3
		goto ERR1;
    b1d6:	e7f0      	b.n	b1ba <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    b1d8:	227a      	movs	r2, #122	; 0x7a
    b1da:	32ff      	adds	r2, #255	; 0xff
    b1dc:	4909      	ldr	r1, [pc, #36]	; (b204 <nm_drv_deinit+0x84>)
    b1de:	480a      	ldr	r0, [pc, #40]	; (b208 <nm_drv_deinit+0x88>)
    b1e0:	4b0a      	ldr	r3, [pc, #40]	; (b20c <nm_drv_deinit+0x8c>)
    b1e2:	4798      	blx	r3
    b1e4:	480e      	ldr	r0, [pc, #56]	; (b220 <nm_drv_deinit+0xa0>)
    b1e6:	4b0b      	ldr	r3, [pc, #44]	; (b214 <nm_drv_deinit+0x94>)
    b1e8:	4798      	blx	r3
    b1ea:	200d      	movs	r0, #13
    b1ec:	4b0a      	ldr	r3, [pc, #40]	; (b218 <nm_drv_deinit+0x98>)
    b1ee:	4798      	blx	r3
		goto ERR1;
    b1f0:	e7e3      	b.n	b1ba <nm_drv_deinit+0x3a>
    b1f2:	46c0      	nop			; (mov r8, r8)
    b1f4:	0000ae25 	.word	0x0000ae25
    b1f8:	0000c751 	.word	0x0000c751
    b1fc:	0000aebd 	.word	0x0000aebd
    b200:	0000b8a1 	.word	0x0000b8a1
    b204:	00012f94 	.word	0x00012f94
    b208:	000129cc 	.word	0x000129cc
    b20c:	00010319 	.word	0x00010319
    b210:	00012fa4 	.word	0x00012fa4
    b214:	00010435 	.word	0x00010435
    b218:	0001034d 	.word	0x0001034d
    b21c:	00012fc4 	.word	0x00012fc4
    b220:	00012fe8 	.word	0x00012fe8

0000b224 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    b224:	b500      	push	{lr}
    b226:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    b228:	ab01      	add	r3, sp, #4
    b22a:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    b22c:	2200      	movs	r2, #0
    b22e:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    b230:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b232:	0019      	movs	r1, r3
    b234:	2003      	movs	r0, #3
    b236:	4b02      	ldr	r3, [pc, #8]	; (b240 <nmi_spi_write+0x1c>)
    b238:	4798      	blx	r3
}
    b23a:	b005      	add	sp, #20
    b23c:	bd00      	pop	{pc}
    b23e:	46c0      	nop			; (mov r8, r8)
    b240:	0000988d 	.word	0x0000988d

0000b244 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    b244:	b570      	push	{r4, r5, r6, lr}
    b246:	b084      	sub	sp, #16
    b248:	ac08      	add	r4, sp, #32
    b24a:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    b24c:	ac01      	add	r4, sp, #4
    b24e:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    b250:	303f      	adds	r0, #63	; 0x3f
    b252:	b2c4      	uxtb	r4, r0
    b254:	2c0e      	cmp	r4, #14
    b256:	d900      	bls.n	b25a <spi_cmd+0x16>
    b258:	e084      	b.n	b364 <spi_cmd+0x120>
    b25a:	00a0      	lsls	r0, r4, #2
    b25c:	4c4f      	ldr	r4, [pc, #316]	; (b39c <spi_cmd+0x158>)
    b25e:	5820      	ldr	r0, [r4, r0]
    b260:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    b262:	ab01      	add	r3, sp, #4
    b264:	0c0a      	lsrs	r2, r1, #16
    b266:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b268:	0a0a      	lsrs	r2, r1, #8
    b26a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b26c:	70d9      	strb	r1, [r3, #3]
		len = 5;
    b26e:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    b270:	4b4b      	ldr	r3, [pc, #300]	; (b3a0 <spi_cmd+0x15c>)
    b272:	781b      	ldrb	r3, [r3, #0]
    b274:	2b00      	cmp	r3, #0
    b276:	d077      	beq.n	b368 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    b278:	3901      	subs	r1, #1
    b27a:	b2c9      	uxtb	r1, r1
    b27c:	e083      	b.n	b386 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    b27e:	0a0b      	lsrs	r3, r1, #8
    b280:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    b282:	2d00      	cmp	r5, #0
    b284:	d107      	bne.n	b296 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    b286:	aa01      	add	r2, sp, #4
    b288:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    b28a:	ab01      	add	r3, sp, #4
    b28c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    b28e:	2200      	movs	r2, #0
    b290:	70da      	strb	r2, [r3, #3]
		len = 5;
    b292:	2105      	movs	r1, #5
		break;
    b294:	e7ec      	b.n	b270 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    b296:	2280      	movs	r2, #128	; 0x80
    b298:	4252      	negs	r2, r2
    b29a:	4313      	orrs	r3, r2
    b29c:	aa01      	add	r2, sp, #4
    b29e:	7053      	strb	r3, [r2, #1]
    b2a0:	e7f3      	b.n	b28a <spi_cmd+0x46>
		bc[1] = 0x00;
    b2a2:	ab01      	add	r3, sp, #4
    b2a4:	2200      	movs	r2, #0
    b2a6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b2a8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b2aa:	70da      	strb	r2, [r3, #3]
		len = 5;
    b2ac:	2105      	movs	r1, #5
		break;
    b2ae:	e7df      	b.n	b270 <spi_cmd+0x2c>
		bc[1] = 0x00;
    b2b0:	ab01      	add	r3, sp, #4
    b2b2:	2200      	movs	r2, #0
    b2b4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b2b6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b2b8:	70da      	strb	r2, [r3, #3]
		len = 5;
    b2ba:	2105      	movs	r1, #5
		break;
    b2bc:	e7d8      	b.n	b270 <spi_cmd+0x2c>
		bc[1] = 0xff;
    b2be:	ab01      	add	r3, sp, #4
    b2c0:	22ff      	movs	r2, #255	; 0xff
    b2c2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    b2c4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    b2c6:	70da      	strb	r2, [r3, #3]
		len = 5;
    b2c8:	2105      	movs	r1, #5
		break;
    b2ca:	e7d1      	b.n	b270 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    b2cc:	aa01      	add	r2, sp, #4
    b2ce:	0c08      	lsrs	r0, r1, #16
    b2d0:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    b2d2:	0a08      	lsrs	r0, r1, #8
    b2d4:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    b2d6:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    b2d8:	0a19      	lsrs	r1, r3, #8
    b2da:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    b2dc:	7153      	strb	r3, [r2, #5]
		len = 7;
    b2de:	2107      	movs	r1, #7
		break;
    b2e0:	e7c6      	b.n	b270 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    b2e2:	aa01      	add	r2, sp, #4
    b2e4:	0c08      	lsrs	r0, r1, #16
    b2e6:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    b2e8:	0a08      	lsrs	r0, r1, #8
    b2ea:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    b2ec:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    b2ee:	0c19      	lsrs	r1, r3, #16
    b2f0:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    b2f2:	0a19      	lsrs	r1, r3, #8
    b2f4:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    b2f6:	7193      	strb	r3, [r2, #6]
		len = 8;
    b2f8:	2108      	movs	r1, #8
		break;
    b2fa:	e7b9      	b.n	b270 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    b2fc:	0a0b      	lsrs	r3, r1, #8
    b2fe:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    b300:	2d00      	cmp	r5, #0
    b302:	d10c      	bne.n	b31e <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    b304:	a801      	add	r0, sp, #4
    b306:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    b308:	ab01      	add	r3, sp, #4
    b30a:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    b30c:	0e11      	lsrs	r1, r2, #24
    b30e:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    b310:	0c11      	lsrs	r1, r2, #16
    b312:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    b314:	0a11      	lsrs	r1, r2, #8
    b316:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    b318:	719a      	strb	r2, [r3, #6]
		len = 8;
    b31a:	2108      	movs	r1, #8
		break;
    b31c:	e7a8      	b.n	b270 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    b31e:	2080      	movs	r0, #128	; 0x80
    b320:	4240      	negs	r0, r0
    b322:	4303      	orrs	r3, r0
    b324:	a801      	add	r0, sp, #4
    b326:	7043      	strb	r3, [r0, #1]
    b328:	e7ee      	b.n	b308 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    b32a:	ab01      	add	r3, sp, #4
    b32c:	0c08      	lsrs	r0, r1, #16
    b32e:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b330:	0a08      	lsrs	r0, r1, #8
    b332:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    b334:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    b336:	0e11      	lsrs	r1, r2, #24
    b338:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    b33a:	0c11      	lsrs	r1, r2, #16
    b33c:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    b33e:	0a11      	lsrs	r1, r2, #8
    b340:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    b342:	71da      	strb	r2, [r3, #7]
		len = 9;
    b344:	2109      	movs	r1, #9
		break;
    b346:	e793      	b.n	b270 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    b348:	2228      	movs	r2, #40	; 0x28
    b34a:	32ff      	adds	r2, #255	; 0xff
    b34c:	4915      	ldr	r1, [pc, #84]	; (b3a4 <spi_cmd+0x160>)
    b34e:	4816      	ldr	r0, [pc, #88]	; (b3a8 <spi_cmd+0x164>)
    b350:	4b16      	ldr	r3, [pc, #88]	; (b3ac <spi_cmd+0x168>)
    b352:	4798      	blx	r3
    b354:	4816      	ldr	r0, [pc, #88]	; (b3b0 <spi_cmd+0x16c>)
    b356:	4b17      	ldr	r3, [pc, #92]	; (b3b4 <spi_cmd+0x170>)
    b358:	4798      	blx	r3
    b35a:	200d      	movs	r0, #13
    b35c:	4b16      	ldr	r3, [pc, #88]	; (b3b8 <spi_cmd+0x174>)
    b35e:	4798      	blx	r3
			result = N_FAIL;
    b360:	2300      	movs	r3, #0
    b362:	e017      	b.n	b394 <spi_cmd+0x150>
	switch (cmd) {
    b364:	2300      	movs	r3, #0
    b366:	e015      	b.n	b394 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    b368:	1e4e      	subs	r6, r1, #1
    b36a:	aa01      	add	r2, sp, #4
    b36c:	1995      	adds	r5, r2, r6
    b36e:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    b370:	4c12      	ldr	r4, [pc, #72]	; (b3bc <spi_cmd+0x178>)
    b372:	005b      	lsls	r3, r3, #1
    b374:	7810      	ldrb	r0, [r2, #0]
    b376:	4043      	eors	r3, r0
    b378:	5ce3      	ldrb	r3, [r4, r3]
    b37a:	3201      	adds	r2, #1
	while (len--)
    b37c:	42aa      	cmp	r2, r5
    b37e:	d1f8      	bne.n	b372 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    b380:	005b      	lsls	r3, r3, #1
    b382:	aa01      	add	r2, sp, #4
    b384:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    b386:	b289      	uxth	r1, r1
    b388:	a801      	add	r0, sp, #4
    b38a:	4b0d      	ldr	r3, [pc, #52]	; (b3c0 <spi_cmd+0x17c>)
    b38c:	4798      	blx	r3
    b38e:	2301      	movs	r3, #1
    b390:	2800      	cmp	r0, #0
    b392:	d1d9      	bne.n	b348 <spi_cmd+0x104>
		}
	}

	return result;
}
    b394:	0018      	movs	r0, r3
    b396:	b004      	add	sp, #16
    b398:	bd70      	pop	{r4, r5, r6, pc}
    b39a:	46c0      	nop			; (mov r8, r8)
    b39c:	00013050 	.word	0x00013050
    b3a0:	20000268 	.word	0x20000268
    b3a4:	00013090 	.word	0x00013090
    b3a8:	000129cc 	.word	0x000129cc
    b3ac:	00010319 	.word	0x00010319
    b3b0:	00013520 	.word	0x00013520
    b3b4:	00010435 	.word	0x00010435
    b3b8:	0001034d 	.word	0x0001034d
    b3bc:	0001311c 	.word	0x0001311c
    b3c0:	0000b225 	.word	0x0000b225

0000b3c4 <nmi_spi_read>:
{
    b3c4:	b500      	push	{lr}
    b3c6:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    b3c8:	ab01      	add	r3, sp, #4
    b3ca:	2200      	movs	r2, #0
    b3cc:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    b3ce:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    b3d0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b3d2:	0019      	movs	r1, r3
    b3d4:	2003      	movs	r0, #3
    b3d6:	4b02      	ldr	r3, [pc, #8]	; (b3e0 <nmi_spi_read+0x1c>)
    b3d8:	4798      	blx	r3
}
    b3da:	b005      	add	sp, #20
    b3dc:	bd00      	pop	{pc}
    b3de:	46c0      	nop			; (mov r8, r8)
    b3e0:	0000988d 	.word	0x0000988d

0000b3e4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    b3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3e6:	46c6      	mov	lr, r8
    b3e8:	b500      	push	{lr}
    b3ea:	b082      	sub	sp, #8
    b3ec:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    b3ee:	28cf      	cmp	r0, #207	; 0xcf
    b3f0:	d02b      	beq.n	b44a <spi_cmd_rsp+0x66>
    b3f2:	0003      	movs	r3, r0
    b3f4:	333b      	adds	r3, #59	; 0x3b
    b3f6:	b2db      	uxtb	r3, r3
    b3f8:	2b01      	cmp	r3, #1
    b3fa:	d926      	bls.n	b44a <spi_cmd_rsp+0x66>
{
    b3fc:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b3fe:	466b      	mov	r3, sp
    b400:	1dde      	adds	r6, r3, #7
    b402:	4b26      	ldr	r3, [pc, #152]	; (b49c <spi_cmd_rsp+0xb8>)
    b404:	4698      	mov	r8, r3
    b406:	2101      	movs	r1, #1
    b408:	0030      	movs	r0, r6
    b40a:	47c0      	blx	r8
    b40c:	1e05      	subs	r5, r0, #0
    b40e:	d125      	bne.n	b45c <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    b410:	7833      	ldrb	r3, [r6, #0]
    b412:	42bb      	cmp	r3, r7
    b414:	d030      	beq.n	b478 <spi_cmd_rsp+0x94>
    b416:	3c01      	subs	r4, #1
    b418:	b2e4      	uxtb	r4, r4
    b41a:	2c00      	cmp	r4, #0
    b41c:	d1f3      	bne.n	b406 <spi_cmd_rsp+0x22>
    b41e:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b420:	466b      	mov	r3, sp
    b422:	1dde      	adds	r6, r3, #7
    b424:	4f1d      	ldr	r7, [pc, #116]	; (b49c <spi_cmd_rsp+0xb8>)
    b426:	2101      	movs	r1, #1
    b428:	0030      	movs	r0, r6
    b42a:	47b8      	blx	r7
    b42c:	2800      	cmp	r0, #0
    b42e:	d125      	bne.n	b47c <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    b430:	7833      	ldrb	r3, [r6, #0]
    b432:	2b00      	cmp	r3, #0
    b434:	d02f      	beq.n	b496 <spi_cmd_rsp+0xb2>
    b436:	3c01      	subs	r4, #1
    b438:	b2e4      	uxtb	r4, r4
    b43a:	2c00      	cmp	r4, #0
    b43c:	d1f3      	bne.n	b426 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    b43e:	2501      	movs	r5, #1

_fail_:

	return result;
}
    b440:	0028      	movs	r0, r5
    b442:	b002      	add	sp, #8
    b444:	bc04      	pop	{r2}
    b446:	4690      	mov	r8, r2
    b448:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b44a:	2101      	movs	r1, #1
    b44c:	466b      	mov	r3, sp
    b44e:	1dd8      	adds	r0, r3, #7
    b450:	4b12      	ldr	r3, [pc, #72]	; (b49c <spi_cmd_rsp+0xb8>)
    b452:	4798      	blx	r3
			result = N_FAIL;
    b454:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b456:	2800      	cmp	r0, #0
    b458:	d0d0      	beq.n	b3fc <spi_cmd_rsp+0x18>
    b45a:	e7f1      	b.n	b440 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b45c:	22b1      	movs	r2, #177	; 0xb1
    b45e:	0052      	lsls	r2, r2, #1
    b460:	490f      	ldr	r1, [pc, #60]	; (b4a0 <spi_cmd_rsp+0xbc>)
    b462:	4810      	ldr	r0, [pc, #64]	; (b4a4 <spi_cmd_rsp+0xc0>)
    b464:	4b10      	ldr	r3, [pc, #64]	; (b4a8 <spi_cmd_rsp+0xc4>)
    b466:	4798      	blx	r3
    b468:	4810      	ldr	r0, [pc, #64]	; (b4ac <spi_cmd_rsp+0xc8>)
    b46a:	4b11      	ldr	r3, [pc, #68]	; (b4b0 <spi_cmd_rsp+0xcc>)
    b46c:	4798      	blx	r3
    b46e:	200d      	movs	r0, #13
    b470:	4b10      	ldr	r3, [pc, #64]	; (b4b4 <spi_cmd_rsp+0xd0>)
    b472:	4798      	blx	r3
			result = N_FAIL;
    b474:	2500      	movs	r5, #0
			goto _fail_;
    b476:	e7e3      	b.n	b440 <spi_cmd_rsp+0x5c>
    b478:	240b      	movs	r4, #11
    b47a:	e7d1      	b.n	b420 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b47c:	22b8      	movs	r2, #184	; 0xb8
    b47e:	0052      	lsls	r2, r2, #1
    b480:	4907      	ldr	r1, [pc, #28]	; (b4a0 <spi_cmd_rsp+0xbc>)
    b482:	4808      	ldr	r0, [pc, #32]	; (b4a4 <spi_cmd_rsp+0xc0>)
    b484:	4b08      	ldr	r3, [pc, #32]	; (b4a8 <spi_cmd_rsp+0xc4>)
    b486:	4798      	blx	r3
    b488:	4808      	ldr	r0, [pc, #32]	; (b4ac <spi_cmd_rsp+0xc8>)
    b48a:	4b09      	ldr	r3, [pc, #36]	; (b4b0 <spi_cmd_rsp+0xcc>)
    b48c:	4798      	blx	r3
    b48e:	200d      	movs	r0, #13
    b490:	4b08      	ldr	r3, [pc, #32]	; (b4b4 <spi_cmd_rsp+0xd0>)
    b492:	4798      	blx	r3
			goto _fail_;
    b494:	e7d4      	b.n	b440 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    b496:	2501      	movs	r5, #1
    b498:	e7d2      	b.n	b440 <spi_cmd_rsp+0x5c>
    b49a:	46c0      	nop			; (mov r8, r8)
    b49c:	0000b3c5 	.word	0x0000b3c5
    b4a0:	000130a8 	.word	0x000130a8
    b4a4:	000129cc 	.word	0x000129cc
    b4a8:	00010319 	.word	0x00010319
    b4ac:	0001354c 	.word	0x0001354c
    b4b0:	00010435 	.word	0x00010435
    b4b4:	0001034d 	.word	0x0001034d

0000b4b8 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4ba:	46de      	mov	lr, fp
    b4bc:	4657      	mov	r7, sl
    b4be:	464e      	mov	r6, r9
    b4c0:	4645      	mov	r5, r8
    b4c2:	b5e0      	push	{r5, r6, r7, lr}
    b4c4:	b087      	sub	sp, #28
    b4c6:	9001      	str	r0, [sp, #4]
    b4c8:	4689      	mov	r9, r1
    b4ca:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    b4cc:	2300      	movs	r3, #0
    b4ce:	469a      	mov	sl, r3
    b4d0:	2380      	movs	r3, #128	; 0x80
    b4d2:	019b      	lsls	r3, r3, #6
    b4d4:	469b      	mov	fp, r3
    b4d6:	466a      	mov	r2, sp
    b4d8:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b4da:	4b3b      	ldr	r3, [pc, #236]	; (b5c8 <spi_data_read+0x110>)
    b4dc:	4698      	mov	r8, r3
    b4de:	e02e      	b.n	b53e <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    b4e0:	4a3a      	ldr	r2, [pc, #232]	; (b5cc <spi_data_read+0x114>)
    b4e2:	493b      	ldr	r1, [pc, #236]	; (b5d0 <spi_data_read+0x118>)
    b4e4:	483b      	ldr	r0, [pc, #236]	; (b5d4 <spi_data_read+0x11c>)
    b4e6:	4b3c      	ldr	r3, [pc, #240]	; (b5d8 <spi_data_read+0x120>)
    b4e8:	4798      	blx	r3
    b4ea:	483c      	ldr	r0, [pc, #240]	; (b5dc <spi_data_read+0x124>)
    b4ec:	4b3c      	ldr	r3, [pc, #240]	; (b5e0 <spi_data_read+0x128>)
    b4ee:	4798      	blx	r3
    b4f0:	200d      	movs	r0, #13
    b4f2:	4b3c      	ldr	r3, [pc, #240]	; (b5e4 <spi_data_read+0x12c>)
    b4f4:	4798      	blx	r3
    b4f6:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    b4f8:	0028      	movs	r0, r5
    b4fa:	b007      	add	sp, #28
    b4fc:	bc3c      	pop	{r2, r3, r4, r5}
    b4fe:	4690      	mov	r8, r2
    b500:	4699      	mov	r9, r3
    b502:	46a2      	mov	sl, r4
    b504:	46ab      	mov	fp, r5
    b506:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    b508:	2c00      	cmp	r4, #0
    b50a:	dd2e      	ble.n	b56a <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    b50c:	9b01      	ldr	r3, [sp, #4]
    b50e:	4453      	add	r3, sl
    b510:	0018      	movs	r0, r3
    b512:	0039      	movs	r1, r7
    b514:	4b2c      	ldr	r3, [pc, #176]	; (b5c8 <spi_data_read+0x110>)
    b516:	4798      	blx	r3
    b518:	1e04      	subs	r4, r0, #0
    b51a:	d133      	bne.n	b584 <spi_data_read+0xcc>
		if(!clockless)
    b51c:	9b02      	ldr	r3, [sp, #8]
    b51e:	2b00      	cmp	r3, #0
    b520:	d103      	bne.n	b52a <spi_data_read+0x72>
			if (!gu8Crc_off) {
    b522:	4b31      	ldr	r3, [pc, #196]	; (b5e8 <spi_data_read+0x130>)
    b524:	781b      	ldrb	r3, [r3, #0]
    b526:	2b00      	cmp	r3, #0
    b528:	d039      	beq.n	b59e <spi_data_read+0xe6>
		ix += nbytes;
    b52a:	4653      	mov	r3, sl
    b52c:	18fb      	adds	r3, r7, r3
    b52e:	b21b      	sxth	r3, r3
    b530:	469a      	mov	sl, r3
		sz -= nbytes;
    b532:	464b      	mov	r3, r9
    b534:	1bdf      	subs	r7, r3, r7
    b536:	b2bb      	uxth	r3, r7
    b538:	4699      	mov	r9, r3
	} while (sz);
    b53a:	2b00      	cmp	r3, #0
    b53c:	d042      	beq.n	b5c4 <spi_data_read+0x10c>
    b53e:	464f      	mov	r7, r9
    b540:	45d9      	cmp	r9, fp
    b542:	d901      	bls.n	b548 <spi_data_read+0x90>
    b544:	466b      	mov	r3, sp
    b546:	89df      	ldrh	r7, [r3, #14]
    b548:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    b54a:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b54c:	ab04      	add	r3, sp, #16
    b54e:	1cde      	adds	r6, r3, #3
    b550:	2101      	movs	r1, #1
    b552:	0030      	movs	r0, r6
    b554:	47c0      	blx	r8
    b556:	1e05      	subs	r5, r0, #0
    b558:	d1c2      	bne.n	b4e0 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    b55a:	7833      	ldrb	r3, [r6, #0]
    b55c:	091b      	lsrs	r3, r3, #4
    b55e:	2b0f      	cmp	r3, #15
    b560:	d0d2      	beq.n	b508 <spi_data_read+0x50>
    b562:	3c01      	subs	r4, #1
    b564:	b224      	sxth	r4, r4
		} while (retry--);
    b566:	1c63      	adds	r3, r4, #1
    b568:	d1f2      	bne.n	b550 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    b56a:	4a20      	ldr	r2, [pc, #128]	; (b5ec <spi_data_read+0x134>)
    b56c:	4918      	ldr	r1, [pc, #96]	; (b5d0 <spi_data_read+0x118>)
    b56e:	4819      	ldr	r0, [pc, #100]	; (b5d4 <spi_data_read+0x11c>)
    b570:	4c19      	ldr	r4, [pc, #100]	; (b5d8 <spi_data_read+0x120>)
    b572:	47a0      	blx	r4
    b574:	ab04      	add	r3, sp, #16
    b576:	78d9      	ldrb	r1, [r3, #3]
    b578:	481d      	ldr	r0, [pc, #116]	; (b5f0 <spi_data_read+0x138>)
    b57a:	47a0      	blx	r4
    b57c:	200d      	movs	r0, #13
    b57e:	4b19      	ldr	r3, [pc, #100]	; (b5e4 <spi_data_read+0x12c>)
    b580:	4798      	blx	r3
			break;
    b582:	e7b9      	b.n	b4f8 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    b584:	22c5      	movs	r2, #197	; 0xc5
    b586:	0092      	lsls	r2, r2, #2
    b588:	4911      	ldr	r1, [pc, #68]	; (b5d0 <spi_data_read+0x118>)
    b58a:	4812      	ldr	r0, [pc, #72]	; (b5d4 <spi_data_read+0x11c>)
    b58c:	4b12      	ldr	r3, [pc, #72]	; (b5d8 <spi_data_read+0x120>)
    b58e:	4798      	blx	r3
    b590:	4818      	ldr	r0, [pc, #96]	; (b5f4 <spi_data_read+0x13c>)
    b592:	4b13      	ldr	r3, [pc, #76]	; (b5e0 <spi_data_read+0x128>)
    b594:	4798      	blx	r3
    b596:	200d      	movs	r0, #13
    b598:	4b12      	ldr	r3, [pc, #72]	; (b5e4 <spi_data_read+0x12c>)
    b59a:	4798      	blx	r3
			break;
    b59c:	e7ac      	b.n	b4f8 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    b59e:	2102      	movs	r1, #2
    b5a0:	a805      	add	r0, sp, #20
    b5a2:	4b09      	ldr	r3, [pc, #36]	; (b5c8 <spi_data_read+0x110>)
    b5a4:	4798      	blx	r3
    b5a6:	2800      	cmp	r0, #0
    b5a8:	d0bf      	beq.n	b52a <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    b5aa:	4a13      	ldr	r2, [pc, #76]	; (b5f8 <spi_data_read+0x140>)
    b5ac:	4908      	ldr	r1, [pc, #32]	; (b5d0 <spi_data_read+0x118>)
    b5ae:	4809      	ldr	r0, [pc, #36]	; (b5d4 <spi_data_read+0x11c>)
    b5b0:	4b09      	ldr	r3, [pc, #36]	; (b5d8 <spi_data_read+0x120>)
    b5b2:	4798      	blx	r3
    b5b4:	4811      	ldr	r0, [pc, #68]	; (b5fc <spi_data_read+0x144>)
    b5b6:	4b0a      	ldr	r3, [pc, #40]	; (b5e0 <spi_data_read+0x128>)
    b5b8:	4798      	blx	r3
    b5ba:	200d      	movs	r0, #13
    b5bc:	4b09      	ldr	r3, [pc, #36]	; (b5e4 <spi_data_read+0x12c>)
    b5be:	4798      	blx	r3
					result = N_FAIL;
    b5c0:	0025      	movs	r5, r4
					break;
    b5c2:	e799      	b.n	b4f8 <spi_data_read+0x40>
    b5c4:	2501      	movs	r5, #1
    b5c6:	e797      	b.n	b4f8 <spi_data_read+0x40>
    b5c8:	0000b3c5 	.word	0x0000b3c5
    b5cc:	000002ff 	.word	0x000002ff
    b5d0:	000130b4 	.word	0x000130b4
    b5d4:	000129cc 	.word	0x000129cc
    b5d8:	00010319 	.word	0x00010319
    b5dc:	00013580 	.word	0x00013580
    b5e0:	00010435 	.word	0x00010435
    b5e4:	0001034d 	.word	0x0001034d
    b5e8:	20000268 	.word	0x20000268
    b5ec:	0000030b 	.word	0x0000030b
    b5f0:	000135b4 	.word	0x000135b4
    b5f4:	000135e4 	.word	0x000135e4
    b5f8:	0000031f 	.word	0x0000031f
    b5fc:	00013614 	.word	0x00013614

0000b600 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    b600:	b5f0      	push	{r4, r5, r6, r7, lr}
    b602:	46d6      	mov	lr, sl
    b604:	464f      	mov	r7, r9
    b606:	4646      	mov	r6, r8
    b608:	b5c0      	push	{r6, r7, lr}
    b60a:	b086      	sub	sp, #24
    b60c:	9003      	str	r0, [sp, #12]
    b60e:	9104      	str	r1, [sp, #16]
    b610:	2830      	cmp	r0, #48	; 0x30
    b612:	d80f      	bhi.n	b634 <spi_write_reg+0x34>
    b614:	4b30      	ldr	r3, [pc, #192]	; (b6d8 <spi_write_reg+0xd8>)
    b616:	781f      	ldrb	r7, [r3, #0]
    b618:	b2fb      	uxtb	r3, r7
    b61a:	9305      	str	r3, [sp, #20]
    b61c:	2300      	movs	r3, #0
    b61e:	2230      	movs	r2, #48	; 0x30
    b620:	9903      	ldr	r1, [sp, #12]
    b622:	428a      	cmp	r2, r1
    b624:	415b      	adcs	r3, r3
    b626:	b2db      	uxtb	r3, r3
    b628:	469a      	mov	sl, r3
    b62a:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    b62c:	4b2b      	ldr	r3, [pc, #172]	; (b6dc <spi_write_reg+0xdc>)
    b62e:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    b630:	46d1      	mov	r9, sl
    b632:	e033      	b.n	b69c <spi_write_reg+0x9c>
    b634:	4b2a      	ldr	r3, [pc, #168]	; (b6e0 <spi_write_reg+0xe0>)
    b636:	781f      	ldrb	r7, [r3, #0]
    b638:	e7ee      	b.n	b618 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    b63a:	9805      	ldr	r0, [sp, #20]
    b63c:	4b29      	ldr	r3, [pc, #164]	; (b6e4 <spi_write_reg+0xe4>)
    b63e:	4798      	blx	r3
    b640:	0004      	movs	r4, r0
	if (result != N_OK) {
    b642:	2801      	cmp	r0, #1
    b644:	d041      	beq.n	b6ca <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    b646:	22e7      	movs	r2, #231	; 0xe7
    b648:	0092      	lsls	r2, r2, #2
    b64a:	4927      	ldr	r1, [pc, #156]	; (b6e8 <spi_write_reg+0xe8>)
    b64c:	4827      	ldr	r0, [pc, #156]	; (b6ec <spi_write_reg+0xec>)
    b64e:	4e28      	ldr	r6, [pc, #160]	; (b6f0 <spi_write_reg+0xf0>)
    b650:	47b0      	blx	r6
    b652:	9903      	ldr	r1, [sp, #12]
    b654:	4827      	ldr	r0, [pc, #156]	; (b6f4 <spi_write_reg+0xf4>)
    b656:	47b0      	blx	r6
    b658:	200d      	movs	r0, #13
    b65a:	4b27      	ldr	r3, [pc, #156]	; (b6f8 <spi_write_reg+0xf8>)
    b65c:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    b65e:	2001      	movs	r0, #1
    b660:	4e26      	ldr	r6, [pc, #152]	; (b6fc <spi_write_reg+0xfc>)
    b662:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b664:	2300      	movs	r3, #0
    b666:	9300      	str	r3, [sp, #0]
    b668:	2200      	movs	r2, #0
    b66a:	2100      	movs	r1, #0
    b66c:	20cf      	movs	r0, #207	; 0xcf
    b66e:	4f1b      	ldr	r7, [pc, #108]	; (b6dc <spi_write_reg+0xdc>)
    b670:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    b672:	20cf      	movs	r0, #207	; 0xcf
    b674:	4b1b      	ldr	r3, [pc, #108]	; (b6e4 <spi_write_reg+0xe4>)
    b676:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    b678:	4a21      	ldr	r2, [pc, #132]	; (b700 <spi_write_reg+0x100>)
    b67a:	491b      	ldr	r1, [pc, #108]	; (b6e8 <spi_write_reg+0xe8>)
    b67c:	481b      	ldr	r0, [pc, #108]	; (b6ec <spi_write_reg+0xec>)
    b67e:	4f1c      	ldr	r7, [pc, #112]	; (b6f0 <spi_write_reg+0xf0>)
    b680:	47b8      	blx	r7
    b682:	9b04      	ldr	r3, [sp, #16]
    b684:	9a03      	ldr	r2, [sp, #12]
    b686:	0029      	movs	r1, r5
    b688:	481e      	ldr	r0, [pc, #120]	; (b704 <spi_write_reg+0x104>)
    b68a:	47b8      	blx	r7
    b68c:	200d      	movs	r0, #13
    b68e:	4b1a      	ldr	r3, [pc, #104]	; (b6f8 <spi_write_reg+0xf8>)
    b690:	4798      	blx	r3
		nm_bsp_sleep(1);
    b692:	2001      	movs	r0, #1
    b694:	47b0      	blx	r6
    b696:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    b698:	2d00      	cmp	r5, #0
    b69a:	d016      	beq.n	b6ca <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    b69c:	464b      	mov	r3, r9
    b69e:	9300      	str	r3, [sp, #0]
    b6a0:	2304      	movs	r3, #4
    b6a2:	9a04      	ldr	r2, [sp, #16]
    b6a4:	9f03      	ldr	r7, [sp, #12]
    b6a6:	0039      	movs	r1, r7
    b6a8:	9805      	ldr	r0, [sp, #20]
    b6aa:	47c0      	blx	r8
    b6ac:	0004      	movs	r4, r0
	if (result != N_OK) {
    b6ae:	2801      	cmp	r0, #1
    b6b0:	d0c3      	beq.n	b63a <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    b6b2:	4a15      	ldr	r2, [pc, #84]	; (b708 <spi_write_reg+0x108>)
    b6b4:	490c      	ldr	r1, [pc, #48]	; (b6e8 <spi_write_reg+0xe8>)
    b6b6:	480d      	ldr	r0, [pc, #52]	; (b6ec <spi_write_reg+0xec>)
    b6b8:	4e0d      	ldr	r6, [pc, #52]	; (b6f0 <spi_write_reg+0xf0>)
    b6ba:	47b0      	blx	r6
    b6bc:	0039      	movs	r1, r7
    b6be:	4813      	ldr	r0, [pc, #76]	; (b70c <spi_write_reg+0x10c>)
    b6c0:	47b0      	blx	r6
    b6c2:	200d      	movs	r0, #13
    b6c4:	4b0c      	ldr	r3, [pc, #48]	; (b6f8 <spi_write_reg+0xf8>)
    b6c6:	4798      	blx	r3
		goto _FAIL_;
    b6c8:	e7c9      	b.n	b65e <spi_write_reg+0x5e>
	}

	return result;
}
    b6ca:	0020      	movs	r0, r4
    b6cc:	b006      	add	sp, #24
    b6ce:	bc1c      	pop	{r2, r3, r4}
    b6d0:	4690      	mov	r8, r2
    b6d2:	4699      	mov	r9, r3
    b6d4:	46a2      	mov	sl, r4
    b6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6d8:	0001308c 	.word	0x0001308c
    b6dc:	0000b245 	.word	0x0000b245
    b6e0:	0001308d 	.word	0x0001308d
    b6e4:	0000b3e5 	.word	0x0000b3e5
    b6e8:	000130d4 	.word	0x000130d4
    b6ec:	000129cc 	.word	0x000129cc
    b6f0:	00010319 	.word	0x00010319
    b6f4:	0001370c 	.word	0x0001370c
    b6f8:	0001034d 	.word	0x0001034d
    b6fc:	00009651 	.word	0x00009651
    b700:	000003af 	.word	0x000003af
    b704:	00013744 	.word	0x00013744
    b708:	00000396 	.word	0x00000396
    b70c:	000136e0 	.word	0x000136e0

0000b710 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    b710:	b5f0      	push	{r4, r5, r6, r7, lr}
    b712:	46de      	mov	lr, fp
    b714:	4657      	mov	r7, sl
    b716:	464e      	mov	r6, r9
    b718:	4645      	mov	r5, r8
    b71a:	b5e0      	push	{r5, r6, r7, lr}
    b71c:	b087      	sub	sp, #28
    b71e:	9002      	str	r0, [sp, #8]
    b720:	468b      	mov	fp, r1
    b722:	28ff      	cmp	r0, #255	; 0xff
    b724:	d80f      	bhi.n	b746 <spi_read_reg+0x36>
    b726:	4b41      	ldr	r3, [pc, #260]	; (b82c <spi_read_reg+0x11c>)
    b728:	781f      	ldrb	r7, [r3, #0]
    b72a:	b2fb      	uxtb	r3, r7
    b72c:	9303      	str	r3, [sp, #12]
    b72e:	2300      	movs	r3, #0
    b730:	22ff      	movs	r2, #255	; 0xff
    b732:	9902      	ldr	r1, [sp, #8]
    b734:	428a      	cmp	r2, r1
    b736:	415b      	adcs	r3, r3
    b738:	b2db      	uxtb	r3, r3
    b73a:	469a      	mov	sl, r3
    b73c:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    b73e:	4b3c      	ldr	r3, [pc, #240]	; (b830 <spi_read_reg+0x120>)
    b740:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    b742:	46d1      	mov	r9, sl
    b744:	e031      	b.n	b7aa <spi_read_reg+0x9a>
    b746:	4b3b      	ldr	r3, [pc, #236]	; (b834 <spi_read_reg+0x124>)
    b748:	781f      	ldrb	r7, [r3, #0]
    b74a:	e7ee      	b.n	b72a <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    b74c:	9803      	ldr	r0, [sp, #12]
    b74e:	4b3a      	ldr	r3, [pc, #232]	; (b838 <spi_read_reg+0x128>)
    b750:	4798      	blx	r3
    b752:	0004      	movs	r4, r0
	if (result != N_OK) {
    b754:	2801      	cmp	r0, #1
    b756:	d03f      	beq.n	b7d8 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    b758:	4a38      	ldr	r2, [pc, #224]	; (b83c <spi_read_reg+0x12c>)
    b75a:	4939      	ldr	r1, [pc, #228]	; (b840 <spi_read_reg+0x130>)
    b75c:	4839      	ldr	r0, [pc, #228]	; (b844 <spi_read_reg+0x134>)
    b75e:	4e3a      	ldr	r6, [pc, #232]	; (b848 <spi_read_reg+0x138>)
    b760:	47b0      	blx	r6
    b762:	9902      	ldr	r1, [sp, #8]
    b764:	4839      	ldr	r0, [pc, #228]	; (b84c <spi_read_reg+0x13c>)
    b766:	47b0      	blx	r6
    b768:	200d      	movs	r0, #13
    b76a:	4b39      	ldr	r3, [pc, #228]	; (b850 <spi_read_reg+0x140>)
    b76c:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    b76e:	2001      	movs	r0, #1
    b770:	4e38      	ldr	r6, [pc, #224]	; (b854 <spi_read_reg+0x144>)
    b772:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b774:	2300      	movs	r3, #0
    b776:	9300      	str	r3, [sp, #0]
    b778:	2200      	movs	r2, #0
    b77a:	2100      	movs	r1, #0
    b77c:	20cf      	movs	r0, #207	; 0xcf
    b77e:	4f2c      	ldr	r7, [pc, #176]	; (b830 <spi_read_reg+0x120>)
    b780:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    b782:	20cf      	movs	r0, #207	; 0xcf
    b784:	4b2c      	ldr	r3, [pc, #176]	; (b838 <spi_read_reg+0x128>)
    b786:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    b788:	4a33      	ldr	r2, [pc, #204]	; (b858 <spi_read_reg+0x148>)
    b78a:	492d      	ldr	r1, [pc, #180]	; (b840 <spi_read_reg+0x130>)
    b78c:	482d      	ldr	r0, [pc, #180]	; (b844 <spi_read_reg+0x134>)
    b78e:	4f2e      	ldr	r7, [pc, #184]	; (b848 <spi_read_reg+0x138>)
    b790:	47b8      	blx	r7
    b792:	9a02      	ldr	r2, [sp, #8]
    b794:	0029      	movs	r1, r5
    b796:	4831      	ldr	r0, [pc, #196]	; (b85c <spi_read_reg+0x14c>)
    b798:	47b8      	blx	r7
    b79a:	200d      	movs	r0, #13
    b79c:	4b2c      	ldr	r3, [pc, #176]	; (b850 <spi_read_reg+0x140>)
    b79e:	4798      	blx	r3
		nm_bsp_sleep(1);
    b7a0:	2001      	movs	r0, #1
    b7a2:	47b0      	blx	r6
    b7a4:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    b7a6:	2d00      	cmp	r5, #0
    b7a8:	d037      	beq.n	b81a <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    b7aa:	464b      	mov	r3, r9
    b7ac:	9300      	str	r3, [sp, #0]
    b7ae:	2304      	movs	r3, #4
    b7b0:	2200      	movs	r2, #0
    b7b2:	9f02      	ldr	r7, [sp, #8]
    b7b4:	0039      	movs	r1, r7
    b7b6:	9803      	ldr	r0, [sp, #12]
    b7b8:	47c0      	blx	r8
    b7ba:	0004      	movs	r4, r0
	if (result != N_OK) {
    b7bc:	2801      	cmp	r0, #1
    b7be:	d0c5      	beq.n	b74c <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    b7c0:	4a27      	ldr	r2, [pc, #156]	; (b860 <spi_read_reg+0x150>)
    b7c2:	491f      	ldr	r1, [pc, #124]	; (b840 <spi_read_reg+0x130>)
    b7c4:	481f      	ldr	r0, [pc, #124]	; (b844 <spi_read_reg+0x134>)
    b7c6:	4e20      	ldr	r6, [pc, #128]	; (b848 <spi_read_reg+0x138>)
    b7c8:	47b0      	blx	r6
    b7ca:	0039      	movs	r1, r7
    b7cc:	4825      	ldr	r0, [pc, #148]	; (b864 <spi_read_reg+0x154>)
    b7ce:	47b0      	blx	r6
    b7d0:	200d      	movs	r0, #13
    b7d2:	4b1f      	ldr	r3, [pc, #124]	; (b850 <spi_read_reg+0x140>)
    b7d4:	4798      	blx	r3
		goto _FAIL_;
    b7d6:	e7ca      	b.n	b76e <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    b7d8:	464a      	mov	r2, r9
    b7da:	2104      	movs	r1, #4
    b7dc:	a805      	add	r0, sp, #20
    b7de:	4b22      	ldr	r3, [pc, #136]	; (b868 <spi_read_reg+0x158>)
    b7e0:	4798      	blx	r3
    b7e2:	0004      	movs	r4, r0
	if (result != N_OK) {
    b7e4:	2801      	cmp	r0, #1
    b7e6:	d00b      	beq.n	b800 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    b7e8:	4a20      	ldr	r2, [pc, #128]	; (b86c <spi_read_reg+0x15c>)
    b7ea:	4915      	ldr	r1, [pc, #84]	; (b840 <spi_read_reg+0x130>)
    b7ec:	4815      	ldr	r0, [pc, #84]	; (b844 <spi_read_reg+0x134>)
    b7ee:	4b16      	ldr	r3, [pc, #88]	; (b848 <spi_read_reg+0x138>)
    b7f0:	4798      	blx	r3
    b7f2:	481f      	ldr	r0, [pc, #124]	; (b870 <spi_read_reg+0x160>)
    b7f4:	4b1f      	ldr	r3, [pc, #124]	; (b874 <spi_read_reg+0x164>)
    b7f6:	4798      	blx	r3
    b7f8:	200d      	movs	r0, #13
    b7fa:	4b15      	ldr	r3, [pc, #84]	; (b850 <spi_read_reg+0x140>)
    b7fc:	4798      	blx	r3
		goto _FAIL_;
    b7fe:	e7b6      	b.n	b76e <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    b800:	aa05      	add	r2, sp, #20
    b802:	7853      	ldrb	r3, [r2, #1]
    b804:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    b806:	7891      	ldrb	r1, [r2, #2]
    b808:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    b80a:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    b80c:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    b80e:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    b810:	78d2      	ldrb	r2, [r2, #3]
    b812:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    b814:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    b816:	465a      	mov	r2, fp
    b818:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    b81a:	0020      	movs	r0, r4
    b81c:	b007      	add	sp, #28
    b81e:	bc3c      	pop	{r2, r3, r4, r5}
    b820:	4690      	mov	r8, r2
    b822:	4699      	mov	r9, r3
    b824:	46a2      	mov	sl, r4
    b826:	46ab      	mov	fp, r5
    b828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b82a:	46c0      	nop			; (mov r8, r8)
    b82c:	0001308e 	.word	0x0001308e
    b830:	0000b245 	.word	0x0000b245
    b834:	0001308f 	.word	0x0001308f
    b838:	0000b3e5 	.word	0x0000b3e5
    b83c:	0000041d 	.word	0x0000041d
    b840:	000130f4 	.word	0x000130f4
    b844:	000129cc 	.word	0x000129cc
    b848:	00010319 	.word	0x00010319
    b84c:	00013674 	.word	0x00013674
    b850:	0001034d 	.word	0x0001034d
    b854:	00009651 	.word	0x00009651
    b858:	0000043c 	.word	0x0000043c
    b85c:	000136c8 	.word	0x000136c8
    b860:	00000417 	.word	0x00000417
    b864:	00013648 	.word	0x00013648
    b868:	0000b4b9 	.word	0x0000b4b9
    b86c:	00000424 	.word	0x00000424
    b870:	000136a8 	.word	0x000136a8
    b874:	00010435 	.word	0x00010435

0000b878 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    b878:	b510      	push	{r4, lr}
    b87a:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b87c:	2300      	movs	r3, #0
    b87e:	9300      	str	r3, [sp, #0]
    b880:	2200      	movs	r2, #0
    b882:	2100      	movs	r1, #0
    b884:	20cf      	movs	r0, #207	; 0xcf
    b886:	4c04      	ldr	r4, [pc, #16]	; (b898 <nm_spi_reset+0x20>)
    b888:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    b88a:	20cf      	movs	r0, #207	; 0xcf
    b88c:	4b03      	ldr	r3, [pc, #12]	; (b89c <nm_spi_reset+0x24>)
    b88e:	4798      	blx	r3
	return M2M_SUCCESS;
}
    b890:	2000      	movs	r0, #0
    b892:	b002      	add	sp, #8
    b894:	bd10      	pop	{r4, pc}
    b896:	46c0      	nop			; (mov r8, r8)
    b898:	0000b245 	.word	0x0000b245
    b89c:	0000b3e5 	.word	0x0000b3e5

0000b8a0 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    b8a0:	2200      	movs	r2, #0
    b8a2:	4b02      	ldr	r3, [pc, #8]	; (b8ac <nm_spi_deinit+0xc>)
    b8a4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    b8a6:	2000      	movs	r0, #0
    b8a8:	4770      	bx	lr
    b8aa:	46c0      	nop			; (mov r8, r8)
    b8ac:	20000268 	.word	0x20000268

0000b8b0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    b8b0:	b500      	push	{lr}
    b8b2:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    b8b4:	a901      	add	r1, sp, #4
    b8b6:	4b02      	ldr	r3, [pc, #8]	; (b8c0 <nm_spi_read_reg+0x10>)
    b8b8:	4798      	blx	r3

	return u32Val;
}
    b8ba:	9801      	ldr	r0, [sp, #4]
    b8bc:	b003      	add	sp, #12
    b8be:	bd00      	pop	{pc}
    b8c0:	0000b711 	.word	0x0000b711

0000b8c4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    b8c4:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    b8c6:	4b04      	ldr	r3, [pc, #16]	; (b8d8 <nm_spi_read_reg_with_ret+0x14>)
    b8c8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    b8ca:	2300      	movs	r3, #0
    b8cc:	2801      	cmp	r0, #1
    b8ce:	d101      	bne.n	b8d4 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    b8d0:	0018      	movs	r0, r3
    b8d2:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    b8d4:	3b06      	subs	r3, #6
    b8d6:	e7fb      	b.n	b8d0 <nm_spi_read_reg_with_ret+0xc>
    b8d8:	0000b711 	.word	0x0000b711

0000b8dc <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    b8dc:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    b8de:	4b04      	ldr	r3, [pc, #16]	; (b8f0 <nm_spi_write_reg+0x14>)
    b8e0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    b8e2:	2300      	movs	r3, #0
    b8e4:	2801      	cmp	r0, #1
    b8e6:	d101      	bne.n	b8ec <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    b8e8:	0018      	movs	r0, r3
    b8ea:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    b8ec:	3b06      	subs	r3, #6
    b8ee:	e7fb      	b.n	b8e8 <nm_spi_write_reg+0xc>
    b8f0:	0000b601 	.word	0x0000b601

0000b8f4 <nm_spi_init>:
{
    b8f4:	b510      	push	{r4, lr}
    b8f6:	b082      	sub	sp, #8
	uint32 reg = 0;
    b8f8:	2300      	movs	r3, #0
    b8fa:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    b8fc:	4a35      	ldr	r2, [pc, #212]	; (b9d4 <nm_spi_init+0xe0>)
    b8fe:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    b900:	4669      	mov	r1, sp
    b902:	4835      	ldr	r0, [pc, #212]	; (b9d8 <nm_spi_init+0xe4>)
    b904:	4b35      	ldr	r3, [pc, #212]	; (b9dc <nm_spi_init+0xe8>)
    b906:	4798      	blx	r3
    b908:	2800      	cmp	r0, #0
    b90a:	d028      	beq.n	b95e <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    b90c:	4b31      	ldr	r3, [pc, #196]	; (b9d4 <nm_spi_init+0xe0>)
    b90e:	781b      	ldrb	r3, [r3, #0]
    b910:	2b00      	cmp	r3, #0
    b912:	d10d      	bne.n	b930 <nm_spi_init+0x3c>
		reg &= ~0x70;
    b914:	337c      	adds	r3, #124	; 0x7c
    b916:	9900      	ldr	r1, [sp, #0]
    b918:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    b91a:	3b2c      	subs	r3, #44	; 0x2c
    b91c:	4319      	orrs	r1, r3
    b91e:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    b920:	482d      	ldr	r0, [pc, #180]	; (b9d8 <nm_spi_init+0xe4>)
    b922:	4b2f      	ldr	r3, [pc, #188]	; (b9e0 <nm_spi_init+0xec>)
    b924:	4798      	blx	r3
    b926:	1e04      	subs	r4, r0, #0
    b928:	d039      	beq.n	b99e <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    b92a:	2201      	movs	r2, #1
    b92c:	4b29      	ldr	r3, [pc, #164]	; (b9d4 <nm_spi_init+0xe0>)
    b92e:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    b930:	a901      	add	r1, sp, #4
    b932:	2080      	movs	r0, #128	; 0x80
    b934:	0140      	lsls	r0, r0, #5
    b936:	4b29      	ldr	r3, [pc, #164]	; (b9dc <nm_spi_init+0xe8>)
    b938:	4798      	blx	r3
    b93a:	2800      	cmp	r0, #0
    b93c:	d03b      	beq.n	b9b6 <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    b93e:	4c26      	ldr	r4, [pc, #152]	; (b9d8 <nm_spi_init+0xe4>)
    b940:	0020      	movs	r0, r4
    b942:	4b28      	ldr	r3, [pc, #160]	; (b9e4 <nm_spi_init+0xf0>)
    b944:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    b946:	2370      	movs	r3, #112	; 0x70
    b948:	0001      	movs	r1, r0
    b94a:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    b94c:	2050      	movs	r0, #80	; 0x50
    b94e:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    b950:	0020      	movs	r0, r4
    b952:	4b25      	ldr	r3, [pc, #148]	; (b9e8 <nm_spi_init+0xf4>)
    b954:	4798      	blx	r3
	return M2M_SUCCESS;
    b956:	2400      	movs	r4, #0
}
    b958:	0020      	movs	r0, r4
    b95a:	b002      	add	sp, #8
    b95c:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    b95e:	2201      	movs	r2, #1
    b960:	4b1c      	ldr	r3, [pc, #112]	; (b9d4 <nm_spi_init+0xe0>)
    b962:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    b964:	4a21      	ldr	r2, [pc, #132]	; (b9ec <nm_spi_init+0xf8>)
    b966:	4922      	ldr	r1, [pc, #136]	; (b9f0 <nm_spi_init+0xfc>)
    b968:	4822      	ldr	r0, [pc, #136]	; (b9f4 <nm_spi_init+0x100>)
    b96a:	4b23      	ldr	r3, [pc, #140]	; (b9f8 <nm_spi_init+0x104>)
    b96c:	4798      	blx	r3
    b96e:	4823      	ldr	r0, [pc, #140]	; (b9fc <nm_spi_init+0x108>)
    b970:	4b23      	ldr	r3, [pc, #140]	; (ba00 <nm_spi_init+0x10c>)
    b972:	4798      	blx	r3
    b974:	200d      	movs	r0, #13
    b976:	4b23      	ldr	r3, [pc, #140]	; (ba04 <nm_spi_init+0x110>)
    b978:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    b97a:	4669      	mov	r1, sp
    b97c:	4816      	ldr	r0, [pc, #88]	; (b9d8 <nm_spi_init+0xe4>)
    b97e:	4b17      	ldr	r3, [pc, #92]	; (b9dc <nm_spi_init+0xe8>)
    b980:	4798      	blx	r3
    b982:	1e04      	subs	r4, r0, #0
    b984:	d1c2      	bne.n	b90c <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    b986:	4a20      	ldr	r2, [pc, #128]	; (ba08 <nm_spi_init+0x114>)
    b988:	4919      	ldr	r1, [pc, #100]	; (b9f0 <nm_spi_init+0xfc>)
    b98a:	481a      	ldr	r0, [pc, #104]	; (b9f4 <nm_spi_init+0x100>)
    b98c:	4b1a      	ldr	r3, [pc, #104]	; (b9f8 <nm_spi_init+0x104>)
    b98e:	4798      	blx	r3
    b990:	481e      	ldr	r0, [pc, #120]	; (ba0c <nm_spi_init+0x118>)
    b992:	4b1b      	ldr	r3, [pc, #108]	; (ba00 <nm_spi_init+0x10c>)
    b994:	4798      	blx	r3
    b996:	200d      	movs	r0, #13
    b998:	4b1a      	ldr	r3, [pc, #104]	; (ba04 <nm_spi_init+0x110>)
    b99a:	4798      	blx	r3
			return 0;
    b99c:	e7dc      	b.n	b958 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    b99e:	4a1c      	ldr	r2, [pc, #112]	; (ba10 <nm_spi_init+0x11c>)
    b9a0:	4913      	ldr	r1, [pc, #76]	; (b9f0 <nm_spi_init+0xfc>)
    b9a2:	4814      	ldr	r0, [pc, #80]	; (b9f4 <nm_spi_init+0x100>)
    b9a4:	4b14      	ldr	r3, [pc, #80]	; (b9f8 <nm_spi_init+0x104>)
    b9a6:	4798      	blx	r3
    b9a8:	481a      	ldr	r0, [pc, #104]	; (ba14 <nm_spi_init+0x120>)
    b9aa:	4b15      	ldr	r3, [pc, #84]	; (ba00 <nm_spi_init+0x10c>)
    b9ac:	4798      	blx	r3
    b9ae:	200d      	movs	r0, #13
    b9b0:	4b14      	ldr	r3, [pc, #80]	; (ba04 <nm_spi_init+0x110>)
    b9b2:	4798      	blx	r3
			return 0;
    b9b4:	e7d0      	b.n	b958 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    b9b6:	4a18      	ldr	r2, [pc, #96]	; (ba18 <nm_spi_init+0x124>)
    b9b8:	490d      	ldr	r1, [pc, #52]	; (b9f0 <nm_spi_init+0xfc>)
    b9ba:	480e      	ldr	r0, [pc, #56]	; (b9f4 <nm_spi_init+0x100>)
    b9bc:	4b0e      	ldr	r3, [pc, #56]	; (b9f8 <nm_spi_init+0x104>)
    b9be:	4798      	blx	r3
    b9c0:	4816      	ldr	r0, [pc, #88]	; (ba1c <nm_spi_init+0x128>)
    b9c2:	4b0f      	ldr	r3, [pc, #60]	; (ba00 <nm_spi_init+0x10c>)
    b9c4:	4798      	blx	r3
    b9c6:	200d      	movs	r0, #13
    b9c8:	4b0e      	ldr	r3, [pc, #56]	; (ba04 <nm_spi_init+0x110>)
    b9ca:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    b9cc:	2406      	movs	r4, #6
    b9ce:	4264      	negs	r4, r4
    b9d0:	e7c2      	b.n	b958 <nm_spi_init+0x64>
    b9d2:	46c0      	nop			; (mov r8, r8)
    b9d4:	20000268 	.word	0x20000268
    b9d8:	0000e824 	.word	0x0000e824
    b9dc:	0000b711 	.word	0x0000b711
    b9e0:	0000b601 	.word	0x0000b601
    b9e4:	0000b8b1 	.word	0x0000b8b1
    b9e8:	0000b8dd 	.word	0x0000b8dd
    b9ec:	000004c7 	.word	0x000004c7
    b9f0:	00013110 	.word	0x00013110
    b9f4:	000129cc 	.word	0x000129cc
    b9f8:	00010319 	.word	0x00010319
    b9fc:	0001321c 	.word	0x0001321c
    ba00:	00010435 	.word	0x00010435
    ba04:	0001034d 	.word	0x0001034d
    ba08:	000004ca 	.word	0x000004ca
    ba0c:	0001326c 	.word	0x0001326c
    ba10:	000004d4 	.word	0x000004d4
    ba14:	00013298 	.word	0x00013298
    ba18:	000004de 	.word	0x000004de
    ba1c:	000132cc 	.word	0x000132cc

0000ba20 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba22:	46de      	mov	lr, fp
    ba24:	4657      	mov	r7, sl
    ba26:	464e      	mov	r6, r9
    ba28:	4645      	mov	r5, r8
    ba2a:	b5e0      	push	{r5, r6, r7, lr}
    ba2c:	b087      	sub	sp, #28
    ba2e:	9002      	str	r0, [sp, #8]
    ba30:	9103      	str	r1, [sp, #12]
    ba32:	0016      	movs	r6, r2
    ba34:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    ba36:	2300      	movs	r3, #0
    ba38:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    ba3a:	2400      	movs	r4, #0
    ba3c:	4b3e      	ldr	r3, [pc, #248]	; (bb38 <nm_spi_read_block+0x118>)
    ba3e:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    ba40:	46a9      	mov	r9, r5
    ba42:	e037      	b.n	bab4 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    ba44:	2301      	movs	r3, #1
    ba46:	469b      	mov	fp, r3
		size = 2;
    ba48:	3601      	adds	r6, #1
    ba4a:	e035      	b.n	bab8 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    ba4c:	20c8      	movs	r0, #200	; 0xc8
    ba4e:	4b3b      	ldr	r3, [pc, #236]	; (bb3c <nm_spi_read_block+0x11c>)
    ba50:	4798      	blx	r3
	if (result != N_OK) {
    ba52:	2801      	cmp	r0, #1
    ba54:	d045      	beq.n	bae2 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    ba56:	4a3a      	ldr	r2, [pc, #232]	; (bb40 <nm_spi_read_block+0x120>)
    ba58:	493a      	ldr	r1, [pc, #232]	; (bb44 <nm_spi_read_block+0x124>)
    ba5a:	483b      	ldr	r0, [pc, #236]	; (bb48 <nm_spi_read_block+0x128>)
    ba5c:	4f3b      	ldr	r7, [pc, #236]	; (bb4c <nm_spi_read_block+0x12c>)
    ba5e:	47b8      	blx	r7
    ba60:	9902      	ldr	r1, [sp, #8]
    ba62:	483b      	ldr	r0, [pc, #236]	; (bb50 <nm_spi_read_block+0x130>)
    ba64:	47b8      	blx	r7
    ba66:	200d      	movs	r0, #13
    ba68:	4b3a      	ldr	r3, [pc, #232]	; (bb54 <nm_spi_read_block+0x134>)
    ba6a:	4798      	blx	r3
		nm_bsp_sleep(1);
    ba6c:	2001      	movs	r0, #1
    ba6e:	4f3a      	ldr	r7, [pc, #232]	; (bb58 <nm_spi_read_block+0x138>)
    ba70:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ba72:	9400      	str	r4, [sp, #0]
    ba74:	0023      	movs	r3, r4
    ba76:	0022      	movs	r2, r4
    ba78:	0021      	movs	r1, r4
    ba7a:	20cf      	movs	r0, #207	; 0xcf
    ba7c:	4d2e      	ldr	r5, [pc, #184]	; (bb38 <nm_spi_read_block+0x118>)
    ba7e:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    ba80:	20cf      	movs	r0, #207	; 0xcf
    ba82:	4b2e      	ldr	r3, [pc, #184]	; (bb3c <nm_spi_read_block+0x11c>)
    ba84:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    ba86:	4a35      	ldr	r2, [pc, #212]	; (bb5c <nm_spi_read_block+0x13c>)
    ba88:	492e      	ldr	r1, [pc, #184]	; (bb44 <nm_spi_read_block+0x124>)
    ba8a:	482f      	ldr	r0, [pc, #188]	; (bb48 <nm_spi_read_block+0x128>)
    ba8c:	4b2f      	ldr	r3, [pc, #188]	; (bb4c <nm_spi_read_block+0x12c>)
    ba8e:	469a      	mov	sl, r3
    ba90:	4798      	blx	r3
    ba92:	0033      	movs	r3, r6
    ba94:	9a02      	ldr	r2, [sp, #8]
    ba96:	4649      	mov	r1, r9
    ba98:	4831      	ldr	r0, [pc, #196]	; (bb60 <nm_spi_read_block+0x140>)
    ba9a:	47d0      	blx	sl
    ba9c:	200d      	movs	r0, #13
    ba9e:	4b2d      	ldr	r3, [pc, #180]	; (bb54 <nm_spi_read_block+0x134>)
    baa0:	4798      	blx	r3
		nm_bsp_sleep(1);
    baa2:	2001      	movs	r0, #1
    baa4:	47b8      	blx	r7
    baa6:	2301      	movs	r3, #1
    baa8:	425b      	negs	r3, r3
    baaa:	469c      	mov	ip, r3
    baac:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    baae:	464b      	mov	r3, r9
    bab0:	2b00      	cmp	r3, #0
    bab2:	d038      	beq.n	bb26 <nm_spi_read_block+0x106>
	if (size == 1)
    bab4:	2e01      	cmp	r6, #1
    bab6:	d0c5      	beq.n	ba44 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    bab8:	9400      	str	r4, [sp, #0]
    baba:	0033      	movs	r3, r6
    babc:	0022      	movs	r2, r4
    babe:	9d02      	ldr	r5, [sp, #8]
    bac0:	0029      	movs	r1, r5
    bac2:	20c8      	movs	r0, #200	; 0xc8
    bac4:	47c0      	blx	r8
	if (result != N_OK) {
    bac6:	2801      	cmp	r0, #1
    bac8:	d0c0      	beq.n	ba4c <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    baca:	4a26      	ldr	r2, [pc, #152]	; (bb64 <nm_spi_read_block+0x144>)
    bacc:	491d      	ldr	r1, [pc, #116]	; (bb44 <nm_spi_read_block+0x124>)
    bace:	481e      	ldr	r0, [pc, #120]	; (bb48 <nm_spi_read_block+0x128>)
    bad0:	4f1e      	ldr	r7, [pc, #120]	; (bb4c <nm_spi_read_block+0x12c>)
    bad2:	47b8      	blx	r7
    bad4:	0029      	movs	r1, r5
    bad6:	4824      	ldr	r0, [pc, #144]	; (bb68 <nm_spi_read_block+0x148>)
    bad8:	47b8      	blx	r7
    bada:	200d      	movs	r0, #13
    badc:	4b1d      	ldr	r3, [pc, #116]	; (bb54 <nm_spi_read_block+0x134>)
    bade:	4798      	blx	r3
    bae0:	e7c4      	b.n	ba6c <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    bae2:	465b      	mov	r3, fp
    bae4:	2b00      	cmp	r3, #0
    bae6:	d016      	beq.n	bb16 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    bae8:	af05      	add	r7, sp, #20
    baea:	0022      	movs	r2, r4
    baec:	0031      	movs	r1, r6
    baee:	0038      	movs	r0, r7
    baf0:	4b1e      	ldr	r3, [pc, #120]	; (bb6c <nm_spi_read_block+0x14c>)
    baf2:	4798      	blx	r3
		buf[0] = tmp[0];
    baf4:	783b      	ldrb	r3, [r7, #0]
    baf6:	9a03      	ldr	r2, [sp, #12]
    baf8:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    bafa:	2801      	cmp	r0, #1
    bafc:	d011      	beq.n	bb22 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    bafe:	4a1c      	ldr	r2, [pc, #112]	; (bb70 <nm_spi_read_block+0x150>)
    bb00:	4910      	ldr	r1, [pc, #64]	; (bb44 <nm_spi_read_block+0x124>)
    bb02:	4811      	ldr	r0, [pc, #68]	; (bb48 <nm_spi_read_block+0x128>)
    bb04:	4b11      	ldr	r3, [pc, #68]	; (bb4c <nm_spi_read_block+0x12c>)
    bb06:	4798      	blx	r3
    bb08:	481a      	ldr	r0, [pc, #104]	; (bb74 <nm_spi_read_block+0x154>)
    bb0a:	4b1b      	ldr	r3, [pc, #108]	; (bb78 <nm_spi_read_block+0x158>)
    bb0c:	4798      	blx	r3
    bb0e:	200d      	movs	r0, #13
    bb10:	4b10      	ldr	r3, [pc, #64]	; (bb54 <nm_spi_read_block+0x134>)
    bb12:	4798      	blx	r3
    bb14:	e7aa      	b.n	ba6c <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    bb16:	0022      	movs	r2, r4
    bb18:	0031      	movs	r1, r6
    bb1a:	9803      	ldr	r0, [sp, #12]
    bb1c:	4b13      	ldr	r3, [pc, #76]	; (bb6c <nm_spi_read_block+0x14c>)
    bb1e:	4798      	blx	r3
    bb20:	e7eb      	b.n	bafa <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    bb22:	2000      	movs	r0, #0
    bb24:	e001      	b.n	bb2a <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    bb26:	2006      	movs	r0, #6
    bb28:	4240      	negs	r0, r0

	return s8Ret;
}
    bb2a:	b007      	add	sp, #28
    bb2c:	bc3c      	pop	{r2, r3, r4, r5}
    bb2e:	4690      	mov	r8, r2
    bb30:	4699      	mov	r9, r3
    bb32:	46a2      	mov	sl, r4
    bb34:	46ab      	mov	fp, r5
    bb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb38:	0000b245 	.word	0x0000b245
    bb3c:	0000b3e5 	.word	0x0000b3e5
    bb40:	00000463 	.word	0x00000463
    bb44:	00013104 	.word	0x00013104
    bb48:	000129cc 	.word	0x000129cc
    bb4c:	00010319 	.word	0x00010319
    bb50:	00013320 	.word	0x00013320
    bb54:	0001034d 	.word	0x0001034d
    bb58:	00009651 	.word	0x00009651
    bb5c:	00000484 	.word	0x00000484
    bb60:	00013380 	.word	0x00013380
    bb64:	0000045d 	.word	0x0000045d
    bb68:	000132f0 	.word	0x000132f0
    bb6c:	0000b4b9 	.word	0x0000b4b9
    bb70:	00000473 	.word	0x00000473
    bb74:	00013358 	.word	0x00013358
    bb78:	00010435 	.word	0x00010435

0000bb7c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    bb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb7e:	46de      	mov	lr, fp
    bb80:	4647      	mov	r7, r8
    bb82:	b580      	push	{r7, lr}
    bb84:	b089      	sub	sp, #36	; 0x24
    bb86:	9004      	str	r0, [sp, #16]
    bb88:	468b      	mov	fp, r1
    bb8a:	9203      	str	r2, [sp, #12]
    bb8c:	260a      	movs	r6, #10
    bb8e:	2780      	movs	r7, #128	; 0x80
    bb90:	01bf      	lsls	r7, r7, #6
    bb92:	466b      	mov	r3, sp
    bb94:	82df      	strh	r7, [r3, #22]
    bb96:	0035      	movs	r5, r6
    bb98:	e02d      	b.n	bbf6 <nm_spi_write_block+0x7a>
		size = 2;
    bb9a:	3301      	adds	r3, #1
    bb9c:	9303      	str	r3, [sp, #12]
    bb9e:	e02d      	b.n	bbfc <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    bba0:	4a83      	ldr	r2, [pc, #524]	; (bdb0 <nm_spi_write_block+0x234>)
    bba2:	4984      	ldr	r1, [pc, #528]	; (bdb4 <nm_spi_write_block+0x238>)
    bba4:	4884      	ldr	r0, [pc, #528]	; (bdb8 <nm_spi_write_block+0x23c>)
    bba6:	4c85      	ldr	r4, [pc, #532]	; (bdbc <nm_spi_write_block+0x240>)
    bba8:	47a0      	blx	r4
    bbaa:	0031      	movs	r1, r6
    bbac:	4884      	ldr	r0, [pc, #528]	; (bdc0 <nm_spi_write_block+0x244>)
    bbae:	47a0      	blx	r4
    bbb0:	200d      	movs	r0, #13
    bbb2:	4b84      	ldr	r3, [pc, #528]	; (bdc4 <nm_spi_write_block+0x248>)
    bbb4:	4798      	blx	r3
		nm_bsp_sleep(1);
    bbb6:	2001      	movs	r0, #1
    bbb8:	4c83      	ldr	r4, [pc, #524]	; (bdc8 <nm_spi_write_block+0x24c>)
    bbba:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    bbbc:	2300      	movs	r3, #0
    bbbe:	9300      	str	r3, [sp, #0]
    bbc0:	2200      	movs	r2, #0
    bbc2:	2100      	movs	r1, #0
    bbc4:	20cf      	movs	r0, #207	; 0xcf
    bbc6:	4e81      	ldr	r6, [pc, #516]	; (bdcc <nm_spi_write_block+0x250>)
    bbc8:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    bbca:	20cf      	movs	r0, #207	; 0xcf
    bbcc:	4b80      	ldr	r3, [pc, #512]	; (bdd0 <nm_spi_write_block+0x254>)
    bbce:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    bbd0:	4a80      	ldr	r2, [pc, #512]	; (bdd4 <nm_spi_write_block+0x258>)
    bbd2:	4978      	ldr	r1, [pc, #480]	; (bdb4 <nm_spi_write_block+0x238>)
    bbd4:	4878      	ldr	r0, [pc, #480]	; (bdb8 <nm_spi_write_block+0x23c>)
    bbd6:	4e79      	ldr	r6, [pc, #484]	; (bdbc <nm_spi_write_block+0x240>)
    bbd8:	47b0      	blx	r6
    bbda:	9b03      	ldr	r3, [sp, #12]
    bbdc:	9a04      	ldr	r2, [sp, #16]
    bbde:	0029      	movs	r1, r5
    bbe0:	487d      	ldr	r0, [pc, #500]	; (bdd8 <nm_spi_write_block+0x25c>)
    bbe2:	47b0      	blx	r6
    bbe4:	200d      	movs	r0, #13
    bbe6:	4b77      	ldr	r3, [pc, #476]	; (bdc4 <nm_spi_write_block+0x248>)
    bbe8:	4798      	blx	r3
		nm_bsp_sleep(1);
    bbea:	2001      	movs	r0, #1
    bbec:	47a0      	blx	r4
    bbee:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    bbf0:	2d00      	cmp	r5, #0
    bbf2:	d100      	bne.n	bbf6 <nm_spi_write_block+0x7a>
    bbf4:	e0d5      	b.n	bda2 <nm_spi_write_block+0x226>
	if (size == 1)
    bbf6:	9b03      	ldr	r3, [sp, #12]
    bbf8:	2b01      	cmp	r3, #1
    bbfa:	d0ce      	beq.n	bb9a <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    bbfc:	2300      	movs	r3, #0
    bbfe:	9300      	str	r3, [sp, #0]
    bc00:	9b03      	ldr	r3, [sp, #12]
    bc02:	2200      	movs	r2, #0
    bc04:	9e04      	ldr	r6, [sp, #16]
    bc06:	0031      	movs	r1, r6
    bc08:	20c7      	movs	r0, #199	; 0xc7
    bc0a:	4c70      	ldr	r4, [pc, #448]	; (bdcc <nm_spi_write_block+0x250>)
    bc0c:	47a0      	blx	r4
	if (result != N_OK) {
    bc0e:	2801      	cmp	r0, #1
    bc10:	d1c6      	bne.n	bba0 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    bc12:	20c7      	movs	r0, #199	; 0xc7
    bc14:	4b6e      	ldr	r3, [pc, #440]	; (bdd0 <nm_spi_write_block+0x254>)
    bc16:	4798      	blx	r3
	if (result != N_OK) {
    bc18:	2801      	cmp	r0, #1
    bc1a:	d00c      	beq.n	bc36 <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    bc1c:	22f4      	movs	r2, #244	; 0xf4
    bc1e:	0092      	lsls	r2, r2, #2
    bc20:	4964      	ldr	r1, [pc, #400]	; (bdb4 <nm_spi_write_block+0x238>)
    bc22:	4865      	ldr	r0, [pc, #404]	; (bdb8 <nm_spi_write_block+0x23c>)
    bc24:	4c65      	ldr	r4, [pc, #404]	; (bdbc <nm_spi_write_block+0x240>)
    bc26:	47a0      	blx	r4
    bc28:	9904      	ldr	r1, [sp, #16]
    bc2a:	486c      	ldr	r0, [pc, #432]	; (bddc <nm_spi_write_block+0x260>)
    bc2c:	47a0      	blx	r4
    bc2e:	200d      	movs	r0, #13
    bc30:	4b64      	ldr	r3, [pc, #400]	; (bdc4 <nm_spi_write_block+0x248>)
    bc32:	4798      	blx	r3
    bc34:	e7bf      	b.n	bbb6 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    bc36:	2200      	movs	r2, #0
    bc38:	ab07      	add	r3, sp, #28
    bc3a:	801a      	strh	r2, [r3, #0]
    bc3c:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    bc3e:	2600      	movs	r6, #0
				order = 0x1;
    bc40:	46a8      	mov	r8, r5
    bc42:	0035      	movs	r5, r6
    bc44:	0026      	movs	r6, r4
    bc46:	e021      	b.n	bc8c <nm_spi_write_block+0x110>
				order = 0x2;
    bc48:	2300      	movs	r3, #0
    bc4a:	42b7      	cmp	r7, r6
    bc4c:	415b      	adcs	r3, r3
    bc4e:	3302      	adds	r3, #2
		cmd |= order;
    bc50:	200b      	movs	r0, #11
    bc52:	aa04      	add	r2, sp, #16
    bc54:	4694      	mov	ip, r2
    bc56:	4460      	add	r0, ip
    bc58:	2210      	movs	r2, #16
    bc5a:	4252      	negs	r2, r2
    bc5c:	4313      	orrs	r3, r2
    bc5e:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    bc60:	2101      	movs	r1, #1
    bc62:	4b5f      	ldr	r3, [pc, #380]	; (bde0 <nm_spi_write_block+0x264>)
    bc64:	4798      	blx	r3
    bc66:	2800      	cmp	r0, #0
    bc68:	d11d      	bne.n	bca6 <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    bc6a:	465b      	mov	r3, fp
    bc6c:	1958      	adds	r0, r3, r5
    bc6e:	0021      	movs	r1, r4
    bc70:	4b5b      	ldr	r3, [pc, #364]	; (bde0 <nm_spi_write_block+0x264>)
    bc72:	4798      	blx	r3
    bc74:	2800      	cmp	r0, #0
    bc76:	d130      	bne.n	bcda <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    bc78:	4b5a      	ldr	r3, [pc, #360]	; (bde4 <nm_spi_write_block+0x268>)
    bc7a:	781b      	ldrb	r3, [r3, #0]
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d039      	beq.n	bcf4 <nm_spi_write_block+0x178>
		ix += nbytes;
    bc80:	1965      	adds	r5, r4, r5
    bc82:	b22d      	sxth	r5, r5
		sz -= nbytes;
    bc84:	1b36      	subs	r6, r6, r4
    bc86:	b2b6      	uxth	r6, r6
	} while (sz);
    bc88:	2e00      	cmp	r6, #0
    bc8a:	d053      	beq.n	bd34 <nm_spi_write_block+0x1b8>
    bc8c:	1c34      	adds	r4, r6, #0
    bc8e:	42be      	cmp	r6, r7
    bc90:	d901      	bls.n	bc96 <nm_spi_write_block+0x11a>
    bc92:	466b      	mov	r3, sp
    bc94:	8adc      	ldrh	r4, [r3, #22]
    bc96:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    bc98:	2d00      	cmp	r5, #0
    bc9a:	d1d5      	bne.n	bc48 <nm_spi_write_block+0xcc>
				order = 0x3;
    bc9c:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    bc9e:	42be      	cmp	r6, r7
    bca0:	d9d6      	bls.n	bc50 <nm_spi_write_block+0xd4>
				order = 0x1;
    bca2:	3b02      	subs	r3, #2
    bca4:	e7d4      	b.n	bc50 <nm_spi_write_block+0xd4>
    bca6:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    bca8:	22d4      	movs	r2, #212	; 0xd4
    bcaa:	0092      	lsls	r2, r2, #2
    bcac:	494e      	ldr	r1, [pc, #312]	; (bde8 <nm_spi_write_block+0x26c>)
    bcae:	4842      	ldr	r0, [pc, #264]	; (bdb8 <nm_spi_write_block+0x23c>)
    bcb0:	4b42      	ldr	r3, [pc, #264]	; (bdbc <nm_spi_write_block+0x240>)
    bcb2:	4798      	blx	r3
    bcb4:	484d      	ldr	r0, [pc, #308]	; (bdec <nm_spi_write_block+0x270>)
    bcb6:	4b4e      	ldr	r3, [pc, #312]	; (bdf0 <nm_spi_write_block+0x274>)
    bcb8:	4798      	blx	r3
    bcba:	200d      	movs	r0, #13
    bcbc:	4b41      	ldr	r3, [pc, #260]	; (bdc4 <nm_spi_write_block+0x248>)
    bcbe:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    bcc0:	22f8      	movs	r2, #248	; 0xf8
    bcc2:	0092      	lsls	r2, r2, #2
    bcc4:	493b      	ldr	r1, [pc, #236]	; (bdb4 <nm_spi_write_block+0x238>)
    bcc6:	483c      	ldr	r0, [pc, #240]	; (bdb8 <nm_spi_write_block+0x23c>)
    bcc8:	4b3c      	ldr	r3, [pc, #240]	; (bdbc <nm_spi_write_block+0x240>)
    bcca:	4798      	blx	r3
    bccc:	4849      	ldr	r0, [pc, #292]	; (bdf4 <nm_spi_write_block+0x278>)
    bcce:	4b48      	ldr	r3, [pc, #288]	; (bdf0 <nm_spi_write_block+0x274>)
    bcd0:	4798      	blx	r3
    bcd2:	200d      	movs	r0, #13
    bcd4:	4b3b      	ldr	r3, [pc, #236]	; (bdc4 <nm_spi_write_block+0x248>)
    bcd6:	4798      	blx	r3
    bcd8:	e76d      	b.n	bbb6 <nm_spi_write_block+0x3a>
    bcda:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    bcdc:	4a46      	ldr	r2, [pc, #280]	; (bdf8 <nm_spi_write_block+0x27c>)
    bcde:	4942      	ldr	r1, [pc, #264]	; (bde8 <nm_spi_write_block+0x26c>)
    bce0:	4835      	ldr	r0, [pc, #212]	; (bdb8 <nm_spi_write_block+0x23c>)
    bce2:	4b36      	ldr	r3, [pc, #216]	; (bdbc <nm_spi_write_block+0x240>)
    bce4:	4798      	blx	r3
    bce6:	4845      	ldr	r0, [pc, #276]	; (bdfc <nm_spi_write_block+0x280>)
    bce8:	4b41      	ldr	r3, [pc, #260]	; (bdf0 <nm_spi_write_block+0x274>)
    bcea:	4798      	blx	r3
    bcec:	200d      	movs	r0, #13
    bcee:	4b35      	ldr	r3, [pc, #212]	; (bdc4 <nm_spi_write_block+0x248>)
    bcf0:	4798      	blx	r3
    bcf2:	e7e5      	b.n	bcc0 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    bcf4:	2102      	movs	r1, #2
    bcf6:	a807      	add	r0, sp, #28
    bcf8:	4b39      	ldr	r3, [pc, #228]	; (bde0 <nm_spi_write_block+0x264>)
    bcfa:	4798      	blx	r3
    bcfc:	2800      	cmp	r0, #0
    bcfe:	d0bf      	beq.n	bc80 <nm_spi_write_block+0x104>
    bd00:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    bd02:	4a3f      	ldr	r2, [pc, #252]	; (be00 <nm_spi_write_block+0x284>)
    bd04:	4938      	ldr	r1, [pc, #224]	; (bde8 <nm_spi_write_block+0x26c>)
    bd06:	482c      	ldr	r0, [pc, #176]	; (bdb8 <nm_spi_write_block+0x23c>)
    bd08:	4b2c      	ldr	r3, [pc, #176]	; (bdbc <nm_spi_write_block+0x240>)
    bd0a:	4798      	blx	r3
    bd0c:	483d      	ldr	r0, [pc, #244]	; (be04 <nm_spi_write_block+0x288>)
    bd0e:	4b38      	ldr	r3, [pc, #224]	; (bdf0 <nm_spi_write_block+0x274>)
    bd10:	4798      	blx	r3
    bd12:	200d      	movs	r0, #13
    bd14:	4b2b      	ldr	r3, [pc, #172]	; (bdc4 <nm_spi_write_block+0x248>)
    bd16:	4798      	blx	r3
    bd18:	e7d2      	b.n	bcc0 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    bd1a:	223c      	movs	r2, #60	; 0x3c
    bd1c:	32ff      	adds	r2, #255	; 0xff
    bd1e:	493a      	ldr	r1, [pc, #232]	; (be08 <nm_spi_write_block+0x28c>)
    bd20:	4825      	ldr	r0, [pc, #148]	; (bdb8 <nm_spi_write_block+0x23c>)
    bd22:	4b26      	ldr	r3, [pc, #152]	; (bdbc <nm_spi_write_block+0x240>)
    bd24:	4798      	blx	r3
    bd26:	4839      	ldr	r0, [pc, #228]	; (be0c <nm_spi_write_block+0x290>)
    bd28:	4b31      	ldr	r3, [pc, #196]	; (bdf0 <nm_spi_write_block+0x274>)
    bd2a:	4798      	blx	r3
    bd2c:	200d      	movs	r0, #13
    bd2e:	4b25      	ldr	r3, [pc, #148]	; (bdc4 <nm_spi_write_block+0x248>)
    bd30:	4798      	blx	r3
    bd32:	e027      	b.n	bd84 <nm_spi_write_block+0x208>
    bd34:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    bd36:	4b2b      	ldr	r3, [pc, #172]	; (bde4 <nm_spi_write_block+0x268>)
    bd38:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    bd3a:	1e63      	subs	r3, r4, #1
    bd3c:	419c      	sbcs	r4, r3
    bd3e:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    bd40:	b2a1      	uxth	r1, r4
    bd42:	a807      	add	r0, sp, #28
    bd44:	4b32      	ldr	r3, [pc, #200]	; (be10 <nm_spi_write_block+0x294>)
    bd46:	4798      	blx	r3
    bd48:	2800      	cmp	r0, #0
    bd4a:	d1e6      	bne.n	bd1a <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    bd4c:	ab08      	add	r3, sp, #32
    bd4e:	191b      	adds	r3, r3, r4
    bd50:	3b05      	subs	r3, #5
    bd52:	781b      	ldrb	r3, [r3, #0]
    bd54:	2b00      	cmp	r3, #0
    bd56:	d106      	bne.n	bd66 <nm_spi_write_block+0x1ea>
    bd58:	ab08      	add	r3, sp, #32
    bd5a:	469c      	mov	ip, r3
    bd5c:	4464      	add	r4, ip
    bd5e:	3c06      	subs	r4, #6
    bd60:	7823      	ldrb	r3, [r4, #0]
    bd62:	2bc3      	cmp	r3, #195	; 0xc3
    bd64:	d01b      	beq.n	bd9e <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    bd66:	22a1      	movs	r2, #161	; 0xa1
    bd68:	0052      	lsls	r2, r2, #1
    bd6a:	4927      	ldr	r1, [pc, #156]	; (be08 <nm_spi_write_block+0x28c>)
    bd6c:	4812      	ldr	r0, [pc, #72]	; (bdb8 <nm_spi_write_block+0x23c>)
    bd6e:	4c13      	ldr	r4, [pc, #76]	; (bdbc <nm_spi_write_block+0x240>)
    bd70:	47a0      	blx	r4
    bd72:	a907      	add	r1, sp, #28
    bd74:	788b      	ldrb	r3, [r1, #2]
    bd76:	784a      	ldrb	r2, [r1, #1]
    bd78:	7809      	ldrb	r1, [r1, #0]
    bd7a:	4826      	ldr	r0, [pc, #152]	; (be14 <nm_spi_write_block+0x298>)
    bd7c:	47a0      	blx	r4
    bd7e:	200d      	movs	r0, #13
    bd80:	4b10      	ldr	r3, [pc, #64]	; (bdc4 <nm_spi_write_block+0x248>)
    bd82:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    bd84:	22fa      	movs	r2, #250	; 0xfa
    bd86:	0092      	lsls	r2, r2, #2
    bd88:	490a      	ldr	r1, [pc, #40]	; (bdb4 <nm_spi_write_block+0x238>)
    bd8a:	480b      	ldr	r0, [pc, #44]	; (bdb8 <nm_spi_write_block+0x23c>)
    bd8c:	4b0b      	ldr	r3, [pc, #44]	; (bdbc <nm_spi_write_block+0x240>)
    bd8e:	4798      	blx	r3
    bd90:	4818      	ldr	r0, [pc, #96]	; (bdf4 <nm_spi_write_block+0x278>)
    bd92:	4b17      	ldr	r3, [pc, #92]	; (bdf0 <nm_spi_write_block+0x274>)
    bd94:	4798      	blx	r3
    bd96:	200d      	movs	r0, #13
    bd98:	4b0a      	ldr	r3, [pc, #40]	; (bdc4 <nm_spi_write_block+0x248>)
    bd9a:	4798      	blx	r3
    bd9c:	e70b      	b.n	bbb6 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    bd9e:	2000      	movs	r0, #0
    bda0:	e001      	b.n	bda6 <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    bda2:	2006      	movs	r0, #6
    bda4:	4240      	negs	r0, r0

	return s8Ret;
}
    bda6:	b009      	add	sp, #36	; 0x24
    bda8:	bc0c      	pop	{r2, r3}
    bdaa:	4690      	mov	r8, r2
    bdac:	469b      	mov	fp, r3
    bdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bdb0:	000003ca 	.word	0x000003ca
    bdb4:	000130e4 	.word	0x000130e4
    bdb8:	000129cc 	.word	0x000129cc
    bdbc:	00010319 	.word	0x00010319
    bdc0:	0001339c 	.word	0x0001339c
    bdc4:	0001034d 	.word	0x0001034d
    bdc8:	00009651 	.word	0x00009651
    bdcc:	0000b245 	.word	0x0000b245
    bdd0:	0000b3e5 	.word	0x0000b3e5
    bdd4:	000003f2 	.word	0x000003f2
    bdd8:	00013380 	.word	0x00013380
    bddc:	000133cc 	.word	0x000133cc
    bde0:	0000b225 	.word	0x0000b225
    bde4:	20000268 	.word	0x20000268
    bde8:	000130c4 	.word	0x000130c4
    bdec:	00013404 	.word	0x00013404
    bdf0:	00010435 	.word	0x00010435
    bdf4:	000134f8 	.word	0x000134f8
    bdf8:	00000359 	.word	0x00000359
    bdfc:	0001343c 	.word	0x0001343c
    be00:	00000363 	.word	0x00000363
    be04:	00013470 	.word	0x00013470
    be08:	00013098 	.word	0x00013098
    be0c:	000134a8 	.word	0x000134a8
    be10:	0000b3c5 	.word	0x0000b3c5
    be14:	000134c8 	.word	0x000134c8

0000be18 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    be18:	b5f0      	push	{r4, r5, r6, r7, lr}
    be1a:	46de      	mov	lr, fp
    be1c:	4657      	mov	r7, sl
    be1e:	464e      	mov	r6, r9
    be20:	4645      	mov	r5, r8
    be22:	b5e0      	push	{r5, r6, r7, lr}
    be24:	b085      	sub	sp, #20
    be26:	9001      	str	r0, [sp, #4]
    be28:	000e      	movs	r6, r1
    be2a:	9202      	str	r2, [sp, #8]
    be2c:	001d      	movs	r5, r3
    be2e:	ab0e      	add	r3, sp, #56	; 0x38
    be30:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    be32:	2c00      	cmp	r4, #0
    be34:	d064      	beq.n	bf00 <Socket_ReadSocketData+0xe8>
    be36:	0103      	lsls	r3, r0, #4
    be38:	4935      	ldr	r1, [pc, #212]	; (bf10 <Socket_ReadSocketData+0xf8>)
    be3a:	585b      	ldr	r3, [r3, r1]
    be3c:	2b00      	cmp	r3, #0
    be3e:	d05f      	beq.n	bf00 <Socket_ReadSocketData+0xe8>
    be40:	0101      	lsls	r1, r0, #4
    be42:	4b33      	ldr	r3, [pc, #204]	; (bf10 <Socket_ReadSocketData+0xf8>)
    be44:	185b      	adds	r3, r3, r1
    be46:	889b      	ldrh	r3, [r3, #4]
    be48:	b29b      	uxth	r3, r3
    be4a:	2b00      	cmp	r3, #0
    be4c:	d058      	beq.n	bf00 <Socket_ReadSocketData+0xe8>
    be4e:	4b30      	ldr	r3, [pc, #192]	; (bf10 <Socket_ReadSocketData+0xf8>)
    be50:	185b      	adds	r3, r3, r1
    be52:	7a9b      	ldrb	r3, [r3, #10]
    be54:	2b01      	cmp	r3, #1
    be56:	d153      	bne.n	bf00 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    be58:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    be5a:	4b2d      	ldr	r3, [pc, #180]	; (bf10 <Socket_ReadSocketData+0xf8>)
    be5c:	469b      	mov	fp, r3
    be5e:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    be60:	465b      	mov	r3, fp
    be62:	220a      	movs	r2, #10
    be64:	4690      	mov	r8, r2
    be66:	44d8      	add	r8, fp
    be68:	468a      	mov	sl, r1
    be6a:	9500      	str	r5, [sp, #0]
    be6c:	9303      	str	r3, [sp, #12]
    be6e:	e015      	b.n	be9c <Socket_ReadSocketData+0x84>
    be70:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    be72:	2301      	movs	r3, #1
    be74:	e01c      	b.n	beb0 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    be76:	3301      	adds	r3, #1
    be78:	2200      	movs	r2, #0
    be7a:	2100      	movs	r1, #0
    be7c:	2000      	movs	r0, #0
    be7e:	4c25      	ldr	r4, [pc, #148]	; (bf14 <Socket_ReadSocketData+0xfc>)
    be80:	47a0      	blx	r4
    be82:	e03d      	b.n	bf00 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    be84:	4824      	ldr	r0, [pc, #144]	; (bf18 <Socket_ReadSocketData+0x100>)
    be86:	4d25      	ldr	r5, [pc, #148]	; (bf1c <Socket_ReadSocketData+0x104>)
    be88:	47a8      	blx	r5
    be8a:	0021      	movs	r1, r4
    be8c:	4824      	ldr	r0, [pc, #144]	; (bf20 <Socket_ReadSocketData+0x108>)
    be8e:	47a8      	blx	r5
    be90:	200d      	movs	r0, #13
    be92:	4b24      	ldr	r3, [pc, #144]	; (bf24 <Socket_ReadSocketData+0x10c>)
    be94:	4798      	blx	r3
				break;
    be96:	e033      	b.n	bf00 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    be98:	2c00      	cmp	r4, #0
    be9a:	d031      	beq.n	bf00 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    be9c:	465b      	mov	r3, fp
    be9e:	889b      	ldrh	r3, [r3, #4]
    bea0:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    bea2:	b21b      	sxth	r3, r3
    bea4:	2b00      	cmp	r3, #0
    bea6:	dde3      	ble.n	be70 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    bea8:	9b03      	ldr	r3, [sp, #12]
    beaa:	889d      	ldrh	r5, [r3, #4]
    beac:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    beae:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    beb0:	4a17      	ldr	r2, [pc, #92]	; (bf10 <Socket_ReadSocketData+0xf8>)
    beb2:	4651      	mov	r1, sl
    beb4:	5889      	ldr	r1, [r1, r2]
    beb6:	002a      	movs	r2, r5
    beb8:	9800      	ldr	r0, [sp, #0]
    beba:	4f16      	ldr	r7, [pc, #88]	; (bf14 <Socket_ReadSocketData+0xfc>)
    bebc:	47b8      	blx	r7
    bebe:	2800      	cmp	r0, #0
    bec0:	d1e0      	bne.n	be84 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    bec2:	4b13      	ldr	r3, [pc, #76]	; (bf10 <Socket_ReadSocketData+0xf8>)
    bec4:	4652      	mov	r2, sl
    bec6:	58d3      	ldr	r3, [r2, r3]
    bec8:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    beca:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    becc:	88f3      	ldrh	r3, [r6, #6]
    bece:	1b5b      	subs	r3, r3, r5
    bed0:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    bed2:	4b15      	ldr	r3, [pc, #84]	; (bf28 <Socket_ReadSocketData+0x110>)
    bed4:	681b      	ldr	r3, [r3, #0]
    bed6:	2b00      	cmp	r3, #0
    bed8:	d005      	beq.n	bee6 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    beda:	4b13      	ldr	r3, [pc, #76]	; (bf28 <Socket_ReadSocketData+0x110>)
    bedc:	681b      	ldr	r3, [r3, #0]
    bede:	0032      	movs	r2, r6
    bee0:	9902      	ldr	r1, [sp, #8]
    bee2:	9801      	ldr	r0, [sp, #4]
    bee4:	4798      	blx	r3
				u16ReadCount -= u16Read;
    bee6:	1b64      	subs	r4, r4, r5
    bee8:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    beea:	9b00      	ldr	r3, [sp, #0]
    beec:	469c      	mov	ip, r3
    beee:	44ac      	add	ip, r5
    bef0:	4663      	mov	r3, ip
    bef2:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    bef4:	4643      	mov	r3, r8
    bef6:	781b      	ldrb	r3, [r3, #0]
    bef8:	2b00      	cmp	r3, #0
    befa:	d1cd      	bne.n	be98 <Socket_ReadSocketData+0x80>
    befc:	2c00      	cmp	r4, #0
    befe:	d1ba      	bne.n	be76 <Socket_ReadSocketData+0x5e>
	}
}
    bf00:	b005      	add	sp, #20
    bf02:	bc3c      	pop	{r2, r3, r4, r5}
    bf04:	4690      	mov	r8, r2
    bf06:	4699      	mov	r9, r3
    bf08:	46a2      	mov	sl, r4
    bf0a:	46ab      	mov	fp, r5
    bf0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf0e:	46c0      	nop			; (mov r8, r8)
    bf10:	20000930 	.word	0x20000930
    bf14:	0000a19d 	.word	0x0000a19d
    bf18:	00012cfc 	.word	0x00012cfc
    bf1c:	00010319 	.word	0x00010319
    bf20:	00013760 	.word	0x00013760
    bf24:	0001034d 	.word	0x0001034d
    bf28:	200009e0 	.word	0x200009e0

0000bf2c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf2e:	46d6      	mov	lr, sl
    bf30:	464f      	mov	r7, r9
    bf32:	4646      	mov	r6, r8
    bf34:	b5c0      	push	{r6, r7, lr}
    bf36:	b09a      	sub	sp, #104	; 0x68
    bf38:	000d      	movs	r5, r1
    bf3a:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    bf3c:	2841      	cmp	r0, #65	; 0x41
    bf3e:	d039      	beq.n	bfb4 <m2m_ip_cb+0x88>
    bf40:	2854      	cmp	r0, #84	; 0x54
    bf42:	d037      	beq.n	bfb4 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    bf44:	2842      	cmp	r0, #66	; 0x42
    bf46:	d053      	beq.n	bff0 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    bf48:	2843      	cmp	r0, #67	; 0x43
    bf4a:	d06a      	beq.n	c022 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    bf4c:	2844      	cmp	r0, #68	; 0x44
    bf4e:	d100      	bne.n	bf52 <m2m_ip_cb+0x26>
    bf50:	e0af      	b.n	c0b2 <m2m_ip_cb+0x186>
    bf52:	284b      	cmp	r0, #75	; 0x4b
    bf54:	d100      	bne.n	bf58 <m2m_ip_cb+0x2c>
    bf56:	e0ac      	b.n	c0b2 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    bf58:	284a      	cmp	r0, #74	; 0x4a
    bf5a:	d100      	bne.n	bf5e <m2m_ip_cb+0x32>
    bf5c:	e0cf      	b.n	c0fe <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    bf5e:	2846      	cmp	r0, #70	; 0x46
    bf60:	d100      	bne.n	bf64 <m2m_ip_cb+0x38>
    bf62:	e0e5      	b.n	c130 <m2m_ip_cb+0x204>
    bf64:	2848      	cmp	r0, #72	; 0x48
    bf66:	d100      	bne.n	bf6a <m2m_ip_cb+0x3e>
    bf68:	e10e      	b.n	c188 <m2m_ip_cb+0x25c>
    bf6a:	284d      	cmp	r0, #77	; 0x4d
    bf6c:	d100      	bne.n	bf70 <m2m_ip_cb+0x44>
    bf6e:	e0dc      	b.n	c12a <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    bf70:	2845      	cmp	r0, #69	; 0x45
    bf72:	d100      	bne.n	bf76 <m2m_ip_cb+0x4a>
    bf74:	e12c      	b.n	c1d0 <m2m_ip_cb+0x2a4>
    bf76:	2847      	cmp	r0, #71	; 0x47
    bf78:	d100      	bne.n	bf7c <m2m_ip_cb+0x50>
    bf7a:	e14d      	b.n	c218 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    bf7c:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    bf7e:	284c      	cmp	r0, #76	; 0x4c
    bf80:	d100      	bne.n	bf84 <m2m_ip_cb+0x58>
    bf82:	e126      	b.n	c1d2 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    bf84:	2852      	cmp	r0, #82	; 0x52
    bf86:	d12d      	bne.n	bfe4 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    bf88:	2301      	movs	r3, #1
    bf8a:	2214      	movs	r2, #20
    bf8c:	a909      	add	r1, sp, #36	; 0x24
    bf8e:	0020      	movs	r0, r4
    bf90:	4ca2      	ldr	r4, [pc, #648]	; (c21c <m2m_ip_cb+0x2f0>)
    bf92:	47a0      	blx	r4
    bf94:	2800      	cmp	r0, #0
    bf96:	d125      	bne.n	bfe4 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    bf98:	4ba1      	ldr	r3, [pc, #644]	; (c220 <m2m_ip_cb+0x2f4>)
    bf9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf9c:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    bf9e:	681b      	ldr	r3, [r3, #0]
    bfa0:	2b00      	cmp	r3, #0
    bfa2:	d01f      	beq.n	bfe4 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    bfa4:	4b9e      	ldr	r3, [pc, #632]	; (c220 <m2m_ip_cb+0x2f4>)
    bfa6:	681c      	ldr	r4, [r3, #0]
    bfa8:	ab09      	add	r3, sp, #36	; 0x24
    bfaa:	7c1a      	ldrb	r2, [r3, #16]
    bfac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bfae:	9809      	ldr	r0, [sp, #36]	; 0x24
    bfb0:	47a0      	blx	r4
			}
		}
	}
}
    bfb2:	e017      	b.n	bfe4 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    bfb4:	2300      	movs	r3, #0
    bfb6:	2204      	movs	r2, #4
    bfb8:	a909      	add	r1, sp, #36	; 0x24
    bfba:	0020      	movs	r0, r4
    bfbc:	4c97      	ldr	r4, [pc, #604]	; (c21c <m2m_ip_cb+0x2f0>)
    bfbe:	47a0      	blx	r4
    bfc0:	2800      	cmp	r0, #0
    bfc2:	d10f      	bne.n	bfe4 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    bfc4:	ab09      	add	r3, sp, #36	; 0x24
    bfc6:	785a      	ldrb	r2, [r3, #1]
    bfc8:	ab05      	add	r3, sp, #20
    bfca:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    bfcc:	4b95      	ldr	r3, [pc, #596]	; (c224 <m2m_ip_cb+0x2f8>)
    bfce:	681b      	ldr	r3, [r3, #0]
    bfd0:	2b00      	cmp	r3, #0
    bfd2:	d007      	beq.n	bfe4 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    bfd4:	4b93      	ldr	r3, [pc, #588]	; (c224 <m2m_ip_cb+0x2f8>)
    bfd6:	681b      	ldr	r3, [r3, #0]
    bfd8:	aa09      	add	r2, sp, #36	; 0x24
    bfda:	2000      	movs	r0, #0
    bfdc:	5610      	ldrsb	r0, [r2, r0]
    bfde:	aa05      	add	r2, sp, #20
    bfe0:	2101      	movs	r1, #1
    bfe2:	4798      	blx	r3
}
    bfe4:	b01a      	add	sp, #104	; 0x68
    bfe6:	bc1c      	pop	{r2, r3, r4}
    bfe8:	4690      	mov	r8, r2
    bfea:	4699      	mov	r9, r3
    bfec:	46a2      	mov	sl, r4
    bfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    bff0:	2300      	movs	r3, #0
    bff2:	2204      	movs	r2, #4
    bff4:	a909      	add	r1, sp, #36	; 0x24
    bff6:	0020      	movs	r0, r4
    bff8:	4c88      	ldr	r4, [pc, #544]	; (c21c <m2m_ip_cb+0x2f0>)
    bffa:	47a0      	blx	r4
    bffc:	2800      	cmp	r0, #0
    bffe:	d1f1      	bne.n	bfe4 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    c000:	ab09      	add	r3, sp, #36	; 0x24
    c002:	785a      	ldrb	r2, [r3, #1]
    c004:	ab05      	add	r3, sp, #20
    c006:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    c008:	4b86      	ldr	r3, [pc, #536]	; (c224 <m2m_ip_cb+0x2f8>)
    c00a:	681b      	ldr	r3, [r3, #0]
    c00c:	2b00      	cmp	r3, #0
    c00e:	d0e9      	beq.n	bfe4 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    c010:	4b84      	ldr	r3, [pc, #528]	; (c224 <m2m_ip_cb+0x2f8>)
    c012:	681b      	ldr	r3, [r3, #0]
    c014:	aa09      	add	r2, sp, #36	; 0x24
    c016:	2000      	movs	r0, #0
    c018:	5610      	ldrsb	r0, [r2, r0]
    c01a:	aa05      	add	r2, sp, #20
    c01c:	2102      	movs	r1, #2
    c01e:	4798      	blx	r3
    c020:	e7e0      	b.n	bfe4 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    c022:	2300      	movs	r3, #0
    c024:	220c      	movs	r2, #12
    c026:	a905      	add	r1, sp, #20
    c028:	0020      	movs	r0, r4
    c02a:	4c7c      	ldr	r4, [pc, #496]	; (c21c <m2m_ip_cb+0x2f0>)
    c02c:	47a0      	blx	r4
    c02e:	2800      	cmp	r0, #0
    c030:	d1d8      	bne.n	bfe4 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    c032:	ab05      	add	r3, sp, #20
    c034:	2209      	movs	r2, #9
    c036:	569a      	ldrsb	r2, [r3, r2]
    c038:	2a00      	cmp	r2, #0
    c03a:	db24      	blt.n	c086 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    c03c:	0018      	movs	r0, r3
    c03e:	2108      	movs	r1, #8
    c040:	5659      	ldrsb	r1, [r3, r1]
    c042:	4b79      	ldr	r3, [pc, #484]	; (c228 <m2m_ip_cb+0x2fc>)
    c044:	0109      	lsls	r1, r1, #4
    c046:	1859      	adds	r1, r3, r1
    c048:	7ac9      	ldrb	r1, [r1, #11]
    c04a:	b2c9      	uxtb	r1, r1
    c04c:	0114      	lsls	r4, r2, #4
    c04e:	191b      	adds	r3, r3, r4
    c050:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    c052:	2101      	movs	r1, #1
    c054:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    c056:	8941      	ldrh	r1, [r0, #10]
    c058:	3908      	subs	r1, #8
    c05a:	b289      	uxth	r1, r1
    c05c:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    c05e:	4973      	ldr	r1, [pc, #460]	; (c22c <m2m_ip_cb+0x300>)
    c060:	880b      	ldrh	r3, [r1, #0]
    c062:	3301      	adds	r3, #1
    c064:	b29b      	uxth	r3, r3
    c066:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    c068:	880b      	ldrh	r3, [r1, #0]
    c06a:	b29b      	uxth	r3, r3
    c06c:	2b00      	cmp	r3, #0
    c06e:	d103      	bne.n	c078 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    c070:	880b      	ldrh	r3, [r1, #0]
    c072:	3301      	adds	r3, #1
    c074:	b29b      	uxth	r3, r3
    c076:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    c078:	4b6c      	ldr	r3, [pc, #432]	; (c22c <m2m_ip_cb+0x300>)
    c07a:	8819      	ldrh	r1, [r3, #0]
    c07c:	b289      	uxth	r1, r1
    c07e:	0110      	lsls	r0, r2, #4
    c080:	4b69      	ldr	r3, [pc, #420]	; (c228 <m2m_ip_cb+0x2fc>)
    c082:	181b      	adds	r3, r3, r0
    c084:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    c086:	ab09      	add	r3, sp, #36	; 0x24
    c088:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    c08a:	2202      	movs	r2, #2
    c08c:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    c08e:	aa05      	add	r2, sp, #20
    c090:	8851      	ldrh	r1, [r2, #2]
    c092:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    c094:	9a06      	ldr	r2, [sp, #24]
    c096:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    c098:	4b62      	ldr	r3, [pc, #392]	; (c224 <m2m_ip_cb+0x2f8>)
    c09a:	681b      	ldr	r3, [r3, #0]
    c09c:	2b00      	cmp	r3, #0
    c09e:	d0a1      	beq.n	bfe4 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    c0a0:	4b60      	ldr	r3, [pc, #384]	; (c224 <m2m_ip_cb+0x2f8>)
    c0a2:	681b      	ldr	r3, [r3, #0]
    c0a4:	aa05      	add	r2, sp, #20
    c0a6:	2008      	movs	r0, #8
    c0a8:	5610      	ldrsb	r0, [r2, r0]
    c0aa:	aa09      	add	r2, sp, #36	; 0x24
    c0ac:	2104      	movs	r1, #4
    c0ae:	4798      	blx	r3
    c0b0:	e798      	b.n	bfe4 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    c0b2:	2300      	movs	r3, #0
    c0b4:	2204      	movs	r2, #4
    c0b6:	a909      	add	r1, sp, #36	; 0x24
    c0b8:	0020      	movs	r0, r4
    c0ba:	4c58      	ldr	r4, [pc, #352]	; (c21c <m2m_ip_cb+0x2f0>)
    c0bc:	47a0      	blx	r4
    c0be:	2800      	cmp	r0, #0
    c0c0:	d000      	beq.n	c0c4 <m2m_ip_cb+0x198>
    c0c2:	e78f      	b.n	bfe4 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    c0c4:	ab09      	add	r3, sp, #36	; 0x24
    c0c6:	2000      	movs	r0, #0
    c0c8:	5618      	ldrsb	r0, [r3, r0]
    c0ca:	aa05      	add	r2, sp, #20
    c0cc:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    c0ce:	785b      	ldrb	r3, [r3, #1]
    c0d0:	b25b      	sxtb	r3, r3
    c0d2:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    c0d4:	2b00      	cmp	r3, #0
    c0d6:	d107      	bne.n	c0e8 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    c0d8:	ab09      	add	r3, sp, #36	; 0x24
    c0da:	885b      	ldrh	r3, [r3, #2]
    c0dc:	3b08      	subs	r3, #8
    c0de:	b29b      	uxth	r3, r3
    c0e0:	0101      	lsls	r1, r0, #4
    c0e2:	4a51      	ldr	r2, [pc, #324]	; (c228 <m2m_ip_cb+0x2fc>)
    c0e4:	1852      	adds	r2, r2, r1
    c0e6:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    c0e8:	4b4e      	ldr	r3, [pc, #312]	; (c224 <m2m_ip_cb+0x2f8>)
    c0ea:	681b      	ldr	r3, [r3, #0]
    c0ec:	2b00      	cmp	r3, #0
    c0ee:	d100      	bne.n	c0f2 <m2m_ip_cb+0x1c6>
    c0f0:	e778      	b.n	bfe4 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    c0f2:	4b4c      	ldr	r3, [pc, #304]	; (c224 <m2m_ip_cb+0x2f8>)
    c0f4:	681b      	ldr	r3, [r3, #0]
    c0f6:	aa05      	add	r2, sp, #20
    c0f8:	2105      	movs	r1, #5
    c0fa:	4798      	blx	r3
	{
    c0fc:	e772      	b.n	bfe4 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    c0fe:	2300      	movs	r3, #0
    c100:	2244      	movs	r2, #68	; 0x44
    c102:	a909      	add	r1, sp, #36	; 0x24
    c104:	0020      	movs	r0, r4
    c106:	4c45      	ldr	r4, [pc, #276]	; (c21c <m2m_ip_cb+0x2f0>)
    c108:	47a0      	blx	r4
    c10a:	2800      	cmp	r0, #0
    c10c:	d000      	beq.n	c110 <m2m_ip_cb+0x1e4>
    c10e:	e769      	b.n	bfe4 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    c110:	4b47      	ldr	r3, [pc, #284]	; (c230 <m2m_ip_cb+0x304>)
    c112:	681b      	ldr	r3, [r3, #0]
    c114:	2b00      	cmp	r3, #0
    c116:	d100      	bne.n	c11a <m2m_ip_cb+0x1ee>
    c118:	e764      	b.n	bfe4 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    c11a:	4b45      	ldr	r3, [pc, #276]	; (c230 <m2m_ip_cb+0x304>)
    c11c:	681b      	ldr	r3, [r3, #0]
    c11e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    c120:	9203      	str	r2, [sp, #12]
    c122:	0011      	movs	r1, r2
    c124:	a809      	add	r0, sp, #36	; 0x24
    c126:	4798      	blx	r3
    c128:	e75c      	b.n	bfe4 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    c12a:	2306      	movs	r3, #6
    c12c:	469a      	mov	sl, r3
    c12e:	e001      	b.n	c134 <m2m_ip_cb+0x208>
    c130:	2306      	movs	r3, #6
    c132:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    c134:	2300      	movs	r3, #0
    c136:	2210      	movs	r2, #16
    c138:	a905      	add	r1, sp, #20
    c13a:	0020      	movs	r0, r4
    c13c:	4f37      	ldr	r7, [pc, #220]	; (c21c <m2m_ip_cb+0x2f0>)
    c13e:	47b8      	blx	r7
    c140:	2800      	cmp	r0, #0
    c142:	d000      	beq.n	c146 <m2m_ip_cb+0x21a>
    c144:	e74e      	b.n	bfe4 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    c146:	aa05      	add	r2, sp, #20
    c148:	200c      	movs	r0, #12
    c14a:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    c14c:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    c14e:	0107      	lsls	r7, r0, #4
    c150:	4935      	ldr	r1, [pc, #212]	; (c228 <m2m_ip_cb+0x2fc>)
    c152:	19c9      	adds	r1, r1, r7
    c154:	2700      	movs	r7, #0
    c156:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    c158:	2608      	movs	r6, #8
    c15a:	5f97      	ldrsh	r7, [r2, r6]
    c15c:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    c15e:	8957      	ldrh	r7, [r2, #10]
    c160:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    c162:	af09      	add	r7, sp, #36	; 0x24
    c164:	8856      	ldrh	r6, [r2, #2]
    c166:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    c168:	9a06      	ldr	r2, [sp, #24]
    c16a:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    c16c:	88ca      	ldrh	r2, [r1, #6]
    c16e:	b292      	uxth	r2, r2
    c170:	4293      	cmp	r3, r2
    c172:	d00c      	beq.n	c18e <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    c174:	2d10      	cmp	r5, #16
    c176:	d800      	bhi.n	c17a <m2m_ip_cb+0x24e>
    c178:	e734      	b.n	bfe4 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    c17a:	2301      	movs	r3, #1
    c17c:	2200      	movs	r2, #0
    c17e:	2100      	movs	r1, #0
    c180:	2000      	movs	r0, #0
    c182:	4c26      	ldr	r4, [pc, #152]	; (c21c <m2m_ip_cb+0x2f0>)
    c184:	47a0      	blx	r4
	{
    c186:	e72d      	b.n	bfe4 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    c188:	2309      	movs	r3, #9
    c18a:	469a      	mov	sl, r3
    c18c:	e7d2      	b.n	c134 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    c18e:	4643      	mov	r3, r8
    c190:	2b00      	cmp	r3, #0
    c192:	dd01      	ble.n	c198 <m2m_ip_cb+0x26c>
    c194:	45a8      	cmp	r8, r5
    c196:	db0f      	blt.n	c1b8 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    c198:	ab09      	add	r3, sp, #36	; 0x24
    c19a:	4642      	mov	r2, r8
    c19c:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    c19e:	2300      	movs	r3, #0
    c1a0:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    c1a2:	4b20      	ldr	r3, [pc, #128]	; (c224 <m2m_ip_cb+0x2f8>)
    c1a4:	681b      	ldr	r3, [r3, #0]
    c1a6:	2b00      	cmp	r3, #0
    c1a8:	d100      	bne.n	c1ac <m2m_ip_cb+0x280>
    c1aa:	e71b      	b.n	bfe4 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    c1ac:	4b1d      	ldr	r3, [pc, #116]	; (c224 <m2m_ip_cb+0x2f8>)
    c1ae:	681b      	ldr	r3, [r3, #0]
    c1b0:	aa09      	add	r2, sp, #36	; 0x24
    c1b2:	4651      	mov	r1, sl
    c1b4:	4798      	blx	r3
    c1b6:	e715      	b.n	bfe4 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    c1b8:	0023      	movs	r3, r4
    c1ba:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    c1bc:	4642      	mov	r2, r8
    c1be:	4669      	mov	r1, sp
    c1c0:	818a      	strh	r2, [r1, #12]
    c1c2:	898a      	ldrh	r2, [r1, #12]
    c1c4:	9200      	str	r2, [sp, #0]
    c1c6:	4652      	mov	r2, sl
    c1c8:	0039      	movs	r1, r7
    c1ca:	4c1a      	ldr	r4, [pc, #104]	; (c234 <m2m_ip_cb+0x308>)
    c1cc:	47a0      	blx	r4
    c1ce:	e709      	b.n	bfe4 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    c1d0:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    c1d2:	2300      	movs	r3, #0
    c1d4:	2208      	movs	r2, #8
    c1d6:	a909      	add	r1, sp, #36	; 0x24
    c1d8:	0020      	movs	r0, r4
    c1da:	4c10      	ldr	r4, [pc, #64]	; (c21c <m2m_ip_cb+0x2f0>)
    c1dc:	47a0      	blx	r4
    c1de:	2800      	cmp	r0, #0
    c1e0:	d000      	beq.n	c1e4 <m2m_ip_cb+0x2b8>
    c1e2:	e6ff      	b.n	bfe4 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    c1e4:	ab09      	add	r3, sp, #36	; 0x24
    c1e6:	2000      	movs	r0, #0
    c1e8:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    c1ea:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    c1ec:	8859      	ldrh	r1, [r3, #2]
    c1ee:	ab05      	add	r3, sp, #20
    c1f0:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    c1f2:	0101      	lsls	r1, r0, #4
    c1f4:	4b0c      	ldr	r3, [pc, #48]	; (c228 <m2m_ip_cb+0x2fc>)
    c1f6:	185b      	adds	r3, r3, r1
    c1f8:	88db      	ldrh	r3, [r3, #6]
    c1fa:	b29b      	uxth	r3, r3
    c1fc:	429a      	cmp	r2, r3
    c1fe:	d000      	beq.n	c202 <m2m_ip_cb+0x2d6>
    c200:	e6f0      	b.n	bfe4 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    c202:	4b08      	ldr	r3, [pc, #32]	; (c224 <m2m_ip_cb+0x2f8>)
    c204:	681b      	ldr	r3, [r3, #0]
    c206:	2b00      	cmp	r3, #0
    c208:	d100      	bne.n	c20c <m2m_ip_cb+0x2e0>
    c20a:	e6eb      	b.n	bfe4 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    c20c:	4b05      	ldr	r3, [pc, #20]	; (c224 <m2m_ip_cb+0x2f8>)
    c20e:	681b      	ldr	r3, [r3, #0]
    c210:	aa05      	add	r2, sp, #20
    c212:	0029      	movs	r1, r5
    c214:	4798      	blx	r3
	{
    c216:	e6e5      	b.n	bfe4 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    c218:	2508      	movs	r5, #8
    c21a:	e7da      	b.n	c1d2 <m2m_ip_cb+0x2a6>
    c21c:	0000a19d 	.word	0x0000a19d
    c220:	200009e4 	.word	0x200009e4
    c224:	200009e0 	.word	0x200009e0
    c228:	20000930 	.word	0x20000930
    c22c:	2000026a 	.word	0x2000026a
    c230:	200009e8 	.word	0x200009e8
    c234:	0000be19 	.word	0x0000be19

0000c238 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    c238:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    c23a:	4b0a      	ldr	r3, [pc, #40]	; (c264 <socketInit+0x2c>)
    c23c:	781b      	ldrb	r3, [r3, #0]
    c23e:	2b00      	cmp	r3, #0
    c240:	d000      	beq.n	c244 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    c242:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    c244:	22b0      	movs	r2, #176	; 0xb0
    c246:	2100      	movs	r1, #0
    c248:	4807      	ldr	r0, [pc, #28]	; (c268 <socketInit+0x30>)
    c24a:	4b08      	ldr	r3, [pc, #32]	; (c26c <socketInit+0x34>)
    c24c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    c24e:	4908      	ldr	r1, [pc, #32]	; (c270 <socketInit+0x38>)
    c250:	2002      	movs	r0, #2
    c252:	4b08      	ldr	r3, [pc, #32]	; (c274 <socketInit+0x3c>)
    c254:	4798      	blx	r3
		gbSocketInit	= 1;
    c256:	2201      	movs	r2, #1
    c258:	4b02      	ldr	r3, [pc, #8]	; (c264 <socketInit+0x2c>)
    c25a:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    c25c:	2200      	movs	r2, #0
    c25e:	4b06      	ldr	r3, [pc, #24]	; (c278 <socketInit+0x40>)
    c260:	801a      	strh	r2, [r3, #0]
}
    c262:	e7ee      	b.n	c242 <socketInit+0xa>
    c264:	20000269 	.word	0x20000269
    c268:	20000930 	.word	0x20000930
    c26c:	00009a59 	.word	0x00009a59
    c270:	0000bf2d 	.word	0x0000bf2d
    c274:	0000a289 	.word	0x0000a289
    c278:	2000026a 	.word	0x2000026a

0000c27c <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    c27c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    c27e:	22b0      	movs	r2, #176	; 0xb0
    c280:	2100      	movs	r1, #0
    c282:	4807      	ldr	r0, [pc, #28]	; (c2a0 <socketDeinit+0x24>)
    c284:	4b07      	ldr	r3, [pc, #28]	; (c2a4 <socketDeinit+0x28>)
    c286:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    c288:	2100      	movs	r1, #0
    c28a:	2002      	movs	r0, #2
    c28c:	4b06      	ldr	r3, [pc, #24]	; (c2a8 <socketDeinit+0x2c>)
    c28e:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    c290:	2300      	movs	r3, #0
    c292:	4a06      	ldr	r2, [pc, #24]	; (c2ac <socketDeinit+0x30>)
    c294:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    c296:	4a06      	ldr	r2, [pc, #24]	; (c2b0 <socketDeinit+0x34>)
    c298:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    c29a:	4a06      	ldr	r2, [pc, #24]	; (c2b4 <socketDeinit+0x38>)
    c29c:	7013      	strb	r3, [r2, #0]
}
    c29e:	bd10      	pop	{r4, pc}
    c2a0:	20000930 	.word	0x20000930
    c2a4:	00009a59 	.word	0x00009a59
    c2a8:	0000a289 	.word	0x0000a289
    c2ac:	200009e0 	.word	0x200009e0
    c2b0:	200009e8 	.word	0x200009e8
    c2b4:	20000269 	.word	0x20000269

0000c2b8 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    c2b8:	4b02      	ldr	r3, [pc, #8]	; (c2c4 <registerSocketCallback+0xc>)
    c2ba:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    c2bc:	4b02      	ldr	r3, [pc, #8]	; (c2c8 <registerSocketCallback+0x10>)
    c2be:	6019      	str	r1, [r3, #0]
}
    c2c0:	4770      	bx	lr
    c2c2:	46c0      	nop			; (mov r8, r8)
    c2c4:	200009e0 	.word	0x200009e0
    c2c8:	200009e8 	.word	0x200009e8

0000c2cc <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    c2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2ce:	46d6      	mov	lr, sl
    c2d0:	4647      	mov	r7, r8
    c2d2:	b580      	push	{r7, lr}
    c2d4:	b089      	sub	sp, #36	; 0x24
    c2d6:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    c2d8:	2802      	cmp	r0, #2
    c2da:	d000      	beq.n	c2de <socket+0x12>
    c2dc:	e09c      	b.n	c418 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    c2de:	2901      	cmp	r1, #1
    c2e0:	d00a      	beq.n	c2f8 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    c2e2:	2902      	cmp	r1, #2
    c2e4:	d100      	bne.n	c2e8 <socket+0x1c>
    c2e6:	e070      	b.n	c3ca <socket+0xfe>
	SOCKET					sock = -1;
    c2e8:	2501      	movs	r5, #1
    c2ea:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    c2ec:	0028      	movs	r0, r5
    c2ee:	b009      	add	sp, #36	; 0x24
    c2f0:	bc0c      	pop	{r2, r3}
    c2f2:	4690      	mov	r8, r2
    c2f4:	469a      	mov	sl, r3
    c2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    c2f8:	4c49      	ldr	r4, [pc, #292]	; (c420 <socket+0x154>)
    c2fa:	7827      	ldrb	r7, [r4, #0]
    c2fc:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    c2fe:	7826      	ldrb	r6, [r4, #0]
    c300:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    c302:	7820      	ldrb	r0, [r4, #0]
    c304:	3001      	adds	r0, #1
    c306:	3106      	adds	r1, #6
    c308:	4b46      	ldr	r3, [pc, #280]	; (c424 <socket+0x158>)
    c30a:	4798      	blx	r3
    c30c:	b2c9      	uxtb	r1, r1
    c30e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    c310:	0132      	lsls	r2, r6, #4
    c312:	4b45      	ldr	r3, [pc, #276]	; (c428 <socket+0x15c>)
    c314:	189b      	adds	r3, r3, r2
    c316:	7a9b      	ldrb	r3, [r3, #10]
    c318:	2506      	movs	r5, #6
    c31a:	2b00      	cmp	r3, #0
    c31c:	d018      	beq.n	c350 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    c31e:	4e40      	ldr	r6, [pc, #256]	; (c420 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    c320:	4b40      	ldr	r3, [pc, #256]	; (c424 <socket+0x158>)
    c322:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    c324:	4b40      	ldr	r3, [pc, #256]	; (c428 <socket+0x15c>)
    c326:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    c328:	7837      	ldrb	r7, [r6, #0]
    c32a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    c32c:	7834      	ldrb	r4, [r6, #0]
    c32e:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    c330:	7830      	ldrb	r0, [r6, #0]
    c332:	3001      	adds	r0, #1
    c334:	2107      	movs	r1, #7
    c336:	47d0      	blx	sl
    c338:	b2c9      	uxtb	r1, r1
    c33a:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    c33c:	0123      	lsls	r3, r4, #4
    c33e:	4443      	add	r3, r8
    c340:	7a9b      	ldrb	r3, [r3, #10]
    c342:	2b00      	cmp	r3, #0
    c344:	d007      	beq.n	c356 <socket+0x8a>
    c346:	3d01      	subs	r5, #1
    c348:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    c34a:	2d00      	cmp	r5, #0
    c34c:	d1ec      	bne.n	c328 <socket+0x5c>
    c34e:	e7cb      	b.n	c2e8 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    c350:	4b35      	ldr	r3, [pc, #212]	; (c428 <socket+0x15c>)
    c352:	18d4      	adds	r4, r2, r3
    c354:	e002      	b.n	c35c <socket+0x90>
    c356:	0124      	lsls	r4, r4, #4
    c358:	4b33      	ldr	r3, [pc, #204]	; (c428 <socket+0x15c>)
    c35a:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    c35c:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    c35e:	2d00      	cmp	r5, #0
    c360:	dbc4      	blt.n	c2ec <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    c362:	2210      	movs	r2, #16
    c364:	2100      	movs	r1, #0
    c366:	0020      	movs	r0, r4
    c368:	4b30      	ldr	r3, [pc, #192]	; (c42c <socket+0x160>)
    c36a:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    c36c:	2301      	movs	r3, #1
    c36e:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    c370:	4a2f      	ldr	r2, [pc, #188]	; (c430 <socket+0x164>)
    c372:	8813      	ldrh	r3, [r2, #0]
    c374:	3301      	adds	r3, #1
    c376:	b29b      	uxth	r3, r3
    c378:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    c37a:	8813      	ldrh	r3, [r2, #0]
    c37c:	b29b      	uxth	r3, r3
    c37e:	2b00      	cmp	r3, #0
    c380:	d103      	bne.n	c38a <socket+0xbe>
				++gu16SessionID;
    c382:	8813      	ldrh	r3, [r2, #0]
    c384:	3301      	adds	r3, #1
    c386:	b29b      	uxth	r3, r3
    c388:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    c38a:	4e29      	ldr	r6, [pc, #164]	; (c430 <socket+0x164>)
    c38c:	8833      	ldrh	r3, [r6, #0]
    c38e:	b29b      	uxth	r3, r3
    c390:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    c392:	4828      	ldr	r0, [pc, #160]	; (c434 <socket+0x168>)
    c394:	4f28      	ldr	r7, [pc, #160]	; (c438 <socket+0x16c>)
    c396:	47b8      	blx	r7
    c398:	8832      	ldrh	r2, [r6, #0]
    c39a:	b292      	uxth	r2, r2
    c39c:	0029      	movs	r1, r5
    c39e:	4827      	ldr	r0, [pc, #156]	; (c43c <socket+0x170>)
    c3a0:	47b8      	blx	r7
    c3a2:	200d      	movs	r0, #13
    c3a4:	4b26      	ldr	r3, [pc, #152]	; (c440 <socket+0x174>)
    c3a6:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    c3a8:	9b05      	ldr	r3, [sp, #20]
    c3aa:	07db      	lsls	r3, r3, #31
    c3ac:	d59e      	bpl.n	c2ec <socket+0x20>
				strSSLCreate.sslSock = sock;
    c3ae:	aa07      	add	r2, sp, #28
    c3b0:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    c3b2:	2321      	movs	r3, #33	; 0x21
    c3b4:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    c3b6:	2300      	movs	r3, #0
    c3b8:	9302      	str	r3, [sp, #8]
    c3ba:	9301      	str	r3, [sp, #4]
    c3bc:	9300      	str	r3, [sp, #0]
    c3be:	3304      	adds	r3, #4
    c3c0:	2150      	movs	r1, #80	; 0x50
    c3c2:	2002      	movs	r0, #2
    c3c4:	4c1f      	ldr	r4, [pc, #124]	; (c444 <socket+0x178>)
    c3c6:	47a0      	blx	r4
    c3c8:	e790      	b.n	c2ec <socket+0x20>
				u8SockID		= u8NextUdpSock;
    c3ca:	4b1f      	ldr	r3, [pc, #124]	; (c448 <socket+0x17c>)
    c3cc:	781d      	ldrb	r5, [r3, #0]
    c3ce:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    c3d0:	781c      	ldrb	r4, [r3, #0]
    c3d2:	0124      	lsls	r4, r4, #4
    c3d4:	4a1d      	ldr	r2, [pc, #116]	; (c44c <socket+0x180>)
    c3d6:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    c3d8:	7819      	ldrb	r1, [r3, #0]
    c3da:	3101      	adds	r1, #1
    c3dc:	2203      	movs	r2, #3
    c3de:	400a      	ands	r2, r1
    c3e0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    c3e2:	7aa3      	ldrb	r3, [r4, #10]
    c3e4:	2b00      	cmp	r3, #0
    c3e6:	d014      	beq.n	c412 <socket+0x146>
    c3e8:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    c3ea:	4917      	ldr	r1, [pc, #92]	; (c448 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    c3ec:	4f17      	ldr	r7, [pc, #92]	; (c44c <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    c3ee:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    c3f0:	780d      	ldrb	r5, [r1, #0]
    c3f2:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    c3f4:	780c      	ldrb	r4, [r1, #0]
    c3f6:	0124      	lsls	r4, r4, #4
    c3f8:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    c3fa:	780b      	ldrb	r3, [r1, #0]
    c3fc:	3301      	adds	r3, #1
    c3fe:	4003      	ands	r3, r0
    c400:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    c402:	7aa3      	ldrb	r3, [r4, #10]
    c404:	2b00      	cmp	r3, #0
    c406:	d004      	beq.n	c412 <socket+0x146>
    c408:	3a01      	subs	r2, #1
    c40a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    c40c:	2a00      	cmp	r2, #0
    c40e:	d1ef      	bne.n	c3f0 <socket+0x124>
    c410:	e76a      	b.n	c2e8 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    c412:	3507      	adds	r5, #7
    c414:	b26d      	sxtb	r5, r5
					break;
    c416:	e7a2      	b.n	c35e <socket+0x92>
	SOCKET					sock = -1;
    c418:	2501      	movs	r5, #1
    c41a:	426d      	negs	r5, r5
    c41c:	e766      	b.n	c2ec <socket+0x20>
    c41e:	46c0      	nop			; (mov r8, r8)
    c420:	2000026c 	.word	0x2000026c
    c424:	0000e7dd 	.word	0x0000e7dd
    c428:	20000930 	.word	0x20000930
    c42c:	00009a59 	.word	0x00009a59
    c430:	2000026a 	.word	0x2000026a
    c434:	00012cfc 	.word	0x00012cfc
    c438:	00010319 	.word	0x00010319
    c43c:	0001378c 	.word	0x0001378c
    c440:	0001034d 	.word	0x0001034d
    c444:	00009b91 	.word	0x00009b91
    c448:	2000026d 	.word	0x2000026d
    c44c:	200009a0 	.word	0x200009a0

0000c450 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    c450:	b570      	push	{r4, r5, r6, lr}
    c452:	b088      	sub	sp, #32
    c454:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    c456:	db30      	blt.n	c4ba <connect+0x6a>
    c458:	2900      	cmp	r1, #0
    c45a:	d031      	beq.n	c4c0 <connect+0x70>
    c45c:	0100      	lsls	r0, r0, #4
    c45e:	4b1d      	ldr	r3, [pc, #116]	; (c4d4 <connect+0x84>)
    c460:	181b      	adds	r3, r3, r0
    c462:	7a9b      	ldrb	r3, [r3, #10]
    c464:	2b01      	cmp	r3, #1
    c466:	d12e      	bne.n	c4c6 <connect+0x76>
    c468:	2a00      	cmp	r2, #0
    c46a:	d02f      	beq.n	c4cc <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    c46c:	4b19      	ldr	r3, [pc, #100]	; (c4d4 <connect+0x84>)
    c46e:	181b      	adds	r3, r3, r0
    c470:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    c472:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    c474:	07db      	lsls	r3, r3, #31
    c476:	d505      	bpl.n	c484 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    c478:	4b16      	ldr	r3, [pc, #88]	; (c4d4 <connect+0x84>)
    c47a:	181b      	adds	r3, r3, r0
    c47c:	7ada      	ldrb	r2, [r3, #11]
    c47e:	ab05      	add	r3, sp, #20
    c480:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    c482:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    c484:	ad05      	add	r5, sp, #20
    c486:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    c488:	2208      	movs	r2, #8
    c48a:	0028      	movs	r0, r5
    c48c:	4b12      	ldr	r3, [pc, #72]	; (c4d8 <connect+0x88>)
    c48e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    c490:	0124      	lsls	r4, r4, #4
    c492:	4b10      	ldr	r3, [pc, #64]	; (c4d4 <connect+0x84>)
    c494:	191c      	adds	r4, r3, r4
    c496:	88e3      	ldrh	r3, [r4, #6]
    c498:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    c49a:	2300      	movs	r3, #0
    c49c:	9302      	str	r3, [sp, #8]
    c49e:	9301      	str	r3, [sp, #4]
    c4a0:	9300      	str	r3, [sp, #0]
    c4a2:	330c      	adds	r3, #12
    c4a4:	002a      	movs	r2, r5
    c4a6:	0031      	movs	r1, r6
    c4a8:	2002      	movs	r0, #2
    c4aa:	4c0c      	ldr	r4, [pc, #48]	; (c4dc <connect+0x8c>)
    c4ac:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    c4ae:	2800      	cmp	r0, #0
    c4b0:	d001      	beq.n	c4b6 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    c4b2:	2009      	movs	r0, #9
    c4b4:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    c4b6:	b008      	add	sp, #32
    c4b8:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    c4ba:	2006      	movs	r0, #6
    c4bc:	4240      	negs	r0, r0
    c4be:	e7fa      	b.n	c4b6 <connect+0x66>
    c4c0:	2006      	movs	r0, #6
    c4c2:	4240      	negs	r0, r0
    c4c4:	e7f7      	b.n	c4b6 <connect+0x66>
    c4c6:	2006      	movs	r0, #6
    c4c8:	4240      	negs	r0, r0
    c4ca:	e7f4      	b.n	c4b6 <connect+0x66>
    c4cc:	2006      	movs	r0, #6
    c4ce:	4240      	negs	r0, r0
    c4d0:	e7f1      	b.n	c4b6 <connect+0x66>
    c4d2:	46c0      	nop			; (mov r8, r8)
    c4d4:	20000930 	.word	0x20000930
    c4d8:	00009a45 	.word	0x00009a45
    c4dc:	00009b91 	.word	0x00009b91

0000c4e0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    c4e0:	b530      	push	{r4, r5, lr}
    c4e2:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    c4e4:	2800      	cmp	r0, #0
    c4e6:	db36      	blt.n	c556 <send+0x76>
    c4e8:	2900      	cmp	r1, #0
    c4ea:	d037      	beq.n	c55c <send+0x7c>
    c4ec:	23af      	movs	r3, #175	; 0xaf
    c4ee:	00db      	lsls	r3, r3, #3
    c4f0:	429a      	cmp	r2, r3
    c4f2:	d836      	bhi.n	c562 <send+0x82>
    c4f4:	0104      	lsls	r4, r0, #4
    c4f6:	4b1e      	ldr	r3, [pc, #120]	; (c570 <send+0x90>)
    c4f8:	191b      	adds	r3, r3, r4
    c4fa:	7a9b      	ldrb	r3, [r3, #10]
    c4fc:	2b01      	cmp	r3, #1
    c4fe:	d133      	bne.n	c568 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    c500:	ab04      	add	r3, sp, #16
    c502:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    c504:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    c506:	0025      	movs	r5, r4
    c508:	4c19      	ldr	r4, [pc, #100]	; (c570 <send+0x90>)
    c50a:	1964      	adds	r4, r4, r5
    c50c:	88e4      	ldrh	r4, [r4, #6]
    c50e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    c510:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    c512:	2806      	cmp	r0, #6
    c514:	dd00      	ble.n	c518 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    c516:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c518:	0104      	lsls	r4, r0, #4
    c51a:	4b15      	ldr	r3, [pc, #84]	; (c570 <send+0x90>)
    c51c:	191b      	adds	r3, r3, r4
    c51e:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    c520:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c522:	07e4      	lsls	r4, r4, #31
    c524:	d505      	bpl.n	c532 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    c526:	0100      	lsls	r0, r0, #4
    c528:	4b11      	ldr	r3, [pc, #68]	; (c570 <send+0x90>)
    c52a:	1818      	adds	r0, r3, r0
    c52c:	8905      	ldrh	r5, [r0, #8]
    c52e:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    c530:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    c532:	2080      	movs	r0, #128	; 0x80
    c534:	4318      	orrs	r0, r3
    c536:	9502      	str	r5, [sp, #8]
    c538:	9201      	str	r2, [sp, #4]
    c53a:	9100      	str	r1, [sp, #0]
    c53c:	2310      	movs	r3, #16
    c53e:	aa04      	add	r2, sp, #16
    c540:	0001      	movs	r1, r0
    c542:	2002      	movs	r0, #2
    c544:	4c0b      	ldr	r4, [pc, #44]	; (c574 <send+0x94>)
    c546:	47a0      	blx	r4
    c548:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    c54a:	2800      	cmp	r0, #0
    c54c:	d000      	beq.n	c550 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    c54e:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    c550:	0018      	movs	r0, r3
    c552:	b009      	add	sp, #36	; 0x24
    c554:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    c556:	2306      	movs	r3, #6
    c558:	425b      	negs	r3, r3
    c55a:	e7f9      	b.n	c550 <send+0x70>
    c55c:	2306      	movs	r3, #6
    c55e:	425b      	negs	r3, r3
    c560:	e7f6      	b.n	c550 <send+0x70>
    c562:	2306      	movs	r3, #6
    c564:	425b      	negs	r3, r3
    c566:	e7f3      	b.n	c550 <send+0x70>
    c568:	2306      	movs	r3, #6
    c56a:	425b      	negs	r3, r3
    c56c:	e7f0      	b.n	c550 <send+0x70>
    c56e:	46c0      	nop			; (mov r8, r8)
    c570:	20000930 	.word	0x20000930
    c574:	00009b91 	.word	0x00009b91

0000c578 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    c578:	b530      	push	{r4, r5, lr}
    c57a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    c57c:	2800      	cmp	r0, #0
    c57e:	db34      	blt.n	c5ea <recv+0x72>
    c580:	2900      	cmp	r1, #0
    c582:	d035      	beq.n	c5f0 <recv+0x78>
    c584:	2a00      	cmp	r2, #0
    c586:	d036      	beq.n	c5f6 <recv+0x7e>
    c588:	0105      	lsls	r5, r0, #4
    c58a:	4c1e      	ldr	r4, [pc, #120]	; (c604 <recv+0x8c>)
    c58c:	1964      	adds	r4, r4, r5
    c58e:	7aa4      	ldrb	r4, [r4, #10]
    c590:	2c01      	cmp	r4, #1
    c592:	d133      	bne.n	c5fc <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    c594:	4c1b      	ldr	r4, [pc, #108]	; (c604 <recv+0x8c>)
    c596:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    c598:	1964      	adds	r4, r4, r5
    c59a:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    c59c:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    c59e:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    c5a0:	2900      	cmp	r1, #0
    c5a2:	d11d      	bne.n	c5e0 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    c5a4:	2101      	movs	r1, #1
    c5a6:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c5a8:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    c5aa:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c5ac:	07d2      	lsls	r2, r2, #31
    c5ae:	d500      	bpl.n	c5b2 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    c5b0:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d117      	bne.n	c5e6 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    c5b6:	3b01      	subs	r3, #1
    c5b8:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    c5ba:	aa04      	add	r2, sp, #16
    c5bc:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    c5be:	0100      	lsls	r0, r0, #4
    c5c0:	4b10      	ldr	r3, [pc, #64]	; (c604 <recv+0x8c>)
    c5c2:	1818      	adds	r0, r3, r0
    c5c4:	88c3      	ldrh	r3, [r0, #6]
    c5c6:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    c5c8:	2300      	movs	r3, #0
    c5ca:	9302      	str	r3, [sp, #8]
    c5cc:	9301      	str	r3, [sp, #4]
    c5ce:	9300      	str	r3, [sp, #0]
    c5d0:	3308      	adds	r3, #8
    c5d2:	2002      	movs	r0, #2
    c5d4:	4c0c      	ldr	r4, [pc, #48]	; (c608 <recv+0x90>)
    c5d6:	47a0      	blx	r4
    c5d8:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    c5da:	2800      	cmp	r0, #0
    c5dc:	d000      	beq.n	c5e0 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    c5de:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    c5e0:	0010      	movs	r0, r2
    c5e2:	b007      	add	sp, #28
    c5e4:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    c5e6:	9304      	str	r3, [sp, #16]
    c5e8:	e7e7      	b.n	c5ba <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    c5ea:	2206      	movs	r2, #6
    c5ec:	4252      	negs	r2, r2
    c5ee:	e7f7      	b.n	c5e0 <recv+0x68>
    c5f0:	2206      	movs	r2, #6
    c5f2:	4252      	negs	r2, r2
    c5f4:	e7f4      	b.n	c5e0 <recv+0x68>
    c5f6:	2206      	movs	r2, #6
    c5f8:	4252      	negs	r2, r2
    c5fa:	e7f1      	b.n	c5e0 <recv+0x68>
    c5fc:	2206      	movs	r2, #6
    c5fe:	4252      	negs	r2, r2
    c600:	e7ee      	b.n	c5e0 <recv+0x68>
    c602:	46c0      	nop			; (mov r8, r8)
    c604:	20000930 	.word	0x20000930
    c608:	00009b91 	.word	0x00009b91

0000c60c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    c60c:	b530      	push	{r4, r5, lr}
    c60e:	b087      	sub	sp, #28
    c610:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    c612:	481e      	ldr	r0, [pc, #120]	; (c68c <close+0x80>)
    c614:	4d1e      	ldr	r5, [pc, #120]	; (c690 <close+0x84>)
    c616:	47a8      	blx	r5
    c618:	0021      	movs	r1, r4
    c61a:	481e      	ldr	r0, [pc, #120]	; (c694 <close+0x88>)
    c61c:	47a8      	blx	r5
    c61e:	200d      	movs	r0, #13
    c620:	4b1d      	ldr	r3, [pc, #116]	; (c698 <close+0x8c>)
    c622:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    c624:	2c00      	cmp	r4, #0
    c626:	db2a      	blt.n	c67e <close+0x72>
    c628:	0122      	lsls	r2, r4, #4
    c62a:	4b1c      	ldr	r3, [pc, #112]	; (c69c <close+0x90>)
    c62c:	189b      	adds	r3, r3, r2
    c62e:	7a9b      	ldrb	r3, [r3, #10]
    c630:	2b01      	cmp	r3, #1
    c632:	d127      	bne.n	c684 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    c634:	a905      	add	r1, sp, #20
    c636:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    c638:	4b18      	ldr	r3, [pc, #96]	; (c69c <close+0x90>)
    c63a:	189b      	adds	r3, r3, r2
    c63c:	88da      	ldrh	r2, [r3, #6]
    c63e:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    c640:	2200      	movs	r2, #0
    c642:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    c644:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c646:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    c648:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c64a:	07db      	lsls	r3, r3, #31
    c64c:	d500      	bpl.n	c650 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    c64e:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    c650:	2300      	movs	r3, #0
    c652:	9302      	str	r3, [sp, #8]
    c654:	9301      	str	r3, [sp, #4]
    c656:	9300      	str	r3, [sp, #0]
    c658:	3304      	adds	r3, #4
    c65a:	aa05      	add	r2, sp, #20
    c65c:	2002      	movs	r0, #2
    c65e:	4d10      	ldr	r5, [pc, #64]	; (c6a0 <close+0x94>)
    c660:	47a8      	blx	r5
    c662:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    c664:	d001      	beq.n	c66a <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    c666:	2509      	movs	r5, #9
    c668:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    c66a:	0124      	lsls	r4, r4, #4
    c66c:	480b      	ldr	r0, [pc, #44]	; (c69c <close+0x90>)
    c66e:	1820      	adds	r0, r4, r0
    c670:	2210      	movs	r2, #16
    c672:	2100      	movs	r1, #0
    c674:	4b0b      	ldr	r3, [pc, #44]	; (c6a4 <close+0x98>)
    c676:	4798      	blx	r3
	}
	return s8Ret;
}
    c678:	0028      	movs	r0, r5
    c67a:	b007      	add	sp, #28
    c67c:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    c67e:	2506      	movs	r5, #6
    c680:	426d      	negs	r5, r5
    c682:	e7f9      	b.n	c678 <close+0x6c>
    c684:	2506      	movs	r5, #6
    c686:	426d      	negs	r5, r5
    c688:	e7f6      	b.n	c678 <close+0x6c>
    c68a:	46c0      	nop			; (mov r8, r8)
    c68c:	00012cfc 	.word	0x00012cfc
    c690:	00010319 	.word	0x00010319
    c694:	00013774 	.word	0x00013774
    c698:	0001034d 	.word	0x0001034d
    c69c:	20000930 	.word	0x20000930
    c6a0:	00009b91 	.word	0x00009b91
    c6a4:	00009a59 	.word	0x00009a59

0000c6a8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    c6a8:	b570      	push	{r4, r5, r6, lr}
    c6aa:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    c6ac:	2300      	movs	r3, #0
    c6ae:	9301      	str	r3, [sp, #4]
    c6b0:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    c6b2:	2100      	movs	r1, #0
    c6b4:	7802      	ldrb	r2, [r0, #0]
    c6b6:	1c44      	adds	r4, r0, #1
    c6b8:	3005      	adds	r0, #5
    c6ba:	000b      	movs	r3, r1
    c6bc:	e009      	b.n	c6d2 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    c6be:	009d      	lsls	r5, r3, #2
    c6c0:	195b      	adds	r3, r3, r5
    c6c2:	005b      	lsls	r3, r3, #1
    c6c4:	189b      	adds	r3, r3, r2
    c6c6:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    c6c8:	0022      	movs	r2, r4
    c6ca:	3401      	adds	r4, #1
			if(j > 4)
    c6cc:	42a0      	cmp	r0, r4
    c6ce:	d00a      	beq.n	c6e6 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    c6d0:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    c6d2:	2a2e      	cmp	r2, #46	; 0x2e
    c6d4:	d00a      	beq.n	c6ec <nmi_inet_addr+0x44>
    c6d6:	2a00      	cmp	r2, #0
    c6d8:	d00c      	beq.n	c6f4 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    c6da:	3a30      	subs	r2, #48	; 0x30
    c6dc:	b2d2      	uxtb	r2, r2
    c6de:	2a09      	cmp	r2, #9
    c6e0:	d9ed      	bls.n	c6be <nmi_inet_addr+0x16>
				return 0;
    c6e2:	2000      	movs	r0, #0
    c6e4:	e000      	b.n	c6e8 <nmi_inet_addr+0x40>
				return 0;
    c6e6:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    c6e8:	b002      	add	sp, #8
    c6ea:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    c6ec:	466a      	mov	r2, sp
    c6ee:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    c6f0:	0020      	movs	r0, r4
    c6f2:	e002      	b.n	c6fa <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    c6f4:	466a      	mov	r2, sp
    c6f6:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    c6f8:	0020      	movs	r0, r4
    c6fa:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    c6fc:	2e04      	cmp	r6, #4
    c6fe:	d1d9      	bne.n	c6b4 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    c700:	2204      	movs	r2, #4
    c702:	4669      	mov	r1, sp
    c704:	a801      	add	r0, sp, #4
    c706:	4b02      	ldr	r3, [pc, #8]	; (c710 <nmi_inet_addr+0x68>)
    c708:	4798      	blx	r3
	return u32IP;
    c70a:	9801      	ldr	r0, [sp, #4]
    c70c:	e7ec      	b.n	c6e8 <nmi_inet_addr+0x40>
    c70e:	46c0      	nop			; (mov r8, r8)
    c710:	00009a45 	.word	0x00009a45

0000c714 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    c714:	b510      	push	{r4, lr}
    c716:	b084      	sub	sp, #16
    c718:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    c71a:	4b0b      	ldr	r3, [pc, #44]	; (c748 <gethostbyname+0x34>)
    c71c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    c71e:	b2c3      	uxtb	r3, r0
    c720:	2b40      	cmp	r3, #64	; 0x40
    c722:	d80d      	bhi.n	c740 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    c724:	23ff      	movs	r3, #255	; 0xff
    c726:	4003      	ands	r3, r0
    c728:	3301      	adds	r3, #1
    c72a:	2200      	movs	r2, #0
    c72c:	9202      	str	r2, [sp, #8]
    c72e:	9201      	str	r2, [sp, #4]
    c730:	9200      	str	r2, [sp, #0]
    c732:	0022      	movs	r2, r4
    c734:	214a      	movs	r1, #74	; 0x4a
    c736:	2002      	movs	r0, #2
    c738:	4c04      	ldr	r4, [pc, #16]	; (c74c <gethostbyname+0x38>)
    c73a:	47a0      	blx	r4
	}
	return s8Err;
}
    c73c:	b004      	add	sp, #16
    c73e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    c740:	2006      	movs	r0, #6
    c742:	4240      	negs	r0, r0
    c744:	e7fa      	b.n	c73c <gethostbyname+0x28>
    c746:	46c0      	nop			; (mov r8, r8)
    c748:	00009a69 	.word	0x00009a69
    c74c:	00009b91 	.word	0x00009b91

0000c750 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    c750:	b570      	push	{r4, r5, r6, lr}
    c752:	b082      	sub	sp, #8
    c754:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    c756:	4b2a      	ldr	r3, [pc, #168]	; (c800 <spi_flash_enable+0xb0>)
    c758:	4798      	blx	r3
    c75a:	0500      	lsls	r0, r0, #20
    c75c:	0d00      	lsrs	r0, r0, #20
    c75e:	4b29      	ldr	r3, [pc, #164]	; (c804 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    c760:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    c762:	4298      	cmp	r0, r3
    c764:	d802      	bhi.n	c76c <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    c766:	0028      	movs	r0, r5
    c768:	b002      	add	sp, #8
    c76a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    c76c:	a901      	add	r1, sp, #4
    c76e:	4826      	ldr	r0, [pc, #152]	; (c808 <spi_flash_enable+0xb8>)
    c770:	4b26      	ldr	r3, [pc, #152]	; (c80c <spi_flash_enable+0xbc>)
    c772:	4798      	blx	r3
    c774:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    c776:	d1f6      	bne.n	c766 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    c778:	4b25      	ldr	r3, [pc, #148]	; (c810 <spi_flash_enable+0xc0>)
    c77a:	9a01      	ldr	r2, [sp, #4]
    c77c:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    c77e:	4925      	ldr	r1, [pc, #148]	; (c814 <spi_flash_enable+0xc4>)
    c780:	4319      	orrs	r1, r3
    c782:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    c784:	4820      	ldr	r0, [pc, #128]	; (c808 <spi_flash_enable+0xb8>)
    c786:	4b24      	ldr	r3, [pc, #144]	; (c818 <spi_flash_enable+0xc8>)
    c788:	4798      	blx	r3
		if(enable) {
    c78a:	2c00      	cmp	r4, #0
    c78c:	d020      	beq.n	c7d0 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    c78e:	2100      	movs	r1, #0
    c790:	4822      	ldr	r0, [pc, #136]	; (c81c <spi_flash_enable+0xcc>)
    c792:	4c21      	ldr	r4, [pc, #132]	; (c818 <spi_flash_enable+0xc8>)
    c794:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    c796:	21ab      	movs	r1, #171	; 0xab
    c798:	4821      	ldr	r0, [pc, #132]	; (c820 <spi_flash_enable+0xd0>)
    c79a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    c79c:	2101      	movs	r1, #1
    c79e:	4821      	ldr	r0, [pc, #132]	; (c824 <spi_flash_enable+0xd4>)
    c7a0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    c7a2:	2100      	movs	r1, #0
    c7a4:	4820      	ldr	r0, [pc, #128]	; (c828 <spi_flash_enable+0xd8>)
    c7a6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    c7a8:	2181      	movs	r1, #129	; 0x81
    c7aa:	4820      	ldr	r0, [pc, #128]	; (c82c <spi_flash_enable+0xdc>)
    c7ac:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    c7ae:	4e20      	ldr	r6, [pc, #128]	; (c830 <spi_flash_enable+0xe0>)
    c7b0:	4c20      	ldr	r4, [pc, #128]	; (c834 <spi_flash_enable+0xe4>)
    c7b2:	0030      	movs	r0, r6
    c7b4:	47a0      	blx	r4
    c7b6:	2801      	cmp	r0, #1
    c7b8:	d1fb      	bne.n	c7b2 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    c7ba:	4b15      	ldr	r3, [pc, #84]	; (c810 <spi_flash_enable+0xc0>)
    c7bc:	9a01      	ldr	r2, [sp, #4]
    c7be:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    c7c0:	2180      	movs	r1, #128	; 0x80
    c7c2:	0249      	lsls	r1, r1, #9
    c7c4:	4319      	orrs	r1, r3
    c7c6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    c7c8:	480f      	ldr	r0, [pc, #60]	; (c808 <spi_flash_enable+0xb8>)
    c7ca:	4b13      	ldr	r3, [pc, #76]	; (c818 <spi_flash_enable+0xc8>)
    c7cc:	4798      	blx	r3
    c7ce:	e7ca      	b.n	c766 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    c7d0:	2100      	movs	r1, #0
    c7d2:	4812      	ldr	r0, [pc, #72]	; (c81c <spi_flash_enable+0xcc>)
    c7d4:	4c10      	ldr	r4, [pc, #64]	; (c818 <spi_flash_enable+0xc8>)
    c7d6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    c7d8:	21b9      	movs	r1, #185	; 0xb9
    c7da:	4811      	ldr	r0, [pc, #68]	; (c820 <spi_flash_enable+0xd0>)
    c7dc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    c7de:	2101      	movs	r1, #1
    c7e0:	4810      	ldr	r0, [pc, #64]	; (c824 <spi_flash_enable+0xd4>)
    c7e2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    c7e4:	2100      	movs	r1, #0
    c7e6:	4810      	ldr	r0, [pc, #64]	; (c828 <spi_flash_enable+0xd8>)
    c7e8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    c7ea:	2181      	movs	r1, #129	; 0x81
    c7ec:	480f      	ldr	r0, [pc, #60]	; (c82c <spi_flash_enable+0xdc>)
    c7ee:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    c7f0:	4e0f      	ldr	r6, [pc, #60]	; (c830 <spi_flash_enable+0xe0>)
    c7f2:	4c10      	ldr	r4, [pc, #64]	; (c834 <spi_flash_enable+0xe4>)
    c7f4:	0030      	movs	r0, r6
    c7f6:	47a0      	blx	r4
    c7f8:	2801      	cmp	r0, #1
    c7fa:	d1fb      	bne.n	c7f4 <spi_flash_enable+0xa4>
    c7fc:	e7dd      	b.n	c7ba <spi_flash_enable+0x6a>
    c7fe:	46c0      	nop			; (mov r8, r8)
    c800:	0000aa91 	.word	0x0000aa91
    c804:	0000039f 	.word	0x0000039f
    c808:	00001410 	.word	0x00001410
    c80c:	0000aee1 	.word	0x0000aee1
    c810:	f8888fff 	.word	0xf8888fff
    c814:	01111000 	.word	0x01111000
    c818:	0000aeed 	.word	0x0000aeed
    c81c:	00010208 	.word	0x00010208
    c820:	0001020c 	.word	0x0001020c
    c824:	00010214 	.word	0x00010214
    c828:	0001021c 	.word	0x0001021c
    c82c:	00010204 	.word	0x00010204
    c830:	00010218 	.word	0x00010218
    c834:	0000aed5 	.word	0x0000aed5

0000c838 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    c838:	b5f0      	push	{r4, r5, r6, r7, lr}
    c83a:	46c6      	mov	lr, r8
    c83c:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    c83e:	2303      	movs	r3, #3
    c840:	0007      	movs	r7, r0
    c842:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    c844:	6813      	ldr	r3, [r2, #0]
    c846:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    c848:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    c84a:	2903      	cmp	r1, #3
    c84c:	d902      	bls.n	c854 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    c84e:	4244      	negs	r4, r0
    c850:	2003      	movs	r0, #3
    c852:	4004      	ands	r4, r0
	}

	if (temp_length) {
    c854:	2c00      	cmp	r4, #0
    c856:	d016      	beq.n	c886 <crc32_recalculate+0x4e>
		length -= temp_length;
    c858:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    c85a:	1d3e      	adds	r6, r7, #4
    c85c:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    c85e:	00e0      	lsls	r0, r4, #3
    c860:	4240      	negs	r0, r0
    c862:	3020      	adds	r0, #32
    c864:	40c5      	lsrs	r5, r0
	crc ^= data;
    c866:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    c868:	00e0      	lsls	r0, r4, #3
    c86a:	d019      	beq.n	c8a0 <crc32_recalculate+0x68>
		if (crc & 1) {
    c86c:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    c86e:	4d27      	ldr	r5, [pc, #156]	; (c90c <crc32_recalculate+0xd4>)
    c870:	e003      	b.n	c87a <crc32_recalculate+0x42>
			crc >>= 1;
    c872:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    c874:	3801      	subs	r0, #1
    c876:	2800      	cmp	r0, #0
    c878:	d004      	beq.n	c884 <crc32_recalculate+0x4c>
		if (crc & 1) {
    c87a:	421c      	tst	r4, r3
    c87c:	d0f9      	beq.n	c872 <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    c87e:	085b      	lsrs	r3, r3, #1
    c880:	406b      	eors	r3, r5
    c882:	e7f7      	b.n	c874 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    c884:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    c886:	2003      	movs	r0, #3
    c888:	000c      	movs	r4, r1
    c88a:	4384      	bics	r4, r0

	if (temp_length) {
    c88c:	d01e      	beq.n	c8cc <crc32_recalculate+0x94>
		length -= temp_length;
    c88e:	1b08      	subs	r0, r1, r4
    c890:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    c892:	0889      	lsrs	r1, r1, #2
    c894:	4688      	mov	r8, r1
    c896:	003e      	movs	r6, r7
    c898:	000d      	movs	r5, r1
		if (crc & 1) {
    c89a:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    c89c:	4c1b      	ldr	r4, [pc, #108]	; (c90c <crc32_recalculate+0xd4>)

		while (temp_length--) {
    c89e:	e00b      	b.n	c8b8 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    c8a0:	0037      	movs	r7, r6
    c8a2:	e7f0      	b.n	c886 <crc32_recalculate+0x4e>
			crc >>= 1;
    c8a4:	085b      	lsrs	r3, r3, #1
    c8a6:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    c8a8:	2900      	cmp	r1, #0
    c8aa:	d004      	beq.n	c8b6 <crc32_recalculate+0x7e>
		if (crc & 1) {
    c8ac:	4218      	tst	r0, r3
    c8ae:	d0f9      	beq.n	c8a4 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    c8b0:	085b      	lsrs	r3, r3, #1
    c8b2:	4063      	eors	r3, r4
    c8b4:	e7f7      	b.n	c8a6 <crc32_recalculate+0x6e>
    c8b6:	3604      	adds	r6, #4
		while (temp_length--) {
    c8b8:	3d01      	subs	r5, #1
    c8ba:	d303      	bcc.n	c8c4 <crc32_recalculate+0x8c>
	crc ^= data;
    c8bc:	6831      	ldr	r1, [r6, #0]
    c8be:	404b      	eors	r3, r1
    c8c0:	2120      	movs	r1, #32
    c8c2:	e7f3      	b.n	c8ac <crc32_recalculate+0x74>
    c8c4:	4641      	mov	r1, r8
    c8c6:	0089      	lsls	r1, r1, #2
    c8c8:	187f      	adds	r7, r7, r1
		length -= temp_length;
    c8ca:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    c8cc:	2900      	cmp	r1, #0
    c8ce:	d017      	beq.n	c900 <crc32_recalculate+0xc8>
		word = *word_ptr;
    c8d0:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    c8d2:	00c8      	lsls	r0, r1, #3
    c8d4:	4240      	negs	r0, r0
    c8d6:	3020      	adds	r0, #32
    c8d8:	2501      	movs	r5, #1
    c8da:	426d      	negs	r5, r5
    c8dc:	40c5      	lsrs	r5, r0
    c8de:	0028      	movs	r0, r5
    c8e0:	4020      	ands	r0, r4
	crc ^= data;
    c8e2:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    c8e4:	00c9      	lsls	r1, r1, #3
    c8e6:	d00b      	beq.n	c900 <crc32_recalculate+0xc8>
		if (crc & 1) {
    c8e8:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    c8ea:	4c08      	ldr	r4, [pc, #32]	; (c90c <crc32_recalculate+0xd4>)
    c8ec:	e003      	b.n	c8f6 <crc32_recalculate+0xbe>
			crc >>= 1;
    c8ee:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    c8f0:	3901      	subs	r1, #1
    c8f2:	2900      	cmp	r1, #0
    c8f4:	d004      	beq.n	c900 <crc32_recalculate+0xc8>
		if (crc & 1) {
    c8f6:	4218      	tst	r0, r3
    c8f8:	d0f9      	beq.n	c8ee <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    c8fa:	085b      	lsrs	r3, r3, #1
    c8fc:	4063      	eors	r3, r4
    c8fe:	e7f7      	b.n	c8f0 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    c900:	43db      	mvns	r3, r3
    c902:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    c904:	2000      	movs	r0, #0
    c906:	bc04      	pop	{r2}
    c908:	4690      	mov	r8, r2
    c90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c90c:	edb88320 	.word	0xedb88320

0000c910 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    c910:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
    c912:	4a1e      	ldr	r2, [pc, #120]	; (c98c <nvm_set_config+0x7c>)
    c914:	69d3      	ldr	r3, [r2, #28]
    c916:	2104      	movs	r1, #4
    c918:	430b      	orrs	r3, r1
    c91a:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c91c:	4b1c      	ldr	r3, [pc, #112]	; (c990 <nvm_set_config+0x80>)
    c91e:	2220      	movs	r2, #32
    c920:	32ff      	adds	r2, #255	; 0xff
    c922:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    c924:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    c926:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    c928:	07d2      	lsls	r2, r2, #31
    c92a:	d401      	bmi.n	c930 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    c92c:	0018      	movs	r0, r3
    c92e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    c930:	7803      	ldrb	r3, [r0, #0]
    c932:	021b      	lsls	r3, r3, #8
    c934:	22c0      	movs	r2, #192	; 0xc0
    c936:	0092      	lsls	r2, r2, #2
    c938:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    c93a:	7841      	ldrb	r1, [r0, #1]
    c93c:	01c9      	lsls	r1, r1, #7
    c93e:	22ff      	movs	r2, #255	; 0xff
    c940:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    c942:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    c944:	7881      	ldrb	r1, [r0, #2]
    c946:	0049      	lsls	r1, r1, #1
    c948:	221e      	movs	r2, #30
    c94a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    c94c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    c94e:	78c2      	ldrb	r2, [r0, #3]
    c950:	0492      	lsls	r2, r2, #18
    c952:	2180      	movs	r1, #128	; 0x80
    c954:	02c9      	lsls	r1, r1, #11
    c956:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    c958:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    c95a:	7902      	ldrb	r2, [r0, #4]
    c95c:	0412      	lsls	r2, r2, #16
    c95e:	21c0      	movs	r1, #192	; 0xc0
    c960:	0289      	lsls	r1, r1, #10
    c962:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    c964:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    c966:	4a0a      	ldr	r2, [pc, #40]	; (c990 <nvm_set_config+0x80>)
    c968:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    c96a:	6893      	ldr	r3, [r2, #8]
    c96c:	035b      	lsls	r3, r3, #13
    c96e:	0f5b      	lsrs	r3, r3, #29
    c970:	4908      	ldr	r1, [pc, #32]	; (c994 <nvm_set_config+0x84>)
    c972:	2408      	movs	r4, #8
    c974:	409c      	lsls	r4, r3
    c976:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    c978:	6893      	ldr	r3, [r2, #8]
    c97a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    c97c:	7843      	ldrb	r3, [r0, #1]
    c97e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    c980:	8b13      	ldrh	r3, [r2, #24]
    c982:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    c984:	0fdb      	lsrs	r3, r3, #31
    c986:	011b      	lsls	r3, r3, #4
    c988:	e7d0      	b.n	c92c <nvm_set_config+0x1c>
    c98a:	46c0      	nop			; (mov r8, r8)
    c98c:	40000400 	.word	0x40000400
    c990:	41004000 	.word	0x41004000
    c994:	20000270 	.word	0x20000270

0000c998 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    c998:	b530      	push	{r4, r5, lr}
    c99a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    c99c:	4a22      	ldr	r2, [pc, #136]	; (ca28 <nvm_execute_command+0x90>)
    c99e:	8810      	ldrh	r0, [r2, #0]
    c9a0:	8853      	ldrh	r3, [r2, #2]
    c9a2:	4343      	muls	r3, r0
    c9a4:	428b      	cmp	r3, r1
    c9a6:	d206      	bcs.n	c9b6 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    c9a8:	2280      	movs	r2, #128	; 0x80
    c9aa:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    c9ac:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    c9ae:	4b1f      	ldr	r3, [pc, #124]	; (ca2c <nvm_execute_command+0x94>)
    c9b0:	18cb      	adds	r3, r1, r3
    c9b2:	4293      	cmp	r3, r2
    c9b4:	d80e      	bhi.n	c9d4 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    c9b6:	4b1e      	ldr	r3, [pc, #120]	; (ca30 <nvm_execute_command+0x98>)
    c9b8:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    c9ba:	2280      	movs	r2, #128	; 0x80
    c9bc:	02d2      	lsls	r2, r2, #11
    c9be:	432a      	orrs	r2, r5
    c9c0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c9c2:	2220      	movs	r2, #32
    c9c4:	32ff      	adds	r2, #255	; 0xff
    c9c6:	831a      	strh	r2, [r3, #24]
    c9c8:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    c9ca:	07db      	lsls	r3, r3, #31
    c9cc:	d403      	bmi.n	c9d6 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    c9ce:	4b18      	ldr	r3, [pc, #96]	; (ca30 <nvm_execute_command+0x98>)
    c9d0:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    c9d2:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    c9d4:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    c9d6:	2c45      	cmp	r4, #69	; 0x45
    c9d8:	d822      	bhi.n	ca20 <nvm_execute_command+0x88>
    c9da:	00a3      	lsls	r3, r4, #2
    c9dc:	4a15      	ldr	r2, [pc, #84]	; (ca34 <nvm_execute_command+0x9c>)
    c9de:	58d3      	ldr	r3, [r2, r3]
    c9e0:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    c9e2:	4b13      	ldr	r3, [pc, #76]	; (ca30 <nvm_execute_command+0x98>)
    c9e4:	8b1b      	ldrh	r3, [r3, #24]
    c9e6:	05db      	lsls	r3, r3, #23
    c9e8:	d503      	bpl.n	c9f2 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    c9ea:	4b11      	ldr	r3, [pc, #68]	; (ca30 <nvm_execute_command+0x98>)
    c9ec:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    c9ee:	2010      	movs	r0, #16
    c9f0:	e7f0      	b.n	c9d4 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    c9f2:	0889      	lsrs	r1, r1, #2
    c9f4:	0049      	lsls	r1, r1, #1
    c9f6:	4b0e      	ldr	r3, [pc, #56]	; (ca30 <nvm_execute_command+0x98>)
    c9f8:	61d9      	str	r1, [r3, #28]
			break;
    c9fa:	e003      	b.n	ca04 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    c9fc:	0889      	lsrs	r1, r1, #2
    c9fe:	0049      	lsls	r1, r1, #1
    ca00:	4b0b      	ldr	r3, [pc, #44]	; (ca30 <nvm_execute_command+0x98>)
    ca02:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    ca04:	20a5      	movs	r0, #165	; 0xa5
    ca06:	0200      	lsls	r0, r0, #8
    ca08:	4304      	orrs	r4, r0
    ca0a:	4b09      	ldr	r3, [pc, #36]	; (ca30 <nvm_execute_command+0x98>)
    ca0c:	801c      	strh	r4, [r3, #0]
    ca0e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    ca10:	2201      	movs	r2, #1
    ca12:	7d0b      	ldrb	r3, [r1, #20]
    ca14:	4213      	tst	r3, r2
    ca16:	d0fc      	beq.n	ca12 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    ca18:	4b05      	ldr	r3, [pc, #20]	; (ca30 <nvm_execute_command+0x98>)
    ca1a:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    ca1c:	2000      	movs	r0, #0
    ca1e:	e7d9      	b.n	c9d4 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    ca20:	4b03      	ldr	r3, [pc, #12]	; (ca30 <nvm_execute_command+0x98>)
    ca22:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    ca24:	2017      	movs	r0, #23
    ca26:	e7d5      	b.n	c9d4 <nvm_execute_command+0x3c>
    ca28:	20000270 	.word	0x20000270
    ca2c:	ff7fc000 	.word	0xff7fc000
    ca30:	41004000 	.word	0x41004000
    ca34:	000137a8 	.word	0x000137a8

0000ca38 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    ca3a:	4b25      	ldr	r3, [pc, #148]	; (cad0 <nvm_write_buffer+0x98>)
    ca3c:	881d      	ldrh	r5, [r3, #0]
    ca3e:	885b      	ldrh	r3, [r3, #2]
    ca40:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    ca42:	2418      	movs	r4, #24
	if (destination_address >
    ca44:	4283      	cmp	r3, r0
    ca46:	d201      	bcs.n	ca4c <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    ca48:	0020      	movs	r0, r4
    ca4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    ca4c:	1e6b      	subs	r3, r5, #1
    ca4e:	4218      	tst	r0, r3
    ca50:	d1fa      	bne.n	ca48 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    ca52:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    ca54:	4295      	cmp	r5, r2
    ca56:	d3f7      	bcc.n	ca48 <nvm_write_buffer+0x10>
    ca58:	4b1e      	ldr	r3, [pc, #120]	; (cad4 <nvm_write_buffer+0x9c>)
    ca5a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    ca5c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    ca5e:	07db      	lsls	r3, r3, #31
    ca60:	d5f2      	bpl.n	ca48 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    ca62:	4c1d      	ldr	r4, [pc, #116]	; (cad8 <nvm_write_buffer+0xa0>)
    ca64:	4b1b      	ldr	r3, [pc, #108]	; (cad4 <nvm_write_buffer+0x9c>)
    ca66:	801c      	strh	r4, [r3, #0]
    ca68:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    ca6a:	2401      	movs	r4, #1
    ca6c:	7d2b      	ldrb	r3, [r5, #20]
    ca6e:	4223      	tst	r3, r4
    ca70:	d0fc      	beq.n	ca6c <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    ca72:	2420      	movs	r4, #32
    ca74:	34ff      	adds	r4, #255	; 0xff
    ca76:	4b17      	ldr	r3, [pc, #92]	; (cad4 <nvm_write_buffer+0x9c>)
    ca78:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    ca7a:	2a00      	cmp	r2, #0
    ca7c:	d022      	beq.n	cac4 <nvm_write_buffer+0x8c>
    ca7e:	2301      	movs	r3, #1
    ca80:	0005      	movs	r5, r0
    ca82:	439d      	bics	r5, r3
    ca84:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    ca86:	1e57      	subs	r7, r2, #1
    ca88:	e009      	b.n	ca9e <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    ca8a:	18ce      	adds	r6, r1, r3
    ca8c:	7876      	ldrb	r6, [r6, #1]
    ca8e:	0236      	lsls	r6, r6, #8
    ca90:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    ca92:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    ca94:	3302      	adds	r3, #2
    ca96:	b29b      	uxth	r3, r3
    ca98:	3502      	adds	r5, #2
    ca9a:	429a      	cmp	r2, r3
    ca9c:	d904      	bls.n	caa8 <nvm_write_buffer+0x70>
		data = buffer[i];
    ca9e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    caa0:	42bb      	cmp	r3, r7
    caa2:	dbf2      	blt.n	ca8a <nvm_write_buffer+0x52>
		data = buffer[i];
    caa4:	b2a4      	uxth	r4, r4
    caa6:	e7f4      	b.n	ca92 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    caa8:	4b09      	ldr	r3, [pc, #36]	; (cad0 <nvm_write_buffer+0x98>)
    caaa:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    caac:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    caae:	2b00      	cmp	r3, #0
    cab0:	d1ca      	bne.n	ca48 <nvm_write_buffer+0x10>
    cab2:	2a3f      	cmp	r2, #63	; 0x3f
    cab4:	d8c8      	bhi.n	ca48 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    cab6:	2200      	movs	r2, #0
    cab8:	0001      	movs	r1, r0
    caba:	2004      	movs	r0, #4
    cabc:	4b07      	ldr	r3, [pc, #28]	; (cadc <nvm_write_buffer+0xa4>)
    cabe:	4798      	blx	r3
    cac0:	0004      	movs	r4, r0
    cac2:	e7c1      	b.n	ca48 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    cac4:	4b02      	ldr	r3, [pc, #8]	; (cad0 <nvm_write_buffer+0x98>)
    cac6:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    cac8:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    caca:	2b00      	cmp	r3, #0
    cacc:	d0f3      	beq.n	cab6 <nvm_write_buffer+0x7e>
    cace:	e7bb      	b.n	ca48 <nvm_write_buffer+0x10>
    cad0:	20000270 	.word	0x20000270
    cad4:	41004000 	.word	0x41004000
    cad8:	ffffa544 	.word	0xffffa544
    cadc:	0000c999 	.word	0x0000c999

0000cae0 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    cae0:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    cae2:	4b18      	ldr	r3, [pc, #96]	; (cb44 <nvm_read_buffer+0x64>)
    cae4:	881d      	ldrh	r5, [r3, #0]
    cae6:	885b      	ldrh	r3, [r3, #2]
    cae8:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    caea:	2418      	movs	r4, #24
	if (source_address >
    caec:	4283      	cmp	r3, r0
    caee:	d201      	bcs.n	caf4 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    caf0:	0020      	movs	r0, r4
    caf2:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    caf4:	1e6b      	subs	r3, r5, #1
    caf6:	4218      	tst	r0, r3
    caf8:	d1fa      	bne.n	caf0 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    cafa:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    cafc:	4295      	cmp	r5, r2
    cafe:	d3f7      	bcc.n	caf0 <nvm_read_buffer+0x10>
    cb00:	4b11      	ldr	r3, [pc, #68]	; (cb48 <nvm_read_buffer+0x68>)
    cb02:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    cb04:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    cb06:	07db      	lsls	r3, r3, #31
    cb08:	d5f2      	bpl.n	caf0 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    cb0a:	2420      	movs	r4, #32
    cb0c:	34ff      	adds	r4, #255	; 0xff
    cb0e:	4b0e      	ldr	r3, [pc, #56]	; (cb48 <nvm_read_buffer+0x68>)
    cb10:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    cb12:	2a00      	cmp	r2, #0
    cb14:	d014      	beq.n	cb40 <nvm_read_buffer+0x60>
    cb16:	2301      	movs	r3, #1
    cb18:	4398      	bics	r0, r3
    cb1a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    cb1c:	1e56      	subs	r6, r2, #1
    cb1e:	e004      	b.n	cb2a <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    cb20:	3302      	adds	r3, #2
    cb22:	b29b      	uxth	r3, r3
    cb24:	3002      	adds	r0, #2
    cb26:	429a      	cmp	r2, r3
    cb28:	d908      	bls.n	cb3c <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    cb2a:	8804      	ldrh	r4, [r0, #0]
    cb2c:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    cb2e:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    cb30:	42b3      	cmp	r3, r6
    cb32:	daf5      	bge.n	cb20 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    cb34:	18cd      	adds	r5, r1, r3
    cb36:	0a24      	lsrs	r4, r4, #8
    cb38:	706c      	strb	r4, [r5, #1]
    cb3a:	e7f1      	b.n	cb20 <nvm_read_buffer+0x40>
	return STATUS_OK;
    cb3c:	2400      	movs	r4, #0
    cb3e:	e7d7      	b.n	caf0 <nvm_read_buffer+0x10>
    cb40:	2400      	movs	r4, #0
    cb42:	e7d5      	b.n	caf0 <nvm_read_buffer+0x10>
    cb44:	20000270 	.word	0x20000270
    cb48:	41004000 	.word	0x41004000

0000cb4c <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    cb4c:	4b13      	ldr	r3, [pc, #76]	; (cb9c <nvm_erase_row+0x50>)
    cb4e:	881a      	ldrh	r2, [r3, #0]
    cb50:	885b      	ldrh	r3, [r3, #2]
    cb52:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    cb54:	2118      	movs	r1, #24
	if (row_address >
    cb56:	4283      	cmp	r3, r0
    cb58:	d201      	bcs.n	cb5e <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    cb5a:	0008      	movs	r0, r1
    cb5c:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    cb5e:	0092      	lsls	r2, r2, #2
    cb60:	3a01      	subs	r2, #1
    cb62:	4210      	tst	r0, r2
    cb64:	d1f9      	bne.n	cb5a <nvm_erase_row+0xe>
    cb66:	4b0e      	ldr	r3, [pc, #56]	; (cba0 <nvm_erase_row+0x54>)
    cb68:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    cb6a:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    cb6c:	07db      	lsls	r3, r3, #31
    cb6e:	d5f4      	bpl.n	cb5a <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    cb70:	4b0b      	ldr	r3, [pc, #44]	; (cba0 <nvm_erase_row+0x54>)
    cb72:	2220      	movs	r2, #32
    cb74:	32ff      	adds	r2, #255	; 0xff
    cb76:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    cb78:	0880      	lsrs	r0, r0, #2
    cb7a:	0040      	lsls	r0, r0, #1
    cb7c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    cb7e:	4a09      	ldr	r2, [pc, #36]	; (cba4 <nvm_erase_row+0x58>)
    cb80:	801a      	strh	r2, [r3, #0]
    cb82:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    cb84:	2201      	movs	r2, #1
    cb86:	7d0b      	ldrb	r3, [r1, #20]
    cb88:	4213      	tst	r3, r2
    cb8a:	d0fc      	beq.n	cb86 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    cb8c:	4b04      	ldr	r3, [pc, #16]	; (cba0 <nvm_erase_row+0x54>)
    cb8e:	8b19      	ldrh	r1, [r3, #24]
    cb90:	201c      	movs	r0, #28
    cb92:	4001      	ands	r1, r0
	return STATUS_OK;
    cb94:	1e48      	subs	r0, r1, #1
    cb96:	4181      	sbcs	r1, r0
    cb98:	0089      	lsls	r1, r1, #2
    cb9a:	e7de      	b.n	cb5a <nvm_erase_row+0xe>
    cb9c:	20000270 	.word	0x20000270
    cba0:	41004000 	.word	0x41004000
    cba4:	ffffa502 	.word	0xffffa502

0000cba8 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    cba8:	4b13      	ldr	r3, [pc, #76]	; (cbf8 <nvm_get_parameters+0x50>)
    cbaa:	2220      	movs	r2, #32
    cbac:	32ff      	adds	r2, #255	; 0xff
    cbae:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    cbb0:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    cbb2:	034a      	lsls	r2, r1, #13
    cbb4:	0f52      	lsrs	r2, r2, #29
    cbb6:	2308      	movs	r3, #8
    cbb8:	4093      	lsls	r3, r2
	parameters->page_size =
    cbba:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    cbbc:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    cbbe:	4b0f      	ldr	r3, [pc, #60]	; (cbfc <nvm_get_parameters+0x54>)
    cbc0:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    cbc2:	065b      	lsls	r3, r3, #25
    cbc4:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    cbc6:	2b07      	cmp	r3, #7
    cbc8:	d010      	beq.n	cbec <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    cbca:	2206      	movs	r2, #6
    cbcc:	1ad2      	subs	r2, r2, r3
    cbce:	2304      	movs	r3, #4
    cbd0:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    cbd2:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    cbd4:	4b09      	ldr	r3, [pc, #36]	; (cbfc <nvm_get_parameters+0x54>)
    cbd6:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    cbd8:	2207      	movs	r2, #7
    cbda:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    cbdc:	2b07      	cmp	r3, #7
    cbde:	d008      	beq.n	cbf2 <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    cbe0:	2207      	movs	r2, #7
    cbe2:	1ad2      	subs	r2, r2, r3
    cbe4:	2304      	movs	r3, #4
    cbe6:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    cbe8:	6083      	str	r3, [r0, #8]
	}
}
    cbea:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    cbec:	2300      	movs	r3, #0
    cbee:	6043      	str	r3, [r0, #4]
    cbf0:	e7f0      	b.n	cbd4 <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
    cbf2:	2300      	movs	r3, #0
    cbf4:	6083      	str	r3, [r0, #8]
    cbf6:	e7f8      	b.n	cbea <nvm_get_parameters+0x42>
    cbf8:	41004000 	.word	0x41004000
    cbfc:	00804000 	.word	0x00804000

0000cc00 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    cc00:	b500      	push	{lr}
    cc02:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    cc04:	ab01      	add	r3, sp, #4
    cc06:	2280      	movs	r2, #128	; 0x80
    cc08:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    cc0a:	780a      	ldrb	r2, [r1, #0]
    cc0c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    cc0e:	784a      	ldrb	r2, [r1, #1]
    cc10:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    cc12:	788a      	ldrb	r2, [r1, #2]
    cc14:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    cc16:	0019      	movs	r1, r3
    cc18:	4b01      	ldr	r3, [pc, #4]	; (cc20 <port_pin_set_config+0x20>)
    cc1a:	4798      	blx	r3
}
    cc1c:	b003      	add	sp, #12
    cc1e:	bd00      	pop	{pc}
    cc20:	0000d3d5 	.word	0x0000d3d5

0000cc24 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    cc24:	4770      	bx	lr
	...

0000cc28 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    cc28:	4b0c      	ldr	r3, [pc, #48]	; (cc5c <cpu_irq_enter_critical+0x34>)
    cc2a:	681b      	ldr	r3, [r3, #0]
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d106      	bne.n	cc3e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cc30:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    cc34:	2b00      	cmp	r3, #0
    cc36:	d007      	beq.n	cc48 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    cc38:	2200      	movs	r2, #0
    cc3a:	4b09      	ldr	r3, [pc, #36]	; (cc60 <cpu_irq_enter_critical+0x38>)
    cc3c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    cc3e:	4a07      	ldr	r2, [pc, #28]	; (cc5c <cpu_irq_enter_critical+0x34>)
    cc40:	6813      	ldr	r3, [r2, #0]
    cc42:	3301      	adds	r3, #1
    cc44:	6013      	str	r3, [r2, #0]
}
    cc46:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    cc48:	b672      	cpsid	i
    cc4a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    cc4e:	2200      	movs	r2, #0
    cc50:	4b04      	ldr	r3, [pc, #16]	; (cc64 <cpu_irq_enter_critical+0x3c>)
    cc52:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    cc54:	3201      	adds	r2, #1
    cc56:	4b02      	ldr	r3, [pc, #8]	; (cc60 <cpu_irq_enter_critical+0x38>)
    cc58:	701a      	strb	r2, [r3, #0]
    cc5a:	e7f0      	b.n	cc3e <cpu_irq_enter_critical+0x16>
    cc5c:	20000278 	.word	0x20000278
    cc60:	2000027c 	.word	0x2000027c
    cc64:	2000000a 	.word	0x2000000a

0000cc68 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    cc68:	4b08      	ldr	r3, [pc, #32]	; (cc8c <cpu_irq_leave_critical+0x24>)
    cc6a:	681a      	ldr	r2, [r3, #0]
    cc6c:	3a01      	subs	r2, #1
    cc6e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    cc70:	681b      	ldr	r3, [r3, #0]
    cc72:	2b00      	cmp	r3, #0
    cc74:	d109      	bne.n	cc8a <cpu_irq_leave_critical+0x22>
    cc76:	4b06      	ldr	r3, [pc, #24]	; (cc90 <cpu_irq_leave_critical+0x28>)
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	2b00      	cmp	r3, #0
    cc7c:	d005      	beq.n	cc8a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    cc7e:	2201      	movs	r2, #1
    cc80:	4b04      	ldr	r3, [pc, #16]	; (cc94 <cpu_irq_leave_critical+0x2c>)
    cc82:	701a      	strb	r2, [r3, #0]
    cc84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cc88:	b662      	cpsie	i
	}
}
    cc8a:	4770      	bx	lr
    cc8c:	20000278 	.word	0x20000278
    cc90:	2000027c 	.word	0x2000027c
    cc94:	2000000a 	.word	0x2000000a

0000cc98 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    cc98:	b510      	push	{r4, lr}
	switch (clock_source) {
    cc9a:	2808      	cmp	r0, #8
    cc9c:	d803      	bhi.n	cca6 <system_clock_source_get_hz+0xe>
    cc9e:	0080      	lsls	r0, r0, #2
    cca0:	4b1b      	ldr	r3, [pc, #108]	; (cd10 <system_clock_source_get_hz+0x78>)
    cca2:	581b      	ldr	r3, [r3, r0]
    cca4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    cca6:	2000      	movs	r0, #0
    cca8:	e030      	b.n	cd0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    ccaa:	4b1a      	ldr	r3, [pc, #104]	; (cd14 <system_clock_source_get_hz+0x7c>)
    ccac:	6918      	ldr	r0, [r3, #16]
    ccae:	e02d      	b.n	cd0c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    ccb0:	4b19      	ldr	r3, [pc, #100]	; (cd18 <system_clock_source_get_hz+0x80>)
    ccb2:	6a1b      	ldr	r3, [r3, #32]
    ccb4:	059b      	lsls	r3, r3, #22
    ccb6:	0f9b      	lsrs	r3, r3, #30
    ccb8:	4818      	ldr	r0, [pc, #96]	; (cd1c <system_clock_source_get_hz+0x84>)
    ccba:	40d8      	lsrs	r0, r3
    ccbc:	e026      	b.n	cd0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    ccbe:	4b15      	ldr	r3, [pc, #84]	; (cd14 <system_clock_source_get_hz+0x7c>)
    ccc0:	6958      	ldr	r0, [r3, #20]
    ccc2:	e023      	b.n	cd0c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    ccc4:	4b13      	ldr	r3, [pc, #76]	; (cd14 <system_clock_source_get_hz+0x7c>)
    ccc6:	681b      	ldr	r3, [r3, #0]
			return 0;
    ccc8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    ccca:	079b      	lsls	r3, r3, #30
    cccc:	d51e      	bpl.n	cd0c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    ccce:	4912      	ldr	r1, [pc, #72]	; (cd18 <system_clock_source_get_hz+0x80>)
    ccd0:	2210      	movs	r2, #16
    ccd2:	68cb      	ldr	r3, [r1, #12]
    ccd4:	421a      	tst	r2, r3
    ccd6:	d0fc      	beq.n	ccd2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    ccd8:	4b0e      	ldr	r3, [pc, #56]	; (cd14 <system_clock_source_get_hz+0x7c>)
    ccda:	681b      	ldr	r3, [r3, #0]
    ccdc:	075b      	lsls	r3, r3, #29
    ccde:	d401      	bmi.n	cce4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    cce0:	480f      	ldr	r0, [pc, #60]	; (cd20 <system_clock_source_get_hz+0x88>)
    cce2:	e013      	b.n	cd0c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    cce4:	2000      	movs	r0, #0
    cce6:	4b0f      	ldr	r3, [pc, #60]	; (cd24 <system_clock_source_get_hz+0x8c>)
    cce8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    ccea:	4b0a      	ldr	r3, [pc, #40]	; (cd14 <system_clock_source_get_hz+0x7c>)
    ccec:	689b      	ldr	r3, [r3, #8]
    ccee:	041b      	lsls	r3, r3, #16
    ccf0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    ccf2:	4358      	muls	r0, r3
    ccf4:	e00a      	b.n	cd0c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    ccf6:	2350      	movs	r3, #80	; 0x50
    ccf8:	4a07      	ldr	r2, [pc, #28]	; (cd18 <system_clock_source_get_hz+0x80>)
    ccfa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    ccfc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    ccfe:	075b      	lsls	r3, r3, #29
    cd00:	d504      	bpl.n	cd0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    cd02:	4b04      	ldr	r3, [pc, #16]	; (cd14 <system_clock_source_get_hz+0x7c>)
    cd04:	68d8      	ldr	r0, [r3, #12]
    cd06:	e001      	b.n	cd0c <system_clock_source_get_hz+0x74>
		return 32768UL;
    cd08:	2080      	movs	r0, #128	; 0x80
    cd0a:	0200      	lsls	r0, r0, #8
	}
}
    cd0c:	bd10      	pop	{r4, pc}
    cd0e:	46c0      	nop			; (mov r8, r8)
    cd10:	000138c0 	.word	0x000138c0
    cd14:	20000280 	.word	0x20000280
    cd18:	40000800 	.word	0x40000800
    cd1c:	007a1200 	.word	0x007a1200
    cd20:	02dc6c00 	.word	0x02dc6c00
    cd24:	0000d2f9 	.word	0x0000d2f9

0000cd28 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    cd28:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    cd2a:	490c      	ldr	r1, [pc, #48]	; (cd5c <system_clock_source_osc8m_set_config+0x34>)
    cd2c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    cd2e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    cd30:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    cd32:	7840      	ldrb	r0, [r0, #1]
    cd34:	2201      	movs	r2, #1
    cd36:	4010      	ands	r0, r2
    cd38:	0180      	lsls	r0, r0, #6
    cd3a:	2640      	movs	r6, #64	; 0x40
    cd3c:	43b3      	bics	r3, r6
    cd3e:	4303      	orrs	r3, r0
    cd40:	402a      	ands	r2, r5
    cd42:	01d2      	lsls	r2, r2, #7
    cd44:	2080      	movs	r0, #128	; 0x80
    cd46:	4383      	bics	r3, r0
    cd48:	4313      	orrs	r3, r2
    cd4a:	2203      	movs	r2, #3
    cd4c:	4022      	ands	r2, r4
    cd4e:	0212      	lsls	r2, r2, #8
    cd50:	4803      	ldr	r0, [pc, #12]	; (cd60 <system_clock_source_osc8m_set_config+0x38>)
    cd52:	4003      	ands	r3, r0
    cd54:	4313      	orrs	r3, r2
    cd56:	620b      	str	r3, [r1, #32]
}
    cd58:	bd70      	pop	{r4, r5, r6, pc}
    cd5a:	46c0      	nop			; (mov r8, r8)
    cd5c:	40000800 	.word	0x40000800
    cd60:	fffffcff 	.word	0xfffffcff

0000cd64 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    cd64:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd66:	46de      	mov	lr, fp
    cd68:	4657      	mov	r7, sl
    cd6a:	464e      	mov	r6, r9
    cd6c:	4645      	mov	r5, r8
    cd6e:	b5e0      	push	{r5, r6, r7, lr}
    cd70:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    cd72:	4b26      	ldr	r3, [pc, #152]	; (ce0c <system_clock_source_xosc32k_set_config+0xa8>)
    cd74:	469b      	mov	fp, r3
    cd76:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    cd78:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    cd7a:	7800      	ldrb	r0, [r0, #0]
    cd7c:	4242      	negs	r2, r0
    cd7e:	4142      	adcs	r2, r0
    cd80:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    cd82:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    cd84:	78ca      	ldrb	r2, [r1, #3]
    cd86:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    cd88:	790a      	ldrb	r2, [r1, #4]
    cd8a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    cd8c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    cd8e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    cd90:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    cd92:	688a      	ldr	r2, [r1, #8]
    cd94:	491e      	ldr	r1, [pc, #120]	; (ce10 <system_clock_source_xosc32k_set_config+0xac>)
    cd96:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    cd98:	2101      	movs	r1, #1
    cd9a:	464a      	mov	r2, r9
    cd9c:	0092      	lsls	r2, r2, #2
    cd9e:	4691      	mov	r9, r2
    cda0:	2204      	movs	r2, #4
    cda2:	4393      	bics	r3, r2
    cda4:	464a      	mov	r2, r9
    cda6:	4313      	orrs	r3, r2
    cda8:	4642      	mov	r2, r8
    cdaa:	400a      	ands	r2, r1
    cdac:	00d2      	lsls	r2, r2, #3
    cdae:	4690      	mov	r8, r2
    cdb0:	2208      	movs	r2, #8
    cdb2:	4393      	bics	r3, r2
    cdb4:	4642      	mov	r2, r8
    cdb6:	4313      	orrs	r3, r2
    cdb8:	4662      	mov	r2, ip
    cdba:	400a      	ands	r2, r1
    cdbc:	0112      	lsls	r2, r2, #4
    cdbe:	4694      	mov	ip, r2
    cdc0:	2210      	movs	r2, #16
    cdc2:	4393      	bics	r3, r2
    cdc4:	4662      	mov	r2, ip
    cdc6:	4313      	orrs	r3, r2
    cdc8:	4008      	ands	r0, r1
    cdca:	0140      	lsls	r0, r0, #5
    cdcc:	2220      	movs	r2, #32
    cdce:	4393      	bics	r3, r2
    cdd0:	4303      	orrs	r3, r0
    cdd2:	400f      	ands	r7, r1
    cdd4:	01bf      	lsls	r7, r7, #6
    cdd6:	2040      	movs	r0, #64	; 0x40
    cdd8:	4383      	bics	r3, r0
    cdda:	433b      	orrs	r3, r7
    cddc:	400e      	ands	r6, r1
    cdde:	01f6      	lsls	r6, r6, #7
    cde0:	3040      	adds	r0, #64	; 0x40
    cde2:	4383      	bics	r3, r0
    cde4:	4333      	orrs	r3, r6
    cde6:	3879      	subs	r0, #121	; 0x79
    cde8:	4005      	ands	r5, r0
    cdea:	022d      	lsls	r5, r5, #8
    cdec:	4809      	ldr	r0, [pc, #36]	; (ce14 <system_clock_source_xosc32k_set_config+0xb0>)
    cdee:	4003      	ands	r3, r0
    cdf0:	432b      	orrs	r3, r5
    cdf2:	4021      	ands	r1, r4
    cdf4:	0309      	lsls	r1, r1, #12
    cdf6:	4808      	ldr	r0, [pc, #32]	; (ce18 <system_clock_source_xosc32k_set_config+0xb4>)
    cdf8:	4003      	ands	r3, r0
    cdfa:	430b      	orrs	r3, r1
    cdfc:	465a      	mov	r2, fp
    cdfe:	8293      	strh	r3, [r2, #20]
}
    ce00:	bc3c      	pop	{r2, r3, r4, r5}
    ce02:	4690      	mov	r8, r2
    ce04:	4699      	mov	r9, r3
    ce06:	46a2      	mov	sl, r4
    ce08:	46ab      	mov	fp, r5
    ce0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce0c:	40000800 	.word	0x40000800
    ce10:	20000280 	.word	0x20000280
    ce14:	fffff8ff 	.word	0xfffff8ff
    ce18:	ffffefff 	.word	0xffffefff

0000ce1c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    ce1c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    ce1e:	7a03      	ldrb	r3, [r0, #8]
    ce20:	069b      	lsls	r3, r3, #26
    ce22:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    ce24:	8942      	ldrh	r2, [r0, #10]
    ce26:	0592      	lsls	r2, r2, #22
    ce28:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    ce2a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    ce2c:	4918      	ldr	r1, [pc, #96]	; (ce90 <system_clock_source_dfll_set_config+0x74>)
    ce2e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    ce30:	7983      	ldrb	r3, [r0, #6]
    ce32:	79c2      	ldrb	r2, [r0, #7]
    ce34:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    ce36:	8842      	ldrh	r2, [r0, #2]
    ce38:	8884      	ldrh	r4, [r0, #4]
    ce3a:	4322      	orrs	r2, r4
    ce3c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    ce3e:	7842      	ldrb	r2, [r0, #1]
    ce40:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    ce42:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    ce44:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    ce46:	7803      	ldrb	r3, [r0, #0]
    ce48:	2b04      	cmp	r3, #4
    ce4a:	d011      	beq.n	ce70 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    ce4c:	2b20      	cmp	r3, #32
    ce4e:	d10e      	bne.n	ce6e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ce50:	7b03      	ldrb	r3, [r0, #12]
    ce52:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    ce54:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ce56:	4313      	orrs	r3, r2
    ce58:	89c2      	ldrh	r2, [r0, #14]
    ce5a:	0412      	lsls	r2, r2, #16
    ce5c:	490d      	ldr	r1, [pc, #52]	; (ce94 <system_clock_source_dfll_set_config+0x78>)
    ce5e:	400a      	ands	r2, r1
    ce60:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    ce62:	4a0b      	ldr	r2, [pc, #44]	; (ce90 <system_clock_source_dfll_set_config+0x74>)
    ce64:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    ce66:	6811      	ldr	r1, [r2, #0]
    ce68:	4b0b      	ldr	r3, [pc, #44]	; (ce98 <system_clock_source_dfll_set_config+0x7c>)
    ce6a:	430b      	orrs	r3, r1
    ce6c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    ce6e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ce70:	7b03      	ldrb	r3, [r0, #12]
    ce72:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    ce74:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ce76:	4313      	orrs	r3, r2
    ce78:	89c2      	ldrh	r2, [r0, #14]
    ce7a:	0412      	lsls	r2, r2, #16
    ce7c:	4905      	ldr	r1, [pc, #20]	; (ce94 <system_clock_source_dfll_set_config+0x78>)
    ce7e:	400a      	ands	r2, r1
    ce80:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    ce82:	4a03      	ldr	r2, [pc, #12]	; (ce90 <system_clock_source_dfll_set_config+0x74>)
    ce84:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    ce86:	6813      	ldr	r3, [r2, #0]
    ce88:	2104      	movs	r1, #4
    ce8a:	430b      	orrs	r3, r1
    ce8c:	6013      	str	r3, [r2, #0]
    ce8e:	e7ee      	b.n	ce6e <system_clock_source_dfll_set_config+0x52>
    ce90:	20000280 	.word	0x20000280
    ce94:	03ff0000 	.word	0x03ff0000
    ce98:	00000424 	.word	0x00000424

0000ce9c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    ce9c:	2808      	cmp	r0, #8
    ce9e:	d803      	bhi.n	cea8 <system_clock_source_enable+0xc>
    cea0:	0080      	lsls	r0, r0, #2
    cea2:	4b25      	ldr	r3, [pc, #148]	; (cf38 <system_clock_source_enable+0x9c>)
    cea4:	581b      	ldr	r3, [r3, r0]
    cea6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    cea8:	2017      	movs	r0, #23
    ceaa:	e044      	b.n	cf36 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    ceac:	4a23      	ldr	r2, [pc, #140]	; (cf3c <system_clock_source_enable+0xa0>)
    ceae:	6a13      	ldr	r3, [r2, #32]
    ceb0:	2102      	movs	r1, #2
    ceb2:	430b      	orrs	r3, r1
    ceb4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    ceb6:	2000      	movs	r0, #0
    ceb8:	e03d      	b.n	cf36 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    ceba:	4a20      	ldr	r2, [pc, #128]	; (cf3c <system_clock_source_enable+0xa0>)
    cebc:	6993      	ldr	r3, [r2, #24]
    cebe:	2102      	movs	r1, #2
    cec0:	430b      	orrs	r3, r1
    cec2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    cec4:	2000      	movs	r0, #0
		break;
    cec6:	e036      	b.n	cf36 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    cec8:	4a1c      	ldr	r2, [pc, #112]	; (cf3c <system_clock_source_enable+0xa0>)
    ceca:	8a13      	ldrh	r3, [r2, #16]
    cecc:	2102      	movs	r1, #2
    cece:	430b      	orrs	r3, r1
    ced0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    ced2:	2000      	movs	r0, #0
		break;
    ced4:	e02f      	b.n	cf36 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    ced6:	4a19      	ldr	r2, [pc, #100]	; (cf3c <system_clock_source_enable+0xa0>)
    ced8:	8a93      	ldrh	r3, [r2, #20]
    ceda:	2102      	movs	r1, #2
    cedc:	430b      	orrs	r3, r1
    cede:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    cee0:	2000      	movs	r0, #0
		break;
    cee2:	e028      	b.n	cf36 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    cee4:	4916      	ldr	r1, [pc, #88]	; (cf40 <system_clock_source_enable+0xa4>)
    cee6:	680b      	ldr	r3, [r1, #0]
    cee8:	2202      	movs	r2, #2
    ceea:	4313      	orrs	r3, r2
    ceec:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    ceee:	4b13      	ldr	r3, [pc, #76]	; (cf3c <system_clock_source_enable+0xa0>)
    cef0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    cef2:	0019      	movs	r1, r3
    cef4:	320e      	adds	r2, #14
    cef6:	68cb      	ldr	r3, [r1, #12]
    cef8:	421a      	tst	r2, r3
    cefa:	d0fc      	beq.n	cef6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    cefc:	4a10      	ldr	r2, [pc, #64]	; (cf40 <system_clock_source_enable+0xa4>)
    cefe:	6891      	ldr	r1, [r2, #8]
    cf00:	4b0e      	ldr	r3, [pc, #56]	; (cf3c <system_clock_source_enable+0xa0>)
    cf02:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    cf04:	6852      	ldr	r2, [r2, #4]
    cf06:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    cf08:	2200      	movs	r2, #0
    cf0a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    cf0c:	0019      	movs	r1, r3
    cf0e:	3210      	adds	r2, #16
    cf10:	68cb      	ldr	r3, [r1, #12]
    cf12:	421a      	tst	r2, r3
    cf14:	d0fc      	beq.n	cf10 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    cf16:	4b0a      	ldr	r3, [pc, #40]	; (cf40 <system_clock_source_enable+0xa4>)
    cf18:	681b      	ldr	r3, [r3, #0]
    cf1a:	b29b      	uxth	r3, r3
    cf1c:	4a07      	ldr	r2, [pc, #28]	; (cf3c <system_clock_source_enable+0xa0>)
    cf1e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    cf20:	2000      	movs	r0, #0
    cf22:	e008      	b.n	cf36 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    cf24:	4905      	ldr	r1, [pc, #20]	; (cf3c <system_clock_source_enable+0xa0>)
    cf26:	2244      	movs	r2, #68	; 0x44
    cf28:	5c8b      	ldrb	r3, [r1, r2]
    cf2a:	2002      	movs	r0, #2
    cf2c:	4303      	orrs	r3, r0
    cf2e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    cf30:	2000      	movs	r0, #0
		break;
    cf32:	e000      	b.n	cf36 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    cf34:	2000      	movs	r0, #0
}
    cf36:	4770      	bx	lr
    cf38:	000138e4 	.word	0x000138e4
    cf3c:	40000800 	.word	0x40000800
    cf40:	20000280 	.word	0x20000280

0000cf44 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    cf44:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf46:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    cf48:	22c2      	movs	r2, #194	; 0xc2
    cf4a:	00d2      	lsls	r2, r2, #3
    cf4c:	4b47      	ldr	r3, [pc, #284]	; (d06c <system_clock_init+0x128>)
    cf4e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    cf50:	4a47      	ldr	r2, [pc, #284]	; (d070 <system_clock_init+0x12c>)
    cf52:	6853      	ldr	r3, [r2, #4]
    cf54:	211e      	movs	r1, #30
    cf56:	438b      	bics	r3, r1
    cf58:	391a      	subs	r1, #26
    cf5a:	430b      	orrs	r3, r1
    cf5c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    cf5e:	2202      	movs	r2, #2
    cf60:	ab01      	add	r3, sp, #4
    cf62:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    cf64:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    cf66:	4d43      	ldr	r5, [pc, #268]	; (d074 <system_clock_init+0x130>)
    cf68:	b2e0      	uxtb	r0, r4
    cf6a:	a901      	add	r1, sp, #4
    cf6c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    cf6e:	3401      	adds	r4, #1
    cf70:	2c25      	cmp	r4, #37	; 0x25
    cf72:	d1f9      	bne.n	cf68 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    cf74:	a80a      	add	r0, sp, #40	; 0x28
    cf76:	2300      	movs	r3, #0
    cf78:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    cf7a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    cf7c:	2280      	movs	r2, #128	; 0x80
    cf7e:	0212      	lsls	r2, r2, #8
    cf80:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    cf82:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    cf84:	2201      	movs	r2, #1
    cf86:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    cf88:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    cf8a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    cf8c:	3202      	adds	r2, #2
    cf8e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    cf90:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    cf92:	4b39      	ldr	r3, [pc, #228]	; (d078 <system_clock_init+0x134>)
    cf94:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    cf96:	2005      	movs	r0, #5
    cf98:	4b38      	ldr	r3, [pc, #224]	; (d07c <system_clock_init+0x138>)
    cf9a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    cf9c:	4933      	ldr	r1, [pc, #204]	; (d06c <system_clock_init+0x128>)
    cf9e:	2202      	movs	r2, #2
    cfa0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    cfa2:	421a      	tst	r2, r3
    cfa4:	d0fc      	beq.n	cfa0 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    cfa6:	4a31      	ldr	r2, [pc, #196]	; (d06c <system_clock_init+0x128>)
    cfa8:	8a93      	ldrh	r3, [r2, #20]
    cfaa:	2180      	movs	r1, #128	; 0x80
    cfac:	430b      	orrs	r3, r1
    cfae:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    cfb0:	ab05      	add	r3, sp, #20
    cfb2:	2100      	movs	r1, #0
    cfb4:	2200      	movs	r2, #0
    cfb6:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    cfb8:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    cfba:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    cfbc:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    cfbe:	313f      	adds	r1, #63	; 0x3f
    cfc0:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    cfc2:	393b      	subs	r1, #59	; 0x3b
    cfc4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    cfc6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    cfc8:	4b2d      	ldr	r3, [pc, #180]	; (d080 <system_clock_init+0x13c>)
    cfca:	681b      	ldr	r3, [r3, #0]
    cfcc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    cfce:	2b3f      	cmp	r3, #63	; 0x3f
    cfd0:	d04a      	beq.n	d068 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    cfd2:	a805      	add	r0, sp, #20
    cfd4:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    cfd6:	4b2b      	ldr	r3, [pc, #172]	; (d084 <system_clock_init+0x140>)
    cfd8:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    cfda:	2307      	movs	r3, #7
    cfdc:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    cfde:	3338      	adds	r3, #56	; 0x38
    cfe0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    cfe2:	4b29      	ldr	r3, [pc, #164]	; (d088 <system_clock_init+0x144>)
    cfe4:	4798      	blx	r3
	config->run_in_standby  = false;
    cfe6:	a804      	add	r0, sp, #16
    cfe8:	2500      	movs	r5, #0
    cfea:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    cfec:	2601      	movs	r6, #1
    cfee:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    cff0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    cff2:	4b26      	ldr	r3, [pc, #152]	; (d08c <system_clock_init+0x148>)
    cff4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    cff6:	2006      	movs	r0, #6
    cff8:	4f20      	ldr	r7, [pc, #128]	; (d07c <system_clock_init+0x138>)
    cffa:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    cffc:	4b24      	ldr	r3, [pc, #144]	; (d090 <system_clock_init+0x14c>)
    cffe:	4798      	blx	r3
	config->division_factor    = 1;
    d000:	ac01      	add	r4, sp, #4
    d002:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    d004:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    d006:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    d008:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    d00a:	2305      	movs	r3, #5
    d00c:	7023      	strb	r3, [r4, #0]
    d00e:	0021      	movs	r1, r4
    d010:	2001      	movs	r0, #1
    d012:	4b20      	ldr	r3, [pc, #128]	; (d094 <system_clock_init+0x150>)
    d014:	4798      	blx	r3
    d016:	2001      	movs	r0, #1
    d018:	4b1f      	ldr	r3, [pc, #124]	; (d098 <system_clock_init+0x154>)
    d01a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    d01c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    d01e:	0021      	movs	r1, r4
    d020:	2000      	movs	r0, #0
    d022:	4b14      	ldr	r3, [pc, #80]	; (d074 <system_clock_init+0x130>)
    d024:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    d026:	2000      	movs	r0, #0
    d028:	4b1c      	ldr	r3, [pc, #112]	; (d09c <system_clock_init+0x158>)
    d02a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    d02c:	2007      	movs	r0, #7
    d02e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    d030:	490e      	ldr	r1, [pc, #56]	; (d06c <system_clock_init+0x128>)
    d032:	22d0      	movs	r2, #208	; 0xd0
    d034:	68cb      	ldr	r3, [r1, #12]
    d036:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    d038:	2bd0      	cmp	r3, #208	; 0xd0
    d03a:	d1fb      	bne.n	d034 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    d03c:	4a18      	ldr	r2, [pc, #96]	; (d0a0 <system_clock_init+0x15c>)
    d03e:	2300      	movs	r3, #0
    d040:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    d042:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    d044:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    d046:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    d048:	a901      	add	r1, sp, #4
    d04a:	2201      	movs	r2, #1
    d04c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    d04e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    d050:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    d052:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    d054:	3307      	adds	r3, #7
    d056:	700b      	strb	r3, [r1, #0]
    d058:	2000      	movs	r0, #0
    d05a:	4b0e      	ldr	r3, [pc, #56]	; (d094 <system_clock_init+0x150>)
    d05c:	4798      	blx	r3
    d05e:	2000      	movs	r0, #0
    d060:	4b0d      	ldr	r3, [pc, #52]	; (d098 <system_clock_init+0x154>)
    d062:	4798      	blx	r3
#endif
}
    d064:	b00f      	add	sp, #60	; 0x3c
    d066:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    d068:	3b20      	subs	r3, #32
    d06a:	e7b2      	b.n	cfd2 <system_clock_init+0x8e>
    d06c:	40000800 	.word	0x40000800
    d070:	41004000 	.word	0x41004000
    d074:	0000d2dd 	.word	0x0000d2dd
    d078:	0000cd65 	.word	0x0000cd65
    d07c:	0000ce9d 	.word	0x0000ce9d
    d080:	00806024 	.word	0x00806024
    d084:	000005b9 	.word	0x000005b9
    d088:	0000ce1d 	.word	0x0000ce1d
    d08c:	0000cd29 	.word	0x0000cd29
    d090:	0000d0a5 	.word	0x0000d0a5
    d094:	0000d0c9 	.word	0x0000d0c9
    d098:	0000d181 	.word	0x0000d181
    d09c:	0000d251 	.word	0x0000d251
    d0a0:	40000400 	.word	0x40000400

0000d0a4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    d0a4:	4a06      	ldr	r2, [pc, #24]	; (d0c0 <system_gclk_init+0x1c>)
    d0a6:	6993      	ldr	r3, [r2, #24]
    d0a8:	2108      	movs	r1, #8
    d0aa:	430b      	orrs	r3, r1
    d0ac:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    d0ae:	2201      	movs	r2, #1
    d0b0:	4b04      	ldr	r3, [pc, #16]	; (d0c4 <system_gclk_init+0x20>)
    d0b2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    d0b4:	0019      	movs	r1, r3
    d0b6:	780b      	ldrb	r3, [r1, #0]
    d0b8:	4213      	tst	r3, r2
    d0ba:	d1fc      	bne.n	d0b6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    d0bc:	4770      	bx	lr
    d0be:	46c0      	nop			; (mov r8, r8)
    d0c0:	40000400 	.word	0x40000400
    d0c4:	40000c00 	.word	0x40000c00

0000d0c8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    d0c8:	b570      	push	{r4, r5, r6, lr}
    d0ca:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    d0cc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    d0ce:	780d      	ldrb	r5, [r1, #0]
    d0d0:	022d      	lsls	r5, r5, #8
    d0d2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    d0d4:	784b      	ldrb	r3, [r1, #1]
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d002      	beq.n	d0e0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    d0da:	2380      	movs	r3, #128	; 0x80
    d0dc:	02db      	lsls	r3, r3, #11
    d0de:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    d0e0:	7a4b      	ldrb	r3, [r1, #9]
    d0e2:	2b00      	cmp	r3, #0
    d0e4:	d002      	beq.n	d0ec <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    d0e6:	2380      	movs	r3, #128	; 0x80
    d0e8:	031b      	lsls	r3, r3, #12
    d0ea:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    d0ec:	6848      	ldr	r0, [r1, #4]
    d0ee:	2801      	cmp	r0, #1
    d0f0:	d910      	bls.n	d114 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    d0f2:	1e43      	subs	r3, r0, #1
    d0f4:	4218      	tst	r0, r3
    d0f6:	d134      	bne.n	d162 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    d0f8:	2802      	cmp	r0, #2
    d0fa:	d930      	bls.n	d15e <system_gclk_gen_set_config+0x96>
    d0fc:	2302      	movs	r3, #2
    d0fe:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    d100:	3201      	adds	r2, #1
						mask <<= 1) {
    d102:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    d104:	4298      	cmp	r0, r3
    d106:	d8fb      	bhi.n	d100 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    d108:	0212      	lsls	r2, r2, #8
    d10a:	4332      	orrs	r2, r6
    d10c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    d10e:	2380      	movs	r3, #128	; 0x80
    d110:	035b      	lsls	r3, r3, #13
    d112:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    d114:	7a0b      	ldrb	r3, [r1, #8]
    d116:	2b00      	cmp	r3, #0
    d118:	d002      	beq.n	d120 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    d11a:	2380      	movs	r3, #128	; 0x80
    d11c:	039b      	lsls	r3, r3, #14
    d11e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d120:	4a13      	ldr	r2, [pc, #76]	; (d170 <system_gclk_gen_set_config+0xa8>)
    d122:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    d124:	b25b      	sxtb	r3, r3
    d126:	2b00      	cmp	r3, #0
    d128:	dbfb      	blt.n	d122 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    d12a:	4b12      	ldr	r3, [pc, #72]	; (d174 <system_gclk_gen_set_config+0xac>)
    d12c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    d12e:	4b12      	ldr	r3, [pc, #72]	; (d178 <system_gclk_gen_set_config+0xb0>)
    d130:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d132:	4a0f      	ldr	r2, [pc, #60]	; (d170 <system_gclk_gen_set_config+0xa8>)
    d134:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    d136:	b25b      	sxtb	r3, r3
    d138:	2b00      	cmp	r3, #0
    d13a:	dbfb      	blt.n	d134 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    d13c:	4b0c      	ldr	r3, [pc, #48]	; (d170 <system_gclk_gen_set_config+0xa8>)
    d13e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d140:	001a      	movs	r2, r3
    d142:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    d144:	b25b      	sxtb	r3, r3
    d146:	2b00      	cmp	r3, #0
    d148:	dbfb      	blt.n	d142 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    d14a:	4a09      	ldr	r2, [pc, #36]	; (d170 <system_gclk_gen_set_config+0xa8>)
    d14c:	6853      	ldr	r3, [r2, #4]
    d14e:	2180      	movs	r1, #128	; 0x80
    d150:	0249      	lsls	r1, r1, #9
    d152:	400b      	ands	r3, r1
    d154:	431d      	orrs	r5, r3
    d156:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    d158:	4b08      	ldr	r3, [pc, #32]	; (d17c <system_gclk_gen_set_config+0xb4>)
    d15a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d15c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    d15e:	2200      	movs	r2, #0
    d160:	e7d2      	b.n	d108 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    d162:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    d164:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    d166:	2380      	movs	r3, #128	; 0x80
    d168:	029b      	lsls	r3, r3, #10
    d16a:	431d      	orrs	r5, r3
    d16c:	e7d2      	b.n	d114 <system_gclk_gen_set_config+0x4c>
    d16e:	46c0      	nop			; (mov r8, r8)
    d170:	40000c00 	.word	0x40000c00
    d174:	0000cc29 	.word	0x0000cc29
    d178:	40000c08 	.word	0x40000c08
    d17c:	0000cc69 	.word	0x0000cc69

0000d180 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    d180:	b510      	push	{r4, lr}
    d182:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d184:	4a0b      	ldr	r2, [pc, #44]	; (d1b4 <system_gclk_gen_enable+0x34>)
    d186:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d188:	b25b      	sxtb	r3, r3
    d18a:	2b00      	cmp	r3, #0
    d18c:	dbfb      	blt.n	d186 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    d18e:	4b0a      	ldr	r3, [pc, #40]	; (d1b8 <system_gclk_gen_enable+0x38>)
    d190:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d192:	4b0a      	ldr	r3, [pc, #40]	; (d1bc <system_gclk_gen_enable+0x3c>)
    d194:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d196:	4a07      	ldr	r2, [pc, #28]	; (d1b4 <system_gclk_gen_enable+0x34>)
    d198:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d19a:	b25b      	sxtb	r3, r3
    d19c:	2b00      	cmp	r3, #0
    d19e:	dbfb      	blt.n	d198 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    d1a0:	4a04      	ldr	r2, [pc, #16]	; (d1b4 <system_gclk_gen_enable+0x34>)
    d1a2:	6851      	ldr	r1, [r2, #4]
    d1a4:	2380      	movs	r3, #128	; 0x80
    d1a6:	025b      	lsls	r3, r3, #9
    d1a8:	430b      	orrs	r3, r1
    d1aa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    d1ac:	4b04      	ldr	r3, [pc, #16]	; (d1c0 <system_gclk_gen_enable+0x40>)
    d1ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d1b0:	bd10      	pop	{r4, pc}
    d1b2:	46c0      	nop			; (mov r8, r8)
    d1b4:	40000c00 	.word	0x40000c00
    d1b8:	0000cc29 	.word	0x0000cc29
    d1bc:	40000c04 	.word	0x40000c04
    d1c0:	0000cc69 	.word	0x0000cc69

0000d1c4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    d1c4:	b570      	push	{r4, r5, r6, lr}
    d1c6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d1c8:	4a1a      	ldr	r2, [pc, #104]	; (d234 <system_gclk_gen_get_hz+0x70>)
    d1ca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d1cc:	b25b      	sxtb	r3, r3
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	dbfb      	blt.n	d1ca <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    d1d2:	4b19      	ldr	r3, [pc, #100]	; (d238 <system_gclk_gen_get_hz+0x74>)
    d1d4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d1d6:	4b19      	ldr	r3, [pc, #100]	; (d23c <system_gclk_gen_get_hz+0x78>)
    d1d8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d1da:	4a16      	ldr	r2, [pc, #88]	; (d234 <system_gclk_gen_get_hz+0x70>)
    d1dc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d1de:	b25b      	sxtb	r3, r3
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	dbfb      	blt.n	d1dc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    d1e4:	4e13      	ldr	r6, [pc, #76]	; (d234 <system_gclk_gen_get_hz+0x70>)
    d1e6:	6870      	ldr	r0, [r6, #4]
    d1e8:	04c0      	lsls	r0, r0, #19
    d1ea:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    d1ec:	4b14      	ldr	r3, [pc, #80]	; (d240 <system_gclk_gen_get_hz+0x7c>)
    d1ee:	4798      	blx	r3
    d1f0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d1f2:	4b12      	ldr	r3, [pc, #72]	; (d23c <system_gclk_gen_get_hz+0x78>)
    d1f4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    d1f6:	6876      	ldr	r6, [r6, #4]
    d1f8:	02f6      	lsls	r6, r6, #11
    d1fa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    d1fc:	4b11      	ldr	r3, [pc, #68]	; (d244 <system_gclk_gen_get_hz+0x80>)
    d1fe:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d200:	4a0c      	ldr	r2, [pc, #48]	; (d234 <system_gclk_gen_get_hz+0x70>)
    d202:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d204:	b25b      	sxtb	r3, r3
    d206:	2b00      	cmp	r3, #0
    d208:	dbfb      	blt.n	d202 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    d20a:	4b0a      	ldr	r3, [pc, #40]	; (d234 <system_gclk_gen_get_hz+0x70>)
    d20c:	689c      	ldr	r4, [r3, #8]
    d20e:	0224      	lsls	r4, r4, #8
    d210:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    d212:	4b0d      	ldr	r3, [pc, #52]	; (d248 <system_gclk_gen_get_hz+0x84>)
    d214:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    d216:	2e00      	cmp	r6, #0
    d218:	d107      	bne.n	d22a <system_gclk_gen_get_hz+0x66>
    d21a:	2c01      	cmp	r4, #1
    d21c:	d907      	bls.n	d22e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    d21e:	0021      	movs	r1, r4
    d220:	0028      	movs	r0, r5
    d222:	4b0a      	ldr	r3, [pc, #40]	; (d24c <system_gclk_gen_get_hz+0x88>)
    d224:	4798      	blx	r3
    d226:	0005      	movs	r5, r0
    d228:	e001      	b.n	d22e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    d22a:	3401      	adds	r4, #1
    d22c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    d22e:	0028      	movs	r0, r5
    d230:	bd70      	pop	{r4, r5, r6, pc}
    d232:	46c0      	nop			; (mov r8, r8)
    d234:	40000c00 	.word	0x40000c00
    d238:	0000cc29 	.word	0x0000cc29
    d23c:	40000c04 	.word	0x40000c04
    d240:	0000cc99 	.word	0x0000cc99
    d244:	40000c08 	.word	0x40000c08
    d248:	0000cc69 	.word	0x0000cc69
    d24c:	0000e4fd 	.word	0x0000e4fd

0000d250 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    d250:	b510      	push	{r4, lr}
    d252:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    d254:	4b06      	ldr	r3, [pc, #24]	; (d270 <system_gclk_chan_enable+0x20>)
    d256:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d258:	4b06      	ldr	r3, [pc, #24]	; (d274 <system_gclk_chan_enable+0x24>)
    d25a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    d25c:	4a06      	ldr	r2, [pc, #24]	; (d278 <system_gclk_chan_enable+0x28>)
    d25e:	8853      	ldrh	r3, [r2, #2]
    d260:	2180      	movs	r1, #128	; 0x80
    d262:	01c9      	lsls	r1, r1, #7
    d264:	430b      	orrs	r3, r1
    d266:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    d268:	4b04      	ldr	r3, [pc, #16]	; (d27c <system_gclk_chan_enable+0x2c>)
    d26a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d26c:	bd10      	pop	{r4, pc}
    d26e:	46c0      	nop			; (mov r8, r8)
    d270:	0000cc29 	.word	0x0000cc29
    d274:	40000c02 	.word	0x40000c02
    d278:	40000c00 	.word	0x40000c00
    d27c:	0000cc69 	.word	0x0000cc69

0000d280 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    d280:	b510      	push	{r4, lr}
    d282:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    d284:	4b0f      	ldr	r3, [pc, #60]	; (d2c4 <system_gclk_chan_disable+0x44>)
    d286:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d288:	4b0f      	ldr	r3, [pc, #60]	; (d2c8 <system_gclk_chan_disable+0x48>)
    d28a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    d28c:	4a0f      	ldr	r2, [pc, #60]	; (d2cc <system_gclk_chan_disable+0x4c>)
    d28e:	8853      	ldrh	r3, [r2, #2]
    d290:	051b      	lsls	r3, r3, #20
    d292:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    d294:	8853      	ldrh	r3, [r2, #2]
    d296:	490e      	ldr	r1, [pc, #56]	; (d2d0 <system_gclk_chan_disable+0x50>)
    d298:	400b      	ands	r3, r1
    d29a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    d29c:	8853      	ldrh	r3, [r2, #2]
    d29e:	490d      	ldr	r1, [pc, #52]	; (d2d4 <system_gclk_chan_disable+0x54>)
    d2a0:	400b      	ands	r3, r1
    d2a2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    d2a4:	0011      	movs	r1, r2
    d2a6:	2280      	movs	r2, #128	; 0x80
    d2a8:	01d2      	lsls	r2, r2, #7
    d2aa:	884b      	ldrh	r3, [r1, #2]
    d2ac:	4213      	tst	r3, r2
    d2ae:	d1fc      	bne.n	d2aa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    d2b0:	4906      	ldr	r1, [pc, #24]	; (d2cc <system_gclk_chan_disable+0x4c>)
    d2b2:	884a      	ldrh	r2, [r1, #2]
    d2b4:	0203      	lsls	r3, r0, #8
    d2b6:	4806      	ldr	r0, [pc, #24]	; (d2d0 <system_gclk_chan_disable+0x50>)
    d2b8:	4002      	ands	r2, r0
    d2ba:	4313      	orrs	r3, r2
    d2bc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    d2be:	4b06      	ldr	r3, [pc, #24]	; (d2d8 <system_gclk_chan_disable+0x58>)
    d2c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d2c2:	bd10      	pop	{r4, pc}
    d2c4:	0000cc29 	.word	0x0000cc29
    d2c8:	40000c02 	.word	0x40000c02
    d2cc:	40000c00 	.word	0x40000c00
    d2d0:	fffff0ff 	.word	0xfffff0ff
    d2d4:	ffffbfff 	.word	0xffffbfff
    d2d8:	0000cc69 	.word	0x0000cc69

0000d2dc <system_gclk_chan_set_config>:
{
    d2dc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    d2de:	780c      	ldrb	r4, [r1, #0]
    d2e0:	0224      	lsls	r4, r4, #8
    d2e2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    d2e4:	4b02      	ldr	r3, [pc, #8]	; (d2f0 <system_gclk_chan_set_config+0x14>)
    d2e6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    d2e8:	b2a4      	uxth	r4, r4
    d2ea:	4b02      	ldr	r3, [pc, #8]	; (d2f4 <system_gclk_chan_set_config+0x18>)
    d2ec:	805c      	strh	r4, [r3, #2]
}
    d2ee:	bd10      	pop	{r4, pc}
    d2f0:	0000d281 	.word	0x0000d281
    d2f4:	40000c00 	.word	0x40000c00

0000d2f8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    d2f8:	b510      	push	{r4, lr}
    d2fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    d2fc:	4b06      	ldr	r3, [pc, #24]	; (d318 <system_gclk_chan_get_hz+0x20>)
    d2fe:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d300:	4b06      	ldr	r3, [pc, #24]	; (d31c <system_gclk_chan_get_hz+0x24>)
    d302:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    d304:	4b06      	ldr	r3, [pc, #24]	; (d320 <system_gclk_chan_get_hz+0x28>)
    d306:	885c      	ldrh	r4, [r3, #2]
    d308:	0524      	lsls	r4, r4, #20
    d30a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    d30c:	4b05      	ldr	r3, [pc, #20]	; (d324 <system_gclk_chan_get_hz+0x2c>)
    d30e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    d310:	0020      	movs	r0, r4
    d312:	4b05      	ldr	r3, [pc, #20]	; (d328 <system_gclk_chan_get_hz+0x30>)
    d314:	4798      	blx	r3
}
    d316:	bd10      	pop	{r4, pc}
    d318:	0000cc29 	.word	0x0000cc29
    d31c:	40000c02 	.word	0x40000c02
    d320:	40000c00 	.word	0x40000c00
    d324:	0000cc69 	.word	0x0000cc69
    d328:	0000d1c5 	.word	0x0000d1c5

0000d32c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    d32c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    d32e:	78d3      	ldrb	r3, [r2, #3]
    d330:	2b00      	cmp	r3, #0
    d332:	d135      	bne.n	d3a0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    d334:	7813      	ldrb	r3, [r2, #0]
    d336:	2b80      	cmp	r3, #128	; 0x80
    d338:	d029      	beq.n	d38e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    d33a:	061b      	lsls	r3, r3, #24
    d33c:	2480      	movs	r4, #128	; 0x80
    d33e:	0264      	lsls	r4, r4, #9
    d340:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    d342:	7854      	ldrb	r4, [r2, #1]
    d344:	2502      	movs	r5, #2
    d346:	43ac      	bics	r4, r5
    d348:	d106      	bne.n	d358 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    d34a:	7894      	ldrb	r4, [r2, #2]
    d34c:	2c00      	cmp	r4, #0
    d34e:	d120      	bne.n	d392 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    d350:	2480      	movs	r4, #128	; 0x80
    d352:	02a4      	lsls	r4, r4, #10
    d354:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    d356:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d358:	7854      	ldrb	r4, [r2, #1]
    d35a:	3c01      	subs	r4, #1
    d35c:	2c01      	cmp	r4, #1
    d35e:	d91c      	bls.n	d39a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    d360:	040d      	lsls	r5, r1, #16
    d362:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    d364:	24a0      	movs	r4, #160	; 0xa0
    d366:	05e4      	lsls	r4, r4, #23
    d368:	432c      	orrs	r4, r5
    d36a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d36c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    d36e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    d370:	24d0      	movs	r4, #208	; 0xd0
    d372:	0624      	lsls	r4, r4, #24
    d374:	432c      	orrs	r4, r5
    d376:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d378:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    d37a:	78d4      	ldrb	r4, [r2, #3]
    d37c:	2c00      	cmp	r4, #0
    d37e:	d122      	bne.n	d3c6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    d380:	035b      	lsls	r3, r3, #13
    d382:	d51c      	bpl.n	d3be <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    d384:	7893      	ldrb	r3, [r2, #2]
    d386:	2b01      	cmp	r3, #1
    d388:	d01e      	beq.n	d3c8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    d38a:	6141      	str	r1, [r0, #20]
    d38c:	e017      	b.n	d3be <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    d38e:	2300      	movs	r3, #0
    d390:	e7d7      	b.n	d342 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    d392:	24c0      	movs	r4, #192	; 0xc0
    d394:	02e4      	lsls	r4, r4, #11
    d396:	4323      	orrs	r3, r4
    d398:	e7dd      	b.n	d356 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    d39a:	4c0d      	ldr	r4, [pc, #52]	; (d3d0 <_system_pinmux_config+0xa4>)
    d39c:	4023      	ands	r3, r4
    d39e:	e7df      	b.n	d360 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    d3a0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    d3a2:	040c      	lsls	r4, r1, #16
    d3a4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    d3a6:	23a0      	movs	r3, #160	; 0xa0
    d3a8:	05db      	lsls	r3, r3, #23
    d3aa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d3ac:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    d3ae:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    d3b0:	23d0      	movs	r3, #208	; 0xd0
    d3b2:	061b      	lsls	r3, r3, #24
    d3b4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d3b6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    d3b8:	78d3      	ldrb	r3, [r2, #3]
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d103      	bne.n	d3c6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d3be:	7853      	ldrb	r3, [r2, #1]
    d3c0:	3b01      	subs	r3, #1
    d3c2:	2b01      	cmp	r3, #1
    d3c4:	d902      	bls.n	d3cc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    d3c6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    d3c8:	6181      	str	r1, [r0, #24]
    d3ca:	e7f8      	b.n	d3be <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    d3cc:	6081      	str	r1, [r0, #8]
}
    d3ce:	e7fa      	b.n	d3c6 <_system_pinmux_config+0x9a>
    d3d0:	fffbffff 	.word	0xfffbffff

0000d3d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    d3d4:	b510      	push	{r4, lr}
    d3d6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    d3d8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    d3da:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d3dc:	2900      	cmp	r1, #0
    d3de:	d104      	bne.n	d3ea <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    d3e0:	0943      	lsrs	r3, r0, #5
    d3e2:	01db      	lsls	r3, r3, #7
    d3e4:	4905      	ldr	r1, [pc, #20]	; (d3fc <system_pinmux_pin_set_config+0x28>)
    d3e6:	468c      	mov	ip, r1
    d3e8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    d3ea:	241f      	movs	r4, #31
    d3ec:	4020      	ands	r0, r4
    d3ee:	2101      	movs	r1, #1
    d3f0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    d3f2:	0018      	movs	r0, r3
    d3f4:	4b02      	ldr	r3, [pc, #8]	; (d400 <system_pinmux_pin_set_config+0x2c>)
    d3f6:	4798      	blx	r3
}
    d3f8:	bd10      	pop	{r4, pc}
    d3fa:	46c0      	nop			; (mov r8, r8)
    d3fc:	41004400 	.word	0x41004400
    d400:	0000d32d 	.word	0x0000d32d

0000d404 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    d404:	4770      	bx	lr
	...

0000d408 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    d408:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    d40a:	4b05      	ldr	r3, [pc, #20]	; (d420 <system_init+0x18>)
    d40c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    d40e:	4b05      	ldr	r3, [pc, #20]	; (d424 <system_init+0x1c>)
    d410:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    d412:	4b05      	ldr	r3, [pc, #20]	; (d428 <system_init+0x20>)
    d414:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    d416:	4b05      	ldr	r3, [pc, #20]	; (d42c <system_init+0x24>)
    d418:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    d41a:	4b05      	ldr	r3, [pc, #20]	; (d430 <system_init+0x28>)
    d41c:	4798      	blx	r3
}
    d41e:	bd10      	pop	{r4, pc}
    d420:	0000cf45 	.word	0x0000cf45
    d424:	0000cc25 	.word	0x0000cc25
    d428:	0000d405 	.word	0x0000d405
    d42c:	0000621d 	.word	0x0000621d
    d430:	0000d405 	.word	0x0000d405

0000d434 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    d434:	e7fe      	b.n	d434 <Dummy_Handler>
	...

0000d438 <Reset_Handler>:
{
    d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    d43a:	4a2a      	ldr	r2, [pc, #168]	; (d4e4 <Reset_Handler+0xac>)
    d43c:	4b2a      	ldr	r3, [pc, #168]	; (d4e8 <Reset_Handler+0xb0>)
    d43e:	429a      	cmp	r2, r3
    d440:	d011      	beq.n	d466 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    d442:	001a      	movs	r2, r3
    d444:	4b29      	ldr	r3, [pc, #164]	; (d4ec <Reset_Handler+0xb4>)
    d446:	429a      	cmp	r2, r3
    d448:	d20d      	bcs.n	d466 <Reset_Handler+0x2e>
    d44a:	4a29      	ldr	r2, [pc, #164]	; (d4f0 <Reset_Handler+0xb8>)
    d44c:	3303      	adds	r3, #3
    d44e:	1a9b      	subs	r3, r3, r2
    d450:	089b      	lsrs	r3, r3, #2
    d452:	3301      	adds	r3, #1
    d454:	009b      	lsls	r3, r3, #2
    d456:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    d458:	4823      	ldr	r0, [pc, #140]	; (d4e8 <Reset_Handler+0xb0>)
    d45a:	4922      	ldr	r1, [pc, #136]	; (d4e4 <Reset_Handler+0xac>)
    d45c:	588c      	ldr	r4, [r1, r2]
    d45e:	5084      	str	r4, [r0, r2]
    d460:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    d462:	429a      	cmp	r2, r3
    d464:	d1fa      	bne.n	d45c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    d466:	4a23      	ldr	r2, [pc, #140]	; (d4f4 <Reset_Handler+0xbc>)
    d468:	4b23      	ldr	r3, [pc, #140]	; (d4f8 <Reset_Handler+0xc0>)
    d46a:	429a      	cmp	r2, r3
    d46c:	d20a      	bcs.n	d484 <Reset_Handler+0x4c>
    d46e:	43d3      	mvns	r3, r2
    d470:	4921      	ldr	r1, [pc, #132]	; (d4f8 <Reset_Handler+0xc0>)
    d472:	185b      	adds	r3, r3, r1
    d474:	2103      	movs	r1, #3
    d476:	438b      	bics	r3, r1
    d478:	3304      	adds	r3, #4
    d47a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    d47c:	2100      	movs	r1, #0
    d47e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    d480:	4293      	cmp	r3, r2
    d482:	d1fc      	bne.n	d47e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    d484:	4a1d      	ldr	r2, [pc, #116]	; (d4fc <Reset_Handler+0xc4>)
    d486:	21ff      	movs	r1, #255	; 0xff
    d488:	4b1d      	ldr	r3, [pc, #116]	; (d500 <Reset_Handler+0xc8>)
    d48a:	438b      	bics	r3, r1
    d48c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    d48e:	39fd      	subs	r1, #253	; 0xfd
    d490:	2390      	movs	r3, #144	; 0x90
    d492:	005b      	lsls	r3, r3, #1
    d494:	4a1b      	ldr	r2, [pc, #108]	; (d504 <Reset_Handler+0xcc>)
    d496:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    d498:	4a1b      	ldr	r2, [pc, #108]	; (d508 <Reset_Handler+0xd0>)
    d49a:	78d3      	ldrb	r3, [r2, #3]
    d49c:	2503      	movs	r5, #3
    d49e:	43ab      	bics	r3, r5
    d4a0:	2402      	movs	r4, #2
    d4a2:	4323      	orrs	r3, r4
    d4a4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    d4a6:	78d3      	ldrb	r3, [r2, #3]
    d4a8:	270c      	movs	r7, #12
    d4aa:	43bb      	bics	r3, r7
    d4ac:	2608      	movs	r6, #8
    d4ae:	4333      	orrs	r3, r6
    d4b0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    d4b2:	4b16      	ldr	r3, [pc, #88]	; (d50c <Reset_Handler+0xd4>)
    d4b4:	7b98      	ldrb	r0, [r3, #14]
    d4b6:	2230      	movs	r2, #48	; 0x30
    d4b8:	4390      	bics	r0, r2
    d4ba:	2220      	movs	r2, #32
    d4bc:	4310      	orrs	r0, r2
    d4be:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    d4c0:	7b99      	ldrb	r1, [r3, #14]
    d4c2:	43b9      	bics	r1, r7
    d4c4:	4331      	orrs	r1, r6
    d4c6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    d4c8:	7b9a      	ldrb	r2, [r3, #14]
    d4ca:	43aa      	bics	r2, r5
    d4cc:	4322      	orrs	r2, r4
    d4ce:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    d4d0:	4a0f      	ldr	r2, [pc, #60]	; (d510 <Reset_Handler+0xd8>)
    d4d2:	6853      	ldr	r3, [r2, #4]
    d4d4:	2180      	movs	r1, #128	; 0x80
    d4d6:	430b      	orrs	r3, r1
    d4d8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    d4da:	4b0e      	ldr	r3, [pc, #56]	; (d514 <Reset_Handler+0xdc>)
    d4dc:	4798      	blx	r3
        main();
    d4de:	4b0e      	ldr	r3, [pc, #56]	; (d518 <Reset_Handler+0xe0>)
    d4e0:	4798      	blx	r3
    d4e2:	e7fe      	b.n	d4e2 <Reset_Handler+0xaa>
    d4e4:	00013d58 	.word	0x00013d58
    d4e8:	20000000 	.word	0x20000000
    d4ec:	200001dc 	.word	0x200001dc
    d4f0:	20000004 	.word	0x20000004
    d4f4:	200001dc 	.word	0x200001dc
    d4f8:	20000a24 	.word	0x20000a24
    d4fc:	e000ed00 	.word	0xe000ed00
    d500:	00004000 	.word	0x00004000
    d504:	41007000 	.word	0x41007000
    d508:	41005000 	.word	0x41005000
    d50c:	41004800 	.word	0x41004800
    d510:	41004000 	.word	0x41004000
    d514:	00010111 	.word	0x00010111
    d518:	0000d6ad 	.word	0x0000d6ad

0000d51c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    d51c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    d51e:	4a06      	ldr	r2, [pc, #24]	; (d538 <_sbrk+0x1c>)
    d520:	6812      	ldr	r2, [r2, #0]
    d522:	2a00      	cmp	r2, #0
    d524:	d004      	beq.n	d530 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    d526:	4a04      	ldr	r2, [pc, #16]	; (d538 <_sbrk+0x1c>)
    d528:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    d52a:	18c3      	adds	r3, r0, r3
    d52c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    d52e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    d530:	4902      	ldr	r1, [pc, #8]	; (d53c <_sbrk+0x20>)
    d532:	4a01      	ldr	r2, [pc, #4]	; (d538 <_sbrk+0x1c>)
    d534:	6011      	str	r1, [r2, #0]
    d536:	e7f6      	b.n	d526 <_sbrk+0xa>
    d538:	20000298 	.word	0x20000298
    d53c:	20002a28 	.word	0x20002a28

0000d540 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    d540:	2001      	movs	r0, #1
    d542:	4240      	negs	r0, r0
    d544:	4770      	bx	lr

0000d546 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    d546:	2380      	movs	r3, #128	; 0x80
    d548:	019b      	lsls	r3, r3, #6
    d54a:	604b      	str	r3, [r1, #4]

	return 0;
}
    d54c:	2000      	movs	r0, #0
    d54e:	4770      	bx	lr

0000d550 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    d550:	2001      	movs	r0, #1
    d552:	4770      	bx	lr

0000d554 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    d554:	2000      	movs	r0, #0
    d556:	4770      	bx	lr

0000d558 <firmware_request_download_callback>:
	configure_port_pins_set(relay);
	port_pin_set_output_level(relay, on_or_off);
}

void firmware_request_download_callback(uint32_t options)
{
    d558:	b500      	push	{lr}
    d55a:	b087      	sub	sp, #28
	printf("firmware download requested\r\n");
    d55c:	4814      	ldr	r0, [pc, #80]	; (d5b0 <firmware_request_download_callback+0x58>)
    d55e:	4b15      	ldr	r3, [pc, #84]	; (d5b4 <firmware_request_download_callback+0x5c>)
    d560:	4798      	blx	r3
	deconfigure_mqtt();
    d562:	4b15      	ldr	r3, [pc, #84]	; (d5b8 <firmware_request_download_callback+0x60>)
    d564:	4798      	blx	r3

	wifi_config new_wifi_configuration;
	get_default_wifi_config(&new_wifi_configuration);
    d566:	a801      	add	r0, sp, #4
    d568:	4b14      	ldr	r3, [pc, #80]	; (d5bc <firmware_request_download_callback+0x64>)
    d56a:	4798      	blx	r3
	new_wifi_configuration.firmware_header_http_address = "https://www.seas.upenn.edu/~warcher/ese516/metadata-cli.bin";
    d56c:	4b14      	ldr	r3, [pc, #80]	; (d5c0 <firmware_request_download_callback+0x68>)
    d56e:	9304      	str	r3, [sp, #16]
	new_wifi_configuration.firmware_http_address = "https://www.seas.upenn.edu/~warcher/ese516/cli.bin";
    d570:	4b14      	ldr	r3, [pc, #80]	; (d5c4 <firmware_request_download_callback+0x6c>)
    d572:	9305      	str	r3, [sp, #20]
	configure_wifi_module(&new_wifi_configuration);
    d574:	a801      	add	r0, sp, #4
    d576:	4b14      	ldr	r3, [pc, #80]	; (d5c8 <firmware_request_download_callback+0x70>)
    d578:	4798      	blx	r3
	configure_flash();
    d57a:	4b14      	ldr	r3, [pc, #80]	; (d5cc <firmware_request_download_callback+0x74>)
    d57c:	4798      	blx	r3
	configure_nvm();
    d57e:	4b14      	ldr	r3, [pc, #80]	; (d5d0 <firmware_request_download_callback+0x78>)
    d580:	4798      	blx	r3
	if (check_for_update()) {
    d582:	4b14      	ldr	r3, [pc, #80]	; (d5d4 <firmware_request_download_callback+0x7c>)
    d584:	4798      	blx	r3
    d586:	2800      	cmp	r0, #0
    d588:	d00b      	beq.n	d5a2 <firmware_request_download_callback+0x4a>
		if (download_firmware()) {
    d58a:	4b13      	ldr	r3, [pc, #76]	; (d5d8 <firmware_request_download_callback+0x80>)
    d58c:	4798      	blx	r3
    d58e:	2800      	cmp	r0, #0
    d590:	d003      	beq.n	d59a <firmware_request_download_callback+0x42>
			printf("firmware successfully downloaded!\r\n");
    d592:	4812      	ldr	r0, [pc, #72]	; (d5dc <firmware_request_download_callback+0x84>)
    d594:	4b07      	ldr	r3, [pc, #28]	; (d5b4 <firmware_request_download_callback+0x5c>)
    d596:	4798      	blx	r3
    d598:	e006      	b.n	d5a8 <firmware_request_download_callback+0x50>
			} else {
			printf("firmware unsuccessful. Check log for more details.\r\n");
    d59a:	4811      	ldr	r0, [pc, #68]	; (d5e0 <firmware_request_download_callback+0x88>)
    d59c:	4b05      	ldr	r3, [pc, #20]	; (d5b4 <firmware_request_download_callback+0x5c>)
    d59e:	4798      	blx	r3
    d5a0:	e002      	b.n	d5a8 <firmware_request_download_callback+0x50>
		}
		} else {
		printf("No update found.\r\n");
    d5a2:	4810      	ldr	r0, [pc, #64]	; (d5e4 <firmware_request_download_callback+0x8c>)
    d5a4:	4b03      	ldr	r3, [pc, #12]	; (d5b4 <firmware_request_download_callback+0x5c>)
    d5a6:	4798      	blx	r3
	}
	deconfigure_wifi_module();
    d5a8:	4b0f      	ldr	r3, [pc, #60]	; (d5e8 <firmware_request_download_callback+0x90>)
    d5aa:	4798      	blx	r3
	
}
    d5ac:	b007      	add	sp, #28
    d5ae:	bd00      	pop	{pc}
    d5b0:	00013908 	.word	0x00013908
    d5b4:	00010435 	.word	0x00010435
    d5b8:	00004739 	.word	0x00004739
    d5bc:	00005385 	.word	0x00005385
    d5c0:	00013928 	.word	0x00013928
    d5c4:	00013964 	.word	0x00013964
    d5c8:	000053ad 	.word	0x000053ad
    d5cc:	0000424d 	.word	0x0000424d
    d5d0:	00004335 	.word	0x00004335
    d5d4:	000054ed 	.word	0x000054ed
    d5d8:	00005541 	.word	0x00005541
    d5dc:	00013998 	.word	0x00013998
    d5e0:	000139bc 	.word	0x000139bc
    d5e4:	000139f0 	.word	0x000139f0
    d5e8:	000054a9 	.word	0x000054a9

0000d5ec <configure_port_pins_set>:
{
    d5ec:	b500      	push	{lr}
    d5ee:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    d5f0:	a901      	add	r1, sp, #4
    d5f2:	2301      	movs	r3, #1
    d5f4:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    d5f6:	2200      	movs	r2, #0
    d5f8:	708a      	strb	r2, [r1, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    d5fa:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(pin, &config_port_pin);
    d5fc:	b2c0      	uxtb	r0, r0
    d5fe:	4b02      	ldr	r3, [pc, #8]	; (d608 <configure_port_pins_set+0x1c>)
    d600:	4798      	blx	r3
}
    d602:	b003      	add	sp, #12
    d604:	bd00      	pop	{pc}
    d606:	46c0      	nop			; (mov r8, r8)
    d608:	0000cc01 	.word	0x0000cc01

0000d60c <led_request_callback>:
void led_request_callback(uint8_t options) {
    d60c:	b510      	push	{r4, lr}
		configure_port_pins_set(PIN_PA03);
    d60e:	2003      	movs	r0, #3
    d610:	4b02      	ldr	r3, [pc, #8]	; (d61c <led_request_callback+0x10>)
    d612:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    d614:	2208      	movs	r2, #8
    d616:	4b02      	ldr	r3, [pc, #8]	; (d620 <led_request_callback+0x14>)
    d618:	615a      	str	r2, [r3, #20]
}
    d61a:	bd10      	pop	{r4, pc}
    d61c:	0000d5ed 	.word	0x0000d5ed
    d620:	41004400 	.word	0x41004400

0000d624 <pump_request_callback>:
{
    d624:	b510      	push	{r4, lr}
    d626:	0004      	movs	r4, r0
	configure_port_pins_set(PIN_PB23);
    d628:	2037      	movs	r0, #55	; 0x37
    d62a:	4b0b      	ldr	r3, [pc, #44]	; (d658 <pump_request_callback+0x34>)
    d62c:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    d62e:	2280      	movs	r2, #128	; 0x80
    d630:	0412      	lsls	r2, r2, #16
    d632:	4b0a      	ldr	r3, [pc, #40]	; (d65c <pump_request_callback+0x38>)
    d634:	619a      	str	r2, [r3, #24]
	delay_ms(options);
    d636:	2c00      	cmp	r4, #0
    d638:	d10a      	bne.n	d650 <pump_request_callback+0x2c>
    d63a:	2001      	movs	r0, #1
    d63c:	4b08      	ldr	r3, [pc, #32]	; (d660 <pump_request_callback+0x3c>)
    d63e:	4798      	blx	r3
	configure_port_pins_set(PIN_PB23);
    d640:	2037      	movs	r0, #55	; 0x37
    d642:	4b05      	ldr	r3, [pc, #20]	; (d658 <pump_request_callback+0x34>)
    d644:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    d646:	2280      	movs	r2, #128	; 0x80
    d648:	0412      	lsls	r2, r2, #16
    d64a:	4b04      	ldr	r3, [pc, #16]	; (d65c <pump_request_callback+0x38>)
    d64c:	615a      	str	r2, [r3, #20]
}
    d64e:	bd10      	pop	{r4, pc}
	delay_ms(options);
    d650:	0020      	movs	r0, r4
    d652:	4b04      	ldr	r3, [pc, #16]	; (d664 <pump_request_callback+0x40>)
    d654:	4798      	blx	r3
    d656:	e7f3      	b.n	d640 <pump_request_callback+0x1c>
    d658:	0000d5ed 	.word	0x0000d5ed
    d65c:	41004480 	.word	0x41004480
    d660:	000095b5 	.word	0x000095b5
    d664:	000095e1 	.word	0x000095e1

0000d668 <relay_request_callback>:
{
    d668:	b570      	push	{r4, r5, r6, lr}
	uint8_t which_relay = options & 0b10;
    d66a:	b2c4      	uxtb	r4, r0
	uint8_t on_or_off = options & 1;
    d66c:	2501      	movs	r5, #1
    d66e:	4025      	ands	r5, r4
	uint32_t relay = (which_relay) ? PIN_PB03 : PIN_PB02;
    d670:	07a4      	lsls	r4, r4, #30
    d672:	0fe4      	lsrs	r4, r4, #31
    d674:	3422      	adds	r4, #34	; 0x22
	configure_port_pins_set(relay);
    d676:	0020      	movs	r0, r4
    d678:	4b0a      	ldr	r3, [pc, #40]	; (d6a4 <relay_request_callback+0x3c>)
    d67a:	4798      	blx	r3
	port_pin_set_output_level(relay, on_or_off);
    d67c:	b2e4      	uxtb	r4, r4
    d67e:	0963      	lsrs	r3, r4, #5
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d680:	221f      	movs	r2, #31
    d682:	4014      	ands	r4, r2
    d684:	3a1e      	subs	r2, #30
    d686:	40a2      	lsls	r2, r4
	if (level) {
    d688:	2d00      	cmp	r5, #0
    d68a:	d105      	bne.n	d698 <relay_request_callback+0x30>
		port_base->OUTCLR.reg = pin_mask;
    d68c:	01db      	lsls	r3, r3, #7
    d68e:	4906      	ldr	r1, [pc, #24]	; (d6a8 <relay_request_callback+0x40>)
    d690:	468c      	mov	ip, r1
    d692:	4463      	add	r3, ip
    d694:	615a      	str	r2, [r3, #20]
}
    d696:	bd70      	pop	{r4, r5, r6, pc}
		port_base->OUTSET.reg = pin_mask;
    d698:	01db      	lsls	r3, r3, #7
    d69a:	4903      	ldr	r1, [pc, #12]	; (d6a8 <relay_request_callback+0x40>)
    d69c:	468c      	mov	ip, r1
    d69e:	4463      	add	r3, ip
    d6a0:	619a      	str	r2, [r3, #24]
    d6a2:	e7f8      	b.n	d696 <relay_request_callback+0x2e>
    d6a4:	0000d5ed 	.word	0x0000d5ed
    d6a8:	41004400 	.word	0x41004400

0000d6ac <main>:
	publish_to_topic(HUMIDITY_TOPIC, mqtt_array, sizeof(mqtt_array));
	publish_to_topic(HEARTBEAT_TOPIC, "beat", sizeof("beat"));
}

int main (void)
{
    d6ac:	b530      	push	{r4, r5, lr}
    d6ae:	b089      	sub	sp, #36	; 0x24
	system_init();
    d6b0:	4b3a      	ldr	r3, [pc, #232]	; (d79c <main+0xf0>)
    d6b2:	4798      	blx	r3
	cpu_irq_enable();
    d6b4:	2201      	movs	r2, #1
    d6b6:	4b3a      	ldr	r3, [pc, #232]	; (d7a0 <main+0xf4>)
    d6b8:	701a      	strb	r2, [r3, #0]
    d6ba:	f3bf 8f5f 	dmb	sy
    d6be:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_init();
    d6c0:	4b38      	ldr	r3, [pc, #224]	; (d7a4 <main+0xf8>)
    d6c2:	4798      	blx	r3
	configure_usart();
    d6c4:	4b38      	ldr	r3, [pc, #224]	; (d7a8 <main+0xfc>)
    d6c6:	4798      	blx	r3
	
	configure_port_pins_set(PIN_PB23);
    d6c8:	2037      	movs	r0, #55	; 0x37
    d6ca:	4b38      	ldr	r3, [pc, #224]	; (d7ac <main+0x100>)
    d6cc:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    d6ce:	2280      	movs	r2, #128	; 0x80
    d6d0:	0412      	lsls	r2, r2, #16
    d6d2:	4b37      	ldr	r3, [pc, #220]	; (d7b0 <main+0x104>)
    d6d4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB23, false);
	
	printf("--- starting Evergreen V%d ---- \r\n", FIRMWARE_VERSION);
    d6d6:	2100      	movs	r1, #0
    d6d8:	4836      	ldr	r0, [pc, #216]	; (d7b4 <main+0x108>)
    d6da:	4b37      	ldr	r3, [pc, #220]	; (d7b8 <main+0x10c>)
    d6dc:	4798      	blx	r3
	
	mqtt_inst_config new_mqtt;
	get_mqtt_config_defaults(&new_mqtt);
    d6de:	a803      	add	r0, sp, #12
    d6e0:	4b36      	ldr	r3, [pc, #216]	; (d7bc <main+0x110>)
    d6e2:	4798      	blx	r3
	
	int mqtt_result = mqtt_initialize(&new_mqtt);
    d6e4:	a803      	add	r0, sp, #12
    d6e6:	4b36      	ldr	r3, [pc, #216]	; (d7c0 <main+0x114>)
    d6e8:	4798      	blx	r3
	
	if (WIFI_SUCCESS != mqtt_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
    d6ea:	2800      	cmp	r0, #0
    d6ec:	d151      	bne.n	d792 <main+0xe6>

	printf("Board initialized.\r\n");
    d6ee:	4835      	ldr	r0, [pc, #212]	; (d7c4 <main+0x118>)
    d6f0:	4b35      	ldr	r3, [pc, #212]	; (d7c8 <main+0x11c>)
    d6f2:	4798      	blx	r3
	uint32_t mqtt_counter = 0;

	/* Connect to router. */
	m2m_wifi_connect(new_mqtt.ssid, strlen(new_mqtt.ssid), new_mqtt.auth, new_mqtt.password, M2M_WIFI_CH_ALL);
    d6f4:	ad03      	add	r5, sp, #12
    d6f6:	9c03      	ldr	r4, [sp, #12]
    d6f8:	0020      	movs	r0, r4
    d6fa:	4b34      	ldr	r3, [pc, #208]	; (d7cc <main+0x120>)
    d6fc:	4798      	blx	r3
    d6fe:	68ab      	ldr	r3, [r5, #8]
    d700:	792a      	ldrb	r2, [r5, #4]
    d702:	b2c1      	uxtb	r1, r0
    d704:	20ff      	movs	r0, #255	; 0xff
    d706:	9000      	str	r0, [sp, #0]
    d708:	0020      	movs	r0, r4
    d70a:	4c31      	ldr	r4, [pc, #196]	; (d7d0 <main+0x124>)
    d70c:	47a0      	blx	r4

	while (!(wifi_connected)) {
    d70e:	4b31      	ldr	r3, [pc, #196]	; (d7d4 <main+0x128>)
    d710:	681b      	ldr	r3, [r3, #0]
    d712:	2b00      	cmp	r3, #0
    d714:	d106      	bne.n	d724 <main+0x78>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    d716:	4d30      	ldr	r5, [pc, #192]	; (d7d8 <main+0x12c>)
	while (!(wifi_connected)) {
    d718:	4c2e      	ldr	r4, [pc, #184]	; (d7d4 <main+0x128>)
		m2m_wifi_handle_events(NULL);
    d71a:	2000      	movs	r0, #0
    d71c:	47a8      	blx	r5
	while (!(wifi_connected)) {
    d71e:	6823      	ldr	r3, [r4, #0]
    d720:	2b00      	cmp	r3, #0
    d722:	d0fa      	beq.n	d71a <main+0x6e>
		/* Checks the timer timeout. */
		//sw_timer_task(&swt_module_inst);
	}

	while (!(mqtt_connected)) {
    d724:	4b2d      	ldr	r3, [pc, #180]	; (d7dc <main+0x130>)
    d726:	681b      	ldr	r3, [r3, #0]
    d728:	2b00      	cmp	r3, #0
    d72a:	d106      	bne.n	d73a <main+0x8e>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    d72c:	4d2a      	ldr	r5, [pc, #168]	; (d7d8 <main+0x12c>)
	while (!(mqtt_connected)) {
    d72e:	4c2b      	ldr	r4, [pc, #172]	; (d7dc <main+0x130>)
		m2m_wifi_handle_events(NULL);
    d730:	2000      	movs	r0, #0
    d732:	47a8      	blx	r5
	while (!(mqtt_connected)) {
    d734:	6823      	ldr	r3, [r4, #0]
    d736:	2b00      	cmp	r3, #0
    d738:	d0fa      	beq.n	d730 <main+0x84>
		/* Checks the timer timeout. */
		//sw_timer_task(&swt_module_inst);
	}
	
	configure_i2c_hdc();
    d73a:	4b29      	ldr	r3, [pc, #164]	; (d7e0 <main+0x134>)
    d73c:	4798      	blx	r3
	configure_i2c_tsl2561(ADDR_FLOAT);
    d73e:	2039      	movs	r0, #57	; 0x39
    d740:	4b28      	ldr	r3, [pc, #160]	; (d7e4 <main+0x138>)
    d742:	4798      	blx	r3
	printf("tsl manufacturer id: 0x%02x\r\n", get_tsl2561_device_id());
    d744:	4b28      	ldr	r3, [pc, #160]	; (d7e8 <main+0x13c>)
    d746:	4798      	blx	r3
    d748:	0001      	movs	r1, r0
    d74a:	4828      	ldr	r0, [pc, #160]	; (d7ec <main+0x140>)
    d74c:	4c1a      	ldr	r4, [pc, #104]	; (d7b8 <main+0x10c>)
    d74e:	47a0      	blx	r4
	set_resolution(FOURTEEN_BIT_RESOLUTION, FOURTEEN_BIT_RESOLUTION);
    d750:	2102      	movs	r1, #2
    d752:	2002      	movs	r0, #2
    d754:	4b26      	ldr	r3, [pc, #152]	; (d7f0 <main+0x144>)
    d756:	4798      	blx	r3
	printf("Running as MQTT User: %s\r\n", MQTT_USER);
    d758:	4926      	ldr	r1, [pc, #152]	; (d7f4 <main+0x148>)
    d75a:	4827      	ldr	r0, [pc, #156]	; (d7f8 <main+0x14c>)
    d75c:	47a0      	blx	r4
	register_request_topic(LED_TOPIC, '#', &led_request_callback);
    d75e:	4a27      	ldr	r2, [pc, #156]	; (d7fc <main+0x150>)
    d760:	2123      	movs	r1, #35	; 0x23
    d762:	4827      	ldr	r0, [pc, #156]	; (d800 <main+0x154>)
    d764:	4c27      	ldr	r4, [pc, #156]	; (d804 <main+0x158>)
    d766:	47a0      	blx	r4
	register_request_topic(RELAY1_TOPIC, '#', &relay_request_callback);
    d768:	4d27      	ldr	r5, [pc, #156]	; (d808 <main+0x15c>)
    d76a:	002a      	movs	r2, r5
    d76c:	2123      	movs	r1, #35	; 0x23
    d76e:	4827      	ldr	r0, [pc, #156]	; (d80c <main+0x160>)
    d770:	47a0      	blx	r4
	register_request_topic(RELAY2_TOPIC, '#', &relay_request_callback);
    d772:	002a      	movs	r2, r5
    d774:	2123      	movs	r1, #35	; 0x23
    d776:	4826      	ldr	r0, [pc, #152]	; (d810 <main+0x164>)
    d778:	47a0      	blx	r4
	register_request_topic(UPGRADE_TOPIC, '#', &firmware_request_download_callback);
    d77a:	4a26      	ldr	r2, [pc, #152]	; (d814 <main+0x168>)
    d77c:	2123      	movs	r1, #35	; 0x23
    d77e:	4826      	ldr	r0, [pc, #152]	; (d818 <main+0x16c>)
    d780:	47a0      	blx	r4
	register_request_topic(PUMP_TOPIC, '#', &pump_request_callback);
    d782:	4a26      	ldr	r2, [pc, #152]	; (d81c <main+0x170>)
    d784:	2123      	movs	r1, #35	; 0x23
    d786:	4826      	ldr	r0, [pc, #152]	; (d820 <main+0x174>)
    d788:	47a0      	blx	r4
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    d78a:	4c13      	ldr	r4, [pc, #76]	; (d7d8 <main+0x12c>)
    d78c:	2000      	movs	r0, #0
    d78e:	47a0      	blx	r4
    d790:	e7fc      	b.n	d78c <main+0xe0>
	if (WIFI_SUCCESS != mqtt_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
    d792:	4824      	ldr	r0, [pc, #144]	; (d824 <main+0x178>)
    d794:	4b0c      	ldr	r3, [pc, #48]	; (d7c8 <main+0x11c>)
    d796:	4798      	blx	r3
    d798:	e7a9      	b.n	d6ee <main+0x42>
    d79a:	46c0      	nop			; (mov r8, r8)
    d79c:	0000d409 	.word	0x0000d409
    d7a0:	2000000a 	.word	0x2000000a
    d7a4:	00009575 	.word	0x00009575
    d7a8:	00004159 	.word	0x00004159
    d7ac:	0000d5ed 	.word	0x0000d5ed
    d7b0:	41004480 	.word	0x41004480
    d7b4:	00013a04 	.word	0x00013a04
    d7b8:	00010319 	.word	0x00010319
    d7bc:	00004911 	.word	0x00004911
    d7c0:	0000477d 	.word	0x0000477d
    d7c4:	00013a4c 	.word	0x00013a4c
    d7c8:	00010435 	.word	0x00010435
    d7cc:	0001067b 	.word	0x0001067b
    d7d0:	0000a9dd 	.word	0x0000a9dd
    d7d4:	20000200 	.word	0x20000200
    d7d8:	0000a741 	.word	0x0000a741
    d7dc:	200001f8 	.word	0x200001f8
    d7e0:	00004365 	.word	0x00004365
    d7e4:	0000559d 	.word	0x0000559d
    d7e8:	000056d5 	.word	0x000056d5
    d7ec:	00013a60 	.word	0x00013a60
    d7f0:	0000440d 	.word	0x0000440d
    d7f4:	00013aa4 	.word	0x00013aa4
    d7f8:	00013a80 	.word	0x00013a80
    d7fc:	0000d60d 	.word	0x0000d60d
    d800:	00013a9c 	.word	0x00013a9c
    d804:	0000484d 	.word	0x0000484d
    d808:	0000d669 	.word	0x0000d669
    d80c:	00013ab0 	.word	0x00013ab0
    d810:	00013ac8 	.word	0x00013ac8
    d814:	0000d559 	.word	0x0000d559
    d818:	00013ae0 	.word	0x00013ae0
    d81c:	0000d625 	.word	0x0000d625
    d820:	00013af8 	.word	0x00013af8
    d824:	00013a28 	.word	0x00013a28

0000d828 <_hwerr_to_stderr>:
    d828:	1c03      	adds	r3, r0, #0
    d82a:	300e      	adds	r0, #14
    d82c:	b500      	push	{lr}
    d82e:	280e      	cmp	r0, #14
    d830:	d819      	bhi.n	d866 <_hwerr_to_stderr+0x3e>
    d832:	f000 fe59 	bl	e4e8 <__gnu_thumb1_case_uqi>
    d836:	1416      	.short	0x1416
    d838:	1b181012 	.word	0x1b181012
    d83c:	180c0e18 	.word	0x180c0e18
    d840:	1d0a0e0e 	.word	0x1d0a0e0e
    d844:	08          	.byte	0x08
    d845:	00          	.byte	0x00
    d846:	2000      	movs	r0, #0
    d848:	e014      	b.n	d874 <_hwerr_to_stderr+0x4c>
    d84a:	2070      	movs	r0, #112	; 0x70
    d84c:	e011      	b.n	d872 <_hwerr_to_stderr+0x4a>
    d84e:	2016      	movs	r0, #22
    d850:	e00f      	b.n	d872 <_hwerr_to_stderr+0x4a>
    d852:	200c      	movs	r0, #12
    d854:	e00d      	b.n	d872 <_hwerr_to_stderr+0x4a>
    d856:	2079      	movs	r0, #121	; 0x79
    d858:	e00b      	b.n	d872 <_hwerr_to_stderr+0x4a>
    d85a:	2068      	movs	r0, #104	; 0x68
    d85c:	e009      	b.n	d872 <_hwerr_to_stderr+0x4a>
    d85e:	200b      	movs	r0, #11
    d860:	e007      	b.n	d872 <_hwerr_to_stderr+0x4a>
    d862:	2010      	movs	r0, #16
    d864:	e005      	b.n	d872 <_hwerr_to_stderr+0x4a>
    d866:	2000      	movs	r0, #0
    d868:	4283      	cmp	r3, r0
    d86a:	da03      	bge.n	d874 <_hwerr_to_stderr+0x4c>
    d86c:	2005      	movs	r0, #5
    d86e:	e000      	b.n	d872 <_hwerr_to_stderr+0x4a>
    d870:	2002      	movs	r0, #2
    d872:	4240      	negs	r0, r0
    d874:	bd00      	pop	{pc}
	...

0000d878 <_mqtt_send_wait>:
    d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d87a:	1c04      	adds	r4, r0, #0
    d87c:	3443      	adds	r4, #67	; 0x43
    d87e:	7823      	ldrb	r3, [r4, #0]
    d880:	1c05      	adds	r5, r0, #0
    d882:	07d8      	lsls	r0, r3, #31
    d884:	d51c      	bpl.n	d8c0 <_mqtt_send_wait+0x48>
    d886:	2604      	movs	r6, #4
    d888:	4333      	orrs	r3, r6
    d88a:	7023      	strb	r3, [r4, #0]
    d88c:	2002      	movs	r0, #2
    d88e:	5628      	ldrsb	r0, [r5, r0]
    d890:	b292      	uxth	r2, r2
    d892:	2300      	movs	r3, #0
    d894:	4f0c      	ldr	r7, [pc, #48]	; (d8c8 <_mqtt_send_wait+0x50>)
    d896:	47b8      	blx	r7
    d898:	2800      	cmp	r0, #0
    d89a:	da05      	bge.n	d8a8 <_mqtt_send_wait+0x30>
    d89c:	7823      	ldrb	r3, [r4, #0]
    d89e:	43b3      	bics	r3, r6
    d8a0:	7023      	strb	r3, [r4, #0]
    d8a2:	4b0a      	ldr	r3, [pc, #40]	; (d8cc <_mqtt_send_wait+0x54>)
    d8a4:	4798      	blx	r3
    d8a6:	e00d      	b.n	d8c4 <_mqtt_send_wait+0x4c>
    d8a8:	7822      	ldrb	r2, [r4, #0]
    d8aa:	2314      	movs	r3, #20
    d8ac:	4013      	ands	r3, r2
    d8ae:	2000      	movs	r0, #0
    d8b0:	2b04      	cmp	r3, #4
    d8b2:	d107      	bne.n	d8c4 <_mqtt_send_wait+0x4c>
    d8b4:	4b06      	ldr	r3, [pc, #24]	; (d8d0 <_mqtt_send_wait+0x58>)
    d8b6:	4798      	blx	r3
    d8b8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    d8ba:	4b06      	ldr	r3, [pc, #24]	; (d8d4 <_mqtt_send_wait+0x5c>)
    d8bc:	4798      	blx	r3
    d8be:	e7f3      	b.n	d8a8 <_mqtt_send_wait+0x30>
    d8c0:	2001      	movs	r0, #1
    d8c2:	4240      	negs	r0, r0
    d8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d8c6:	46c0      	nop			; (mov r8, r8)
    d8c8:	0000c4e1 	.word	0x0000c4e1
    d8cc:	0000d829 	.word	0x0000d829
    d8d0:	0000a741 	.word	0x0000a741
    d8d4:	00007be9 	.word	0x00007be9

0000d8d8 <mqtt_get_config_defaults>:
    d8d8:	4b07      	ldr	r3, [pc, #28]	; (d8f8 <mqtt_get_config_defaults+0x20>)
    d8da:	2240      	movs	r2, #64	; 0x40
    d8dc:	8003      	strh	r3, [r0, #0]
    d8de:	2396      	movs	r3, #150	; 0x96
    d8e0:	009b      	lsls	r3, r3, #2
    d8e2:	8103      	strh	r3, [r0, #8]
    d8e4:	6102      	str	r2, [r0, #16]
    d8e6:	2300      	movs	r3, #0
    d8e8:	2220      	movs	r2, #32
    d8ea:	7083      	strb	r3, [r0, #2]
    d8ec:	6043      	str	r3, [r0, #4]
    d8ee:	60c3      	str	r3, [r0, #12]
    d8f0:	6142      	str	r2, [r0, #20]
    d8f2:	7603      	strb	r3, [r0, #24]
    d8f4:	4770      	bx	lr
    d8f6:	46c0      	nop			; (mov r8, r8)
    d8f8:	0000075b 	.word	0x0000075b

0000d8fc <mqtt_init>:
    d8fc:	b538      	push	{r3, r4, r5, lr}
    d8fe:	1c04      	adds	r4, r0, #0
    d900:	1c0d      	adds	r5, r1, #0
    d902:	2800      	cmp	r0, #0
    d904:	d030      	beq.n	d968 <mqtt_init+0x6c>
    d906:	2900      	cmp	r1, #0
    d908:	d02e      	beq.n	d968 <mqtt_init+0x6c>
    d90a:	690b      	ldr	r3, [r1, #16]
    d90c:	2b00      	cmp	r3, #0
    d90e:	d02b      	beq.n	d968 <mqtt_init+0x6c>
    d910:	684b      	ldr	r3, [r1, #4]
    d912:	2b00      	cmp	r3, #0
    d914:	d028      	beq.n	d968 <mqtt_init+0x6c>
    d916:	2100      	movs	r1, #0
    d918:	2274      	movs	r2, #116	; 0x74
    d91a:	4b16      	ldr	r3, [pc, #88]	; (d974 <mqtt_init+0x78>)
    d91c:	4798      	blx	r3
    d91e:	1c20      	adds	r0, r4, #0
    d920:	4b15      	ldr	r3, [pc, #84]	; (d978 <mqtt_init+0x7c>)
    d922:	3058      	adds	r0, #88	; 0x58
    d924:	1c29      	adds	r1, r5, #0
    d926:	221c      	movs	r2, #28
    d928:	4798      	blx	r3
    d92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d92c:	2b00      	cmp	r3, #0
    d92e:	d10b      	bne.n	d948 <mqtt_init+0x4c>
    d930:	6928      	ldr	r0, [r5, #16]
    d932:	4b12      	ldr	r3, [pc, #72]	; (d97c <mqtt_init+0x80>)
    d934:	4798      	blx	r3
    d936:	6660      	str	r0, [r4, #100]	; 0x64
    d938:	2800      	cmp	r0, #0
    d93a:	d017      	beq.n	d96c <mqtt_init+0x70>
    d93c:	1c23      	adds	r3, r4, #0
    d93e:	3343      	adds	r3, #67	; 0x43
    d940:	781a      	ldrb	r2, [r3, #0]
    d942:	2120      	movs	r1, #32
    d944:	430a      	orrs	r2, r1
    d946:	701a      	strb	r2, [r3, #0]
    d948:	892a      	ldrh	r2, [r5, #8]
    d94a:	23fa      	movs	r3, #250	; 0xfa
    d94c:	005b      	lsls	r3, r3, #1
    d94e:	4353      	muls	r3, r2
    d950:	6868      	ldr	r0, [r5, #4]
    d952:	490b      	ldr	r1, [pc, #44]	; (d980 <mqtt_init+0x84>)
    d954:	1c22      	adds	r2, r4, #0
    d956:	4d0b      	ldr	r5, [pc, #44]	; (d984 <mqtt_init+0x88>)
    d958:	47a8      	blx	r5
    d95a:	1c03      	adds	r3, r0, #0
    d95c:	6520      	str	r0, [r4, #80]	; 0x50
    d95e:	2000      	movs	r0, #0
    d960:	4283      	cmp	r3, r0
    d962:	da05      	bge.n	d970 <mqtt_init+0x74>
    d964:	201c      	movs	r0, #28
    d966:	e002      	b.n	d96e <mqtt_init+0x72>
    d968:	2016      	movs	r0, #22
    d96a:	e000      	b.n	d96e <mqtt_init+0x72>
    d96c:	200c      	movs	r0, #12
    d96e:	4240      	negs	r0, r0
    d970:	bd38      	pop	{r3, r4, r5, pc}
    d972:	46c0      	nop			; (mov r8, r8)
    d974:	000101b7 	.word	0x000101b7
    d978:	00010181 	.word	0x00010181
    d97c:	00010159 	.word	0x00010159
    d980:	0000dfb5 	.word	0x0000dfb5
    d984:	00007b65 	.word	0x00007b65

0000d988 <mqtt_deinit>:
    d988:	b510      	push	{r4, lr}
    d98a:	1e04      	subs	r4, r0, #0
    d98c:	d014      	beq.n	d9b8 <mqtt_deinit+0x30>
    d98e:	6e40      	ldr	r0, [r0, #100]	; 0x64
    d990:	2800      	cmp	r0, #0
    d992:	d008      	beq.n	d9a6 <mqtt_deinit+0x1e>
    d994:	1c23      	adds	r3, r4, #0
    d996:	3343      	adds	r3, #67	; 0x43
    d998:	781b      	ldrb	r3, [r3, #0]
    d99a:	069a      	lsls	r2, r3, #26
    d99c:	d503      	bpl.n	d9a6 <mqtt_deinit+0x1e>
    d99e:	4b09      	ldr	r3, [pc, #36]	; (d9c4 <mqtt_deinit+0x3c>)
    d9a0:	4798      	blx	r3
    d9a2:	2300      	movs	r3, #0
    d9a4:	6663      	str	r3, [r4, #100]	; 0x64
    d9a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
    d9a8:	2900      	cmp	r1, #0
    d9aa:	db08      	blt.n	d9be <mqtt_deinit+0x36>
    d9ac:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    d9ae:	2800      	cmp	r0, #0
    d9b0:	d006      	beq.n	d9c0 <mqtt_deinit+0x38>
    d9b2:	4b05      	ldr	r3, [pc, #20]	; (d9c8 <mqtt_deinit+0x40>)
    d9b4:	4798      	blx	r3
    d9b6:	e002      	b.n	d9be <mqtt_deinit+0x36>
    d9b8:	2016      	movs	r0, #22
    d9ba:	4240      	negs	r0, r0
    d9bc:	e000      	b.n	d9c0 <mqtt_deinit+0x38>
    d9be:	2000      	movs	r0, #0
    d9c0:	bd10      	pop	{r4, pc}
    d9c2:	46c0      	nop			; (mov r8, r8)
    d9c4:	0001016d 	.word	0x0001016d
    d9c8:	00007b9d 	.word	0x00007b9d

0000d9cc <mqtt_register_callback>:
    d9cc:	2800      	cmp	r0, #0
    d9ce:	d002      	beq.n	d9d6 <mqtt_register_callback+0xa>
    d9d0:	6541      	str	r1, [r0, #84]	; 0x54
    d9d2:	2000      	movs	r0, #0
    d9d4:	e001      	b.n	d9da <mqtt_register_callback+0xe>
    d9d6:	2016      	movs	r0, #22
    d9d8:	4240      	negs	r0, r0
    d9da:	4770      	bx	lr

0000d9dc <mqtt_unregister_callback>:
    d9dc:	2800      	cmp	r0, #0
    d9de:	d003      	beq.n	d9e8 <mqtt_unregister_callback+0xc>
    d9e0:	2300      	movs	r3, #0
    d9e2:	6543      	str	r3, [r0, #84]	; 0x54
    d9e4:	1c18      	adds	r0, r3, #0
    d9e6:	e001      	b.n	d9ec <mqtt_unregister_callback+0x10>
    d9e8:	2016      	movs	r0, #22
    d9ea:	4240      	negs	r0, r0
    d9ec:	4770      	bx	lr
	...

0000d9f0 <mqtt_socket_resolve_handler>:
    d9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9f2:	1c06      	adds	r6, r0, #0
    d9f4:	b085      	sub	sp, #20
    d9f6:	1c0f      	adds	r7, r1, #0
    d9f8:	2400      	movs	r4, #0
    d9fa:	4b0f      	ldr	r3, [pc, #60]	; (da38 <mqtt_socket_resolve_handler+0x48>)
    d9fc:	58e5      	ldr	r5, [r4, r3]
    d9fe:	2d00      	cmp	r5, #0
    da00:	d015      	beq.n	da2e <mqtt_socket_resolve_handler+0x3e>
    da02:	1ce9      	adds	r1, r5, #3
    da04:	1c30      	adds	r0, r6, #0
    da06:	4b0d      	ldr	r3, [pc, #52]	; (da3c <mqtt_socket_resolve_handler+0x4c>)
    da08:	4798      	blx	r3
    da0a:	2800      	cmp	r0, #0
    da0c:	d10f      	bne.n	da2e <mqtt_socket_resolve_handler+0x3e>
    da0e:	466a      	mov	r2, sp
    da10:	2302      	movs	r3, #2
    da12:	8013      	strh	r3, [r2, #0]
    da14:	1c2b      	adds	r3, r5, #0
    da16:	3358      	adds	r3, #88	; 0x58
    da18:	881b      	ldrh	r3, [r3, #0]
    da1a:	9701      	str	r7, [sp, #4]
    da1c:	ba5b      	rev16	r3, r3
    da1e:	8053      	strh	r3, [r2, #2]
    da20:	2002      	movs	r0, #2
    da22:	5628      	ldrsb	r0, [r5, r0]
    da24:	4669      	mov	r1, sp
    da26:	2210      	movs	r2, #16
    da28:	4b05      	ldr	r3, [pc, #20]	; (da40 <mqtt_socket_resolve_handler+0x50>)
    da2a:	4798      	blx	r3
    da2c:	e002      	b.n	da34 <mqtt_socket_resolve_handler+0x44>
    da2e:	3404      	adds	r4, #4
    da30:	2c1c      	cmp	r4, #28
    da32:	d1e2      	bne.n	d9fa <mqtt_socket_resolve_handler+0xa>
    da34:	b005      	add	sp, #20
    da36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da38:	2000029c 	.word	0x2000029c
    da3c:	0001061d 	.word	0x0001061d
    da40:	0000c451 	.word	0x0000c451

0000da44 <mqtt_connect>:
    da44:	b5f0      	push	{r4, r5, r6, r7, lr}
    da46:	1c04      	adds	r4, r0, #0
    da48:	b089      	sub	sp, #36	; 0x24
    da4a:	1c0d      	adds	r5, r1, #0
    da4c:	2800      	cmp	r0, #0
    da4e:	d051      	beq.n	daf4 <mqtt_connect+0xb0>
    da50:	2900      	cmp	r1, #0
    da52:	d04f      	beq.n	daf4 <mqtt_connect+0xb0>
    da54:	1c08      	adds	r0, r1, #0
    da56:	4b39      	ldr	r3, [pc, #228]	; (db3c <mqtt_connect+0xf8>)
    da58:	4798      	blx	r3
    da5a:	2840      	cmp	r0, #64	; 0x40
    da5c:	d84c      	bhi.n	daf8 <mqtt_connect+0xb4>
    da5e:	1c21      	adds	r1, r4, #0
    da60:	3143      	adds	r1, #67	; 0x43
    da62:	780b      	ldrb	r3, [r1, #0]
    da64:	9101      	str	r1, [sp, #4]
    da66:	07db      	lsls	r3, r3, #31
    da68:	0fd9      	lsrs	r1, r3, #31
    da6a:	466a      	mov	r2, sp
    da6c:	b2ce      	uxtb	r6, r1
    da6e:	1ce0      	adds	r0, r4, #3
    da70:	7211      	strb	r1, [r2, #8]
    da72:	2e00      	cmp	r6, #0
    da74:	d142      	bne.n	dafc <mqtt_connect+0xb8>
    da76:	2701      	movs	r7, #1
    da78:	1c29      	adds	r1, r5, #0
    da7a:	4b31      	ldr	r3, [pc, #196]	; (db40 <mqtt_connect+0xfc>)
    da7c:	8027      	strh	r7, [r4, #0]
    da7e:	4798      	blx	r3
    da80:	9a01      	ldr	r2, [sp, #4]
    da82:	2002      	movs	r0, #2
    da84:	7813      	ldrb	r3, [r2, #0]
    da86:	9901      	ldr	r1, [sp, #4]
    da88:	43bb      	bics	r3, r7
    da8a:	4383      	bics	r3, r0
    da8c:	22e3      	movs	r2, #227	; 0xe3
    da8e:	4013      	ands	r3, r2
    da90:	466a      	mov	r2, sp
    da92:	700b      	strb	r3, [r1, #0]
    da94:	7a12      	ldrb	r2, [r2, #8]
    da96:	1c23      	adds	r3, r4, #0
    da98:	3348      	adds	r3, #72	; 0x48
    da9a:	6466      	str	r6, [r4, #68]	; 0x44
    da9c:	701a      	strb	r2, [r3, #0]
    da9e:	7c9a      	ldrb	r2, [r3, #18]
    daa0:	805e      	strh	r6, [r3, #2]
    daa2:	1e53      	subs	r3, r2, #1
    daa4:	419a      	sbcs	r2, r3
    daa6:	b2d2      	uxtb	r2, r2
    daa8:	1c39      	adds	r1, r7, #0
    daaa:	4b26      	ldr	r3, [pc, #152]	; (db44 <mqtt_connect+0x100>)
    daac:	4798      	blx	r3
    daae:	70a0      	strb	r0, [r4, #2]
    dab0:	2800      	cmp	r0, #0
    dab2:	db25      	blt.n	db00 <mqtt_connect+0xbc>
    dab4:	4b24      	ldr	r3, [pc, #144]	; (db48 <mqtt_connect+0x104>)
    dab6:	0080      	lsls	r0, r0, #2
    dab8:	50c4      	str	r4, [r0, r3]
    daba:	1c2b      	adds	r3, r5, #0
    dabc:	781f      	ldrb	r7, [r3, #0]
    dabe:	2f00      	cmp	r7, #0
    dac0:	d026      	beq.n	db10 <mqtt_connect+0xcc>
    dac2:	2220      	movs	r2, #32
    dac4:	1c39      	adds	r1, r7, #0
    dac6:	4391      	bics	r1, r2
    dac8:	1c0a      	adds	r2, r1, #0
    daca:	3a41      	subs	r2, #65	; 0x41
    dacc:	b2d2      	uxtb	r2, r2
    dace:	3301      	adds	r3, #1
    dad0:	2a05      	cmp	r2, #5
    dad2:	d90d      	bls.n	daf0 <mqtt_connect+0xac>
    dad4:	2f3a      	cmp	r7, #58	; 0x3a
    dad6:	d00b      	beq.n	daf0 <mqtt_connect+0xac>
    dad8:	2f2f      	cmp	r7, #47	; 0x2f
    dada:	d009      	beq.n	daf0 <mqtt_connect+0xac>
    dadc:	2f2e      	cmp	r7, #46	; 0x2e
    dade:	d102      	bne.n	dae6 <mqtt_connect+0xa2>
    dae0:	2e00      	cmp	r6, #0
    dae2:	d0eb      	beq.n	dabc <mqtt_connect+0x78>
    dae4:	e00f      	b.n	db06 <mqtt_connect+0xc2>
    dae6:	2230      	movs	r2, #48	; 0x30
    dae8:	4017      	ands	r7, r2
    daea:	4297      	cmp	r7, r2
    daec:	d0e6      	beq.n	dabc <mqtt_connect+0x78>
    daee:	e00a      	b.n	db06 <mqtt_connect+0xc2>
    daf0:	2601      	movs	r6, #1
    daf2:	e7e3      	b.n	dabc <mqtt_connect+0x78>
    daf4:	2016      	movs	r0, #22
    daf6:	e004      	b.n	db02 <mqtt_connect+0xbe>
    daf8:	205b      	movs	r0, #91	; 0x5b
    dafa:	e002      	b.n	db02 <mqtt_connect+0xbe>
    dafc:	2078      	movs	r0, #120	; 0x78
    dafe:	e000      	b.n	db02 <mqtt_connect+0xbe>
    db00:	201c      	movs	r0, #28
    db02:	4240      	negs	r0, r0
    db04:	e017      	b.n	db36 <mqtt_connect+0xf2>
    db06:	1c28      	adds	r0, r5, #0
    db08:	4b10      	ldr	r3, [pc, #64]	; (db4c <mqtt_connect+0x108>)
    db0a:	4798      	blx	r3
    db0c:	2000      	movs	r0, #0
    db0e:	e012      	b.n	db36 <mqtt_connect+0xf2>
    db10:	466a      	mov	r2, sp
    db12:	2302      	movs	r3, #2
    db14:	8213      	strh	r3, [r2, #16]
    db16:	1c23      	adds	r3, r4, #0
    db18:	3358      	adds	r3, #88	; 0x58
    db1a:	881b      	ldrh	r3, [r3, #0]
    db1c:	1c28      	adds	r0, r5, #0
    db1e:	ba5b      	rev16	r3, r3
    db20:	8253      	strh	r3, [r2, #18]
    db22:	4b0b      	ldr	r3, [pc, #44]	; (db50 <mqtt_connect+0x10c>)
    db24:	4798      	blx	r3
    db26:	9005      	str	r0, [sp, #20]
    db28:	2002      	movs	r0, #2
    db2a:	5620      	ldrsb	r0, [r4, r0]
    db2c:	a904      	add	r1, sp, #16
    db2e:	2210      	movs	r2, #16
    db30:	4b08      	ldr	r3, [pc, #32]	; (db54 <mqtt_connect+0x110>)
    db32:	4798      	blx	r3
    db34:	1c38      	adds	r0, r7, #0
    db36:	b009      	add	sp, #36	; 0x24
    db38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db3a:	46c0      	nop			; (mov r8, r8)
    db3c:	0001067b 	.word	0x0001067b
    db40:	00010631 	.word	0x00010631
    db44:	0000c2cd 	.word	0x0000c2cd
    db48:	2000029c 	.word	0x2000029c
    db4c:	0000c715 	.word	0x0000c715
    db50:	0000c6a9 	.word	0x0000c6a9
    db54:	0000c451 	.word	0x0000c451

0000db58 <mqtt_connect_broker>:
    db58:	b5f0      	push	{r4, r5, r6, r7, lr}
    db5a:	b095      	sub	sp, #84	; 0x54
    db5c:	af02      	add	r7, sp, #8
    db5e:	617b      	str	r3, [r7, #20]
    db60:	1c3b      	adds	r3, r7, #0
    db62:	3370      	adds	r3, #112	; 0x70
    db64:	781b      	ldrb	r3, [r3, #0]
    db66:	1c05      	adds	r5, r0, #0
    db68:	60fb      	str	r3, [r7, #12]
    db6a:	1c3b      	adds	r3, r7, #0
    db6c:	3374      	adds	r3, #116	; 0x74
    db6e:	781b      	ldrb	r3, [r3, #0]
    db70:	6139      	str	r1, [r7, #16]
    db72:	61fa      	str	r2, [r7, #28]
    db74:	60bb      	str	r3, [r7, #8]
    db76:	2800      	cmp	r0, #0
    db78:	d101      	bne.n	db7e <mqtt_connect_broker+0x26>
    db7a:	2016      	movs	r0, #22
    db7c:	e129      	b.n	ddd2 <mqtt_connect_broker+0x27a>
    db7e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    db80:	4668      	mov	r0, sp
    db82:	3307      	adds	r3, #7
    db84:	08db      	lsrs	r3, r3, #3
    db86:	00db      	lsls	r3, r3, #3
    db88:	1ac0      	subs	r0, r0, r3
    db8a:	4685      	mov	sp, r0
    db8c:	ac02      	add	r4, sp, #8
    db8e:	607c      	str	r4, [r7, #4]
    db90:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    db92:	2c00      	cmp	r4, #0
    db94:	d0f1      	beq.n	db7a <mqtt_connect_broker+0x22>
    db96:	1c2b      	adds	r3, r5, #0
    db98:	3343      	adds	r3, #67	; 0x43
    db9a:	781b      	ldrb	r3, [r3, #0]
    db9c:	07d8      	lsls	r0, r3, #31
    db9e:	d400      	bmi.n	dba2 <mqtt_connect_broker+0x4a>
    dba0:	e112      	b.n	ddc8 <mqtt_connect_broker+0x270>
    dba2:	079a      	lsls	r2, r3, #30
    dba4:	d500      	bpl.n	dba8 <mqtt_connect_broker+0x50>
    dba6:	e111      	b.n	ddcc <mqtt_connect_broker+0x274>
    dba8:	071c      	lsls	r4, r3, #28
    dbaa:	d40b      	bmi.n	dbc4 <mqtt_connect_broker+0x6c>
    dbac:	4e8b      	ldr	r6, [pc, #556]	; (dddc <mqtt_connect_broker+0x284>)
    dbae:	6e38      	ldr	r0, [r7, #96]	; 0x60
    dbb0:	47b0      	blx	r6
    dbb2:	1c03      	adds	r3, r0, #0
    dbb4:	61b8      	str	r0, [r7, #24]
    dbb6:	69f8      	ldr	r0, [r7, #28]
    dbb8:	330e      	adds	r3, #14
    dbba:	1c34      	adds	r4, r6, #0
    dbbc:	2800      	cmp	r0, #0
    dbbe:	d113      	bne.n	dbe8 <mqtt_connect_broker+0x90>
    dbc0:	1c1e      	adds	r6, r3, #0
    dbc2:	e01d      	b.n	dc00 <mqtt_connect_broker+0xa8>
    dbc4:	1c2b      	adds	r3, r5, #0
    dbc6:	3370      	adds	r3, #112	; 0x70
    dbc8:	781b      	ldrb	r3, [r3, #0]
    dbca:	2b00      	cmp	r3, #0
    dbcc:	d000      	beq.n	dbd0 <mqtt_connect_broker+0x78>
    dbce:	e0ff      	b.n	ddd0 <mqtt_connect_broker+0x278>
    dbd0:	1c2b      	adds	r3, r5, #0
    dbd2:	3343      	adds	r3, #67	; 0x43
    dbd4:	781b      	ldrb	r3, [r3, #0]
    dbd6:	071a      	lsls	r2, r3, #28
    dbd8:	d5e8      	bpl.n	dbac <mqtt_connect_broker+0x54>
    dbda:	4b81      	ldr	r3, [pc, #516]	; (dde0 <mqtt_connect_broker+0x288>)
    dbdc:	2000      	movs	r0, #0
    dbde:	4798      	blx	r3
    dbe0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    dbe2:	4b80      	ldr	r3, [pc, #512]	; (dde4 <mqtt_connect_broker+0x28c>)
    dbe4:	4798      	blx	r3
    dbe6:	e7f3      	b.n	dbd0 <mqtt_connect_broker+0x78>
    dbe8:	69f8      	ldr	r0, [r7, #28]
    dbea:	47b0      	blx	r6
    dbec:	69be      	ldr	r6, [r7, #24]
    dbee:	697b      	ldr	r3, [r7, #20]
    dbf0:	3610      	adds	r6, #16
    dbf2:	1836      	adds	r6, r6, r0
    dbf4:	2b00      	cmp	r3, #0
    dbf6:	d003      	beq.n	dc00 <mqtt_connect_broker+0xa8>
    dbf8:	1c18      	adds	r0, r3, #0
    dbfa:	47a0      	blx	r4
    dbfc:	3602      	adds	r6, #2
    dbfe:	1836      	adds	r6, r6, r0
    dc00:	6e78      	ldr	r0, [r7, #100]	; 0x64
    dc02:	2800      	cmp	r0, #0
    dc04:	d007      	beq.n	dc16 <mqtt_connect_broker+0xbe>
    dc06:	47a0      	blx	r4
    dc08:	3602      	adds	r6, #2
    dc0a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    dc0c:	1830      	adds	r0, r6, r0
    dc0e:	1906      	adds	r6, r0, r4
    dc10:	2c00      	cmp	r4, #0
    dc12:	d100      	bne.n	dc16 <mqtt_connect_broker+0xbe>
    dc14:	1c06      	adds	r6, r0, #0
    dc16:	69fc      	ldr	r4, [r7, #28]
    dc18:	2c00      	cmp	r4, #0
    dc1a:	d006      	beq.n	dc2a <mqtt_connect_broker+0xd2>
    dc1c:	24c0      	movs	r4, #192	; 0xc0
    dc1e:	61bc      	str	r4, [r7, #24]
    dc20:	697c      	ldr	r4, [r7, #20]
    dc22:	2c00      	cmp	r4, #0
    dc24:	d103      	bne.n	dc2e <mqtt_connect_broker+0xd6>
    dc26:	2480      	movs	r4, #128	; 0x80
    dc28:	e000      	b.n	dc2c <mqtt_connect_broker+0xd4>
    dc2a:	69fc      	ldr	r4, [r7, #28]
    dc2c:	61bc      	str	r4, [r7, #24]
    dc2e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    dc30:	2c00      	cmp	r4, #0
    dc32:	d00f      	beq.n	dc54 <mqtt_connect_broker+0xfc>
    dc34:	68bc      	ldr	r4, [r7, #8]
    dc36:	2c00      	cmp	r4, #0
    dc38:	d003      	beq.n	dc42 <mqtt_connect_broker+0xea>
    dc3a:	69bc      	ldr	r4, [r7, #24]
    dc3c:	2320      	movs	r3, #32
    dc3e:	431c      	orrs	r4, r3
    dc40:	61bc      	str	r4, [r7, #24]
    dc42:	68fc      	ldr	r4, [r7, #12]
    dc44:	2303      	movs	r3, #3
    dc46:	4023      	ands	r3, r4
    dc48:	00db      	lsls	r3, r3, #3
    dc4a:	69bc      	ldr	r4, [r7, #24]
    dc4c:	2204      	movs	r2, #4
    dc4e:	4313      	orrs	r3, r2
    dc50:	431c      	orrs	r4, r3
    dc52:	61bc      	str	r4, [r7, #24]
    dc54:	693c      	ldr	r4, [r7, #16]
    dc56:	2c00      	cmp	r4, #0
    dc58:	d003      	beq.n	dc62 <mqtt_connect_broker+0x10a>
    dc5a:	69bc      	ldr	r4, [r7, #24]
    dc5c:	2302      	movs	r3, #2
    dc5e:	431c      	orrs	r4, r3
    dc60:	61bc      	str	r4, [r7, #24]
    dc62:	1c2b      	adds	r3, r5, #0
    dc64:	3343      	adds	r3, #67	; 0x43
    dc66:	781a      	ldrb	r2, [r3, #0]
    dc68:	2108      	movs	r1, #8
    dc6a:	430a      	orrs	r2, r1
    dc6c:	701a      	strb	r2, [r3, #0]
    dc6e:	1c38      	adds	r0, r7, #0
    dc70:	9500      	str	r5, [sp, #0]
    dc72:	3020      	adds	r0, #32
    dc74:	6879      	ldr	r1, [r7, #4]
    dc76:	4b5c      	ldr	r3, [pc, #368]	; (dde8 <mqtt_connect_broker+0x290>)
    dc78:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    dc7a:	4c5c      	ldr	r4, [pc, #368]	; (ddec <mqtt_connect_broker+0x294>)
    dc7c:	47a0      	blx	r4
    dc7e:	1c38      	adds	r0, r7, #0
    dc80:	3020      	adds	r0, #32
    dc82:	2110      	movs	r1, #16
    dc84:	4b5a      	ldr	r3, [pc, #360]	; (ddf0 <mqtt_connect_broker+0x298>)
    dc86:	4798      	blx	r3
    dc88:	2e80      	cmp	r6, #128	; 0x80
    dc8a:	dd09      	ble.n	dca0 <mqtt_connect_broker+0x148>
    dc8c:	2180      	movs	r1, #128	; 0x80
    dc8e:	4249      	negs	r1, r1
    dc90:	4331      	orrs	r1, r6
    dc92:	1c38      	adds	r0, r7, #0
    dc94:	b249      	sxtb	r1, r1
    dc96:	3020      	adds	r0, #32
    dc98:	4c55      	ldr	r4, [pc, #340]	; (ddf0 <mqtt_connect_broker+0x298>)
    dc9a:	47a0      	blx	r4
    dc9c:	11f6      	asrs	r6, r6, #7
    dc9e:	e7f3      	b.n	dc88 <mqtt_connect_broker+0x130>
    dca0:	4b54      	ldr	r3, [pc, #336]	; (ddf4 <mqtt_connect_broker+0x29c>)
    dca2:	401e      	ands	r6, r3
    dca4:	d504      	bpl.n	dcb0 <mqtt_connect_broker+0x158>
    dca6:	2380      	movs	r3, #128	; 0x80
    dca8:	3e01      	subs	r6, #1
    dcaa:	425b      	negs	r3, r3
    dcac:	431e      	orrs	r6, r3
    dcae:	3601      	adds	r6, #1
    dcb0:	1c38      	adds	r0, r7, #0
    dcb2:	b271      	sxtb	r1, r6
    dcb4:	3020      	adds	r0, #32
    dcb6:	4c4e      	ldr	r4, [pc, #312]	; (ddf0 <mqtt_connect_broker+0x298>)
    dcb8:	47a0      	blx	r4
    dcba:	1c38      	adds	r0, r7, #0
    dcbc:	4c4e      	ldr	r4, [pc, #312]	; (ddf8 <mqtt_connect_broker+0x2a0>)
    dcbe:	3020      	adds	r0, #32
    dcc0:	2106      	movs	r1, #6
    dcc2:	47a0      	blx	r4
    dcc4:	1c38      	adds	r0, r7, #0
    dcc6:	4b4d      	ldr	r3, [pc, #308]	; (ddfc <mqtt_connect_broker+0x2a4>)
    dcc8:	3020      	adds	r0, #32
    dcca:	494d      	ldr	r1, [pc, #308]	; (de00 <mqtt_connect_broker+0x2a8>)
    dccc:	2206      	movs	r2, #6
    dcce:	4798      	blx	r3
    dcd0:	1c38      	adds	r0, r7, #0
    dcd2:	3020      	adds	r0, #32
    dcd4:	2103      	movs	r1, #3
    dcd6:	4a46      	ldr	r2, [pc, #280]	; (ddf0 <mqtt_connect_broker+0x298>)
    dcd8:	4790      	blx	r2
    dcda:	69bb      	ldr	r3, [r7, #24]
    dcdc:	1c38      	adds	r0, r7, #0
    dcde:	4a44      	ldr	r2, [pc, #272]	; (ddf0 <mqtt_connect_broker+0x298>)
    dce0:	b259      	sxtb	r1, r3
    dce2:	3020      	adds	r0, #32
    dce4:	4790      	blx	r2
    dce6:	1c2b      	adds	r3, r5, #0
    dce8:	3360      	adds	r3, #96	; 0x60
    dcea:	2000      	movs	r0, #0
    dcec:	5e19      	ldrsh	r1, [r3, r0]
    dcee:	1c38      	adds	r0, r7, #0
    dcf0:	3020      	adds	r0, #32
    dcf2:	47a0      	blx	r4
    dcf4:	4e39      	ldr	r6, [pc, #228]	; (dddc <mqtt_connect_broker+0x284>)
    dcf6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    dcf8:	47b0      	blx	r6
    dcfa:	b201      	sxth	r1, r0
    dcfc:	1c38      	adds	r0, r7, #0
    dcfe:	3020      	adds	r0, #32
    dd00:	47a0      	blx	r4
    dd02:	6e38      	ldr	r0, [r7, #96]	; 0x60
    dd04:	47b0      	blx	r6
    dd06:	1c02      	adds	r2, r0, #0
    dd08:	1c38      	adds	r0, r7, #0
    dd0a:	3020      	adds	r0, #32
    dd0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    dd0e:	4b3b      	ldr	r3, [pc, #236]	; (ddfc <mqtt_connect_broker+0x2a4>)
    dd10:	4798      	blx	r3
    dd12:	6e78      	ldr	r0, [r7, #100]	; 0x64
    dd14:	2800      	cmp	r0, #0
    dd16:	d015      	beq.n	dd44 <mqtt_connect_broker+0x1ec>
    dd18:	47b0      	blx	r6
    dd1a:	b201      	sxth	r1, r0
    dd1c:	1c38      	adds	r0, r7, #0
    dd1e:	3020      	adds	r0, #32
    dd20:	47a0      	blx	r4
    dd22:	6e78      	ldr	r0, [r7, #100]	; 0x64
    dd24:	47b0      	blx	r6
    dd26:	1c02      	adds	r2, r0, #0
    dd28:	1c38      	adds	r0, r7, #0
    dd2a:	4c34      	ldr	r4, [pc, #208]	; (ddfc <mqtt_connect_broker+0x2a4>)
    dd2c:	3020      	adds	r0, #32
    dd2e:	6e79      	ldr	r1, [r7, #100]	; 0x64
    dd30:	47a0      	blx	r4
    dd32:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    dd34:	2c00      	cmp	r4, #0
    dd36:	d005      	beq.n	dd44 <mqtt_connect_broker+0x1ec>
    dd38:	1c38      	adds	r0, r7, #0
    dd3a:	1c21      	adds	r1, r4, #0
    dd3c:	3020      	adds	r0, #32
    dd3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    dd40:	4c2e      	ldr	r4, [pc, #184]	; (ddfc <mqtt_connect_broker+0x2a4>)
    dd42:	47a0      	blx	r4
    dd44:	69fc      	ldr	r4, [r7, #28]
    dd46:	2c00      	cmp	r4, #0
    dd48:	d01f      	beq.n	dd8a <mqtt_connect_broker+0x232>
    dd4a:	4e24      	ldr	r6, [pc, #144]	; (dddc <mqtt_connect_broker+0x284>)
    dd4c:	1c20      	adds	r0, r4, #0
    dd4e:	47b0      	blx	r6
    dd50:	b201      	sxth	r1, r0
    dd52:	1c38      	adds	r0, r7, #0
    dd54:	3020      	adds	r0, #32
    dd56:	4c28      	ldr	r4, [pc, #160]	; (ddf8 <mqtt_connect_broker+0x2a0>)
    dd58:	47a0      	blx	r4
    dd5a:	69f8      	ldr	r0, [r7, #28]
    dd5c:	47b0      	blx	r6
    dd5e:	1c02      	adds	r2, r0, #0
    dd60:	1c38      	adds	r0, r7, #0
    dd62:	3020      	adds	r0, #32
    dd64:	69f9      	ldr	r1, [r7, #28]
    dd66:	4c25      	ldr	r4, [pc, #148]	; (ddfc <mqtt_connect_broker+0x2a4>)
    dd68:	47a0      	blx	r4
    dd6a:	6978      	ldr	r0, [r7, #20]
    dd6c:	2800      	cmp	r0, #0
    dd6e:	d00c      	beq.n	dd8a <mqtt_connect_broker+0x232>
    dd70:	47b0      	blx	r6
    dd72:	b201      	sxth	r1, r0
    dd74:	1c38      	adds	r0, r7, #0
    dd76:	4a20      	ldr	r2, [pc, #128]	; (ddf8 <mqtt_connect_broker+0x2a0>)
    dd78:	3020      	adds	r0, #32
    dd7a:	4790      	blx	r2
    dd7c:	6978      	ldr	r0, [r7, #20]
    dd7e:	47b0      	blx	r6
    dd80:	1c02      	adds	r2, r0, #0
    dd82:	1c38      	adds	r0, r7, #0
    dd84:	3020      	adds	r0, #32
    dd86:	6979      	ldr	r1, [r7, #20]
    dd88:	47a0      	blx	r4
    dd8a:	1c38      	adds	r0, r7, #0
    dd8c:	1c2c      	adds	r4, r5, #0
    dd8e:	3020      	adds	r0, #32
    dd90:	4b1c      	ldr	r3, [pc, #112]	; (de04 <mqtt_connect_broker+0x2ac>)
    dd92:	3443      	adds	r4, #67	; 0x43
    dd94:	4798      	blx	r3
    dd96:	7821      	ldrb	r1, [r4, #0]
    dd98:	0789      	lsls	r1, r1, #30
    dd9a:	0fc9      	lsrs	r1, r1, #31
    dd9c:	2901      	cmp	r1, #1
    dd9e:	d10b      	bne.n	ddb8 <mqtt_connect_broker+0x260>
    dda0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    dda2:	2a00      	cmp	r2, #0
    dda4:	d108      	bne.n	ddb8 <mqtt_connect_broker+0x260>
    dda6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    dda8:	2b00      	cmp	r3, #0
    ddaa:	d005      	beq.n	ddb8 <mqtt_connect_broker+0x260>
    ddac:	2034      	movs	r0, #52	; 0x34
    ddae:	55c2      	strb	r2, [r0, r7]
    ddb0:	1c3a      	adds	r2, r7, #0
    ddb2:	1c28      	adds	r0, r5, #0
    ddb4:	3234      	adds	r2, #52	; 0x34
    ddb6:	4798      	blx	r3
    ddb8:	7823      	ldrb	r3, [r4, #0]
    ddba:	2202      	movs	r2, #2
    ddbc:	4313      	orrs	r3, r2
    ddbe:	2208      	movs	r2, #8
    ddc0:	4393      	bics	r3, r2
    ddc2:	7023      	strb	r3, [r4, #0]
    ddc4:	2000      	movs	r0, #0
    ddc6:	e005      	b.n	ddd4 <mqtt_connect_broker+0x27c>
    ddc8:	2080      	movs	r0, #128	; 0x80
    ddca:	e002      	b.n	ddd2 <mqtt_connect_broker+0x27a>
    ddcc:	2078      	movs	r0, #120	; 0x78
    ddce:	e000      	b.n	ddd2 <mqtt_connect_broker+0x27a>
    ddd0:	200b      	movs	r0, #11
    ddd2:	4240      	negs	r0, r0
    ddd4:	46bd      	mov	sp, r7
    ddd6:	b013      	add	sp, #76	; 0x4c
    ddd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddda:	46c0      	nop			; (mov r8, r8)
    dddc:	0001067b 	.word	0x0001067b
    dde0:	0000a741 	.word	0x0000a741
    dde4:	00007be9 	.word	0x00007be9
    dde8:	0000d879 	.word	0x0000d879
    ddec:	000079f9 	.word	0x000079f9
    ddf0:	00007a25 	.word	0x00007a25
    ddf4:	8000007f 	.word	0x8000007f
    ddf8:	00007a4d 	.word	0x00007a4d
    ddfc:	00007a65 	.word	0x00007a65
    de00:	00013b0c 	.word	0x00013b0c
    de04:	00007a09 	.word	0x00007a09

0000de08 <mqtt_subscribe>:
    de08:	b5f0      	push	{r4, r5, r6, r7, lr}
    de0a:	b08d      	sub	sp, #52	; 0x34
    de0c:	af02      	add	r7, sp, #8
    de0e:	1c04      	adds	r4, r0, #0
    de10:	60b9      	str	r1, [r7, #8]
    de12:	607a      	str	r2, [r7, #4]
    de14:	d101      	bne.n	de1a <mqtt_subscribe+0x12>
    de16:	2016      	movs	r0, #22
    de18:	e086      	b.n	df28 <mqtt_subscribe+0x120>
    de1a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    de1c:	466a      	mov	r2, sp
    de1e:	3307      	adds	r3, #7
    de20:	08db      	lsrs	r3, r3, #3
    de22:	00db      	lsls	r3, r3, #3
    de24:	1ad2      	subs	r2, r2, r3
    de26:	4695      	mov	sp, r2
    de28:	ad02      	add	r5, sp, #8
    de2a:	603d      	str	r5, [r7, #0]
    de2c:	68bd      	ldr	r5, [r7, #8]
    de2e:	2d00      	cmp	r5, #0
    de30:	d0f1      	beq.n	de16 <mqtt_subscribe+0xe>
    de32:	687d      	ldr	r5, [r7, #4]
    de34:	2d02      	cmp	r5, #2
    de36:	d8ee      	bhi.n	de16 <mqtt_subscribe+0xe>
    de38:	1c05      	adds	r5, r0, #0
    de3a:	3543      	adds	r5, #67	; 0x43
    de3c:	782b      	ldrb	r3, [r5, #0]
    de3e:	079a      	lsls	r2, r3, #30
    de40:	d56f      	bpl.n	df22 <mqtt_subscribe+0x11a>
    de42:	071a      	lsls	r2, r3, #28
    de44:	d41a      	bmi.n	de7c <mqtt_subscribe+0x74>
    de46:	68b8      	ldr	r0, [r7, #8]
    de48:	4d39      	ldr	r5, [pc, #228]	; (df30 <mqtt_subscribe+0x128>)
    de4a:	47a8      	blx	r5
    de4c:	1c25      	adds	r5, r4, #0
    de4e:	3543      	adds	r5, #67	; 0x43
    de50:	782b      	ldrb	r3, [r5, #0]
    de52:	2208      	movs	r2, #8
    de54:	4313      	orrs	r3, r2
    de56:	702b      	strb	r3, [r5, #0]
    de58:	60fd      	str	r5, [r7, #12]
    de5a:	1d46      	adds	r6, r0, #5
    de5c:	9400      	str	r4, [sp, #0]
    de5e:	1c38      	adds	r0, r7, #0
    de60:	3014      	adds	r0, #20
    de62:	6839      	ldr	r1, [r7, #0]
    de64:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    de66:	4b33      	ldr	r3, [pc, #204]	; (df34 <mqtt_subscribe+0x12c>)
    de68:	4d33      	ldr	r5, [pc, #204]	; (df38 <mqtt_subscribe+0x130>)
    de6a:	47a8      	blx	r5
    de6c:	1c38      	adds	r0, r7, #0
    de6e:	217e      	movs	r1, #126	; 0x7e
    de70:	3014      	adds	r0, #20
    de72:	4249      	negs	r1, r1
    de74:	4b31      	ldr	r3, [pc, #196]	; (df3c <mqtt_subscribe+0x134>)
    de76:	4798      	blx	r3
    de78:	4d2d      	ldr	r5, [pc, #180]	; (df30 <mqtt_subscribe+0x128>)
    de7a:	e00e      	b.n	de9a <mqtt_subscribe+0x92>
    de7c:	1c03      	adds	r3, r0, #0
    de7e:	3370      	adds	r3, #112	; 0x70
    de80:	781b      	ldrb	r3, [r3, #0]
    de82:	2b00      	cmp	r3, #0
    de84:	d14f      	bne.n	df26 <mqtt_subscribe+0x11e>
    de86:	782b      	ldrb	r3, [r5, #0]
    de88:	071a      	lsls	r2, r3, #28
    de8a:	d5dc      	bpl.n	de46 <mqtt_subscribe+0x3e>
    de8c:	4b2c      	ldr	r3, [pc, #176]	; (df40 <mqtt_subscribe+0x138>)
    de8e:	2000      	movs	r0, #0
    de90:	4798      	blx	r3
    de92:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    de94:	4b2b      	ldr	r3, [pc, #172]	; (df44 <mqtt_subscribe+0x13c>)
    de96:	4798      	blx	r3
    de98:	e7f5      	b.n	de86 <mqtt_subscribe+0x7e>
    de9a:	4b28      	ldr	r3, [pc, #160]	; (df3c <mqtt_subscribe+0x134>)
    de9c:	2e80      	cmp	r6, #128	; 0x80
    de9e:	dd08      	ble.n	deb2 <mqtt_subscribe+0xaa>
    dea0:	2180      	movs	r1, #128	; 0x80
    dea2:	4249      	negs	r1, r1
    dea4:	4331      	orrs	r1, r6
    dea6:	1c38      	adds	r0, r7, #0
    dea8:	b249      	sxtb	r1, r1
    deaa:	3014      	adds	r0, #20
    deac:	4798      	blx	r3
    deae:	11f6      	asrs	r6, r6, #7
    deb0:	e7f3      	b.n	de9a <mqtt_subscribe+0x92>
    deb2:	4925      	ldr	r1, [pc, #148]	; (df48 <mqtt_subscribe+0x140>)
    deb4:	4031      	ands	r1, r6
    deb6:	d504      	bpl.n	dec2 <mqtt_subscribe+0xba>
    deb8:	2280      	movs	r2, #128	; 0x80
    deba:	3901      	subs	r1, #1
    debc:	4252      	negs	r2, r2
    debe:	4311      	orrs	r1, r2
    dec0:	3101      	adds	r1, #1
    dec2:	1c38      	adds	r0, r7, #0
    dec4:	b249      	sxtb	r1, r1
    dec6:	3014      	adds	r0, #20
    dec8:	4798      	blx	r3
    deca:	8821      	ldrh	r1, [r4, #0]
    decc:	1c38      	adds	r0, r7, #0
    dece:	1c4b      	adds	r3, r1, #1
    ded0:	8023      	strh	r3, [r4, #0]
    ded2:	b209      	sxth	r1, r1
    ded4:	3014      	adds	r0, #20
    ded6:	4e1d      	ldr	r6, [pc, #116]	; (df4c <mqtt_subscribe+0x144>)
    ded8:	47b0      	blx	r6
    deda:	8823      	ldrh	r3, [r4, #0]
    dedc:	2b00      	cmp	r3, #0
    dede:	d101      	bne.n	dee4 <mqtt_subscribe+0xdc>
    dee0:	2301      	movs	r3, #1
    dee2:	8023      	strh	r3, [r4, #0]
    dee4:	68b8      	ldr	r0, [r7, #8]
    dee6:	47a8      	blx	r5
    dee8:	b201      	sxth	r1, r0
    deea:	1c38      	adds	r0, r7, #0
    deec:	3014      	adds	r0, #20
    deee:	47b0      	blx	r6
    def0:	68b8      	ldr	r0, [r7, #8]
    def2:	47a8      	blx	r5
    def4:	1c02      	adds	r2, r0, #0
    def6:	1c38      	adds	r0, r7, #0
    def8:	3014      	adds	r0, #20
    defa:	68b9      	ldr	r1, [r7, #8]
    defc:	4b14      	ldr	r3, [pc, #80]	; (df50 <mqtt_subscribe+0x148>)
    defe:	4798      	blx	r3
    df00:	687d      	ldr	r5, [r7, #4]
    df02:	1c38      	adds	r0, r7, #0
    df04:	b269      	sxtb	r1, r5
    df06:	3014      	adds	r0, #20
    df08:	4b0c      	ldr	r3, [pc, #48]	; (df3c <mqtt_subscribe+0x134>)
    df0a:	4798      	blx	r3
    df0c:	1c38      	adds	r0, r7, #0
    df0e:	3014      	adds	r0, #20
    df10:	4b10      	ldr	r3, [pc, #64]	; (df54 <mqtt_subscribe+0x14c>)
    df12:	4798      	blx	r3
    df14:	68fd      	ldr	r5, [r7, #12]
    df16:	2208      	movs	r2, #8
    df18:	782b      	ldrb	r3, [r5, #0]
    df1a:	2000      	movs	r0, #0
    df1c:	4393      	bics	r3, r2
    df1e:	702b      	strb	r3, [r5, #0]
    df20:	e003      	b.n	df2a <mqtt_subscribe+0x122>
    df22:	2080      	movs	r0, #128	; 0x80
    df24:	e000      	b.n	df28 <mqtt_subscribe+0x120>
    df26:	200b      	movs	r0, #11
    df28:	4240      	negs	r0, r0
    df2a:	46bd      	mov	sp, r7
    df2c:	b00b      	add	sp, #44	; 0x2c
    df2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df30:	0001067b 	.word	0x0001067b
    df34:	0000d879 	.word	0x0000d879
    df38:	000079f9 	.word	0x000079f9
    df3c:	00007a25 	.word	0x00007a25
    df40:	0000a741 	.word	0x0000a741
    df44:	00007be9 	.word	0x00007be9
    df48:	8000007f 	.word	0x8000007f
    df4c:	00007a4d 	.word	0x00007a4d
    df50:	00007a65 	.word	0x00007a65
    df54:	00007a09 	.word	0x00007a09

0000df58 <_mqtt_ping>:
    df58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df5a:	23c0      	movs	r3, #192	; 0xc0
    df5c:	a901      	add	r1, sp, #4
    df5e:	2500      	movs	r5, #0
    df60:	700b      	strb	r3, [r1, #0]
    df62:	704d      	strb	r5, [r1, #1]
    df64:	42a8      	cmp	r0, r5
    df66:	d019      	beq.n	df9c <_mqtt_ping+0x44>
    df68:	1c04      	adds	r4, r0, #0
    df6a:	3443      	adds	r4, #67	; 0x43
    df6c:	7823      	ldrb	r3, [r4, #0]
    df6e:	079a      	lsls	r2, r3, #30
    df70:	d516      	bpl.n	dfa0 <_mqtt_ping+0x48>
    df72:	071a      	lsls	r2, r3, #28
    df74:	d416      	bmi.n	dfa4 <_mqtt_ping+0x4c>
    df76:	2608      	movs	r6, #8
    df78:	4333      	orrs	r3, r6
    df7a:	7023      	strb	r3, [r4, #0]
    df7c:	7880      	ldrb	r0, [r0, #2]
    df7e:	1c2b      	adds	r3, r5, #0
    df80:	b240      	sxtb	r0, r0
    df82:	2202      	movs	r2, #2
    df84:	4f09      	ldr	r7, [pc, #36]	; (dfac <_mqtt_ping+0x54>)
    df86:	47b8      	blx	r7
    df88:	1c2b      	adds	r3, r5, #0
    df8a:	42a8      	cmp	r0, r5
    df8c:	da0c      	bge.n	dfa8 <_mqtt_ping+0x50>
    df8e:	7823      	ldrb	r3, [r4, #0]
    df90:	43b3      	bics	r3, r6
    df92:	7023      	strb	r3, [r4, #0]
    df94:	4b06      	ldr	r3, [pc, #24]	; (dfb0 <_mqtt_ping+0x58>)
    df96:	4798      	blx	r3
    df98:	1c03      	adds	r3, r0, #0
    df9a:	e005      	b.n	dfa8 <_mqtt_ping+0x50>
    df9c:	2316      	movs	r3, #22
    df9e:	e002      	b.n	dfa6 <_mqtt_ping+0x4e>
    dfa0:	2380      	movs	r3, #128	; 0x80
    dfa2:	e000      	b.n	dfa6 <_mqtt_ping+0x4e>
    dfa4:	230b      	movs	r3, #11
    dfa6:	425b      	negs	r3, r3
    dfa8:	1c18      	adds	r0, r3, #0
    dfaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    dfac:	0000c4e1 	.word	0x0000c4e1
    dfb0:	0000d829 	.word	0x0000d829

0000dfb4 <mqtt_timer_callback>:
    dfb4:	b570      	push	{r4, r5, r6, lr}
    dfb6:	1c05      	adds	r5, r0, #0
    dfb8:	b086      	sub	sp, #24
    dfba:	1c0e      	adds	r6, r1, #0
    dfbc:	1c14      	adds	r4, r2, #0
    dfbe:	2800      	cmp	r0, #0
    dfc0:	d012      	beq.n	dfe8 <mqtt_timer_callback+0x34>
    dfc2:	2a00      	cmp	r2, #0
    dfc4:	d010      	beq.n	dfe8 <mqtt_timer_callback+0x34>
    dfc6:	1c10      	adds	r0, r2, #0
    dfc8:	4b08      	ldr	r3, [pc, #32]	; (dfec <mqtt_timer_callback+0x38>)
    dfca:	4798      	blx	r3
    dfcc:	2800      	cmp	r0, #0
    dfce:	da04      	bge.n	dfda <mqtt_timer_callback+0x26>
    dfd0:	1c28      	adds	r0, r5, #0
    dfd2:	1c31      	adds	r1, r6, #0
    dfd4:	2200      	movs	r2, #0
    dfd6:	4b06      	ldr	r3, [pc, #24]	; (dff0 <mqtt_timer_callback+0x3c>)
    dfd8:	e005      	b.n	dfe6 <mqtt_timer_callback+0x32>
    dfda:	6d63      	ldr	r3, [r4, #84]	; 0x54
    dfdc:	2b00      	cmp	r3, #0
    dfde:	d003      	beq.n	dfe8 <mqtt_timer_callback+0x34>
    dfe0:	1c20      	adds	r0, r4, #0
    dfe2:	2107      	movs	r1, #7
    dfe4:	aa01      	add	r2, sp, #4
    dfe6:	4798      	blx	r3
    dfe8:	b006      	add	sp, #24
    dfea:	bd70      	pop	{r4, r5, r6, pc}
    dfec:	0000df59 	.word	0x0000df59
    dff0:	00007bad 	.word	0x00007bad

0000dff4 <_mqtt_puback>:
    dff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dff6:	2302      	movs	r3, #2
    dff8:	ac01      	add	r4, sp, #4
    dffa:	2700      	movs	r7, #0
    dffc:	7063      	strb	r3, [r4, #1]
    dffe:	42b8      	cmp	r0, r7
    e000:	d01e      	beq.n	e040 <_mqtt_puback+0x4c>
    e002:	1c05      	adds	r5, r0, #0
    e004:	3543      	adds	r5, #67	; 0x43
    e006:	782b      	ldrb	r3, [r5, #0]
    e008:	079e      	lsls	r6, r3, #30
    e00a:	d51b      	bpl.n	e044 <_mqtt_puback+0x50>
    e00c:	071e      	lsls	r6, r3, #28
    e00e:	d41b      	bmi.n	e048 <_mqtt_puback+0x54>
    e010:	2608      	movs	r6, #8
    e012:	4333      	orrs	r3, r6
    e014:	702b      	strb	r3, [r5, #0]
    e016:	7880      	ldrb	r0, [r0, #2]
    e018:	7021      	strb	r1, [r4, #0]
    e01a:	0a11      	lsrs	r1, r2, #8
    e01c:	70a1      	strb	r1, [r4, #2]
    e01e:	70e2      	strb	r2, [r4, #3]
    e020:	1c21      	adds	r1, r4, #0
    e022:	1c3b      	adds	r3, r7, #0
    e024:	b240      	sxtb	r0, r0
    e026:	2204      	movs	r2, #4
    e028:	4c09      	ldr	r4, [pc, #36]	; (e050 <_mqtt_puback+0x5c>)
    e02a:	47a0      	blx	r4
    e02c:	1c3b      	adds	r3, r7, #0
    e02e:	42b8      	cmp	r0, r7
    e030:	da0c      	bge.n	e04c <_mqtt_puback+0x58>
    e032:	782b      	ldrb	r3, [r5, #0]
    e034:	43b3      	bics	r3, r6
    e036:	702b      	strb	r3, [r5, #0]
    e038:	4b06      	ldr	r3, [pc, #24]	; (e054 <_mqtt_puback+0x60>)
    e03a:	4798      	blx	r3
    e03c:	1c03      	adds	r3, r0, #0
    e03e:	e005      	b.n	e04c <_mqtt_puback+0x58>
    e040:	2316      	movs	r3, #22
    e042:	e002      	b.n	e04a <_mqtt_puback+0x56>
    e044:	2380      	movs	r3, #128	; 0x80
    e046:	e000      	b.n	e04a <_mqtt_puback+0x56>
    e048:	230b      	movs	r3, #11
    e04a:	425b      	negs	r3, r3
    e04c:	1c18      	adds	r0, r3, #0
    e04e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e050:	0000c4e1 	.word	0x0000c4e1
    e054:	0000d829 	.word	0x0000d829

0000e058 <mqtt_clear_conn>:
    e058:	b530      	push	{r4, r5, lr}
    e05a:	1c04      	adds	r4, r0, #0
    e05c:	b087      	sub	sp, #28
    e05e:	2800      	cmp	r0, #0
    e060:	d01c      	beq.n	e09c <mqtt_clear_conn+0x44>
    e062:	2002      	movs	r0, #2
    e064:	4b0e      	ldr	r3, [pc, #56]	; (e0a0 <mqtt_clear_conn+0x48>)
    e066:	5620      	ldrsb	r0, [r4, r0]
    e068:	4798      	blx	r3
    e06a:	1c23      	adds	r3, r4, #0
    e06c:	3343      	adds	r3, #67	; 0x43
    e06e:	781a      	ldrb	r2, [r3, #0]
    e070:	21fc      	movs	r1, #252	; 0xfc
    e072:	0795      	lsls	r5, r2, #30
    e074:	400a      	ands	r2, r1
    e076:	701a      	strb	r2, [r3, #0]
    e078:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e07a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    e07c:	9301      	str	r3, [sp, #4]
    e07e:	2300      	movs	r3, #0
    e080:	64e3      	str	r3, [r4, #76]	; 0x4c
    e082:	6d21      	ldr	r1, [r4, #80]	; 0x50
    e084:	4b07      	ldr	r3, [pc, #28]	; (e0a4 <mqtt_clear_conn+0x4c>)
    e086:	4798      	blx	r3
    e088:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e08a:	0fed      	lsrs	r5, r5, #31
    e08c:	2b00      	cmp	r3, #0
    e08e:	d005      	beq.n	e09c <mqtt_clear_conn+0x44>
    e090:	2d00      	cmp	r5, #0
    e092:	d003      	beq.n	e09c <mqtt_clear_conn+0x44>
    e094:	1c20      	adds	r0, r4, #0
    e096:	2105      	movs	r1, #5
    e098:	aa01      	add	r2, sp, #4
    e09a:	4798      	blx	r3
    e09c:	b007      	add	sp, #28
    e09e:	bd30      	pop	{r4, r5, pc}
    e0a0:	0000c60d 	.word	0x0000c60d
    e0a4:	00007bd9 	.word	0x00007bd9

0000e0a8 <mqtt_disconnect>:
    e0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e0aa:	23e0      	movs	r3, #224	; 0xe0
    e0ac:	ae01      	add	r6, sp, #4
    e0ae:	2700      	movs	r7, #0
    e0b0:	1c05      	adds	r5, r0, #0
    e0b2:	7033      	strb	r3, [r6, #0]
    e0b4:	7077      	strb	r7, [r6, #1]
    e0b6:	42b8      	cmp	r0, r7
    e0b8:	d036      	beq.n	e128 <mqtt_disconnect+0x80>
    e0ba:	1c04      	adds	r4, r0, #0
    e0bc:	3443      	adds	r4, #67	; 0x43
    e0be:	7823      	ldrb	r3, [r4, #0]
    e0c0:	079a      	lsls	r2, r3, #30
    e0c2:	d533      	bpl.n	e12c <mqtt_disconnect+0x84>
    e0c4:	42b9      	cmp	r1, r7
    e0c6:	d12b      	bne.n	e120 <mqtt_disconnect+0x78>
    e0c8:	071a      	lsls	r2, r3, #28
    e0ca:	d414      	bmi.n	e0f6 <mqtt_disconnect+0x4e>
    e0cc:	7823      	ldrb	r3, [r4, #0]
    e0ce:	2210      	movs	r2, #16
    e0d0:	4313      	orrs	r3, r2
    e0d2:	2708      	movs	r7, #8
    e0d4:	433b      	orrs	r3, r7
    e0d6:	7023      	strb	r3, [r4, #0]
    e0d8:	2002      	movs	r0, #2
    e0da:	5628      	ldrsb	r0, [r5, r0]
    e0dc:	1c31      	adds	r1, r6, #0
    e0de:	2202      	movs	r2, #2
    e0e0:	2300      	movs	r3, #0
    e0e2:	4d15      	ldr	r5, [pc, #84]	; (e138 <mqtt_disconnect+0x90>)
    e0e4:	47a8      	blx	r5
    e0e6:	2800      	cmp	r0, #0
    e0e8:	da14      	bge.n	e114 <mqtt_disconnect+0x6c>
    e0ea:	7823      	ldrb	r3, [r4, #0]
    e0ec:	43bb      	bics	r3, r7
    e0ee:	7023      	strb	r3, [r4, #0]
    e0f0:	4b12      	ldr	r3, [pc, #72]	; (e13c <mqtt_disconnect+0x94>)
    e0f2:	4798      	blx	r3
    e0f4:	e01e      	b.n	e134 <mqtt_disconnect+0x8c>
    e0f6:	1c03      	adds	r3, r0, #0
    e0f8:	3370      	adds	r3, #112	; 0x70
    e0fa:	781b      	ldrb	r3, [r3, #0]
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d117      	bne.n	e130 <mqtt_disconnect+0x88>
    e100:	7823      	ldrb	r3, [r4, #0]
    e102:	071a      	lsls	r2, r3, #28
    e104:	d5e2      	bpl.n	e0cc <mqtt_disconnect+0x24>
    e106:	4b0e      	ldr	r3, [pc, #56]	; (e140 <mqtt_disconnect+0x98>)
    e108:	2000      	movs	r0, #0
    e10a:	4798      	blx	r3
    e10c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    e10e:	4b0d      	ldr	r3, [pc, #52]	; (e144 <mqtt_disconnect+0x9c>)
    e110:	4798      	blx	r3
    e112:	e7f5      	b.n	e100 <mqtt_disconnect+0x58>
    e114:	7823      	ldrb	r3, [r4, #0]
    e116:	2202      	movs	r2, #2
    e118:	4393      	bics	r3, r2
    e11a:	7023      	strb	r3, [r4, #0]
    e11c:	2000      	movs	r0, #0
    e11e:	e009      	b.n	e134 <mqtt_disconnect+0x8c>
    e120:	4b09      	ldr	r3, [pc, #36]	; (e148 <mqtt_disconnect+0xa0>)
    e122:	4798      	blx	r3
    e124:	1c38      	adds	r0, r7, #0
    e126:	e005      	b.n	e134 <mqtt_disconnect+0x8c>
    e128:	2016      	movs	r0, #22
    e12a:	e002      	b.n	e132 <mqtt_disconnect+0x8a>
    e12c:	2080      	movs	r0, #128	; 0x80
    e12e:	e000      	b.n	e132 <mqtt_disconnect+0x8a>
    e130:	200b      	movs	r0, #11
    e132:	4240      	negs	r0, r0
    e134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e136:	46c0      	nop			; (mov r8, r8)
    e138:	0000c4e1 	.word	0x0000c4e1
    e13c:	0000d829 	.word	0x0000d829
    e140:	0000a741 	.word	0x0000a741
    e144:	00007be9 	.word	0x00007be9
    e148:	0000e059 	.word	0x0000e059

0000e14c <_mqtt_recv_handler>:
    e14c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e14e:	1c04      	adds	r4, r0, #0
    e150:	6e40      	ldr	r0, [r0, #100]	; 0x64
    e152:	230f      	movs	r3, #15
    e154:	7802      	ldrb	r2, [r0, #0]
    e156:	b087      	sub	sp, #28
    e158:	1c15      	adds	r5, r2, #0
    e15a:	439d      	bics	r5, r3
    e15c:	2d50      	cmp	r5, #80	; 0x50
    e15e:	d100      	bne.n	e162 <_mqtt_recv_handler+0x16>
    e160:	e098      	b.n	e294 <_mqtt_recv_handler+0x148>
    e162:	d808      	bhi.n	e176 <_mqtt_recv_handler+0x2a>
    e164:	2d30      	cmp	r5, #48	; 0x30
    e166:	d03f      	beq.n	e1e8 <_mqtt_recv_handler+0x9c>
    e168:	2d40      	cmp	r5, #64	; 0x40
    e16a:	d100      	bne.n	e16e <_mqtt_recv_handler+0x22>
    e16c:	e0b3      	b.n	e2d6 <_mqtt_recv_handler+0x18a>
    e16e:	2d20      	cmp	r5, #32
    e170:	d000      	beq.n	e174 <_mqtt_recv_handler+0x28>
    e172:	e0c3      	b.n	e2fc <_mqtt_recv_handler+0x1b0>
    e174:	e00e      	b.n	e194 <_mqtt_recv_handler+0x48>
    e176:	2d70      	cmp	r5, #112	; 0x70
    e178:	d100      	bne.n	e17c <_mqtt_recv_handler+0x30>
    e17a:	e0ac      	b.n	e2d6 <_mqtt_recv_handler+0x18a>
    e17c:	d803      	bhi.n	e186 <_mqtt_recv_handler+0x3a>
    e17e:	2d60      	cmp	r5, #96	; 0x60
    e180:	d100      	bne.n	e184 <_mqtt_recv_handler+0x38>
    e182:	e096      	b.n	e2b2 <_mqtt_recv_handler+0x166>
    e184:	e0ba      	b.n	e2fc <_mqtt_recv_handler+0x1b0>
    e186:	2d90      	cmp	r5, #144	; 0x90
    e188:	d100      	bne.n	e18c <_mqtt_recv_handler+0x40>
    e18a:	e0aa      	b.n	e2e2 <_mqtt_recv_handler+0x196>
    e18c:	2db0      	cmp	r5, #176	; 0xb0
    e18e:	d100      	bne.n	e192 <_mqtt_recv_handler+0x46>
    e190:	e0ad      	b.n	e2ee <_mqtt_recv_handler+0x1a2>
    e192:	e0b3      	b.n	e2fc <_mqtt_recv_handler+0x1b0>
    e194:	aa01      	add	r2, sp, #4
    e196:	2303      	movs	r3, #3
    e198:	2901      	cmp	r1, #1
    e19a:	d900      	bls.n	e19e <_mqtt_recv_handler+0x52>
    e19c:	78c3      	ldrb	r3, [r0, #3]
    e19e:	7013      	strb	r3, [r2, #0]
    e1a0:	7813      	ldrb	r3, [r2, #0]
    e1a2:	2b00      	cmp	r3, #0
    e1a4:	d00d      	beq.n	e1c2 <_mqtt_recv_handler+0x76>
    e1a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	d002      	beq.n	e1b2 <_mqtt_recv_handler+0x66>
    e1ac:	1c20      	adds	r0, r4, #0
    e1ae:	2101      	movs	r1, #1
    e1b0:	4798      	blx	r3
    e1b2:	236f      	movs	r3, #111	; 0x6f
    e1b4:	425b      	negs	r3, r3
    e1b6:	64e3      	str	r3, [r4, #76]	; 0x4c
    e1b8:	1c20      	adds	r0, r4, #0
    e1ba:	2100      	movs	r1, #0
    e1bc:	4b50      	ldr	r3, [pc, #320]	; (e300 <_mqtt_recv_handler+0x1b4>)
    e1be:	4798      	blx	r3
    e1c0:	e09c      	b.n	e2fc <_mqtt_recv_handler+0x1b0>
    e1c2:	1c23      	adds	r3, r4, #0
    e1c4:	3343      	adds	r3, #67	; 0x43
    e1c6:	7819      	ldrb	r1, [r3, #0]
    e1c8:	0789      	lsls	r1, r1, #30
    e1ca:	0fc9      	lsrs	r1, r1, #31
    e1cc:	d105      	bne.n	e1da <_mqtt_recv_handler+0x8e>
    e1ce:	781a      	ldrb	r2, [r3, #0]
    e1d0:	64e1      	str	r1, [r4, #76]	; 0x4c
    e1d2:	2102      	movs	r1, #2
    e1d4:	430a      	orrs	r2, r1
    e1d6:	701a      	strb	r2, [r3, #0]
    e1d8:	e090      	b.n	e2fc <_mqtt_recv_handler+0x1b0>
    e1da:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e1dc:	2b00      	cmp	r3, #0
    e1de:	d100      	bne.n	e1e2 <_mqtt_recv_handler+0x96>
    e1e0:	e08c      	b.n	e2fc <_mqtt_recv_handler+0x1b0>
    e1e2:	1c20      	adds	r0, r4, #0
    e1e4:	2101      	movs	r1, #1
    e1e6:	e088      	b.n	e2fa <_mqtt_recv_handler+0x1ae>
    e1e8:	ad01      	add	r5, sp, #4
    e1ea:	0713      	lsls	r3, r2, #28
    e1ec:	7c2a      	ldrb	r2, [r5, #16]
    e1ee:	0fdb      	lsrs	r3, r3, #31
    e1f0:	2604      	movs	r6, #4
    e1f2:	009b      	lsls	r3, r3, #2
    e1f4:	43b2      	bics	r2, r6
    e1f6:	431a      	orrs	r2, r3
    e1f8:	742a      	strb	r2, [r5, #16]
    e1fa:	7807      	ldrb	r7, [r0, #0]
    e1fc:	2303      	movs	r3, #3
    e1fe:	b2d2      	uxtb	r2, r2
    e200:	087f      	lsrs	r7, r7, #1
    e202:	439a      	bics	r2, r3
    e204:	401f      	ands	r7, r3
    e206:	1c13      	adds	r3, r2, #0
    e208:	433b      	orrs	r3, r7
    e20a:	742b      	strb	r3, [r5, #16]
    e20c:	1c43      	adds	r3, r0, #1
    e20e:	7818      	ldrb	r0, [r3, #0]
    e210:	1c5a      	adds	r2, r3, #1
    e212:	287f      	cmp	r0, #127	; 0x7f
    e214:	d901      	bls.n	e21a <_mqtt_recv_handler+0xce>
    e216:	1c13      	adds	r3, r2, #0
    e218:	e7f9      	b.n	e20e <_mqtt_recv_handler+0xc2>
    e21a:	7858      	ldrb	r0, [r3, #1]
    e21c:	789e      	ldrb	r6, [r3, #2]
    e21e:	0200      	lsls	r0, r0, #8
    e220:	4330      	orrs	r0, r6
    e222:	3303      	adds	r3, #3
    e224:	2600      	movs	r6, #0
    e226:	6068      	str	r0, [r5, #4]
    e228:	9301      	str	r3, [sp, #4]
    e22a:	1818      	adds	r0, r3, r0
    e22c:	42b7      	cmp	r7, r6
    e22e:	d004      	beq.n	e23a <_mqtt_recv_handler+0xee>
    e230:	7806      	ldrb	r6, [r0, #0]
    e232:	7843      	ldrb	r3, [r0, #1]
    e234:	0236      	lsls	r6, r6, #8
    e236:	431e      	orrs	r6, r3
    e238:	3002      	adds	r0, #2
    e23a:	1851      	adds	r1, r2, r1
    e23c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e23e:	60a8      	str	r0, [r5, #8]
    e240:	1a08      	subs	r0, r1, r0
    e242:	60e8      	str	r0, [r5, #12]
    e244:	2b00      	cmp	r3, #0
    e246:	d003      	beq.n	e250 <_mqtt_recv_handler+0x104>
    e248:	1c20      	adds	r0, r4, #0
    e24a:	2106      	movs	r1, #6
    e24c:	1c2a      	adds	r2, r5, #0
    e24e:	4798      	blx	r3
    e250:	7c2b      	ldrb	r3, [r5, #16]
    e252:	079b      	lsls	r3, r3, #30
    e254:	0f9b      	lsrs	r3, r3, #30
    e256:	2b01      	cmp	r3, #1
    e258:	d10b      	bne.n	e272 <_mqtt_recv_handler+0x126>
    e25a:	b2b6      	uxth	r6, r6
    e25c:	1c20      	adds	r0, r4, #0
    e25e:	2140      	movs	r1, #64	; 0x40
    e260:	1c32      	adds	r2, r6, #0
    e262:	4b28      	ldr	r3, [pc, #160]	; (e304 <_mqtt_recv_handler+0x1b8>)
    e264:	4798      	blx	r3
    e266:	2800      	cmp	r0, #0
    e268:	d048      	beq.n	e2fc <_mqtt_recv_handler+0x1b0>
    e26a:	1c23      	adds	r3, r4, #0
    e26c:	3348      	adds	r3, #72	; 0x48
    e26e:	2240      	movs	r2, #64	; 0x40
    e270:	e00c      	b.n	e28c <_mqtt_recv_handler+0x140>
    e272:	2b02      	cmp	r3, #2
    e274:	d142      	bne.n	e2fc <_mqtt_recv_handler+0x1b0>
    e276:	b2b6      	uxth	r6, r6
    e278:	1c20      	adds	r0, r4, #0
    e27a:	2150      	movs	r1, #80	; 0x50
    e27c:	1c32      	adds	r2, r6, #0
    e27e:	4b21      	ldr	r3, [pc, #132]	; (e304 <_mqtt_recv_handler+0x1b8>)
    e280:	4798      	blx	r3
    e282:	2800      	cmp	r0, #0
    e284:	d03a      	beq.n	e2fc <_mqtt_recv_handler+0x1b0>
    e286:	1c23      	adds	r3, r4, #0
    e288:	3348      	adds	r3, #72	; 0x48
    e28a:	2250      	movs	r2, #80	; 0x50
    e28c:	344a      	adds	r4, #74	; 0x4a
    e28e:	701a      	strb	r2, [r3, #0]
    e290:	8026      	strh	r6, [r4, #0]
    e292:	e033      	b.n	e2fc <_mqtt_recv_handler+0x1b0>
    e294:	7885      	ldrb	r5, [r0, #2]
    e296:	78c3      	ldrb	r3, [r0, #3]
    e298:	022d      	lsls	r5, r5, #8
    e29a:	431d      	orrs	r5, r3
    e29c:	1c20      	adds	r0, r4, #0
    e29e:	2162      	movs	r1, #98	; 0x62
    e2a0:	1c2a      	adds	r2, r5, #0
    e2a2:	4b18      	ldr	r3, [pc, #96]	; (e304 <_mqtt_recv_handler+0x1b8>)
    e2a4:	4798      	blx	r3
    e2a6:	2800      	cmp	r0, #0
    e2a8:	d028      	beq.n	e2fc <_mqtt_recv_handler+0x1b0>
    e2aa:	1c23      	adds	r3, r4, #0
    e2ac:	3348      	adds	r3, #72	; 0x48
    e2ae:	2260      	movs	r2, #96	; 0x60
    e2b0:	e00d      	b.n	e2ce <_mqtt_recv_handler+0x182>
    e2b2:	7885      	ldrb	r5, [r0, #2]
    e2b4:	78c3      	ldrb	r3, [r0, #3]
    e2b6:	022d      	lsls	r5, r5, #8
    e2b8:	431d      	orrs	r5, r3
    e2ba:	1c20      	adds	r0, r4, #0
    e2bc:	2170      	movs	r1, #112	; 0x70
    e2be:	1c2a      	adds	r2, r5, #0
    e2c0:	4b10      	ldr	r3, [pc, #64]	; (e304 <_mqtt_recv_handler+0x1b8>)
    e2c2:	4798      	blx	r3
    e2c4:	2800      	cmp	r0, #0
    e2c6:	d019      	beq.n	e2fc <_mqtt_recv_handler+0x1b0>
    e2c8:	1c23      	adds	r3, r4, #0
    e2ca:	3348      	adds	r3, #72	; 0x48
    e2cc:	2270      	movs	r2, #112	; 0x70
    e2ce:	344a      	adds	r4, #74	; 0x4a
    e2d0:	701a      	strb	r2, [r3, #0]
    e2d2:	8025      	strh	r5, [r4, #0]
    e2d4:	e012      	b.n	e2fc <_mqtt_recv_handler+0x1b0>
    e2d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e2d8:	2b00      	cmp	r3, #0
    e2da:	d00f      	beq.n	e2fc <_mqtt_recv_handler+0x1b0>
    e2dc:	1c20      	adds	r0, r4, #0
    e2de:	2102      	movs	r1, #2
    e2e0:	e00a      	b.n	e2f8 <_mqtt_recv_handler+0x1ac>
    e2e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d009      	beq.n	e2fc <_mqtt_recv_handler+0x1b0>
    e2e8:	1c20      	adds	r0, r4, #0
    e2ea:	2103      	movs	r1, #3
    e2ec:	e004      	b.n	e2f8 <_mqtt_recv_handler+0x1ac>
    e2ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e2f0:	2b00      	cmp	r3, #0
    e2f2:	d003      	beq.n	e2fc <_mqtt_recv_handler+0x1b0>
    e2f4:	1c20      	adds	r0, r4, #0
    e2f6:	2104      	movs	r1, #4
    e2f8:	aa01      	add	r2, sp, #4
    e2fa:	4798      	blx	r3
    e2fc:	b007      	add	sp, #28
    e2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e300:	0000e0a9 	.word	0x0000e0a9
    e304:	0000dff5 	.word	0x0000dff5

0000e308 <mqtt_recv_packet>:
    e308:	b538      	push	{r3, r4, r5, lr}
    e30a:	1e04      	subs	r4, r0, #0
    e30c:	d017      	beq.n	e33e <mqtt_recv_packet+0x36>
    e30e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e310:	6e83      	ldr	r3, [r0, #104]	; 0x68
    e312:	429a      	cmp	r2, r3
    e314:	d906      	bls.n	e324 <mqtt_recv_packet+0x1c>
    e316:	238b      	movs	r3, #139	; 0x8b
    e318:	425b      	negs	r3, r3
    e31a:	64c3      	str	r3, [r0, #76]	; 0x4c
    e31c:	2100      	movs	r1, #0
    e31e:	4b08      	ldr	r3, [pc, #32]	; (e340 <mqtt_recv_packet+0x38>)
    e320:	4798      	blx	r3
    e322:	e00c      	b.n	e33e <mqtt_recv_packet+0x36>
    e324:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e326:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e328:	2002      	movs	r0, #2
    e32a:	1899      	adds	r1, r3, r2
    e32c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e32e:	5620      	ldrsb	r0, [r4, r0]
    e330:	1a9a      	subs	r2, r3, r2
    e332:	b292      	uxth	r2, r2
    e334:	2300      	movs	r3, #0
    e336:	4d03      	ldr	r5, [pc, #12]	; (e344 <mqtt_recv_packet+0x3c>)
    e338:	47a8      	blx	r5
    e33a:	2800      	cmp	r0, #0
    e33c:	d1f2      	bne.n	e324 <mqtt_recv_packet+0x1c>
    e33e:	bd38      	pop	{r3, r4, r5, pc}
    e340:	0000e0a9 	.word	0x0000e0a9
    e344:	0000c579 	.word	0x0000c579

0000e348 <mqtt_recved_packet>:
    e348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e34a:	1e04      	subs	r4, r0, #0
    e34c:	d042      	beq.n	e3d4 <mqtt_recved_packet+0x8c>
    e34e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e350:	6e67      	ldr	r7, [r4, #100]	; 0x64
    e352:	18ca      	adds	r2, r1, r3
    e354:	2301      	movs	r3, #1
    e356:	9701      	str	r7, [sp, #4]
    e358:	6462      	str	r2, [r4, #68]	; 0x44
    e35a:	2600      	movs	r6, #0
    e35c:	1c1d      	adds	r5, r3, #0
    e35e:	42a9      	cmp	r1, r5
    e360:	dc03      	bgt.n	e36a <mqtt_recved_packet+0x22>
    e362:	1c20      	adds	r0, r4, #0
    e364:	4b1c      	ldr	r3, [pc, #112]	; (e3d8 <mqtt_recved_packet+0x90>)
    e366:	4798      	blx	r3
    e368:	e034      	b.n	e3d4 <mqtt_recved_packet+0x8c>
    e36a:	9f01      	ldr	r7, [sp, #4]
    e36c:	5d78      	ldrb	r0, [r7, r5]
    e36e:	01df      	lsls	r7, r3, #7
    e370:	46bc      	mov	ip, r7
    e372:	2d03      	cmp	r5, #3
    e374:	d101      	bne.n	e37a <mqtt_recved_packet+0x32>
    e376:	234d      	movs	r3, #77	; 0x4d
    e378:	e00e      	b.n	e398 <mqtt_recved_packet+0x50>
    e37a:	277f      	movs	r7, #127	; 0x7f
    e37c:	4007      	ands	r7, r0
    e37e:	437b      	muls	r3, r7
    e380:	b240      	sxtb	r0, r0
    e382:	3501      	adds	r5, #1
    e384:	18f6      	adds	r6, r6, r3
    e386:	2800      	cmp	r0, #0
    e388:	da01      	bge.n	e38e <mqtt_recved_packet+0x46>
    e38a:	4663      	mov	r3, ip
    e38c:	e7e7      	b.n	e35e <mqtt_recved_packet+0x16>
    e38e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e390:	19af      	adds	r7, r5, r6
    e392:	429f      	cmp	r7, r3
    e394:	d907      	bls.n	e3a6 <mqtt_recved_packet+0x5e>
    e396:	238b      	movs	r3, #139	; 0x8b
    e398:	425b      	negs	r3, r3
    e39a:	64e3      	str	r3, [r4, #76]	; 0x4c
    e39c:	1c20      	adds	r0, r4, #0
    e39e:	2100      	movs	r1, #0
    e3a0:	4b0e      	ldr	r3, [pc, #56]	; (e3dc <mqtt_recved_packet+0x94>)
    e3a2:	4798      	blx	r3
    e3a4:	e016      	b.n	e3d4 <mqtt_recved_packet+0x8c>
    e3a6:	42ba      	cmp	r2, r7
    e3a8:	d314      	bcc.n	e3d4 <mqtt_recved_packet+0x8c>
    e3aa:	4b0d      	ldr	r3, [pc, #52]	; (e3e0 <mqtt_recved_packet+0x98>)
    e3ac:	1c20      	adds	r0, r4, #0
    e3ae:	1c31      	adds	r1, r6, #0
    e3b0:	4798      	blx	r3
    e3b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e3b4:	42bb      	cmp	r3, r7
    e3b6:	d102      	bne.n	e3be <mqtt_recved_packet+0x76>
    e3b8:	2300      	movs	r3, #0
    e3ba:	6463      	str	r3, [r4, #68]	; 0x44
    e3bc:	e00a      	b.n	e3d4 <mqtt_recved_packet+0x8c>
    e3be:	1b9e      	subs	r6, r3, r6
    e3c0:	9b01      	ldr	r3, [sp, #4]
    e3c2:	1b75      	subs	r5, r6, r5
    e3c4:	19d9      	adds	r1, r3, r7
    e3c6:	1c18      	adds	r0, r3, #0
    e3c8:	1c2a      	adds	r2, r5, #0
    e3ca:	4b06      	ldr	r3, [pc, #24]	; (e3e4 <mqtt_recved_packet+0x9c>)
    e3cc:	4798      	blx	r3
    e3ce:	6465      	str	r5, [r4, #68]	; 0x44
    e3d0:	2100      	movs	r1, #0
    e3d2:	e7bc      	b.n	e34e <mqtt_recved_packet+0x6>
    e3d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e3d6:	46c0      	nop			; (mov r8, r8)
    e3d8:	0000e309 	.word	0x0000e309
    e3dc:	0000e0a9 	.word	0x0000e0a9
    e3e0:	0000e14d 	.word	0x0000e14d
    e3e4:	00010193 	.word	0x00010193

0000e3e8 <mqtt_socket_event_handler>:
    e3e8:	b570      	push	{r4, r5, r6, lr}
    e3ea:	4d37      	ldr	r5, [pc, #220]	; (e4c8 <mqtt_socket_event_handler+0xe0>)
    e3ec:	0086      	lsls	r6, r0, #2
    e3ee:	5974      	ldr	r4, [r6, r5]
    e3f0:	b086      	sub	sp, #24
    e3f2:	2c00      	cmp	r4, #0
    e3f4:	d066      	beq.n	e4c4 <mqtt_socket_event_handler+0xdc>
    e3f6:	2906      	cmp	r1, #6
    e3f8:	d02b      	beq.n	e452 <mqtt_socket_event_handler+0x6a>
    e3fa:	2907      	cmp	r1, #7
    e3fc:	d039      	beq.n	e472 <mqtt_socket_event_handler+0x8a>
    e3fe:	2905      	cmp	r1, #5
    e400:	d160      	bne.n	e4c4 <mqtt_socket_event_handler+0xdc>
    e402:	2001      	movs	r0, #1
    e404:	5610      	ldrsb	r0, [r2, r0]
    e406:	4b31      	ldr	r3, [pc, #196]	; (e4cc <mqtt_socket_event_handler+0xe4>)
    e408:	4798      	blx	r3
    e40a:	9001      	str	r0, [sp, #4]
    e40c:	2800      	cmp	r0, #0
    e40e:	da06      	bge.n	e41e <mqtt_socket_event_handler+0x36>
    e410:	2002      	movs	r0, #2
    e412:	4b2f      	ldr	r3, [pc, #188]	; (e4d0 <mqtt_socket_event_handler+0xe8>)
    e414:	5620      	ldrsb	r0, [r4, r0]
    e416:	4798      	blx	r3
    e418:	2300      	movs	r3, #0
    e41a:	5173      	str	r3, [r6, r5]
    e41c:	e011      	b.n	e442 <mqtt_socket_event_handler+0x5a>
    e41e:	1c23      	adds	r3, r4, #0
    e420:	3343      	adds	r3, #67	; 0x43
    e422:	781a      	ldrb	r2, [r3, #0]
    e424:	2101      	movs	r1, #1
    e426:	430a      	orrs	r2, r1
    e428:	701a      	strb	r2, [r3, #0]
    e42a:	331d      	adds	r3, #29
    e42c:	881b      	ldrh	r3, [r3, #0]
    e42e:	2b00      	cmp	r3, #0
    e430:	d004      	beq.n	e43c <mqtt_socket_event_handler+0x54>
    e432:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    e434:	6d21      	ldr	r1, [r4, #80]	; 0x50
    e436:	2200      	movs	r2, #0
    e438:	4b26      	ldr	r3, [pc, #152]	; (e4d4 <mqtt_socket_event_handler+0xec>)
    e43a:	4798      	blx	r3
    e43c:	1c20      	adds	r0, r4, #0
    e43e:	4b26      	ldr	r3, [pc, #152]	; (e4d8 <mqtt_socket_event_handler+0xf0>)
    e440:	4798      	blx	r3
    e442:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e444:	2b00      	cmp	r3, #0
    e446:	d03d      	beq.n	e4c4 <mqtt_socket_event_handler+0xdc>
    e448:	1c20      	adds	r0, r4, #0
    e44a:	2100      	movs	r1, #0
    e44c:	aa01      	add	r2, sp, #4
    e44e:	4798      	blx	r3
    e450:	e038      	b.n	e4c4 <mqtt_socket_event_handler+0xdc>
    e452:	2304      	movs	r3, #4
    e454:	5ed1      	ldrsh	r1, [r2, r3]
    e456:	2900      	cmp	r1, #0
    e458:	dd03      	ble.n	e462 <mqtt_socket_event_handler+0x7a>
    e45a:	1c20      	adds	r0, r4, #0
    e45c:	4b1f      	ldr	r3, [pc, #124]	; (e4dc <mqtt_socket_event_handler+0xf4>)
    e45e:	4798      	blx	r3
    e460:	e003      	b.n	e46a <mqtt_socket_event_handler+0x82>
    e462:	1c0b      	adds	r3, r1, #0
    e464:	1c08      	adds	r0, r1, #0
    e466:	330d      	adds	r3, #13
    e468:	d11a      	bne.n	e4a0 <mqtt_socket_event_handler+0xb8>
    e46a:	4b1b      	ldr	r3, [pc, #108]	; (e4d8 <mqtt_socket_event_handler+0xf0>)
    e46c:	1c20      	adds	r0, r4, #0
    e46e:	4798      	blx	r3
    e470:	e028      	b.n	e4c4 <mqtt_socket_event_handler+0xdc>
    e472:	1c23      	adds	r3, r4, #0
    e474:	3343      	adds	r3, #67	; 0x43
    e476:	8810      	ldrh	r0, [r2, #0]
    e478:	781a      	ldrb	r2, [r3, #0]
    e47a:	0751      	lsls	r1, r2, #29
    e47c:	d402      	bmi.n	e484 <mqtt_socket_event_handler+0x9c>
    e47e:	2108      	movs	r1, #8
    e480:	438a      	bics	r2, r1
    e482:	701a      	strb	r2, [r3, #0]
    e484:	781a      	ldrb	r2, [r3, #0]
    e486:	2104      	movs	r1, #4
    e488:	438a      	bics	r2, r1
    e48a:	701a      	strb	r2, [r3, #0]
    e48c:	06d3      	lsls	r3, r2, #27
    e48e:	0fde      	lsrs	r6, r3, #31
    e490:	b200      	sxth	r0, r0
    e492:	2b00      	cmp	r3, #0
    e494:	db02      	blt.n	e49c <mqtt_socket_event_handler+0xb4>
    e496:	2800      	cmp	r0, #0
    e498:	da08      	bge.n	e4ac <mqtt_socket_event_handler+0xc4>
    e49a:	e001      	b.n	e4a0 <mqtt_socket_event_handler+0xb8>
    e49c:	2800      	cmp	r0, #0
    e49e:	da02      	bge.n	e4a6 <mqtt_socket_event_handler+0xbe>
    e4a0:	4b0a      	ldr	r3, [pc, #40]	; (e4cc <mqtt_socket_event_handler+0xe4>)
    e4a2:	4798      	blx	r3
    e4a4:	64e0      	str	r0, [r4, #76]	; 0x4c
    e4a6:	1c20      	adds	r0, r4, #0
    e4a8:	4b0d      	ldr	r3, [pc, #52]	; (e4e0 <mqtt_socket_event_handler+0xf8>)
    e4aa:	e7e0      	b.n	e46e <mqtt_socket_event_handler+0x86>
    e4ac:	1c25      	adds	r5, r4, #0
    e4ae:	3548      	adds	r5, #72	; 0x48
    e4b0:	7829      	ldrb	r1, [r5, #0]
    e4b2:	2900      	cmp	r1, #0
    e4b4:	d006      	beq.n	e4c4 <mqtt_socket_event_handler+0xdc>
    e4b6:	1c23      	adds	r3, r4, #0
    e4b8:	334a      	adds	r3, #74	; 0x4a
    e4ba:	881a      	ldrh	r2, [r3, #0]
    e4bc:	1c20      	adds	r0, r4, #0
    e4be:	4b09      	ldr	r3, [pc, #36]	; (e4e4 <mqtt_socket_event_handler+0xfc>)
    e4c0:	4798      	blx	r3
    e4c2:	702e      	strb	r6, [r5, #0]
    e4c4:	b006      	add	sp, #24
    e4c6:	bd70      	pop	{r4, r5, r6, pc}
    e4c8:	2000029c 	.word	0x2000029c
    e4cc:	0000d829 	.word	0x0000d829
    e4d0:	0000c60d 	.word	0x0000c60d
    e4d4:	00007bad 	.word	0x00007bad
    e4d8:	0000e309 	.word	0x0000e309
    e4dc:	0000e349 	.word	0x0000e349
    e4e0:	0000e059 	.word	0x0000e059
    e4e4:	0000dff5 	.word	0x0000dff5

0000e4e8 <__gnu_thumb1_case_uqi>:
    e4e8:	b402      	push	{r1}
    e4ea:	4671      	mov	r1, lr
    e4ec:	0849      	lsrs	r1, r1, #1
    e4ee:	0049      	lsls	r1, r1, #1
    e4f0:	5c09      	ldrb	r1, [r1, r0]
    e4f2:	0049      	lsls	r1, r1, #1
    e4f4:	448e      	add	lr, r1
    e4f6:	bc02      	pop	{r1}
    e4f8:	4770      	bx	lr
    e4fa:	46c0      	nop			; (mov r8, r8)

0000e4fc <__udivsi3>:
    e4fc:	2200      	movs	r2, #0
    e4fe:	0843      	lsrs	r3, r0, #1
    e500:	428b      	cmp	r3, r1
    e502:	d374      	bcc.n	e5ee <__udivsi3+0xf2>
    e504:	0903      	lsrs	r3, r0, #4
    e506:	428b      	cmp	r3, r1
    e508:	d35f      	bcc.n	e5ca <__udivsi3+0xce>
    e50a:	0a03      	lsrs	r3, r0, #8
    e50c:	428b      	cmp	r3, r1
    e50e:	d344      	bcc.n	e59a <__udivsi3+0x9e>
    e510:	0b03      	lsrs	r3, r0, #12
    e512:	428b      	cmp	r3, r1
    e514:	d328      	bcc.n	e568 <__udivsi3+0x6c>
    e516:	0c03      	lsrs	r3, r0, #16
    e518:	428b      	cmp	r3, r1
    e51a:	d30d      	bcc.n	e538 <__udivsi3+0x3c>
    e51c:	22ff      	movs	r2, #255	; 0xff
    e51e:	0209      	lsls	r1, r1, #8
    e520:	ba12      	rev	r2, r2
    e522:	0c03      	lsrs	r3, r0, #16
    e524:	428b      	cmp	r3, r1
    e526:	d302      	bcc.n	e52e <__udivsi3+0x32>
    e528:	1212      	asrs	r2, r2, #8
    e52a:	0209      	lsls	r1, r1, #8
    e52c:	d065      	beq.n	e5fa <__udivsi3+0xfe>
    e52e:	0b03      	lsrs	r3, r0, #12
    e530:	428b      	cmp	r3, r1
    e532:	d319      	bcc.n	e568 <__udivsi3+0x6c>
    e534:	e000      	b.n	e538 <__udivsi3+0x3c>
    e536:	0a09      	lsrs	r1, r1, #8
    e538:	0bc3      	lsrs	r3, r0, #15
    e53a:	428b      	cmp	r3, r1
    e53c:	d301      	bcc.n	e542 <__udivsi3+0x46>
    e53e:	03cb      	lsls	r3, r1, #15
    e540:	1ac0      	subs	r0, r0, r3
    e542:	4152      	adcs	r2, r2
    e544:	0b83      	lsrs	r3, r0, #14
    e546:	428b      	cmp	r3, r1
    e548:	d301      	bcc.n	e54e <__udivsi3+0x52>
    e54a:	038b      	lsls	r3, r1, #14
    e54c:	1ac0      	subs	r0, r0, r3
    e54e:	4152      	adcs	r2, r2
    e550:	0b43      	lsrs	r3, r0, #13
    e552:	428b      	cmp	r3, r1
    e554:	d301      	bcc.n	e55a <__udivsi3+0x5e>
    e556:	034b      	lsls	r3, r1, #13
    e558:	1ac0      	subs	r0, r0, r3
    e55a:	4152      	adcs	r2, r2
    e55c:	0b03      	lsrs	r3, r0, #12
    e55e:	428b      	cmp	r3, r1
    e560:	d301      	bcc.n	e566 <__udivsi3+0x6a>
    e562:	030b      	lsls	r3, r1, #12
    e564:	1ac0      	subs	r0, r0, r3
    e566:	4152      	adcs	r2, r2
    e568:	0ac3      	lsrs	r3, r0, #11
    e56a:	428b      	cmp	r3, r1
    e56c:	d301      	bcc.n	e572 <__udivsi3+0x76>
    e56e:	02cb      	lsls	r3, r1, #11
    e570:	1ac0      	subs	r0, r0, r3
    e572:	4152      	adcs	r2, r2
    e574:	0a83      	lsrs	r3, r0, #10
    e576:	428b      	cmp	r3, r1
    e578:	d301      	bcc.n	e57e <__udivsi3+0x82>
    e57a:	028b      	lsls	r3, r1, #10
    e57c:	1ac0      	subs	r0, r0, r3
    e57e:	4152      	adcs	r2, r2
    e580:	0a43      	lsrs	r3, r0, #9
    e582:	428b      	cmp	r3, r1
    e584:	d301      	bcc.n	e58a <__udivsi3+0x8e>
    e586:	024b      	lsls	r3, r1, #9
    e588:	1ac0      	subs	r0, r0, r3
    e58a:	4152      	adcs	r2, r2
    e58c:	0a03      	lsrs	r3, r0, #8
    e58e:	428b      	cmp	r3, r1
    e590:	d301      	bcc.n	e596 <__udivsi3+0x9a>
    e592:	020b      	lsls	r3, r1, #8
    e594:	1ac0      	subs	r0, r0, r3
    e596:	4152      	adcs	r2, r2
    e598:	d2cd      	bcs.n	e536 <__udivsi3+0x3a>
    e59a:	09c3      	lsrs	r3, r0, #7
    e59c:	428b      	cmp	r3, r1
    e59e:	d301      	bcc.n	e5a4 <__udivsi3+0xa8>
    e5a0:	01cb      	lsls	r3, r1, #7
    e5a2:	1ac0      	subs	r0, r0, r3
    e5a4:	4152      	adcs	r2, r2
    e5a6:	0983      	lsrs	r3, r0, #6
    e5a8:	428b      	cmp	r3, r1
    e5aa:	d301      	bcc.n	e5b0 <__udivsi3+0xb4>
    e5ac:	018b      	lsls	r3, r1, #6
    e5ae:	1ac0      	subs	r0, r0, r3
    e5b0:	4152      	adcs	r2, r2
    e5b2:	0943      	lsrs	r3, r0, #5
    e5b4:	428b      	cmp	r3, r1
    e5b6:	d301      	bcc.n	e5bc <__udivsi3+0xc0>
    e5b8:	014b      	lsls	r3, r1, #5
    e5ba:	1ac0      	subs	r0, r0, r3
    e5bc:	4152      	adcs	r2, r2
    e5be:	0903      	lsrs	r3, r0, #4
    e5c0:	428b      	cmp	r3, r1
    e5c2:	d301      	bcc.n	e5c8 <__udivsi3+0xcc>
    e5c4:	010b      	lsls	r3, r1, #4
    e5c6:	1ac0      	subs	r0, r0, r3
    e5c8:	4152      	adcs	r2, r2
    e5ca:	08c3      	lsrs	r3, r0, #3
    e5cc:	428b      	cmp	r3, r1
    e5ce:	d301      	bcc.n	e5d4 <__udivsi3+0xd8>
    e5d0:	00cb      	lsls	r3, r1, #3
    e5d2:	1ac0      	subs	r0, r0, r3
    e5d4:	4152      	adcs	r2, r2
    e5d6:	0883      	lsrs	r3, r0, #2
    e5d8:	428b      	cmp	r3, r1
    e5da:	d301      	bcc.n	e5e0 <__udivsi3+0xe4>
    e5dc:	008b      	lsls	r3, r1, #2
    e5de:	1ac0      	subs	r0, r0, r3
    e5e0:	4152      	adcs	r2, r2
    e5e2:	0843      	lsrs	r3, r0, #1
    e5e4:	428b      	cmp	r3, r1
    e5e6:	d301      	bcc.n	e5ec <__udivsi3+0xf0>
    e5e8:	004b      	lsls	r3, r1, #1
    e5ea:	1ac0      	subs	r0, r0, r3
    e5ec:	4152      	adcs	r2, r2
    e5ee:	1a41      	subs	r1, r0, r1
    e5f0:	d200      	bcs.n	e5f4 <__udivsi3+0xf8>
    e5f2:	4601      	mov	r1, r0
    e5f4:	4152      	adcs	r2, r2
    e5f6:	4610      	mov	r0, r2
    e5f8:	4770      	bx	lr
    e5fa:	e7ff      	b.n	e5fc <__udivsi3+0x100>
    e5fc:	b501      	push	{r0, lr}
    e5fe:	2000      	movs	r0, #0
    e600:	f000 f8f0 	bl	e7e4 <__aeabi_idiv0>
    e604:	bd02      	pop	{r1, pc}
    e606:	46c0      	nop			; (mov r8, r8)

0000e608 <__aeabi_uidivmod>:
    e608:	2900      	cmp	r1, #0
    e60a:	d0f7      	beq.n	e5fc <__udivsi3+0x100>
    e60c:	e776      	b.n	e4fc <__udivsi3>
    e60e:	4770      	bx	lr

0000e610 <__divsi3>:
    e610:	4603      	mov	r3, r0
    e612:	430b      	orrs	r3, r1
    e614:	d47f      	bmi.n	e716 <__divsi3+0x106>
    e616:	2200      	movs	r2, #0
    e618:	0843      	lsrs	r3, r0, #1
    e61a:	428b      	cmp	r3, r1
    e61c:	d374      	bcc.n	e708 <__divsi3+0xf8>
    e61e:	0903      	lsrs	r3, r0, #4
    e620:	428b      	cmp	r3, r1
    e622:	d35f      	bcc.n	e6e4 <__divsi3+0xd4>
    e624:	0a03      	lsrs	r3, r0, #8
    e626:	428b      	cmp	r3, r1
    e628:	d344      	bcc.n	e6b4 <__divsi3+0xa4>
    e62a:	0b03      	lsrs	r3, r0, #12
    e62c:	428b      	cmp	r3, r1
    e62e:	d328      	bcc.n	e682 <__divsi3+0x72>
    e630:	0c03      	lsrs	r3, r0, #16
    e632:	428b      	cmp	r3, r1
    e634:	d30d      	bcc.n	e652 <__divsi3+0x42>
    e636:	22ff      	movs	r2, #255	; 0xff
    e638:	0209      	lsls	r1, r1, #8
    e63a:	ba12      	rev	r2, r2
    e63c:	0c03      	lsrs	r3, r0, #16
    e63e:	428b      	cmp	r3, r1
    e640:	d302      	bcc.n	e648 <__divsi3+0x38>
    e642:	1212      	asrs	r2, r2, #8
    e644:	0209      	lsls	r1, r1, #8
    e646:	d065      	beq.n	e714 <__divsi3+0x104>
    e648:	0b03      	lsrs	r3, r0, #12
    e64a:	428b      	cmp	r3, r1
    e64c:	d319      	bcc.n	e682 <__divsi3+0x72>
    e64e:	e000      	b.n	e652 <__divsi3+0x42>
    e650:	0a09      	lsrs	r1, r1, #8
    e652:	0bc3      	lsrs	r3, r0, #15
    e654:	428b      	cmp	r3, r1
    e656:	d301      	bcc.n	e65c <__divsi3+0x4c>
    e658:	03cb      	lsls	r3, r1, #15
    e65a:	1ac0      	subs	r0, r0, r3
    e65c:	4152      	adcs	r2, r2
    e65e:	0b83      	lsrs	r3, r0, #14
    e660:	428b      	cmp	r3, r1
    e662:	d301      	bcc.n	e668 <__divsi3+0x58>
    e664:	038b      	lsls	r3, r1, #14
    e666:	1ac0      	subs	r0, r0, r3
    e668:	4152      	adcs	r2, r2
    e66a:	0b43      	lsrs	r3, r0, #13
    e66c:	428b      	cmp	r3, r1
    e66e:	d301      	bcc.n	e674 <__divsi3+0x64>
    e670:	034b      	lsls	r3, r1, #13
    e672:	1ac0      	subs	r0, r0, r3
    e674:	4152      	adcs	r2, r2
    e676:	0b03      	lsrs	r3, r0, #12
    e678:	428b      	cmp	r3, r1
    e67a:	d301      	bcc.n	e680 <__divsi3+0x70>
    e67c:	030b      	lsls	r3, r1, #12
    e67e:	1ac0      	subs	r0, r0, r3
    e680:	4152      	adcs	r2, r2
    e682:	0ac3      	lsrs	r3, r0, #11
    e684:	428b      	cmp	r3, r1
    e686:	d301      	bcc.n	e68c <__divsi3+0x7c>
    e688:	02cb      	lsls	r3, r1, #11
    e68a:	1ac0      	subs	r0, r0, r3
    e68c:	4152      	adcs	r2, r2
    e68e:	0a83      	lsrs	r3, r0, #10
    e690:	428b      	cmp	r3, r1
    e692:	d301      	bcc.n	e698 <__divsi3+0x88>
    e694:	028b      	lsls	r3, r1, #10
    e696:	1ac0      	subs	r0, r0, r3
    e698:	4152      	adcs	r2, r2
    e69a:	0a43      	lsrs	r3, r0, #9
    e69c:	428b      	cmp	r3, r1
    e69e:	d301      	bcc.n	e6a4 <__divsi3+0x94>
    e6a0:	024b      	lsls	r3, r1, #9
    e6a2:	1ac0      	subs	r0, r0, r3
    e6a4:	4152      	adcs	r2, r2
    e6a6:	0a03      	lsrs	r3, r0, #8
    e6a8:	428b      	cmp	r3, r1
    e6aa:	d301      	bcc.n	e6b0 <__divsi3+0xa0>
    e6ac:	020b      	lsls	r3, r1, #8
    e6ae:	1ac0      	subs	r0, r0, r3
    e6b0:	4152      	adcs	r2, r2
    e6b2:	d2cd      	bcs.n	e650 <__divsi3+0x40>
    e6b4:	09c3      	lsrs	r3, r0, #7
    e6b6:	428b      	cmp	r3, r1
    e6b8:	d301      	bcc.n	e6be <__divsi3+0xae>
    e6ba:	01cb      	lsls	r3, r1, #7
    e6bc:	1ac0      	subs	r0, r0, r3
    e6be:	4152      	adcs	r2, r2
    e6c0:	0983      	lsrs	r3, r0, #6
    e6c2:	428b      	cmp	r3, r1
    e6c4:	d301      	bcc.n	e6ca <__divsi3+0xba>
    e6c6:	018b      	lsls	r3, r1, #6
    e6c8:	1ac0      	subs	r0, r0, r3
    e6ca:	4152      	adcs	r2, r2
    e6cc:	0943      	lsrs	r3, r0, #5
    e6ce:	428b      	cmp	r3, r1
    e6d0:	d301      	bcc.n	e6d6 <__divsi3+0xc6>
    e6d2:	014b      	lsls	r3, r1, #5
    e6d4:	1ac0      	subs	r0, r0, r3
    e6d6:	4152      	adcs	r2, r2
    e6d8:	0903      	lsrs	r3, r0, #4
    e6da:	428b      	cmp	r3, r1
    e6dc:	d301      	bcc.n	e6e2 <__divsi3+0xd2>
    e6de:	010b      	lsls	r3, r1, #4
    e6e0:	1ac0      	subs	r0, r0, r3
    e6e2:	4152      	adcs	r2, r2
    e6e4:	08c3      	lsrs	r3, r0, #3
    e6e6:	428b      	cmp	r3, r1
    e6e8:	d301      	bcc.n	e6ee <__divsi3+0xde>
    e6ea:	00cb      	lsls	r3, r1, #3
    e6ec:	1ac0      	subs	r0, r0, r3
    e6ee:	4152      	adcs	r2, r2
    e6f0:	0883      	lsrs	r3, r0, #2
    e6f2:	428b      	cmp	r3, r1
    e6f4:	d301      	bcc.n	e6fa <__divsi3+0xea>
    e6f6:	008b      	lsls	r3, r1, #2
    e6f8:	1ac0      	subs	r0, r0, r3
    e6fa:	4152      	adcs	r2, r2
    e6fc:	0843      	lsrs	r3, r0, #1
    e6fe:	428b      	cmp	r3, r1
    e700:	d301      	bcc.n	e706 <__divsi3+0xf6>
    e702:	004b      	lsls	r3, r1, #1
    e704:	1ac0      	subs	r0, r0, r3
    e706:	4152      	adcs	r2, r2
    e708:	1a41      	subs	r1, r0, r1
    e70a:	d200      	bcs.n	e70e <__divsi3+0xfe>
    e70c:	4601      	mov	r1, r0
    e70e:	4152      	adcs	r2, r2
    e710:	4610      	mov	r0, r2
    e712:	4770      	bx	lr
    e714:	e05d      	b.n	e7d2 <__divsi3+0x1c2>
    e716:	0fca      	lsrs	r2, r1, #31
    e718:	d000      	beq.n	e71c <__divsi3+0x10c>
    e71a:	4249      	negs	r1, r1
    e71c:	1003      	asrs	r3, r0, #32
    e71e:	d300      	bcc.n	e722 <__divsi3+0x112>
    e720:	4240      	negs	r0, r0
    e722:	4053      	eors	r3, r2
    e724:	2200      	movs	r2, #0
    e726:	469c      	mov	ip, r3
    e728:	0903      	lsrs	r3, r0, #4
    e72a:	428b      	cmp	r3, r1
    e72c:	d32d      	bcc.n	e78a <__divsi3+0x17a>
    e72e:	0a03      	lsrs	r3, r0, #8
    e730:	428b      	cmp	r3, r1
    e732:	d312      	bcc.n	e75a <__divsi3+0x14a>
    e734:	22fc      	movs	r2, #252	; 0xfc
    e736:	0189      	lsls	r1, r1, #6
    e738:	ba12      	rev	r2, r2
    e73a:	0a03      	lsrs	r3, r0, #8
    e73c:	428b      	cmp	r3, r1
    e73e:	d30c      	bcc.n	e75a <__divsi3+0x14a>
    e740:	0189      	lsls	r1, r1, #6
    e742:	1192      	asrs	r2, r2, #6
    e744:	428b      	cmp	r3, r1
    e746:	d308      	bcc.n	e75a <__divsi3+0x14a>
    e748:	0189      	lsls	r1, r1, #6
    e74a:	1192      	asrs	r2, r2, #6
    e74c:	428b      	cmp	r3, r1
    e74e:	d304      	bcc.n	e75a <__divsi3+0x14a>
    e750:	0189      	lsls	r1, r1, #6
    e752:	d03a      	beq.n	e7ca <__divsi3+0x1ba>
    e754:	1192      	asrs	r2, r2, #6
    e756:	e000      	b.n	e75a <__divsi3+0x14a>
    e758:	0989      	lsrs	r1, r1, #6
    e75a:	09c3      	lsrs	r3, r0, #7
    e75c:	428b      	cmp	r3, r1
    e75e:	d301      	bcc.n	e764 <__divsi3+0x154>
    e760:	01cb      	lsls	r3, r1, #7
    e762:	1ac0      	subs	r0, r0, r3
    e764:	4152      	adcs	r2, r2
    e766:	0983      	lsrs	r3, r0, #6
    e768:	428b      	cmp	r3, r1
    e76a:	d301      	bcc.n	e770 <__divsi3+0x160>
    e76c:	018b      	lsls	r3, r1, #6
    e76e:	1ac0      	subs	r0, r0, r3
    e770:	4152      	adcs	r2, r2
    e772:	0943      	lsrs	r3, r0, #5
    e774:	428b      	cmp	r3, r1
    e776:	d301      	bcc.n	e77c <__divsi3+0x16c>
    e778:	014b      	lsls	r3, r1, #5
    e77a:	1ac0      	subs	r0, r0, r3
    e77c:	4152      	adcs	r2, r2
    e77e:	0903      	lsrs	r3, r0, #4
    e780:	428b      	cmp	r3, r1
    e782:	d301      	bcc.n	e788 <__divsi3+0x178>
    e784:	010b      	lsls	r3, r1, #4
    e786:	1ac0      	subs	r0, r0, r3
    e788:	4152      	adcs	r2, r2
    e78a:	08c3      	lsrs	r3, r0, #3
    e78c:	428b      	cmp	r3, r1
    e78e:	d301      	bcc.n	e794 <__divsi3+0x184>
    e790:	00cb      	lsls	r3, r1, #3
    e792:	1ac0      	subs	r0, r0, r3
    e794:	4152      	adcs	r2, r2
    e796:	0883      	lsrs	r3, r0, #2
    e798:	428b      	cmp	r3, r1
    e79a:	d301      	bcc.n	e7a0 <__divsi3+0x190>
    e79c:	008b      	lsls	r3, r1, #2
    e79e:	1ac0      	subs	r0, r0, r3
    e7a0:	4152      	adcs	r2, r2
    e7a2:	d2d9      	bcs.n	e758 <__divsi3+0x148>
    e7a4:	0843      	lsrs	r3, r0, #1
    e7a6:	428b      	cmp	r3, r1
    e7a8:	d301      	bcc.n	e7ae <__divsi3+0x19e>
    e7aa:	004b      	lsls	r3, r1, #1
    e7ac:	1ac0      	subs	r0, r0, r3
    e7ae:	4152      	adcs	r2, r2
    e7b0:	1a41      	subs	r1, r0, r1
    e7b2:	d200      	bcs.n	e7b6 <__divsi3+0x1a6>
    e7b4:	4601      	mov	r1, r0
    e7b6:	4663      	mov	r3, ip
    e7b8:	4152      	adcs	r2, r2
    e7ba:	105b      	asrs	r3, r3, #1
    e7bc:	4610      	mov	r0, r2
    e7be:	d301      	bcc.n	e7c4 <__divsi3+0x1b4>
    e7c0:	4240      	negs	r0, r0
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	d500      	bpl.n	e7c8 <__divsi3+0x1b8>
    e7c6:	4249      	negs	r1, r1
    e7c8:	4770      	bx	lr
    e7ca:	4663      	mov	r3, ip
    e7cc:	105b      	asrs	r3, r3, #1
    e7ce:	d300      	bcc.n	e7d2 <__divsi3+0x1c2>
    e7d0:	4240      	negs	r0, r0
    e7d2:	b501      	push	{r0, lr}
    e7d4:	2000      	movs	r0, #0
    e7d6:	f000 f805 	bl	e7e4 <__aeabi_idiv0>
    e7da:	bd02      	pop	{r1, pc}

0000e7dc <__aeabi_idivmod>:
    e7dc:	2900      	cmp	r1, #0
    e7de:	d0f8      	beq.n	e7d2 <__divsi3+0x1c2>
    e7e0:	e716      	b.n	e610 <__divsi3>
    e7e2:	4770      	bx	lr

0000e7e4 <__aeabi_idiv0>:
    e7e4:	4770      	bx	lr
    e7e6:	46c0      	nop			; (mov r8, r8)

0000e7e8 <__aeabi_lmul>:
    e7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7ea:	46ce      	mov	lr, r9
    e7ec:	4647      	mov	r7, r8
    e7ee:	0415      	lsls	r5, r2, #16
    e7f0:	0c2d      	lsrs	r5, r5, #16
    e7f2:	002e      	movs	r6, r5
    e7f4:	b580      	push	{r7, lr}
    e7f6:	0407      	lsls	r7, r0, #16
    e7f8:	0c14      	lsrs	r4, r2, #16
    e7fa:	0c3f      	lsrs	r7, r7, #16
    e7fc:	4699      	mov	r9, r3
    e7fe:	0c03      	lsrs	r3, r0, #16
    e800:	437e      	muls	r6, r7
    e802:	435d      	muls	r5, r3
    e804:	4367      	muls	r7, r4
    e806:	4363      	muls	r3, r4
    e808:	197f      	adds	r7, r7, r5
    e80a:	0c34      	lsrs	r4, r6, #16
    e80c:	19e4      	adds	r4, r4, r7
    e80e:	469c      	mov	ip, r3
    e810:	42a5      	cmp	r5, r4
    e812:	d903      	bls.n	e81c <__aeabi_lmul+0x34>
    e814:	2380      	movs	r3, #128	; 0x80
    e816:	025b      	lsls	r3, r3, #9
    e818:	4698      	mov	r8, r3
    e81a:	44c4      	add	ip, r8
    e81c:	464b      	mov	r3, r9
    e81e:	4351      	muls	r1, r2
    e820:	4343      	muls	r3, r0
    e822:	0436      	lsls	r6, r6, #16
    e824:	0c36      	lsrs	r6, r6, #16
    e826:	0c25      	lsrs	r5, r4, #16
    e828:	0424      	lsls	r4, r4, #16
    e82a:	4465      	add	r5, ip
    e82c:	19a4      	adds	r4, r4, r6
    e82e:	1859      	adds	r1, r3, r1
    e830:	1949      	adds	r1, r1, r5
    e832:	0020      	movs	r0, r4
    e834:	bc0c      	pop	{r2, r3}
    e836:	4690      	mov	r8, r2
    e838:	4699      	mov	r9, r3
    e83a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e83c <__aeabi_dadd>:
    e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e83e:	4645      	mov	r5, r8
    e840:	46de      	mov	lr, fp
    e842:	4657      	mov	r7, sl
    e844:	464e      	mov	r6, r9
    e846:	030c      	lsls	r4, r1, #12
    e848:	b5e0      	push	{r5, r6, r7, lr}
    e84a:	004e      	lsls	r6, r1, #1
    e84c:	0fc9      	lsrs	r1, r1, #31
    e84e:	4688      	mov	r8, r1
    e850:	000d      	movs	r5, r1
    e852:	0a61      	lsrs	r1, r4, #9
    e854:	0f44      	lsrs	r4, r0, #29
    e856:	430c      	orrs	r4, r1
    e858:	00c7      	lsls	r7, r0, #3
    e85a:	0319      	lsls	r1, r3, #12
    e85c:	0058      	lsls	r0, r3, #1
    e85e:	0fdb      	lsrs	r3, r3, #31
    e860:	469b      	mov	fp, r3
    e862:	0a4b      	lsrs	r3, r1, #9
    e864:	0f51      	lsrs	r1, r2, #29
    e866:	430b      	orrs	r3, r1
    e868:	0d76      	lsrs	r6, r6, #21
    e86a:	0d40      	lsrs	r0, r0, #21
    e86c:	0019      	movs	r1, r3
    e86e:	00d2      	lsls	r2, r2, #3
    e870:	45d8      	cmp	r8, fp
    e872:	d100      	bne.n	e876 <__aeabi_dadd+0x3a>
    e874:	e0ae      	b.n	e9d4 <__aeabi_dadd+0x198>
    e876:	1a35      	subs	r5, r6, r0
    e878:	2d00      	cmp	r5, #0
    e87a:	dc00      	bgt.n	e87e <__aeabi_dadd+0x42>
    e87c:	e0f6      	b.n	ea6c <__aeabi_dadd+0x230>
    e87e:	2800      	cmp	r0, #0
    e880:	d10f      	bne.n	e8a2 <__aeabi_dadd+0x66>
    e882:	4313      	orrs	r3, r2
    e884:	d100      	bne.n	e888 <__aeabi_dadd+0x4c>
    e886:	e0db      	b.n	ea40 <__aeabi_dadd+0x204>
    e888:	1e6b      	subs	r3, r5, #1
    e88a:	2b00      	cmp	r3, #0
    e88c:	d000      	beq.n	e890 <__aeabi_dadd+0x54>
    e88e:	e137      	b.n	eb00 <__aeabi_dadd+0x2c4>
    e890:	1aba      	subs	r2, r7, r2
    e892:	4297      	cmp	r7, r2
    e894:	41bf      	sbcs	r7, r7
    e896:	1a64      	subs	r4, r4, r1
    e898:	427f      	negs	r7, r7
    e89a:	1be4      	subs	r4, r4, r7
    e89c:	2601      	movs	r6, #1
    e89e:	0017      	movs	r7, r2
    e8a0:	e024      	b.n	e8ec <__aeabi_dadd+0xb0>
    e8a2:	4bc6      	ldr	r3, [pc, #792]	; (ebbc <__aeabi_dadd+0x380>)
    e8a4:	429e      	cmp	r6, r3
    e8a6:	d04d      	beq.n	e944 <__aeabi_dadd+0x108>
    e8a8:	2380      	movs	r3, #128	; 0x80
    e8aa:	041b      	lsls	r3, r3, #16
    e8ac:	4319      	orrs	r1, r3
    e8ae:	2d38      	cmp	r5, #56	; 0x38
    e8b0:	dd00      	ble.n	e8b4 <__aeabi_dadd+0x78>
    e8b2:	e107      	b.n	eac4 <__aeabi_dadd+0x288>
    e8b4:	2d1f      	cmp	r5, #31
    e8b6:	dd00      	ble.n	e8ba <__aeabi_dadd+0x7e>
    e8b8:	e138      	b.n	eb2c <__aeabi_dadd+0x2f0>
    e8ba:	2020      	movs	r0, #32
    e8bc:	1b43      	subs	r3, r0, r5
    e8be:	469a      	mov	sl, r3
    e8c0:	000b      	movs	r3, r1
    e8c2:	4650      	mov	r0, sl
    e8c4:	4083      	lsls	r3, r0
    e8c6:	4699      	mov	r9, r3
    e8c8:	0013      	movs	r3, r2
    e8ca:	4648      	mov	r0, r9
    e8cc:	40eb      	lsrs	r3, r5
    e8ce:	4318      	orrs	r0, r3
    e8d0:	0003      	movs	r3, r0
    e8d2:	4650      	mov	r0, sl
    e8d4:	4082      	lsls	r2, r0
    e8d6:	1e50      	subs	r0, r2, #1
    e8d8:	4182      	sbcs	r2, r0
    e8da:	40e9      	lsrs	r1, r5
    e8dc:	431a      	orrs	r2, r3
    e8de:	1aba      	subs	r2, r7, r2
    e8e0:	1a61      	subs	r1, r4, r1
    e8e2:	4297      	cmp	r7, r2
    e8e4:	41a4      	sbcs	r4, r4
    e8e6:	0017      	movs	r7, r2
    e8e8:	4264      	negs	r4, r4
    e8ea:	1b0c      	subs	r4, r1, r4
    e8ec:	0223      	lsls	r3, r4, #8
    e8ee:	d562      	bpl.n	e9b6 <__aeabi_dadd+0x17a>
    e8f0:	0264      	lsls	r4, r4, #9
    e8f2:	0a65      	lsrs	r5, r4, #9
    e8f4:	2d00      	cmp	r5, #0
    e8f6:	d100      	bne.n	e8fa <__aeabi_dadd+0xbe>
    e8f8:	e0df      	b.n	eaba <__aeabi_dadd+0x27e>
    e8fa:	0028      	movs	r0, r5
    e8fc:	f001 fbe4 	bl	100c8 <__clzsi2>
    e900:	0003      	movs	r3, r0
    e902:	3b08      	subs	r3, #8
    e904:	2b1f      	cmp	r3, #31
    e906:	dd00      	ble.n	e90a <__aeabi_dadd+0xce>
    e908:	e0d2      	b.n	eab0 <__aeabi_dadd+0x274>
    e90a:	2220      	movs	r2, #32
    e90c:	003c      	movs	r4, r7
    e90e:	1ad2      	subs	r2, r2, r3
    e910:	409d      	lsls	r5, r3
    e912:	40d4      	lsrs	r4, r2
    e914:	409f      	lsls	r7, r3
    e916:	4325      	orrs	r5, r4
    e918:	429e      	cmp	r6, r3
    e91a:	dd00      	ble.n	e91e <__aeabi_dadd+0xe2>
    e91c:	e0c4      	b.n	eaa8 <__aeabi_dadd+0x26c>
    e91e:	1b9e      	subs	r6, r3, r6
    e920:	1c73      	adds	r3, r6, #1
    e922:	2b1f      	cmp	r3, #31
    e924:	dd00      	ble.n	e928 <__aeabi_dadd+0xec>
    e926:	e0f1      	b.n	eb0c <__aeabi_dadd+0x2d0>
    e928:	2220      	movs	r2, #32
    e92a:	0038      	movs	r0, r7
    e92c:	0029      	movs	r1, r5
    e92e:	1ad2      	subs	r2, r2, r3
    e930:	40d8      	lsrs	r0, r3
    e932:	4091      	lsls	r1, r2
    e934:	4097      	lsls	r7, r2
    e936:	002c      	movs	r4, r5
    e938:	4301      	orrs	r1, r0
    e93a:	1e78      	subs	r0, r7, #1
    e93c:	4187      	sbcs	r7, r0
    e93e:	40dc      	lsrs	r4, r3
    e940:	2600      	movs	r6, #0
    e942:	430f      	orrs	r7, r1
    e944:	077b      	lsls	r3, r7, #29
    e946:	d009      	beq.n	e95c <__aeabi_dadd+0x120>
    e948:	230f      	movs	r3, #15
    e94a:	403b      	ands	r3, r7
    e94c:	2b04      	cmp	r3, #4
    e94e:	d005      	beq.n	e95c <__aeabi_dadd+0x120>
    e950:	1d3b      	adds	r3, r7, #4
    e952:	42bb      	cmp	r3, r7
    e954:	41bf      	sbcs	r7, r7
    e956:	427f      	negs	r7, r7
    e958:	19e4      	adds	r4, r4, r7
    e95a:	001f      	movs	r7, r3
    e95c:	0223      	lsls	r3, r4, #8
    e95e:	d52c      	bpl.n	e9ba <__aeabi_dadd+0x17e>
    e960:	4b96      	ldr	r3, [pc, #600]	; (ebbc <__aeabi_dadd+0x380>)
    e962:	3601      	adds	r6, #1
    e964:	429e      	cmp	r6, r3
    e966:	d100      	bne.n	e96a <__aeabi_dadd+0x12e>
    e968:	e09a      	b.n	eaa0 <__aeabi_dadd+0x264>
    e96a:	4645      	mov	r5, r8
    e96c:	4b94      	ldr	r3, [pc, #592]	; (ebc0 <__aeabi_dadd+0x384>)
    e96e:	08ff      	lsrs	r7, r7, #3
    e970:	401c      	ands	r4, r3
    e972:	0760      	lsls	r0, r4, #29
    e974:	0576      	lsls	r6, r6, #21
    e976:	0264      	lsls	r4, r4, #9
    e978:	4307      	orrs	r7, r0
    e97a:	0b24      	lsrs	r4, r4, #12
    e97c:	0d76      	lsrs	r6, r6, #21
    e97e:	2100      	movs	r1, #0
    e980:	0324      	lsls	r4, r4, #12
    e982:	0b23      	lsrs	r3, r4, #12
    e984:	0d0c      	lsrs	r4, r1, #20
    e986:	4a8f      	ldr	r2, [pc, #572]	; (ebc4 <__aeabi_dadd+0x388>)
    e988:	0524      	lsls	r4, r4, #20
    e98a:	431c      	orrs	r4, r3
    e98c:	4014      	ands	r4, r2
    e98e:	0533      	lsls	r3, r6, #20
    e990:	4323      	orrs	r3, r4
    e992:	005b      	lsls	r3, r3, #1
    e994:	07ed      	lsls	r5, r5, #31
    e996:	085b      	lsrs	r3, r3, #1
    e998:	432b      	orrs	r3, r5
    e99a:	0038      	movs	r0, r7
    e99c:	0019      	movs	r1, r3
    e99e:	bc3c      	pop	{r2, r3, r4, r5}
    e9a0:	4690      	mov	r8, r2
    e9a2:	4699      	mov	r9, r3
    e9a4:	46a2      	mov	sl, r4
    e9a6:	46ab      	mov	fp, r5
    e9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e9aa:	4664      	mov	r4, ip
    e9ac:	4304      	orrs	r4, r0
    e9ae:	d100      	bne.n	e9b2 <__aeabi_dadd+0x176>
    e9b0:	e211      	b.n	edd6 <__aeabi_dadd+0x59a>
    e9b2:	0004      	movs	r4, r0
    e9b4:	4667      	mov	r7, ip
    e9b6:	077b      	lsls	r3, r7, #29
    e9b8:	d1c6      	bne.n	e948 <__aeabi_dadd+0x10c>
    e9ba:	4645      	mov	r5, r8
    e9bc:	0760      	lsls	r0, r4, #29
    e9be:	08ff      	lsrs	r7, r7, #3
    e9c0:	4307      	orrs	r7, r0
    e9c2:	08e4      	lsrs	r4, r4, #3
    e9c4:	4b7d      	ldr	r3, [pc, #500]	; (ebbc <__aeabi_dadd+0x380>)
    e9c6:	429e      	cmp	r6, r3
    e9c8:	d030      	beq.n	ea2c <__aeabi_dadd+0x1f0>
    e9ca:	0324      	lsls	r4, r4, #12
    e9cc:	0576      	lsls	r6, r6, #21
    e9ce:	0b24      	lsrs	r4, r4, #12
    e9d0:	0d76      	lsrs	r6, r6, #21
    e9d2:	e7d4      	b.n	e97e <__aeabi_dadd+0x142>
    e9d4:	1a33      	subs	r3, r6, r0
    e9d6:	469a      	mov	sl, r3
    e9d8:	2b00      	cmp	r3, #0
    e9da:	dd78      	ble.n	eace <__aeabi_dadd+0x292>
    e9dc:	2800      	cmp	r0, #0
    e9de:	d031      	beq.n	ea44 <__aeabi_dadd+0x208>
    e9e0:	4876      	ldr	r0, [pc, #472]	; (ebbc <__aeabi_dadd+0x380>)
    e9e2:	4286      	cmp	r6, r0
    e9e4:	d0ae      	beq.n	e944 <__aeabi_dadd+0x108>
    e9e6:	2080      	movs	r0, #128	; 0x80
    e9e8:	0400      	lsls	r0, r0, #16
    e9ea:	4301      	orrs	r1, r0
    e9ec:	4653      	mov	r3, sl
    e9ee:	2b38      	cmp	r3, #56	; 0x38
    e9f0:	dc00      	bgt.n	e9f4 <__aeabi_dadd+0x1b8>
    e9f2:	e0e9      	b.n	ebc8 <__aeabi_dadd+0x38c>
    e9f4:	430a      	orrs	r2, r1
    e9f6:	1e51      	subs	r1, r2, #1
    e9f8:	418a      	sbcs	r2, r1
    e9fa:	2100      	movs	r1, #0
    e9fc:	19d2      	adds	r2, r2, r7
    e9fe:	42ba      	cmp	r2, r7
    ea00:	41bf      	sbcs	r7, r7
    ea02:	1909      	adds	r1, r1, r4
    ea04:	427c      	negs	r4, r7
    ea06:	0017      	movs	r7, r2
    ea08:	190c      	adds	r4, r1, r4
    ea0a:	0223      	lsls	r3, r4, #8
    ea0c:	d5d3      	bpl.n	e9b6 <__aeabi_dadd+0x17a>
    ea0e:	4b6b      	ldr	r3, [pc, #428]	; (ebbc <__aeabi_dadd+0x380>)
    ea10:	3601      	adds	r6, #1
    ea12:	429e      	cmp	r6, r3
    ea14:	d100      	bne.n	ea18 <__aeabi_dadd+0x1dc>
    ea16:	e13a      	b.n	ec8e <__aeabi_dadd+0x452>
    ea18:	2001      	movs	r0, #1
    ea1a:	4b69      	ldr	r3, [pc, #420]	; (ebc0 <__aeabi_dadd+0x384>)
    ea1c:	401c      	ands	r4, r3
    ea1e:	087b      	lsrs	r3, r7, #1
    ea20:	4007      	ands	r7, r0
    ea22:	431f      	orrs	r7, r3
    ea24:	07e0      	lsls	r0, r4, #31
    ea26:	4307      	orrs	r7, r0
    ea28:	0864      	lsrs	r4, r4, #1
    ea2a:	e78b      	b.n	e944 <__aeabi_dadd+0x108>
    ea2c:	0023      	movs	r3, r4
    ea2e:	433b      	orrs	r3, r7
    ea30:	d100      	bne.n	ea34 <__aeabi_dadd+0x1f8>
    ea32:	e1cb      	b.n	edcc <__aeabi_dadd+0x590>
    ea34:	2280      	movs	r2, #128	; 0x80
    ea36:	0312      	lsls	r2, r2, #12
    ea38:	4314      	orrs	r4, r2
    ea3a:	0324      	lsls	r4, r4, #12
    ea3c:	0b24      	lsrs	r4, r4, #12
    ea3e:	e79e      	b.n	e97e <__aeabi_dadd+0x142>
    ea40:	002e      	movs	r6, r5
    ea42:	e77f      	b.n	e944 <__aeabi_dadd+0x108>
    ea44:	0008      	movs	r0, r1
    ea46:	4310      	orrs	r0, r2
    ea48:	d100      	bne.n	ea4c <__aeabi_dadd+0x210>
    ea4a:	e0b4      	b.n	ebb6 <__aeabi_dadd+0x37a>
    ea4c:	1e58      	subs	r0, r3, #1
    ea4e:	2800      	cmp	r0, #0
    ea50:	d000      	beq.n	ea54 <__aeabi_dadd+0x218>
    ea52:	e0de      	b.n	ec12 <__aeabi_dadd+0x3d6>
    ea54:	18ba      	adds	r2, r7, r2
    ea56:	42ba      	cmp	r2, r7
    ea58:	419b      	sbcs	r3, r3
    ea5a:	1864      	adds	r4, r4, r1
    ea5c:	425b      	negs	r3, r3
    ea5e:	18e4      	adds	r4, r4, r3
    ea60:	0017      	movs	r7, r2
    ea62:	2601      	movs	r6, #1
    ea64:	0223      	lsls	r3, r4, #8
    ea66:	d5a6      	bpl.n	e9b6 <__aeabi_dadd+0x17a>
    ea68:	2602      	movs	r6, #2
    ea6a:	e7d5      	b.n	ea18 <__aeabi_dadd+0x1dc>
    ea6c:	2d00      	cmp	r5, #0
    ea6e:	d16e      	bne.n	eb4e <__aeabi_dadd+0x312>
    ea70:	1c70      	adds	r0, r6, #1
    ea72:	0540      	lsls	r0, r0, #21
    ea74:	0d40      	lsrs	r0, r0, #21
    ea76:	2801      	cmp	r0, #1
    ea78:	dc00      	bgt.n	ea7c <__aeabi_dadd+0x240>
    ea7a:	e0f9      	b.n	ec70 <__aeabi_dadd+0x434>
    ea7c:	1ab8      	subs	r0, r7, r2
    ea7e:	4684      	mov	ip, r0
    ea80:	4287      	cmp	r7, r0
    ea82:	4180      	sbcs	r0, r0
    ea84:	1ae5      	subs	r5, r4, r3
    ea86:	4240      	negs	r0, r0
    ea88:	1a2d      	subs	r5, r5, r0
    ea8a:	0228      	lsls	r0, r5, #8
    ea8c:	d400      	bmi.n	ea90 <__aeabi_dadd+0x254>
    ea8e:	e089      	b.n	eba4 <__aeabi_dadd+0x368>
    ea90:	1bd7      	subs	r7, r2, r7
    ea92:	42ba      	cmp	r2, r7
    ea94:	4192      	sbcs	r2, r2
    ea96:	1b1c      	subs	r4, r3, r4
    ea98:	4252      	negs	r2, r2
    ea9a:	1aa5      	subs	r5, r4, r2
    ea9c:	46d8      	mov	r8, fp
    ea9e:	e729      	b.n	e8f4 <__aeabi_dadd+0xb8>
    eaa0:	4645      	mov	r5, r8
    eaa2:	2400      	movs	r4, #0
    eaa4:	2700      	movs	r7, #0
    eaa6:	e76a      	b.n	e97e <__aeabi_dadd+0x142>
    eaa8:	4c45      	ldr	r4, [pc, #276]	; (ebc0 <__aeabi_dadd+0x384>)
    eaaa:	1af6      	subs	r6, r6, r3
    eaac:	402c      	ands	r4, r5
    eaae:	e749      	b.n	e944 <__aeabi_dadd+0x108>
    eab0:	003d      	movs	r5, r7
    eab2:	3828      	subs	r0, #40	; 0x28
    eab4:	4085      	lsls	r5, r0
    eab6:	2700      	movs	r7, #0
    eab8:	e72e      	b.n	e918 <__aeabi_dadd+0xdc>
    eaba:	0038      	movs	r0, r7
    eabc:	f001 fb04 	bl	100c8 <__clzsi2>
    eac0:	3020      	adds	r0, #32
    eac2:	e71d      	b.n	e900 <__aeabi_dadd+0xc4>
    eac4:	430a      	orrs	r2, r1
    eac6:	1e51      	subs	r1, r2, #1
    eac8:	418a      	sbcs	r2, r1
    eaca:	2100      	movs	r1, #0
    eacc:	e707      	b.n	e8de <__aeabi_dadd+0xa2>
    eace:	2b00      	cmp	r3, #0
    ead0:	d000      	beq.n	ead4 <__aeabi_dadd+0x298>
    ead2:	e0f3      	b.n	ecbc <__aeabi_dadd+0x480>
    ead4:	1c70      	adds	r0, r6, #1
    ead6:	0543      	lsls	r3, r0, #21
    ead8:	0d5b      	lsrs	r3, r3, #21
    eada:	2b01      	cmp	r3, #1
    eadc:	dc00      	bgt.n	eae0 <__aeabi_dadd+0x2a4>
    eade:	e0ad      	b.n	ec3c <__aeabi_dadd+0x400>
    eae0:	4b36      	ldr	r3, [pc, #216]	; (ebbc <__aeabi_dadd+0x380>)
    eae2:	4298      	cmp	r0, r3
    eae4:	d100      	bne.n	eae8 <__aeabi_dadd+0x2ac>
    eae6:	e0d1      	b.n	ec8c <__aeabi_dadd+0x450>
    eae8:	18ba      	adds	r2, r7, r2
    eaea:	42ba      	cmp	r2, r7
    eaec:	41bf      	sbcs	r7, r7
    eaee:	1864      	adds	r4, r4, r1
    eaf0:	427f      	negs	r7, r7
    eaf2:	19e4      	adds	r4, r4, r7
    eaf4:	07e7      	lsls	r7, r4, #31
    eaf6:	0852      	lsrs	r2, r2, #1
    eaf8:	4317      	orrs	r7, r2
    eafa:	0864      	lsrs	r4, r4, #1
    eafc:	0006      	movs	r6, r0
    eafe:	e721      	b.n	e944 <__aeabi_dadd+0x108>
    eb00:	482e      	ldr	r0, [pc, #184]	; (ebbc <__aeabi_dadd+0x380>)
    eb02:	4285      	cmp	r5, r0
    eb04:	d100      	bne.n	eb08 <__aeabi_dadd+0x2cc>
    eb06:	e093      	b.n	ec30 <__aeabi_dadd+0x3f4>
    eb08:	001d      	movs	r5, r3
    eb0a:	e6d0      	b.n	e8ae <__aeabi_dadd+0x72>
    eb0c:	0029      	movs	r1, r5
    eb0e:	3e1f      	subs	r6, #31
    eb10:	40f1      	lsrs	r1, r6
    eb12:	2b20      	cmp	r3, #32
    eb14:	d100      	bne.n	eb18 <__aeabi_dadd+0x2dc>
    eb16:	e08d      	b.n	ec34 <__aeabi_dadd+0x3f8>
    eb18:	2240      	movs	r2, #64	; 0x40
    eb1a:	1ad3      	subs	r3, r2, r3
    eb1c:	409d      	lsls	r5, r3
    eb1e:	432f      	orrs	r7, r5
    eb20:	1e7d      	subs	r5, r7, #1
    eb22:	41af      	sbcs	r7, r5
    eb24:	2400      	movs	r4, #0
    eb26:	430f      	orrs	r7, r1
    eb28:	2600      	movs	r6, #0
    eb2a:	e744      	b.n	e9b6 <__aeabi_dadd+0x17a>
    eb2c:	002b      	movs	r3, r5
    eb2e:	0008      	movs	r0, r1
    eb30:	3b20      	subs	r3, #32
    eb32:	40d8      	lsrs	r0, r3
    eb34:	0003      	movs	r3, r0
    eb36:	2d20      	cmp	r5, #32
    eb38:	d100      	bne.n	eb3c <__aeabi_dadd+0x300>
    eb3a:	e07d      	b.n	ec38 <__aeabi_dadd+0x3fc>
    eb3c:	2040      	movs	r0, #64	; 0x40
    eb3e:	1b45      	subs	r5, r0, r5
    eb40:	40a9      	lsls	r1, r5
    eb42:	430a      	orrs	r2, r1
    eb44:	1e51      	subs	r1, r2, #1
    eb46:	418a      	sbcs	r2, r1
    eb48:	2100      	movs	r1, #0
    eb4a:	431a      	orrs	r2, r3
    eb4c:	e6c7      	b.n	e8de <__aeabi_dadd+0xa2>
    eb4e:	2e00      	cmp	r6, #0
    eb50:	d050      	beq.n	ebf4 <__aeabi_dadd+0x3b8>
    eb52:	4e1a      	ldr	r6, [pc, #104]	; (ebbc <__aeabi_dadd+0x380>)
    eb54:	42b0      	cmp	r0, r6
    eb56:	d057      	beq.n	ec08 <__aeabi_dadd+0x3cc>
    eb58:	2680      	movs	r6, #128	; 0x80
    eb5a:	426b      	negs	r3, r5
    eb5c:	4699      	mov	r9, r3
    eb5e:	0436      	lsls	r6, r6, #16
    eb60:	4334      	orrs	r4, r6
    eb62:	464b      	mov	r3, r9
    eb64:	2b38      	cmp	r3, #56	; 0x38
    eb66:	dd00      	ble.n	eb6a <__aeabi_dadd+0x32e>
    eb68:	e0d6      	b.n	ed18 <__aeabi_dadd+0x4dc>
    eb6a:	2b1f      	cmp	r3, #31
    eb6c:	dd00      	ble.n	eb70 <__aeabi_dadd+0x334>
    eb6e:	e135      	b.n	eddc <__aeabi_dadd+0x5a0>
    eb70:	2620      	movs	r6, #32
    eb72:	1af5      	subs	r5, r6, r3
    eb74:	0026      	movs	r6, r4
    eb76:	40ae      	lsls	r6, r5
    eb78:	46b2      	mov	sl, r6
    eb7a:	003e      	movs	r6, r7
    eb7c:	40de      	lsrs	r6, r3
    eb7e:	46ac      	mov	ip, r5
    eb80:	0035      	movs	r5, r6
    eb82:	4656      	mov	r6, sl
    eb84:	432e      	orrs	r6, r5
    eb86:	4665      	mov	r5, ip
    eb88:	40af      	lsls	r7, r5
    eb8a:	1e7d      	subs	r5, r7, #1
    eb8c:	41af      	sbcs	r7, r5
    eb8e:	40dc      	lsrs	r4, r3
    eb90:	4337      	orrs	r7, r6
    eb92:	1bd7      	subs	r7, r2, r7
    eb94:	42ba      	cmp	r2, r7
    eb96:	4192      	sbcs	r2, r2
    eb98:	1b0c      	subs	r4, r1, r4
    eb9a:	4252      	negs	r2, r2
    eb9c:	1aa4      	subs	r4, r4, r2
    eb9e:	0006      	movs	r6, r0
    eba0:	46d8      	mov	r8, fp
    eba2:	e6a3      	b.n	e8ec <__aeabi_dadd+0xb0>
    eba4:	4664      	mov	r4, ip
    eba6:	4667      	mov	r7, ip
    eba8:	432c      	orrs	r4, r5
    ebaa:	d000      	beq.n	ebae <__aeabi_dadd+0x372>
    ebac:	e6a2      	b.n	e8f4 <__aeabi_dadd+0xb8>
    ebae:	2500      	movs	r5, #0
    ebb0:	2600      	movs	r6, #0
    ebb2:	2700      	movs	r7, #0
    ebb4:	e706      	b.n	e9c4 <__aeabi_dadd+0x188>
    ebb6:	001e      	movs	r6, r3
    ebb8:	e6c4      	b.n	e944 <__aeabi_dadd+0x108>
    ebba:	46c0      	nop			; (mov r8, r8)
    ebbc:	000007ff 	.word	0x000007ff
    ebc0:	ff7fffff 	.word	0xff7fffff
    ebc4:	800fffff 	.word	0x800fffff
    ebc8:	2b1f      	cmp	r3, #31
    ebca:	dc63      	bgt.n	ec94 <__aeabi_dadd+0x458>
    ebcc:	2020      	movs	r0, #32
    ebce:	1ac3      	subs	r3, r0, r3
    ebd0:	0008      	movs	r0, r1
    ebd2:	4098      	lsls	r0, r3
    ebd4:	469c      	mov	ip, r3
    ebd6:	4683      	mov	fp, r0
    ebd8:	4653      	mov	r3, sl
    ebda:	0010      	movs	r0, r2
    ebdc:	40d8      	lsrs	r0, r3
    ebde:	0003      	movs	r3, r0
    ebe0:	4658      	mov	r0, fp
    ebe2:	4318      	orrs	r0, r3
    ebe4:	4663      	mov	r3, ip
    ebe6:	409a      	lsls	r2, r3
    ebe8:	1e53      	subs	r3, r2, #1
    ebea:	419a      	sbcs	r2, r3
    ebec:	4653      	mov	r3, sl
    ebee:	4302      	orrs	r2, r0
    ebf0:	40d9      	lsrs	r1, r3
    ebf2:	e703      	b.n	e9fc <__aeabi_dadd+0x1c0>
    ebf4:	0026      	movs	r6, r4
    ebf6:	433e      	orrs	r6, r7
    ebf8:	d006      	beq.n	ec08 <__aeabi_dadd+0x3cc>
    ebfa:	43eb      	mvns	r3, r5
    ebfc:	4699      	mov	r9, r3
    ebfe:	2b00      	cmp	r3, #0
    ec00:	d0c7      	beq.n	eb92 <__aeabi_dadd+0x356>
    ec02:	4e94      	ldr	r6, [pc, #592]	; (ee54 <__aeabi_dadd+0x618>)
    ec04:	42b0      	cmp	r0, r6
    ec06:	d1ac      	bne.n	eb62 <__aeabi_dadd+0x326>
    ec08:	000c      	movs	r4, r1
    ec0a:	0017      	movs	r7, r2
    ec0c:	0006      	movs	r6, r0
    ec0e:	46d8      	mov	r8, fp
    ec10:	e698      	b.n	e944 <__aeabi_dadd+0x108>
    ec12:	4b90      	ldr	r3, [pc, #576]	; (ee54 <__aeabi_dadd+0x618>)
    ec14:	459a      	cmp	sl, r3
    ec16:	d00b      	beq.n	ec30 <__aeabi_dadd+0x3f4>
    ec18:	4682      	mov	sl, r0
    ec1a:	e6e7      	b.n	e9ec <__aeabi_dadd+0x1b0>
    ec1c:	2800      	cmp	r0, #0
    ec1e:	d000      	beq.n	ec22 <__aeabi_dadd+0x3e6>
    ec20:	e09e      	b.n	ed60 <__aeabi_dadd+0x524>
    ec22:	0018      	movs	r0, r3
    ec24:	4310      	orrs	r0, r2
    ec26:	d100      	bne.n	ec2a <__aeabi_dadd+0x3ee>
    ec28:	e0e9      	b.n	edfe <__aeabi_dadd+0x5c2>
    ec2a:	001c      	movs	r4, r3
    ec2c:	0017      	movs	r7, r2
    ec2e:	46d8      	mov	r8, fp
    ec30:	4e88      	ldr	r6, [pc, #544]	; (ee54 <__aeabi_dadd+0x618>)
    ec32:	e687      	b.n	e944 <__aeabi_dadd+0x108>
    ec34:	2500      	movs	r5, #0
    ec36:	e772      	b.n	eb1e <__aeabi_dadd+0x2e2>
    ec38:	2100      	movs	r1, #0
    ec3a:	e782      	b.n	eb42 <__aeabi_dadd+0x306>
    ec3c:	0023      	movs	r3, r4
    ec3e:	433b      	orrs	r3, r7
    ec40:	2e00      	cmp	r6, #0
    ec42:	d000      	beq.n	ec46 <__aeabi_dadd+0x40a>
    ec44:	e0ab      	b.n	ed9e <__aeabi_dadd+0x562>
    ec46:	2b00      	cmp	r3, #0
    ec48:	d100      	bne.n	ec4c <__aeabi_dadd+0x410>
    ec4a:	e0e7      	b.n	ee1c <__aeabi_dadd+0x5e0>
    ec4c:	000b      	movs	r3, r1
    ec4e:	4313      	orrs	r3, r2
    ec50:	d100      	bne.n	ec54 <__aeabi_dadd+0x418>
    ec52:	e677      	b.n	e944 <__aeabi_dadd+0x108>
    ec54:	18ba      	adds	r2, r7, r2
    ec56:	42ba      	cmp	r2, r7
    ec58:	41bf      	sbcs	r7, r7
    ec5a:	1864      	adds	r4, r4, r1
    ec5c:	427f      	negs	r7, r7
    ec5e:	19e4      	adds	r4, r4, r7
    ec60:	0223      	lsls	r3, r4, #8
    ec62:	d400      	bmi.n	ec66 <__aeabi_dadd+0x42a>
    ec64:	e0f2      	b.n	ee4c <__aeabi_dadd+0x610>
    ec66:	4b7c      	ldr	r3, [pc, #496]	; (ee58 <__aeabi_dadd+0x61c>)
    ec68:	0017      	movs	r7, r2
    ec6a:	401c      	ands	r4, r3
    ec6c:	0006      	movs	r6, r0
    ec6e:	e669      	b.n	e944 <__aeabi_dadd+0x108>
    ec70:	0020      	movs	r0, r4
    ec72:	4338      	orrs	r0, r7
    ec74:	2e00      	cmp	r6, #0
    ec76:	d1d1      	bne.n	ec1c <__aeabi_dadd+0x3e0>
    ec78:	2800      	cmp	r0, #0
    ec7a:	d15b      	bne.n	ed34 <__aeabi_dadd+0x4f8>
    ec7c:	001c      	movs	r4, r3
    ec7e:	4314      	orrs	r4, r2
    ec80:	d100      	bne.n	ec84 <__aeabi_dadd+0x448>
    ec82:	e0a8      	b.n	edd6 <__aeabi_dadd+0x59a>
    ec84:	001c      	movs	r4, r3
    ec86:	0017      	movs	r7, r2
    ec88:	46d8      	mov	r8, fp
    ec8a:	e65b      	b.n	e944 <__aeabi_dadd+0x108>
    ec8c:	0006      	movs	r6, r0
    ec8e:	2400      	movs	r4, #0
    ec90:	2700      	movs	r7, #0
    ec92:	e697      	b.n	e9c4 <__aeabi_dadd+0x188>
    ec94:	4650      	mov	r0, sl
    ec96:	000b      	movs	r3, r1
    ec98:	3820      	subs	r0, #32
    ec9a:	40c3      	lsrs	r3, r0
    ec9c:	4699      	mov	r9, r3
    ec9e:	4653      	mov	r3, sl
    eca0:	2b20      	cmp	r3, #32
    eca2:	d100      	bne.n	eca6 <__aeabi_dadd+0x46a>
    eca4:	e095      	b.n	edd2 <__aeabi_dadd+0x596>
    eca6:	2340      	movs	r3, #64	; 0x40
    eca8:	4650      	mov	r0, sl
    ecaa:	1a1b      	subs	r3, r3, r0
    ecac:	4099      	lsls	r1, r3
    ecae:	430a      	orrs	r2, r1
    ecb0:	1e51      	subs	r1, r2, #1
    ecb2:	418a      	sbcs	r2, r1
    ecb4:	464b      	mov	r3, r9
    ecb6:	2100      	movs	r1, #0
    ecb8:	431a      	orrs	r2, r3
    ecba:	e69f      	b.n	e9fc <__aeabi_dadd+0x1c0>
    ecbc:	2e00      	cmp	r6, #0
    ecbe:	d130      	bne.n	ed22 <__aeabi_dadd+0x4e6>
    ecc0:	0026      	movs	r6, r4
    ecc2:	433e      	orrs	r6, r7
    ecc4:	d067      	beq.n	ed96 <__aeabi_dadd+0x55a>
    ecc6:	43db      	mvns	r3, r3
    ecc8:	469a      	mov	sl, r3
    ecca:	2b00      	cmp	r3, #0
    eccc:	d01c      	beq.n	ed08 <__aeabi_dadd+0x4cc>
    ecce:	4e61      	ldr	r6, [pc, #388]	; (ee54 <__aeabi_dadd+0x618>)
    ecd0:	42b0      	cmp	r0, r6
    ecd2:	d060      	beq.n	ed96 <__aeabi_dadd+0x55a>
    ecd4:	4653      	mov	r3, sl
    ecd6:	2b38      	cmp	r3, #56	; 0x38
    ecd8:	dd00      	ble.n	ecdc <__aeabi_dadd+0x4a0>
    ecda:	e096      	b.n	ee0a <__aeabi_dadd+0x5ce>
    ecdc:	2b1f      	cmp	r3, #31
    ecde:	dd00      	ble.n	ece2 <__aeabi_dadd+0x4a6>
    ece0:	e09f      	b.n	ee22 <__aeabi_dadd+0x5e6>
    ece2:	2620      	movs	r6, #32
    ece4:	1af3      	subs	r3, r6, r3
    ece6:	0026      	movs	r6, r4
    ece8:	409e      	lsls	r6, r3
    ecea:	469c      	mov	ip, r3
    ecec:	46b3      	mov	fp, r6
    ecee:	4653      	mov	r3, sl
    ecf0:	003e      	movs	r6, r7
    ecf2:	40de      	lsrs	r6, r3
    ecf4:	0033      	movs	r3, r6
    ecf6:	465e      	mov	r6, fp
    ecf8:	431e      	orrs	r6, r3
    ecfa:	4663      	mov	r3, ip
    ecfc:	409f      	lsls	r7, r3
    ecfe:	1e7b      	subs	r3, r7, #1
    ed00:	419f      	sbcs	r7, r3
    ed02:	4653      	mov	r3, sl
    ed04:	40dc      	lsrs	r4, r3
    ed06:	4337      	orrs	r7, r6
    ed08:	18bf      	adds	r7, r7, r2
    ed0a:	4297      	cmp	r7, r2
    ed0c:	4192      	sbcs	r2, r2
    ed0e:	1864      	adds	r4, r4, r1
    ed10:	4252      	negs	r2, r2
    ed12:	18a4      	adds	r4, r4, r2
    ed14:	0006      	movs	r6, r0
    ed16:	e678      	b.n	ea0a <__aeabi_dadd+0x1ce>
    ed18:	4327      	orrs	r7, r4
    ed1a:	1e7c      	subs	r4, r7, #1
    ed1c:	41a7      	sbcs	r7, r4
    ed1e:	2400      	movs	r4, #0
    ed20:	e737      	b.n	eb92 <__aeabi_dadd+0x356>
    ed22:	4e4c      	ldr	r6, [pc, #304]	; (ee54 <__aeabi_dadd+0x618>)
    ed24:	42b0      	cmp	r0, r6
    ed26:	d036      	beq.n	ed96 <__aeabi_dadd+0x55a>
    ed28:	2680      	movs	r6, #128	; 0x80
    ed2a:	425b      	negs	r3, r3
    ed2c:	0436      	lsls	r6, r6, #16
    ed2e:	469a      	mov	sl, r3
    ed30:	4334      	orrs	r4, r6
    ed32:	e7cf      	b.n	ecd4 <__aeabi_dadd+0x498>
    ed34:	0018      	movs	r0, r3
    ed36:	4310      	orrs	r0, r2
    ed38:	d100      	bne.n	ed3c <__aeabi_dadd+0x500>
    ed3a:	e603      	b.n	e944 <__aeabi_dadd+0x108>
    ed3c:	1ab8      	subs	r0, r7, r2
    ed3e:	4684      	mov	ip, r0
    ed40:	4567      	cmp	r7, ip
    ed42:	41ad      	sbcs	r5, r5
    ed44:	1ae0      	subs	r0, r4, r3
    ed46:	426d      	negs	r5, r5
    ed48:	1b40      	subs	r0, r0, r5
    ed4a:	0205      	lsls	r5, r0, #8
    ed4c:	d400      	bmi.n	ed50 <__aeabi_dadd+0x514>
    ed4e:	e62c      	b.n	e9aa <__aeabi_dadd+0x16e>
    ed50:	1bd7      	subs	r7, r2, r7
    ed52:	42ba      	cmp	r2, r7
    ed54:	4192      	sbcs	r2, r2
    ed56:	1b1c      	subs	r4, r3, r4
    ed58:	4252      	negs	r2, r2
    ed5a:	1aa4      	subs	r4, r4, r2
    ed5c:	46d8      	mov	r8, fp
    ed5e:	e5f1      	b.n	e944 <__aeabi_dadd+0x108>
    ed60:	0018      	movs	r0, r3
    ed62:	4310      	orrs	r0, r2
    ed64:	d100      	bne.n	ed68 <__aeabi_dadd+0x52c>
    ed66:	e763      	b.n	ec30 <__aeabi_dadd+0x3f4>
    ed68:	08f8      	lsrs	r0, r7, #3
    ed6a:	0767      	lsls	r7, r4, #29
    ed6c:	4307      	orrs	r7, r0
    ed6e:	2080      	movs	r0, #128	; 0x80
    ed70:	08e4      	lsrs	r4, r4, #3
    ed72:	0300      	lsls	r0, r0, #12
    ed74:	4204      	tst	r4, r0
    ed76:	d008      	beq.n	ed8a <__aeabi_dadd+0x54e>
    ed78:	08dd      	lsrs	r5, r3, #3
    ed7a:	4205      	tst	r5, r0
    ed7c:	d105      	bne.n	ed8a <__aeabi_dadd+0x54e>
    ed7e:	08d2      	lsrs	r2, r2, #3
    ed80:	0759      	lsls	r1, r3, #29
    ed82:	4311      	orrs	r1, r2
    ed84:	000f      	movs	r7, r1
    ed86:	002c      	movs	r4, r5
    ed88:	46d8      	mov	r8, fp
    ed8a:	0f7b      	lsrs	r3, r7, #29
    ed8c:	00e4      	lsls	r4, r4, #3
    ed8e:	431c      	orrs	r4, r3
    ed90:	00ff      	lsls	r7, r7, #3
    ed92:	4e30      	ldr	r6, [pc, #192]	; (ee54 <__aeabi_dadd+0x618>)
    ed94:	e5d6      	b.n	e944 <__aeabi_dadd+0x108>
    ed96:	000c      	movs	r4, r1
    ed98:	0017      	movs	r7, r2
    ed9a:	0006      	movs	r6, r0
    ed9c:	e5d2      	b.n	e944 <__aeabi_dadd+0x108>
    ed9e:	2b00      	cmp	r3, #0
    eda0:	d038      	beq.n	ee14 <__aeabi_dadd+0x5d8>
    eda2:	000b      	movs	r3, r1
    eda4:	4313      	orrs	r3, r2
    eda6:	d100      	bne.n	edaa <__aeabi_dadd+0x56e>
    eda8:	e742      	b.n	ec30 <__aeabi_dadd+0x3f4>
    edaa:	08f8      	lsrs	r0, r7, #3
    edac:	0767      	lsls	r7, r4, #29
    edae:	4307      	orrs	r7, r0
    edb0:	2080      	movs	r0, #128	; 0x80
    edb2:	08e4      	lsrs	r4, r4, #3
    edb4:	0300      	lsls	r0, r0, #12
    edb6:	4204      	tst	r4, r0
    edb8:	d0e7      	beq.n	ed8a <__aeabi_dadd+0x54e>
    edba:	08cb      	lsrs	r3, r1, #3
    edbc:	4203      	tst	r3, r0
    edbe:	d1e4      	bne.n	ed8a <__aeabi_dadd+0x54e>
    edc0:	08d2      	lsrs	r2, r2, #3
    edc2:	0749      	lsls	r1, r1, #29
    edc4:	4311      	orrs	r1, r2
    edc6:	000f      	movs	r7, r1
    edc8:	001c      	movs	r4, r3
    edca:	e7de      	b.n	ed8a <__aeabi_dadd+0x54e>
    edcc:	2700      	movs	r7, #0
    edce:	2400      	movs	r4, #0
    edd0:	e5d5      	b.n	e97e <__aeabi_dadd+0x142>
    edd2:	2100      	movs	r1, #0
    edd4:	e76b      	b.n	ecae <__aeabi_dadd+0x472>
    edd6:	2500      	movs	r5, #0
    edd8:	2700      	movs	r7, #0
    edda:	e5f3      	b.n	e9c4 <__aeabi_dadd+0x188>
    eddc:	464e      	mov	r6, r9
    edde:	0025      	movs	r5, r4
    ede0:	3e20      	subs	r6, #32
    ede2:	40f5      	lsrs	r5, r6
    ede4:	464b      	mov	r3, r9
    ede6:	002e      	movs	r6, r5
    ede8:	2b20      	cmp	r3, #32
    edea:	d02d      	beq.n	ee48 <__aeabi_dadd+0x60c>
    edec:	2540      	movs	r5, #64	; 0x40
    edee:	1aed      	subs	r5, r5, r3
    edf0:	40ac      	lsls	r4, r5
    edf2:	4327      	orrs	r7, r4
    edf4:	1e7c      	subs	r4, r7, #1
    edf6:	41a7      	sbcs	r7, r4
    edf8:	2400      	movs	r4, #0
    edfa:	4337      	orrs	r7, r6
    edfc:	e6c9      	b.n	eb92 <__aeabi_dadd+0x356>
    edfe:	2480      	movs	r4, #128	; 0x80
    ee00:	2500      	movs	r5, #0
    ee02:	0324      	lsls	r4, r4, #12
    ee04:	4e13      	ldr	r6, [pc, #76]	; (ee54 <__aeabi_dadd+0x618>)
    ee06:	2700      	movs	r7, #0
    ee08:	e5dc      	b.n	e9c4 <__aeabi_dadd+0x188>
    ee0a:	4327      	orrs	r7, r4
    ee0c:	1e7c      	subs	r4, r7, #1
    ee0e:	41a7      	sbcs	r7, r4
    ee10:	2400      	movs	r4, #0
    ee12:	e779      	b.n	ed08 <__aeabi_dadd+0x4cc>
    ee14:	000c      	movs	r4, r1
    ee16:	0017      	movs	r7, r2
    ee18:	4e0e      	ldr	r6, [pc, #56]	; (ee54 <__aeabi_dadd+0x618>)
    ee1a:	e593      	b.n	e944 <__aeabi_dadd+0x108>
    ee1c:	000c      	movs	r4, r1
    ee1e:	0017      	movs	r7, r2
    ee20:	e590      	b.n	e944 <__aeabi_dadd+0x108>
    ee22:	4656      	mov	r6, sl
    ee24:	0023      	movs	r3, r4
    ee26:	3e20      	subs	r6, #32
    ee28:	40f3      	lsrs	r3, r6
    ee2a:	4699      	mov	r9, r3
    ee2c:	4653      	mov	r3, sl
    ee2e:	2b20      	cmp	r3, #32
    ee30:	d00e      	beq.n	ee50 <__aeabi_dadd+0x614>
    ee32:	2340      	movs	r3, #64	; 0x40
    ee34:	4656      	mov	r6, sl
    ee36:	1b9b      	subs	r3, r3, r6
    ee38:	409c      	lsls	r4, r3
    ee3a:	4327      	orrs	r7, r4
    ee3c:	1e7c      	subs	r4, r7, #1
    ee3e:	41a7      	sbcs	r7, r4
    ee40:	464b      	mov	r3, r9
    ee42:	2400      	movs	r4, #0
    ee44:	431f      	orrs	r7, r3
    ee46:	e75f      	b.n	ed08 <__aeabi_dadd+0x4cc>
    ee48:	2400      	movs	r4, #0
    ee4a:	e7d2      	b.n	edf2 <__aeabi_dadd+0x5b6>
    ee4c:	0017      	movs	r7, r2
    ee4e:	e5b2      	b.n	e9b6 <__aeabi_dadd+0x17a>
    ee50:	2400      	movs	r4, #0
    ee52:	e7f2      	b.n	ee3a <__aeabi_dadd+0x5fe>
    ee54:	000007ff 	.word	0x000007ff
    ee58:	ff7fffff 	.word	0xff7fffff

0000ee5c <__aeabi_ddiv>:
    ee5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee5e:	4657      	mov	r7, sl
    ee60:	4645      	mov	r5, r8
    ee62:	46de      	mov	lr, fp
    ee64:	464e      	mov	r6, r9
    ee66:	b5e0      	push	{r5, r6, r7, lr}
    ee68:	004c      	lsls	r4, r1, #1
    ee6a:	030e      	lsls	r6, r1, #12
    ee6c:	b087      	sub	sp, #28
    ee6e:	4683      	mov	fp, r0
    ee70:	4692      	mov	sl, r2
    ee72:	001d      	movs	r5, r3
    ee74:	4680      	mov	r8, r0
    ee76:	0b36      	lsrs	r6, r6, #12
    ee78:	0d64      	lsrs	r4, r4, #21
    ee7a:	0fcf      	lsrs	r7, r1, #31
    ee7c:	2c00      	cmp	r4, #0
    ee7e:	d04f      	beq.n	ef20 <__aeabi_ddiv+0xc4>
    ee80:	4b6f      	ldr	r3, [pc, #444]	; (f040 <__aeabi_ddiv+0x1e4>)
    ee82:	429c      	cmp	r4, r3
    ee84:	d035      	beq.n	eef2 <__aeabi_ddiv+0x96>
    ee86:	2380      	movs	r3, #128	; 0x80
    ee88:	0f42      	lsrs	r2, r0, #29
    ee8a:	041b      	lsls	r3, r3, #16
    ee8c:	00f6      	lsls	r6, r6, #3
    ee8e:	4313      	orrs	r3, r2
    ee90:	4333      	orrs	r3, r6
    ee92:	4699      	mov	r9, r3
    ee94:	00c3      	lsls	r3, r0, #3
    ee96:	4698      	mov	r8, r3
    ee98:	4b6a      	ldr	r3, [pc, #424]	; (f044 <__aeabi_ddiv+0x1e8>)
    ee9a:	2600      	movs	r6, #0
    ee9c:	469c      	mov	ip, r3
    ee9e:	2300      	movs	r3, #0
    eea0:	4464      	add	r4, ip
    eea2:	9303      	str	r3, [sp, #12]
    eea4:	032b      	lsls	r3, r5, #12
    eea6:	0b1b      	lsrs	r3, r3, #12
    eea8:	469b      	mov	fp, r3
    eeaa:	006b      	lsls	r3, r5, #1
    eeac:	0fed      	lsrs	r5, r5, #31
    eeae:	4650      	mov	r0, sl
    eeb0:	0d5b      	lsrs	r3, r3, #21
    eeb2:	9501      	str	r5, [sp, #4]
    eeb4:	d05e      	beq.n	ef74 <__aeabi_ddiv+0x118>
    eeb6:	4a62      	ldr	r2, [pc, #392]	; (f040 <__aeabi_ddiv+0x1e4>)
    eeb8:	4293      	cmp	r3, r2
    eeba:	d053      	beq.n	ef64 <__aeabi_ddiv+0x108>
    eebc:	465a      	mov	r2, fp
    eebe:	00d1      	lsls	r1, r2, #3
    eec0:	2280      	movs	r2, #128	; 0x80
    eec2:	0f40      	lsrs	r0, r0, #29
    eec4:	0412      	lsls	r2, r2, #16
    eec6:	4302      	orrs	r2, r0
    eec8:	430a      	orrs	r2, r1
    eeca:	4693      	mov	fp, r2
    eecc:	4652      	mov	r2, sl
    eece:	00d1      	lsls	r1, r2, #3
    eed0:	4a5c      	ldr	r2, [pc, #368]	; (f044 <__aeabi_ddiv+0x1e8>)
    eed2:	4694      	mov	ip, r2
    eed4:	2200      	movs	r2, #0
    eed6:	4463      	add	r3, ip
    eed8:	0038      	movs	r0, r7
    eeda:	4068      	eors	r0, r5
    eedc:	4684      	mov	ip, r0
    eede:	9002      	str	r0, [sp, #8]
    eee0:	1ae4      	subs	r4, r4, r3
    eee2:	4316      	orrs	r6, r2
    eee4:	2e0f      	cmp	r6, #15
    eee6:	d900      	bls.n	eeea <__aeabi_ddiv+0x8e>
    eee8:	e0b4      	b.n	f054 <__aeabi_ddiv+0x1f8>
    eeea:	4b57      	ldr	r3, [pc, #348]	; (f048 <__aeabi_ddiv+0x1ec>)
    eeec:	00b6      	lsls	r6, r6, #2
    eeee:	599b      	ldr	r3, [r3, r6]
    eef0:	469f      	mov	pc, r3
    eef2:	0003      	movs	r3, r0
    eef4:	4333      	orrs	r3, r6
    eef6:	4699      	mov	r9, r3
    eef8:	d16c      	bne.n	efd4 <__aeabi_ddiv+0x178>
    eefa:	2300      	movs	r3, #0
    eefc:	4698      	mov	r8, r3
    eefe:	3302      	adds	r3, #2
    ef00:	2608      	movs	r6, #8
    ef02:	9303      	str	r3, [sp, #12]
    ef04:	e7ce      	b.n	eea4 <__aeabi_ddiv+0x48>
    ef06:	46cb      	mov	fp, r9
    ef08:	4641      	mov	r1, r8
    ef0a:	9a03      	ldr	r2, [sp, #12]
    ef0c:	9701      	str	r7, [sp, #4]
    ef0e:	2a02      	cmp	r2, #2
    ef10:	d165      	bne.n	efde <__aeabi_ddiv+0x182>
    ef12:	9b01      	ldr	r3, [sp, #4]
    ef14:	4c4a      	ldr	r4, [pc, #296]	; (f040 <__aeabi_ddiv+0x1e4>)
    ef16:	469c      	mov	ip, r3
    ef18:	2300      	movs	r3, #0
    ef1a:	2200      	movs	r2, #0
    ef1c:	4698      	mov	r8, r3
    ef1e:	e06b      	b.n	eff8 <__aeabi_ddiv+0x19c>
    ef20:	0003      	movs	r3, r0
    ef22:	4333      	orrs	r3, r6
    ef24:	4699      	mov	r9, r3
    ef26:	d04e      	beq.n	efc6 <__aeabi_ddiv+0x16a>
    ef28:	2e00      	cmp	r6, #0
    ef2a:	d100      	bne.n	ef2e <__aeabi_ddiv+0xd2>
    ef2c:	e1bc      	b.n	f2a8 <__aeabi_ddiv+0x44c>
    ef2e:	0030      	movs	r0, r6
    ef30:	f001 f8ca 	bl	100c8 <__clzsi2>
    ef34:	0003      	movs	r3, r0
    ef36:	3b0b      	subs	r3, #11
    ef38:	2b1c      	cmp	r3, #28
    ef3a:	dd00      	ble.n	ef3e <__aeabi_ddiv+0xe2>
    ef3c:	e1ac      	b.n	f298 <__aeabi_ddiv+0x43c>
    ef3e:	221d      	movs	r2, #29
    ef40:	1ad3      	subs	r3, r2, r3
    ef42:	465a      	mov	r2, fp
    ef44:	0001      	movs	r1, r0
    ef46:	40da      	lsrs	r2, r3
    ef48:	3908      	subs	r1, #8
    ef4a:	408e      	lsls	r6, r1
    ef4c:	0013      	movs	r3, r2
    ef4e:	4333      	orrs	r3, r6
    ef50:	4699      	mov	r9, r3
    ef52:	465b      	mov	r3, fp
    ef54:	408b      	lsls	r3, r1
    ef56:	4698      	mov	r8, r3
    ef58:	2300      	movs	r3, #0
    ef5a:	4c3c      	ldr	r4, [pc, #240]	; (f04c <__aeabi_ddiv+0x1f0>)
    ef5c:	2600      	movs	r6, #0
    ef5e:	1a24      	subs	r4, r4, r0
    ef60:	9303      	str	r3, [sp, #12]
    ef62:	e79f      	b.n	eea4 <__aeabi_ddiv+0x48>
    ef64:	4651      	mov	r1, sl
    ef66:	465a      	mov	r2, fp
    ef68:	4311      	orrs	r1, r2
    ef6a:	d129      	bne.n	efc0 <__aeabi_ddiv+0x164>
    ef6c:	2200      	movs	r2, #0
    ef6e:	4693      	mov	fp, r2
    ef70:	3202      	adds	r2, #2
    ef72:	e7b1      	b.n	eed8 <__aeabi_ddiv+0x7c>
    ef74:	4659      	mov	r1, fp
    ef76:	4301      	orrs	r1, r0
    ef78:	d01e      	beq.n	efb8 <__aeabi_ddiv+0x15c>
    ef7a:	465b      	mov	r3, fp
    ef7c:	2b00      	cmp	r3, #0
    ef7e:	d100      	bne.n	ef82 <__aeabi_ddiv+0x126>
    ef80:	e19e      	b.n	f2c0 <__aeabi_ddiv+0x464>
    ef82:	4658      	mov	r0, fp
    ef84:	f001 f8a0 	bl	100c8 <__clzsi2>
    ef88:	0003      	movs	r3, r0
    ef8a:	3b0b      	subs	r3, #11
    ef8c:	2b1c      	cmp	r3, #28
    ef8e:	dd00      	ble.n	ef92 <__aeabi_ddiv+0x136>
    ef90:	e18f      	b.n	f2b2 <__aeabi_ddiv+0x456>
    ef92:	0002      	movs	r2, r0
    ef94:	4659      	mov	r1, fp
    ef96:	3a08      	subs	r2, #8
    ef98:	4091      	lsls	r1, r2
    ef9a:	468b      	mov	fp, r1
    ef9c:	211d      	movs	r1, #29
    ef9e:	1acb      	subs	r3, r1, r3
    efa0:	4651      	mov	r1, sl
    efa2:	40d9      	lsrs	r1, r3
    efa4:	000b      	movs	r3, r1
    efa6:	4659      	mov	r1, fp
    efa8:	430b      	orrs	r3, r1
    efaa:	4651      	mov	r1, sl
    efac:	469b      	mov	fp, r3
    efae:	4091      	lsls	r1, r2
    efb0:	4b26      	ldr	r3, [pc, #152]	; (f04c <__aeabi_ddiv+0x1f0>)
    efb2:	2200      	movs	r2, #0
    efb4:	1a1b      	subs	r3, r3, r0
    efb6:	e78f      	b.n	eed8 <__aeabi_ddiv+0x7c>
    efb8:	2300      	movs	r3, #0
    efba:	2201      	movs	r2, #1
    efbc:	469b      	mov	fp, r3
    efbe:	e78b      	b.n	eed8 <__aeabi_ddiv+0x7c>
    efc0:	4651      	mov	r1, sl
    efc2:	2203      	movs	r2, #3
    efc4:	e788      	b.n	eed8 <__aeabi_ddiv+0x7c>
    efc6:	2300      	movs	r3, #0
    efc8:	4698      	mov	r8, r3
    efca:	3301      	adds	r3, #1
    efcc:	2604      	movs	r6, #4
    efce:	2400      	movs	r4, #0
    efd0:	9303      	str	r3, [sp, #12]
    efd2:	e767      	b.n	eea4 <__aeabi_ddiv+0x48>
    efd4:	2303      	movs	r3, #3
    efd6:	46b1      	mov	r9, r6
    efd8:	9303      	str	r3, [sp, #12]
    efda:	260c      	movs	r6, #12
    efdc:	e762      	b.n	eea4 <__aeabi_ddiv+0x48>
    efde:	2a03      	cmp	r2, #3
    efe0:	d100      	bne.n	efe4 <__aeabi_ddiv+0x188>
    efe2:	e25c      	b.n	f49e <__aeabi_ddiv+0x642>
    efe4:	9b01      	ldr	r3, [sp, #4]
    efe6:	2a01      	cmp	r2, #1
    efe8:	d000      	beq.n	efec <__aeabi_ddiv+0x190>
    efea:	e1e4      	b.n	f3b6 <__aeabi_ddiv+0x55a>
    efec:	4013      	ands	r3, r2
    efee:	469c      	mov	ip, r3
    eff0:	2300      	movs	r3, #0
    eff2:	2400      	movs	r4, #0
    eff4:	2200      	movs	r2, #0
    eff6:	4698      	mov	r8, r3
    eff8:	2100      	movs	r1, #0
    effa:	0312      	lsls	r2, r2, #12
    effc:	0b13      	lsrs	r3, r2, #12
    effe:	0d0a      	lsrs	r2, r1, #20
    f000:	0512      	lsls	r2, r2, #20
    f002:	431a      	orrs	r2, r3
    f004:	0523      	lsls	r3, r4, #20
    f006:	4c12      	ldr	r4, [pc, #72]	; (f050 <__aeabi_ddiv+0x1f4>)
    f008:	4640      	mov	r0, r8
    f00a:	4022      	ands	r2, r4
    f00c:	4313      	orrs	r3, r2
    f00e:	4662      	mov	r2, ip
    f010:	005b      	lsls	r3, r3, #1
    f012:	07d2      	lsls	r2, r2, #31
    f014:	085b      	lsrs	r3, r3, #1
    f016:	4313      	orrs	r3, r2
    f018:	0019      	movs	r1, r3
    f01a:	b007      	add	sp, #28
    f01c:	bc3c      	pop	{r2, r3, r4, r5}
    f01e:	4690      	mov	r8, r2
    f020:	4699      	mov	r9, r3
    f022:	46a2      	mov	sl, r4
    f024:	46ab      	mov	fp, r5
    f026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f028:	2300      	movs	r3, #0
    f02a:	2280      	movs	r2, #128	; 0x80
    f02c:	469c      	mov	ip, r3
    f02e:	0312      	lsls	r2, r2, #12
    f030:	4698      	mov	r8, r3
    f032:	4c03      	ldr	r4, [pc, #12]	; (f040 <__aeabi_ddiv+0x1e4>)
    f034:	e7e0      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f036:	2300      	movs	r3, #0
    f038:	4c01      	ldr	r4, [pc, #4]	; (f040 <__aeabi_ddiv+0x1e4>)
    f03a:	2200      	movs	r2, #0
    f03c:	4698      	mov	r8, r3
    f03e:	e7db      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f040:	000007ff 	.word	0x000007ff
    f044:	fffffc01 	.word	0xfffffc01
    f048:	00013b14 	.word	0x00013b14
    f04c:	fffffc0d 	.word	0xfffffc0d
    f050:	800fffff 	.word	0x800fffff
    f054:	45d9      	cmp	r9, fp
    f056:	d900      	bls.n	f05a <__aeabi_ddiv+0x1fe>
    f058:	e139      	b.n	f2ce <__aeabi_ddiv+0x472>
    f05a:	d100      	bne.n	f05e <__aeabi_ddiv+0x202>
    f05c:	e134      	b.n	f2c8 <__aeabi_ddiv+0x46c>
    f05e:	2300      	movs	r3, #0
    f060:	4646      	mov	r6, r8
    f062:	464d      	mov	r5, r9
    f064:	469a      	mov	sl, r3
    f066:	3c01      	subs	r4, #1
    f068:	465b      	mov	r3, fp
    f06a:	0e0a      	lsrs	r2, r1, #24
    f06c:	021b      	lsls	r3, r3, #8
    f06e:	431a      	orrs	r2, r3
    f070:	020b      	lsls	r3, r1, #8
    f072:	0c17      	lsrs	r7, r2, #16
    f074:	9303      	str	r3, [sp, #12]
    f076:	0413      	lsls	r3, r2, #16
    f078:	0c1b      	lsrs	r3, r3, #16
    f07a:	0039      	movs	r1, r7
    f07c:	0028      	movs	r0, r5
    f07e:	4690      	mov	r8, r2
    f080:	9301      	str	r3, [sp, #4]
    f082:	f7ff fa3b 	bl	e4fc <__udivsi3>
    f086:	0002      	movs	r2, r0
    f088:	9b01      	ldr	r3, [sp, #4]
    f08a:	4683      	mov	fp, r0
    f08c:	435a      	muls	r2, r3
    f08e:	0028      	movs	r0, r5
    f090:	0039      	movs	r1, r7
    f092:	4691      	mov	r9, r2
    f094:	f7ff fab8 	bl	e608 <__aeabi_uidivmod>
    f098:	0c35      	lsrs	r5, r6, #16
    f09a:	0409      	lsls	r1, r1, #16
    f09c:	430d      	orrs	r5, r1
    f09e:	45a9      	cmp	r9, r5
    f0a0:	d90d      	bls.n	f0be <__aeabi_ddiv+0x262>
    f0a2:	465b      	mov	r3, fp
    f0a4:	4445      	add	r5, r8
    f0a6:	3b01      	subs	r3, #1
    f0a8:	45a8      	cmp	r8, r5
    f0aa:	d900      	bls.n	f0ae <__aeabi_ddiv+0x252>
    f0ac:	e13a      	b.n	f324 <__aeabi_ddiv+0x4c8>
    f0ae:	45a9      	cmp	r9, r5
    f0b0:	d800      	bhi.n	f0b4 <__aeabi_ddiv+0x258>
    f0b2:	e137      	b.n	f324 <__aeabi_ddiv+0x4c8>
    f0b4:	2302      	movs	r3, #2
    f0b6:	425b      	negs	r3, r3
    f0b8:	469c      	mov	ip, r3
    f0ba:	4445      	add	r5, r8
    f0bc:	44e3      	add	fp, ip
    f0be:	464b      	mov	r3, r9
    f0c0:	1aeb      	subs	r3, r5, r3
    f0c2:	0039      	movs	r1, r7
    f0c4:	0018      	movs	r0, r3
    f0c6:	9304      	str	r3, [sp, #16]
    f0c8:	f7ff fa18 	bl	e4fc <__udivsi3>
    f0cc:	9b01      	ldr	r3, [sp, #4]
    f0ce:	0005      	movs	r5, r0
    f0d0:	4343      	muls	r3, r0
    f0d2:	0039      	movs	r1, r7
    f0d4:	9804      	ldr	r0, [sp, #16]
    f0d6:	4699      	mov	r9, r3
    f0d8:	f7ff fa96 	bl	e608 <__aeabi_uidivmod>
    f0dc:	0433      	lsls	r3, r6, #16
    f0de:	0409      	lsls	r1, r1, #16
    f0e0:	0c1b      	lsrs	r3, r3, #16
    f0e2:	430b      	orrs	r3, r1
    f0e4:	4599      	cmp	r9, r3
    f0e6:	d909      	bls.n	f0fc <__aeabi_ddiv+0x2a0>
    f0e8:	4443      	add	r3, r8
    f0ea:	1e6a      	subs	r2, r5, #1
    f0ec:	4598      	cmp	r8, r3
    f0ee:	d900      	bls.n	f0f2 <__aeabi_ddiv+0x296>
    f0f0:	e11a      	b.n	f328 <__aeabi_ddiv+0x4cc>
    f0f2:	4599      	cmp	r9, r3
    f0f4:	d800      	bhi.n	f0f8 <__aeabi_ddiv+0x29c>
    f0f6:	e117      	b.n	f328 <__aeabi_ddiv+0x4cc>
    f0f8:	3d02      	subs	r5, #2
    f0fa:	4443      	add	r3, r8
    f0fc:	464a      	mov	r2, r9
    f0fe:	1a9b      	subs	r3, r3, r2
    f100:	465a      	mov	r2, fp
    f102:	0412      	lsls	r2, r2, #16
    f104:	432a      	orrs	r2, r5
    f106:	9903      	ldr	r1, [sp, #12]
    f108:	4693      	mov	fp, r2
    f10a:	0c10      	lsrs	r0, r2, #16
    f10c:	0c0a      	lsrs	r2, r1, #16
    f10e:	4691      	mov	r9, r2
    f110:	0409      	lsls	r1, r1, #16
    f112:	465a      	mov	r2, fp
    f114:	0c09      	lsrs	r1, r1, #16
    f116:	464e      	mov	r6, r9
    f118:	000d      	movs	r5, r1
    f11a:	0412      	lsls	r2, r2, #16
    f11c:	0c12      	lsrs	r2, r2, #16
    f11e:	4345      	muls	r5, r0
    f120:	9105      	str	r1, [sp, #20]
    f122:	4351      	muls	r1, r2
    f124:	4372      	muls	r2, r6
    f126:	4370      	muls	r0, r6
    f128:	1952      	adds	r2, r2, r5
    f12a:	0c0e      	lsrs	r6, r1, #16
    f12c:	18b2      	adds	r2, r6, r2
    f12e:	4295      	cmp	r5, r2
    f130:	d903      	bls.n	f13a <__aeabi_ddiv+0x2de>
    f132:	2580      	movs	r5, #128	; 0x80
    f134:	026d      	lsls	r5, r5, #9
    f136:	46ac      	mov	ip, r5
    f138:	4460      	add	r0, ip
    f13a:	0c15      	lsrs	r5, r2, #16
    f13c:	0409      	lsls	r1, r1, #16
    f13e:	0412      	lsls	r2, r2, #16
    f140:	0c09      	lsrs	r1, r1, #16
    f142:	1828      	adds	r0, r5, r0
    f144:	1852      	adds	r2, r2, r1
    f146:	4283      	cmp	r3, r0
    f148:	d200      	bcs.n	f14c <__aeabi_ddiv+0x2f0>
    f14a:	e0ce      	b.n	f2ea <__aeabi_ddiv+0x48e>
    f14c:	d100      	bne.n	f150 <__aeabi_ddiv+0x2f4>
    f14e:	e0c8      	b.n	f2e2 <__aeabi_ddiv+0x486>
    f150:	1a1d      	subs	r5, r3, r0
    f152:	4653      	mov	r3, sl
    f154:	1a9e      	subs	r6, r3, r2
    f156:	45b2      	cmp	sl, r6
    f158:	4192      	sbcs	r2, r2
    f15a:	4252      	negs	r2, r2
    f15c:	1aab      	subs	r3, r5, r2
    f15e:	469a      	mov	sl, r3
    f160:	4598      	cmp	r8, r3
    f162:	d100      	bne.n	f166 <__aeabi_ddiv+0x30a>
    f164:	e117      	b.n	f396 <__aeabi_ddiv+0x53a>
    f166:	0039      	movs	r1, r7
    f168:	0018      	movs	r0, r3
    f16a:	f7ff f9c7 	bl	e4fc <__udivsi3>
    f16e:	9b01      	ldr	r3, [sp, #4]
    f170:	0005      	movs	r5, r0
    f172:	4343      	muls	r3, r0
    f174:	0039      	movs	r1, r7
    f176:	4650      	mov	r0, sl
    f178:	9304      	str	r3, [sp, #16]
    f17a:	f7ff fa45 	bl	e608 <__aeabi_uidivmod>
    f17e:	9804      	ldr	r0, [sp, #16]
    f180:	040b      	lsls	r3, r1, #16
    f182:	0c31      	lsrs	r1, r6, #16
    f184:	4319      	orrs	r1, r3
    f186:	4288      	cmp	r0, r1
    f188:	d909      	bls.n	f19e <__aeabi_ddiv+0x342>
    f18a:	4441      	add	r1, r8
    f18c:	1e6b      	subs	r3, r5, #1
    f18e:	4588      	cmp	r8, r1
    f190:	d900      	bls.n	f194 <__aeabi_ddiv+0x338>
    f192:	e107      	b.n	f3a4 <__aeabi_ddiv+0x548>
    f194:	4288      	cmp	r0, r1
    f196:	d800      	bhi.n	f19a <__aeabi_ddiv+0x33e>
    f198:	e104      	b.n	f3a4 <__aeabi_ddiv+0x548>
    f19a:	3d02      	subs	r5, #2
    f19c:	4441      	add	r1, r8
    f19e:	9b04      	ldr	r3, [sp, #16]
    f1a0:	1acb      	subs	r3, r1, r3
    f1a2:	0018      	movs	r0, r3
    f1a4:	0039      	movs	r1, r7
    f1a6:	9304      	str	r3, [sp, #16]
    f1a8:	f7ff f9a8 	bl	e4fc <__udivsi3>
    f1ac:	9b01      	ldr	r3, [sp, #4]
    f1ae:	4682      	mov	sl, r0
    f1b0:	4343      	muls	r3, r0
    f1b2:	0039      	movs	r1, r7
    f1b4:	9804      	ldr	r0, [sp, #16]
    f1b6:	9301      	str	r3, [sp, #4]
    f1b8:	f7ff fa26 	bl	e608 <__aeabi_uidivmod>
    f1bc:	9801      	ldr	r0, [sp, #4]
    f1be:	040b      	lsls	r3, r1, #16
    f1c0:	0431      	lsls	r1, r6, #16
    f1c2:	0c09      	lsrs	r1, r1, #16
    f1c4:	4319      	orrs	r1, r3
    f1c6:	4288      	cmp	r0, r1
    f1c8:	d90d      	bls.n	f1e6 <__aeabi_ddiv+0x38a>
    f1ca:	4653      	mov	r3, sl
    f1cc:	4441      	add	r1, r8
    f1ce:	3b01      	subs	r3, #1
    f1d0:	4588      	cmp	r8, r1
    f1d2:	d900      	bls.n	f1d6 <__aeabi_ddiv+0x37a>
    f1d4:	e0e8      	b.n	f3a8 <__aeabi_ddiv+0x54c>
    f1d6:	4288      	cmp	r0, r1
    f1d8:	d800      	bhi.n	f1dc <__aeabi_ddiv+0x380>
    f1da:	e0e5      	b.n	f3a8 <__aeabi_ddiv+0x54c>
    f1dc:	2302      	movs	r3, #2
    f1de:	425b      	negs	r3, r3
    f1e0:	469c      	mov	ip, r3
    f1e2:	4441      	add	r1, r8
    f1e4:	44e2      	add	sl, ip
    f1e6:	9b01      	ldr	r3, [sp, #4]
    f1e8:	042d      	lsls	r5, r5, #16
    f1ea:	1ace      	subs	r6, r1, r3
    f1ec:	4651      	mov	r1, sl
    f1ee:	4329      	orrs	r1, r5
    f1f0:	9d05      	ldr	r5, [sp, #20]
    f1f2:	464f      	mov	r7, r9
    f1f4:	002a      	movs	r2, r5
    f1f6:	040b      	lsls	r3, r1, #16
    f1f8:	0c08      	lsrs	r0, r1, #16
    f1fa:	0c1b      	lsrs	r3, r3, #16
    f1fc:	435a      	muls	r2, r3
    f1fe:	4345      	muls	r5, r0
    f200:	437b      	muls	r3, r7
    f202:	4378      	muls	r0, r7
    f204:	195b      	adds	r3, r3, r5
    f206:	0c17      	lsrs	r7, r2, #16
    f208:	18fb      	adds	r3, r7, r3
    f20a:	429d      	cmp	r5, r3
    f20c:	d903      	bls.n	f216 <__aeabi_ddiv+0x3ba>
    f20e:	2580      	movs	r5, #128	; 0x80
    f210:	026d      	lsls	r5, r5, #9
    f212:	46ac      	mov	ip, r5
    f214:	4460      	add	r0, ip
    f216:	0c1d      	lsrs	r5, r3, #16
    f218:	0412      	lsls	r2, r2, #16
    f21a:	041b      	lsls	r3, r3, #16
    f21c:	0c12      	lsrs	r2, r2, #16
    f21e:	1828      	adds	r0, r5, r0
    f220:	189b      	adds	r3, r3, r2
    f222:	4286      	cmp	r6, r0
    f224:	d200      	bcs.n	f228 <__aeabi_ddiv+0x3cc>
    f226:	e093      	b.n	f350 <__aeabi_ddiv+0x4f4>
    f228:	d100      	bne.n	f22c <__aeabi_ddiv+0x3d0>
    f22a:	e08e      	b.n	f34a <__aeabi_ddiv+0x4ee>
    f22c:	2301      	movs	r3, #1
    f22e:	4319      	orrs	r1, r3
    f230:	4ba0      	ldr	r3, [pc, #640]	; (f4b4 <__aeabi_ddiv+0x658>)
    f232:	18e3      	adds	r3, r4, r3
    f234:	2b00      	cmp	r3, #0
    f236:	dc00      	bgt.n	f23a <__aeabi_ddiv+0x3de>
    f238:	e099      	b.n	f36e <__aeabi_ddiv+0x512>
    f23a:	074a      	lsls	r2, r1, #29
    f23c:	d000      	beq.n	f240 <__aeabi_ddiv+0x3e4>
    f23e:	e09e      	b.n	f37e <__aeabi_ddiv+0x522>
    f240:	465a      	mov	r2, fp
    f242:	01d2      	lsls	r2, r2, #7
    f244:	d506      	bpl.n	f254 <__aeabi_ddiv+0x3f8>
    f246:	465a      	mov	r2, fp
    f248:	4b9b      	ldr	r3, [pc, #620]	; (f4b8 <__aeabi_ddiv+0x65c>)
    f24a:	401a      	ands	r2, r3
    f24c:	2380      	movs	r3, #128	; 0x80
    f24e:	4693      	mov	fp, r2
    f250:	00db      	lsls	r3, r3, #3
    f252:	18e3      	adds	r3, r4, r3
    f254:	4a99      	ldr	r2, [pc, #612]	; (f4bc <__aeabi_ddiv+0x660>)
    f256:	4293      	cmp	r3, r2
    f258:	dd68      	ble.n	f32c <__aeabi_ddiv+0x4d0>
    f25a:	2301      	movs	r3, #1
    f25c:	9a02      	ldr	r2, [sp, #8]
    f25e:	4c98      	ldr	r4, [pc, #608]	; (f4c0 <__aeabi_ddiv+0x664>)
    f260:	401a      	ands	r2, r3
    f262:	2300      	movs	r3, #0
    f264:	4694      	mov	ip, r2
    f266:	4698      	mov	r8, r3
    f268:	2200      	movs	r2, #0
    f26a:	e6c5      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f26c:	2280      	movs	r2, #128	; 0x80
    f26e:	464b      	mov	r3, r9
    f270:	0312      	lsls	r2, r2, #12
    f272:	4213      	tst	r3, r2
    f274:	d00a      	beq.n	f28c <__aeabi_ddiv+0x430>
    f276:	465b      	mov	r3, fp
    f278:	4213      	tst	r3, r2
    f27a:	d106      	bne.n	f28a <__aeabi_ddiv+0x42e>
    f27c:	431a      	orrs	r2, r3
    f27e:	0312      	lsls	r2, r2, #12
    f280:	0b12      	lsrs	r2, r2, #12
    f282:	46ac      	mov	ip, r5
    f284:	4688      	mov	r8, r1
    f286:	4c8e      	ldr	r4, [pc, #568]	; (f4c0 <__aeabi_ddiv+0x664>)
    f288:	e6b6      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f28a:	464b      	mov	r3, r9
    f28c:	431a      	orrs	r2, r3
    f28e:	0312      	lsls	r2, r2, #12
    f290:	0b12      	lsrs	r2, r2, #12
    f292:	46bc      	mov	ip, r7
    f294:	4c8a      	ldr	r4, [pc, #552]	; (f4c0 <__aeabi_ddiv+0x664>)
    f296:	e6af      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f298:	0003      	movs	r3, r0
    f29a:	465a      	mov	r2, fp
    f29c:	3b28      	subs	r3, #40	; 0x28
    f29e:	409a      	lsls	r2, r3
    f2a0:	2300      	movs	r3, #0
    f2a2:	4691      	mov	r9, r2
    f2a4:	4698      	mov	r8, r3
    f2a6:	e657      	b.n	ef58 <__aeabi_ddiv+0xfc>
    f2a8:	4658      	mov	r0, fp
    f2aa:	f000 ff0d 	bl	100c8 <__clzsi2>
    f2ae:	3020      	adds	r0, #32
    f2b0:	e640      	b.n	ef34 <__aeabi_ddiv+0xd8>
    f2b2:	0003      	movs	r3, r0
    f2b4:	4652      	mov	r2, sl
    f2b6:	3b28      	subs	r3, #40	; 0x28
    f2b8:	409a      	lsls	r2, r3
    f2ba:	2100      	movs	r1, #0
    f2bc:	4693      	mov	fp, r2
    f2be:	e677      	b.n	efb0 <__aeabi_ddiv+0x154>
    f2c0:	f000 ff02 	bl	100c8 <__clzsi2>
    f2c4:	3020      	adds	r0, #32
    f2c6:	e65f      	b.n	ef88 <__aeabi_ddiv+0x12c>
    f2c8:	4588      	cmp	r8, r1
    f2ca:	d200      	bcs.n	f2ce <__aeabi_ddiv+0x472>
    f2cc:	e6c7      	b.n	f05e <__aeabi_ddiv+0x202>
    f2ce:	464b      	mov	r3, r9
    f2d0:	07de      	lsls	r6, r3, #31
    f2d2:	085d      	lsrs	r5, r3, #1
    f2d4:	4643      	mov	r3, r8
    f2d6:	085b      	lsrs	r3, r3, #1
    f2d8:	431e      	orrs	r6, r3
    f2da:	4643      	mov	r3, r8
    f2dc:	07db      	lsls	r3, r3, #31
    f2de:	469a      	mov	sl, r3
    f2e0:	e6c2      	b.n	f068 <__aeabi_ddiv+0x20c>
    f2e2:	2500      	movs	r5, #0
    f2e4:	4592      	cmp	sl, r2
    f2e6:	d300      	bcc.n	f2ea <__aeabi_ddiv+0x48e>
    f2e8:	e733      	b.n	f152 <__aeabi_ddiv+0x2f6>
    f2ea:	9e03      	ldr	r6, [sp, #12]
    f2ec:	4659      	mov	r1, fp
    f2ee:	46b4      	mov	ip, r6
    f2f0:	44e2      	add	sl, ip
    f2f2:	45b2      	cmp	sl, r6
    f2f4:	41ad      	sbcs	r5, r5
    f2f6:	426d      	negs	r5, r5
    f2f8:	4445      	add	r5, r8
    f2fa:	18eb      	adds	r3, r5, r3
    f2fc:	3901      	subs	r1, #1
    f2fe:	4598      	cmp	r8, r3
    f300:	d207      	bcs.n	f312 <__aeabi_ddiv+0x4b6>
    f302:	4298      	cmp	r0, r3
    f304:	d900      	bls.n	f308 <__aeabi_ddiv+0x4ac>
    f306:	e07f      	b.n	f408 <__aeabi_ddiv+0x5ac>
    f308:	d100      	bne.n	f30c <__aeabi_ddiv+0x4b0>
    f30a:	e0bc      	b.n	f486 <__aeabi_ddiv+0x62a>
    f30c:	1a1d      	subs	r5, r3, r0
    f30e:	468b      	mov	fp, r1
    f310:	e71f      	b.n	f152 <__aeabi_ddiv+0x2f6>
    f312:	4598      	cmp	r8, r3
    f314:	d1fa      	bne.n	f30c <__aeabi_ddiv+0x4b0>
    f316:	9d03      	ldr	r5, [sp, #12]
    f318:	4555      	cmp	r5, sl
    f31a:	d9f2      	bls.n	f302 <__aeabi_ddiv+0x4a6>
    f31c:	4643      	mov	r3, r8
    f31e:	468b      	mov	fp, r1
    f320:	1a1d      	subs	r5, r3, r0
    f322:	e716      	b.n	f152 <__aeabi_ddiv+0x2f6>
    f324:	469b      	mov	fp, r3
    f326:	e6ca      	b.n	f0be <__aeabi_ddiv+0x262>
    f328:	0015      	movs	r5, r2
    f32a:	e6e7      	b.n	f0fc <__aeabi_ddiv+0x2a0>
    f32c:	465a      	mov	r2, fp
    f32e:	08c9      	lsrs	r1, r1, #3
    f330:	0752      	lsls	r2, r2, #29
    f332:	430a      	orrs	r2, r1
    f334:	055b      	lsls	r3, r3, #21
    f336:	4690      	mov	r8, r2
    f338:	0d5c      	lsrs	r4, r3, #21
    f33a:	465a      	mov	r2, fp
    f33c:	2301      	movs	r3, #1
    f33e:	9902      	ldr	r1, [sp, #8]
    f340:	0252      	lsls	r2, r2, #9
    f342:	4019      	ands	r1, r3
    f344:	0b12      	lsrs	r2, r2, #12
    f346:	468c      	mov	ip, r1
    f348:	e656      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f34a:	2b00      	cmp	r3, #0
    f34c:	d100      	bne.n	f350 <__aeabi_ddiv+0x4f4>
    f34e:	e76f      	b.n	f230 <__aeabi_ddiv+0x3d4>
    f350:	4446      	add	r6, r8
    f352:	1e4a      	subs	r2, r1, #1
    f354:	45b0      	cmp	r8, r6
    f356:	d929      	bls.n	f3ac <__aeabi_ddiv+0x550>
    f358:	0011      	movs	r1, r2
    f35a:	4286      	cmp	r6, r0
    f35c:	d000      	beq.n	f360 <__aeabi_ddiv+0x504>
    f35e:	e765      	b.n	f22c <__aeabi_ddiv+0x3d0>
    f360:	9a03      	ldr	r2, [sp, #12]
    f362:	4293      	cmp	r3, r2
    f364:	d000      	beq.n	f368 <__aeabi_ddiv+0x50c>
    f366:	e761      	b.n	f22c <__aeabi_ddiv+0x3d0>
    f368:	e762      	b.n	f230 <__aeabi_ddiv+0x3d4>
    f36a:	2101      	movs	r1, #1
    f36c:	4249      	negs	r1, r1
    f36e:	2001      	movs	r0, #1
    f370:	1ac2      	subs	r2, r0, r3
    f372:	2a38      	cmp	r2, #56	; 0x38
    f374:	dd21      	ble.n	f3ba <__aeabi_ddiv+0x55e>
    f376:	9b02      	ldr	r3, [sp, #8]
    f378:	4003      	ands	r3, r0
    f37a:	469c      	mov	ip, r3
    f37c:	e638      	b.n	eff0 <__aeabi_ddiv+0x194>
    f37e:	220f      	movs	r2, #15
    f380:	400a      	ands	r2, r1
    f382:	2a04      	cmp	r2, #4
    f384:	d100      	bne.n	f388 <__aeabi_ddiv+0x52c>
    f386:	e75b      	b.n	f240 <__aeabi_ddiv+0x3e4>
    f388:	000a      	movs	r2, r1
    f38a:	1d11      	adds	r1, r2, #4
    f38c:	4291      	cmp	r1, r2
    f38e:	4192      	sbcs	r2, r2
    f390:	4252      	negs	r2, r2
    f392:	4493      	add	fp, r2
    f394:	e754      	b.n	f240 <__aeabi_ddiv+0x3e4>
    f396:	4b47      	ldr	r3, [pc, #284]	; (f4b4 <__aeabi_ddiv+0x658>)
    f398:	18e3      	adds	r3, r4, r3
    f39a:	2b00      	cmp	r3, #0
    f39c:	dde5      	ble.n	f36a <__aeabi_ddiv+0x50e>
    f39e:	2201      	movs	r2, #1
    f3a0:	4252      	negs	r2, r2
    f3a2:	e7f2      	b.n	f38a <__aeabi_ddiv+0x52e>
    f3a4:	001d      	movs	r5, r3
    f3a6:	e6fa      	b.n	f19e <__aeabi_ddiv+0x342>
    f3a8:	469a      	mov	sl, r3
    f3aa:	e71c      	b.n	f1e6 <__aeabi_ddiv+0x38a>
    f3ac:	42b0      	cmp	r0, r6
    f3ae:	d839      	bhi.n	f424 <__aeabi_ddiv+0x5c8>
    f3b0:	d06e      	beq.n	f490 <__aeabi_ddiv+0x634>
    f3b2:	0011      	movs	r1, r2
    f3b4:	e73a      	b.n	f22c <__aeabi_ddiv+0x3d0>
    f3b6:	9302      	str	r3, [sp, #8]
    f3b8:	e73a      	b.n	f230 <__aeabi_ddiv+0x3d4>
    f3ba:	2a1f      	cmp	r2, #31
    f3bc:	dc3c      	bgt.n	f438 <__aeabi_ddiv+0x5dc>
    f3be:	2320      	movs	r3, #32
    f3c0:	1a9b      	subs	r3, r3, r2
    f3c2:	000c      	movs	r4, r1
    f3c4:	4658      	mov	r0, fp
    f3c6:	4099      	lsls	r1, r3
    f3c8:	4098      	lsls	r0, r3
    f3ca:	1e4b      	subs	r3, r1, #1
    f3cc:	4199      	sbcs	r1, r3
    f3ce:	465b      	mov	r3, fp
    f3d0:	40d4      	lsrs	r4, r2
    f3d2:	40d3      	lsrs	r3, r2
    f3d4:	4320      	orrs	r0, r4
    f3d6:	4308      	orrs	r0, r1
    f3d8:	001a      	movs	r2, r3
    f3da:	0743      	lsls	r3, r0, #29
    f3dc:	d009      	beq.n	f3f2 <__aeabi_ddiv+0x596>
    f3de:	230f      	movs	r3, #15
    f3e0:	4003      	ands	r3, r0
    f3e2:	2b04      	cmp	r3, #4
    f3e4:	d005      	beq.n	f3f2 <__aeabi_ddiv+0x596>
    f3e6:	0001      	movs	r1, r0
    f3e8:	1d08      	adds	r0, r1, #4
    f3ea:	4288      	cmp	r0, r1
    f3ec:	419b      	sbcs	r3, r3
    f3ee:	425b      	negs	r3, r3
    f3f0:	18d2      	adds	r2, r2, r3
    f3f2:	0213      	lsls	r3, r2, #8
    f3f4:	d53a      	bpl.n	f46c <__aeabi_ddiv+0x610>
    f3f6:	2301      	movs	r3, #1
    f3f8:	9a02      	ldr	r2, [sp, #8]
    f3fa:	2401      	movs	r4, #1
    f3fc:	401a      	ands	r2, r3
    f3fe:	2300      	movs	r3, #0
    f400:	4694      	mov	ip, r2
    f402:	4698      	mov	r8, r3
    f404:	2200      	movs	r2, #0
    f406:	e5f7      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f408:	2102      	movs	r1, #2
    f40a:	4249      	negs	r1, r1
    f40c:	468c      	mov	ip, r1
    f40e:	9d03      	ldr	r5, [sp, #12]
    f410:	44e3      	add	fp, ip
    f412:	46ac      	mov	ip, r5
    f414:	44e2      	add	sl, ip
    f416:	45aa      	cmp	sl, r5
    f418:	41ad      	sbcs	r5, r5
    f41a:	426d      	negs	r5, r5
    f41c:	4445      	add	r5, r8
    f41e:	18ed      	adds	r5, r5, r3
    f420:	1a2d      	subs	r5, r5, r0
    f422:	e696      	b.n	f152 <__aeabi_ddiv+0x2f6>
    f424:	1e8a      	subs	r2, r1, #2
    f426:	9903      	ldr	r1, [sp, #12]
    f428:	004d      	lsls	r5, r1, #1
    f42a:	428d      	cmp	r5, r1
    f42c:	4189      	sbcs	r1, r1
    f42e:	4249      	negs	r1, r1
    f430:	4441      	add	r1, r8
    f432:	1876      	adds	r6, r6, r1
    f434:	9503      	str	r5, [sp, #12]
    f436:	e78f      	b.n	f358 <__aeabi_ddiv+0x4fc>
    f438:	201f      	movs	r0, #31
    f43a:	4240      	negs	r0, r0
    f43c:	1ac3      	subs	r3, r0, r3
    f43e:	4658      	mov	r0, fp
    f440:	40d8      	lsrs	r0, r3
    f442:	0003      	movs	r3, r0
    f444:	2a20      	cmp	r2, #32
    f446:	d028      	beq.n	f49a <__aeabi_ddiv+0x63e>
    f448:	2040      	movs	r0, #64	; 0x40
    f44a:	465d      	mov	r5, fp
    f44c:	1a82      	subs	r2, r0, r2
    f44e:	4095      	lsls	r5, r2
    f450:	4329      	orrs	r1, r5
    f452:	1e4a      	subs	r2, r1, #1
    f454:	4191      	sbcs	r1, r2
    f456:	4319      	orrs	r1, r3
    f458:	2307      	movs	r3, #7
    f45a:	2200      	movs	r2, #0
    f45c:	400b      	ands	r3, r1
    f45e:	d009      	beq.n	f474 <__aeabi_ddiv+0x618>
    f460:	230f      	movs	r3, #15
    f462:	2200      	movs	r2, #0
    f464:	400b      	ands	r3, r1
    f466:	0008      	movs	r0, r1
    f468:	2b04      	cmp	r3, #4
    f46a:	d1bd      	bne.n	f3e8 <__aeabi_ddiv+0x58c>
    f46c:	0001      	movs	r1, r0
    f46e:	0753      	lsls	r3, r2, #29
    f470:	0252      	lsls	r2, r2, #9
    f472:	0b12      	lsrs	r2, r2, #12
    f474:	08c9      	lsrs	r1, r1, #3
    f476:	4319      	orrs	r1, r3
    f478:	2301      	movs	r3, #1
    f47a:	4688      	mov	r8, r1
    f47c:	9902      	ldr	r1, [sp, #8]
    f47e:	2400      	movs	r4, #0
    f480:	4019      	ands	r1, r3
    f482:	468c      	mov	ip, r1
    f484:	e5b8      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f486:	4552      	cmp	r2, sl
    f488:	d8be      	bhi.n	f408 <__aeabi_ddiv+0x5ac>
    f48a:	468b      	mov	fp, r1
    f48c:	2500      	movs	r5, #0
    f48e:	e660      	b.n	f152 <__aeabi_ddiv+0x2f6>
    f490:	9d03      	ldr	r5, [sp, #12]
    f492:	429d      	cmp	r5, r3
    f494:	d3c6      	bcc.n	f424 <__aeabi_ddiv+0x5c8>
    f496:	0011      	movs	r1, r2
    f498:	e762      	b.n	f360 <__aeabi_ddiv+0x504>
    f49a:	2500      	movs	r5, #0
    f49c:	e7d8      	b.n	f450 <__aeabi_ddiv+0x5f4>
    f49e:	2280      	movs	r2, #128	; 0x80
    f4a0:	465b      	mov	r3, fp
    f4a2:	0312      	lsls	r2, r2, #12
    f4a4:	431a      	orrs	r2, r3
    f4a6:	9b01      	ldr	r3, [sp, #4]
    f4a8:	0312      	lsls	r2, r2, #12
    f4aa:	0b12      	lsrs	r2, r2, #12
    f4ac:	469c      	mov	ip, r3
    f4ae:	4688      	mov	r8, r1
    f4b0:	4c03      	ldr	r4, [pc, #12]	; (f4c0 <__aeabi_ddiv+0x664>)
    f4b2:	e5a1      	b.n	eff8 <__aeabi_ddiv+0x19c>
    f4b4:	000003ff 	.word	0x000003ff
    f4b8:	feffffff 	.word	0xfeffffff
    f4bc:	000007fe 	.word	0x000007fe
    f4c0:	000007ff 	.word	0x000007ff

0000f4c4 <__aeabi_dmul>:
    f4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4c6:	4657      	mov	r7, sl
    f4c8:	4645      	mov	r5, r8
    f4ca:	46de      	mov	lr, fp
    f4cc:	464e      	mov	r6, r9
    f4ce:	b5e0      	push	{r5, r6, r7, lr}
    f4d0:	030c      	lsls	r4, r1, #12
    f4d2:	4698      	mov	r8, r3
    f4d4:	004e      	lsls	r6, r1, #1
    f4d6:	0b23      	lsrs	r3, r4, #12
    f4d8:	b087      	sub	sp, #28
    f4da:	0007      	movs	r7, r0
    f4dc:	4692      	mov	sl, r2
    f4de:	469b      	mov	fp, r3
    f4e0:	0d76      	lsrs	r6, r6, #21
    f4e2:	0fcd      	lsrs	r5, r1, #31
    f4e4:	2e00      	cmp	r6, #0
    f4e6:	d06b      	beq.n	f5c0 <__aeabi_dmul+0xfc>
    f4e8:	4b6d      	ldr	r3, [pc, #436]	; (f6a0 <__aeabi_dmul+0x1dc>)
    f4ea:	429e      	cmp	r6, r3
    f4ec:	d035      	beq.n	f55a <__aeabi_dmul+0x96>
    f4ee:	2480      	movs	r4, #128	; 0x80
    f4f0:	465b      	mov	r3, fp
    f4f2:	0f42      	lsrs	r2, r0, #29
    f4f4:	0424      	lsls	r4, r4, #16
    f4f6:	00db      	lsls	r3, r3, #3
    f4f8:	4314      	orrs	r4, r2
    f4fa:	431c      	orrs	r4, r3
    f4fc:	00c3      	lsls	r3, r0, #3
    f4fe:	4699      	mov	r9, r3
    f500:	4b68      	ldr	r3, [pc, #416]	; (f6a4 <__aeabi_dmul+0x1e0>)
    f502:	46a3      	mov	fp, r4
    f504:	469c      	mov	ip, r3
    f506:	2300      	movs	r3, #0
    f508:	2700      	movs	r7, #0
    f50a:	4466      	add	r6, ip
    f50c:	9302      	str	r3, [sp, #8]
    f50e:	4643      	mov	r3, r8
    f510:	031c      	lsls	r4, r3, #12
    f512:	005a      	lsls	r2, r3, #1
    f514:	0fdb      	lsrs	r3, r3, #31
    f516:	4650      	mov	r0, sl
    f518:	0b24      	lsrs	r4, r4, #12
    f51a:	0d52      	lsrs	r2, r2, #21
    f51c:	4698      	mov	r8, r3
    f51e:	d100      	bne.n	f522 <__aeabi_dmul+0x5e>
    f520:	e076      	b.n	f610 <__aeabi_dmul+0x14c>
    f522:	4b5f      	ldr	r3, [pc, #380]	; (f6a0 <__aeabi_dmul+0x1dc>)
    f524:	429a      	cmp	r2, r3
    f526:	d06d      	beq.n	f604 <__aeabi_dmul+0x140>
    f528:	2380      	movs	r3, #128	; 0x80
    f52a:	0f41      	lsrs	r1, r0, #29
    f52c:	041b      	lsls	r3, r3, #16
    f52e:	430b      	orrs	r3, r1
    f530:	495c      	ldr	r1, [pc, #368]	; (f6a4 <__aeabi_dmul+0x1e0>)
    f532:	00e4      	lsls	r4, r4, #3
    f534:	468c      	mov	ip, r1
    f536:	431c      	orrs	r4, r3
    f538:	00c3      	lsls	r3, r0, #3
    f53a:	2000      	movs	r0, #0
    f53c:	4462      	add	r2, ip
    f53e:	4641      	mov	r1, r8
    f540:	18b6      	adds	r6, r6, r2
    f542:	4069      	eors	r1, r5
    f544:	1c72      	adds	r2, r6, #1
    f546:	9101      	str	r1, [sp, #4]
    f548:	4694      	mov	ip, r2
    f54a:	4307      	orrs	r7, r0
    f54c:	2f0f      	cmp	r7, #15
    f54e:	d900      	bls.n	f552 <__aeabi_dmul+0x8e>
    f550:	e0b0      	b.n	f6b4 <__aeabi_dmul+0x1f0>
    f552:	4a55      	ldr	r2, [pc, #340]	; (f6a8 <__aeabi_dmul+0x1e4>)
    f554:	00bf      	lsls	r7, r7, #2
    f556:	59d2      	ldr	r2, [r2, r7]
    f558:	4697      	mov	pc, r2
    f55a:	465b      	mov	r3, fp
    f55c:	4303      	orrs	r3, r0
    f55e:	4699      	mov	r9, r3
    f560:	d000      	beq.n	f564 <__aeabi_dmul+0xa0>
    f562:	e087      	b.n	f674 <__aeabi_dmul+0x1b0>
    f564:	2300      	movs	r3, #0
    f566:	469b      	mov	fp, r3
    f568:	3302      	adds	r3, #2
    f56a:	2708      	movs	r7, #8
    f56c:	9302      	str	r3, [sp, #8]
    f56e:	e7ce      	b.n	f50e <__aeabi_dmul+0x4a>
    f570:	4642      	mov	r2, r8
    f572:	9201      	str	r2, [sp, #4]
    f574:	2802      	cmp	r0, #2
    f576:	d067      	beq.n	f648 <__aeabi_dmul+0x184>
    f578:	2803      	cmp	r0, #3
    f57a:	d100      	bne.n	f57e <__aeabi_dmul+0xba>
    f57c:	e20e      	b.n	f99c <__aeabi_dmul+0x4d8>
    f57e:	2801      	cmp	r0, #1
    f580:	d000      	beq.n	f584 <__aeabi_dmul+0xc0>
    f582:	e162      	b.n	f84a <__aeabi_dmul+0x386>
    f584:	2300      	movs	r3, #0
    f586:	2400      	movs	r4, #0
    f588:	2200      	movs	r2, #0
    f58a:	4699      	mov	r9, r3
    f58c:	9901      	ldr	r1, [sp, #4]
    f58e:	4001      	ands	r1, r0
    f590:	b2cd      	uxtb	r5, r1
    f592:	2100      	movs	r1, #0
    f594:	0312      	lsls	r2, r2, #12
    f596:	0d0b      	lsrs	r3, r1, #20
    f598:	0b12      	lsrs	r2, r2, #12
    f59a:	051b      	lsls	r3, r3, #20
    f59c:	4313      	orrs	r3, r2
    f59e:	4a43      	ldr	r2, [pc, #268]	; (f6ac <__aeabi_dmul+0x1e8>)
    f5a0:	0524      	lsls	r4, r4, #20
    f5a2:	4013      	ands	r3, r2
    f5a4:	431c      	orrs	r4, r3
    f5a6:	0064      	lsls	r4, r4, #1
    f5a8:	07ed      	lsls	r5, r5, #31
    f5aa:	0864      	lsrs	r4, r4, #1
    f5ac:	432c      	orrs	r4, r5
    f5ae:	4648      	mov	r0, r9
    f5b0:	0021      	movs	r1, r4
    f5b2:	b007      	add	sp, #28
    f5b4:	bc3c      	pop	{r2, r3, r4, r5}
    f5b6:	4690      	mov	r8, r2
    f5b8:	4699      	mov	r9, r3
    f5ba:	46a2      	mov	sl, r4
    f5bc:	46ab      	mov	fp, r5
    f5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5c0:	4303      	orrs	r3, r0
    f5c2:	4699      	mov	r9, r3
    f5c4:	d04f      	beq.n	f666 <__aeabi_dmul+0x1a2>
    f5c6:	465b      	mov	r3, fp
    f5c8:	2b00      	cmp	r3, #0
    f5ca:	d100      	bne.n	f5ce <__aeabi_dmul+0x10a>
    f5cc:	e189      	b.n	f8e2 <__aeabi_dmul+0x41e>
    f5ce:	4658      	mov	r0, fp
    f5d0:	f000 fd7a 	bl	100c8 <__clzsi2>
    f5d4:	0003      	movs	r3, r0
    f5d6:	3b0b      	subs	r3, #11
    f5d8:	2b1c      	cmp	r3, #28
    f5da:	dd00      	ble.n	f5de <__aeabi_dmul+0x11a>
    f5dc:	e17a      	b.n	f8d4 <__aeabi_dmul+0x410>
    f5de:	221d      	movs	r2, #29
    f5e0:	1ad3      	subs	r3, r2, r3
    f5e2:	003a      	movs	r2, r7
    f5e4:	0001      	movs	r1, r0
    f5e6:	465c      	mov	r4, fp
    f5e8:	40da      	lsrs	r2, r3
    f5ea:	3908      	subs	r1, #8
    f5ec:	408c      	lsls	r4, r1
    f5ee:	0013      	movs	r3, r2
    f5f0:	408f      	lsls	r7, r1
    f5f2:	4323      	orrs	r3, r4
    f5f4:	469b      	mov	fp, r3
    f5f6:	46b9      	mov	r9, r7
    f5f8:	2300      	movs	r3, #0
    f5fa:	4e2d      	ldr	r6, [pc, #180]	; (f6b0 <__aeabi_dmul+0x1ec>)
    f5fc:	2700      	movs	r7, #0
    f5fe:	1a36      	subs	r6, r6, r0
    f600:	9302      	str	r3, [sp, #8]
    f602:	e784      	b.n	f50e <__aeabi_dmul+0x4a>
    f604:	4653      	mov	r3, sl
    f606:	4323      	orrs	r3, r4
    f608:	d12a      	bne.n	f660 <__aeabi_dmul+0x19c>
    f60a:	2400      	movs	r4, #0
    f60c:	2002      	movs	r0, #2
    f60e:	e796      	b.n	f53e <__aeabi_dmul+0x7a>
    f610:	4653      	mov	r3, sl
    f612:	4323      	orrs	r3, r4
    f614:	d020      	beq.n	f658 <__aeabi_dmul+0x194>
    f616:	2c00      	cmp	r4, #0
    f618:	d100      	bne.n	f61c <__aeabi_dmul+0x158>
    f61a:	e157      	b.n	f8cc <__aeabi_dmul+0x408>
    f61c:	0020      	movs	r0, r4
    f61e:	f000 fd53 	bl	100c8 <__clzsi2>
    f622:	0003      	movs	r3, r0
    f624:	3b0b      	subs	r3, #11
    f626:	2b1c      	cmp	r3, #28
    f628:	dd00      	ble.n	f62c <__aeabi_dmul+0x168>
    f62a:	e149      	b.n	f8c0 <__aeabi_dmul+0x3fc>
    f62c:	211d      	movs	r1, #29
    f62e:	1acb      	subs	r3, r1, r3
    f630:	4651      	mov	r1, sl
    f632:	0002      	movs	r2, r0
    f634:	40d9      	lsrs	r1, r3
    f636:	4653      	mov	r3, sl
    f638:	3a08      	subs	r2, #8
    f63a:	4094      	lsls	r4, r2
    f63c:	4093      	lsls	r3, r2
    f63e:	430c      	orrs	r4, r1
    f640:	4a1b      	ldr	r2, [pc, #108]	; (f6b0 <__aeabi_dmul+0x1ec>)
    f642:	1a12      	subs	r2, r2, r0
    f644:	2000      	movs	r0, #0
    f646:	e77a      	b.n	f53e <__aeabi_dmul+0x7a>
    f648:	2501      	movs	r5, #1
    f64a:	9b01      	ldr	r3, [sp, #4]
    f64c:	4c14      	ldr	r4, [pc, #80]	; (f6a0 <__aeabi_dmul+0x1dc>)
    f64e:	401d      	ands	r5, r3
    f650:	2300      	movs	r3, #0
    f652:	2200      	movs	r2, #0
    f654:	4699      	mov	r9, r3
    f656:	e79c      	b.n	f592 <__aeabi_dmul+0xce>
    f658:	2400      	movs	r4, #0
    f65a:	2200      	movs	r2, #0
    f65c:	2001      	movs	r0, #1
    f65e:	e76e      	b.n	f53e <__aeabi_dmul+0x7a>
    f660:	4653      	mov	r3, sl
    f662:	2003      	movs	r0, #3
    f664:	e76b      	b.n	f53e <__aeabi_dmul+0x7a>
    f666:	2300      	movs	r3, #0
    f668:	469b      	mov	fp, r3
    f66a:	3301      	adds	r3, #1
    f66c:	2704      	movs	r7, #4
    f66e:	2600      	movs	r6, #0
    f670:	9302      	str	r3, [sp, #8]
    f672:	e74c      	b.n	f50e <__aeabi_dmul+0x4a>
    f674:	2303      	movs	r3, #3
    f676:	4681      	mov	r9, r0
    f678:	270c      	movs	r7, #12
    f67a:	9302      	str	r3, [sp, #8]
    f67c:	e747      	b.n	f50e <__aeabi_dmul+0x4a>
    f67e:	2280      	movs	r2, #128	; 0x80
    f680:	2300      	movs	r3, #0
    f682:	2500      	movs	r5, #0
    f684:	0312      	lsls	r2, r2, #12
    f686:	4699      	mov	r9, r3
    f688:	4c05      	ldr	r4, [pc, #20]	; (f6a0 <__aeabi_dmul+0x1dc>)
    f68a:	e782      	b.n	f592 <__aeabi_dmul+0xce>
    f68c:	465c      	mov	r4, fp
    f68e:	464b      	mov	r3, r9
    f690:	9802      	ldr	r0, [sp, #8]
    f692:	e76f      	b.n	f574 <__aeabi_dmul+0xb0>
    f694:	465c      	mov	r4, fp
    f696:	464b      	mov	r3, r9
    f698:	9501      	str	r5, [sp, #4]
    f69a:	9802      	ldr	r0, [sp, #8]
    f69c:	e76a      	b.n	f574 <__aeabi_dmul+0xb0>
    f69e:	46c0      	nop			; (mov r8, r8)
    f6a0:	000007ff 	.word	0x000007ff
    f6a4:	fffffc01 	.word	0xfffffc01
    f6a8:	00013b54 	.word	0x00013b54
    f6ac:	800fffff 	.word	0x800fffff
    f6b0:	fffffc0d 	.word	0xfffffc0d
    f6b4:	464a      	mov	r2, r9
    f6b6:	4649      	mov	r1, r9
    f6b8:	0c17      	lsrs	r7, r2, #16
    f6ba:	0c1a      	lsrs	r2, r3, #16
    f6bc:	041b      	lsls	r3, r3, #16
    f6be:	0c1b      	lsrs	r3, r3, #16
    f6c0:	0408      	lsls	r0, r1, #16
    f6c2:	0019      	movs	r1, r3
    f6c4:	0c00      	lsrs	r0, r0, #16
    f6c6:	4341      	muls	r1, r0
    f6c8:	0015      	movs	r5, r2
    f6ca:	4688      	mov	r8, r1
    f6cc:	0019      	movs	r1, r3
    f6ce:	437d      	muls	r5, r7
    f6d0:	4379      	muls	r1, r7
    f6d2:	9503      	str	r5, [sp, #12]
    f6d4:	4689      	mov	r9, r1
    f6d6:	0029      	movs	r1, r5
    f6d8:	0015      	movs	r5, r2
    f6da:	4345      	muls	r5, r0
    f6dc:	444d      	add	r5, r9
    f6de:	9502      	str	r5, [sp, #8]
    f6e0:	4645      	mov	r5, r8
    f6e2:	0c2d      	lsrs	r5, r5, #16
    f6e4:	46aa      	mov	sl, r5
    f6e6:	9d02      	ldr	r5, [sp, #8]
    f6e8:	4455      	add	r5, sl
    f6ea:	45a9      	cmp	r9, r5
    f6ec:	d906      	bls.n	f6fc <__aeabi_dmul+0x238>
    f6ee:	468a      	mov	sl, r1
    f6f0:	2180      	movs	r1, #128	; 0x80
    f6f2:	0249      	lsls	r1, r1, #9
    f6f4:	4689      	mov	r9, r1
    f6f6:	44ca      	add	sl, r9
    f6f8:	4651      	mov	r1, sl
    f6fa:	9103      	str	r1, [sp, #12]
    f6fc:	0c29      	lsrs	r1, r5, #16
    f6fe:	9104      	str	r1, [sp, #16]
    f700:	4641      	mov	r1, r8
    f702:	0409      	lsls	r1, r1, #16
    f704:	042d      	lsls	r5, r5, #16
    f706:	0c09      	lsrs	r1, r1, #16
    f708:	4688      	mov	r8, r1
    f70a:	0029      	movs	r1, r5
    f70c:	0c25      	lsrs	r5, r4, #16
    f70e:	0424      	lsls	r4, r4, #16
    f710:	4441      	add	r1, r8
    f712:	0c24      	lsrs	r4, r4, #16
    f714:	9105      	str	r1, [sp, #20]
    f716:	0021      	movs	r1, r4
    f718:	4341      	muls	r1, r0
    f71a:	4688      	mov	r8, r1
    f71c:	0021      	movs	r1, r4
    f71e:	4379      	muls	r1, r7
    f720:	468a      	mov	sl, r1
    f722:	4368      	muls	r0, r5
    f724:	4641      	mov	r1, r8
    f726:	4450      	add	r0, sl
    f728:	4681      	mov	r9, r0
    f72a:	0c08      	lsrs	r0, r1, #16
    f72c:	4448      	add	r0, r9
    f72e:	436f      	muls	r7, r5
    f730:	4582      	cmp	sl, r0
    f732:	d903      	bls.n	f73c <__aeabi_dmul+0x278>
    f734:	2180      	movs	r1, #128	; 0x80
    f736:	0249      	lsls	r1, r1, #9
    f738:	4689      	mov	r9, r1
    f73a:	444f      	add	r7, r9
    f73c:	0c01      	lsrs	r1, r0, #16
    f73e:	4689      	mov	r9, r1
    f740:	0039      	movs	r1, r7
    f742:	4449      	add	r1, r9
    f744:	9102      	str	r1, [sp, #8]
    f746:	4641      	mov	r1, r8
    f748:	040f      	lsls	r7, r1, #16
    f74a:	9904      	ldr	r1, [sp, #16]
    f74c:	0c3f      	lsrs	r7, r7, #16
    f74e:	4688      	mov	r8, r1
    f750:	0400      	lsls	r0, r0, #16
    f752:	19c0      	adds	r0, r0, r7
    f754:	4480      	add	r8, r0
    f756:	4641      	mov	r1, r8
    f758:	9104      	str	r1, [sp, #16]
    f75a:	4659      	mov	r1, fp
    f75c:	0c0f      	lsrs	r7, r1, #16
    f75e:	0409      	lsls	r1, r1, #16
    f760:	0c09      	lsrs	r1, r1, #16
    f762:	4688      	mov	r8, r1
    f764:	4359      	muls	r1, r3
    f766:	468a      	mov	sl, r1
    f768:	0039      	movs	r1, r7
    f76a:	4351      	muls	r1, r2
    f76c:	4689      	mov	r9, r1
    f76e:	4641      	mov	r1, r8
    f770:	434a      	muls	r2, r1
    f772:	4651      	mov	r1, sl
    f774:	0c09      	lsrs	r1, r1, #16
    f776:	468b      	mov	fp, r1
    f778:	437b      	muls	r3, r7
    f77a:	18d2      	adds	r2, r2, r3
    f77c:	445a      	add	r2, fp
    f77e:	4293      	cmp	r3, r2
    f780:	d903      	bls.n	f78a <__aeabi_dmul+0x2c6>
    f782:	2380      	movs	r3, #128	; 0x80
    f784:	025b      	lsls	r3, r3, #9
    f786:	469b      	mov	fp, r3
    f788:	44d9      	add	r9, fp
    f78a:	4651      	mov	r1, sl
    f78c:	0409      	lsls	r1, r1, #16
    f78e:	0c09      	lsrs	r1, r1, #16
    f790:	468a      	mov	sl, r1
    f792:	4641      	mov	r1, r8
    f794:	4361      	muls	r1, r4
    f796:	437c      	muls	r4, r7
    f798:	0c13      	lsrs	r3, r2, #16
    f79a:	0412      	lsls	r2, r2, #16
    f79c:	444b      	add	r3, r9
    f79e:	4452      	add	r2, sl
    f7a0:	46a1      	mov	r9, r4
    f7a2:	468a      	mov	sl, r1
    f7a4:	003c      	movs	r4, r7
    f7a6:	4641      	mov	r1, r8
    f7a8:	436c      	muls	r4, r5
    f7aa:	434d      	muls	r5, r1
    f7ac:	4651      	mov	r1, sl
    f7ae:	444d      	add	r5, r9
    f7b0:	0c0f      	lsrs	r7, r1, #16
    f7b2:	197d      	adds	r5, r7, r5
    f7b4:	45a9      	cmp	r9, r5
    f7b6:	d903      	bls.n	f7c0 <__aeabi_dmul+0x2fc>
    f7b8:	2180      	movs	r1, #128	; 0x80
    f7ba:	0249      	lsls	r1, r1, #9
    f7bc:	4688      	mov	r8, r1
    f7be:	4444      	add	r4, r8
    f7c0:	9f04      	ldr	r7, [sp, #16]
    f7c2:	9903      	ldr	r1, [sp, #12]
    f7c4:	46b8      	mov	r8, r7
    f7c6:	4441      	add	r1, r8
    f7c8:	468b      	mov	fp, r1
    f7ca:	4583      	cmp	fp, r0
    f7cc:	4180      	sbcs	r0, r0
    f7ce:	4241      	negs	r1, r0
    f7d0:	4688      	mov	r8, r1
    f7d2:	4651      	mov	r1, sl
    f7d4:	0408      	lsls	r0, r1, #16
    f7d6:	042f      	lsls	r7, r5, #16
    f7d8:	0c00      	lsrs	r0, r0, #16
    f7da:	183f      	adds	r7, r7, r0
    f7dc:	4658      	mov	r0, fp
    f7de:	9902      	ldr	r1, [sp, #8]
    f7e0:	1810      	adds	r0, r2, r0
    f7e2:	4689      	mov	r9, r1
    f7e4:	4290      	cmp	r0, r2
    f7e6:	4192      	sbcs	r2, r2
    f7e8:	444f      	add	r7, r9
    f7ea:	46ba      	mov	sl, r7
    f7ec:	4252      	negs	r2, r2
    f7ee:	4699      	mov	r9, r3
    f7f0:	4693      	mov	fp, r2
    f7f2:	44c2      	add	sl, r8
    f7f4:	44d1      	add	r9, sl
    f7f6:	44cb      	add	fp, r9
    f7f8:	428f      	cmp	r7, r1
    f7fa:	41bf      	sbcs	r7, r7
    f7fc:	45c2      	cmp	sl, r8
    f7fe:	4189      	sbcs	r1, r1
    f800:	4599      	cmp	r9, r3
    f802:	419b      	sbcs	r3, r3
    f804:	4593      	cmp	fp, r2
    f806:	4192      	sbcs	r2, r2
    f808:	427f      	negs	r7, r7
    f80a:	4249      	negs	r1, r1
    f80c:	0c2d      	lsrs	r5, r5, #16
    f80e:	4252      	negs	r2, r2
    f810:	430f      	orrs	r7, r1
    f812:	425b      	negs	r3, r3
    f814:	4313      	orrs	r3, r2
    f816:	197f      	adds	r7, r7, r5
    f818:	18ff      	adds	r7, r7, r3
    f81a:	465b      	mov	r3, fp
    f81c:	193c      	adds	r4, r7, r4
    f81e:	0ddb      	lsrs	r3, r3, #23
    f820:	9a05      	ldr	r2, [sp, #20]
    f822:	0264      	lsls	r4, r4, #9
    f824:	431c      	orrs	r4, r3
    f826:	0243      	lsls	r3, r0, #9
    f828:	4313      	orrs	r3, r2
    f82a:	1e5d      	subs	r5, r3, #1
    f82c:	41ab      	sbcs	r3, r5
    f82e:	465a      	mov	r2, fp
    f830:	0dc0      	lsrs	r0, r0, #23
    f832:	4303      	orrs	r3, r0
    f834:	0252      	lsls	r2, r2, #9
    f836:	4313      	orrs	r3, r2
    f838:	01e2      	lsls	r2, r4, #7
    f83a:	d556      	bpl.n	f8ea <__aeabi_dmul+0x426>
    f83c:	2001      	movs	r0, #1
    f83e:	085a      	lsrs	r2, r3, #1
    f840:	4003      	ands	r3, r0
    f842:	4313      	orrs	r3, r2
    f844:	07e2      	lsls	r2, r4, #31
    f846:	4313      	orrs	r3, r2
    f848:	0864      	lsrs	r4, r4, #1
    f84a:	485a      	ldr	r0, [pc, #360]	; (f9b4 <__aeabi_dmul+0x4f0>)
    f84c:	4460      	add	r0, ip
    f84e:	2800      	cmp	r0, #0
    f850:	dd4d      	ble.n	f8ee <__aeabi_dmul+0x42a>
    f852:	075a      	lsls	r2, r3, #29
    f854:	d009      	beq.n	f86a <__aeabi_dmul+0x3a6>
    f856:	220f      	movs	r2, #15
    f858:	401a      	ands	r2, r3
    f85a:	2a04      	cmp	r2, #4
    f85c:	d005      	beq.n	f86a <__aeabi_dmul+0x3a6>
    f85e:	1d1a      	adds	r2, r3, #4
    f860:	429a      	cmp	r2, r3
    f862:	419b      	sbcs	r3, r3
    f864:	425b      	negs	r3, r3
    f866:	18e4      	adds	r4, r4, r3
    f868:	0013      	movs	r3, r2
    f86a:	01e2      	lsls	r2, r4, #7
    f86c:	d504      	bpl.n	f878 <__aeabi_dmul+0x3b4>
    f86e:	2080      	movs	r0, #128	; 0x80
    f870:	4a51      	ldr	r2, [pc, #324]	; (f9b8 <__aeabi_dmul+0x4f4>)
    f872:	00c0      	lsls	r0, r0, #3
    f874:	4014      	ands	r4, r2
    f876:	4460      	add	r0, ip
    f878:	4a50      	ldr	r2, [pc, #320]	; (f9bc <__aeabi_dmul+0x4f8>)
    f87a:	4290      	cmp	r0, r2
    f87c:	dd00      	ble.n	f880 <__aeabi_dmul+0x3bc>
    f87e:	e6e3      	b.n	f648 <__aeabi_dmul+0x184>
    f880:	2501      	movs	r5, #1
    f882:	08db      	lsrs	r3, r3, #3
    f884:	0762      	lsls	r2, r4, #29
    f886:	431a      	orrs	r2, r3
    f888:	0264      	lsls	r4, r4, #9
    f88a:	9b01      	ldr	r3, [sp, #4]
    f88c:	4691      	mov	r9, r2
    f88e:	0b22      	lsrs	r2, r4, #12
    f890:	0544      	lsls	r4, r0, #21
    f892:	0d64      	lsrs	r4, r4, #21
    f894:	401d      	ands	r5, r3
    f896:	e67c      	b.n	f592 <__aeabi_dmul+0xce>
    f898:	2280      	movs	r2, #128	; 0x80
    f89a:	4659      	mov	r1, fp
    f89c:	0312      	lsls	r2, r2, #12
    f89e:	4211      	tst	r1, r2
    f8a0:	d008      	beq.n	f8b4 <__aeabi_dmul+0x3f0>
    f8a2:	4214      	tst	r4, r2
    f8a4:	d106      	bne.n	f8b4 <__aeabi_dmul+0x3f0>
    f8a6:	4322      	orrs	r2, r4
    f8a8:	0312      	lsls	r2, r2, #12
    f8aa:	0b12      	lsrs	r2, r2, #12
    f8ac:	4645      	mov	r5, r8
    f8ae:	4699      	mov	r9, r3
    f8b0:	4c43      	ldr	r4, [pc, #268]	; (f9c0 <__aeabi_dmul+0x4fc>)
    f8b2:	e66e      	b.n	f592 <__aeabi_dmul+0xce>
    f8b4:	465b      	mov	r3, fp
    f8b6:	431a      	orrs	r2, r3
    f8b8:	0312      	lsls	r2, r2, #12
    f8ba:	0b12      	lsrs	r2, r2, #12
    f8bc:	4c40      	ldr	r4, [pc, #256]	; (f9c0 <__aeabi_dmul+0x4fc>)
    f8be:	e668      	b.n	f592 <__aeabi_dmul+0xce>
    f8c0:	0003      	movs	r3, r0
    f8c2:	4654      	mov	r4, sl
    f8c4:	3b28      	subs	r3, #40	; 0x28
    f8c6:	409c      	lsls	r4, r3
    f8c8:	2300      	movs	r3, #0
    f8ca:	e6b9      	b.n	f640 <__aeabi_dmul+0x17c>
    f8cc:	f000 fbfc 	bl	100c8 <__clzsi2>
    f8d0:	3020      	adds	r0, #32
    f8d2:	e6a6      	b.n	f622 <__aeabi_dmul+0x15e>
    f8d4:	0003      	movs	r3, r0
    f8d6:	3b28      	subs	r3, #40	; 0x28
    f8d8:	409f      	lsls	r7, r3
    f8da:	2300      	movs	r3, #0
    f8dc:	46bb      	mov	fp, r7
    f8de:	4699      	mov	r9, r3
    f8e0:	e68a      	b.n	f5f8 <__aeabi_dmul+0x134>
    f8e2:	f000 fbf1 	bl	100c8 <__clzsi2>
    f8e6:	3020      	adds	r0, #32
    f8e8:	e674      	b.n	f5d4 <__aeabi_dmul+0x110>
    f8ea:	46b4      	mov	ip, r6
    f8ec:	e7ad      	b.n	f84a <__aeabi_dmul+0x386>
    f8ee:	2501      	movs	r5, #1
    f8f0:	1a2a      	subs	r2, r5, r0
    f8f2:	2a38      	cmp	r2, #56	; 0x38
    f8f4:	dd06      	ble.n	f904 <__aeabi_dmul+0x440>
    f8f6:	9b01      	ldr	r3, [sp, #4]
    f8f8:	2400      	movs	r4, #0
    f8fa:	401d      	ands	r5, r3
    f8fc:	2300      	movs	r3, #0
    f8fe:	2200      	movs	r2, #0
    f900:	4699      	mov	r9, r3
    f902:	e646      	b.n	f592 <__aeabi_dmul+0xce>
    f904:	2a1f      	cmp	r2, #31
    f906:	dc21      	bgt.n	f94c <__aeabi_dmul+0x488>
    f908:	2520      	movs	r5, #32
    f90a:	0020      	movs	r0, r4
    f90c:	1aad      	subs	r5, r5, r2
    f90e:	001e      	movs	r6, r3
    f910:	40ab      	lsls	r3, r5
    f912:	40a8      	lsls	r0, r5
    f914:	40d6      	lsrs	r6, r2
    f916:	1e5d      	subs	r5, r3, #1
    f918:	41ab      	sbcs	r3, r5
    f91a:	4330      	orrs	r0, r6
    f91c:	4318      	orrs	r0, r3
    f91e:	40d4      	lsrs	r4, r2
    f920:	0743      	lsls	r3, r0, #29
    f922:	d009      	beq.n	f938 <__aeabi_dmul+0x474>
    f924:	230f      	movs	r3, #15
    f926:	4003      	ands	r3, r0
    f928:	2b04      	cmp	r3, #4
    f92a:	d005      	beq.n	f938 <__aeabi_dmul+0x474>
    f92c:	0003      	movs	r3, r0
    f92e:	1d18      	adds	r0, r3, #4
    f930:	4298      	cmp	r0, r3
    f932:	419b      	sbcs	r3, r3
    f934:	425b      	negs	r3, r3
    f936:	18e4      	adds	r4, r4, r3
    f938:	0223      	lsls	r3, r4, #8
    f93a:	d521      	bpl.n	f980 <__aeabi_dmul+0x4bc>
    f93c:	2501      	movs	r5, #1
    f93e:	9b01      	ldr	r3, [sp, #4]
    f940:	2401      	movs	r4, #1
    f942:	401d      	ands	r5, r3
    f944:	2300      	movs	r3, #0
    f946:	2200      	movs	r2, #0
    f948:	4699      	mov	r9, r3
    f94a:	e622      	b.n	f592 <__aeabi_dmul+0xce>
    f94c:	251f      	movs	r5, #31
    f94e:	0021      	movs	r1, r4
    f950:	426d      	negs	r5, r5
    f952:	1a28      	subs	r0, r5, r0
    f954:	40c1      	lsrs	r1, r0
    f956:	0008      	movs	r0, r1
    f958:	2a20      	cmp	r2, #32
    f95a:	d01d      	beq.n	f998 <__aeabi_dmul+0x4d4>
    f95c:	355f      	adds	r5, #95	; 0x5f
    f95e:	1aaa      	subs	r2, r5, r2
    f960:	4094      	lsls	r4, r2
    f962:	4323      	orrs	r3, r4
    f964:	1e5c      	subs	r4, r3, #1
    f966:	41a3      	sbcs	r3, r4
    f968:	2507      	movs	r5, #7
    f96a:	4303      	orrs	r3, r0
    f96c:	401d      	ands	r5, r3
    f96e:	2200      	movs	r2, #0
    f970:	2d00      	cmp	r5, #0
    f972:	d009      	beq.n	f988 <__aeabi_dmul+0x4c4>
    f974:	220f      	movs	r2, #15
    f976:	2400      	movs	r4, #0
    f978:	401a      	ands	r2, r3
    f97a:	0018      	movs	r0, r3
    f97c:	2a04      	cmp	r2, #4
    f97e:	d1d6      	bne.n	f92e <__aeabi_dmul+0x46a>
    f980:	0003      	movs	r3, r0
    f982:	0765      	lsls	r5, r4, #29
    f984:	0264      	lsls	r4, r4, #9
    f986:	0b22      	lsrs	r2, r4, #12
    f988:	08db      	lsrs	r3, r3, #3
    f98a:	432b      	orrs	r3, r5
    f98c:	2501      	movs	r5, #1
    f98e:	4699      	mov	r9, r3
    f990:	9b01      	ldr	r3, [sp, #4]
    f992:	2400      	movs	r4, #0
    f994:	401d      	ands	r5, r3
    f996:	e5fc      	b.n	f592 <__aeabi_dmul+0xce>
    f998:	2400      	movs	r4, #0
    f99a:	e7e2      	b.n	f962 <__aeabi_dmul+0x49e>
    f99c:	2280      	movs	r2, #128	; 0x80
    f99e:	2501      	movs	r5, #1
    f9a0:	0312      	lsls	r2, r2, #12
    f9a2:	4322      	orrs	r2, r4
    f9a4:	9901      	ldr	r1, [sp, #4]
    f9a6:	0312      	lsls	r2, r2, #12
    f9a8:	0b12      	lsrs	r2, r2, #12
    f9aa:	400d      	ands	r5, r1
    f9ac:	4699      	mov	r9, r3
    f9ae:	4c04      	ldr	r4, [pc, #16]	; (f9c0 <__aeabi_dmul+0x4fc>)
    f9b0:	e5ef      	b.n	f592 <__aeabi_dmul+0xce>
    f9b2:	46c0      	nop			; (mov r8, r8)
    f9b4:	000003ff 	.word	0x000003ff
    f9b8:	feffffff 	.word	0xfeffffff
    f9bc:	000007fe 	.word	0x000007fe
    f9c0:	000007ff 	.word	0x000007ff

0000f9c4 <__aeabi_dsub>:
    f9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9c6:	4646      	mov	r6, r8
    f9c8:	46d6      	mov	lr, sl
    f9ca:	464f      	mov	r7, r9
    f9cc:	030c      	lsls	r4, r1, #12
    f9ce:	b5c0      	push	{r6, r7, lr}
    f9d0:	0fcd      	lsrs	r5, r1, #31
    f9d2:	004e      	lsls	r6, r1, #1
    f9d4:	0a61      	lsrs	r1, r4, #9
    f9d6:	0f44      	lsrs	r4, r0, #29
    f9d8:	430c      	orrs	r4, r1
    f9da:	00c1      	lsls	r1, r0, #3
    f9dc:	0058      	lsls	r0, r3, #1
    f9de:	0d40      	lsrs	r0, r0, #21
    f9e0:	4684      	mov	ip, r0
    f9e2:	468a      	mov	sl, r1
    f9e4:	000f      	movs	r7, r1
    f9e6:	0319      	lsls	r1, r3, #12
    f9e8:	0f50      	lsrs	r0, r2, #29
    f9ea:	0a49      	lsrs	r1, r1, #9
    f9ec:	4301      	orrs	r1, r0
    f9ee:	48c6      	ldr	r0, [pc, #792]	; (fd08 <__aeabi_dsub+0x344>)
    f9f0:	0d76      	lsrs	r6, r6, #21
    f9f2:	46a8      	mov	r8, r5
    f9f4:	0fdb      	lsrs	r3, r3, #31
    f9f6:	00d2      	lsls	r2, r2, #3
    f9f8:	4584      	cmp	ip, r0
    f9fa:	d100      	bne.n	f9fe <__aeabi_dsub+0x3a>
    f9fc:	e0d8      	b.n	fbb0 <__aeabi_dsub+0x1ec>
    f9fe:	2001      	movs	r0, #1
    fa00:	4043      	eors	r3, r0
    fa02:	42ab      	cmp	r3, r5
    fa04:	d100      	bne.n	fa08 <__aeabi_dsub+0x44>
    fa06:	e0a6      	b.n	fb56 <__aeabi_dsub+0x192>
    fa08:	4660      	mov	r0, ip
    fa0a:	1a35      	subs	r5, r6, r0
    fa0c:	2d00      	cmp	r5, #0
    fa0e:	dc00      	bgt.n	fa12 <__aeabi_dsub+0x4e>
    fa10:	e105      	b.n	fc1e <__aeabi_dsub+0x25a>
    fa12:	2800      	cmp	r0, #0
    fa14:	d110      	bne.n	fa38 <__aeabi_dsub+0x74>
    fa16:	000b      	movs	r3, r1
    fa18:	4313      	orrs	r3, r2
    fa1a:	d100      	bne.n	fa1e <__aeabi_dsub+0x5a>
    fa1c:	e0d7      	b.n	fbce <__aeabi_dsub+0x20a>
    fa1e:	1e6b      	subs	r3, r5, #1
    fa20:	2b00      	cmp	r3, #0
    fa22:	d000      	beq.n	fa26 <__aeabi_dsub+0x62>
    fa24:	e14b      	b.n	fcbe <__aeabi_dsub+0x2fa>
    fa26:	4653      	mov	r3, sl
    fa28:	1a9f      	subs	r7, r3, r2
    fa2a:	45ba      	cmp	sl, r7
    fa2c:	4180      	sbcs	r0, r0
    fa2e:	1a64      	subs	r4, r4, r1
    fa30:	4240      	negs	r0, r0
    fa32:	1a24      	subs	r4, r4, r0
    fa34:	2601      	movs	r6, #1
    fa36:	e01e      	b.n	fa76 <__aeabi_dsub+0xb2>
    fa38:	4bb3      	ldr	r3, [pc, #716]	; (fd08 <__aeabi_dsub+0x344>)
    fa3a:	429e      	cmp	r6, r3
    fa3c:	d048      	beq.n	fad0 <__aeabi_dsub+0x10c>
    fa3e:	2380      	movs	r3, #128	; 0x80
    fa40:	041b      	lsls	r3, r3, #16
    fa42:	4319      	orrs	r1, r3
    fa44:	2d38      	cmp	r5, #56	; 0x38
    fa46:	dd00      	ble.n	fa4a <__aeabi_dsub+0x86>
    fa48:	e119      	b.n	fc7e <__aeabi_dsub+0x2ba>
    fa4a:	2d1f      	cmp	r5, #31
    fa4c:	dd00      	ble.n	fa50 <__aeabi_dsub+0x8c>
    fa4e:	e14c      	b.n	fcea <__aeabi_dsub+0x326>
    fa50:	2320      	movs	r3, #32
    fa52:	000f      	movs	r7, r1
    fa54:	1b5b      	subs	r3, r3, r5
    fa56:	0010      	movs	r0, r2
    fa58:	409a      	lsls	r2, r3
    fa5a:	409f      	lsls	r7, r3
    fa5c:	40e8      	lsrs	r0, r5
    fa5e:	1e53      	subs	r3, r2, #1
    fa60:	419a      	sbcs	r2, r3
    fa62:	40e9      	lsrs	r1, r5
    fa64:	4307      	orrs	r7, r0
    fa66:	4317      	orrs	r7, r2
    fa68:	4653      	mov	r3, sl
    fa6a:	1bdf      	subs	r7, r3, r7
    fa6c:	1a61      	subs	r1, r4, r1
    fa6e:	45ba      	cmp	sl, r7
    fa70:	41a4      	sbcs	r4, r4
    fa72:	4264      	negs	r4, r4
    fa74:	1b0c      	subs	r4, r1, r4
    fa76:	0223      	lsls	r3, r4, #8
    fa78:	d400      	bmi.n	fa7c <__aeabi_dsub+0xb8>
    fa7a:	e0c5      	b.n	fc08 <__aeabi_dsub+0x244>
    fa7c:	0264      	lsls	r4, r4, #9
    fa7e:	0a65      	lsrs	r5, r4, #9
    fa80:	2d00      	cmp	r5, #0
    fa82:	d100      	bne.n	fa86 <__aeabi_dsub+0xc2>
    fa84:	e0f6      	b.n	fc74 <__aeabi_dsub+0x2b0>
    fa86:	0028      	movs	r0, r5
    fa88:	f000 fb1e 	bl	100c8 <__clzsi2>
    fa8c:	0003      	movs	r3, r0
    fa8e:	3b08      	subs	r3, #8
    fa90:	2b1f      	cmp	r3, #31
    fa92:	dd00      	ble.n	fa96 <__aeabi_dsub+0xd2>
    fa94:	e0e9      	b.n	fc6a <__aeabi_dsub+0x2a6>
    fa96:	2220      	movs	r2, #32
    fa98:	003c      	movs	r4, r7
    fa9a:	1ad2      	subs	r2, r2, r3
    fa9c:	409d      	lsls	r5, r3
    fa9e:	40d4      	lsrs	r4, r2
    faa0:	409f      	lsls	r7, r3
    faa2:	4325      	orrs	r5, r4
    faa4:	429e      	cmp	r6, r3
    faa6:	dd00      	ble.n	faaa <__aeabi_dsub+0xe6>
    faa8:	e0db      	b.n	fc62 <__aeabi_dsub+0x29e>
    faaa:	1b9e      	subs	r6, r3, r6
    faac:	1c73      	adds	r3, r6, #1
    faae:	2b1f      	cmp	r3, #31
    fab0:	dd00      	ble.n	fab4 <__aeabi_dsub+0xf0>
    fab2:	e10a      	b.n	fcca <__aeabi_dsub+0x306>
    fab4:	2220      	movs	r2, #32
    fab6:	0038      	movs	r0, r7
    fab8:	1ad2      	subs	r2, r2, r3
    faba:	0029      	movs	r1, r5
    fabc:	4097      	lsls	r7, r2
    fabe:	002c      	movs	r4, r5
    fac0:	4091      	lsls	r1, r2
    fac2:	40d8      	lsrs	r0, r3
    fac4:	1e7a      	subs	r2, r7, #1
    fac6:	4197      	sbcs	r7, r2
    fac8:	40dc      	lsrs	r4, r3
    faca:	2600      	movs	r6, #0
    facc:	4301      	orrs	r1, r0
    face:	430f      	orrs	r7, r1
    fad0:	077b      	lsls	r3, r7, #29
    fad2:	d009      	beq.n	fae8 <__aeabi_dsub+0x124>
    fad4:	230f      	movs	r3, #15
    fad6:	403b      	ands	r3, r7
    fad8:	2b04      	cmp	r3, #4
    fada:	d005      	beq.n	fae8 <__aeabi_dsub+0x124>
    fadc:	1d3b      	adds	r3, r7, #4
    fade:	42bb      	cmp	r3, r7
    fae0:	41bf      	sbcs	r7, r7
    fae2:	427f      	negs	r7, r7
    fae4:	19e4      	adds	r4, r4, r7
    fae6:	001f      	movs	r7, r3
    fae8:	0223      	lsls	r3, r4, #8
    faea:	d525      	bpl.n	fb38 <__aeabi_dsub+0x174>
    faec:	4b86      	ldr	r3, [pc, #536]	; (fd08 <__aeabi_dsub+0x344>)
    faee:	3601      	adds	r6, #1
    faf0:	429e      	cmp	r6, r3
    faf2:	d100      	bne.n	faf6 <__aeabi_dsub+0x132>
    faf4:	e0af      	b.n	fc56 <__aeabi_dsub+0x292>
    faf6:	4b85      	ldr	r3, [pc, #532]	; (fd0c <__aeabi_dsub+0x348>)
    faf8:	2501      	movs	r5, #1
    fafa:	401c      	ands	r4, r3
    fafc:	4643      	mov	r3, r8
    fafe:	0762      	lsls	r2, r4, #29
    fb00:	08ff      	lsrs	r7, r7, #3
    fb02:	0264      	lsls	r4, r4, #9
    fb04:	0576      	lsls	r6, r6, #21
    fb06:	4317      	orrs	r7, r2
    fb08:	0b24      	lsrs	r4, r4, #12
    fb0a:	0d76      	lsrs	r6, r6, #21
    fb0c:	401d      	ands	r5, r3
    fb0e:	2100      	movs	r1, #0
    fb10:	0324      	lsls	r4, r4, #12
    fb12:	0b23      	lsrs	r3, r4, #12
    fb14:	0d0c      	lsrs	r4, r1, #20
    fb16:	4a7e      	ldr	r2, [pc, #504]	; (fd10 <__aeabi_dsub+0x34c>)
    fb18:	0524      	lsls	r4, r4, #20
    fb1a:	431c      	orrs	r4, r3
    fb1c:	4014      	ands	r4, r2
    fb1e:	0533      	lsls	r3, r6, #20
    fb20:	4323      	orrs	r3, r4
    fb22:	005b      	lsls	r3, r3, #1
    fb24:	07ed      	lsls	r5, r5, #31
    fb26:	085b      	lsrs	r3, r3, #1
    fb28:	432b      	orrs	r3, r5
    fb2a:	0038      	movs	r0, r7
    fb2c:	0019      	movs	r1, r3
    fb2e:	bc1c      	pop	{r2, r3, r4}
    fb30:	4690      	mov	r8, r2
    fb32:	4699      	mov	r9, r3
    fb34:	46a2      	mov	sl, r4
    fb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb38:	2501      	movs	r5, #1
    fb3a:	4643      	mov	r3, r8
    fb3c:	0762      	lsls	r2, r4, #29
    fb3e:	08ff      	lsrs	r7, r7, #3
    fb40:	4317      	orrs	r7, r2
    fb42:	08e4      	lsrs	r4, r4, #3
    fb44:	401d      	ands	r5, r3
    fb46:	4b70      	ldr	r3, [pc, #448]	; (fd08 <__aeabi_dsub+0x344>)
    fb48:	429e      	cmp	r6, r3
    fb4a:	d036      	beq.n	fbba <__aeabi_dsub+0x1f6>
    fb4c:	0324      	lsls	r4, r4, #12
    fb4e:	0576      	lsls	r6, r6, #21
    fb50:	0b24      	lsrs	r4, r4, #12
    fb52:	0d76      	lsrs	r6, r6, #21
    fb54:	e7db      	b.n	fb0e <__aeabi_dsub+0x14a>
    fb56:	4663      	mov	r3, ip
    fb58:	1af3      	subs	r3, r6, r3
    fb5a:	2b00      	cmp	r3, #0
    fb5c:	dc00      	bgt.n	fb60 <__aeabi_dsub+0x19c>
    fb5e:	e094      	b.n	fc8a <__aeabi_dsub+0x2c6>
    fb60:	4660      	mov	r0, ip
    fb62:	2800      	cmp	r0, #0
    fb64:	d035      	beq.n	fbd2 <__aeabi_dsub+0x20e>
    fb66:	4868      	ldr	r0, [pc, #416]	; (fd08 <__aeabi_dsub+0x344>)
    fb68:	4286      	cmp	r6, r0
    fb6a:	d0b1      	beq.n	fad0 <__aeabi_dsub+0x10c>
    fb6c:	2780      	movs	r7, #128	; 0x80
    fb6e:	043f      	lsls	r7, r7, #16
    fb70:	4339      	orrs	r1, r7
    fb72:	2b38      	cmp	r3, #56	; 0x38
    fb74:	dc00      	bgt.n	fb78 <__aeabi_dsub+0x1b4>
    fb76:	e0fd      	b.n	fd74 <__aeabi_dsub+0x3b0>
    fb78:	430a      	orrs	r2, r1
    fb7a:	0017      	movs	r7, r2
    fb7c:	2100      	movs	r1, #0
    fb7e:	1e7a      	subs	r2, r7, #1
    fb80:	4197      	sbcs	r7, r2
    fb82:	4457      	add	r7, sl
    fb84:	4557      	cmp	r7, sl
    fb86:	4180      	sbcs	r0, r0
    fb88:	1909      	adds	r1, r1, r4
    fb8a:	4244      	negs	r4, r0
    fb8c:	190c      	adds	r4, r1, r4
    fb8e:	0223      	lsls	r3, r4, #8
    fb90:	d53a      	bpl.n	fc08 <__aeabi_dsub+0x244>
    fb92:	4b5d      	ldr	r3, [pc, #372]	; (fd08 <__aeabi_dsub+0x344>)
    fb94:	3601      	adds	r6, #1
    fb96:	429e      	cmp	r6, r3
    fb98:	d100      	bne.n	fb9c <__aeabi_dsub+0x1d8>
    fb9a:	e14b      	b.n	fe34 <__aeabi_dsub+0x470>
    fb9c:	2201      	movs	r2, #1
    fb9e:	4b5b      	ldr	r3, [pc, #364]	; (fd0c <__aeabi_dsub+0x348>)
    fba0:	401c      	ands	r4, r3
    fba2:	087b      	lsrs	r3, r7, #1
    fba4:	4017      	ands	r7, r2
    fba6:	431f      	orrs	r7, r3
    fba8:	07e2      	lsls	r2, r4, #31
    fbaa:	4317      	orrs	r7, r2
    fbac:	0864      	lsrs	r4, r4, #1
    fbae:	e78f      	b.n	fad0 <__aeabi_dsub+0x10c>
    fbb0:	0008      	movs	r0, r1
    fbb2:	4310      	orrs	r0, r2
    fbb4:	d000      	beq.n	fbb8 <__aeabi_dsub+0x1f4>
    fbb6:	e724      	b.n	fa02 <__aeabi_dsub+0x3e>
    fbb8:	e721      	b.n	f9fe <__aeabi_dsub+0x3a>
    fbba:	0023      	movs	r3, r4
    fbbc:	433b      	orrs	r3, r7
    fbbe:	d100      	bne.n	fbc2 <__aeabi_dsub+0x1fe>
    fbc0:	e1b9      	b.n	ff36 <__aeabi_dsub+0x572>
    fbc2:	2280      	movs	r2, #128	; 0x80
    fbc4:	0312      	lsls	r2, r2, #12
    fbc6:	4314      	orrs	r4, r2
    fbc8:	0324      	lsls	r4, r4, #12
    fbca:	0b24      	lsrs	r4, r4, #12
    fbcc:	e79f      	b.n	fb0e <__aeabi_dsub+0x14a>
    fbce:	002e      	movs	r6, r5
    fbd0:	e77e      	b.n	fad0 <__aeabi_dsub+0x10c>
    fbd2:	0008      	movs	r0, r1
    fbd4:	4310      	orrs	r0, r2
    fbd6:	d100      	bne.n	fbda <__aeabi_dsub+0x216>
    fbd8:	e0ca      	b.n	fd70 <__aeabi_dsub+0x3ac>
    fbda:	1e58      	subs	r0, r3, #1
    fbdc:	4684      	mov	ip, r0
    fbde:	2800      	cmp	r0, #0
    fbe0:	d000      	beq.n	fbe4 <__aeabi_dsub+0x220>
    fbe2:	e0e7      	b.n	fdb4 <__aeabi_dsub+0x3f0>
    fbe4:	4452      	add	r2, sl
    fbe6:	4552      	cmp	r2, sl
    fbe8:	4180      	sbcs	r0, r0
    fbea:	1864      	adds	r4, r4, r1
    fbec:	4240      	negs	r0, r0
    fbee:	1824      	adds	r4, r4, r0
    fbf0:	0017      	movs	r7, r2
    fbf2:	2601      	movs	r6, #1
    fbf4:	0223      	lsls	r3, r4, #8
    fbf6:	d507      	bpl.n	fc08 <__aeabi_dsub+0x244>
    fbf8:	2602      	movs	r6, #2
    fbfa:	e7cf      	b.n	fb9c <__aeabi_dsub+0x1d8>
    fbfc:	4664      	mov	r4, ip
    fbfe:	432c      	orrs	r4, r5
    fc00:	d100      	bne.n	fc04 <__aeabi_dsub+0x240>
    fc02:	e1b3      	b.n	ff6c <__aeabi_dsub+0x5a8>
    fc04:	002c      	movs	r4, r5
    fc06:	4667      	mov	r7, ip
    fc08:	077b      	lsls	r3, r7, #29
    fc0a:	d000      	beq.n	fc0e <__aeabi_dsub+0x24a>
    fc0c:	e762      	b.n	fad4 <__aeabi_dsub+0x110>
    fc0e:	0763      	lsls	r3, r4, #29
    fc10:	08ff      	lsrs	r7, r7, #3
    fc12:	431f      	orrs	r7, r3
    fc14:	2501      	movs	r5, #1
    fc16:	4643      	mov	r3, r8
    fc18:	08e4      	lsrs	r4, r4, #3
    fc1a:	401d      	ands	r5, r3
    fc1c:	e793      	b.n	fb46 <__aeabi_dsub+0x182>
    fc1e:	2d00      	cmp	r5, #0
    fc20:	d178      	bne.n	fd14 <__aeabi_dsub+0x350>
    fc22:	1c75      	adds	r5, r6, #1
    fc24:	056d      	lsls	r5, r5, #21
    fc26:	0d6d      	lsrs	r5, r5, #21
    fc28:	2d01      	cmp	r5, #1
    fc2a:	dc00      	bgt.n	fc2e <__aeabi_dsub+0x26a>
    fc2c:	e0f2      	b.n	fe14 <__aeabi_dsub+0x450>
    fc2e:	4650      	mov	r0, sl
    fc30:	1a80      	subs	r0, r0, r2
    fc32:	4582      	cmp	sl, r0
    fc34:	41bf      	sbcs	r7, r7
    fc36:	1a65      	subs	r5, r4, r1
    fc38:	427f      	negs	r7, r7
    fc3a:	1bed      	subs	r5, r5, r7
    fc3c:	4684      	mov	ip, r0
    fc3e:	0228      	lsls	r0, r5, #8
    fc40:	d400      	bmi.n	fc44 <__aeabi_dsub+0x280>
    fc42:	e08c      	b.n	fd5e <__aeabi_dsub+0x39a>
    fc44:	4650      	mov	r0, sl
    fc46:	1a17      	subs	r7, r2, r0
    fc48:	42ba      	cmp	r2, r7
    fc4a:	4192      	sbcs	r2, r2
    fc4c:	1b0c      	subs	r4, r1, r4
    fc4e:	4255      	negs	r5, r2
    fc50:	1b65      	subs	r5, r4, r5
    fc52:	4698      	mov	r8, r3
    fc54:	e714      	b.n	fa80 <__aeabi_dsub+0xbc>
    fc56:	2501      	movs	r5, #1
    fc58:	4643      	mov	r3, r8
    fc5a:	2400      	movs	r4, #0
    fc5c:	401d      	ands	r5, r3
    fc5e:	2700      	movs	r7, #0
    fc60:	e755      	b.n	fb0e <__aeabi_dsub+0x14a>
    fc62:	4c2a      	ldr	r4, [pc, #168]	; (fd0c <__aeabi_dsub+0x348>)
    fc64:	1af6      	subs	r6, r6, r3
    fc66:	402c      	ands	r4, r5
    fc68:	e732      	b.n	fad0 <__aeabi_dsub+0x10c>
    fc6a:	003d      	movs	r5, r7
    fc6c:	3828      	subs	r0, #40	; 0x28
    fc6e:	4085      	lsls	r5, r0
    fc70:	2700      	movs	r7, #0
    fc72:	e717      	b.n	faa4 <__aeabi_dsub+0xe0>
    fc74:	0038      	movs	r0, r7
    fc76:	f000 fa27 	bl	100c8 <__clzsi2>
    fc7a:	3020      	adds	r0, #32
    fc7c:	e706      	b.n	fa8c <__aeabi_dsub+0xc8>
    fc7e:	430a      	orrs	r2, r1
    fc80:	0017      	movs	r7, r2
    fc82:	2100      	movs	r1, #0
    fc84:	1e7a      	subs	r2, r7, #1
    fc86:	4197      	sbcs	r7, r2
    fc88:	e6ee      	b.n	fa68 <__aeabi_dsub+0xa4>
    fc8a:	2b00      	cmp	r3, #0
    fc8c:	d000      	beq.n	fc90 <__aeabi_dsub+0x2cc>
    fc8e:	e0e5      	b.n	fe5c <__aeabi_dsub+0x498>
    fc90:	1c73      	adds	r3, r6, #1
    fc92:	469c      	mov	ip, r3
    fc94:	055b      	lsls	r3, r3, #21
    fc96:	0d5b      	lsrs	r3, r3, #21
    fc98:	2b01      	cmp	r3, #1
    fc9a:	dc00      	bgt.n	fc9e <__aeabi_dsub+0x2da>
    fc9c:	e09f      	b.n	fdde <__aeabi_dsub+0x41a>
    fc9e:	4b1a      	ldr	r3, [pc, #104]	; (fd08 <__aeabi_dsub+0x344>)
    fca0:	459c      	cmp	ip, r3
    fca2:	d100      	bne.n	fca6 <__aeabi_dsub+0x2e2>
    fca4:	e0c5      	b.n	fe32 <__aeabi_dsub+0x46e>
    fca6:	4452      	add	r2, sl
    fca8:	4552      	cmp	r2, sl
    fcaa:	4180      	sbcs	r0, r0
    fcac:	1864      	adds	r4, r4, r1
    fcae:	4240      	negs	r0, r0
    fcb0:	1824      	adds	r4, r4, r0
    fcb2:	07e7      	lsls	r7, r4, #31
    fcb4:	0852      	lsrs	r2, r2, #1
    fcb6:	4317      	orrs	r7, r2
    fcb8:	0864      	lsrs	r4, r4, #1
    fcba:	4666      	mov	r6, ip
    fcbc:	e708      	b.n	fad0 <__aeabi_dsub+0x10c>
    fcbe:	4812      	ldr	r0, [pc, #72]	; (fd08 <__aeabi_dsub+0x344>)
    fcc0:	4285      	cmp	r5, r0
    fcc2:	d100      	bne.n	fcc6 <__aeabi_dsub+0x302>
    fcc4:	e085      	b.n	fdd2 <__aeabi_dsub+0x40e>
    fcc6:	001d      	movs	r5, r3
    fcc8:	e6bc      	b.n	fa44 <__aeabi_dsub+0x80>
    fcca:	0029      	movs	r1, r5
    fccc:	3e1f      	subs	r6, #31
    fcce:	40f1      	lsrs	r1, r6
    fcd0:	2b20      	cmp	r3, #32
    fcd2:	d100      	bne.n	fcd6 <__aeabi_dsub+0x312>
    fcd4:	e07f      	b.n	fdd6 <__aeabi_dsub+0x412>
    fcd6:	2240      	movs	r2, #64	; 0x40
    fcd8:	1ad3      	subs	r3, r2, r3
    fcda:	409d      	lsls	r5, r3
    fcdc:	432f      	orrs	r7, r5
    fcde:	1e7d      	subs	r5, r7, #1
    fce0:	41af      	sbcs	r7, r5
    fce2:	2400      	movs	r4, #0
    fce4:	430f      	orrs	r7, r1
    fce6:	2600      	movs	r6, #0
    fce8:	e78e      	b.n	fc08 <__aeabi_dsub+0x244>
    fcea:	002b      	movs	r3, r5
    fcec:	000f      	movs	r7, r1
    fcee:	3b20      	subs	r3, #32
    fcf0:	40df      	lsrs	r7, r3
    fcf2:	2d20      	cmp	r5, #32
    fcf4:	d071      	beq.n	fdda <__aeabi_dsub+0x416>
    fcf6:	2340      	movs	r3, #64	; 0x40
    fcf8:	1b5d      	subs	r5, r3, r5
    fcfa:	40a9      	lsls	r1, r5
    fcfc:	430a      	orrs	r2, r1
    fcfe:	1e51      	subs	r1, r2, #1
    fd00:	418a      	sbcs	r2, r1
    fd02:	2100      	movs	r1, #0
    fd04:	4317      	orrs	r7, r2
    fd06:	e6af      	b.n	fa68 <__aeabi_dsub+0xa4>
    fd08:	000007ff 	.word	0x000007ff
    fd0c:	ff7fffff 	.word	0xff7fffff
    fd10:	800fffff 	.word	0x800fffff
    fd14:	2e00      	cmp	r6, #0
    fd16:	d03e      	beq.n	fd96 <__aeabi_dsub+0x3d2>
    fd18:	4eb3      	ldr	r6, [pc, #716]	; (ffe8 <__aeabi_dsub+0x624>)
    fd1a:	45b4      	cmp	ip, r6
    fd1c:	d045      	beq.n	fdaa <__aeabi_dsub+0x3e6>
    fd1e:	2680      	movs	r6, #128	; 0x80
    fd20:	0436      	lsls	r6, r6, #16
    fd22:	426d      	negs	r5, r5
    fd24:	4334      	orrs	r4, r6
    fd26:	2d38      	cmp	r5, #56	; 0x38
    fd28:	dd00      	ble.n	fd2c <__aeabi_dsub+0x368>
    fd2a:	e0a8      	b.n	fe7e <__aeabi_dsub+0x4ba>
    fd2c:	2d1f      	cmp	r5, #31
    fd2e:	dd00      	ble.n	fd32 <__aeabi_dsub+0x36e>
    fd30:	e11f      	b.n	ff72 <__aeabi_dsub+0x5ae>
    fd32:	2620      	movs	r6, #32
    fd34:	0027      	movs	r7, r4
    fd36:	4650      	mov	r0, sl
    fd38:	1b76      	subs	r6, r6, r5
    fd3a:	40b7      	lsls	r7, r6
    fd3c:	40e8      	lsrs	r0, r5
    fd3e:	4307      	orrs	r7, r0
    fd40:	4650      	mov	r0, sl
    fd42:	40b0      	lsls	r0, r6
    fd44:	1e46      	subs	r6, r0, #1
    fd46:	41b0      	sbcs	r0, r6
    fd48:	40ec      	lsrs	r4, r5
    fd4a:	4338      	orrs	r0, r7
    fd4c:	1a17      	subs	r7, r2, r0
    fd4e:	42ba      	cmp	r2, r7
    fd50:	4192      	sbcs	r2, r2
    fd52:	1b0c      	subs	r4, r1, r4
    fd54:	4252      	negs	r2, r2
    fd56:	1aa4      	subs	r4, r4, r2
    fd58:	4666      	mov	r6, ip
    fd5a:	4698      	mov	r8, r3
    fd5c:	e68b      	b.n	fa76 <__aeabi_dsub+0xb2>
    fd5e:	4664      	mov	r4, ip
    fd60:	4667      	mov	r7, ip
    fd62:	432c      	orrs	r4, r5
    fd64:	d000      	beq.n	fd68 <__aeabi_dsub+0x3a4>
    fd66:	e68b      	b.n	fa80 <__aeabi_dsub+0xbc>
    fd68:	2500      	movs	r5, #0
    fd6a:	2600      	movs	r6, #0
    fd6c:	2700      	movs	r7, #0
    fd6e:	e6ea      	b.n	fb46 <__aeabi_dsub+0x182>
    fd70:	001e      	movs	r6, r3
    fd72:	e6ad      	b.n	fad0 <__aeabi_dsub+0x10c>
    fd74:	2b1f      	cmp	r3, #31
    fd76:	dc60      	bgt.n	fe3a <__aeabi_dsub+0x476>
    fd78:	2720      	movs	r7, #32
    fd7a:	1af8      	subs	r0, r7, r3
    fd7c:	000f      	movs	r7, r1
    fd7e:	4684      	mov	ip, r0
    fd80:	4087      	lsls	r7, r0
    fd82:	0010      	movs	r0, r2
    fd84:	40d8      	lsrs	r0, r3
    fd86:	4307      	orrs	r7, r0
    fd88:	4660      	mov	r0, ip
    fd8a:	4082      	lsls	r2, r0
    fd8c:	1e50      	subs	r0, r2, #1
    fd8e:	4182      	sbcs	r2, r0
    fd90:	40d9      	lsrs	r1, r3
    fd92:	4317      	orrs	r7, r2
    fd94:	e6f5      	b.n	fb82 <__aeabi_dsub+0x1be>
    fd96:	0026      	movs	r6, r4
    fd98:	4650      	mov	r0, sl
    fd9a:	4306      	orrs	r6, r0
    fd9c:	d005      	beq.n	fdaa <__aeabi_dsub+0x3e6>
    fd9e:	43ed      	mvns	r5, r5
    fda0:	2d00      	cmp	r5, #0
    fda2:	d0d3      	beq.n	fd4c <__aeabi_dsub+0x388>
    fda4:	4e90      	ldr	r6, [pc, #576]	; (ffe8 <__aeabi_dsub+0x624>)
    fda6:	45b4      	cmp	ip, r6
    fda8:	d1bd      	bne.n	fd26 <__aeabi_dsub+0x362>
    fdaa:	000c      	movs	r4, r1
    fdac:	0017      	movs	r7, r2
    fdae:	4666      	mov	r6, ip
    fdb0:	4698      	mov	r8, r3
    fdb2:	e68d      	b.n	fad0 <__aeabi_dsub+0x10c>
    fdb4:	488c      	ldr	r0, [pc, #560]	; (ffe8 <__aeabi_dsub+0x624>)
    fdb6:	4283      	cmp	r3, r0
    fdb8:	d00b      	beq.n	fdd2 <__aeabi_dsub+0x40e>
    fdba:	4663      	mov	r3, ip
    fdbc:	e6d9      	b.n	fb72 <__aeabi_dsub+0x1ae>
    fdbe:	2d00      	cmp	r5, #0
    fdc0:	d000      	beq.n	fdc4 <__aeabi_dsub+0x400>
    fdc2:	e096      	b.n	fef2 <__aeabi_dsub+0x52e>
    fdc4:	0008      	movs	r0, r1
    fdc6:	4310      	orrs	r0, r2
    fdc8:	d100      	bne.n	fdcc <__aeabi_dsub+0x408>
    fdca:	e0e2      	b.n	ff92 <__aeabi_dsub+0x5ce>
    fdcc:	000c      	movs	r4, r1
    fdce:	0017      	movs	r7, r2
    fdd0:	4698      	mov	r8, r3
    fdd2:	4e85      	ldr	r6, [pc, #532]	; (ffe8 <__aeabi_dsub+0x624>)
    fdd4:	e67c      	b.n	fad0 <__aeabi_dsub+0x10c>
    fdd6:	2500      	movs	r5, #0
    fdd8:	e780      	b.n	fcdc <__aeabi_dsub+0x318>
    fdda:	2100      	movs	r1, #0
    fddc:	e78e      	b.n	fcfc <__aeabi_dsub+0x338>
    fdde:	0023      	movs	r3, r4
    fde0:	4650      	mov	r0, sl
    fde2:	4303      	orrs	r3, r0
    fde4:	2e00      	cmp	r6, #0
    fde6:	d000      	beq.n	fdea <__aeabi_dsub+0x426>
    fde8:	e0a8      	b.n	ff3c <__aeabi_dsub+0x578>
    fdea:	2b00      	cmp	r3, #0
    fdec:	d100      	bne.n	fdf0 <__aeabi_dsub+0x42c>
    fdee:	e0de      	b.n	ffae <__aeabi_dsub+0x5ea>
    fdf0:	000b      	movs	r3, r1
    fdf2:	4313      	orrs	r3, r2
    fdf4:	d100      	bne.n	fdf8 <__aeabi_dsub+0x434>
    fdf6:	e66b      	b.n	fad0 <__aeabi_dsub+0x10c>
    fdf8:	4452      	add	r2, sl
    fdfa:	4552      	cmp	r2, sl
    fdfc:	4180      	sbcs	r0, r0
    fdfe:	1864      	adds	r4, r4, r1
    fe00:	4240      	negs	r0, r0
    fe02:	1824      	adds	r4, r4, r0
    fe04:	0017      	movs	r7, r2
    fe06:	0223      	lsls	r3, r4, #8
    fe08:	d400      	bmi.n	fe0c <__aeabi_dsub+0x448>
    fe0a:	e6fd      	b.n	fc08 <__aeabi_dsub+0x244>
    fe0c:	4b77      	ldr	r3, [pc, #476]	; (ffec <__aeabi_dsub+0x628>)
    fe0e:	4666      	mov	r6, ip
    fe10:	401c      	ands	r4, r3
    fe12:	e65d      	b.n	fad0 <__aeabi_dsub+0x10c>
    fe14:	0025      	movs	r5, r4
    fe16:	4650      	mov	r0, sl
    fe18:	4305      	orrs	r5, r0
    fe1a:	2e00      	cmp	r6, #0
    fe1c:	d1cf      	bne.n	fdbe <__aeabi_dsub+0x3fa>
    fe1e:	2d00      	cmp	r5, #0
    fe20:	d14f      	bne.n	fec2 <__aeabi_dsub+0x4fe>
    fe22:	000c      	movs	r4, r1
    fe24:	4314      	orrs	r4, r2
    fe26:	d100      	bne.n	fe2a <__aeabi_dsub+0x466>
    fe28:	e0a0      	b.n	ff6c <__aeabi_dsub+0x5a8>
    fe2a:	000c      	movs	r4, r1
    fe2c:	0017      	movs	r7, r2
    fe2e:	4698      	mov	r8, r3
    fe30:	e64e      	b.n	fad0 <__aeabi_dsub+0x10c>
    fe32:	4666      	mov	r6, ip
    fe34:	2400      	movs	r4, #0
    fe36:	2700      	movs	r7, #0
    fe38:	e685      	b.n	fb46 <__aeabi_dsub+0x182>
    fe3a:	001f      	movs	r7, r3
    fe3c:	0008      	movs	r0, r1
    fe3e:	3f20      	subs	r7, #32
    fe40:	40f8      	lsrs	r0, r7
    fe42:	0007      	movs	r7, r0
    fe44:	2b20      	cmp	r3, #32
    fe46:	d100      	bne.n	fe4a <__aeabi_dsub+0x486>
    fe48:	e08e      	b.n	ff68 <__aeabi_dsub+0x5a4>
    fe4a:	2040      	movs	r0, #64	; 0x40
    fe4c:	1ac3      	subs	r3, r0, r3
    fe4e:	4099      	lsls	r1, r3
    fe50:	430a      	orrs	r2, r1
    fe52:	1e51      	subs	r1, r2, #1
    fe54:	418a      	sbcs	r2, r1
    fe56:	2100      	movs	r1, #0
    fe58:	4317      	orrs	r7, r2
    fe5a:	e692      	b.n	fb82 <__aeabi_dsub+0x1be>
    fe5c:	2e00      	cmp	r6, #0
    fe5e:	d114      	bne.n	fe8a <__aeabi_dsub+0x4c6>
    fe60:	0026      	movs	r6, r4
    fe62:	4650      	mov	r0, sl
    fe64:	4306      	orrs	r6, r0
    fe66:	d062      	beq.n	ff2e <__aeabi_dsub+0x56a>
    fe68:	43db      	mvns	r3, r3
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d15c      	bne.n	ff28 <__aeabi_dsub+0x564>
    fe6e:	1887      	adds	r7, r0, r2
    fe70:	4297      	cmp	r7, r2
    fe72:	4192      	sbcs	r2, r2
    fe74:	1864      	adds	r4, r4, r1
    fe76:	4252      	negs	r2, r2
    fe78:	18a4      	adds	r4, r4, r2
    fe7a:	4666      	mov	r6, ip
    fe7c:	e687      	b.n	fb8e <__aeabi_dsub+0x1ca>
    fe7e:	4650      	mov	r0, sl
    fe80:	4320      	orrs	r0, r4
    fe82:	1e44      	subs	r4, r0, #1
    fe84:	41a0      	sbcs	r0, r4
    fe86:	2400      	movs	r4, #0
    fe88:	e760      	b.n	fd4c <__aeabi_dsub+0x388>
    fe8a:	4e57      	ldr	r6, [pc, #348]	; (ffe8 <__aeabi_dsub+0x624>)
    fe8c:	45b4      	cmp	ip, r6
    fe8e:	d04e      	beq.n	ff2e <__aeabi_dsub+0x56a>
    fe90:	2680      	movs	r6, #128	; 0x80
    fe92:	0436      	lsls	r6, r6, #16
    fe94:	425b      	negs	r3, r3
    fe96:	4334      	orrs	r4, r6
    fe98:	2b38      	cmp	r3, #56	; 0x38
    fe9a:	dd00      	ble.n	fe9e <__aeabi_dsub+0x4da>
    fe9c:	e07f      	b.n	ff9e <__aeabi_dsub+0x5da>
    fe9e:	2b1f      	cmp	r3, #31
    fea0:	dd00      	ble.n	fea4 <__aeabi_dsub+0x4e0>
    fea2:	e08b      	b.n	ffbc <__aeabi_dsub+0x5f8>
    fea4:	2620      	movs	r6, #32
    fea6:	0027      	movs	r7, r4
    fea8:	4650      	mov	r0, sl
    feaa:	1af6      	subs	r6, r6, r3
    feac:	40b7      	lsls	r7, r6
    feae:	40d8      	lsrs	r0, r3
    feb0:	4307      	orrs	r7, r0
    feb2:	4650      	mov	r0, sl
    feb4:	40b0      	lsls	r0, r6
    feb6:	1e46      	subs	r6, r0, #1
    feb8:	41b0      	sbcs	r0, r6
    feba:	4307      	orrs	r7, r0
    febc:	40dc      	lsrs	r4, r3
    febe:	18bf      	adds	r7, r7, r2
    fec0:	e7d6      	b.n	fe70 <__aeabi_dsub+0x4ac>
    fec2:	000d      	movs	r5, r1
    fec4:	4315      	orrs	r5, r2
    fec6:	d100      	bne.n	feca <__aeabi_dsub+0x506>
    fec8:	e602      	b.n	fad0 <__aeabi_dsub+0x10c>
    feca:	4650      	mov	r0, sl
    fecc:	1a80      	subs	r0, r0, r2
    fece:	4582      	cmp	sl, r0
    fed0:	41bf      	sbcs	r7, r7
    fed2:	1a65      	subs	r5, r4, r1
    fed4:	427f      	negs	r7, r7
    fed6:	1bed      	subs	r5, r5, r7
    fed8:	4684      	mov	ip, r0
    feda:	0228      	lsls	r0, r5, #8
    fedc:	d400      	bmi.n	fee0 <__aeabi_dsub+0x51c>
    fede:	e68d      	b.n	fbfc <__aeabi_dsub+0x238>
    fee0:	4650      	mov	r0, sl
    fee2:	1a17      	subs	r7, r2, r0
    fee4:	42ba      	cmp	r2, r7
    fee6:	4192      	sbcs	r2, r2
    fee8:	1b0c      	subs	r4, r1, r4
    feea:	4252      	negs	r2, r2
    feec:	1aa4      	subs	r4, r4, r2
    feee:	4698      	mov	r8, r3
    fef0:	e5ee      	b.n	fad0 <__aeabi_dsub+0x10c>
    fef2:	000d      	movs	r5, r1
    fef4:	4315      	orrs	r5, r2
    fef6:	d100      	bne.n	fefa <__aeabi_dsub+0x536>
    fef8:	e76b      	b.n	fdd2 <__aeabi_dsub+0x40e>
    fefa:	4650      	mov	r0, sl
    fefc:	0767      	lsls	r7, r4, #29
    fefe:	08c0      	lsrs	r0, r0, #3
    ff00:	4307      	orrs	r7, r0
    ff02:	2080      	movs	r0, #128	; 0x80
    ff04:	08e4      	lsrs	r4, r4, #3
    ff06:	0300      	lsls	r0, r0, #12
    ff08:	4204      	tst	r4, r0
    ff0a:	d007      	beq.n	ff1c <__aeabi_dsub+0x558>
    ff0c:	08cd      	lsrs	r5, r1, #3
    ff0e:	4205      	tst	r5, r0
    ff10:	d104      	bne.n	ff1c <__aeabi_dsub+0x558>
    ff12:	002c      	movs	r4, r5
    ff14:	4698      	mov	r8, r3
    ff16:	08d7      	lsrs	r7, r2, #3
    ff18:	0749      	lsls	r1, r1, #29
    ff1a:	430f      	orrs	r7, r1
    ff1c:	0f7b      	lsrs	r3, r7, #29
    ff1e:	00e4      	lsls	r4, r4, #3
    ff20:	431c      	orrs	r4, r3
    ff22:	00ff      	lsls	r7, r7, #3
    ff24:	4e30      	ldr	r6, [pc, #192]	; (ffe8 <__aeabi_dsub+0x624>)
    ff26:	e5d3      	b.n	fad0 <__aeabi_dsub+0x10c>
    ff28:	4e2f      	ldr	r6, [pc, #188]	; (ffe8 <__aeabi_dsub+0x624>)
    ff2a:	45b4      	cmp	ip, r6
    ff2c:	d1b4      	bne.n	fe98 <__aeabi_dsub+0x4d4>
    ff2e:	000c      	movs	r4, r1
    ff30:	0017      	movs	r7, r2
    ff32:	4666      	mov	r6, ip
    ff34:	e5cc      	b.n	fad0 <__aeabi_dsub+0x10c>
    ff36:	2700      	movs	r7, #0
    ff38:	2400      	movs	r4, #0
    ff3a:	e5e8      	b.n	fb0e <__aeabi_dsub+0x14a>
    ff3c:	2b00      	cmp	r3, #0
    ff3e:	d039      	beq.n	ffb4 <__aeabi_dsub+0x5f0>
    ff40:	000b      	movs	r3, r1
    ff42:	4313      	orrs	r3, r2
    ff44:	d100      	bne.n	ff48 <__aeabi_dsub+0x584>
    ff46:	e744      	b.n	fdd2 <__aeabi_dsub+0x40e>
    ff48:	08c0      	lsrs	r0, r0, #3
    ff4a:	0767      	lsls	r7, r4, #29
    ff4c:	4307      	orrs	r7, r0
    ff4e:	2080      	movs	r0, #128	; 0x80
    ff50:	08e4      	lsrs	r4, r4, #3
    ff52:	0300      	lsls	r0, r0, #12
    ff54:	4204      	tst	r4, r0
    ff56:	d0e1      	beq.n	ff1c <__aeabi_dsub+0x558>
    ff58:	08cb      	lsrs	r3, r1, #3
    ff5a:	4203      	tst	r3, r0
    ff5c:	d1de      	bne.n	ff1c <__aeabi_dsub+0x558>
    ff5e:	08d7      	lsrs	r7, r2, #3
    ff60:	0749      	lsls	r1, r1, #29
    ff62:	430f      	orrs	r7, r1
    ff64:	001c      	movs	r4, r3
    ff66:	e7d9      	b.n	ff1c <__aeabi_dsub+0x558>
    ff68:	2100      	movs	r1, #0
    ff6a:	e771      	b.n	fe50 <__aeabi_dsub+0x48c>
    ff6c:	2500      	movs	r5, #0
    ff6e:	2700      	movs	r7, #0
    ff70:	e5e9      	b.n	fb46 <__aeabi_dsub+0x182>
    ff72:	002e      	movs	r6, r5
    ff74:	0027      	movs	r7, r4
    ff76:	3e20      	subs	r6, #32
    ff78:	40f7      	lsrs	r7, r6
    ff7a:	2d20      	cmp	r5, #32
    ff7c:	d02f      	beq.n	ffde <__aeabi_dsub+0x61a>
    ff7e:	2640      	movs	r6, #64	; 0x40
    ff80:	1b75      	subs	r5, r6, r5
    ff82:	40ac      	lsls	r4, r5
    ff84:	4650      	mov	r0, sl
    ff86:	4320      	orrs	r0, r4
    ff88:	1e44      	subs	r4, r0, #1
    ff8a:	41a0      	sbcs	r0, r4
    ff8c:	2400      	movs	r4, #0
    ff8e:	4338      	orrs	r0, r7
    ff90:	e6dc      	b.n	fd4c <__aeabi_dsub+0x388>
    ff92:	2480      	movs	r4, #128	; 0x80
    ff94:	2500      	movs	r5, #0
    ff96:	0324      	lsls	r4, r4, #12
    ff98:	4e13      	ldr	r6, [pc, #76]	; (ffe8 <__aeabi_dsub+0x624>)
    ff9a:	2700      	movs	r7, #0
    ff9c:	e5d3      	b.n	fb46 <__aeabi_dsub+0x182>
    ff9e:	4650      	mov	r0, sl
    ffa0:	4320      	orrs	r0, r4
    ffa2:	0007      	movs	r7, r0
    ffa4:	1e78      	subs	r0, r7, #1
    ffa6:	4187      	sbcs	r7, r0
    ffa8:	2400      	movs	r4, #0
    ffaa:	18bf      	adds	r7, r7, r2
    ffac:	e760      	b.n	fe70 <__aeabi_dsub+0x4ac>
    ffae:	000c      	movs	r4, r1
    ffb0:	0017      	movs	r7, r2
    ffb2:	e58d      	b.n	fad0 <__aeabi_dsub+0x10c>
    ffb4:	000c      	movs	r4, r1
    ffb6:	0017      	movs	r7, r2
    ffb8:	4e0b      	ldr	r6, [pc, #44]	; (ffe8 <__aeabi_dsub+0x624>)
    ffba:	e589      	b.n	fad0 <__aeabi_dsub+0x10c>
    ffbc:	001e      	movs	r6, r3
    ffbe:	0027      	movs	r7, r4
    ffc0:	3e20      	subs	r6, #32
    ffc2:	40f7      	lsrs	r7, r6
    ffc4:	2b20      	cmp	r3, #32
    ffc6:	d00c      	beq.n	ffe2 <__aeabi_dsub+0x61e>
    ffc8:	2640      	movs	r6, #64	; 0x40
    ffca:	1af3      	subs	r3, r6, r3
    ffcc:	409c      	lsls	r4, r3
    ffce:	4650      	mov	r0, sl
    ffd0:	4320      	orrs	r0, r4
    ffd2:	1e44      	subs	r4, r0, #1
    ffd4:	41a0      	sbcs	r0, r4
    ffd6:	4307      	orrs	r7, r0
    ffd8:	2400      	movs	r4, #0
    ffda:	18bf      	adds	r7, r7, r2
    ffdc:	e748      	b.n	fe70 <__aeabi_dsub+0x4ac>
    ffde:	2400      	movs	r4, #0
    ffe0:	e7d0      	b.n	ff84 <__aeabi_dsub+0x5c0>
    ffe2:	2400      	movs	r4, #0
    ffe4:	e7f3      	b.n	ffce <__aeabi_dsub+0x60a>
    ffe6:	46c0      	nop			; (mov r8, r8)
    ffe8:	000007ff 	.word	0x000007ff
    ffec:	ff7fffff 	.word	0xff7fffff

0000fff0 <__aeabi_d2iz>:
    fff0:	b530      	push	{r4, r5, lr}
    fff2:	4d13      	ldr	r5, [pc, #76]	; (10040 <__aeabi_d2iz+0x50>)
    fff4:	030a      	lsls	r2, r1, #12
    fff6:	004b      	lsls	r3, r1, #1
    fff8:	0b12      	lsrs	r2, r2, #12
    fffa:	0d5b      	lsrs	r3, r3, #21
    fffc:	0fc9      	lsrs	r1, r1, #31
    fffe:	2400      	movs	r4, #0
   10000:	42ab      	cmp	r3, r5
   10002:	dd10      	ble.n	10026 <__aeabi_d2iz+0x36>
   10004:	4c0f      	ldr	r4, [pc, #60]	; (10044 <__aeabi_d2iz+0x54>)
   10006:	42a3      	cmp	r3, r4
   10008:	dc0f      	bgt.n	1002a <__aeabi_d2iz+0x3a>
   1000a:	2480      	movs	r4, #128	; 0x80
   1000c:	4d0e      	ldr	r5, [pc, #56]	; (10048 <__aeabi_d2iz+0x58>)
   1000e:	0364      	lsls	r4, r4, #13
   10010:	4322      	orrs	r2, r4
   10012:	1aed      	subs	r5, r5, r3
   10014:	2d1f      	cmp	r5, #31
   10016:	dd0b      	ble.n	10030 <__aeabi_d2iz+0x40>
   10018:	480c      	ldr	r0, [pc, #48]	; (1004c <__aeabi_d2iz+0x5c>)
   1001a:	1ac3      	subs	r3, r0, r3
   1001c:	40da      	lsrs	r2, r3
   1001e:	4254      	negs	r4, r2
   10020:	2900      	cmp	r1, #0
   10022:	d100      	bne.n	10026 <__aeabi_d2iz+0x36>
   10024:	0014      	movs	r4, r2
   10026:	0020      	movs	r0, r4
   10028:	bd30      	pop	{r4, r5, pc}
   1002a:	4b09      	ldr	r3, [pc, #36]	; (10050 <__aeabi_d2iz+0x60>)
   1002c:	18cc      	adds	r4, r1, r3
   1002e:	e7fa      	b.n	10026 <__aeabi_d2iz+0x36>
   10030:	4c08      	ldr	r4, [pc, #32]	; (10054 <__aeabi_d2iz+0x64>)
   10032:	40e8      	lsrs	r0, r5
   10034:	46a4      	mov	ip, r4
   10036:	4463      	add	r3, ip
   10038:	409a      	lsls	r2, r3
   1003a:	4302      	orrs	r2, r0
   1003c:	e7ef      	b.n	1001e <__aeabi_d2iz+0x2e>
   1003e:	46c0      	nop			; (mov r8, r8)
   10040:	000003fe 	.word	0x000003fe
   10044:	0000041d 	.word	0x0000041d
   10048:	00000433 	.word	0x00000433
   1004c:	00000413 	.word	0x00000413
   10050:	7fffffff 	.word	0x7fffffff
   10054:	fffffbed 	.word	0xfffffbed

00010058 <__aeabi_ui2d>:
   10058:	b510      	push	{r4, lr}
   1005a:	1e04      	subs	r4, r0, #0
   1005c:	d028      	beq.n	100b0 <__aeabi_ui2d+0x58>
   1005e:	f000 f833 	bl	100c8 <__clzsi2>
   10062:	4b15      	ldr	r3, [pc, #84]	; (100b8 <__aeabi_ui2d+0x60>)
   10064:	4a15      	ldr	r2, [pc, #84]	; (100bc <__aeabi_ui2d+0x64>)
   10066:	1a1b      	subs	r3, r3, r0
   10068:	1ad2      	subs	r2, r2, r3
   1006a:	2a1f      	cmp	r2, #31
   1006c:	dd15      	ble.n	1009a <__aeabi_ui2d+0x42>
   1006e:	4a14      	ldr	r2, [pc, #80]	; (100c0 <__aeabi_ui2d+0x68>)
   10070:	1ad2      	subs	r2, r2, r3
   10072:	4094      	lsls	r4, r2
   10074:	2200      	movs	r2, #0
   10076:	0324      	lsls	r4, r4, #12
   10078:	055b      	lsls	r3, r3, #21
   1007a:	0b24      	lsrs	r4, r4, #12
   1007c:	0d5b      	lsrs	r3, r3, #21
   1007e:	2100      	movs	r1, #0
   10080:	0010      	movs	r0, r2
   10082:	0324      	lsls	r4, r4, #12
   10084:	0d0a      	lsrs	r2, r1, #20
   10086:	0b24      	lsrs	r4, r4, #12
   10088:	0512      	lsls	r2, r2, #20
   1008a:	4322      	orrs	r2, r4
   1008c:	4c0d      	ldr	r4, [pc, #52]	; (100c4 <__aeabi_ui2d+0x6c>)
   1008e:	051b      	lsls	r3, r3, #20
   10090:	4022      	ands	r2, r4
   10092:	4313      	orrs	r3, r2
   10094:	005b      	lsls	r3, r3, #1
   10096:	0859      	lsrs	r1, r3, #1
   10098:	bd10      	pop	{r4, pc}
   1009a:	0021      	movs	r1, r4
   1009c:	4091      	lsls	r1, r2
   1009e:	000a      	movs	r2, r1
   100a0:	210b      	movs	r1, #11
   100a2:	1a08      	subs	r0, r1, r0
   100a4:	40c4      	lsrs	r4, r0
   100a6:	055b      	lsls	r3, r3, #21
   100a8:	0324      	lsls	r4, r4, #12
   100aa:	0b24      	lsrs	r4, r4, #12
   100ac:	0d5b      	lsrs	r3, r3, #21
   100ae:	e7e6      	b.n	1007e <__aeabi_ui2d+0x26>
   100b0:	2300      	movs	r3, #0
   100b2:	2400      	movs	r4, #0
   100b4:	2200      	movs	r2, #0
   100b6:	e7e2      	b.n	1007e <__aeabi_ui2d+0x26>
   100b8:	0000041e 	.word	0x0000041e
   100bc:	00000433 	.word	0x00000433
   100c0:	00000413 	.word	0x00000413
   100c4:	800fffff 	.word	0x800fffff

000100c8 <__clzsi2>:
   100c8:	211c      	movs	r1, #28
   100ca:	2301      	movs	r3, #1
   100cc:	041b      	lsls	r3, r3, #16
   100ce:	4298      	cmp	r0, r3
   100d0:	d301      	bcc.n	100d6 <__clzsi2+0xe>
   100d2:	0c00      	lsrs	r0, r0, #16
   100d4:	3910      	subs	r1, #16
   100d6:	0a1b      	lsrs	r3, r3, #8
   100d8:	4298      	cmp	r0, r3
   100da:	d301      	bcc.n	100e0 <__clzsi2+0x18>
   100dc:	0a00      	lsrs	r0, r0, #8
   100de:	3908      	subs	r1, #8
   100e0:	091b      	lsrs	r3, r3, #4
   100e2:	4298      	cmp	r0, r3
   100e4:	d301      	bcc.n	100ea <__clzsi2+0x22>
   100e6:	0900      	lsrs	r0, r0, #4
   100e8:	3904      	subs	r1, #4
   100ea:	a202      	add	r2, pc, #8	; (adr r2, 100f4 <__clzsi2+0x2c>)
   100ec:	5c10      	ldrb	r0, [r2, r0]
   100ee:	1840      	adds	r0, r0, r1
   100f0:	4770      	bx	lr
   100f2:	46c0      	nop			; (mov r8, r8)
   100f4:	02020304 	.word	0x02020304
   100f8:	01010101 	.word	0x01010101
	...

00010104 <atoi>:
   10104:	b510      	push	{r4, lr}
   10106:	220a      	movs	r2, #10
   10108:	2100      	movs	r1, #0
   1010a:	f000 fb6d 	bl	107e8 <strtol>
   1010e:	bd10      	pop	{r4, pc}

00010110 <__libc_init_array>:
   10110:	b570      	push	{r4, r5, r6, lr}
   10112:	2600      	movs	r6, #0
   10114:	4d0c      	ldr	r5, [pc, #48]	; (10148 <__libc_init_array+0x38>)
   10116:	4c0d      	ldr	r4, [pc, #52]	; (1014c <__libc_init_array+0x3c>)
   10118:	1b64      	subs	r4, r4, r5
   1011a:	10a4      	asrs	r4, r4, #2
   1011c:	42a6      	cmp	r6, r4
   1011e:	d109      	bne.n	10134 <__libc_init_array+0x24>
   10120:	2600      	movs	r6, #0
   10122:	f003 fe09 	bl	13d38 <_init>
   10126:	4d0a      	ldr	r5, [pc, #40]	; (10150 <__libc_init_array+0x40>)
   10128:	4c0a      	ldr	r4, [pc, #40]	; (10154 <__libc_init_array+0x44>)
   1012a:	1b64      	subs	r4, r4, r5
   1012c:	10a4      	asrs	r4, r4, #2
   1012e:	42a6      	cmp	r6, r4
   10130:	d105      	bne.n	1013e <__libc_init_array+0x2e>
   10132:	bd70      	pop	{r4, r5, r6, pc}
   10134:	00b3      	lsls	r3, r6, #2
   10136:	58eb      	ldr	r3, [r5, r3]
   10138:	4798      	blx	r3
   1013a:	3601      	adds	r6, #1
   1013c:	e7ee      	b.n	1011c <__libc_init_array+0xc>
   1013e:	00b3      	lsls	r3, r6, #2
   10140:	58eb      	ldr	r3, [r5, r3]
   10142:	4798      	blx	r3
   10144:	3601      	adds	r6, #1
   10146:	e7f2      	b.n	1012e <__libc_init_array+0x1e>
   10148:	00013d44 	.word	0x00013d44
   1014c:	00013d44 	.word	0x00013d44
   10150:	00013d44 	.word	0x00013d44
   10154:	00013d48 	.word	0x00013d48

00010158 <malloc>:
   10158:	b510      	push	{r4, lr}
   1015a:	4b03      	ldr	r3, [pc, #12]	; (10168 <malloc+0x10>)
   1015c:	0001      	movs	r1, r0
   1015e:	6818      	ldr	r0, [r3, #0]
   10160:	f000 f87c 	bl	1025c <_malloc_r>
   10164:	bd10      	pop	{r4, pc}
   10166:	46c0      	nop			; (mov r8, r8)
   10168:	2000000c 	.word	0x2000000c

0001016c <free>:
   1016c:	b510      	push	{r4, lr}
   1016e:	4b03      	ldr	r3, [pc, #12]	; (1017c <free+0x10>)
   10170:	0001      	movs	r1, r0
   10172:	6818      	ldr	r0, [r3, #0]
   10174:	f000 f828 	bl	101c8 <_free_r>
   10178:	bd10      	pop	{r4, pc}
   1017a:	46c0      	nop			; (mov r8, r8)
   1017c:	2000000c 	.word	0x2000000c

00010180 <memcpy>:
   10180:	2300      	movs	r3, #0
   10182:	b510      	push	{r4, lr}
   10184:	429a      	cmp	r2, r3
   10186:	d100      	bne.n	1018a <memcpy+0xa>
   10188:	bd10      	pop	{r4, pc}
   1018a:	5ccc      	ldrb	r4, [r1, r3]
   1018c:	54c4      	strb	r4, [r0, r3]
   1018e:	3301      	adds	r3, #1
   10190:	e7f8      	b.n	10184 <memcpy+0x4>

00010192 <memmove>:
   10192:	b510      	push	{r4, lr}
   10194:	4288      	cmp	r0, r1
   10196:	d902      	bls.n	1019e <memmove+0xc>
   10198:	188b      	adds	r3, r1, r2
   1019a:	4298      	cmp	r0, r3
   1019c:	d308      	bcc.n	101b0 <memmove+0x1e>
   1019e:	2300      	movs	r3, #0
   101a0:	429a      	cmp	r2, r3
   101a2:	d007      	beq.n	101b4 <memmove+0x22>
   101a4:	5ccc      	ldrb	r4, [r1, r3]
   101a6:	54c4      	strb	r4, [r0, r3]
   101a8:	3301      	adds	r3, #1
   101aa:	e7f9      	b.n	101a0 <memmove+0xe>
   101ac:	5c8b      	ldrb	r3, [r1, r2]
   101ae:	5483      	strb	r3, [r0, r2]
   101b0:	3a01      	subs	r2, #1
   101b2:	d2fb      	bcs.n	101ac <memmove+0x1a>
   101b4:	bd10      	pop	{r4, pc}

000101b6 <memset>:
   101b6:	0003      	movs	r3, r0
   101b8:	1882      	adds	r2, r0, r2
   101ba:	4293      	cmp	r3, r2
   101bc:	d100      	bne.n	101c0 <memset+0xa>
   101be:	4770      	bx	lr
   101c0:	7019      	strb	r1, [r3, #0]
   101c2:	3301      	adds	r3, #1
   101c4:	e7f9      	b.n	101ba <memset+0x4>
	...

000101c8 <_free_r>:
   101c8:	b570      	push	{r4, r5, r6, lr}
   101ca:	0005      	movs	r5, r0
   101cc:	2900      	cmp	r1, #0
   101ce:	d010      	beq.n	101f2 <_free_r+0x2a>
   101d0:	1f0c      	subs	r4, r1, #4
   101d2:	6823      	ldr	r3, [r4, #0]
   101d4:	2b00      	cmp	r3, #0
   101d6:	da00      	bge.n	101da <_free_r+0x12>
   101d8:	18e4      	adds	r4, r4, r3
   101da:	0028      	movs	r0, r5
   101dc:	f000 fdf2 	bl	10dc4 <__malloc_lock>
   101e0:	4a1d      	ldr	r2, [pc, #116]	; (10258 <_free_r+0x90>)
   101e2:	6813      	ldr	r3, [r2, #0]
   101e4:	2b00      	cmp	r3, #0
   101e6:	d105      	bne.n	101f4 <_free_r+0x2c>
   101e8:	6063      	str	r3, [r4, #4]
   101ea:	6014      	str	r4, [r2, #0]
   101ec:	0028      	movs	r0, r5
   101ee:	f000 fdea 	bl	10dc6 <__malloc_unlock>
   101f2:	bd70      	pop	{r4, r5, r6, pc}
   101f4:	42a3      	cmp	r3, r4
   101f6:	d909      	bls.n	1020c <_free_r+0x44>
   101f8:	6821      	ldr	r1, [r4, #0]
   101fa:	1860      	adds	r0, r4, r1
   101fc:	4283      	cmp	r3, r0
   101fe:	d1f3      	bne.n	101e8 <_free_r+0x20>
   10200:	6818      	ldr	r0, [r3, #0]
   10202:	685b      	ldr	r3, [r3, #4]
   10204:	1841      	adds	r1, r0, r1
   10206:	6021      	str	r1, [r4, #0]
   10208:	e7ee      	b.n	101e8 <_free_r+0x20>
   1020a:	0013      	movs	r3, r2
   1020c:	685a      	ldr	r2, [r3, #4]
   1020e:	2a00      	cmp	r2, #0
   10210:	d001      	beq.n	10216 <_free_r+0x4e>
   10212:	42a2      	cmp	r2, r4
   10214:	d9f9      	bls.n	1020a <_free_r+0x42>
   10216:	6819      	ldr	r1, [r3, #0]
   10218:	1858      	adds	r0, r3, r1
   1021a:	42a0      	cmp	r0, r4
   1021c:	d10b      	bne.n	10236 <_free_r+0x6e>
   1021e:	6820      	ldr	r0, [r4, #0]
   10220:	1809      	adds	r1, r1, r0
   10222:	1858      	adds	r0, r3, r1
   10224:	6019      	str	r1, [r3, #0]
   10226:	4282      	cmp	r2, r0
   10228:	d1e0      	bne.n	101ec <_free_r+0x24>
   1022a:	6810      	ldr	r0, [r2, #0]
   1022c:	6852      	ldr	r2, [r2, #4]
   1022e:	1841      	adds	r1, r0, r1
   10230:	6019      	str	r1, [r3, #0]
   10232:	605a      	str	r2, [r3, #4]
   10234:	e7da      	b.n	101ec <_free_r+0x24>
   10236:	42a0      	cmp	r0, r4
   10238:	d902      	bls.n	10240 <_free_r+0x78>
   1023a:	230c      	movs	r3, #12
   1023c:	602b      	str	r3, [r5, #0]
   1023e:	e7d5      	b.n	101ec <_free_r+0x24>
   10240:	6821      	ldr	r1, [r4, #0]
   10242:	1860      	adds	r0, r4, r1
   10244:	4282      	cmp	r2, r0
   10246:	d103      	bne.n	10250 <_free_r+0x88>
   10248:	6810      	ldr	r0, [r2, #0]
   1024a:	6852      	ldr	r2, [r2, #4]
   1024c:	1841      	adds	r1, r0, r1
   1024e:	6021      	str	r1, [r4, #0]
   10250:	6062      	str	r2, [r4, #4]
   10252:	605c      	str	r4, [r3, #4]
   10254:	e7ca      	b.n	101ec <_free_r+0x24>
   10256:	46c0      	nop			; (mov r8, r8)
   10258:	200002b8 	.word	0x200002b8

0001025c <_malloc_r>:
   1025c:	2303      	movs	r3, #3
   1025e:	b570      	push	{r4, r5, r6, lr}
   10260:	1ccd      	adds	r5, r1, #3
   10262:	439d      	bics	r5, r3
   10264:	3508      	adds	r5, #8
   10266:	0006      	movs	r6, r0
   10268:	2d0c      	cmp	r5, #12
   1026a:	d21e      	bcs.n	102aa <_malloc_r+0x4e>
   1026c:	250c      	movs	r5, #12
   1026e:	42a9      	cmp	r1, r5
   10270:	d81d      	bhi.n	102ae <_malloc_r+0x52>
   10272:	0030      	movs	r0, r6
   10274:	f000 fda6 	bl	10dc4 <__malloc_lock>
   10278:	4a25      	ldr	r2, [pc, #148]	; (10310 <_malloc_r+0xb4>)
   1027a:	6814      	ldr	r4, [r2, #0]
   1027c:	0021      	movs	r1, r4
   1027e:	2900      	cmp	r1, #0
   10280:	d119      	bne.n	102b6 <_malloc_r+0x5a>
   10282:	4c24      	ldr	r4, [pc, #144]	; (10314 <_malloc_r+0xb8>)
   10284:	6823      	ldr	r3, [r4, #0]
   10286:	2b00      	cmp	r3, #0
   10288:	d103      	bne.n	10292 <_malloc_r+0x36>
   1028a:	0030      	movs	r0, r6
   1028c:	f000 f8dc 	bl	10448 <_sbrk_r>
   10290:	6020      	str	r0, [r4, #0]
   10292:	0029      	movs	r1, r5
   10294:	0030      	movs	r0, r6
   10296:	f000 f8d7 	bl	10448 <_sbrk_r>
   1029a:	1c43      	adds	r3, r0, #1
   1029c:	d12c      	bne.n	102f8 <_malloc_r+0x9c>
   1029e:	230c      	movs	r3, #12
   102a0:	0030      	movs	r0, r6
   102a2:	6033      	str	r3, [r6, #0]
   102a4:	f000 fd8f 	bl	10dc6 <__malloc_unlock>
   102a8:	e003      	b.n	102b2 <_malloc_r+0x56>
   102aa:	2d00      	cmp	r5, #0
   102ac:	dadf      	bge.n	1026e <_malloc_r+0x12>
   102ae:	230c      	movs	r3, #12
   102b0:	6033      	str	r3, [r6, #0]
   102b2:	2000      	movs	r0, #0
   102b4:	bd70      	pop	{r4, r5, r6, pc}
   102b6:	680b      	ldr	r3, [r1, #0]
   102b8:	1b5b      	subs	r3, r3, r5
   102ba:	d41a      	bmi.n	102f2 <_malloc_r+0x96>
   102bc:	2b0b      	cmp	r3, #11
   102be:	d903      	bls.n	102c8 <_malloc_r+0x6c>
   102c0:	600b      	str	r3, [r1, #0]
   102c2:	18cc      	adds	r4, r1, r3
   102c4:	6025      	str	r5, [r4, #0]
   102c6:	e003      	b.n	102d0 <_malloc_r+0x74>
   102c8:	428c      	cmp	r4, r1
   102ca:	d10e      	bne.n	102ea <_malloc_r+0x8e>
   102cc:	6863      	ldr	r3, [r4, #4]
   102ce:	6013      	str	r3, [r2, #0]
   102d0:	0030      	movs	r0, r6
   102d2:	f000 fd78 	bl	10dc6 <__malloc_unlock>
   102d6:	0020      	movs	r0, r4
   102d8:	2207      	movs	r2, #7
   102da:	300b      	adds	r0, #11
   102dc:	1d23      	adds	r3, r4, #4
   102de:	4390      	bics	r0, r2
   102e0:	1ac3      	subs	r3, r0, r3
   102e2:	d0e7      	beq.n	102b4 <_malloc_r+0x58>
   102e4:	425a      	negs	r2, r3
   102e6:	50e2      	str	r2, [r4, r3]
   102e8:	e7e4      	b.n	102b4 <_malloc_r+0x58>
   102ea:	684b      	ldr	r3, [r1, #4]
   102ec:	6063      	str	r3, [r4, #4]
   102ee:	000c      	movs	r4, r1
   102f0:	e7ee      	b.n	102d0 <_malloc_r+0x74>
   102f2:	000c      	movs	r4, r1
   102f4:	6849      	ldr	r1, [r1, #4]
   102f6:	e7c2      	b.n	1027e <_malloc_r+0x22>
   102f8:	2303      	movs	r3, #3
   102fa:	1cc4      	adds	r4, r0, #3
   102fc:	439c      	bics	r4, r3
   102fe:	42a0      	cmp	r0, r4
   10300:	d0e0      	beq.n	102c4 <_malloc_r+0x68>
   10302:	1a21      	subs	r1, r4, r0
   10304:	0030      	movs	r0, r6
   10306:	f000 f89f 	bl	10448 <_sbrk_r>
   1030a:	1c43      	adds	r3, r0, #1
   1030c:	d1da      	bne.n	102c4 <_malloc_r+0x68>
   1030e:	e7c6      	b.n	1029e <_malloc_r+0x42>
   10310:	200002b8 	.word	0x200002b8
   10314:	200002bc 	.word	0x200002bc

00010318 <iprintf>:
   10318:	b40f      	push	{r0, r1, r2, r3}
   1031a:	4b0b      	ldr	r3, [pc, #44]	; (10348 <iprintf+0x30>)
   1031c:	b513      	push	{r0, r1, r4, lr}
   1031e:	681c      	ldr	r4, [r3, #0]
   10320:	2c00      	cmp	r4, #0
   10322:	d005      	beq.n	10330 <iprintf+0x18>
   10324:	69a3      	ldr	r3, [r4, #24]
   10326:	2b00      	cmp	r3, #0
   10328:	d102      	bne.n	10330 <iprintf+0x18>
   1032a:	0020      	movs	r0, r4
   1032c:	f000 fc34 	bl	10b98 <__sinit>
   10330:	ab05      	add	r3, sp, #20
   10332:	9a04      	ldr	r2, [sp, #16]
   10334:	68a1      	ldr	r1, [r4, #8]
   10336:	0020      	movs	r0, r4
   10338:	9301      	str	r3, [sp, #4]
   1033a:	f000 fed3 	bl	110e4 <_vfiprintf_r>
   1033e:	bc16      	pop	{r1, r2, r4}
   10340:	bc08      	pop	{r3}
   10342:	b004      	add	sp, #16
   10344:	4718      	bx	r3
   10346:	46c0      	nop			; (mov r8, r8)
   10348:	2000000c 	.word	0x2000000c

0001034c <putchar>:
   1034c:	4b08      	ldr	r3, [pc, #32]	; (10370 <putchar+0x24>)
   1034e:	b570      	push	{r4, r5, r6, lr}
   10350:	681c      	ldr	r4, [r3, #0]
   10352:	0005      	movs	r5, r0
   10354:	2c00      	cmp	r4, #0
   10356:	d005      	beq.n	10364 <putchar+0x18>
   10358:	69a3      	ldr	r3, [r4, #24]
   1035a:	2b00      	cmp	r3, #0
   1035c:	d102      	bne.n	10364 <putchar+0x18>
   1035e:	0020      	movs	r0, r4
   10360:	f000 fc1a 	bl	10b98 <__sinit>
   10364:	0029      	movs	r1, r5
   10366:	68a2      	ldr	r2, [r4, #8]
   10368:	0020      	movs	r0, r4
   1036a:	f001 f95f 	bl	1162c <_putc_r>
   1036e:	bd70      	pop	{r4, r5, r6, pc}
   10370:	2000000c 	.word	0x2000000c

00010374 <_puts_r>:
   10374:	b570      	push	{r4, r5, r6, lr}
   10376:	0005      	movs	r5, r0
   10378:	000e      	movs	r6, r1
   1037a:	2800      	cmp	r0, #0
   1037c:	d004      	beq.n	10388 <_puts_r+0x14>
   1037e:	6983      	ldr	r3, [r0, #24]
   10380:	2b00      	cmp	r3, #0
   10382:	d101      	bne.n	10388 <_puts_r+0x14>
   10384:	f000 fc08 	bl	10b98 <__sinit>
   10388:	69ab      	ldr	r3, [r5, #24]
   1038a:	68ac      	ldr	r4, [r5, #8]
   1038c:	2b00      	cmp	r3, #0
   1038e:	d102      	bne.n	10396 <_puts_r+0x22>
   10390:	0028      	movs	r0, r5
   10392:	f000 fc01 	bl	10b98 <__sinit>
   10396:	4b24      	ldr	r3, [pc, #144]	; (10428 <_puts_r+0xb4>)
   10398:	429c      	cmp	r4, r3
   1039a:	d10f      	bne.n	103bc <_puts_r+0x48>
   1039c:	686c      	ldr	r4, [r5, #4]
   1039e:	89a3      	ldrh	r3, [r4, #12]
   103a0:	071b      	lsls	r3, r3, #28
   103a2:	d502      	bpl.n	103aa <_puts_r+0x36>
   103a4:	6923      	ldr	r3, [r4, #16]
   103a6:	2b00      	cmp	r3, #0
   103a8:	d120      	bne.n	103ec <_puts_r+0x78>
   103aa:	0021      	movs	r1, r4
   103ac:	0028      	movs	r0, r5
   103ae:	f000 fa85 	bl	108bc <__swsetup_r>
   103b2:	2800      	cmp	r0, #0
   103b4:	d01a      	beq.n	103ec <_puts_r+0x78>
   103b6:	2001      	movs	r0, #1
   103b8:	4240      	negs	r0, r0
   103ba:	bd70      	pop	{r4, r5, r6, pc}
   103bc:	4b1b      	ldr	r3, [pc, #108]	; (1042c <_puts_r+0xb8>)
   103be:	429c      	cmp	r4, r3
   103c0:	d101      	bne.n	103c6 <_puts_r+0x52>
   103c2:	68ac      	ldr	r4, [r5, #8]
   103c4:	e7eb      	b.n	1039e <_puts_r+0x2a>
   103c6:	4b1a      	ldr	r3, [pc, #104]	; (10430 <_puts_r+0xbc>)
   103c8:	429c      	cmp	r4, r3
   103ca:	d1e8      	bne.n	1039e <_puts_r+0x2a>
   103cc:	68ec      	ldr	r4, [r5, #12]
   103ce:	e7e6      	b.n	1039e <_puts_r+0x2a>
   103d0:	3b01      	subs	r3, #1
   103d2:	3601      	adds	r6, #1
   103d4:	60a3      	str	r3, [r4, #8]
   103d6:	2b00      	cmp	r3, #0
   103d8:	da04      	bge.n	103e4 <_puts_r+0x70>
   103da:	69a2      	ldr	r2, [r4, #24]
   103dc:	4293      	cmp	r3, r2
   103de:	db16      	blt.n	1040e <_puts_r+0x9a>
   103e0:	290a      	cmp	r1, #10
   103e2:	d014      	beq.n	1040e <_puts_r+0x9a>
   103e4:	6823      	ldr	r3, [r4, #0]
   103e6:	1c5a      	adds	r2, r3, #1
   103e8:	6022      	str	r2, [r4, #0]
   103ea:	7019      	strb	r1, [r3, #0]
   103ec:	7831      	ldrb	r1, [r6, #0]
   103ee:	68a3      	ldr	r3, [r4, #8]
   103f0:	2900      	cmp	r1, #0
   103f2:	d1ed      	bne.n	103d0 <_puts_r+0x5c>
   103f4:	3b01      	subs	r3, #1
   103f6:	60a3      	str	r3, [r4, #8]
   103f8:	2b00      	cmp	r3, #0
   103fa:	da0f      	bge.n	1041c <_puts_r+0xa8>
   103fc:	0022      	movs	r2, r4
   103fe:	310a      	adds	r1, #10
   10400:	0028      	movs	r0, r5
   10402:	f000 fa05 	bl	10810 <__swbuf_r>
   10406:	1c43      	adds	r3, r0, #1
   10408:	d0d5      	beq.n	103b6 <_puts_r+0x42>
   1040a:	200a      	movs	r0, #10
   1040c:	e7d5      	b.n	103ba <_puts_r+0x46>
   1040e:	0022      	movs	r2, r4
   10410:	0028      	movs	r0, r5
   10412:	f000 f9fd 	bl	10810 <__swbuf_r>
   10416:	1c43      	adds	r3, r0, #1
   10418:	d1e8      	bne.n	103ec <_puts_r+0x78>
   1041a:	e7cc      	b.n	103b6 <_puts_r+0x42>
   1041c:	200a      	movs	r0, #10
   1041e:	6823      	ldr	r3, [r4, #0]
   10420:	1c5a      	adds	r2, r3, #1
   10422:	6022      	str	r2, [r4, #0]
   10424:	7018      	strb	r0, [r3, #0]
   10426:	e7c8      	b.n	103ba <_puts_r+0x46>
   10428:	00013bb8 	.word	0x00013bb8
   1042c:	00013bd8 	.word	0x00013bd8
   10430:	00013b98 	.word	0x00013b98

00010434 <puts>:
   10434:	b510      	push	{r4, lr}
   10436:	4b03      	ldr	r3, [pc, #12]	; (10444 <puts+0x10>)
   10438:	0001      	movs	r1, r0
   1043a:	6818      	ldr	r0, [r3, #0]
   1043c:	f7ff ff9a 	bl	10374 <_puts_r>
   10440:	bd10      	pop	{r4, pc}
   10442:	46c0      	nop			; (mov r8, r8)
   10444:	2000000c 	.word	0x2000000c

00010448 <_sbrk_r>:
   10448:	2300      	movs	r3, #0
   1044a:	b570      	push	{r4, r5, r6, lr}
   1044c:	4c06      	ldr	r4, [pc, #24]	; (10468 <_sbrk_r+0x20>)
   1044e:	0005      	movs	r5, r0
   10450:	0008      	movs	r0, r1
   10452:	6023      	str	r3, [r4, #0]
   10454:	f7fd f862 	bl	d51c <_sbrk>
   10458:	1c43      	adds	r3, r0, #1
   1045a:	d103      	bne.n	10464 <_sbrk_r+0x1c>
   1045c:	6823      	ldr	r3, [r4, #0]
   1045e:	2b00      	cmp	r3, #0
   10460:	d000      	beq.n	10464 <_sbrk_r+0x1c>
   10462:	602b      	str	r3, [r5, #0]
   10464:	bd70      	pop	{r4, r5, r6, pc}
   10466:	46c0      	nop			; (mov r8, r8)
   10468:	20000a20 	.word	0x20000a20

0001046c <setbuf>:
   1046c:	424a      	negs	r2, r1
   1046e:	414a      	adcs	r2, r1
   10470:	2380      	movs	r3, #128	; 0x80
   10472:	b510      	push	{r4, lr}
   10474:	0052      	lsls	r2, r2, #1
   10476:	00db      	lsls	r3, r3, #3
   10478:	f000 f802 	bl	10480 <setvbuf>
   1047c:	bd10      	pop	{r4, pc}
	...

00010480 <setvbuf>:
   10480:	b5f0      	push	{r4, r5, r6, r7, lr}
   10482:	001d      	movs	r5, r3
   10484:	4b4f      	ldr	r3, [pc, #316]	; (105c4 <setvbuf+0x144>)
   10486:	b085      	sub	sp, #20
   10488:	681e      	ldr	r6, [r3, #0]
   1048a:	0004      	movs	r4, r0
   1048c:	000f      	movs	r7, r1
   1048e:	9200      	str	r2, [sp, #0]
   10490:	2e00      	cmp	r6, #0
   10492:	d005      	beq.n	104a0 <setvbuf+0x20>
   10494:	69b3      	ldr	r3, [r6, #24]
   10496:	2b00      	cmp	r3, #0
   10498:	d102      	bne.n	104a0 <setvbuf+0x20>
   1049a:	0030      	movs	r0, r6
   1049c:	f000 fb7c 	bl	10b98 <__sinit>
   104a0:	4b49      	ldr	r3, [pc, #292]	; (105c8 <setvbuf+0x148>)
   104a2:	429c      	cmp	r4, r3
   104a4:	d150      	bne.n	10548 <setvbuf+0xc8>
   104a6:	6874      	ldr	r4, [r6, #4]
   104a8:	9b00      	ldr	r3, [sp, #0]
   104aa:	2b02      	cmp	r3, #2
   104ac:	d005      	beq.n	104ba <setvbuf+0x3a>
   104ae:	2b01      	cmp	r3, #1
   104b0:	d900      	bls.n	104b4 <setvbuf+0x34>
   104b2:	e084      	b.n	105be <setvbuf+0x13e>
   104b4:	2d00      	cmp	r5, #0
   104b6:	da00      	bge.n	104ba <setvbuf+0x3a>
   104b8:	e081      	b.n	105be <setvbuf+0x13e>
   104ba:	0021      	movs	r1, r4
   104bc:	0030      	movs	r0, r6
   104be:	f000 fafd 	bl	10abc <_fflush_r>
   104c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   104c4:	2900      	cmp	r1, #0
   104c6:	d008      	beq.n	104da <setvbuf+0x5a>
   104c8:	0023      	movs	r3, r4
   104ca:	3344      	adds	r3, #68	; 0x44
   104cc:	4299      	cmp	r1, r3
   104ce:	d002      	beq.n	104d6 <setvbuf+0x56>
   104d0:	0030      	movs	r0, r6
   104d2:	f7ff fe79 	bl	101c8 <_free_r>
   104d6:	2300      	movs	r3, #0
   104d8:	6363      	str	r3, [r4, #52]	; 0x34
   104da:	2300      	movs	r3, #0
   104dc:	61a3      	str	r3, [r4, #24]
   104de:	6063      	str	r3, [r4, #4]
   104e0:	89a3      	ldrh	r3, [r4, #12]
   104e2:	061b      	lsls	r3, r3, #24
   104e4:	d503      	bpl.n	104ee <setvbuf+0x6e>
   104e6:	6921      	ldr	r1, [r4, #16]
   104e8:	0030      	movs	r0, r6
   104ea:	f7ff fe6d 	bl	101c8 <_free_r>
   104ee:	89a3      	ldrh	r3, [r4, #12]
   104f0:	4a36      	ldr	r2, [pc, #216]	; (105cc <setvbuf+0x14c>)
   104f2:	4013      	ands	r3, r2
   104f4:	81a3      	strh	r3, [r4, #12]
   104f6:	9b00      	ldr	r3, [sp, #0]
   104f8:	2b02      	cmp	r3, #2
   104fa:	d05a      	beq.n	105b2 <setvbuf+0x132>
   104fc:	ab03      	add	r3, sp, #12
   104fe:	aa02      	add	r2, sp, #8
   10500:	0021      	movs	r1, r4
   10502:	0030      	movs	r0, r6
   10504:	f000 fbe0 	bl	10cc8 <__swhatbuf_r>
   10508:	89a3      	ldrh	r3, [r4, #12]
   1050a:	4318      	orrs	r0, r3
   1050c:	81a0      	strh	r0, [r4, #12]
   1050e:	2d00      	cmp	r5, #0
   10510:	d124      	bne.n	1055c <setvbuf+0xdc>
   10512:	9d02      	ldr	r5, [sp, #8]
   10514:	0028      	movs	r0, r5
   10516:	f7ff fe1f 	bl	10158 <malloc>
   1051a:	9501      	str	r5, [sp, #4]
   1051c:	1e07      	subs	r7, r0, #0
   1051e:	d142      	bne.n	105a6 <setvbuf+0x126>
   10520:	9b02      	ldr	r3, [sp, #8]
   10522:	9301      	str	r3, [sp, #4]
   10524:	42ab      	cmp	r3, r5
   10526:	d139      	bne.n	1059c <setvbuf+0x11c>
   10528:	2001      	movs	r0, #1
   1052a:	4240      	negs	r0, r0
   1052c:	2302      	movs	r3, #2
   1052e:	89a2      	ldrh	r2, [r4, #12]
   10530:	4313      	orrs	r3, r2
   10532:	81a3      	strh	r3, [r4, #12]
   10534:	2300      	movs	r3, #0
   10536:	60a3      	str	r3, [r4, #8]
   10538:	0023      	movs	r3, r4
   1053a:	3347      	adds	r3, #71	; 0x47
   1053c:	6023      	str	r3, [r4, #0]
   1053e:	6123      	str	r3, [r4, #16]
   10540:	2301      	movs	r3, #1
   10542:	6163      	str	r3, [r4, #20]
   10544:	b005      	add	sp, #20
   10546:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10548:	4b21      	ldr	r3, [pc, #132]	; (105d0 <setvbuf+0x150>)
   1054a:	429c      	cmp	r4, r3
   1054c:	d101      	bne.n	10552 <setvbuf+0xd2>
   1054e:	68b4      	ldr	r4, [r6, #8]
   10550:	e7aa      	b.n	104a8 <setvbuf+0x28>
   10552:	4b20      	ldr	r3, [pc, #128]	; (105d4 <setvbuf+0x154>)
   10554:	429c      	cmp	r4, r3
   10556:	d1a7      	bne.n	104a8 <setvbuf+0x28>
   10558:	68f4      	ldr	r4, [r6, #12]
   1055a:	e7a5      	b.n	104a8 <setvbuf+0x28>
   1055c:	2f00      	cmp	r7, #0
   1055e:	d0d9      	beq.n	10514 <setvbuf+0x94>
   10560:	69b3      	ldr	r3, [r6, #24]
   10562:	2b00      	cmp	r3, #0
   10564:	d102      	bne.n	1056c <setvbuf+0xec>
   10566:	0030      	movs	r0, r6
   10568:	f000 fb16 	bl	10b98 <__sinit>
   1056c:	9b00      	ldr	r3, [sp, #0]
   1056e:	2b01      	cmp	r3, #1
   10570:	d103      	bne.n	1057a <setvbuf+0xfa>
   10572:	89a3      	ldrh	r3, [r4, #12]
   10574:	9a00      	ldr	r2, [sp, #0]
   10576:	431a      	orrs	r2, r3
   10578:	81a2      	strh	r2, [r4, #12]
   1057a:	2008      	movs	r0, #8
   1057c:	89a3      	ldrh	r3, [r4, #12]
   1057e:	6027      	str	r7, [r4, #0]
   10580:	6127      	str	r7, [r4, #16]
   10582:	6165      	str	r5, [r4, #20]
   10584:	4018      	ands	r0, r3
   10586:	d018      	beq.n	105ba <setvbuf+0x13a>
   10588:	2001      	movs	r0, #1
   1058a:	4018      	ands	r0, r3
   1058c:	2300      	movs	r3, #0
   1058e:	4298      	cmp	r0, r3
   10590:	d011      	beq.n	105b6 <setvbuf+0x136>
   10592:	426d      	negs	r5, r5
   10594:	60a3      	str	r3, [r4, #8]
   10596:	61a5      	str	r5, [r4, #24]
   10598:	0018      	movs	r0, r3
   1059a:	e7d3      	b.n	10544 <setvbuf+0xc4>
   1059c:	9801      	ldr	r0, [sp, #4]
   1059e:	f7ff fddb 	bl	10158 <malloc>
   105a2:	1e07      	subs	r7, r0, #0
   105a4:	d0c0      	beq.n	10528 <setvbuf+0xa8>
   105a6:	2380      	movs	r3, #128	; 0x80
   105a8:	89a2      	ldrh	r2, [r4, #12]
   105aa:	9d01      	ldr	r5, [sp, #4]
   105ac:	4313      	orrs	r3, r2
   105ae:	81a3      	strh	r3, [r4, #12]
   105b0:	e7d6      	b.n	10560 <setvbuf+0xe0>
   105b2:	2000      	movs	r0, #0
   105b4:	e7ba      	b.n	1052c <setvbuf+0xac>
   105b6:	60a5      	str	r5, [r4, #8]
   105b8:	e7c4      	b.n	10544 <setvbuf+0xc4>
   105ba:	60a0      	str	r0, [r4, #8]
   105bc:	e7c2      	b.n	10544 <setvbuf+0xc4>
   105be:	2001      	movs	r0, #1
   105c0:	4240      	negs	r0, r0
   105c2:	e7bf      	b.n	10544 <setvbuf+0xc4>
   105c4:	2000000c 	.word	0x2000000c
   105c8:	00013bb8 	.word	0x00013bb8
   105cc:	fffff35c 	.word	0xfffff35c
   105d0:	00013bd8 	.word	0x00013bd8
   105d4:	00013b98 	.word	0x00013b98

000105d8 <siprintf>:
   105d8:	b40e      	push	{r1, r2, r3}
   105da:	b510      	push	{r4, lr}
   105dc:	b09d      	sub	sp, #116	; 0x74
   105de:	a902      	add	r1, sp, #8
   105e0:	9002      	str	r0, [sp, #8]
   105e2:	6108      	str	r0, [r1, #16]
   105e4:	480b      	ldr	r0, [pc, #44]	; (10614 <siprintf+0x3c>)
   105e6:	2482      	movs	r4, #130	; 0x82
   105e8:	6088      	str	r0, [r1, #8]
   105ea:	6148      	str	r0, [r1, #20]
   105ec:	2001      	movs	r0, #1
   105ee:	4240      	negs	r0, r0
   105f0:	ab1f      	add	r3, sp, #124	; 0x7c
   105f2:	81c8      	strh	r0, [r1, #14]
   105f4:	4808      	ldr	r0, [pc, #32]	; (10618 <siprintf+0x40>)
   105f6:	cb04      	ldmia	r3!, {r2}
   105f8:	00a4      	lsls	r4, r4, #2
   105fa:	6800      	ldr	r0, [r0, #0]
   105fc:	9301      	str	r3, [sp, #4]
   105fe:	818c      	strh	r4, [r1, #12]
   10600:	f000 fc44 	bl	10e8c <_svfiprintf_r>
   10604:	2300      	movs	r3, #0
   10606:	9a02      	ldr	r2, [sp, #8]
   10608:	7013      	strb	r3, [r2, #0]
   1060a:	b01d      	add	sp, #116	; 0x74
   1060c:	bc10      	pop	{r4}
   1060e:	bc08      	pop	{r3}
   10610:	b003      	add	sp, #12
   10612:	4718      	bx	r3
   10614:	7fffffff 	.word	0x7fffffff
   10618:	2000000c 	.word	0x2000000c

0001061c <strcmp>:
   1061c:	7802      	ldrb	r2, [r0, #0]
   1061e:	780b      	ldrb	r3, [r1, #0]
   10620:	2a00      	cmp	r2, #0
   10622:	d003      	beq.n	1062c <strcmp+0x10>
   10624:	3001      	adds	r0, #1
   10626:	3101      	adds	r1, #1
   10628:	429a      	cmp	r2, r3
   1062a:	d0f7      	beq.n	1061c <strcmp>
   1062c:	1ad0      	subs	r0, r2, r3
   1062e:	4770      	bx	lr

00010630 <strcpy>:
   10630:	1c03      	adds	r3, r0, #0
   10632:	780a      	ldrb	r2, [r1, #0]
   10634:	3101      	adds	r1, #1
   10636:	701a      	strb	r2, [r3, #0]
   10638:	3301      	adds	r3, #1
   1063a:	2a00      	cmp	r2, #0
   1063c:	d1f9      	bne.n	10632 <strcpy+0x2>
   1063e:	4770      	bx	lr

00010640 <strdup>:
   10640:	b510      	push	{r4, lr}
   10642:	4b03      	ldr	r3, [pc, #12]	; (10650 <strdup+0x10>)
   10644:	0001      	movs	r1, r0
   10646:	6818      	ldr	r0, [r3, #0]
   10648:	f000 f804 	bl	10654 <_strdup_r>
   1064c:	bd10      	pop	{r4, pc}
   1064e:	46c0      	nop			; (mov r8, r8)
   10650:	2000000c 	.word	0x2000000c

00010654 <_strdup_r>:
   10654:	b570      	push	{r4, r5, r6, lr}
   10656:	0005      	movs	r5, r0
   10658:	0008      	movs	r0, r1
   1065a:	000e      	movs	r6, r1
   1065c:	f000 f80d 	bl	1067a <strlen>
   10660:	1c44      	adds	r4, r0, #1
   10662:	0021      	movs	r1, r4
   10664:	0028      	movs	r0, r5
   10666:	f7ff fdf9 	bl	1025c <_malloc_r>
   1066a:	1e05      	subs	r5, r0, #0
   1066c:	d003      	beq.n	10676 <_strdup_r+0x22>
   1066e:	0022      	movs	r2, r4
   10670:	0031      	movs	r1, r6
   10672:	f7ff fd85 	bl	10180 <memcpy>
   10676:	0028      	movs	r0, r5
   10678:	bd70      	pop	{r4, r5, r6, pc}

0001067a <strlen>:
   1067a:	2300      	movs	r3, #0
   1067c:	5cc2      	ldrb	r2, [r0, r3]
   1067e:	3301      	adds	r3, #1
   10680:	2a00      	cmp	r2, #0
   10682:	d1fb      	bne.n	1067c <strlen+0x2>
   10684:	1e58      	subs	r0, r3, #1
   10686:	4770      	bx	lr

00010688 <strncmp>:
   10688:	2300      	movs	r3, #0
   1068a:	b530      	push	{r4, r5, lr}
   1068c:	429a      	cmp	r2, r3
   1068e:	d00a      	beq.n	106a6 <strncmp+0x1e>
   10690:	3a01      	subs	r2, #1
   10692:	5cc4      	ldrb	r4, [r0, r3]
   10694:	5ccd      	ldrb	r5, [r1, r3]
   10696:	42ac      	cmp	r4, r5
   10698:	d104      	bne.n	106a4 <strncmp+0x1c>
   1069a:	429a      	cmp	r2, r3
   1069c:	d002      	beq.n	106a4 <strncmp+0x1c>
   1069e:	3301      	adds	r3, #1
   106a0:	2c00      	cmp	r4, #0
   106a2:	d1f6      	bne.n	10692 <strncmp+0xa>
   106a4:	1b63      	subs	r3, r4, r5
   106a6:	0018      	movs	r0, r3
   106a8:	bd30      	pop	{r4, r5, pc}

000106aa <strstr>:
   106aa:	b510      	push	{r4, lr}
   106ac:	0002      	movs	r2, r0
   106ae:	7800      	ldrb	r0, [r0, #0]
   106b0:	2800      	cmp	r0, #0
   106b2:	d104      	bne.n	106be <strstr+0x14>
   106b4:	7809      	ldrb	r1, [r1, #0]
   106b6:	2900      	cmp	r1, #0
   106b8:	d00d      	beq.n	106d6 <strstr+0x2c>
   106ba:	bd10      	pop	{r4, pc}
   106bc:	3201      	adds	r2, #1
   106be:	7810      	ldrb	r0, [r2, #0]
   106c0:	2800      	cmp	r0, #0
   106c2:	d0fa      	beq.n	106ba <strstr+0x10>
   106c4:	2300      	movs	r3, #0
   106c6:	5cc8      	ldrb	r0, [r1, r3]
   106c8:	2800      	cmp	r0, #0
   106ca:	d004      	beq.n	106d6 <strstr+0x2c>
   106cc:	5cd4      	ldrb	r4, [r2, r3]
   106ce:	4284      	cmp	r4, r0
   106d0:	d1f4      	bne.n	106bc <strstr+0x12>
   106d2:	3301      	adds	r3, #1
   106d4:	e7f7      	b.n	106c6 <strstr+0x1c>
   106d6:	0010      	movs	r0, r2
   106d8:	e7ef      	b.n	106ba <strstr+0x10>
	...

000106dc <_strtol_l.isra.0>:
   106dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   106de:	001f      	movs	r7, r3
   106e0:	000e      	movs	r6, r1
   106e2:	b087      	sub	sp, #28
   106e4:	9005      	str	r0, [sp, #20]
   106e6:	9103      	str	r1, [sp, #12]
   106e8:	9202      	str	r2, [sp, #8]
   106ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   106ec:	7834      	ldrb	r4, [r6, #0]
   106ee:	f000 fae8 	bl	10cc2 <__locale_ctype_ptr_l>
   106f2:	2208      	movs	r2, #8
   106f4:	1900      	adds	r0, r0, r4
   106f6:	7843      	ldrb	r3, [r0, #1]
   106f8:	1c75      	adds	r5, r6, #1
   106fa:	4013      	ands	r3, r2
   106fc:	d10c      	bne.n	10718 <_strtol_l.isra.0+0x3c>
   106fe:	2c2d      	cmp	r4, #45	; 0x2d
   10700:	d10c      	bne.n	1071c <_strtol_l.isra.0+0x40>
   10702:	3301      	adds	r3, #1
   10704:	782c      	ldrb	r4, [r5, #0]
   10706:	9301      	str	r3, [sp, #4]
   10708:	1cb5      	adds	r5, r6, #2
   1070a:	2f00      	cmp	r7, #0
   1070c:	d00c      	beq.n	10728 <_strtol_l.isra.0+0x4c>
   1070e:	2f10      	cmp	r7, #16
   10710:	d114      	bne.n	1073c <_strtol_l.isra.0+0x60>
   10712:	2c30      	cmp	r4, #48	; 0x30
   10714:	d00a      	beq.n	1072c <_strtol_l.isra.0+0x50>
   10716:	e011      	b.n	1073c <_strtol_l.isra.0+0x60>
   10718:	002e      	movs	r6, r5
   1071a:	e7e6      	b.n	106ea <_strtol_l.isra.0+0xe>
   1071c:	9301      	str	r3, [sp, #4]
   1071e:	2c2b      	cmp	r4, #43	; 0x2b
   10720:	d1f3      	bne.n	1070a <_strtol_l.isra.0+0x2e>
   10722:	782c      	ldrb	r4, [r5, #0]
   10724:	1cb5      	adds	r5, r6, #2
   10726:	e7f0      	b.n	1070a <_strtol_l.isra.0+0x2e>
   10728:	2c30      	cmp	r4, #48	; 0x30
   1072a:	d12f      	bne.n	1078c <_strtol_l.isra.0+0xb0>
   1072c:	2220      	movs	r2, #32
   1072e:	782b      	ldrb	r3, [r5, #0]
   10730:	4393      	bics	r3, r2
   10732:	2b58      	cmp	r3, #88	; 0x58
   10734:	d151      	bne.n	107da <_strtol_l.isra.0+0xfe>
   10736:	2710      	movs	r7, #16
   10738:	786c      	ldrb	r4, [r5, #1]
   1073a:	3502      	adds	r5, #2
   1073c:	9b01      	ldr	r3, [sp, #4]
   1073e:	4a29      	ldr	r2, [pc, #164]	; (107e4 <_strtol_l.isra.0+0x108>)
   10740:	0039      	movs	r1, r7
   10742:	189e      	adds	r6, r3, r2
   10744:	0030      	movs	r0, r6
   10746:	f7fd ff5f 	bl	e608 <__aeabi_uidivmod>
   1074a:	0030      	movs	r0, r6
   1074c:	9104      	str	r1, [sp, #16]
   1074e:	0039      	movs	r1, r7
   10750:	f7fd fed4 	bl	e4fc <__udivsi3>
   10754:	2101      	movs	r1, #1
   10756:	2300      	movs	r3, #0
   10758:	4249      	negs	r1, r1
   1075a:	0002      	movs	r2, r0
   1075c:	468c      	mov	ip, r1
   1075e:	0018      	movs	r0, r3
   10760:	0021      	movs	r1, r4
   10762:	3930      	subs	r1, #48	; 0x30
   10764:	2909      	cmp	r1, #9
   10766:	d813      	bhi.n	10790 <_strtol_l.isra.0+0xb4>
   10768:	000c      	movs	r4, r1
   1076a:	42a7      	cmp	r7, r4
   1076c:	dd1c      	ble.n	107a8 <_strtol_l.isra.0+0xcc>
   1076e:	1c59      	adds	r1, r3, #1
   10770:	d009      	beq.n	10786 <_strtol_l.isra.0+0xaa>
   10772:	4663      	mov	r3, ip
   10774:	4282      	cmp	r2, r0
   10776:	d306      	bcc.n	10786 <_strtol_l.isra.0+0xaa>
   10778:	d102      	bne.n	10780 <_strtol_l.isra.0+0xa4>
   1077a:	9904      	ldr	r1, [sp, #16]
   1077c:	42a1      	cmp	r1, r4
   1077e:	db02      	blt.n	10786 <_strtol_l.isra.0+0xaa>
   10780:	2301      	movs	r3, #1
   10782:	4378      	muls	r0, r7
   10784:	1820      	adds	r0, r4, r0
   10786:	782c      	ldrb	r4, [r5, #0]
   10788:	3501      	adds	r5, #1
   1078a:	e7e9      	b.n	10760 <_strtol_l.isra.0+0x84>
   1078c:	270a      	movs	r7, #10
   1078e:	e7d5      	b.n	1073c <_strtol_l.isra.0+0x60>
   10790:	0021      	movs	r1, r4
   10792:	3941      	subs	r1, #65	; 0x41
   10794:	2919      	cmp	r1, #25
   10796:	d801      	bhi.n	1079c <_strtol_l.isra.0+0xc0>
   10798:	3c37      	subs	r4, #55	; 0x37
   1079a:	e7e6      	b.n	1076a <_strtol_l.isra.0+0x8e>
   1079c:	0021      	movs	r1, r4
   1079e:	3961      	subs	r1, #97	; 0x61
   107a0:	2919      	cmp	r1, #25
   107a2:	d801      	bhi.n	107a8 <_strtol_l.isra.0+0xcc>
   107a4:	3c57      	subs	r4, #87	; 0x57
   107a6:	e7e0      	b.n	1076a <_strtol_l.isra.0+0x8e>
   107a8:	1c5a      	adds	r2, r3, #1
   107aa:	d108      	bne.n	107be <_strtol_l.isra.0+0xe2>
   107ac:	9a05      	ldr	r2, [sp, #20]
   107ae:	3323      	adds	r3, #35	; 0x23
   107b0:	6013      	str	r3, [r2, #0]
   107b2:	9b02      	ldr	r3, [sp, #8]
   107b4:	0030      	movs	r0, r6
   107b6:	2b00      	cmp	r3, #0
   107b8:	d10b      	bne.n	107d2 <_strtol_l.isra.0+0xf6>
   107ba:	b007      	add	sp, #28
   107bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107be:	9a01      	ldr	r2, [sp, #4]
   107c0:	2a00      	cmp	r2, #0
   107c2:	d000      	beq.n	107c6 <_strtol_l.isra.0+0xea>
   107c4:	4240      	negs	r0, r0
   107c6:	9a02      	ldr	r2, [sp, #8]
   107c8:	2a00      	cmp	r2, #0
   107ca:	d0f6      	beq.n	107ba <_strtol_l.isra.0+0xde>
   107cc:	9a03      	ldr	r2, [sp, #12]
   107ce:	2b00      	cmp	r3, #0
   107d0:	d000      	beq.n	107d4 <_strtol_l.isra.0+0xf8>
   107d2:	1e6a      	subs	r2, r5, #1
   107d4:	9b02      	ldr	r3, [sp, #8]
   107d6:	601a      	str	r2, [r3, #0]
   107d8:	e7ef      	b.n	107ba <_strtol_l.isra.0+0xde>
   107da:	2430      	movs	r4, #48	; 0x30
   107dc:	2f00      	cmp	r7, #0
   107de:	d1ad      	bne.n	1073c <_strtol_l.isra.0+0x60>
   107e0:	3708      	adds	r7, #8
   107e2:	e7ab      	b.n	1073c <_strtol_l.isra.0+0x60>
   107e4:	7fffffff 	.word	0x7fffffff

000107e8 <strtol>:
   107e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   107ea:	0013      	movs	r3, r2
   107ec:	4a06      	ldr	r2, [pc, #24]	; (10808 <strtol+0x20>)
   107ee:	0005      	movs	r5, r0
   107f0:	6810      	ldr	r0, [r2, #0]
   107f2:	6a04      	ldr	r4, [r0, #32]
   107f4:	2c00      	cmp	r4, #0
   107f6:	d100      	bne.n	107fa <strtol+0x12>
   107f8:	4c04      	ldr	r4, [pc, #16]	; (1080c <strtol+0x24>)
   107fa:	000a      	movs	r2, r1
   107fc:	9400      	str	r4, [sp, #0]
   107fe:	0029      	movs	r1, r5
   10800:	f7ff ff6c 	bl	106dc <_strtol_l.isra.0>
   10804:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10806:	46c0      	nop			; (mov r8, r8)
   10808:	2000000c 	.word	0x2000000c
   1080c:	20000070 	.word	0x20000070

00010810 <__swbuf_r>:
   10810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10812:	0005      	movs	r5, r0
   10814:	000e      	movs	r6, r1
   10816:	0014      	movs	r4, r2
   10818:	2800      	cmp	r0, #0
   1081a:	d004      	beq.n	10826 <__swbuf_r+0x16>
   1081c:	6983      	ldr	r3, [r0, #24]
   1081e:	2b00      	cmp	r3, #0
   10820:	d101      	bne.n	10826 <__swbuf_r+0x16>
   10822:	f000 f9b9 	bl	10b98 <__sinit>
   10826:	4b22      	ldr	r3, [pc, #136]	; (108b0 <__swbuf_r+0xa0>)
   10828:	429c      	cmp	r4, r3
   1082a:	d12d      	bne.n	10888 <__swbuf_r+0x78>
   1082c:	686c      	ldr	r4, [r5, #4]
   1082e:	69a3      	ldr	r3, [r4, #24]
   10830:	60a3      	str	r3, [r4, #8]
   10832:	89a3      	ldrh	r3, [r4, #12]
   10834:	071b      	lsls	r3, r3, #28
   10836:	d531      	bpl.n	1089c <__swbuf_r+0x8c>
   10838:	6923      	ldr	r3, [r4, #16]
   1083a:	2b00      	cmp	r3, #0
   1083c:	d02e      	beq.n	1089c <__swbuf_r+0x8c>
   1083e:	6823      	ldr	r3, [r4, #0]
   10840:	6922      	ldr	r2, [r4, #16]
   10842:	b2f7      	uxtb	r7, r6
   10844:	1a98      	subs	r0, r3, r2
   10846:	6963      	ldr	r3, [r4, #20]
   10848:	b2f6      	uxtb	r6, r6
   1084a:	4298      	cmp	r0, r3
   1084c:	db05      	blt.n	1085a <__swbuf_r+0x4a>
   1084e:	0021      	movs	r1, r4
   10850:	0028      	movs	r0, r5
   10852:	f000 f933 	bl	10abc <_fflush_r>
   10856:	2800      	cmp	r0, #0
   10858:	d126      	bne.n	108a8 <__swbuf_r+0x98>
   1085a:	68a3      	ldr	r3, [r4, #8]
   1085c:	3001      	adds	r0, #1
   1085e:	3b01      	subs	r3, #1
   10860:	60a3      	str	r3, [r4, #8]
   10862:	6823      	ldr	r3, [r4, #0]
   10864:	1c5a      	adds	r2, r3, #1
   10866:	6022      	str	r2, [r4, #0]
   10868:	701f      	strb	r7, [r3, #0]
   1086a:	6963      	ldr	r3, [r4, #20]
   1086c:	4298      	cmp	r0, r3
   1086e:	d004      	beq.n	1087a <__swbuf_r+0x6a>
   10870:	89a3      	ldrh	r3, [r4, #12]
   10872:	07db      	lsls	r3, r3, #31
   10874:	d51a      	bpl.n	108ac <__swbuf_r+0x9c>
   10876:	2e0a      	cmp	r6, #10
   10878:	d118      	bne.n	108ac <__swbuf_r+0x9c>
   1087a:	0021      	movs	r1, r4
   1087c:	0028      	movs	r0, r5
   1087e:	f000 f91d 	bl	10abc <_fflush_r>
   10882:	2800      	cmp	r0, #0
   10884:	d012      	beq.n	108ac <__swbuf_r+0x9c>
   10886:	e00f      	b.n	108a8 <__swbuf_r+0x98>
   10888:	4b0a      	ldr	r3, [pc, #40]	; (108b4 <__swbuf_r+0xa4>)
   1088a:	429c      	cmp	r4, r3
   1088c:	d101      	bne.n	10892 <__swbuf_r+0x82>
   1088e:	68ac      	ldr	r4, [r5, #8]
   10890:	e7cd      	b.n	1082e <__swbuf_r+0x1e>
   10892:	4b09      	ldr	r3, [pc, #36]	; (108b8 <__swbuf_r+0xa8>)
   10894:	429c      	cmp	r4, r3
   10896:	d1ca      	bne.n	1082e <__swbuf_r+0x1e>
   10898:	68ec      	ldr	r4, [r5, #12]
   1089a:	e7c8      	b.n	1082e <__swbuf_r+0x1e>
   1089c:	0021      	movs	r1, r4
   1089e:	0028      	movs	r0, r5
   108a0:	f000 f80c 	bl	108bc <__swsetup_r>
   108a4:	2800      	cmp	r0, #0
   108a6:	d0ca      	beq.n	1083e <__swbuf_r+0x2e>
   108a8:	2601      	movs	r6, #1
   108aa:	4276      	negs	r6, r6
   108ac:	0030      	movs	r0, r6
   108ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108b0:	00013bb8 	.word	0x00013bb8
   108b4:	00013bd8 	.word	0x00013bd8
   108b8:	00013b98 	.word	0x00013b98

000108bc <__swsetup_r>:
   108bc:	4b36      	ldr	r3, [pc, #216]	; (10998 <__swsetup_r+0xdc>)
   108be:	b570      	push	{r4, r5, r6, lr}
   108c0:	681d      	ldr	r5, [r3, #0]
   108c2:	0006      	movs	r6, r0
   108c4:	000c      	movs	r4, r1
   108c6:	2d00      	cmp	r5, #0
   108c8:	d005      	beq.n	108d6 <__swsetup_r+0x1a>
   108ca:	69ab      	ldr	r3, [r5, #24]
   108cc:	2b00      	cmp	r3, #0
   108ce:	d102      	bne.n	108d6 <__swsetup_r+0x1a>
   108d0:	0028      	movs	r0, r5
   108d2:	f000 f961 	bl	10b98 <__sinit>
   108d6:	4b31      	ldr	r3, [pc, #196]	; (1099c <__swsetup_r+0xe0>)
   108d8:	429c      	cmp	r4, r3
   108da:	d10f      	bne.n	108fc <__swsetup_r+0x40>
   108dc:	686c      	ldr	r4, [r5, #4]
   108de:	230c      	movs	r3, #12
   108e0:	5ee2      	ldrsh	r2, [r4, r3]
   108e2:	b293      	uxth	r3, r2
   108e4:	0719      	lsls	r1, r3, #28
   108e6:	d42d      	bmi.n	10944 <__swsetup_r+0x88>
   108e8:	06d9      	lsls	r1, r3, #27
   108ea:	d411      	bmi.n	10910 <__swsetup_r+0x54>
   108ec:	2309      	movs	r3, #9
   108ee:	2001      	movs	r0, #1
   108f0:	6033      	str	r3, [r6, #0]
   108f2:	3337      	adds	r3, #55	; 0x37
   108f4:	4313      	orrs	r3, r2
   108f6:	81a3      	strh	r3, [r4, #12]
   108f8:	4240      	negs	r0, r0
   108fa:	bd70      	pop	{r4, r5, r6, pc}
   108fc:	4b28      	ldr	r3, [pc, #160]	; (109a0 <__swsetup_r+0xe4>)
   108fe:	429c      	cmp	r4, r3
   10900:	d101      	bne.n	10906 <__swsetup_r+0x4a>
   10902:	68ac      	ldr	r4, [r5, #8]
   10904:	e7eb      	b.n	108de <__swsetup_r+0x22>
   10906:	4b27      	ldr	r3, [pc, #156]	; (109a4 <__swsetup_r+0xe8>)
   10908:	429c      	cmp	r4, r3
   1090a:	d1e8      	bne.n	108de <__swsetup_r+0x22>
   1090c:	68ec      	ldr	r4, [r5, #12]
   1090e:	e7e6      	b.n	108de <__swsetup_r+0x22>
   10910:	075b      	lsls	r3, r3, #29
   10912:	d513      	bpl.n	1093c <__swsetup_r+0x80>
   10914:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10916:	2900      	cmp	r1, #0
   10918:	d008      	beq.n	1092c <__swsetup_r+0x70>
   1091a:	0023      	movs	r3, r4
   1091c:	3344      	adds	r3, #68	; 0x44
   1091e:	4299      	cmp	r1, r3
   10920:	d002      	beq.n	10928 <__swsetup_r+0x6c>
   10922:	0030      	movs	r0, r6
   10924:	f7ff fc50 	bl	101c8 <_free_r>
   10928:	2300      	movs	r3, #0
   1092a:	6363      	str	r3, [r4, #52]	; 0x34
   1092c:	2224      	movs	r2, #36	; 0x24
   1092e:	89a3      	ldrh	r3, [r4, #12]
   10930:	4393      	bics	r3, r2
   10932:	81a3      	strh	r3, [r4, #12]
   10934:	2300      	movs	r3, #0
   10936:	6063      	str	r3, [r4, #4]
   10938:	6923      	ldr	r3, [r4, #16]
   1093a:	6023      	str	r3, [r4, #0]
   1093c:	2308      	movs	r3, #8
   1093e:	89a2      	ldrh	r2, [r4, #12]
   10940:	4313      	orrs	r3, r2
   10942:	81a3      	strh	r3, [r4, #12]
   10944:	6923      	ldr	r3, [r4, #16]
   10946:	2b00      	cmp	r3, #0
   10948:	d10b      	bne.n	10962 <__swsetup_r+0xa6>
   1094a:	21a0      	movs	r1, #160	; 0xa0
   1094c:	2280      	movs	r2, #128	; 0x80
   1094e:	89a3      	ldrh	r3, [r4, #12]
   10950:	0089      	lsls	r1, r1, #2
   10952:	0092      	lsls	r2, r2, #2
   10954:	400b      	ands	r3, r1
   10956:	4293      	cmp	r3, r2
   10958:	d003      	beq.n	10962 <__swsetup_r+0xa6>
   1095a:	0021      	movs	r1, r4
   1095c:	0030      	movs	r0, r6
   1095e:	f000 f9db 	bl	10d18 <__smakebuf_r>
   10962:	2301      	movs	r3, #1
   10964:	89a2      	ldrh	r2, [r4, #12]
   10966:	4013      	ands	r3, r2
   10968:	d011      	beq.n	1098e <__swsetup_r+0xd2>
   1096a:	2300      	movs	r3, #0
   1096c:	60a3      	str	r3, [r4, #8]
   1096e:	6963      	ldr	r3, [r4, #20]
   10970:	425b      	negs	r3, r3
   10972:	61a3      	str	r3, [r4, #24]
   10974:	2000      	movs	r0, #0
   10976:	6923      	ldr	r3, [r4, #16]
   10978:	4283      	cmp	r3, r0
   1097a:	d1be      	bne.n	108fa <__swsetup_r+0x3e>
   1097c:	230c      	movs	r3, #12
   1097e:	5ee2      	ldrsh	r2, [r4, r3]
   10980:	0613      	lsls	r3, r2, #24
   10982:	d5ba      	bpl.n	108fa <__swsetup_r+0x3e>
   10984:	2340      	movs	r3, #64	; 0x40
   10986:	4313      	orrs	r3, r2
   10988:	81a3      	strh	r3, [r4, #12]
   1098a:	3801      	subs	r0, #1
   1098c:	e7b5      	b.n	108fa <__swsetup_r+0x3e>
   1098e:	0792      	lsls	r2, r2, #30
   10990:	d400      	bmi.n	10994 <__swsetup_r+0xd8>
   10992:	6963      	ldr	r3, [r4, #20]
   10994:	60a3      	str	r3, [r4, #8]
   10996:	e7ed      	b.n	10974 <__swsetup_r+0xb8>
   10998:	2000000c 	.word	0x2000000c
   1099c:	00013bb8 	.word	0x00013bb8
   109a0:	00013bd8 	.word	0x00013bd8
   109a4:	00013b98 	.word	0x00013b98

000109a8 <__sflush_r>:
   109a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   109aa:	898a      	ldrh	r2, [r1, #12]
   109ac:	0005      	movs	r5, r0
   109ae:	000c      	movs	r4, r1
   109b0:	0713      	lsls	r3, r2, #28
   109b2:	d460      	bmi.n	10a76 <__sflush_r+0xce>
   109b4:	684b      	ldr	r3, [r1, #4]
   109b6:	2b00      	cmp	r3, #0
   109b8:	dc04      	bgt.n	109c4 <__sflush_r+0x1c>
   109ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   109bc:	2b00      	cmp	r3, #0
   109be:	dc01      	bgt.n	109c4 <__sflush_r+0x1c>
   109c0:	2000      	movs	r0, #0
   109c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   109c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   109c6:	2f00      	cmp	r7, #0
   109c8:	d0fa      	beq.n	109c0 <__sflush_r+0x18>
   109ca:	2300      	movs	r3, #0
   109cc:	682e      	ldr	r6, [r5, #0]
   109ce:	602b      	str	r3, [r5, #0]
   109d0:	2380      	movs	r3, #128	; 0x80
   109d2:	015b      	lsls	r3, r3, #5
   109d4:	401a      	ands	r2, r3
   109d6:	d034      	beq.n	10a42 <__sflush_r+0x9a>
   109d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   109da:	89a3      	ldrh	r3, [r4, #12]
   109dc:	075b      	lsls	r3, r3, #29
   109de:	d506      	bpl.n	109ee <__sflush_r+0x46>
   109e0:	6863      	ldr	r3, [r4, #4]
   109e2:	1ac0      	subs	r0, r0, r3
   109e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   109e6:	2b00      	cmp	r3, #0
   109e8:	d001      	beq.n	109ee <__sflush_r+0x46>
   109ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
   109ec:	1ac0      	subs	r0, r0, r3
   109ee:	0002      	movs	r2, r0
   109f0:	6a21      	ldr	r1, [r4, #32]
   109f2:	2300      	movs	r3, #0
   109f4:	0028      	movs	r0, r5
   109f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   109f8:	47b8      	blx	r7
   109fa:	89a1      	ldrh	r1, [r4, #12]
   109fc:	1c43      	adds	r3, r0, #1
   109fe:	d106      	bne.n	10a0e <__sflush_r+0x66>
   10a00:	682b      	ldr	r3, [r5, #0]
   10a02:	2b1d      	cmp	r3, #29
   10a04:	d831      	bhi.n	10a6a <__sflush_r+0xc2>
   10a06:	4a2c      	ldr	r2, [pc, #176]	; (10ab8 <__sflush_r+0x110>)
   10a08:	40da      	lsrs	r2, r3
   10a0a:	07d3      	lsls	r3, r2, #31
   10a0c:	d52d      	bpl.n	10a6a <__sflush_r+0xc2>
   10a0e:	2300      	movs	r3, #0
   10a10:	6063      	str	r3, [r4, #4]
   10a12:	6923      	ldr	r3, [r4, #16]
   10a14:	6023      	str	r3, [r4, #0]
   10a16:	04cb      	lsls	r3, r1, #19
   10a18:	d505      	bpl.n	10a26 <__sflush_r+0x7e>
   10a1a:	1c43      	adds	r3, r0, #1
   10a1c:	d102      	bne.n	10a24 <__sflush_r+0x7c>
   10a1e:	682b      	ldr	r3, [r5, #0]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d100      	bne.n	10a26 <__sflush_r+0x7e>
   10a24:	6560      	str	r0, [r4, #84]	; 0x54
   10a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10a28:	602e      	str	r6, [r5, #0]
   10a2a:	2900      	cmp	r1, #0
   10a2c:	d0c8      	beq.n	109c0 <__sflush_r+0x18>
   10a2e:	0023      	movs	r3, r4
   10a30:	3344      	adds	r3, #68	; 0x44
   10a32:	4299      	cmp	r1, r3
   10a34:	d002      	beq.n	10a3c <__sflush_r+0x94>
   10a36:	0028      	movs	r0, r5
   10a38:	f7ff fbc6 	bl	101c8 <_free_r>
   10a3c:	2000      	movs	r0, #0
   10a3e:	6360      	str	r0, [r4, #52]	; 0x34
   10a40:	e7bf      	b.n	109c2 <__sflush_r+0x1a>
   10a42:	2301      	movs	r3, #1
   10a44:	6a21      	ldr	r1, [r4, #32]
   10a46:	0028      	movs	r0, r5
   10a48:	47b8      	blx	r7
   10a4a:	1c43      	adds	r3, r0, #1
   10a4c:	d1c5      	bne.n	109da <__sflush_r+0x32>
   10a4e:	682b      	ldr	r3, [r5, #0]
   10a50:	2b00      	cmp	r3, #0
   10a52:	d0c2      	beq.n	109da <__sflush_r+0x32>
   10a54:	2b1d      	cmp	r3, #29
   10a56:	d001      	beq.n	10a5c <__sflush_r+0xb4>
   10a58:	2b16      	cmp	r3, #22
   10a5a:	d101      	bne.n	10a60 <__sflush_r+0xb8>
   10a5c:	602e      	str	r6, [r5, #0]
   10a5e:	e7af      	b.n	109c0 <__sflush_r+0x18>
   10a60:	2340      	movs	r3, #64	; 0x40
   10a62:	89a2      	ldrh	r2, [r4, #12]
   10a64:	4313      	orrs	r3, r2
   10a66:	81a3      	strh	r3, [r4, #12]
   10a68:	e7ab      	b.n	109c2 <__sflush_r+0x1a>
   10a6a:	2340      	movs	r3, #64	; 0x40
   10a6c:	430b      	orrs	r3, r1
   10a6e:	2001      	movs	r0, #1
   10a70:	81a3      	strh	r3, [r4, #12]
   10a72:	4240      	negs	r0, r0
   10a74:	e7a5      	b.n	109c2 <__sflush_r+0x1a>
   10a76:	690f      	ldr	r7, [r1, #16]
   10a78:	2f00      	cmp	r7, #0
   10a7a:	d0a1      	beq.n	109c0 <__sflush_r+0x18>
   10a7c:	680b      	ldr	r3, [r1, #0]
   10a7e:	600f      	str	r7, [r1, #0]
   10a80:	1bdb      	subs	r3, r3, r7
   10a82:	9301      	str	r3, [sp, #4]
   10a84:	2300      	movs	r3, #0
   10a86:	0792      	lsls	r2, r2, #30
   10a88:	d100      	bne.n	10a8c <__sflush_r+0xe4>
   10a8a:	694b      	ldr	r3, [r1, #20]
   10a8c:	60a3      	str	r3, [r4, #8]
   10a8e:	9b01      	ldr	r3, [sp, #4]
   10a90:	2b00      	cmp	r3, #0
   10a92:	dc00      	bgt.n	10a96 <__sflush_r+0xee>
   10a94:	e794      	b.n	109c0 <__sflush_r+0x18>
   10a96:	9b01      	ldr	r3, [sp, #4]
   10a98:	003a      	movs	r2, r7
   10a9a:	6a21      	ldr	r1, [r4, #32]
   10a9c:	0028      	movs	r0, r5
   10a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10aa0:	47b0      	blx	r6
   10aa2:	2800      	cmp	r0, #0
   10aa4:	dc03      	bgt.n	10aae <__sflush_r+0x106>
   10aa6:	2340      	movs	r3, #64	; 0x40
   10aa8:	89a2      	ldrh	r2, [r4, #12]
   10aaa:	4313      	orrs	r3, r2
   10aac:	e7df      	b.n	10a6e <__sflush_r+0xc6>
   10aae:	9b01      	ldr	r3, [sp, #4]
   10ab0:	183f      	adds	r7, r7, r0
   10ab2:	1a1b      	subs	r3, r3, r0
   10ab4:	9301      	str	r3, [sp, #4]
   10ab6:	e7ea      	b.n	10a8e <__sflush_r+0xe6>
   10ab8:	20400001 	.word	0x20400001

00010abc <_fflush_r>:
   10abc:	690b      	ldr	r3, [r1, #16]
   10abe:	b570      	push	{r4, r5, r6, lr}
   10ac0:	0005      	movs	r5, r0
   10ac2:	000c      	movs	r4, r1
   10ac4:	2b00      	cmp	r3, #0
   10ac6:	d101      	bne.n	10acc <_fflush_r+0x10>
   10ac8:	2000      	movs	r0, #0
   10aca:	bd70      	pop	{r4, r5, r6, pc}
   10acc:	2800      	cmp	r0, #0
   10ace:	d004      	beq.n	10ada <_fflush_r+0x1e>
   10ad0:	6983      	ldr	r3, [r0, #24]
   10ad2:	2b00      	cmp	r3, #0
   10ad4:	d101      	bne.n	10ada <_fflush_r+0x1e>
   10ad6:	f000 f85f 	bl	10b98 <__sinit>
   10ada:	4b0b      	ldr	r3, [pc, #44]	; (10b08 <_fflush_r+0x4c>)
   10adc:	429c      	cmp	r4, r3
   10ade:	d109      	bne.n	10af4 <_fflush_r+0x38>
   10ae0:	686c      	ldr	r4, [r5, #4]
   10ae2:	220c      	movs	r2, #12
   10ae4:	5ea3      	ldrsh	r3, [r4, r2]
   10ae6:	2b00      	cmp	r3, #0
   10ae8:	d0ee      	beq.n	10ac8 <_fflush_r+0xc>
   10aea:	0021      	movs	r1, r4
   10aec:	0028      	movs	r0, r5
   10aee:	f7ff ff5b 	bl	109a8 <__sflush_r>
   10af2:	e7ea      	b.n	10aca <_fflush_r+0xe>
   10af4:	4b05      	ldr	r3, [pc, #20]	; (10b0c <_fflush_r+0x50>)
   10af6:	429c      	cmp	r4, r3
   10af8:	d101      	bne.n	10afe <_fflush_r+0x42>
   10afa:	68ac      	ldr	r4, [r5, #8]
   10afc:	e7f1      	b.n	10ae2 <_fflush_r+0x26>
   10afe:	4b04      	ldr	r3, [pc, #16]	; (10b10 <_fflush_r+0x54>)
   10b00:	429c      	cmp	r4, r3
   10b02:	d1ee      	bne.n	10ae2 <_fflush_r+0x26>
   10b04:	68ec      	ldr	r4, [r5, #12]
   10b06:	e7ec      	b.n	10ae2 <_fflush_r+0x26>
   10b08:	00013bb8 	.word	0x00013bb8
   10b0c:	00013bd8 	.word	0x00013bd8
   10b10:	00013b98 	.word	0x00013b98

00010b14 <_cleanup_r>:
   10b14:	b510      	push	{r4, lr}
   10b16:	4902      	ldr	r1, [pc, #8]	; (10b20 <_cleanup_r+0xc>)
   10b18:	f000 f8b2 	bl	10c80 <_fwalk_reent>
   10b1c:	bd10      	pop	{r4, pc}
   10b1e:	46c0      	nop			; (mov r8, r8)
   10b20:	00010abd 	.word	0x00010abd

00010b24 <std.isra.0>:
   10b24:	2300      	movs	r3, #0
   10b26:	b510      	push	{r4, lr}
   10b28:	0004      	movs	r4, r0
   10b2a:	6003      	str	r3, [r0, #0]
   10b2c:	6043      	str	r3, [r0, #4]
   10b2e:	6083      	str	r3, [r0, #8]
   10b30:	8181      	strh	r1, [r0, #12]
   10b32:	6643      	str	r3, [r0, #100]	; 0x64
   10b34:	81c2      	strh	r2, [r0, #14]
   10b36:	6103      	str	r3, [r0, #16]
   10b38:	6143      	str	r3, [r0, #20]
   10b3a:	6183      	str	r3, [r0, #24]
   10b3c:	0019      	movs	r1, r3
   10b3e:	2208      	movs	r2, #8
   10b40:	305c      	adds	r0, #92	; 0x5c
   10b42:	f7ff fb38 	bl	101b6 <memset>
   10b46:	4b05      	ldr	r3, [pc, #20]	; (10b5c <std.isra.0+0x38>)
   10b48:	6224      	str	r4, [r4, #32]
   10b4a:	6263      	str	r3, [r4, #36]	; 0x24
   10b4c:	4b04      	ldr	r3, [pc, #16]	; (10b60 <std.isra.0+0x3c>)
   10b4e:	62a3      	str	r3, [r4, #40]	; 0x28
   10b50:	4b04      	ldr	r3, [pc, #16]	; (10b64 <std.isra.0+0x40>)
   10b52:	62e3      	str	r3, [r4, #44]	; 0x2c
   10b54:	4b04      	ldr	r3, [pc, #16]	; (10b68 <std.isra.0+0x44>)
   10b56:	6323      	str	r3, [r4, #48]	; 0x30
   10b58:	bd10      	pop	{r4, pc}
   10b5a:	46c0      	nop			; (mov r8, r8)
   10b5c:	00011699 	.word	0x00011699
   10b60:	000116c1 	.word	0x000116c1
   10b64:	000116f9 	.word	0x000116f9
   10b68:	00011725 	.word	0x00011725

00010b6c <__sfmoreglue>:
   10b6c:	b570      	push	{r4, r5, r6, lr}
   10b6e:	2568      	movs	r5, #104	; 0x68
   10b70:	1e4a      	subs	r2, r1, #1
   10b72:	4355      	muls	r5, r2
   10b74:	000e      	movs	r6, r1
   10b76:	0029      	movs	r1, r5
   10b78:	3174      	adds	r1, #116	; 0x74
   10b7a:	f7ff fb6f 	bl	1025c <_malloc_r>
   10b7e:	1e04      	subs	r4, r0, #0
   10b80:	d008      	beq.n	10b94 <__sfmoreglue+0x28>
   10b82:	2100      	movs	r1, #0
   10b84:	002a      	movs	r2, r5
   10b86:	6001      	str	r1, [r0, #0]
   10b88:	6046      	str	r6, [r0, #4]
   10b8a:	300c      	adds	r0, #12
   10b8c:	60a0      	str	r0, [r4, #8]
   10b8e:	3268      	adds	r2, #104	; 0x68
   10b90:	f7ff fb11 	bl	101b6 <memset>
   10b94:	0020      	movs	r0, r4
   10b96:	bd70      	pop	{r4, r5, r6, pc}

00010b98 <__sinit>:
   10b98:	6983      	ldr	r3, [r0, #24]
   10b9a:	b513      	push	{r0, r1, r4, lr}
   10b9c:	0004      	movs	r4, r0
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	d128      	bne.n	10bf4 <__sinit+0x5c>
   10ba2:	6483      	str	r3, [r0, #72]	; 0x48
   10ba4:	64c3      	str	r3, [r0, #76]	; 0x4c
   10ba6:	6503      	str	r3, [r0, #80]	; 0x50
   10ba8:	4b13      	ldr	r3, [pc, #76]	; (10bf8 <__sinit+0x60>)
   10baa:	4a14      	ldr	r2, [pc, #80]	; (10bfc <__sinit+0x64>)
   10bac:	681b      	ldr	r3, [r3, #0]
   10bae:	6282      	str	r2, [r0, #40]	; 0x28
   10bb0:	9301      	str	r3, [sp, #4]
   10bb2:	4298      	cmp	r0, r3
   10bb4:	d101      	bne.n	10bba <__sinit+0x22>
   10bb6:	2301      	movs	r3, #1
   10bb8:	6183      	str	r3, [r0, #24]
   10bba:	0020      	movs	r0, r4
   10bbc:	f000 f820 	bl	10c00 <__sfp>
   10bc0:	6060      	str	r0, [r4, #4]
   10bc2:	0020      	movs	r0, r4
   10bc4:	f000 f81c 	bl	10c00 <__sfp>
   10bc8:	60a0      	str	r0, [r4, #8]
   10bca:	0020      	movs	r0, r4
   10bcc:	f000 f818 	bl	10c00 <__sfp>
   10bd0:	2200      	movs	r2, #0
   10bd2:	60e0      	str	r0, [r4, #12]
   10bd4:	2104      	movs	r1, #4
   10bd6:	6860      	ldr	r0, [r4, #4]
   10bd8:	f7ff ffa4 	bl	10b24 <std.isra.0>
   10bdc:	2201      	movs	r2, #1
   10bde:	2109      	movs	r1, #9
   10be0:	68a0      	ldr	r0, [r4, #8]
   10be2:	f7ff ff9f 	bl	10b24 <std.isra.0>
   10be6:	2202      	movs	r2, #2
   10be8:	2112      	movs	r1, #18
   10bea:	68e0      	ldr	r0, [r4, #12]
   10bec:	f7ff ff9a 	bl	10b24 <std.isra.0>
   10bf0:	2301      	movs	r3, #1
   10bf2:	61a3      	str	r3, [r4, #24]
   10bf4:	bd13      	pop	{r0, r1, r4, pc}
   10bf6:	46c0      	nop			; (mov r8, r8)
   10bf8:	00013b94 	.word	0x00013b94
   10bfc:	00010b15 	.word	0x00010b15

00010c00 <__sfp>:
   10c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c02:	4b1e      	ldr	r3, [pc, #120]	; (10c7c <__sfp+0x7c>)
   10c04:	0007      	movs	r7, r0
   10c06:	681e      	ldr	r6, [r3, #0]
   10c08:	69b3      	ldr	r3, [r6, #24]
   10c0a:	2b00      	cmp	r3, #0
   10c0c:	d102      	bne.n	10c14 <__sfp+0x14>
   10c0e:	0030      	movs	r0, r6
   10c10:	f7ff ffc2 	bl	10b98 <__sinit>
   10c14:	3648      	adds	r6, #72	; 0x48
   10c16:	68b4      	ldr	r4, [r6, #8]
   10c18:	6873      	ldr	r3, [r6, #4]
   10c1a:	3b01      	subs	r3, #1
   10c1c:	d504      	bpl.n	10c28 <__sfp+0x28>
   10c1e:	6833      	ldr	r3, [r6, #0]
   10c20:	2b00      	cmp	r3, #0
   10c22:	d007      	beq.n	10c34 <__sfp+0x34>
   10c24:	6836      	ldr	r6, [r6, #0]
   10c26:	e7f6      	b.n	10c16 <__sfp+0x16>
   10c28:	220c      	movs	r2, #12
   10c2a:	5ea5      	ldrsh	r5, [r4, r2]
   10c2c:	2d00      	cmp	r5, #0
   10c2e:	d00d      	beq.n	10c4c <__sfp+0x4c>
   10c30:	3468      	adds	r4, #104	; 0x68
   10c32:	e7f2      	b.n	10c1a <__sfp+0x1a>
   10c34:	2104      	movs	r1, #4
   10c36:	0038      	movs	r0, r7
   10c38:	f7ff ff98 	bl	10b6c <__sfmoreglue>
   10c3c:	6030      	str	r0, [r6, #0]
   10c3e:	2800      	cmp	r0, #0
   10c40:	d1f0      	bne.n	10c24 <__sfp+0x24>
   10c42:	230c      	movs	r3, #12
   10c44:	0004      	movs	r4, r0
   10c46:	603b      	str	r3, [r7, #0]
   10c48:	0020      	movs	r0, r4
   10c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c4c:	2301      	movs	r3, #1
   10c4e:	0020      	movs	r0, r4
   10c50:	425b      	negs	r3, r3
   10c52:	81e3      	strh	r3, [r4, #14]
   10c54:	3302      	adds	r3, #2
   10c56:	81a3      	strh	r3, [r4, #12]
   10c58:	6665      	str	r5, [r4, #100]	; 0x64
   10c5a:	6025      	str	r5, [r4, #0]
   10c5c:	60a5      	str	r5, [r4, #8]
   10c5e:	6065      	str	r5, [r4, #4]
   10c60:	6125      	str	r5, [r4, #16]
   10c62:	6165      	str	r5, [r4, #20]
   10c64:	61a5      	str	r5, [r4, #24]
   10c66:	2208      	movs	r2, #8
   10c68:	0029      	movs	r1, r5
   10c6a:	305c      	adds	r0, #92	; 0x5c
   10c6c:	f7ff faa3 	bl	101b6 <memset>
   10c70:	6365      	str	r5, [r4, #52]	; 0x34
   10c72:	63a5      	str	r5, [r4, #56]	; 0x38
   10c74:	64a5      	str	r5, [r4, #72]	; 0x48
   10c76:	64e5      	str	r5, [r4, #76]	; 0x4c
   10c78:	e7e6      	b.n	10c48 <__sfp+0x48>
   10c7a:	46c0      	nop			; (mov r8, r8)
   10c7c:	00013b94 	.word	0x00013b94

00010c80 <_fwalk_reent>:
   10c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10c82:	0004      	movs	r4, r0
   10c84:	0007      	movs	r7, r0
   10c86:	2600      	movs	r6, #0
   10c88:	9101      	str	r1, [sp, #4]
   10c8a:	3448      	adds	r4, #72	; 0x48
   10c8c:	2c00      	cmp	r4, #0
   10c8e:	d101      	bne.n	10c94 <_fwalk_reent+0x14>
   10c90:	0030      	movs	r0, r6
   10c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10c94:	6863      	ldr	r3, [r4, #4]
   10c96:	68a5      	ldr	r5, [r4, #8]
   10c98:	9300      	str	r3, [sp, #0]
   10c9a:	9b00      	ldr	r3, [sp, #0]
   10c9c:	3b01      	subs	r3, #1
   10c9e:	9300      	str	r3, [sp, #0]
   10ca0:	d501      	bpl.n	10ca6 <_fwalk_reent+0x26>
   10ca2:	6824      	ldr	r4, [r4, #0]
   10ca4:	e7f2      	b.n	10c8c <_fwalk_reent+0xc>
   10ca6:	89ab      	ldrh	r3, [r5, #12]
   10ca8:	2b01      	cmp	r3, #1
   10caa:	d908      	bls.n	10cbe <_fwalk_reent+0x3e>
   10cac:	220e      	movs	r2, #14
   10cae:	5eab      	ldrsh	r3, [r5, r2]
   10cb0:	3301      	adds	r3, #1
   10cb2:	d004      	beq.n	10cbe <_fwalk_reent+0x3e>
   10cb4:	0029      	movs	r1, r5
   10cb6:	0038      	movs	r0, r7
   10cb8:	9b01      	ldr	r3, [sp, #4]
   10cba:	4798      	blx	r3
   10cbc:	4306      	orrs	r6, r0
   10cbe:	3568      	adds	r5, #104	; 0x68
   10cc0:	e7eb      	b.n	10c9a <_fwalk_reent+0x1a>

00010cc2 <__locale_ctype_ptr_l>:
   10cc2:	30ec      	adds	r0, #236	; 0xec
   10cc4:	6800      	ldr	r0, [r0, #0]
   10cc6:	4770      	bx	lr

00010cc8 <__swhatbuf_r>:
   10cc8:	b570      	push	{r4, r5, r6, lr}
   10cca:	000e      	movs	r6, r1
   10ccc:	001d      	movs	r5, r3
   10cce:	230e      	movs	r3, #14
   10cd0:	5ec9      	ldrsh	r1, [r1, r3]
   10cd2:	b090      	sub	sp, #64	; 0x40
   10cd4:	0014      	movs	r4, r2
   10cd6:	2900      	cmp	r1, #0
   10cd8:	da07      	bge.n	10cea <__swhatbuf_r+0x22>
   10cda:	2300      	movs	r3, #0
   10cdc:	602b      	str	r3, [r5, #0]
   10cde:	89b3      	ldrh	r3, [r6, #12]
   10ce0:	061b      	lsls	r3, r3, #24
   10ce2:	d411      	bmi.n	10d08 <__swhatbuf_r+0x40>
   10ce4:	2380      	movs	r3, #128	; 0x80
   10ce6:	00db      	lsls	r3, r3, #3
   10ce8:	e00f      	b.n	10d0a <__swhatbuf_r+0x42>
   10cea:	aa01      	add	r2, sp, #4
   10cec:	f000 fd52 	bl	11794 <_fstat_r>
   10cf0:	2800      	cmp	r0, #0
   10cf2:	dbf2      	blt.n	10cda <__swhatbuf_r+0x12>
   10cf4:	22f0      	movs	r2, #240	; 0xf0
   10cf6:	9b02      	ldr	r3, [sp, #8]
   10cf8:	0212      	lsls	r2, r2, #8
   10cfa:	4013      	ands	r3, r2
   10cfc:	4a05      	ldr	r2, [pc, #20]	; (10d14 <__swhatbuf_r+0x4c>)
   10cfe:	189b      	adds	r3, r3, r2
   10d00:	425a      	negs	r2, r3
   10d02:	4153      	adcs	r3, r2
   10d04:	602b      	str	r3, [r5, #0]
   10d06:	e7ed      	b.n	10ce4 <__swhatbuf_r+0x1c>
   10d08:	2340      	movs	r3, #64	; 0x40
   10d0a:	2000      	movs	r0, #0
   10d0c:	6023      	str	r3, [r4, #0]
   10d0e:	b010      	add	sp, #64	; 0x40
   10d10:	bd70      	pop	{r4, r5, r6, pc}
   10d12:	46c0      	nop			; (mov r8, r8)
   10d14:	ffffe000 	.word	0xffffe000

00010d18 <__smakebuf_r>:
   10d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10d1a:	2602      	movs	r6, #2
   10d1c:	898b      	ldrh	r3, [r1, #12]
   10d1e:	0005      	movs	r5, r0
   10d20:	000c      	movs	r4, r1
   10d22:	4233      	tst	r3, r6
   10d24:	d006      	beq.n	10d34 <__smakebuf_r+0x1c>
   10d26:	0023      	movs	r3, r4
   10d28:	3347      	adds	r3, #71	; 0x47
   10d2a:	6023      	str	r3, [r4, #0]
   10d2c:	6123      	str	r3, [r4, #16]
   10d2e:	2301      	movs	r3, #1
   10d30:	6163      	str	r3, [r4, #20]
   10d32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10d34:	ab01      	add	r3, sp, #4
   10d36:	466a      	mov	r2, sp
   10d38:	f7ff ffc6 	bl	10cc8 <__swhatbuf_r>
   10d3c:	9900      	ldr	r1, [sp, #0]
   10d3e:	0007      	movs	r7, r0
   10d40:	0028      	movs	r0, r5
   10d42:	f7ff fa8b 	bl	1025c <_malloc_r>
   10d46:	2800      	cmp	r0, #0
   10d48:	d108      	bne.n	10d5c <__smakebuf_r+0x44>
   10d4a:	220c      	movs	r2, #12
   10d4c:	5ea3      	ldrsh	r3, [r4, r2]
   10d4e:	059a      	lsls	r2, r3, #22
   10d50:	d4ef      	bmi.n	10d32 <__smakebuf_r+0x1a>
   10d52:	2203      	movs	r2, #3
   10d54:	4393      	bics	r3, r2
   10d56:	431e      	orrs	r6, r3
   10d58:	81a6      	strh	r6, [r4, #12]
   10d5a:	e7e4      	b.n	10d26 <__smakebuf_r+0xe>
   10d5c:	4b0f      	ldr	r3, [pc, #60]	; (10d9c <__smakebuf_r+0x84>)
   10d5e:	62ab      	str	r3, [r5, #40]	; 0x28
   10d60:	2380      	movs	r3, #128	; 0x80
   10d62:	89a2      	ldrh	r2, [r4, #12]
   10d64:	6020      	str	r0, [r4, #0]
   10d66:	4313      	orrs	r3, r2
   10d68:	81a3      	strh	r3, [r4, #12]
   10d6a:	9b00      	ldr	r3, [sp, #0]
   10d6c:	6120      	str	r0, [r4, #16]
   10d6e:	6163      	str	r3, [r4, #20]
   10d70:	9b01      	ldr	r3, [sp, #4]
   10d72:	2b00      	cmp	r3, #0
   10d74:	d00d      	beq.n	10d92 <__smakebuf_r+0x7a>
   10d76:	230e      	movs	r3, #14
   10d78:	5ee1      	ldrsh	r1, [r4, r3]
   10d7a:	0028      	movs	r0, r5
   10d7c:	f000 fd1c 	bl	117b8 <_isatty_r>
   10d80:	2800      	cmp	r0, #0
   10d82:	d006      	beq.n	10d92 <__smakebuf_r+0x7a>
   10d84:	2203      	movs	r2, #3
   10d86:	89a3      	ldrh	r3, [r4, #12]
   10d88:	4393      	bics	r3, r2
   10d8a:	001a      	movs	r2, r3
   10d8c:	2301      	movs	r3, #1
   10d8e:	4313      	orrs	r3, r2
   10d90:	81a3      	strh	r3, [r4, #12]
   10d92:	89a0      	ldrh	r0, [r4, #12]
   10d94:	4338      	orrs	r0, r7
   10d96:	81a0      	strh	r0, [r4, #12]
   10d98:	e7cb      	b.n	10d32 <__smakebuf_r+0x1a>
   10d9a:	46c0      	nop			; (mov r8, r8)
   10d9c:	00010b15 	.word	0x00010b15

00010da0 <__ascii_mbtowc>:
   10da0:	b082      	sub	sp, #8
   10da2:	2900      	cmp	r1, #0
   10da4:	d100      	bne.n	10da8 <__ascii_mbtowc+0x8>
   10da6:	a901      	add	r1, sp, #4
   10da8:	1e10      	subs	r0, r2, #0
   10daa:	d006      	beq.n	10dba <__ascii_mbtowc+0x1a>
   10dac:	2b00      	cmp	r3, #0
   10dae:	d006      	beq.n	10dbe <__ascii_mbtowc+0x1e>
   10db0:	7813      	ldrb	r3, [r2, #0]
   10db2:	600b      	str	r3, [r1, #0]
   10db4:	7810      	ldrb	r0, [r2, #0]
   10db6:	1e43      	subs	r3, r0, #1
   10db8:	4198      	sbcs	r0, r3
   10dba:	b002      	add	sp, #8
   10dbc:	4770      	bx	lr
   10dbe:	2002      	movs	r0, #2
   10dc0:	4240      	negs	r0, r0
   10dc2:	e7fa      	b.n	10dba <__ascii_mbtowc+0x1a>

00010dc4 <__malloc_lock>:
   10dc4:	4770      	bx	lr

00010dc6 <__malloc_unlock>:
   10dc6:	4770      	bx	lr

00010dc8 <__ssputs_r>:
   10dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dca:	688e      	ldr	r6, [r1, #8]
   10dcc:	b085      	sub	sp, #20
   10dce:	0007      	movs	r7, r0
   10dd0:	000c      	movs	r4, r1
   10dd2:	9203      	str	r2, [sp, #12]
   10dd4:	9301      	str	r3, [sp, #4]
   10dd6:	429e      	cmp	r6, r3
   10dd8:	d839      	bhi.n	10e4e <__ssputs_r+0x86>
   10dda:	2390      	movs	r3, #144	; 0x90
   10ddc:	898a      	ldrh	r2, [r1, #12]
   10dde:	00db      	lsls	r3, r3, #3
   10de0:	421a      	tst	r2, r3
   10de2:	d034      	beq.n	10e4e <__ssputs_r+0x86>
   10de4:	2503      	movs	r5, #3
   10de6:	6909      	ldr	r1, [r1, #16]
   10de8:	6823      	ldr	r3, [r4, #0]
   10dea:	1a5b      	subs	r3, r3, r1
   10dec:	9302      	str	r3, [sp, #8]
   10dee:	6963      	ldr	r3, [r4, #20]
   10df0:	9802      	ldr	r0, [sp, #8]
   10df2:	435d      	muls	r5, r3
   10df4:	0feb      	lsrs	r3, r5, #31
   10df6:	195d      	adds	r5, r3, r5
   10df8:	9b01      	ldr	r3, [sp, #4]
   10dfa:	106d      	asrs	r5, r5, #1
   10dfc:	3301      	adds	r3, #1
   10dfe:	181b      	adds	r3, r3, r0
   10e00:	42ab      	cmp	r3, r5
   10e02:	d900      	bls.n	10e06 <__ssputs_r+0x3e>
   10e04:	001d      	movs	r5, r3
   10e06:	0553      	lsls	r3, r2, #21
   10e08:	d532      	bpl.n	10e70 <__ssputs_r+0xa8>
   10e0a:	0029      	movs	r1, r5
   10e0c:	0038      	movs	r0, r7
   10e0e:	f7ff fa25 	bl	1025c <_malloc_r>
   10e12:	1e06      	subs	r6, r0, #0
   10e14:	d109      	bne.n	10e2a <__ssputs_r+0x62>
   10e16:	230c      	movs	r3, #12
   10e18:	603b      	str	r3, [r7, #0]
   10e1a:	2340      	movs	r3, #64	; 0x40
   10e1c:	2001      	movs	r0, #1
   10e1e:	89a2      	ldrh	r2, [r4, #12]
   10e20:	4240      	negs	r0, r0
   10e22:	4313      	orrs	r3, r2
   10e24:	81a3      	strh	r3, [r4, #12]
   10e26:	b005      	add	sp, #20
   10e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e2a:	9a02      	ldr	r2, [sp, #8]
   10e2c:	6921      	ldr	r1, [r4, #16]
   10e2e:	f7ff f9a7 	bl	10180 <memcpy>
   10e32:	89a3      	ldrh	r3, [r4, #12]
   10e34:	4a14      	ldr	r2, [pc, #80]	; (10e88 <__ssputs_r+0xc0>)
   10e36:	401a      	ands	r2, r3
   10e38:	2380      	movs	r3, #128	; 0x80
   10e3a:	4313      	orrs	r3, r2
   10e3c:	81a3      	strh	r3, [r4, #12]
   10e3e:	9b02      	ldr	r3, [sp, #8]
   10e40:	6126      	str	r6, [r4, #16]
   10e42:	18f6      	adds	r6, r6, r3
   10e44:	6026      	str	r6, [r4, #0]
   10e46:	6165      	str	r5, [r4, #20]
   10e48:	9e01      	ldr	r6, [sp, #4]
   10e4a:	1aed      	subs	r5, r5, r3
   10e4c:	60a5      	str	r5, [r4, #8]
   10e4e:	9b01      	ldr	r3, [sp, #4]
   10e50:	42b3      	cmp	r3, r6
   10e52:	d200      	bcs.n	10e56 <__ssputs_r+0x8e>
   10e54:	001e      	movs	r6, r3
   10e56:	0032      	movs	r2, r6
   10e58:	9903      	ldr	r1, [sp, #12]
   10e5a:	6820      	ldr	r0, [r4, #0]
   10e5c:	f7ff f999 	bl	10192 <memmove>
   10e60:	68a3      	ldr	r3, [r4, #8]
   10e62:	2000      	movs	r0, #0
   10e64:	1b9b      	subs	r3, r3, r6
   10e66:	60a3      	str	r3, [r4, #8]
   10e68:	6823      	ldr	r3, [r4, #0]
   10e6a:	199e      	adds	r6, r3, r6
   10e6c:	6026      	str	r6, [r4, #0]
   10e6e:	e7da      	b.n	10e26 <__ssputs_r+0x5e>
   10e70:	002a      	movs	r2, r5
   10e72:	0038      	movs	r0, r7
   10e74:	f000 fcd1 	bl	1181a <_realloc_r>
   10e78:	1e06      	subs	r6, r0, #0
   10e7a:	d1e0      	bne.n	10e3e <__ssputs_r+0x76>
   10e7c:	6921      	ldr	r1, [r4, #16]
   10e7e:	0038      	movs	r0, r7
   10e80:	f7ff f9a2 	bl	101c8 <_free_r>
   10e84:	e7c7      	b.n	10e16 <__ssputs_r+0x4e>
   10e86:	46c0      	nop			; (mov r8, r8)
   10e88:	fffffb7f 	.word	0xfffffb7f

00010e8c <_svfiprintf_r>:
   10e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e8e:	b09f      	sub	sp, #124	; 0x7c
   10e90:	9002      	str	r0, [sp, #8]
   10e92:	9305      	str	r3, [sp, #20]
   10e94:	898b      	ldrh	r3, [r1, #12]
   10e96:	000f      	movs	r7, r1
   10e98:	0016      	movs	r6, r2
   10e9a:	061b      	lsls	r3, r3, #24
   10e9c:	d511      	bpl.n	10ec2 <_svfiprintf_r+0x36>
   10e9e:	690b      	ldr	r3, [r1, #16]
   10ea0:	2b00      	cmp	r3, #0
   10ea2:	d10e      	bne.n	10ec2 <_svfiprintf_r+0x36>
   10ea4:	2140      	movs	r1, #64	; 0x40
   10ea6:	f7ff f9d9 	bl	1025c <_malloc_r>
   10eaa:	6038      	str	r0, [r7, #0]
   10eac:	6138      	str	r0, [r7, #16]
   10eae:	2800      	cmp	r0, #0
   10eb0:	d105      	bne.n	10ebe <_svfiprintf_r+0x32>
   10eb2:	230c      	movs	r3, #12
   10eb4:	9a02      	ldr	r2, [sp, #8]
   10eb6:	3801      	subs	r0, #1
   10eb8:	6013      	str	r3, [r2, #0]
   10eba:	b01f      	add	sp, #124	; 0x7c
   10ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ebe:	2340      	movs	r3, #64	; 0x40
   10ec0:	617b      	str	r3, [r7, #20]
   10ec2:	2300      	movs	r3, #0
   10ec4:	ad06      	add	r5, sp, #24
   10ec6:	616b      	str	r3, [r5, #20]
   10ec8:	3320      	adds	r3, #32
   10eca:	766b      	strb	r3, [r5, #25]
   10ecc:	3310      	adds	r3, #16
   10ece:	76ab      	strb	r3, [r5, #26]
   10ed0:	0034      	movs	r4, r6
   10ed2:	7823      	ldrb	r3, [r4, #0]
   10ed4:	2b00      	cmp	r3, #0
   10ed6:	d147      	bne.n	10f68 <_svfiprintf_r+0xdc>
   10ed8:	1ba3      	subs	r3, r4, r6
   10eda:	9304      	str	r3, [sp, #16]
   10edc:	d00d      	beq.n	10efa <_svfiprintf_r+0x6e>
   10ede:	1ba3      	subs	r3, r4, r6
   10ee0:	0032      	movs	r2, r6
   10ee2:	0039      	movs	r1, r7
   10ee4:	9802      	ldr	r0, [sp, #8]
   10ee6:	f7ff ff6f 	bl	10dc8 <__ssputs_r>
   10eea:	1c43      	adds	r3, r0, #1
   10eec:	d100      	bne.n	10ef0 <_svfiprintf_r+0x64>
   10eee:	e0b5      	b.n	1105c <_svfiprintf_r+0x1d0>
   10ef0:	696a      	ldr	r2, [r5, #20]
   10ef2:	9b04      	ldr	r3, [sp, #16]
   10ef4:	4694      	mov	ip, r2
   10ef6:	4463      	add	r3, ip
   10ef8:	616b      	str	r3, [r5, #20]
   10efa:	7823      	ldrb	r3, [r4, #0]
   10efc:	2b00      	cmp	r3, #0
   10efe:	d100      	bne.n	10f02 <_svfiprintf_r+0x76>
   10f00:	e0ac      	b.n	1105c <_svfiprintf_r+0x1d0>
   10f02:	2201      	movs	r2, #1
   10f04:	2300      	movs	r3, #0
   10f06:	4252      	negs	r2, r2
   10f08:	606a      	str	r2, [r5, #4]
   10f0a:	a902      	add	r1, sp, #8
   10f0c:	3254      	adds	r2, #84	; 0x54
   10f0e:	1852      	adds	r2, r2, r1
   10f10:	3401      	adds	r4, #1
   10f12:	602b      	str	r3, [r5, #0]
   10f14:	60eb      	str	r3, [r5, #12]
   10f16:	60ab      	str	r3, [r5, #8]
   10f18:	7013      	strb	r3, [r2, #0]
   10f1a:	65ab      	str	r3, [r5, #88]	; 0x58
   10f1c:	4e58      	ldr	r6, [pc, #352]	; (11080 <_svfiprintf_r+0x1f4>)
   10f1e:	2205      	movs	r2, #5
   10f20:	7821      	ldrb	r1, [r4, #0]
   10f22:	0030      	movs	r0, r6
   10f24:	f000 fc6e 	bl	11804 <memchr>
   10f28:	1c62      	adds	r2, r4, #1
   10f2a:	2800      	cmp	r0, #0
   10f2c:	d120      	bne.n	10f70 <_svfiprintf_r+0xe4>
   10f2e:	6829      	ldr	r1, [r5, #0]
   10f30:	06cb      	lsls	r3, r1, #27
   10f32:	d504      	bpl.n	10f3e <_svfiprintf_r+0xb2>
   10f34:	2353      	movs	r3, #83	; 0x53
   10f36:	ae02      	add	r6, sp, #8
   10f38:	3020      	adds	r0, #32
   10f3a:	199b      	adds	r3, r3, r6
   10f3c:	7018      	strb	r0, [r3, #0]
   10f3e:	070b      	lsls	r3, r1, #28
   10f40:	d504      	bpl.n	10f4c <_svfiprintf_r+0xc0>
   10f42:	2353      	movs	r3, #83	; 0x53
   10f44:	202b      	movs	r0, #43	; 0x2b
   10f46:	ae02      	add	r6, sp, #8
   10f48:	199b      	adds	r3, r3, r6
   10f4a:	7018      	strb	r0, [r3, #0]
   10f4c:	7823      	ldrb	r3, [r4, #0]
   10f4e:	2b2a      	cmp	r3, #42	; 0x2a
   10f50:	d016      	beq.n	10f80 <_svfiprintf_r+0xf4>
   10f52:	2000      	movs	r0, #0
   10f54:	210a      	movs	r1, #10
   10f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f58:	7822      	ldrb	r2, [r4, #0]
   10f5a:	3a30      	subs	r2, #48	; 0x30
   10f5c:	2a09      	cmp	r2, #9
   10f5e:	d955      	bls.n	1100c <_svfiprintf_r+0x180>
   10f60:	2800      	cmp	r0, #0
   10f62:	d015      	beq.n	10f90 <_svfiprintf_r+0x104>
   10f64:	9309      	str	r3, [sp, #36]	; 0x24
   10f66:	e013      	b.n	10f90 <_svfiprintf_r+0x104>
   10f68:	2b25      	cmp	r3, #37	; 0x25
   10f6a:	d0b5      	beq.n	10ed8 <_svfiprintf_r+0x4c>
   10f6c:	3401      	adds	r4, #1
   10f6e:	e7b0      	b.n	10ed2 <_svfiprintf_r+0x46>
   10f70:	2301      	movs	r3, #1
   10f72:	1b80      	subs	r0, r0, r6
   10f74:	4083      	lsls	r3, r0
   10f76:	6829      	ldr	r1, [r5, #0]
   10f78:	0014      	movs	r4, r2
   10f7a:	430b      	orrs	r3, r1
   10f7c:	602b      	str	r3, [r5, #0]
   10f7e:	e7cd      	b.n	10f1c <_svfiprintf_r+0x90>
   10f80:	9b05      	ldr	r3, [sp, #20]
   10f82:	1d18      	adds	r0, r3, #4
   10f84:	681b      	ldr	r3, [r3, #0]
   10f86:	9005      	str	r0, [sp, #20]
   10f88:	2b00      	cmp	r3, #0
   10f8a:	db39      	blt.n	11000 <_svfiprintf_r+0x174>
   10f8c:	9309      	str	r3, [sp, #36]	; 0x24
   10f8e:	0014      	movs	r4, r2
   10f90:	7823      	ldrb	r3, [r4, #0]
   10f92:	2b2e      	cmp	r3, #46	; 0x2e
   10f94:	d10b      	bne.n	10fae <_svfiprintf_r+0x122>
   10f96:	7863      	ldrb	r3, [r4, #1]
   10f98:	1c62      	adds	r2, r4, #1
   10f9a:	2b2a      	cmp	r3, #42	; 0x2a
   10f9c:	d13e      	bne.n	1101c <_svfiprintf_r+0x190>
   10f9e:	9b05      	ldr	r3, [sp, #20]
   10fa0:	3402      	adds	r4, #2
   10fa2:	1d1a      	adds	r2, r3, #4
   10fa4:	681b      	ldr	r3, [r3, #0]
   10fa6:	9205      	str	r2, [sp, #20]
   10fa8:	2b00      	cmp	r3, #0
   10faa:	db34      	blt.n	11016 <_svfiprintf_r+0x18a>
   10fac:	9307      	str	r3, [sp, #28]
   10fae:	4e35      	ldr	r6, [pc, #212]	; (11084 <_svfiprintf_r+0x1f8>)
   10fb0:	7821      	ldrb	r1, [r4, #0]
   10fb2:	2203      	movs	r2, #3
   10fb4:	0030      	movs	r0, r6
   10fb6:	f000 fc25 	bl	11804 <memchr>
   10fba:	2800      	cmp	r0, #0
   10fbc:	d006      	beq.n	10fcc <_svfiprintf_r+0x140>
   10fbe:	2340      	movs	r3, #64	; 0x40
   10fc0:	1b80      	subs	r0, r0, r6
   10fc2:	4083      	lsls	r3, r0
   10fc4:	682a      	ldr	r2, [r5, #0]
   10fc6:	3401      	adds	r4, #1
   10fc8:	4313      	orrs	r3, r2
   10fca:	602b      	str	r3, [r5, #0]
   10fcc:	7821      	ldrb	r1, [r4, #0]
   10fce:	2206      	movs	r2, #6
   10fd0:	482d      	ldr	r0, [pc, #180]	; (11088 <_svfiprintf_r+0x1fc>)
   10fd2:	1c66      	adds	r6, r4, #1
   10fd4:	7629      	strb	r1, [r5, #24]
   10fd6:	f000 fc15 	bl	11804 <memchr>
   10fda:	2800      	cmp	r0, #0
   10fdc:	d046      	beq.n	1106c <_svfiprintf_r+0x1e0>
   10fde:	4b2b      	ldr	r3, [pc, #172]	; (1108c <_svfiprintf_r+0x200>)
   10fe0:	2b00      	cmp	r3, #0
   10fe2:	d12f      	bne.n	11044 <_svfiprintf_r+0x1b8>
   10fe4:	6829      	ldr	r1, [r5, #0]
   10fe6:	9b05      	ldr	r3, [sp, #20]
   10fe8:	2207      	movs	r2, #7
   10fea:	05c9      	lsls	r1, r1, #23
   10fec:	d528      	bpl.n	11040 <_svfiprintf_r+0x1b4>
   10fee:	189b      	adds	r3, r3, r2
   10ff0:	4393      	bics	r3, r2
   10ff2:	3308      	adds	r3, #8
   10ff4:	9305      	str	r3, [sp, #20]
   10ff6:	696b      	ldr	r3, [r5, #20]
   10ff8:	9a03      	ldr	r2, [sp, #12]
   10ffa:	189b      	adds	r3, r3, r2
   10ffc:	616b      	str	r3, [r5, #20]
   10ffe:	e767      	b.n	10ed0 <_svfiprintf_r+0x44>
   11000:	425b      	negs	r3, r3
   11002:	60eb      	str	r3, [r5, #12]
   11004:	2302      	movs	r3, #2
   11006:	430b      	orrs	r3, r1
   11008:	602b      	str	r3, [r5, #0]
   1100a:	e7c0      	b.n	10f8e <_svfiprintf_r+0x102>
   1100c:	434b      	muls	r3, r1
   1100e:	3401      	adds	r4, #1
   11010:	189b      	adds	r3, r3, r2
   11012:	2001      	movs	r0, #1
   11014:	e7a0      	b.n	10f58 <_svfiprintf_r+0xcc>
   11016:	2301      	movs	r3, #1
   11018:	425b      	negs	r3, r3
   1101a:	e7c7      	b.n	10fac <_svfiprintf_r+0x120>
   1101c:	2300      	movs	r3, #0
   1101e:	0014      	movs	r4, r2
   11020:	200a      	movs	r0, #10
   11022:	001a      	movs	r2, r3
   11024:	606b      	str	r3, [r5, #4]
   11026:	7821      	ldrb	r1, [r4, #0]
   11028:	3930      	subs	r1, #48	; 0x30
   1102a:	2909      	cmp	r1, #9
   1102c:	d903      	bls.n	11036 <_svfiprintf_r+0x1aa>
   1102e:	2b00      	cmp	r3, #0
   11030:	d0bd      	beq.n	10fae <_svfiprintf_r+0x122>
   11032:	9207      	str	r2, [sp, #28]
   11034:	e7bb      	b.n	10fae <_svfiprintf_r+0x122>
   11036:	4342      	muls	r2, r0
   11038:	3401      	adds	r4, #1
   1103a:	1852      	adds	r2, r2, r1
   1103c:	2301      	movs	r3, #1
   1103e:	e7f2      	b.n	11026 <_svfiprintf_r+0x19a>
   11040:	3307      	adds	r3, #7
   11042:	e7d5      	b.n	10ff0 <_svfiprintf_r+0x164>
   11044:	ab05      	add	r3, sp, #20
   11046:	9300      	str	r3, [sp, #0]
   11048:	003a      	movs	r2, r7
   1104a:	4b11      	ldr	r3, [pc, #68]	; (11090 <_svfiprintf_r+0x204>)
   1104c:	0029      	movs	r1, r5
   1104e:	9802      	ldr	r0, [sp, #8]
   11050:	e000      	b.n	11054 <_svfiprintf_r+0x1c8>
   11052:	bf00      	nop
   11054:	9003      	str	r0, [sp, #12]
   11056:	9b03      	ldr	r3, [sp, #12]
   11058:	3301      	adds	r3, #1
   1105a:	d1cc      	bne.n	10ff6 <_svfiprintf_r+0x16a>
   1105c:	89bb      	ldrh	r3, [r7, #12]
   1105e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11060:	065b      	lsls	r3, r3, #25
   11062:	d400      	bmi.n	11066 <_svfiprintf_r+0x1da>
   11064:	e729      	b.n	10eba <_svfiprintf_r+0x2e>
   11066:	2001      	movs	r0, #1
   11068:	4240      	negs	r0, r0
   1106a:	e726      	b.n	10eba <_svfiprintf_r+0x2e>
   1106c:	ab05      	add	r3, sp, #20
   1106e:	9300      	str	r3, [sp, #0]
   11070:	003a      	movs	r2, r7
   11072:	4b07      	ldr	r3, [pc, #28]	; (11090 <_svfiprintf_r+0x204>)
   11074:	0029      	movs	r1, r5
   11076:	9802      	ldr	r0, [sp, #8]
   11078:	f000 f9be 	bl	113f8 <_printf_i>
   1107c:	e7ea      	b.n	11054 <_svfiprintf_r+0x1c8>
   1107e:	46c0      	nop			; (mov r8, r8)
   11080:	00013c02 	.word	0x00013c02
   11084:	00013c08 	.word	0x00013c08
   11088:	00013c0c 	.word	0x00013c0c
   1108c:	00000000 	.word	0x00000000
   11090:	00010dc9 	.word	0x00010dc9

00011094 <__sfputc_r>:
   11094:	6893      	ldr	r3, [r2, #8]
   11096:	b510      	push	{r4, lr}
   11098:	3b01      	subs	r3, #1
   1109a:	6093      	str	r3, [r2, #8]
   1109c:	2b00      	cmp	r3, #0
   1109e:	da05      	bge.n	110ac <__sfputc_r+0x18>
   110a0:	6994      	ldr	r4, [r2, #24]
   110a2:	42a3      	cmp	r3, r4
   110a4:	db08      	blt.n	110b8 <__sfputc_r+0x24>
   110a6:	b2cb      	uxtb	r3, r1
   110a8:	2b0a      	cmp	r3, #10
   110aa:	d005      	beq.n	110b8 <__sfputc_r+0x24>
   110ac:	6813      	ldr	r3, [r2, #0]
   110ae:	1c58      	adds	r0, r3, #1
   110b0:	6010      	str	r0, [r2, #0]
   110b2:	7019      	strb	r1, [r3, #0]
   110b4:	b2c8      	uxtb	r0, r1
   110b6:	bd10      	pop	{r4, pc}
   110b8:	f7ff fbaa 	bl	10810 <__swbuf_r>
   110bc:	e7fb      	b.n	110b6 <__sfputc_r+0x22>

000110be <__sfputs_r>:
   110be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110c0:	0006      	movs	r6, r0
   110c2:	000f      	movs	r7, r1
   110c4:	0014      	movs	r4, r2
   110c6:	18d5      	adds	r5, r2, r3
   110c8:	42ac      	cmp	r4, r5
   110ca:	d101      	bne.n	110d0 <__sfputs_r+0x12>
   110cc:	2000      	movs	r0, #0
   110ce:	e007      	b.n	110e0 <__sfputs_r+0x22>
   110d0:	7821      	ldrb	r1, [r4, #0]
   110d2:	003a      	movs	r2, r7
   110d4:	0030      	movs	r0, r6
   110d6:	f7ff ffdd 	bl	11094 <__sfputc_r>
   110da:	3401      	adds	r4, #1
   110dc:	1c43      	adds	r3, r0, #1
   110de:	d1f3      	bne.n	110c8 <__sfputs_r+0xa>
   110e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000110e4 <_vfiprintf_r>:
   110e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   110e6:	b09f      	sub	sp, #124	; 0x7c
   110e8:	0006      	movs	r6, r0
   110ea:	000f      	movs	r7, r1
   110ec:	0014      	movs	r4, r2
   110ee:	9305      	str	r3, [sp, #20]
   110f0:	2800      	cmp	r0, #0
   110f2:	d004      	beq.n	110fe <_vfiprintf_r+0x1a>
   110f4:	6983      	ldr	r3, [r0, #24]
   110f6:	2b00      	cmp	r3, #0
   110f8:	d101      	bne.n	110fe <_vfiprintf_r+0x1a>
   110fa:	f7ff fd4d 	bl	10b98 <__sinit>
   110fe:	4b7f      	ldr	r3, [pc, #508]	; (112fc <_vfiprintf_r+0x218>)
   11100:	429f      	cmp	r7, r3
   11102:	d15c      	bne.n	111be <_vfiprintf_r+0xda>
   11104:	6877      	ldr	r7, [r6, #4]
   11106:	89bb      	ldrh	r3, [r7, #12]
   11108:	071b      	lsls	r3, r3, #28
   1110a:	d562      	bpl.n	111d2 <_vfiprintf_r+0xee>
   1110c:	693b      	ldr	r3, [r7, #16]
   1110e:	2b00      	cmp	r3, #0
   11110:	d05f      	beq.n	111d2 <_vfiprintf_r+0xee>
   11112:	2300      	movs	r3, #0
   11114:	ad06      	add	r5, sp, #24
   11116:	616b      	str	r3, [r5, #20]
   11118:	3320      	adds	r3, #32
   1111a:	766b      	strb	r3, [r5, #25]
   1111c:	3310      	adds	r3, #16
   1111e:	76ab      	strb	r3, [r5, #26]
   11120:	9402      	str	r4, [sp, #8]
   11122:	9c02      	ldr	r4, [sp, #8]
   11124:	7823      	ldrb	r3, [r4, #0]
   11126:	2b00      	cmp	r3, #0
   11128:	d15d      	bne.n	111e6 <_vfiprintf_r+0x102>
   1112a:	9b02      	ldr	r3, [sp, #8]
   1112c:	1ae3      	subs	r3, r4, r3
   1112e:	9304      	str	r3, [sp, #16]
   11130:	d00d      	beq.n	1114e <_vfiprintf_r+0x6a>
   11132:	9b04      	ldr	r3, [sp, #16]
   11134:	9a02      	ldr	r2, [sp, #8]
   11136:	0039      	movs	r1, r7
   11138:	0030      	movs	r0, r6
   1113a:	f7ff ffc0 	bl	110be <__sfputs_r>
   1113e:	1c43      	adds	r3, r0, #1
   11140:	d100      	bne.n	11144 <_vfiprintf_r+0x60>
   11142:	e0cc      	b.n	112de <_vfiprintf_r+0x1fa>
   11144:	696a      	ldr	r2, [r5, #20]
   11146:	9b04      	ldr	r3, [sp, #16]
   11148:	4694      	mov	ip, r2
   1114a:	4463      	add	r3, ip
   1114c:	616b      	str	r3, [r5, #20]
   1114e:	7823      	ldrb	r3, [r4, #0]
   11150:	2b00      	cmp	r3, #0
   11152:	d100      	bne.n	11156 <_vfiprintf_r+0x72>
   11154:	e0c3      	b.n	112de <_vfiprintf_r+0x1fa>
   11156:	2201      	movs	r2, #1
   11158:	2300      	movs	r3, #0
   1115a:	4252      	negs	r2, r2
   1115c:	606a      	str	r2, [r5, #4]
   1115e:	a902      	add	r1, sp, #8
   11160:	3254      	adds	r2, #84	; 0x54
   11162:	1852      	adds	r2, r2, r1
   11164:	3401      	adds	r4, #1
   11166:	602b      	str	r3, [r5, #0]
   11168:	60eb      	str	r3, [r5, #12]
   1116a:	60ab      	str	r3, [r5, #8]
   1116c:	7013      	strb	r3, [r2, #0]
   1116e:	65ab      	str	r3, [r5, #88]	; 0x58
   11170:	7821      	ldrb	r1, [r4, #0]
   11172:	2205      	movs	r2, #5
   11174:	4862      	ldr	r0, [pc, #392]	; (11300 <_vfiprintf_r+0x21c>)
   11176:	f000 fb45 	bl	11804 <memchr>
   1117a:	1c63      	adds	r3, r4, #1
   1117c:	469c      	mov	ip, r3
   1117e:	2800      	cmp	r0, #0
   11180:	d135      	bne.n	111ee <_vfiprintf_r+0x10a>
   11182:	6829      	ldr	r1, [r5, #0]
   11184:	06cb      	lsls	r3, r1, #27
   11186:	d504      	bpl.n	11192 <_vfiprintf_r+0xae>
   11188:	2353      	movs	r3, #83	; 0x53
   1118a:	aa02      	add	r2, sp, #8
   1118c:	3020      	adds	r0, #32
   1118e:	189b      	adds	r3, r3, r2
   11190:	7018      	strb	r0, [r3, #0]
   11192:	070b      	lsls	r3, r1, #28
   11194:	d504      	bpl.n	111a0 <_vfiprintf_r+0xbc>
   11196:	2353      	movs	r3, #83	; 0x53
   11198:	202b      	movs	r0, #43	; 0x2b
   1119a:	aa02      	add	r2, sp, #8
   1119c:	189b      	adds	r3, r3, r2
   1119e:	7018      	strb	r0, [r3, #0]
   111a0:	7823      	ldrb	r3, [r4, #0]
   111a2:	2b2a      	cmp	r3, #42	; 0x2a
   111a4:	d02c      	beq.n	11200 <_vfiprintf_r+0x11c>
   111a6:	2000      	movs	r0, #0
   111a8:	210a      	movs	r1, #10
   111aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111ac:	7822      	ldrb	r2, [r4, #0]
   111ae:	3a30      	subs	r2, #48	; 0x30
   111b0:	2a09      	cmp	r2, #9
   111b2:	d800      	bhi.n	111b6 <_vfiprintf_r+0xd2>
   111b4:	e06b      	b.n	1128e <_vfiprintf_r+0x1aa>
   111b6:	2800      	cmp	r0, #0
   111b8:	d02a      	beq.n	11210 <_vfiprintf_r+0x12c>
   111ba:	9309      	str	r3, [sp, #36]	; 0x24
   111bc:	e028      	b.n	11210 <_vfiprintf_r+0x12c>
   111be:	4b51      	ldr	r3, [pc, #324]	; (11304 <_vfiprintf_r+0x220>)
   111c0:	429f      	cmp	r7, r3
   111c2:	d101      	bne.n	111c8 <_vfiprintf_r+0xe4>
   111c4:	68b7      	ldr	r7, [r6, #8]
   111c6:	e79e      	b.n	11106 <_vfiprintf_r+0x22>
   111c8:	4b4f      	ldr	r3, [pc, #316]	; (11308 <_vfiprintf_r+0x224>)
   111ca:	429f      	cmp	r7, r3
   111cc:	d19b      	bne.n	11106 <_vfiprintf_r+0x22>
   111ce:	68f7      	ldr	r7, [r6, #12]
   111d0:	e799      	b.n	11106 <_vfiprintf_r+0x22>
   111d2:	0039      	movs	r1, r7
   111d4:	0030      	movs	r0, r6
   111d6:	f7ff fb71 	bl	108bc <__swsetup_r>
   111da:	2800      	cmp	r0, #0
   111dc:	d099      	beq.n	11112 <_vfiprintf_r+0x2e>
   111de:	2001      	movs	r0, #1
   111e0:	4240      	negs	r0, r0
   111e2:	b01f      	add	sp, #124	; 0x7c
   111e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111e6:	2b25      	cmp	r3, #37	; 0x25
   111e8:	d09f      	beq.n	1112a <_vfiprintf_r+0x46>
   111ea:	3401      	adds	r4, #1
   111ec:	e79a      	b.n	11124 <_vfiprintf_r+0x40>
   111ee:	4b44      	ldr	r3, [pc, #272]	; (11300 <_vfiprintf_r+0x21c>)
   111f0:	6829      	ldr	r1, [r5, #0]
   111f2:	1ac0      	subs	r0, r0, r3
   111f4:	2301      	movs	r3, #1
   111f6:	4083      	lsls	r3, r0
   111f8:	430b      	orrs	r3, r1
   111fa:	602b      	str	r3, [r5, #0]
   111fc:	4664      	mov	r4, ip
   111fe:	e7b7      	b.n	11170 <_vfiprintf_r+0x8c>
   11200:	9b05      	ldr	r3, [sp, #20]
   11202:	1d18      	adds	r0, r3, #4
   11204:	681b      	ldr	r3, [r3, #0]
   11206:	9005      	str	r0, [sp, #20]
   11208:	2b00      	cmp	r3, #0
   1120a:	db3a      	blt.n	11282 <_vfiprintf_r+0x19e>
   1120c:	9309      	str	r3, [sp, #36]	; 0x24
   1120e:	4664      	mov	r4, ip
   11210:	7823      	ldrb	r3, [r4, #0]
   11212:	2b2e      	cmp	r3, #46	; 0x2e
   11214:	d10b      	bne.n	1122e <_vfiprintf_r+0x14a>
   11216:	7863      	ldrb	r3, [r4, #1]
   11218:	1c62      	adds	r2, r4, #1
   1121a:	2b2a      	cmp	r3, #42	; 0x2a
   1121c:	d13f      	bne.n	1129e <_vfiprintf_r+0x1ba>
   1121e:	9b05      	ldr	r3, [sp, #20]
   11220:	3402      	adds	r4, #2
   11222:	1d1a      	adds	r2, r3, #4
   11224:	681b      	ldr	r3, [r3, #0]
   11226:	9205      	str	r2, [sp, #20]
   11228:	2b00      	cmp	r3, #0
   1122a:	db35      	blt.n	11298 <_vfiprintf_r+0x1b4>
   1122c:	9307      	str	r3, [sp, #28]
   1122e:	7821      	ldrb	r1, [r4, #0]
   11230:	2203      	movs	r2, #3
   11232:	4836      	ldr	r0, [pc, #216]	; (1130c <_vfiprintf_r+0x228>)
   11234:	f000 fae6 	bl	11804 <memchr>
   11238:	2800      	cmp	r0, #0
   1123a:	d007      	beq.n	1124c <_vfiprintf_r+0x168>
   1123c:	4b33      	ldr	r3, [pc, #204]	; (1130c <_vfiprintf_r+0x228>)
   1123e:	682a      	ldr	r2, [r5, #0]
   11240:	1ac0      	subs	r0, r0, r3
   11242:	2340      	movs	r3, #64	; 0x40
   11244:	4083      	lsls	r3, r0
   11246:	4313      	orrs	r3, r2
   11248:	602b      	str	r3, [r5, #0]
   1124a:	3401      	adds	r4, #1
   1124c:	7821      	ldrb	r1, [r4, #0]
   1124e:	1c63      	adds	r3, r4, #1
   11250:	2206      	movs	r2, #6
   11252:	482f      	ldr	r0, [pc, #188]	; (11310 <_vfiprintf_r+0x22c>)
   11254:	9302      	str	r3, [sp, #8]
   11256:	7629      	strb	r1, [r5, #24]
   11258:	f000 fad4 	bl	11804 <memchr>
   1125c:	2800      	cmp	r0, #0
   1125e:	d044      	beq.n	112ea <_vfiprintf_r+0x206>
   11260:	4b2c      	ldr	r3, [pc, #176]	; (11314 <_vfiprintf_r+0x230>)
   11262:	2b00      	cmp	r3, #0
   11264:	d12f      	bne.n	112c6 <_vfiprintf_r+0x1e2>
   11266:	6829      	ldr	r1, [r5, #0]
   11268:	9b05      	ldr	r3, [sp, #20]
   1126a:	2207      	movs	r2, #7
   1126c:	05c9      	lsls	r1, r1, #23
   1126e:	d528      	bpl.n	112c2 <_vfiprintf_r+0x1de>
   11270:	189b      	adds	r3, r3, r2
   11272:	4393      	bics	r3, r2
   11274:	3308      	adds	r3, #8
   11276:	9305      	str	r3, [sp, #20]
   11278:	696b      	ldr	r3, [r5, #20]
   1127a:	9a03      	ldr	r2, [sp, #12]
   1127c:	189b      	adds	r3, r3, r2
   1127e:	616b      	str	r3, [r5, #20]
   11280:	e74f      	b.n	11122 <_vfiprintf_r+0x3e>
   11282:	425b      	negs	r3, r3
   11284:	60eb      	str	r3, [r5, #12]
   11286:	2302      	movs	r3, #2
   11288:	430b      	orrs	r3, r1
   1128a:	602b      	str	r3, [r5, #0]
   1128c:	e7bf      	b.n	1120e <_vfiprintf_r+0x12a>
   1128e:	434b      	muls	r3, r1
   11290:	3401      	adds	r4, #1
   11292:	189b      	adds	r3, r3, r2
   11294:	2001      	movs	r0, #1
   11296:	e789      	b.n	111ac <_vfiprintf_r+0xc8>
   11298:	2301      	movs	r3, #1
   1129a:	425b      	negs	r3, r3
   1129c:	e7c6      	b.n	1122c <_vfiprintf_r+0x148>
   1129e:	2300      	movs	r3, #0
   112a0:	0014      	movs	r4, r2
   112a2:	200a      	movs	r0, #10
   112a4:	001a      	movs	r2, r3
   112a6:	606b      	str	r3, [r5, #4]
   112a8:	7821      	ldrb	r1, [r4, #0]
   112aa:	3930      	subs	r1, #48	; 0x30
   112ac:	2909      	cmp	r1, #9
   112ae:	d903      	bls.n	112b8 <_vfiprintf_r+0x1d4>
   112b0:	2b00      	cmp	r3, #0
   112b2:	d0bc      	beq.n	1122e <_vfiprintf_r+0x14a>
   112b4:	9207      	str	r2, [sp, #28]
   112b6:	e7ba      	b.n	1122e <_vfiprintf_r+0x14a>
   112b8:	4342      	muls	r2, r0
   112ba:	3401      	adds	r4, #1
   112bc:	1852      	adds	r2, r2, r1
   112be:	2301      	movs	r3, #1
   112c0:	e7f2      	b.n	112a8 <_vfiprintf_r+0x1c4>
   112c2:	3307      	adds	r3, #7
   112c4:	e7d5      	b.n	11272 <_vfiprintf_r+0x18e>
   112c6:	ab05      	add	r3, sp, #20
   112c8:	9300      	str	r3, [sp, #0]
   112ca:	003a      	movs	r2, r7
   112cc:	4b12      	ldr	r3, [pc, #72]	; (11318 <_vfiprintf_r+0x234>)
   112ce:	0029      	movs	r1, r5
   112d0:	0030      	movs	r0, r6
   112d2:	e000      	b.n	112d6 <_vfiprintf_r+0x1f2>
   112d4:	bf00      	nop
   112d6:	9003      	str	r0, [sp, #12]
   112d8:	9b03      	ldr	r3, [sp, #12]
   112da:	3301      	adds	r3, #1
   112dc:	d1cc      	bne.n	11278 <_vfiprintf_r+0x194>
   112de:	89bb      	ldrh	r3, [r7, #12]
   112e0:	065b      	lsls	r3, r3, #25
   112e2:	d500      	bpl.n	112e6 <_vfiprintf_r+0x202>
   112e4:	e77b      	b.n	111de <_vfiprintf_r+0xfa>
   112e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   112e8:	e77b      	b.n	111e2 <_vfiprintf_r+0xfe>
   112ea:	ab05      	add	r3, sp, #20
   112ec:	9300      	str	r3, [sp, #0]
   112ee:	003a      	movs	r2, r7
   112f0:	4b09      	ldr	r3, [pc, #36]	; (11318 <_vfiprintf_r+0x234>)
   112f2:	0029      	movs	r1, r5
   112f4:	0030      	movs	r0, r6
   112f6:	f000 f87f 	bl	113f8 <_printf_i>
   112fa:	e7ec      	b.n	112d6 <_vfiprintf_r+0x1f2>
   112fc:	00013bb8 	.word	0x00013bb8
   11300:	00013c02 	.word	0x00013c02
   11304:	00013bd8 	.word	0x00013bd8
   11308:	00013b98 	.word	0x00013b98
   1130c:	00013c08 	.word	0x00013c08
   11310:	00013c0c 	.word	0x00013c0c
   11314:	00000000 	.word	0x00000000
   11318:	000110bf 	.word	0x000110bf

0001131c <_printf_common>:
   1131c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1131e:	0015      	movs	r5, r2
   11320:	9301      	str	r3, [sp, #4]
   11322:	688a      	ldr	r2, [r1, #8]
   11324:	690b      	ldr	r3, [r1, #16]
   11326:	9000      	str	r0, [sp, #0]
   11328:	000c      	movs	r4, r1
   1132a:	4293      	cmp	r3, r2
   1132c:	da00      	bge.n	11330 <_printf_common+0x14>
   1132e:	0013      	movs	r3, r2
   11330:	0022      	movs	r2, r4
   11332:	602b      	str	r3, [r5, #0]
   11334:	3243      	adds	r2, #67	; 0x43
   11336:	7812      	ldrb	r2, [r2, #0]
   11338:	2a00      	cmp	r2, #0
   1133a:	d001      	beq.n	11340 <_printf_common+0x24>
   1133c:	3301      	adds	r3, #1
   1133e:	602b      	str	r3, [r5, #0]
   11340:	6823      	ldr	r3, [r4, #0]
   11342:	069b      	lsls	r3, r3, #26
   11344:	d502      	bpl.n	1134c <_printf_common+0x30>
   11346:	682b      	ldr	r3, [r5, #0]
   11348:	3302      	adds	r3, #2
   1134a:	602b      	str	r3, [r5, #0]
   1134c:	2706      	movs	r7, #6
   1134e:	6823      	ldr	r3, [r4, #0]
   11350:	401f      	ands	r7, r3
   11352:	d027      	beq.n	113a4 <_printf_common+0x88>
   11354:	0023      	movs	r3, r4
   11356:	3343      	adds	r3, #67	; 0x43
   11358:	781b      	ldrb	r3, [r3, #0]
   1135a:	1e5a      	subs	r2, r3, #1
   1135c:	4193      	sbcs	r3, r2
   1135e:	6822      	ldr	r2, [r4, #0]
   11360:	0692      	lsls	r2, r2, #26
   11362:	d430      	bmi.n	113c6 <_printf_common+0xaa>
   11364:	0022      	movs	r2, r4
   11366:	9901      	ldr	r1, [sp, #4]
   11368:	3243      	adds	r2, #67	; 0x43
   1136a:	9800      	ldr	r0, [sp, #0]
   1136c:	9e08      	ldr	r6, [sp, #32]
   1136e:	47b0      	blx	r6
   11370:	1c43      	adds	r3, r0, #1
   11372:	d025      	beq.n	113c0 <_printf_common+0xa4>
   11374:	2306      	movs	r3, #6
   11376:	6820      	ldr	r0, [r4, #0]
   11378:	682a      	ldr	r2, [r5, #0]
   1137a:	68e1      	ldr	r1, [r4, #12]
   1137c:	4003      	ands	r3, r0
   1137e:	2500      	movs	r5, #0
   11380:	2b04      	cmp	r3, #4
   11382:	d103      	bne.n	1138c <_printf_common+0x70>
   11384:	1a8d      	subs	r5, r1, r2
   11386:	43eb      	mvns	r3, r5
   11388:	17db      	asrs	r3, r3, #31
   1138a:	401d      	ands	r5, r3
   1138c:	68a3      	ldr	r3, [r4, #8]
   1138e:	6922      	ldr	r2, [r4, #16]
   11390:	4293      	cmp	r3, r2
   11392:	dd01      	ble.n	11398 <_printf_common+0x7c>
   11394:	1a9b      	subs	r3, r3, r2
   11396:	18ed      	adds	r5, r5, r3
   11398:	2700      	movs	r7, #0
   1139a:	42bd      	cmp	r5, r7
   1139c:	d120      	bne.n	113e0 <_printf_common+0xc4>
   1139e:	2000      	movs	r0, #0
   113a0:	e010      	b.n	113c4 <_printf_common+0xa8>
   113a2:	3701      	adds	r7, #1
   113a4:	68e3      	ldr	r3, [r4, #12]
   113a6:	682a      	ldr	r2, [r5, #0]
   113a8:	1a9b      	subs	r3, r3, r2
   113aa:	429f      	cmp	r7, r3
   113ac:	dad2      	bge.n	11354 <_printf_common+0x38>
   113ae:	0022      	movs	r2, r4
   113b0:	2301      	movs	r3, #1
   113b2:	3219      	adds	r2, #25
   113b4:	9901      	ldr	r1, [sp, #4]
   113b6:	9800      	ldr	r0, [sp, #0]
   113b8:	9e08      	ldr	r6, [sp, #32]
   113ba:	47b0      	blx	r6
   113bc:	1c43      	adds	r3, r0, #1
   113be:	d1f0      	bne.n	113a2 <_printf_common+0x86>
   113c0:	2001      	movs	r0, #1
   113c2:	4240      	negs	r0, r0
   113c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   113c6:	2030      	movs	r0, #48	; 0x30
   113c8:	18e1      	adds	r1, r4, r3
   113ca:	3143      	adds	r1, #67	; 0x43
   113cc:	7008      	strb	r0, [r1, #0]
   113ce:	0021      	movs	r1, r4
   113d0:	1c5a      	adds	r2, r3, #1
   113d2:	3145      	adds	r1, #69	; 0x45
   113d4:	7809      	ldrb	r1, [r1, #0]
   113d6:	18a2      	adds	r2, r4, r2
   113d8:	3243      	adds	r2, #67	; 0x43
   113da:	3302      	adds	r3, #2
   113dc:	7011      	strb	r1, [r2, #0]
   113de:	e7c1      	b.n	11364 <_printf_common+0x48>
   113e0:	0022      	movs	r2, r4
   113e2:	2301      	movs	r3, #1
   113e4:	321a      	adds	r2, #26
   113e6:	9901      	ldr	r1, [sp, #4]
   113e8:	9800      	ldr	r0, [sp, #0]
   113ea:	9e08      	ldr	r6, [sp, #32]
   113ec:	47b0      	blx	r6
   113ee:	1c43      	adds	r3, r0, #1
   113f0:	d0e6      	beq.n	113c0 <_printf_common+0xa4>
   113f2:	3701      	adds	r7, #1
   113f4:	e7d1      	b.n	1139a <_printf_common+0x7e>
	...

000113f8 <_printf_i>:
   113f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   113fa:	b08b      	sub	sp, #44	; 0x2c
   113fc:	9206      	str	r2, [sp, #24]
   113fe:	000a      	movs	r2, r1
   11400:	3243      	adds	r2, #67	; 0x43
   11402:	9307      	str	r3, [sp, #28]
   11404:	9005      	str	r0, [sp, #20]
   11406:	9204      	str	r2, [sp, #16]
   11408:	7e0a      	ldrb	r2, [r1, #24]
   1140a:	000c      	movs	r4, r1
   1140c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1140e:	2a6e      	cmp	r2, #110	; 0x6e
   11410:	d100      	bne.n	11414 <_printf_i+0x1c>
   11412:	e08f      	b.n	11534 <_printf_i+0x13c>
   11414:	d817      	bhi.n	11446 <_printf_i+0x4e>
   11416:	2a63      	cmp	r2, #99	; 0x63
   11418:	d02c      	beq.n	11474 <_printf_i+0x7c>
   1141a:	d808      	bhi.n	1142e <_printf_i+0x36>
   1141c:	2a00      	cmp	r2, #0
   1141e:	d100      	bne.n	11422 <_printf_i+0x2a>
   11420:	e099      	b.n	11556 <_printf_i+0x15e>
   11422:	2a58      	cmp	r2, #88	; 0x58
   11424:	d054      	beq.n	114d0 <_printf_i+0xd8>
   11426:	0026      	movs	r6, r4
   11428:	3642      	adds	r6, #66	; 0x42
   1142a:	7032      	strb	r2, [r6, #0]
   1142c:	e029      	b.n	11482 <_printf_i+0x8a>
   1142e:	2a64      	cmp	r2, #100	; 0x64
   11430:	d001      	beq.n	11436 <_printf_i+0x3e>
   11432:	2a69      	cmp	r2, #105	; 0x69
   11434:	d1f7      	bne.n	11426 <_printf_i+0x2e>
   11436:	6821      	ldr	r1, [r4, #0]
   11438:	681a      	ldr	r2, [r3, #0]
   1143a:	0608      	lsls	r0, r1, #24
   1143c:	d523      	bpl.n	11486 <_printf_i+0x8e>
   1143e:	1d11      	adds	r1, r2, #4
   11440:	6019      	str	r1, [r3, #0]
   11442:	6815      	ldr	r5, [r2, #0]
   11444:	e025      	b.n	11492 <_printf_i+0x9a>
   11446:	2a73      	cmp	r2, #115	; 0x73
   11448:	d100      	bne.n	1144c <_printf_i+0x54>
   1144a:	e088      	b.n	1155e <_printf_i+0x166>
   1144c:	d808      	bhi.n	11460 <_printf_i+0x68>
   1144e:	2a6f      	cmp	r2, #111	; 0x6f
   11450:	d029      	beq.n	114a6 <_printf_i+0xae>
   11452:	2a70      	cmp	r2, #112	; 0x70
   11454:	d1e7      	bne.n	11426 <_printf_i+0x2e>
   11456:	2220      	movs	r2, #32
   11458:	6809      	ldr	r1, [r1, #0]
   1145a:	430a      	orrs	r2, r1
   1145c:	6022      	str	r2, [r4, #0]
   1145e:	e003      	b.n	11468 <_printf_i+0x70>
   11460:	2a75      	cmp	r2, #117	; 0x75
   11462:	d020      	beq.n	114a6 <_printf_i+0xae>
   11464:	2a78      	cmp	r2, #120	; 0x78
   11466:	d1de      	bne.n	11426 <_printf_i+0x2e>
   11468:	0022      	movs	r2, r4
   1146a:	2178      	movs	r1, #120	; 0x78
   1146c:	3245      	adds	r2, #69	; 0x45
   1146e:	7011      	strb	r1, [r2, #0]
   11470:	4a6c      	ldr	r2, [pc, #432]	; (11624 <_printf_i+0x22c>)
   11472:	e030      	b.n	114d6 <_printf_i+0xde>
   11474:	000e      	movs	r6, r1
   11476:	681a      	ldr	r2, [r3, #0]
   11478:	3642      	adds	r6, #66	; 0x42
   1147a:	1d11      	adds	r1, r2, #4
   1147c:	6019      	str	r1, [r3, #0]
   1147e:	6813      	ldr	r3, [r2, #0]
   11480:	7033      	strb	r3, [r6, #0]
   11482:	2301      	movs	r3, #1
   11484:	e079      	b.n	1157a <_printf_i+0x182>
   11486:	0649      	lsls	r1, r1, #25
   11488:	d5d9      	bpl.n	1143e <_printf_i+0x46>
   1148a:	1d11      	adds	r1, r2, #4
   1148c:	6019      	str	r1, [r3, #0]
   1148e:	2300      	movs	r3, #0
   11490:	5ed5      	ldrsh	r5, [r2, r3]
   11492:	2d00      	cmp	r5, #0
   11494:	da03      	bge.n	1149e <_printf_i+0xa6>
   11496:	232d      	movs	r3, #45	; 0x2d
   11498:	9a04      	ldr	r2, [sp, #16]
   1149a:	426d      	negs	r5, r5
   1149c:	7013      	strb	r3, [r2, #0]
   1149e:	4b62      	ldr	r3, [pc, #392]	; (11628 <_printf_i+0x230>)
   114a0:	270a      	movs	r7, #10
   114a2:	9303      	str	r3, [sp, #12]
   114a4:	e02f      	b.n	11506 <_printf_i+0x10e>
   114a6:	6820      	ldr	r0, [r4, #0]
   114a8:	6819      	ldr	r1, [r3, #0]
   114aa:	0605      	lsls	r5, r0, #24
   114ac:	d503      	bpl.n	114b6 <_printf_i+0xbe>
   114ae:	1d08      	adds	r0, r1, #4
   114b0:	6018      	str	r0, [r3, #0]
   114b2:	680d      	ldr	r5, [r1, #0]
   114b4:	e005      	b.n	114c2 <_printf_i+0xca>
   114b6:	0640      	lsls	r0, r0, #25
   114b8:	d5f9      	bpl.n	114ae <_printf_i+0xb6>
   114ba:	680d      	ldr	r5, [r1, #0]
   114bc:	1d08      	adds	r0, r1, #4
   114be:	6018      	str	r0, [r3, #0]
   114c0:	b2ad      	uxth	r5, r5
   114c2:	4b59      	ldr	r3, [pc, #356]	; (11628 <_printf_i+0x230>)
   114c4:	2708      	movs	r7, #8
   114c6:	9303      	str	r3, [sp, #12]
   114c8:	2a6f      	cmp	r2, #111	; 0x6f
   114ca:	d018      	beq.n	114fe <_printf_i+0x106>
   114cc:	270a      	movs	r7, #10
   114ce:	e016      	b.n	114fe <_printf_i+0x106>
   114d0:	3145      	adds	r1, #69	; 0x45
   114d2:	700a      	strb	r2, [r1, #0]
   114d4:	4a54      	ldr	r2, [pc, #336]	; (11628 <_printf_i+0x230>)
   114d6:	9203      	str	r2, [sp, #12]
   114d8:	681a      	ldr	r2, [r3, #0]
   114da:	6821      	ldr	r1, [r4, #0]
   114dc:	1d10      	adds	r0, r2, #4
   114de:	6018      	str	r0, [r3, #0]
   114e0:	6815      	ldr	r5, [r2, #0]
   114e2:	0608      	lsls	r0, r1, #24
   114e4:	d522      	bpl.n	1152c <_printf_i+0x134>
   114e6:	07cb      	lsls	r3, r1, #31
   114e8:	d502      	bpl.n	114f0 <_printf_i+0xf8>
   114ea:	2320      	movs	r3, #32
   114ec:	4319      	orrs	r1, r3
   114ee:	6021      	str	r1, [r4, #0]
   114f0:	2710      	movs	r7, #16
   114f2:	2d00      	cmp	r5, #0
   114f4:	d103      	bne.n	114fe <_printf_i+0x106>
   114f6:	2320      	movs	r3, #32
   114f8:	6822      	ldr	r2, [r4, #0]
   114fa:	439a      	bics	r2, r3
   114fc:	6022      	str	r2, [r4, #0]
   114fe:	0023      	movs	r3, r4
   11500:	2200      	movs	r2, #0
   11502:	3343      	adds	r3, #67	; 0x43
   11504:	701a      	strb	r2, [r3, #0]
   11506:	6863      	ldr	r3, [r4, #4]
   11508:	60a3      	str	r3, [r4, #8]
   1150a:	2b00      	cmp	r3, #0
   1150c:	db5c      	blt.n	115c8 <_printf_i+0x1d0>
   1150e:	2204      	movs	r2, #4
   11510:	6821      	ldr	r1, [r4, #0]
   11512:	4391      	bics	r1, r2
   11514:	6021      	str	r1, [r4, #0]
   11516:	2d00      	cmp	r5, #0
   11518:	d158      	bne.n	115cc <_printf_i+0x1d4>
   1151a:	9e04      	ldr	r6, [sp, #16]
   1151c:	2b00      	cmp	r3, #0
   1151e:	d064      	beq.n	115ea <_printf_i+0x1f2>
   11520:	0026      	movs	r6, r4
   11522:	9b03      	ldr	r3, [sp, #12]
   11524:	3642      	adds	r6, #66	; 0x42
   11526:	781b      	ldrb	r3, [r3, #0]
   11528:	7033      	strb	r3, [r6, #0]
   1152a:	e05e      	b.n	115ea <_printf_i+0x1f2>
   1152c:	0648      	lsls	r0, r1, #25
   1152e:	d5da      	bpl.n	114e6 <_printf_i+0xee>
   11530:	b2ad      	uxth	r5, r5
   11532:	e7d8      	b.n	114e6 <_printf_i+0xee>
   11534:	6809      	ldr	r1, [r1, #0]
   11536:	681a      	ldr	r2, [r3, #0]
   11538:	0608      	lsls	r0, r1, #24
   1153a:	d505      	bpl.n	11548 <_printf_i+0x150>
   1153c:	1d11      	adds	r1, r2, #4
   1153e:	6019      	str	r1, [r3, #0]
   11540:	6813      	ldr	r3, [r2, #0]
   11542:	6962      	ldr	r2, [r4, #20]
   11544:	601a      	str	r2, [r3, #0]
   11546:	e006      	b.n	11556 <_printf_i+0x15e>
   11548:	0649      	lsls	r1, r1, #25
   1154a:	d5f7      	bpl.n	1153c <_printf_i+0x144>
   1154c:	1d11      	adds	r1, r2, #4
   1154e:	6019      	str	r1, [r3, #0]
   11550:	6813      	ldr	r3, [r2, #0]
   11552:	8aa2      	ldrh	r2, [r4, #20]
   11554:	801a      	strh	r2, [r3, #0]
   11556:	2300      	movs	r3, #0
   11558:	9e04      	ldr	r6, [sp, #16]
   1155a:	6123      	str	r3, [r4, #16]
   1155c:	e054      	b.n	11608 <_printf_i+0x210>
   1155e:	681a      	ldr	r2, [r3, #0]
   11560:	1d11      	adds	r1, r2, #4
   11562:	6019      	str	r1, [r3, #0]
   11564:	6816      	ldr	r6, [r2, #0]
   11566:	2100      	movs	r1, #0
   11568:	6862      	ldr	r2, [r4, #4]
   1156a:	0030      	movs	r0, r6
   1156c:	f000 f94a 	bl	11804 <memchr>
   11570:	2800      	cmp	r0, #0
   11572:	d001      	beq.n	11578 <_printf_i+0x180>
   11574:	1b80      	subs	r0, r0, r6
   11576:	6060      	str	r0, [r4, #4]
   11578:	6863      	ldr	r3, [r4, #4]
   1157a:	6123      	str	r3, [r4, #16]
   1157c:	2300      	movs	r3, #0
   1157e:	9a04      	ldr	r2, [sp, #16]
   11580:	7013      	strb	r3, [r2, #0]
   11582:	e041      	b.n	11608 <_printf_i+0x210>
   11584:	6923      	ldr	r3, [r4, #16]
   11586:	0032      	movs	r2, r6
   11588:	9906      	ldr	r1, [sp, #24]
   1158a:	9805      	ldr	r0, [sp, #20]
   1158c:	9d07      	ldr	r5, [sp, #28]
   1158e:	47a8      	blx	r5
   11590:	1c43      	adds	r3, r0, #1
   11592:	d043      	beq.n	1161c <_printf_i+0x224>
   11594:	6823      	ldr	r3, [r4, #0]
   11596:	2500      	movs	r5, #0
   11598:	079b      	lsls	r3, r3, #30
   1159a:	d40f      	bmi.n	115bc <_printf_i+0x1c4>
   1159c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1159e:	68e0      	ldr	r0, [r4, #12]
   115a0:	4298      	cmp	r0, r3
   115a2:	da3d      	bge.n	11620 <_printf_i+0x228>
   115a4:	0018      	movs	r0, r3
   115a6:	e03b      	b.n	11620 <_printf_i+0x228>
   115a8:	0022      	movs	r2, r4
   115aa:	2301      	movs	r3, #1
   115ac:	3219      	adds	r2, #25
   115ae:	9906      	ldr	r1, [sp, #24]
   115b0:	9805      	ldr	r0, [sp, #20]
   115b2:	9e07      	ldr	r6, [sp, #28]
   115b4:	47b0      	blx	r6
   115b6:	1c43      	adds	r3, r0, #1
   115b8:	d030      	beq.n	1161c <_printf_i+0x224>
   115ba:	3501      	adds	r5, #1
   115bc:	68e3      	ldr	r3, [r4, #12]
   115be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   115c0:	1a9b      	subs	r3, r3, r2
   115c2:	429d      	cmp	r5, r3
   115c4:	dbf0      	blt.n	115a8 <_printf_i+0x1b0>
   115c6:	e7e9      	b.n	1159c <_printf_i+0x1a4>
   115c8:	2d00      	cmp	r5, #0
   115ca:	d0a9      	beq.n	11520 <_printf_i+0x128>
   115cc:	9e04      	ldr	r6, [sp, #16]
   115ce:	0028      	movs	r0, r5
   115d0:	0039      	movs	r1, r7
   115d2:	f7fd f819 	bl	e608 <__aeabi_uidivmod>
   115d6:	9b03      	ldr	r3, [sp, #12]
   115d8:	3e01      	subs	r6, #1
   115da:	5c5b      	ldrb	r3, [r3, r1]
   115dc:	0028      	movs	r0, r5
   115de:	7033      	strb	r3, [r6, #0]
   115e0:	0039      	movs	r1, r7
   115e2:	f7fc ff8b 	bl	e4fc <__udivsi3>
   115e6:	1e05      	subs	r5, r0, #0
   115e8:	d1f1      	bne.n	115ce <_printf_i+0x1d6>
   115ea:	2f08      	cmp	r7, #8
   115ec:	d109      	bne.n	11602 <_printf_i+0x20a>
   115ee:	6823      	ldr	r3, [r4, #0]
   115f0:	07db      	lsls	r3, r3, #31
   115f2:	d506      	bpl.n	11602 <_printf_i+0x20a>
   115f4:	6863      	ldr	r3, [r4, #4]
   115f6:	6922      	ldr	r2, [r4, #16]
   115f8:	4293      	cmp	r3, r2
   115fa:	dc02      	bgt.n	11602 <_printf_i+0x20a>
   115fc:	2330      	movs	r3, #48	; 0x30
   115fe:	3e01      	subs	r6, #1
   11600:	7033      	strb	r3, [r6, #0]
   11602:	9b04      	ldr	r3, [sp, #16]
   11604:	1b9b      	subs	r3, r3, r6
   11606:	6123      	str	r3, [r4, #16]
   11608:	9b07      	ldr	r3, [sp, #28]
   1160a:	aa09      	add	r2, sp, #36	; 0x24
   1160c:	9300      	str	r3, [sp, #0]
   1160e:	0021      	movs	r1, r4
   11610:	9b06      	ldr	r3, [sp, #24]
   11612:	9805      	ldr	r0, [sp, #20]
   11614:	f7ff fe82 	bl	1131c <_printf_common>
   11618:	1c43      	adds	r3, r0, #1
   1161a:	d1b3      	bne.n	11584 <_printf_i+0x18c>
   1161c:	2001      	movs	r0, #1
   1161e:	4240      	negs	r0, r0
   11620:	b00b      	add	sp, #44	; 0x2c
   11622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11624:	00013c24 	.word	0x00013c24
   11628:	00013c13 	.word	0x00013c13

0001162c <_putc_r>:
   1162c:	b570      	push	{r4, r5, r6, lr}
   1162e:	0006      	movs	r6, r0
   11630:	000d      	movs	r5, r1
   11632:	0014      	movs	r4, r2
   11634:	2800      	cmp	r0, #0
   11636:	d004      	beq.n	11642 <_putc_r+0x16>
   11638:	6983      	ldr	r3, [r0, #24]
   1163a:	2b00      	cmp	r3, #0
   1163c:	d101      	bne.n	11642 <_putc_r+0x16>
   1163e:	f7ff faab 	bl	10b98 <__sinit>
   11642:	4b12      	ldr	r3, [pc, #72]	; (1168c <_putc_r+0x60>)
   11644:	429c      	cmp	r4, r3
   11646:	d111      	bne.n	1166c <_putc_r+0x40>
   11648:	6874      	ldr	r4, [r6, #4]
   1164a:	68a3      	ldr	r3, [r4, #8]
   1164c:	3b01      	subs	r3, #1
   1164e:	60a3      	str	r3, [r4, #8]
   11650:	2b00      	cmp	r3, #0
   11652:	da05      	bge.n	11660 <_putc_r+0x34>
   11654:	69a2      	ldr	r2, [r4, #24]
   11656:	4293      	cmp	r3, r2
   11658:	db12      	blt.n	11680 <_putc_r+0x54>
   1165a:	b2eb      	uxtb	r3, r5
   1165c:	2b0a      	cmp	r3, #10
   1165e:	d00f      	beq.n	11680 <_putc_r+0x54>
   11660:	6823      	ldr	r3, [r4, #0]
   11662:	b2e8      	uxtb	r0, r5
   11664:	1c5a      	adds	r2, r3, #1
   11666:	6022      	str	r2, [r4, #0]
   11668:	701d      	strb	r5, [r3, #0]
   1166a:	bd70      	pop	{r4, r5, r6, pc}
   1166c:	4b08      	ldr	r3, [pc, #32]	; (11690 <_putc_r+0x64>)
   1166e:	429c      	cmp	r4, r3
   11670:	d101      	bne.n	11676 <_putc_r+0x4a>
   11672:	68b4      	ldr	r4, [r6, #8]
   11674:	e7e9      	b.n	1164a <_putc_r+0x1e>
   11676:	4b07      	ldr	r3, [pc, #28]	; (11694 <_putc_r+0x68>)
   11678:	429c      	cmp	r4, r3
   1167a:	d1e6      	bne.n	1164a <_putc_r+0x1e>
   1167c:	68f4      	ldr	r4, [r6, #12]
   1167e:	e7e4      	b.n	1164a <_putc_r+0x1e>
   11680:	0022      	movs	r2, r4
   11682:	0029      	movs	r1, r5
   11684:	0030      	movs	r0, r6
   11686:	f7ff f8c3 	bl	10810 <__swbuf_r>
   1168a:	e7ee      	b.n	1166a <_putc_r+0x3e>
   1168c:	00013bb8 	.word	0x00013bb8
   11690:	00013bd8 	.word	0x00013bd8
   11694:	00013b98 	.word	0x00013b98

00011698 <__sread>:
   11698:	b570      	push	{r4, r5, r6, lr}
   1169a:	000c      	movs	r4, r1
   1169c:	250e      	movs	r5, #14
   1169e:	5f49      	ldrsh	r1, [r1, r5]
   116a0:	f000 f8e2 	bl	11868 <_read_r>
   116a4:	2800      	cmp	r0, #0
   116a6:	db03      	blt.n	116b0 <__sread+0x18>
   116a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   116aa:	181b      	adds	r3, r3, r0
   116ac:	6563      	str	r3, [r4, #84]	; 0x54
   116ae:	bd70      	pop	{r4, r5, r6, pc}
   116b0:	89a3      	ldrh	r3, [r4, #12]
   116b2:	4a02      	ldr	r2, [pc, #8]	; (116bc <__sread+0x24>)
   116b4:	4013      	ands	r3, r2
   116b6:	81a3      	strh	r3, [r4, #12]
   116b8:	e7f9      	b.n	116ae <__sread+0x16>
   116ba:	46c0      	nop			; (mov r8, r8)
   116bc:	ffffefff 	.word	0xffffefff

000116c0 <__swrite>:
   116c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116c2:	001f      	movs	r7, r3
   116c4:	898b      	ldrh	r3, [r1, #12]
   116c6:	0005      	movs	r5, r0
   116c8:	000c      	movs	r4, r1
   116ca:	0016      	movs	r6, r2
   116cc:	05db      	lsls	r3, r3, #23
   116ce:	d505      	bpl.n	116dc <__swrite+0x1c>
   116d0:	230e      	movs	r3, #14
   116d2:	5ec9      	ldrsh	r1, [r1, r3]
   116d4:	2200      	movs	r2, #0
   116d6:	2302      	movs	r3, #2
   116d8:	f000 f880 	bl	117dc <_lseek_r>
   116dc:	89a3      	ldrh	r3, [r4, #12]
   116de:	4a05      	ldr	r2, [pc, #20]	; (116f4 <__swrite+0x34>)
   116e0:	0028      	movs	r0, r5
   116e2:	4013      	ands	r3, r2
   116e4:	81a3      	strh	r3, [r4, #12]
   116e6:	0032      	movs	r2, r6
   116e8:	230e      	movs	r3, #14
   116ea:	5ee1      	ldrsh	r1, [r4, r3]
   116ec:	003b      	movs	r3, r7
   116ee:	f000 f82b 	bl	11748 <_write_r>
   116f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116f4:	ffffefff 	.word	0xffffefff

000116f8 <__sseek>:
   116f8:	b570      	push	{r4, r5, r6, lr}
   116fa:	000c      	movs	r4, r1
   116fc:	250e      	movs	r5, #14
   116fe:	5f49      	ldrsh	r1, [r1, r5]
   11700:	f000 f86c 	bl	117dc <_lseek_r>
   11704:	89a3      	ldrh	r3, [r4, #12]
   11706:	1c42      	adds	r2, r0, #1
   11708:	d103      	bne.n	11712 <__sseek+0x1a>
   1170a:	4a05      	ldr	r2, [pc, #20]	; (11720 <__sseek+0x28>)
   1170c:	4013      	ands	r3, r2
   1170e:	81a3      	strh	r3, [r4, #12]
   11710:	bd70      	pop	{r4, r5, r6, pc}
   11712:	2280      	movs	r2, #128	; 0x80
   11714:	0152      	lsls	r2, r2, #5
   11716:	4313      	orrs	r3, r2
   11718:	81a3      	strh	r3, [r4, #12]
   1171a:	6560      	str	r0, [r4, #84]	; 0x54
   1171c:	e7f8      	b.n	11710 <__sseek+0x18>
   1171e:	46c0      	nop			; (mov r8, r8)
   11720:	ffffefff 	.word	0xffffefff

00011724 <__sclose>:
   11724:	b510      	push	{r4, lr}
   11726:	230e      	movs	r3, #14
   11728:	5ec9      	ldrsh	r1, [r1, r3]
   1172a:	f000 f821 	bl	11770 <_close_r>
   1172e:	bd10      	pop	{r4, pc}

00011730 <__ascii_wctomb>:
   11730:	1e0b      	subs	r3, r1, #0
   11732:	d004      	beq.n	1173e <__ascii_wctomb+0xe>
   11734:	2aff      	cmp	r2, #255	; 0xff
   11736:	d904      	bls.n	11742 <__ascii_wctomb+0x12>
   11738:	238a      	movs	r3, #138	; 0x8a
   1173a:	6003      	str	r3, [r0, #0]
   1173c:	3b8b      	subs	r3, #139	; 0x8b
   1173e:	0018      	movs	r0, r3
   11740:	4770      	bx	lr
   11742:	700a      	strb	r2, [r1, #0]
   11744:	2301      	movs	r3, #1
   11746:	e7fa      	b.n	1173e <__ascii_wctomb+0xe>

00011748 <_write_r>:
   11748:	b570      	push	{r4, r5, r6, lr}
   1174a:	0005      	movs	r5, r0
   1174c:	0008      	movs	r0, r1
   1174e:	0011      	movs	r1, r2
   11750:	2200      	movs	r2, #0
   11752:	4c06      	ldr	r4, [pc, #24]	; (1176c <_write_r+0x24>)
   11754:	6022      	str	r2, [r4, #0]
   11756:	001a      	movs	r2, r3
   11758:	f7f5 f904 	bl	6964 <_write>
   1175c:	1c43      	adds	r3, r0, #1
   1175e:	d103      	bne.n	11768 <_write_r+0x20>
   11760:	6823      	ldr	r3, [r4, #0]
   11762:	2b00      	cmp	r3, #0
   11764:	d000      	beq.n	11768 <_write_r+0x20>
   11766:	602b      	str	r3, [r5, #0]
   11768:	bd70      	pop	{r4, r5, r6, pc}
   1176a:	46c0      	nop			; (mov r8, r8)
   1176c:	20000a20 	.word	0x20000a20

00011770 <_close_r>:
   11770:	2300      	movs	r3, #0
   11772:	b570      	push	{r4, r5, r6, lr}
   11774:	4c06      	ldr	r4, [pc, #24]	; (11790 <_close_r+0x20>)
   11776:	0005      	movs	r5, r0
   11778:	0008      	movs	r0, r1
   1177a:	6023      	str	r3, [r4, #0]
   1177c:	f7fb fee0 	bl	d540 <_close>
   11780:	1c43      	adds	r3, r0, #1
   11782:	d103      	bne.n	1178c <_close_r+0x1c>
   11784:	6823      	ldr	r3, [r4, #0]
   11786:	2b00      	cmp	r3, #0
   11788:	d000      	beq.n	1178c <_close_r+0x1c>
   1178a:	602b      	str	r3, [r5, #0]
   1178c:	bd70      	pop	{r4, r5, r6, pc}
   1178e:	46c0      	nop			; (mov r8, r8)
   11790:	20000a20 	.word	0x20000a20

00011794 <_fstat_r>:
   11794:	2300      	movs	r3, #0
   11796:	b570      	push	{r4, r5, r6, lr}
   11798:	4c06      	ldr	r4, [pc, #24]	; (117b4 <_fstat_r+0x20>)
   1179a:	0005      	movs	r5, r0
   1179c:	0008      	movs	r0, r1
   1179e:	0011      	movs	r1, r2
   117a0:	6023      	str	r3, [r4, #0]
   117a2:	f7fb fed0 	bl	d546 <_fstat>
   117a6:	1c43      	adds	r3, r0, #1
   117a8:	d103      	bne.n	117b2 <_fstat_r+0x1e>
   117aa:	6823      	ldr	r3, [r4, #0]
   117ac:	2b00      	cmp	r3, #0
   117ae:	d000      	beq.n	117b2 <_fstat_r+0x1e>
   117b0:	602b      	str	r3, [r5, #0]
   117b2:	bd70      	pop	{r4, r5, r6, pc}
   117b4:	20000a20 	.word	0x20000a20

000117b8 <_isatty_r>:
   117b8:	2300      	movs	r3, #0
   117ba:	b570      	push	{r4, r5, r6, lr}
   117bc:	4c06      	ldr	r4, [pc, #24]	; (117d8 <_isatty_r+0x20>)
   117be:	0005      	movs	r5, r0
   117c0:	0008      	movs	r0, r1
   117c2:	6023      	str	r3, [r4, #0]
   117c4:	f7fb fec4 	bl	d550 <_isatty>
   117c8:	1c43      	adds	r3, r0, #1
   117ca:	d103      	bne.n	117d4 <_isatty_r+0x1c>
   117cc:	6823      	ldr	r3, [r4, #0]
   117ce:	2b00      	cmp	r3, #0
   117d0:	d000      	beq.n	117d4 <_isatty_r+0x1c>
   117d2:	602b      	str	r3, [r5, #0]
   117d4:	bd70      	pop	{r4, r5, r6, pc}
   117d6:	46c0      	nop			; (mov r8, r8)
   117d8:	20000a20 	.word	0x20000a20

000117dc <_lseek_r>:
   117dc:	b570      	push	{r4, r5, r6, lr}
   117de:	0005      	movs	r5, r0
   117e0:	0008      	movs	r0, r1
   117e2:	0011      	movs	r1, r2
   117e4:	2200      	movs	r2, #0
   117e6:	4c06      	ldr	r4, [pc, #24]	; (11800 <_lseek_r+0x24>)
   117e8:	6022      	str	r2, [r4, #0]
   117ea:	001a      	movs	r2, r3
   117ec:	f7fb feb2 	bl	d554 <_lseek>
   117f0:	1c43      	adds	r3, r0, #1
   117f2:	d103      	bne.n	117fc <_lseek_r+0x20>
   117f4:	6823      	ldr	r3, [r4, #0]
   117f6:	2b00      	cmp	r3, #0
   117f8:	d000      	beq.n	117fc <_lseek_r+0x20>
   117fa:	602b      	str	r3, [r5, #0]
   117fc:	bd70      	pop	{r4, r5, r6, pc}
   117fe:	46c0      	nop			; (mov r8, r8)
   11800:	20000a20 	.word	0x20000a20

00011804 <memchr>:
   11804:	b2c9      	uxtb	r1, r1
   11806:	1882      	adds	r2, r0, r2
   11808:	4290      	cmp	r0, r2
   1180a:	d101      	bne.n	11810 <memchr+0xc>
   1180c:	2000      	movs	r0, #0
   1180e:	4770      	bx	lr
   11810:	7803      	ldrb	r3, [r0, #0]
   11812:	428b      	cmp	r3, r1
   11814:	d0fb      	beq.n	1180e <memchr+0xa>
   11816:	3001      	adds	r0, #1
   11818:	e7f6      	b.n	11808 <memchr+0x4>

0001181a <_realloc_r>:
   1181a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1181c:	0007      	movs	r7, r0
   1181e:	000d      	movs	r5, r1
   11820:	0016      	movs	r6, r2
   11822:	2900      	cmp	r1, #0
   11824:	d105      	bne.n	11832 <_realloc_r+0x18>
   11826:	0011      	movs	r1, r2
   11828:	f7fe fd18 	bl	1025c <_malloc_r>
   1182c:	0004      	movs	r4, r0
   1182e:	0020      	movs	r0, r4
   11830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11832:	2a00      	cmp	r2, #0
   11834:	d103      	bne.n	1183e <_realloc_r+0x24>
   11836:	f7fe fcc7 	bl	101c8 <_free_r>
   1183a:	0034      	movs	r4, r6
   1183c:	e7f7      	b.n	1182e <_realloc_r+0x14>
   1183e:	f000 f827 	bl	11890 <_malloc_usable_size_r>
   11842:	002c      	movs	r4, r5
   11844:	4286      	cmp	r6, r0
   11846:	d9f2      	bls.n	1182e <_realloc_r+0x14>
   11848:	0031      	movs	r1, r6
   1184a:	0038      	movs	r0, r7
   1184c:	f7fe fd06 	bl	1025c <_malloc_r>
   11850:	1e04      	subs	r4, r0, #0
   11852:	d0ec      	beq.n	1182e <_realloc_r+0x14>
   11854:	0029      	movs	r1, r5
   11856:	0032      	movs	r2, r6
   11858:	f7fe fc92 	bl	10180 <memcpy>
   1185c:	0029      	movs	r1, r5
   1185e:	0038      	movs	r0, r7
   11860:	f7fe fcb2 	bl	101c8 <_free_r>
   11864:	e7e3      	b.n	1182e <_realloc_r+0x14>
	...

00011868 <_read_r>:
   11868:	b570      	push	{r4, r5, r6, lr}
   1186a:	0005      	movs	r5, r0
   1186c:	0008      	movs	r0, r1
   1186e:	0011      	movs	r1, r2
   11870:	2200      	movs	r2, #0
   11872:	4c06      	ldr	r4, [pc, #24]	; (1188c <_read_r+0x24>)
   11874:	6022      	str	r2, [r4, #0]
   11876:	001a      	movs	r2, r3
   11878:	f7f5 f852 	bl	6920 <_read>
   1187c:	1c43      	adds	r3, r0, #1
   1187e:	d103      	bne.n	11888 <_read_r+0x20>
   11880:	6823      	ldr	r3, [r4, #0]
   11882:	2b00      	cmp	r3, #0
   11884:	d000      	beq.n	11888 <_read_r+0x20>
   11886:	602b      	str	r3, [r5, #0]
   11888:	bd70      	pop	{r4, r5, r6, pc}
   1188a:	46c0      	nop			; (mov r8, r8)
   1188c:	20000a20 	.word	0x20000a20

00011890 <_malloc_usable_size_r>:
   11890:	1f0b      	subs	r3, r1, #4
   11892:	681b      	ldr	r3, [r3, #0]
   11894:	1f18      	subs	r0, r3, #4
   11896:	2b00      	cmp	r3, #0
   11898:	da01      	bge.n	1189e <_malloc_usable_size_r+0xe>
   1189a:	580b      	ldr	r3, [r1, r0]
   1189c:	18c0      	adds	r0, r0, r3
   1189e:	4770      	bx	lr
   118a0:	6c696166 	.word	0x6c696166
   118a4:	74206465 	.word	0x74206465
   118a8:	6e69206f 	.word	0x6e69206f
   118ac:	61697469 	.word	0x61697469
   118b0:	657a696c 	.word	0x657a696c
   118b4:	43444820 	.word	0x43444820
   118b8:	30383031 	.word	0x30383031
   118bc:	69726420 	.word	0x69726420
   118c0:	2e726576 	.word	0x2e726576
   118c4:	0000000d 	.word	0x0000000d
   118c8:	61746164 	.word	0x61746164
   118cc:	63617020 	.word	0x63617020
   118d0:	3a74656b 	.word	0x3a74656b
   118d4:	25783020 	.word	0x25783020
   118d8:	20783230 	.word	0x20783230
   118dc:	30257830 	.word	0x30257830
   118e0:	30207832 	.word	0x30207832
   118e4:	32302578 	.word	0x32302578
   118e8:	000a0d78 	.word	0x000a0d78
   118ec:	6f727265 	.word	0x6f727265
   118f0:	72742072 	.word	0x72742072
   118f4:	676e6979 	.word	0x676e6979
   118f8:	206f7420 	.word	0x206f7420
   118fc:	20746573 	.word	0x20746573
   11900:	6f736572 	.word	0x6f736572
   11904:	6974756c 	.word	0x6974756c
   11908:	0d216e6f 	.word	0x0d216e6f
   1190c:	00000000 	.word	0x00000000
   11910:	5454514d 	.word	0x5454514d
   11914:	696e6920 	.word	0x696e6920
   11918:	6c616974 	.word	0x6c616974
   1191c:	74617a69 	.word	0x74617a69
   11920:	206e6f69 	.word	0x206e6f69
   11924:	6c696166 	.word	0x6c696166
   11928:	202e6465 	.word	0x202e6465
   1192c:	6f727245 	.word	0x6f727245
   11930:	6f632072 	.word	0x6f632072
   11934:	69206564 	.word	0x69206564
   11938:	25282073 	.word	0x25282073
   1193c:	0a0d2964 	.word	0x0a0d2964
   11940:	00000000 	.word	0x00000000
   11944:	5454514d 	.word	0x5454514d
   11948:	67657220 	.word	0x67657220
   1194c:	65747369 	.word	0x65747369
   11950:	61632072 	.word	0x61632072
   11954:	61626c6c 	.word	0x61626c6c
   11958:	66206b63 	.word	0x66206b63
   1195c:	656c6961 	.word	0x656c6961
   11960:	45202e64 	.word	0x45202e64
   11964:	726f7272 	.word	0x726f7272
   11968:	646f6320 	.word	0x646f6320
   1196c:	73692065 	.word	0x73692065
   11970:	64252820 	.word	0x64252820
   11974:	000a0d29 	.word	0x000a0d29
   11978:	50726941 	.word	0x50726941
   1197c:	4e6e6e65 	.word	0x4e6e6e65
   11980:	442d7465 	.word	0x442d7465
   11984:	63697665 	.word	0x63697665
   11988:	00000065 	.word	0x00000065
   1198c:	6e6e6570 	.word	0x6e6e6570
   11990:	30343731 	.word	0x30343731
   11994:	69666977 	.word	0x69666977
   11998:	00000000 	.word	0x00000000
   1199c:	74656564 	.word	0x74656564
   119a0:	6165732e 	.word	0x6165732e
   119a4:	70752e73 	.word	0x70752e73
   119a8:	2e6e6e65 	.word	0x2e6e6e65
   119ac:	00756465 	.word	0x00756465
   119b0:	6e6e6f43 	.word	0x6e6e6f43
   119b4:	20746365 	.word	0x20746365
   119b8:	6c696166 	.word	0x6c696166
   119bc:	206f7420 	.word	0x206f7420
   119c0:	76726573 	.word	0x76726573
   119c4:	25287265 	.word	0x25287265
   119c8:	20212973 	.word	0x20212973
   119cc:	72746572 	.word	0x72746572
   119d0:	74692079 	.word	0x74692079
   119d4:	74756120 	.word	0x74756120
   119d8:	74616d6f 	.word	0x74616d6f
   119dc:	6c616369 	.word	0x6c616369
   119e0:	0d2e796c 	.word	0x0d2e796c
   119e4:	0000000a 	.word	0x0000000a
   119e8:	5454514d 	.word	0x5454514d
   119ec:	6f726220 	.word	0x6f726220
   119f0:	2072656b 	.word	0x2072656b
   119f4:	6c636564 	.word	0x6c636564
   119f8:	64656e69 	.word	0x64656e69
   119fc:	756f7920 	.word	0x756f7920
   11a00:	63612072 	.word	0x63612072
   11a04:	73736563 	.word	0x73736563
   11a08:	72652021 	.word	0x72652021
   11a0c:	20726f72 	.word	0x20726f72
   11a10:	65646f63 	.word	0x65646f63
   11a14:	0d642520 	.word	0x0d642520
   11a18:	0000000a 	.word	0x0000000a
   11a1c:	61746164 	.word	0x61746164
   11a20:	65723e2d 	.word	0x65723e2d
   11a24:	705f7663 	.word	0x705f7663
   11a28:	696c6275 	.word	0x696c6275
   11a2c:	742e6873 	.word	0x742e6873
   11a30:	6369706f 	.word	0x6369706f
   11a34:	7325203a 	.word	0x7325203a
   11a38:	00000a0d 	.word	0x00000a0d
   11a3c:	69706f74 	.word	0x69706f74
   11a40:	616e2063 	.word	0x616e2063
   11a44:	203a656d 	.word	0x203a656d
   11a48:	0a0d7325 	.word	0x0a0d7325
   11a4c:	00000000 	.word	0x00000000
   11a50:	61746164 	.word	0x61746164
   11a54:	65723e2d 	.word	0x65723e2d
   11a58:	705f7663 	.word	0x705f7663
   11a5c:	696c6275 	.word	0x696c6275
   11a60:	742e6873 	.word	0x742e6873
   11a64:	6369706f 	.word	0x6369706f
   11a68:	7a69735f 	.word	0x7a69735f
   11a6c:	25203a65 	.word	0x25203a65
   11a70:	000a0d64 	.word	0x000a0d64
   11a74:	61746164 	.word	0x61746164
   11a78:	7a697320 	.word	0x7a697320
   11a7c:	25203a65 	.word	0x25203a65
   11a80:	000a0d64 	.word	0x000a0d64
   11a84:	69706f74 	.word	0x69706f74
   11a88:	69732063 	.word	0x69732063
   11a8c:	203a657a 	.word	0x203a657a
   11a90:	0a0d6425 	.word	0x0a0d6425
   11a94:	00000000 	.word	0x00000000
   11a98:	5454514d 	.word	0x5454514d
   11a9c:	71657220 	.word	0x71657220
   11aa0:	74736575 	.word	0x74736575
   11aa4:	203a6465 	.word	0x203a6465
   11aa8:	0a0d7325 	.word	0x0a0d7325
   11aac:	00000000 	.word	0x00000000
   11ab0:	69676572 	.word	0x69676572
   11ab4:	72657473 	.word	0x72657473
   11ab8:	725f6465 	.word	0x725f6465
   11abc:	65757165 	.word	0x65757165
   11ac0:	745f7473 	.word	0x745f7473
   11ac4:	6369706f 	.word	0x6369706f
   11ac8:	7325203a 	.word	0x7325203a
   11acc:	00000a0d 	.word	0x00000a0d
   11ad0:	69676572 	.word	0x69676572
   11ad4:	72657473 	.word	0x72657473
   11ad8:	665f6465 	.word	0x665f6465
   11adc:	74636e75 	.word	0x74636e75
   11ae0:	3a6e6f69 	.word	0x3a6e6f69
   11ae4:	0d642520 	.word	0x0d642520
   11ae8:	0000000a 	.word	0x0000000a
   11aec:	5454514d 	.word	0x5454514d
   11af0:	73696420 	.word	0x73696420
   11af4:	6e6e6f63 	.word	0x6e6e6f63
   11af8:	65746365 	.word	0x65746365
   11afc:	00000d64 	.word	0x00000d64
   11b00:	656d6954 	.word	0x656d6954
   11b04:	6e652072 	.word	0x6e652072
   11b08:	656c6261 	.word	0x656c6261
   11b0c:	000d2e64 	.word	0x000d2e64
   11b10:	5454514d 	.word	0x5454514d
   11b14:	6e6f4320 	.word	0x6e6f4320
   11b18:	75676966 	.word	0x75676966
   11b1c:	2e646572 	.word	0x2e646572
   11b20:	0000000d 	.word	0x0000000d
   11b24:	74696e49 	.word	0x74696e49
   11b28:	696c6169 	.word	0x696c6169
   11b2c:	676e697a 	.word	0x676e697a
   11b30:	0d2e2e2e 	.word	0x0d2e2e2e
   11b34:	00000000 	.word	0x00000000
   11b38:	6e69616d 	.word	0x6e69616d
   11b3c:	326d203a 	.word	0x326d203a
   11b40:	69775f6d 	.word	0x69775f6d
   11b44:	695f6966 	.word	0x695f6966
   11b48:	2074696e 	.word	0x2074696e
   11b4c:	6c6c6163 	.word	0x6c6c6163
   11b50:	72726520 	.word	0x72726520
   11b54:	2821726f 	.word	0x2821726f
   11b58:	0d296425 	.word	0x0d296425
   11b5c:	0000000a 	.word	0x0000000a
   11b60:	6e69616d 	.word	0x6e69616d
   11b64:	326d203a 	.word	0x326d203a
   11b68:	69775f6d 	.word	0x69775f6d
   11b6c:	695f6966 	.word	0x695f6966
   11b70:	2074696e 	.word	0x2074696e
   11b74:	6c6c6163 	.word	0x6c6c6163
   11b78:	63757320 	.word	0x63757320
   11b7c:	73736563 	.word	0x73736563
   11b80:	64252821 	.word	0x64252821
   11b84:	000a0d29 	.word	0x000a0d29
   11b88:	6b636f53 	.word	0x6b636f53
   11b8c:	20737465 	.word	0x20737465
   11b90:	74696e69 	.word	0x74696e69
   11b94:	696c6169 	.word	0x696c6169
   11b98:	2e64657a 	.word	0x2e64657a
   11b9c:	0000000d 	.word	0x0000000d
   11ba0:	5f77656e 	.word	0x5f77656e
   11ba4:	69706f74 	.word	0x69706f74
   11ba8:	6f742e63 	.word	0x6f742e63
   11bac:	5f636970 	.word	0x5f636970
   11bb0:	656d616e 	.word	0x656d616e
   11bb4:	7325203a 	.word	0x7325203a
   11bb8:	00000a0d 	.word	0x00000a0d
   11bbc:	6c696166 	.word	0x6c696166
   11bc0:	74206465 	.word	0x74206465
   11bc4:	7573206f 	.word	0x7573206f
   11bc8:	72637362 	.word	0x72637362
   11bcc:	20656269 	.word	0x20656269
   11bd0:	69706f74 	.word	0x69706f74
   11bd4:	25203a63 	.word	0x25203a63
   11bd8:	000a0d73 	.word	0x000a0d73
   11bdc:	6765725b 	.word	0x6765725b
   11be0:	65747369 	.word	0x65747369
   11be4:	65725f72 	.word	0x65725f72
   11be8:	73657571 	.word	0x73657571
   11bec:	6f745f74 	.word	0x6f745f74
   11bf0:	5d636970 	.word	0x5d636970
   11bf4:	63757320 	.word	0x63757320
   11bf8:	73736563 	.word	0x73736563
   11bfc:	6c6c7566 	.word	0x6c6c7566
   11c00:	65722079 	.word	0x65722079
   11c04:	74736967 	.word	0x74736967
   11c08:	64657265 	.word	0x64657265
   11c0c:	71657220 	.word	0x71657220
   11c10:	74736575 	.word	0x74736575
   11c14:	706f7420 	.word	0x706f7420
   11c18:	25206369 	.word	0x25206369
   11c1c:	6e612073 	.word	0x6e612073
   11c20:	61632064 	.word	0x61632064
   11c24:	61626c6c 	.word	0x61626c6c
   11c28:	0d216b63 	.word	0x0d216b63
   11c2c:	0000000a 	.word	0x0000000a
   11c30:	6765725b 	.word	0x6765725b
   11c34:	65747369 	.word	0x65747369
   11c38:	65725f72 	.word	0x65725f72
   11c3c:	73657571 	.word	0x73657571
   11c40:	6f745f74 	.word	0x6f745f74
   11c44:	5d636970 	.word	0x5d636970
   11c48:	78616d20 	.word	0x78616d20
   11c4c:	6d756e20 	.word	0x6d756e20
   11c50:	20726562 	.word	0x20726562
   11c54:	7420666f 	.word	0x7420666f
   11c58:	6369706f 	.word	0x6369706f
   11c5c:	6c612073 	.word	0x6c612073
   11c60:	64616572 	.word	0x64616572
   11c64:	65722079 	.word	0x65722079
   11c68:	74736967 	.word	0x74736967
   11c6c:	64657265 	.word	0x64657265
   11c70:	00000d2e 	.word	0x00000d2e
   11c74:	462d6957 	.word	0x462d6957
   11c78:	6f632069 	.word	0x6f632069
   11c7c:	63656e6e 	.word	0x63656e6e
   11c80:	0d646574 	.word	0x0d646574
   11c84:	00000000 	.word	0x00000000
   11c88:	462d6957 	.word	0x462d6957
   11c8c:	69642069 	.word	0x69642069
   11c90:	6e6f6373 	.word	0x6e6f6373
   11c94:	7463656e 	.word	0x7463656e
   11c98:	000d6465 	.word	0x000d6465
   11c9c:	462d6957 	.word	0x462d6957
   11ca0:	50492069 	.word	0x50492069
   11ca4:	20736920 	.word	0x20736920
   11ca8:	252e7525 	.word	0x252e7525
   11cac:	75252e75 	.word	0x75252e75
   11cb0:	0d75252e 	.word	0x0d75252e
   11cb4:	0000000a 	.word	0x0000000a
   11cb8:	00005274 	.word	0x00005274
   11cbc:	0000527c 	.word	0x0000527c
   11cc0:	0000528a 	.word	0x0000528a
   11cc4:	000052bc 	.word	0x000052bc
   11cc8:	000052c6 	.word	0x000052c6
   11ccc:	666e6f63 	.word	0x666e6f63
   11cd0:	72756769 	.word	0x72756769
   11cd4:	74685f65 	.word	0x74685f65
   11cd8:	635f7074 	.word	0x635f7074
   11cdc:	6e65696c 	.word	0x6e65696c
   11ce0:	48203a74 	.word	0x48203a74
   11ce4:	20505454 	.word	0x20505454
   11ce8:	65696c63 	.word	0x65696c63
   11cec:	6920746e 	.word	0x6920746e
   11cf0:	6974696e 	.word	0x6974696e
   11cf4:	7a696c61 	.word	0x7a696c61
   11cf8:	6f697461 	.word	0x6f697461
   11cfc:	6166206e 	.word	0x6166206e
   11d00:	64656c69 	.word	0x64656c69
   11d04:	72282021 	.word	0x72282021
   11d08:	25207365 	.word	0x25207365
   11d0c:	0a0d2964 	.word	0x0a0d2964
   11d10:	00000000 	.word	0x00000000
   11d14:	6c696166 	.word	0x6c696166
   11d18:	74206465 	.word	0x74206465
   11d1c:	6e69206f 	.word	0x6e69206f
   11d20:	61697469 	.word	0x61697469
   11d24:	657a696c 	.word	0x657a696c
   11d28:	66697720 	.word	0x66697720
   11d2c:	61702069 	.word	0x61702069
   11d30:	656d6172 	.word	0x656d6172
   11d34:	73726574 	.word	0x73726574
   11d38:	0000000d 	.word	0x0000000d
   11d3c:	202d2d2d 	.word	0x202d2d2d
   11d40:	636c6557 	.word	0x636c6557
   11d44:	20656d6f 	.word	0x20656d6f
   11d48:	41206f74 	.word	0x41206f74
   11d4c:	4e495754 	.word	0x4e495754
   11d50:	35312043 	.word	0x35312043
   11d54:	43203030 	.word	0x43203030
   11d58:	656e6e6f 	.word	0x656e6e6f
   11d5c:	6f697463 	.word	0x6f697463
   11d60:	6554206e 	.word	0x6554206e
   11d64:	2d207473 	.word	0x2d207473
   11d68:	000d2d2d 	.word	0x000d2d2d
   11d6c:	6e69616d 	.word	0x6e69616d
   11d70:	6f63203a 	.word	0x6f63203a
   11d74:	63656e6e 	.word	0x63656e6e
   11d78:	676e6974 	.word	0x676e6974
   11d7c:	206f7420 	.word	0x206f7420
   11d80:	69466957 	.word	0x69466957
   11d84:	20504120 	.word	0x20504120
   11d88:	2e2e7325 	.word	0x2e2e7325
   11d8c:	000a0d2e 	.word	0x000a0d2e
   11d90:	63637573 	.word	0x63637573
   11d94:	66737365 	.word	0x66737365
   11d98:	796c6c75 	.word	0x796c6c75
   11d9c:	6e6f6320 	.word	0x6e6f6320
   11da0:	7463656e 	.word	0x7463656e
   11da4:	000d6465 	.word	0x000d6465
   11da8:	70747468 	.word	0x70747468
   11dac:	772f2f3a 	.word	0x772f2f3a
   11db0:	732e7777 	.word	0x732e7777
   11db4:	2e736165 	.word	0x2e736165
   11db8:	6e657075 	.word	0x6e657075
   11dbc:	64652e6e 	.word	0x64652e6e
   11dc0:	777e2f75 	.word	0x777e2f75
   11dc4:	68637261 	.word	0x68637261
   11dc8:	652f7265 	.word	0x652f7265
   11dcc:	31356573 	.word	0x31356573
   11dd0:	656d2f36 	.word	0x656d2f36
   11dd4:	61646174 	.word	0x61646174
   11dd8:	622e6174 	.word	0x622e6174
   11ddc:	00006e69 	.word	0x00006e69
   11de0:	70747468 	.word	0x70747468
   11de4:	772f2f3a 	.word	0x772f2f3a
   11de8:	732e7777 	.word	0x732e7777
   11dec:	2e736165 	.word	0x2e736165
   11df0:	6e657075 	.word	0x6e657075
   11df4:	64652e6e 	.word	0x64652e6e
   11df8:	777e2f75 	.word	0x777e2f75
   11dfc:	68637261 	.word	0x68637261
   11e00:	652f7265 	.word	0x652f7265
   11e04:	31356573 	.word	0x31356573
   11e08:	65742f36 	.word	0x65742f36
   11e0c:	662d7473 	.word	0x662d7473
   11e10:	776d7269 	.word	0x776d7269
   11e14:	2e657261 	.word	0x2e657261
   11e18:	006e6962 	.word	0x006e6962
   11e1c:	70747468 	.word	0x70747468
   11e20:	696c635f 	.word	0x696c635f
   11e24:	5f746e65 	.word	0x5f746e65
   11e28:	6c6c6163 	.word	0x6c6c6163
   11e2c:	6b636162 	.word	0x6b636162
   11e30:	5448203a 	.word	0x5448203a
   11e34:	63205054 	.word	0x63205054
   11e38:	6e65696c 	.word	0x6e65696c
   11e3c:	6f732074 	.word	0x6f732074
   11e40:	74656b63 	.word	0x74656b63
   11e44:	6e6f6320 	.word	0x6e6f6320
   11e48:	7463656e 	.word	0x7463656e
   11e4c:	0d2e6465 	.word	0x0d2e6465
   11e50:	00000000 	.word	0x00000000
   11e54:	70747468 	.word	0x70747468
   11e58:	696c635f 	.word	0x696c635f
   11e5c:	5f746e65 	.word	0x5f746e65
   11e60:	6c6c6163 	.word	0x6c6c6163
   11e64:	6b636162 	.word	0x6b636162
   11e68:	6572203a 	.word	0x6572203a
   11e6c:	73657571 	.word	0x73657571
   11e70:	6f632074 	.word	0x6f632074
   11e74:	656c706d 	.word	0x656c706d
   11e78:	2e646574 	.word	0x2e646574
   11e7c:	0000000d 	.word	0x0000000d
   11e80:	70747468 	.word	0x70747468
   11e84:	696c635f 	.word	0x696c635f
   11e88:	5f746e65 	.word	0x5f746e65
   11e8c:	6c6c6163 	.word	0x6c6c6163
   11e90:	6b636162 	.word	0x6b636162
   11e94:	6572203a 	.word	0x6572203a
   11e98:	76696563 	.word	0x76696563
   11e9c:	72206465 	.word	0x72206465
   11ea0:	6f707365 	.word	0x6f707365
   11ea4:	2065736e 	.word	0x2065736e
   11ea8:	64207525 	.word	0x64207525
   11eac:	20617461 	.word	0x20617461
   11eb0:	657a6973 	.word	0x657a6973
   11eb4:	0d752520 	.word	0x0d752520
   11eb8:	0000000a 	.word	0x0000000a
   11ebc:	70747468 	.word	0x70747468
   11ec0:	696c635f 	.word	0x696c635f
   11ec4:	5f746e65 	.word	0x5f746e65
   11ec8:	6c6c6163 	.word	0x6c6c6163
   11ecc:	6b636162 	.word	0x6b636162
   11ed0:	6964203a 	.word	0x6964203a
   11ed4:	6e6f6373 	.word	0x6e6f6373
   11ed8:	7463656e 	.word	0x7463656e
   11edc:	206e6f69 	.word	0x206e6f69
   11ee0:	73616572 	.word	0x73616572
   11ee4:	253a6e6f 	.word	0x253a6e6f
   11ee8:	000a0d64 	.word	0x000a0d64
   11eec:	6f736572 	.word	0x6f736572
   11ef0:	5f65766c 	.word	0x5f65766c
   11ef4:	203a6263 	.word	0x203a6263
   11ef8:	49207325 	.word	0x49207325
   11efc:	64612050 	.word	0x64612050
   11f00:	73657264 	.word	0x73657264
   11f04:	73692073 	.word	0x73692073
   11f08:	2e642520 	.word	0x2e642520
   11f0c:	252e6425 	.word	0x252e6425
   11f10:	64252e64 	.word	0x64252e64
   11f14:	0a0d0a0d 	.word	0x0a0d0a0d
   11f18:	00000000 	.word	0x00000000
   11f1c:	72617473 	.word	0x72617473
   11f20:	6f645f74 	.word	0x6f645f74
   11f24:	6f6c6e77 	.word	0x6f6c6e77
   11f28:	203a6461 	.word	0x203a6461
   11f2c:	20434d4d 	.word	0x20434d4d
   11f30:	726f7473 	.word	0x726f7473
   11f34:	20656761 	.word	0x20656761
   11f38:	20746f6e 	.word	0x20746f6e
   11f3c:	64616572 	.word	0x64616572
   11f40:	000d2e79 	.word	0x000d2e79
   11f44:	72617473 	.word	0x72617473
   11f48:	6f645f74 	.word	0x6f645f74
   11f4c:	6f6c6e77 	.word	0x6f6c6e77
   11f50:	203a6461 	.word	0x203a6461
   11f54:	462d6957 	.word	0x462d6957
   11f58:	73692069 	.word	0x73692069
   11f5c:	746f6e20 	.word	0x746f6e20
   11f60:	6e6f6320 	.word	0x6e6f6320
   11f64:	7463656e 	.word	0x7463656e
   11f68:	0d2e6465 	.word	0x0d2e6465
   11f6c:	00000000 	.word	0x00000000
   11f70:	72617473 	.word	0x72617473
   11f74:	6f645f74 	.word	0x6f645f74
   11f78:	6f6c6e77 	.word	0x6f6c6e77
   11f7c:	203a6461 	.word	0x203a6461
   11f80:	75716572 	.word	0x75716572
   11f84:	20747365 	.word	0x20747365
   11f88:	73207369 	.word	0x73207369
   11f8c:	20746e65 	.word	0x20746e65
   11f90:	65726c61 	.word	0x65726c61
   11f94:	2e796461 	.word	0x2e796461
   11f98:	0000000d 	.word	0x0000000d
   11f9c:	72617473 	.word	0x72617473
   11fa0:	6f645f74 	.word	0x6f645f74
   11fa4:	6f6c6e77 	.word	0x6f6c6e77
   11fa8:	203a6461 	.word	0x203a6461
   11fac:	6e6e7572 	.word	0x6e6e7572
   11fb0:	20676e69 	.word	0x20676e69
   11fb4:	6e776f64 	.word	0x6e776f64
   11fb8:	64616f6c 	.word	0x64616f6c
   11fbc:	726c6120 	.word	0x726c6120
   11fc0:	79646165 	.word	0x79646165
   11fc4:	00000d2e 	.word	0x00000d2e
   11fc8:	72617473 	.word	0x72617473
   11fcc:	6f645f74 	.word	0x6f645f74
   11fd0:	6f6c6e77 	.word	0x6f6c6e77
   11fd4:	5b206461 	.word	0x5b206461
   11fd8:	5f544f4e 	.word	0x5f544f4e
   11fdc:	43454843 	.word	0x43454843
   11fe0:	5d44454b 	.word	0x5d44454b
   11fe4:	6573203a 	.word	0x6573203a
   11fe8:	6e69646e 	.word	0x6e69646e
   11fec:	54482067 	.word	0x54482067
   11ff0:	72205054 	.word	0x72205054
   11ff4:	65757165 	.word	0x65757165
   11ff8:	66207473 	.word	0x66207473
   11ffc:	6820726f 	.word	0x6820726f
   12000:	65646165 	.word	0x65646165
   12004:	00000d72 	.word	0x00000d72
   12008:	72617473 	.word	0x72617473
   1200c:	6f645f74 	.word	0x6f645f74
   12010:	6f6c6e77 	.word	0x6f6c6e77
   12014:	5b206461 	.word	0x5b206461
   12018:	41445055 	.word	0x41445055
   1201c:	415f4554 	.word	0x415f4554
   12020:	4c494156 	.word	0x4c494156
   12024:	454c4241 	.word	0x454c4241
   12028:	73203a5d 	.word	0x73203a5d
   1202c:	69646e65 	.word	0x69646e65
   12030:	4820676e 	.word	0x4820676e
   12034:	20505454 	.word	0x20505454
   12038:	75716572 	.word	0x75716572
   1203c:	20747365 	.word	0x20747365
   12040:	20726f66 	.word	0x20726f66
   12044:	6d726966 	.word	0x6d726966
   12048:	65726177 	.word	0x65726177
   1204c:	0000000d 	.word	0x0000000d
   12050:	72617473 	.word	0x72617473
   12054:	6f645f74 	.word	0x6f645f74
   12058:	6f6c6e77 	.word	0x6f6c6e77
   1205c:	203a6461 	.word	0x203a6461
   12060:	75206f6e 	.word	0x75206f6e
   12064:	74616470 	.word	0x74616470
   12068:	76612065 	.word	0x76612065
   1206c:	616c6961 	.word	0x616c6961
   12070:	0d656c62 	.word	0x0d656c62
   12074:	00000000 	.word	0x00000000
   12078:	726f7473 	.word	0x726f7473
   1207c:	69665f65 	.word	0x69665f65
   12080:	705f656c 	.word	0x705f656c
   12084:	656b6361 	.word	0x656b6361
   12088:	65203a74 	.word	0x65203a74
   1208c:	7974706d 	.word	0x7974706d
   12090:	74616420 	.word	0x74616420
   12094:	000d2e61 	.word	0x000d2e61
   12098:	726f7473 	.word	0x726f7473
   1209c:	69665f65 	.word	0x69665f65
   120a0:	705f656c 	.word	0x705f656c
   120a4:	656b6361 	.word	0x656b6361
   120a8:	555b2074 	.word	0x555b2074
   120ac:	54414450 	.word	0x54414450
   120b0:	48435f45 	.word	0x48435f45
   120b4:	5d4b4345 	.word	0x5d4b4345
   120b8:	6966203a 	.word	0x6966203a
   120bc:	5b20656c 	.word	0x5b20656c
   120c0:	62206425 	.word	0x62206425
   120c4:	73657479 	.word	0x73657479
   120c8:	6f64205d 	.word	0x6f64205d
   120cc:	6e207365 	.word	0x6e207365
   120d0:	6d20746f 	.word	0x6d20746f
   120d4:	68637461 	.word	0x68637461
   120d8:	61656820 	.word	0x61656820
   120dc:	20726564 	.word	0x20726564
   120e0:	2064255b 	.word	0x2064255b
   120e4:	65747962 	.word	0x65747962
   120e8:	73205d73 	.word	0x73205d73
   120ec:	0d657a69 	.word	0x0d657a69
   120f0:	0000000a 	.word	0x0000000a
   120f4:	2077656e 	.word	0x2077656e
   120f8:	6d726966 	.word	0x6d726966
   120fc:	65726177 	.word	0x65726177
   12100:	72657620 	.word	0x72657620
   12104:	6e6f6973 	.word	0x6e6f6973
   12108:	6425203a 	.word	0x6425203a
   1210c:	00000a0d 	.word	0x00000a0d
   12110:	2077656e 	.word	0x2077656e
   12114:	6d726966 	.word	0x6d726966
   12118:	65726177 	.word	0x65726177
   1211c:	65686320 	.word	0x65686320
   12120:	75736b63 	.word	0x75736b63
   12124:	25203a6d 	.word	0x25203a6d
   12128:	0d783430 	.word	0x0d783430
   1212c:	0000000a 	.word	0x0000000a
   12130:	5f315746 	.word	0x5f315746
   12134:	53415245 	.word	0x53415245
   12138:	44415f45 	.word	0x44415f45
   1213c:	203a5244 	.word	0x203a5244
   12140:	0a0d6425 	.word	0x0a0d6425
   12144:	00000000 	.word	0x00000000
   12148:	726f7473 	.word	0x726f7473
   1214c:	69665f65 	.word	0x69665f65
   12150:	705f656c 	.word	0x705f656c
   12154:	656b6361 	.word	0x656b6361
   12158:	4e203a74 	.word	0x4e203a74
   1215c:	6c66206f 	.word	0x6c66206f
   12160:	20687361 	.word	0x20687361
   12164:	70696863 	.word	0x70696863
   12168:	00000d2e 	.word	0x00000d2e
   1216c:	726f7473 	.word	0x726f7473
   12170:	69665f65 	.word	0x69665f65
   12174:	705f656c 	.word	0x705f656c
   12178:	656b6361 	.word	0x656b6361
   1217c:	65203a74 	.word	0x65203a74
   12180:	726f7272 	.word	0x726f7272
   12184:	656c6320 	.word	0x656c6320
   12188:	6e697261 	.word	0x6e697261
   1218c:	65732067 	.word	0x65732067
   12190:	726f7463 	.word	0x726f7463
   12194:	6f727020 	.word	0x6f727020
   12198:	74636574 	.word	0x74636574
   1219c:	20746120 	.word	0x20746120
   121a0:	72646461 	.word	0x72646461
   121a4:	20737365 	.word	0x20737365
   121a8:	0d206425 	.word	0x0d206425
   121ac:	0000000a 	.word	0x0000000a
   121b0:	726f7473 	.word	0x726f7473
   121b4:	69665f65 	.word	0x69665f65
   121b8:	705f656c 	.word	0x705f656c
   121bc:	656b6361 	.word	0x656b6361
   121c0:	65203a74 	.word	0x65203a74
   121c4:	726f7272 	.word	0x726f7272
   121c8:	61726520 	.word	0x61726520
   121cc:	676e6973 	.word	0x676e6973
   121d0:	63657320 	.word	0x63657320
   121d4:	20726f74 	.word	0x20726f74
   121d8:	61207461 	.word	0x61207461
   121dc:	65726464 	.word	0x65726464
   121e0:	25207373 	.word	0x25207373
   121e4:	0a0d2064 	.word	0x0a0d2064
   121e8:	00000000 	.word	0x00000000
   121ec:	72617473 	.word	0x72617473
   121f0:	676e6974 	.word	0x676e6974
   121f4:	6c617620 	.word	0x6c617620
   121f8:	0000203a 	.word	0x0000203a
   121fc:	726f7473 	.word	0x726f7473
   12200:	69665f65 	.word	0x69665f65
   12204:	705f656c 	.word	0x705f656c
   12208:	656b6361 	.word	0x656b6361
   1220c:	65203a74 	.word	0x65203a74
   12210:	726f7272 	.word	0x726f7272
   12214:	69727720 	.word	0x69727720
   12218:	676e6974 	.word	0x676e6974
   1221c:	776f7220 	.word	0x776f7220
   12220:	20746120 	.word	0x20746120
   12224:	72646461 	.word	0x72646461
   12228:	20737365 	.word	0x20737365
   1222c:	0d206425 	.word	0x0d206425
   12230:	0000000a 	.word	0x0000000a
   12234:	726f7473 	.word	0x726f7473
   12238:	69665f65 	.word	0x69665f65
   1223c:	705f656c 	.word	0x705f656c
   12240:	656b6361 	.word	0x656b6361
   12244:	72203a74 	.word	0x72203a74
   12248:	69656365 	.word	0x69656365
   1224c:	5b646576 	.word	0x5b646576
   12250:	5d756c25 	.word	0x5d756c25
   12254:	6966202c 	.word	0x6966202c
   12258:	7320656c 	.word	0x7320656c
   1225c:	5b657a69 	.word	0x5b657a69
   12260:	5d756c25 	.word	0x5d756c25
   12264:	00000a0d 	.word	0x00000a0d
   12268:	726f7473 	.word	0x726f7473
   1226c:	69665f65 	.word	0x69665f65
   12270:	705f656c 	.word	0x705f656c
   12274:	656b6361 	.word	0x656b6361
   12278:	66203a74 	.word	0x66203a74
   1227c:	20656c69 	.word	0x20656c69
   12280:	6e776f64 	.word	0x6e776f64
   12284:	64616f6c 	.word	0x64616f6c
   12288:	73206465 	.word	0x73206465
   1228c:	65636375 	.word	0x65636375
   12290:	75667373 	.word	0x75667373
   12294:	2e796c6c 	.word	0x2e796c6c
   12298:	0000000d 	.word	0x0000000d
   1229c:	726f7473 	.word	0x726f7473
   122a0:	69665f65 	.word	0x69665f65
   122a4:	705f656c 	.word	0x705f656c
   122a8:	656b6361 	.word	0x656b6361
   122ac:	66203a74 	.word	0x66203a74
   122b0:	6873616c 	.word	0x6873616c
   122b4:	63757320 	.word	0x63757320
   122b8:	73736563 	.word	0x73736563
   122bc:	6c6c7566 	.word	0x6c6c7566
   122c0:	72772079 	.word	0x72772079
   122c4:	65747469 	.word	0x65747469
   122c8:	6977206e 	.word	0x6977206e
   122cc:	6e206874 	.word	0x6e206874
   122d0:	7265206f 	.word	0x7265206f
   122d4:	73726f72 	.word	0x73726f72
   122d8:	0000000d 	.word	0x0000000d
   122dc:	726f7473 	.word	0x726f7473
   122e0:	69665f65 	.word	0x69665f65
   122e4:	705f656c 	.word	0x705f656c
   122e8:	656b6361 	.word	0x656b6361
   122ec:	66203a74 	.word	0x66203a74
   122f0:	6873616c 	.word	0x6873616c
   122f4:	726f6320 	.word	0x726f6320
   122f8:	74707572 	.word	0x74707572
   122fc:	0d2e6465 	.word	0x0d2e6465
   12300:	00000000 	.word	0x00000000
   12304:	726f7473 	.word	0x726f7473
   12308:	69665f65 	.word	0x69665f65
   1230c:	705f656c 	.word	0x705f656c
   12310:	656b6361 	.word	0x656b6361
   12314:	66203a74 	.word	0x66203a74
   12318:	20656c69 	.word	0x20656c69
   1231c:	63656863 	.word	0x63656863
   12320:	6d75736b 	.word	0x6d75736b
   12324:	6f642073 	.word	0x6f642073
   12328:	2074276e 	.word	0x2074276e
   1232c:	6374616d 	.word	0x6374616d
   12330:	0a0d2e68 	.word	0x0a0d2e68
   12334:	70784520 	.word	0x70784520
   12338:	65746365 	.word	0x65746365
   1233c:	68632064 	.word	0x68632064
   12340:	736b6365 	.word	0x736b6365
   12344:	25206d75 	.word	0x25206d75
   12348:	0d783430 	.word	0x0d783430
   1234c:	6552200a 	.word	0x6552200a
   12350:	76696563 	.word	0x76696563
   12354:	63206465 	.word	0x63206465
   12358:	6b636568 	.word	0x6b636568
   1235c:	206d7573 	.word	0x206d7573
   12360:	78343025 	.word	0x78343025
   12364:	00000a0d 	.word	0x00000a0d
   12368:	61647075 	.word	0x61647075
   1236c:	625f6574 	.word	0x625f6574
   12370:	5f746f6f 	.word	0x5f746f6f
   12374:	74617473 	.word	0x74617473
   12378:	203a7375 	.word	0x203a7375
   1237c:	5f776f72 	.word	0x5f776f72
   12380:	655f6f74 	.word	0x655f6f74
   12384:	65736172 	.word	0x65736172
   12388:	6425203a 	.word	0x6425203a
   1238c:	00000a0d 	.word	0x00000a0d
   12390:	61647075 	.word	0x61647075
   12394:	625f6574 	.word	0x625f6574
   12398:	5f746f6f 	.word	0x5f746f6f
   1239c:	74617473 	.word	0x74617473
   123a0:	203a7375 	.word	0x203a7375
   123a4:	65676170 	.word	0x65676170
   123a8:	5f6f745f 	.word	0x5f6f745f
   123ac:	74697277 	.word	0x74697277
   123b0:	25203a65 	.word	0x25203a65
   123b4:	000a0d64 	.word	0x000a0d64
   123b8:	61647075 	.word	0x61647075
   123bc:	625f6574 	.word	0x625f6574
   123c0:	5f746f6f 	.word	0x5f746f6f
   123c4:	74617473 	.word	0x74617473
   123c8:	203a7375 	.word	0x203a7375
   123cc:	5f776f72 	.word	0x5f776f72
   123d0:	72646461 	.word	0x72646461
   123d4:	3a737365 	.word	0x3a737365
   123d8:	0d642520 	.word	0x0d642520
   123dc:	0000000a 	.word	0x0000000a
   123e0:	61647075 	.word	0x61647075
   123e4:	625f6574 	.word	0x625f6574
   123e8:	5f746f6f 	.word	0x5f746f6f
   123ec:	74617473 	.word	0x74617473
   123f0:	203a7375 	.word	0x203a7375
   123f4:	65676170 	.word	0x65676170
   123f8:	66666f5f 	.word	0x66666f5f
   123fc:	3a746573 	.word	0x3a746573
   12400:	0d642520 	.word	0x0d642520
   12404:	0000000a 	.word	0x0000000a
   12408:	3a776f72 	.word	0x3a776f72
   1240c:	34302520 	.word	0x34302520
   12410:	000a0d78 	.word	0x000a0d78
   12414:	61647075 	.word	0x61647075
   12418:	625f6574 	.word	0x625f6574
   1241c:	5f746f6f 	.word	0x5f746f6f
   12420:	74617473 	.word	0x74617473
   12424:	77207375 	.word	0x77207375
   12428:	65746972 	.word	0x65746972
   1242c:	6f6f625f 	.word	0x6f6f625f
   12430:	69732e74 	.word	0x69732e74
   12434:	74616e67 	.word	0x74616e67
   12438:	3a657275 	.word	0x3a657275
   1243c:	32302520 	.word	0x32302520
   12440:	000a0d78 	.word	0x000a0d78
   12444:	72617473 	.word	0x72617473
   12448:	676e6974 	.word	0x676e6974
   1244c:	65657320 	.word	0x65657320
   12450:	25203a64 	.word	0x25203a64
   12454:	0d783430 	.word	0x0d783430
   12458:	0000000a 	.word	0x0000000a
   1245c:	69726576 	.word	0x69726576
   12460:	665f7966 	.word	0x665f7966
   12464:	6873616c 	.word	0x6873616c
   12468:	7265203a 	.word	0x7265203a
   1246c:	20726f72 	.word	0x20726f72
   12470:	69797274 	.word	0x69797274
   12474:	7420676e 	.word	0x7420676e
   12478:	6572206f 	.word	0x6572206f
   1247c:	65206461 	.word	0x65206461
   12480:	72657478 	.word	0x72657478
   12484:	206c616e 	.word	0x206c616e
   12488:	73616c66 	.word	0x73616c66
   1248c:	25202e68 	.word	0x25202e68
   12490:	00000064 	.word	0x00000064
   12494:	202e6425 	.word	0x202e6425
   12498:	69726576 	.word	0x69726576
   1249c:	665f7966 	.word	0x665f7966
   124a0:	6873616c 	.word	0x6873616c
   124a4:	7263203a 	.word	0x7263203a
   124a8:	61765f63 	.word	0x61765f63
   124ac:	25203a6c 	.word	0x25203a6c
   124b0:	000a0d64 	.word	0x000a0d64
   124b4:	69726576 	.word	0x69726576
   124b8:	665f7966 	.word	0x665f7966
   124bc:	6873616c 	.word	0x6873616c
   124c0:	6572203a 	.word	0x6572203a
   124c4:	6e69616d 	.word	0x6e69616d
   124c8:	20676e69 	.word	0x20676e69
   124cc:	65747962 	.word	0x65747962
   124d0:	64252073 	.word	0x64252073
   124d4:	00000a0d 	.word	0x00000a0d
   124d8:	69726576 	.word	0x69726576
   124dc:	665f7966 	.word	0x665f7966
   124e0:	6873616c 	.word	0x6873616c
   124e4:	6163203a 	.word	0x6163203a
   124e8:	6c75636c 	.word	0x6c75636c
   124ec:	64657461 	.word	0x64657461
   124f0:	63726320 	.word	0x63726320
   124f4:	76203233 	.word	0x76203233
   124f8:	203a6c61 	.word	0x203a6c61
   124fc:	0a0d6425 	.word	0x0a0d6425
   12500:	00000000 	.word	0x00000000
   12504:	69666977 	.word	0x69666977
   12508:	6c61635f 	.word	0x6c61635f
   1250c:	6361626c 	.word	0x6361626c
   12510:	4d5b206b 	.word	0x4d5b206b
   12514:	575f4d32 	.word	0x575f4d32
   12518:	5f494649 	.word	0x5f494649
   1251c:	50534552 	.word	0x50534552
   12520:	4e4f435f 	.word	0x4e4f435f
   12524:	4154535f 	.word	0x4154535f
   12528:	435f4554 	.word	0x435f4554
   1252c:	474e4148 	.word	0x474e4148
   12530:	3a5d4445 	.word	0x3a5d4445
   12534:	6e6f6320 	.word	0x6e6f6320
   12538:	7463656e 	.word	0x7463656e
   1253c:	0d2e6465 	.word	0x0d2e6465
   12540:	00000000 	.word	0x00000000
   12544:	69666977 	.word	0x69666977
   12548:	6c61635f 	.word	0x6c61635f
   1254c:	6361626c 	.word	0x6361626c
   12550:	4d5b206b 	.word	0x4d5b206b
   12554:	575f4d32 	.word	0x575f4d32
   12558:	5f494649 	.word	0x5f494649
   1255c:	50534552 	.word	0x50534552
   12560:	4e4f435f 	.word	0x4e4f435f
   12564:	4154535f 	.word	0x4154535f
   12568:	435f4554 	.word	0x435f4554
   1256c:	474e4148 	.word	0x474e4148
   12570:	205d4445 	.word	0x205d4445
   12574:	63736964 	.word	0x63736964
   12578:	656e6e6f 	.word	0x656e6e6f
   1257c:	64657463 	.word	0x64657463
   12580:	00000d2e 	.word	0x00000d2e
   12584:	69666977 	.word	0x69666977
   12588:	6c61635f 	.word	0x6c61635f
   1258c:	6361626c 	.word	0x6361626c
   12590:	4d5b206b 	.word	0x4d5b206b
   12594:	575f4d32 	.word	0x575f4d32
   12598:	5f494649 	.word	0x5f494649
   1259c:	5f514552 	.word	0x5f514552
   125a0:	50434844 	.word	0x50434844
   125a4:	4e4f435f 	.word	0x4e4f435f
   125a8:	203a5d46 	.word	0x203a5d46
   125ac:	61205049 	.word	0x61205049
   125b0:	65726464 	.word	0x65726464
   125b4:	69207373 	.word	0x69207373
   125b8:	75252073 	.word	0x75252073
   125bc:	2e75252e 	.word	0x2e75252e
   125c0:	252e7525 	.word	0x252e7525
   125c4:	000a0d75 	.word	0x000a0d75
   125c8:	69666977 	.word	0x69666977
   125cc:	6c61635f 	.word	0x6c61635f
   125d0:	6361626c 	.word	0x6361626c
   125d4:	645b206b 	.word	0x645b206b
   125d8:	75616665 	.word	0x75616665
   125dc:	3a5d746c 	.word	0x3a5d746c
   125e0:	52524520 	.word	0x52524520
   125e4:	6520524f 	.word	0x6520524f
   125e8:	25207476 	.word	0x25207476
   125ec:	000a0d64 	.word	0x000a0d64
   125f0:	74697277 	.word	0x74697277
   125f4:	69665f65 	.word	0x69665f65
   125f8:	61776d72 	.word	0x61776d72
   125fc:	6d5f6572 	.word	0x6d5f6572
   12600:	64617465 	.word	0x64617465
   12604:	3a617461 	.word	0x3a617461
   12608:	756f6320 	.word	0x756f6320
   1260c:	6e20646c 	.word	0x6e20646c
   12610:	7720746f 	.word	0x7720746f
   12614:	65746972 	.word	0x65746972
   12618:	206f7420 	.word	0x206f7420
   1261c:	73616c66 	.word	0x73616c66
   12620:	000d2168 	.word	0x000d2168
   12624:	6c696166 	.word	0x6c696166
   12628:	74206465 	.word	0x74206465
   1262c:	6e69206f 	.word	0x6e69206f
   12630:	61697469 	.word	0x61697469
   12634:	657a696c 	.word	0x657a696c
   12638:	4c535420 	.word	0x4c535420
   1263c:	31363532 	.word	0x31363532
   12640:	69726420 	.word	0x69726420
   12644:	2e726576 	.word	0x2e726576
   12648:	0000000d 	.word	0x0000000d
   1264c:	6c696166 	.word	0x6c696166
   12650:	74206465 	.word	0x74206465
   12654:	6573206f 	.word	0x6573206f
   12658:	7220646e 	.word	0x7220646e
   1265c:	73696765 	.word	0x73696765
   12660:	20726574 	.word	0x20726574
   12664:	75716572 	.word	0x75716572
   12668:	20747365 	.word	0x20747365
   1266c:	20726f66 	.word	0x20726f66
   12670:	6d6d6f63 	.word	0x6d6d6f63
   12674:	20646e61 	.word	0x20646e61
   12678:	30257830 	.word	0x30257830
   1267c:	0d217832 	.word	0x0d217832
   12680:	0000000a 	.word	0x0000000a
   12684:	6c696166 	.word	0x6c696166
   12688:	74206465 	.word	0x74206465
   1268c:	6572206f 	.word	0x6572206f
   12690:	76696563 	.word	0x76696563
   12694:	79622065 	.word	0x79622065
   12698:	20736574 	.word	0x20736574
   1269c:	20726f66 	.word	0x20726f66
   126a0:	6d6d6f63 	.word	0x6d6d6f63
   126a4:	20646e61 	.word	0x20646e61
   126a8:	30257830 	.word	0x30257830
   126ac:	0d217832 	.word	0x0d217832
   126b0:	0000000a 	.word	0x0000000a
   126b4:	00005796 	.word	0x00005796
   126b8:	0000576e 	.word	0x0000576e
   126bc:	00005772 	.word	0x00005772
   126c0:	00005776 	.word	0x00005776
   126c4:	0000577a 	.word	0x0000577a
   126c8:	0000577e 	.word	0x0000577e
   126cc:	00005782 	.word	0x00005782
   126d0:	00005786 	.word	0x00005786
   126d4:	0000578a 	.word	0x0000578a
   126d8:	0000578e 	.word	0x0000578e
   126dc:	00005834 	.word	0x00005834
   126e0:	0000580c 	.word	0x0000580c
   126e4:	00005812 	.word	0x00005812
   126e8:	00005818 	.word	0x00005818
   126ec:	00005818 	.word	0x00005818
   126f0:	0000581e 	.word	0x0000581e
   126f4:	0000581e 	.word	0x0000581e
   126f8:	0000581e 	.word	0x0000581e
   126fc:	00005824 	.word	0x00005824
   12700:	0000582a 	.word	0x0000582a
   12704:	00000100 	.word	0x00000100
   12708:	00005936 	.word	0x00005936
   1270c:	0000590e 	.word	0x0000590e
   12710:	00005914 	.word	0x00005914
   12714:	0000591a 	.word	0x0000591a
   12718:	0000591a 	.word	0x0000591a
   1271c:	00005920 	.word	0x00005920
   12720:	00005920 	.word	0x00005920
   12724:	00005920 	.word	0x00005920
   12728:	00005926 	.word	0x00005926
   1272c:	0000592c 	.word	0x0000592c
   12730:	00005d62 	.word	0x00005d62
   12734:	00005d3e 	.word	0x00005d3e
   12738:	00005d44 	.word	0x00005d44
   1273c:	00005d4a 	.word	0x00005d4a
   12740:	00005d4a 	.word	0x00005d4a
   12744:	00005d50 	.word	0x00005d50
   12748:	00005d50 	.word	0x00005d50
   1274c:	00005d50 	.word	0x00005d50
   12750:	00005d56 	.word	0x00005d56
   12754:	00005d5c 	.word	0x00005d5c
   12758:	000078ce 	.word	0x000078ce
   1275c:	000078c8 	.word	0x000078c8
   12760:	000078c2 	.word	0x000078c2
   12764:	000078bc 	.word	0x000078bc
   12768:	000078d4 	.word	0x000078d4
   1276c:	000078dc 	.word	0x000078dc
   12770:	000078d4 	.word	0x000078d4
   12774:	000078b6 	.word	0x000078b6
   12778:	000078b0 	.word	0x000078b0
   1277c:	000078d4 	.word	0x000078d4
   12780:	000078aa 	.word	0x000078aa
   12784:	000078aa 	.word	0x000078aa
   12788:	000078a4 	.word	0x000078a4
   1278c:	0000789e 	.word	0x0000789e
   12790:	000078dc 	.word	0x000078dc
   12794:	00007946 	.word	0x00007946
   12798:	00007940 	.word	0x00007940
   1279c:	0000793a 	.word	0x0000793a
   127a0:	00007934 	.word	0x00007934
   127a4:	0000794c 	.word	0x0000794c
   127a8:	00007954 	.word	0x00007954
   127ac:	0000794c 	.word	0x0000794c
   127b0:	0000792e 	.word	0x0000792e
   127b4:	00007928 	.word	0x00007928
   127b8:	0000794c 	.word	0x0000794c
   127bc:	00007922 	.word	0x00007922
   127c0:	00007922 	.word	0x00007922
   127c4:	0000791c 	.word	0x0000791c
   127c8:	00007916 	.word	0x00007916
   127cc:	00007954 	.word	0x00007954
   127d0:	000079c0 	.word	0x000079c0
   127d4:	000079ba 	.word	0x000079ba
   127d8:	000079b4 	.word	0x000079b4
   127dc:	000079ae 	.word	0x000079ae
   127e0:	000079c6 	.word	0x000079c6
   127e4:	000079c6 	.word	0x000079c6
   127e8:	000079c6 	.word	0x000079c6
   127ec:	000079a8 	.word	0x000079a8
   127f0:	000079a2 	.word	0x000079a2
   127f4:	000079c6 	.word	0x000079c6
   127f8:	0000799c 	.word	0x0000799c
   127fc:	0000799c 	.word	0x0000799c
   12800:	00007996 	.word	0x00007996
   12804:	00007990 	.word	0x00007990
   12808:	33323130 	.word	0x33323130
   1280c:	37363534 	.word	0x37363534
   12810:	62613938 	.word	0x62613938
   12814:	66656463 	.word	0x66656463
   12818:	00000d31 	.word	0x00000d31
   1281c:	6e617254 	.word	0x6e617254
   12820:	72656673 	.word	0x72656673
   12824:	636e452d 	.word	0x636e452d
   12828:	6e69646f 	.word	0x6e69646f
   1282c:	00203a67 	.word	0x00203a67
   12830:	6e6e6f43 	.word	0x6e6e6f43
   12834:	69746365 	.word	0x69746365
   12838:	203a6e6f 	.word	0x203a6e6f
   1283c:	00000000 	.word	0x00000000
   12840:	50545448 	.word	0x50545448
   12844:	0000002f 	.word	0x0000002f
   12848:	20544547 	.word	0x20544547
   1284c:	00000000 	.word	0x00000000
   12850:	54534f50 	.word	0x54534f50
   12854:	00000020 	.word	0x00000020
   12858:	454c4544 	.word	0x454c4544
   1285c:	00204554 	.word	0x00204554
   12860:	20545550 	.word	0x20545550
   12864:	00000000 	.word	0x00000000
   12868:	4954504f 	.word	0x4954504f
   1286c:	20534e4f 	.word	0x20534e4f
   12870:	00000000 	.word	0x00000000
   12874:	44414548 	.word	0x44414548
   12878:	00000020 	.word	0x00000020
   1287c:	54544820 	.word	0x54544820
   12880:	2e312f50 	.word	0x2e312f50
   12884:	000a0d31 	.word	0x000a0d31
   12888:	72657355 	.word	0x72657355
   1288c:	6567412d 	.word	0x6567412d
   12890:	203a746e 	.word	0x203a746e
   12894:	00000000 	.word	0x00000000
   12898:	74736f48 	.word	0x74736f48
   1289c:	0000203a 	.word	0x0000203a
   128a0:	6e6e6f43 	.word	0x6e6e6f43
   128a4:	69746365 	.word	0x69746365
   128a8:	203a6e6f 	.word	0x203a6e6f
   128ac:	7065654b 	.word	0x7065654b
   128b0:	696c412d 	.word	0x696c412d
   128b4:	0a0d6576 	.word	0x0a0d6576
   128b8:	00000000 	.word	0x00000000
   128bc:	65636341 	.word	0x65636341
   128c0:	452d7470 	.word	0x452d7470
   128c4:	646f636e 	.word	0x646f636e
   128c8:	3a676e69 	.word	0x3a676e69
   128cc:	000a0d20 	.word	0x000a0d20
   128d0:	65636341 	.word	0x65636341
   128d4:	432d7470 	.word	0x432d7470
   128d8:	73726168 	.word	0x73726168
   128dc:	203a7465 	.word	0x203a7465
   128e0:	2d667475 	.word	0x2d667475
   128e4:	000a0d38 	.word	0x000a0d38
   128e8:	6e617254 	.word	0x6e617254
   128ec:	72656673 	.word	0x72656673
   128f0:	636e452d 	.word	0x636e452d
   128f4:	6e69646f 	.word	0x6e69646f
   128f8:	63203a67 	.word	0x63203a67
   128fc:	6b6e7568 	.word	0x6b6e7568
   12900:	0a0d6465 	.word	0x0a0d6465
   12904:	00000000 	.word	0x00000000
   12908:	00007525 	.word	0x00007525
   1290c:	746e6f43 	.word	0x746e6f43
   12910:	2d746e65 	.word	0x2d746e65
   12914:	676e654c 	.word	0x676e654c
   12918:	203a6874 	.word	0x203a6874
   1291c:	00000000 	.word	0x00000000
   12920:	656d7461 	.word	0x656d7461
   12924:	2e312f6c 	.word	0x2e312f6c
   12928:	00322e30 	.word	0x00322e30
   1292c:	70747468 	.word	0x70747468
   12930:	002f2f3a 	.word	0x002f2f3a
   12934:	70747468 	.word	0x70747468
   12938:	2f2f3a73 	.word	0x2f2f3a73
   1293c:	00000000 	.word	0x00000000
   12940:	42002000 	.word	0x42002000
   12944:	42002400 	.word	0x42002400
   12948:	42002800 	.word	0x42002800

0001294c <_tcc_apbcmasks>:
   1294c:	00000100 00000200 00000400              ............

00012958 <_tcc_cc_nums>:
   12958:	00020204                                ....

0001295c <_tcc_gclk_ids>:
   1295c:	001b1a1a                                ....

00012960 <_tcc_maxs>:
   12960:	00ffffff 00ffffff 0000ffff              ............

0001296c <_tcc_ow_nums>:
   1296c:	00020408                                ....

00012970 <_tcc_intflag>:
   12970:	00000001 00000002 00000004 00000008     ................
   12980:	00001000 00002000 00004000 00008000     ..... ...@......
   12990:	00010000 00020000 00040000 00080000     ................

000129a0 <tcc_interrupt_vectors.12458>:
   129a0:	0011100f 42000800 42000c00 42001000     .......B...B...B
   129b0:	42001400 42001800 42001c00              ...B...B...B

000129bc <__FUNCTION__.14891>:
   129bc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   129cc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   129dc:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   129ec:	6320746c 0000646d 0000a2d0 0000a2a0     lt cmd..........
   129fc:	0000a298 0000a2b0 0000a2a8 0000a2c8     ................
   12a0c:	0000a2b8 0000a2c0                       ........

00012a14 <__FUNCTION__.13073>:
   12a14:	5f666968 646e6573 00000000              hif_send....

00012a20 <__FUNCTION__.13083>:
   12a20:	5f666968 00727369                       hif_isr.

00012a28 <__FUNCTION__.13089>:
   12a28:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00012a38 <__FUNCTION__.13101>:
   12a38:	5f666968 65636572 00657669              hif_receive.

00012a44 <__FUNCTION__.13117>:
   12a44:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   12a54:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   12a64:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   12a74:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   12a84:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   12a94:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   12aa4:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   12ab4:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   12ac4:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   12ad4:	6c616320 6361626c 7369206b 746f6e20      callback is not
   12ae4:	67657220 65747369 00646572 6b6f6353      registered.Scok
   12af4:	63207465 626c6c61 206b6361 6e207369     et callback is n
   12b04:	7220746f 73696765 65726574 00000064     ot registered...
   12b14:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   12b24:	20746f6e 69676572 72657473 00006465     not registered..
   12b34:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   12b44:	6e207369 7220746f 73696765 65726574     is not registere
   12b54:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   12b64:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   12b74:	64657265 00000000 66696828 6e692029     ered....(hif) in
   12b84:	696c6176 72672064 2070756f 00004449     valid group ID..
   12b94:	66696828 6f682029 61207473 64207070     (hif) host app d
   12ba4:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   12bb4:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   12bc4:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   12bd4:	66696828 61462029 2065736c 65746e69     (hif) False inte
   12be4:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   12bf4:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   12c04:	7265746e 74707572 67657220 00000000     nterrupt reg....
   12c14:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   12c24:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   12c34:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   12c44:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   12c54:	696c6176 72612064 656d7567 0000746e     valid argument..
   12c64:	20505041 75716552 65747365 69532064     APP Requested Si
   12c74:	6920657a 616c2073 72656772 61687420     ze is larger tha
   12c84:	6874206e 65722065 65766963 75622064     n the recived bu
   12c94:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   12ca4:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   12cb4:	65747365 64412064 73657264 65622073     ested Address be
   12cc4:	646e6f79 65687420 63657220 64657669     yond the recived
   12cd4:	66756220 20726566 72646461 20737365      buffer address 
   12ce4:	20646e61 676e656c 00006874 20705247     and length..GRp 
   12cf4:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   12d04:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   12d14:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   12d24:	6b617720 74207075 63206568 00706968      wakup the chip.

00012d34 <__FUNCTION__.13052>:
   12d34:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00012d40 <__FUNCTION__.13081>:
   12d40:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00012d50 <__FUNCTION__.13109>:
   12d50:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   12d60:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   12d70:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   12d80:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   12d90:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   12da0:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   12db0:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   12dc0:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   12dd0:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   12de0:	20706557 2079656b 65646e69 64252078     Wep key index %d
   12df0:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   12e00:	2079656b 676e656c 25206874 00000a64     key length %d...
   12e10:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   12e20:	656c2079 6874676e 00000000 65646e75     y length....unde
   12e30:	656e6966 65732064 79742063 00006570     fined sec type..
   12e40:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   12e50:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   12e60:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   12e70:	69754220 2520646c 69542073 2520656d      Build %s Time %
   12e80:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   12e90:	69726420 20726576 20726576 7525203a      driver ver : %u
   12ea0:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   12eb0:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   12ec0:	313a3631 32323a33 00000000 20727041     16:13:22....Apr 
   12ed0:	32203432 00383130 76697244 62207265     24 2018.Driver b
   12ee0:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   12ef0:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   12f00:	65562065 6f697372 0000006e              e Version...

00012f0c <__FUNCTION__.12915>:
   12f0c:	70696863 6b61775f 00000065              chip_wake...

00012f18 <__FUNCTION__.12964>:
   12f18:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   12f28:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   12f38:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   12f48:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   12f58:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   12f68:	70696863 00000000 76697244 65567265     chip....DriverVe
   12f78:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00012f88 <__FUNCTION__.12962>:
   12f88:	645f6d6e 695f7672 0074696e              nm_drv_init.

00012f94 <__FUNCTION__.12969>:
   12f94:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   12fa4:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   12fb4:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   12fc4:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   12fd4:	73616c66 69642068 6c626173 61662065     flash disable fa
   12fe4:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   12ff4:	6c696166 696e6920 75622074 00000073     fail init bus...
   13004:	6c696166 74206465 6e65206f 656c6261     failed to enable
   13014:	746e6920 75727265 2e737470 0000002e      interrupts.....
   13024:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   13034:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   13044:	20444920 0a786c25 00000000 0000b2cc      ID %lx.........
   13054:	0000b2cc 0000b2fc 0000b27e 0000b2a2     ........~.......
   13064:	0000b2b0 0000b2e2 0000b2e2 0000b32a     ............*...
   13074:	0000b262 0000b364 0000b364 0000b364     b...d...d...d...
   13084:	0000b364 0000b2be cac4c9c3              d...........

00013090 <__FUNCTION__.12268>:
   13090:	5f697073 00646d63                       spi_cmd.

00013098 <__FUNCTION__.12275>:
   13098:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000130a8 <__FUNCTION__.12284>:
   130a8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000130b4 <__FUNCTION__.12300>:
   130b4:	5f697073 61746164 6165725f 00000064     spi_data_read...

000130c4 <__FUNCTION__.12315>:
   130c4:	5f697073 61746164 6972775f 00006574     spi_data_write..

000130d4 <__FUNCTION__.12327>:
   130d4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000130e4 <__FUNCTION__.12338>:
   130e4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000130f4 <__FUNCTION__.12350>:
   130f4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00013104 <__FUNCTION__.12363>:
   13104:	735f6d6e 725f6970 00646165              nm_spi_read.

00013110 <__FUNCTION__.12384>:
   13110:	735f6d6e 695f6970 0074696e              nm_spi_init.

0001311c <crc7_syndrome_table>:
   1311c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1312c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1313c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1314c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1315c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1316c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1317c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1318c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1319c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   131ac:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   131bc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   131cc:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   131dc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   131ec:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   131fc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1320c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1321c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1322c:	6e692064 6e726574 72206c61 20646165     d internal read 
   1323c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   1324c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   1325c:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   1326c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1327c:	6e692064 6e726574 72206c61 20646165     d internal read 
   1328c:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   1329c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   132ac:	6e726574 77206c61 65746972 6f727020     ternal write pro
   132bc:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   132cc:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   132dc:	20646d63 64616572 69686320 64692070     cmd read chip id
   132ec:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   132fc:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1330c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1331c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1332c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1333c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1334c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1335c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1336c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1337c:	00000000 65736552 6e612074 65722064     ....Reset and re
   1338c:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   1339c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   133ac:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   133bc:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   133cc:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   133dc:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   133ec:	69727720 62206574 6b636f6c 30252820      write block (%0
   133fc:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1340c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1341c:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   1342c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1343c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1344c:	61642064 62206174 6b636f6c 69727720     d data block wri
   1345c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1346c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1347c:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1348c:	63726320 69727720 202c6574 20737562      crc write, bus 
   1349c:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   134ac:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   134bc:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   134cc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   134dc:	72206174 6f707365 2065736e 64616572     ta response read
   134ec:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   134fc:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1350c:	206b636f 61746164 69727720 2e2e6574     ock data write..
   1351c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1352c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1353c:	73756220 72726520 2e2e726f 0000002e      bus error......
   1354c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1355c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1356c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1357c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1358c:	656c6961 61642064 72206174 6f707365     ailed data respo
   1359c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   135ac:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   135bc:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   135cc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   135dc:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   135ec:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   135fc:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1360c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1361c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1362c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1363c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1364c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1365c:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1366c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1367c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1368c:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1369c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   136ac:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   136bc:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   136cc:	6e612074 65722064 20797274 25206425     t and retry %d %
   136dc:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   136ec:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   136fc:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   1370c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1371c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   1372c:	74697277 65722065 25282067 29783830     write reg (%08x)
   1373c:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   1374c:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   1375c:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   1376c:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   1377c:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1378c:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   1379c:	4449206e 25203d20 000a0d64 0000ca20     n ID = %d... ...
   137ac:	0000ca20 0000c9fc 0000ca20 0000c9fc      ....... .......
   137bc:	0000c9e2 0000c9e2 0000ca20 0000ca20     ........ ... ...
   137cc:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   137dc:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   137ec:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   137fc:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1380c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1381c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1382c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1383c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1384c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1385c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1386c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1387c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1388c:	0000ca20 0000ca20 0000ca20 0000ca20      ... ... ... ...
   1389c:	0000ca20 0000ca20 0000ca20 0000c9fc      ... ... .......
   138ac:	0000c9fc 0000ca04 0000ca04 0000ca04     ................
   138bc:	0000ca04 0000ccaa 0000cca6 0000cca6     ................
   138cc:	0000cd08 0000cd08 0000ccbe 0000ccb0     ................
   138dc:	0000ccc4 0000ccf6 0000cec8 0000cea8     ................
   138ec:	0000cea8 0000cf34 0000ceba 0000ced6     ....4...........
   138fc:	0000ceac 0000cee4 0000cf24 6d726966     ........$...firm
   1390c:	65726177 776f6420 616f6c6e 65722064     ware download re
   1391c:	73657571 0d646574 00000000 70747468     quested.....http
   1392c:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   1393c:	652e6e6e 7e2f7564 63726177 2f726568     nn.edu/~warcher/
   1394c:	35657365 6d2f3631 64617465 2d617461     ese516/metadata-
   1395c:	2e696c63 006e6962 70747468 2f2f3a73     cli.bin.https://
   1396c:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   1397c:	7e2f7564 63726177 2f726568 35657365     du/~warcher/ese5
   1398c:	632f3631 622e696c 00006e69 6d726966     16/cli.bin..firm
   1399c:	65726177 63757320 73736563 6c6c7566     ware successfull
   139ac:	6f642079 6f6c6e77 64656461 00000d21     y downloaded!...
   139bc:	6d726966 65726177 736e7520 65636375     firmware unsucce
   139cc:	75667373 43202e6c 6b636568 676f6c20     ssful. Check log
   139dc:	726f6620 726f6d20 65642065 6c696174      for more detail
   139ec:	000d2e73 75206f4e 74616470 6f662065     s...No update fo
   139fc:	2e646e75 0000000d 202d2d2d 72617473     und.....--- star
   13a0c:	676e6974 65764520 65726772 56206e65     ting Evergreen V
   13a1c:	2d206425 202d2d2d 00000a0d 2e2e0a0d     %d ---- ........
   13a2c:	2d69572e 66206946 656c6961 6f742064     .Wi-Fi failed to
   13a3c:	6e6f6320 75676966 2e2e6572 00000d2e      configure......
   13a4c:	72616f42 6e692064 61697469 657a696c     Board initialize
   13a5c:	000d2e64 206c7374 756e616d 74636166     d...tsl manufact
   13a6c:	72657275 3a646920 25783020 0d783230     urer id: 0x%02x.
   13a7c:	0000000a 6e6e7552 20676e69 4d207361     ....Running as M
   13a8c:	20545451 72657355 7325203a 00000a0d     QTT User: %s....
   13a9c:	2f30672f 2f64656c 6d726966 65726177     /g0/led/firmware
   13aac:	0000002f 2f30672f 616c6572 662f3179     /.../g0/relay1/f
   13abc:	776d7269 2f657261 00000000 2f30672f     irmware/..../g0/
   13acc:	616c6572 662f3279 776d7269 2f657261     relay2/firmware/
   13adc:	00000000 2f30672f 72677075 2f656461     ..../g0/upgrade/
   13aec:	6d726966 65726177 0000002f 2f30672f     firmware/.../g0/
   13afc:	706d7570 7269662f 7261776d 00002f65     pump/firmware/..
   13b0c:	7349514d 00007064 0000f054 0000f036     MQIsdp..T...6...
   13b1c:	0000eff0 0000ef0e 0000eff0 0000f028     ............(...
   13b2c:	0000eff0 0000ef0e 0000f036 0000f036     ........6...6...
   13b3c:	0000f028 0000ef0e 0000ef06 0000ef06     (...............
   13b4c:	0000ef06 0000f26c 0000f6b4 0000f574     ....l.......t...
   13b5c:	0000f574 0000f570 0000f68c 0000f68c     t...p...........
   13b6c:	0000f67e 0000f570 0000f68c 0000f67e     ~...p.......~...
   13b7c:	0000f68c 0000f570 0000f694 0000f694     ....p...........
   13b8c:	0000f694 0000f898                       ........

00013b94 <_global_impure_ptr>:
   13b94:	20000010                                ... 

00013b98 <__sf_fake_stderr>:
	...

00013bb8 <__sf_fake_stdin>:
	...

00013bd8 <__sf_fake_stdout>:
	...
   13bf8:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   13c08:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   13c18:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   13c28:	37363534 62613938 66656463 20200000              456789abcdef.

00013c35 <_ctype_>:
   13c35:	20202000 20202020 28282020 20282828     .         ((((( 
   13c45:	20202020 20202020 20202020 20202020                     
   13c55:	10108820 10101010 10101010 10101010      ...............
   13c65:	04040410 04040404 10040404 10101010     ................
   13c75:	41411010 41414141 01010101 01010101     ..AAAAAA........
   13c85:	01010101 01010101 01010101 10101010     ................
   13c95:	42421010 42424242 02020202 02020202     ..BBBBBB........
   13ca5:	02020202 02020202 02020202 10101010     ................
   13cb5:	00000020 00000000 00000000 00000000      ...............
	...

00013d38 <_init>:
   13d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d3a:	46c0      	nop			; (mov r8, r8)
   13d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13d3e:	bc08      	pop	{r3}
   13d40:	469e      	mov	lr, r3
   13d42:	4770      	bx	lr

00013d44 <__init_array_start>:
   13d44:	000040dd 	.word	0x000040dd

00013d48 <_fini>:
   13d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d4a:	46c0      	nop			; (mov r8, r8)
   13d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13d4e:	bc08      	pop	{r3}
   13d50:	469e      	mov	lr, r3
   13d52:	4770      	bx	lr

00013d54 <__fini_array_start>:
   13d54:	000040b5 	.word	0x000040b5
